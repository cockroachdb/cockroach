# ----------------------------------------------------------------------
# Simple insert tests.
# ----------------------------------------------------------------------
new-index min-partition-size=1 max-partition-size=5 beam-size=2
----
• 1 (0, 0)

# Insert vectors.
insert
vec1: (1, 2)
vec2: (7, 4)
vec3: (4, 3)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
└───• vec3 (4, 3)

# Insert a duplicate vector.
insert
vec4: (4, 3)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
└───• vec4 (4, 3)

# Insert a duplicate child key and expect existing vector to be overwritten.
insert
vec2: (5, 6)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec4 (4, 3)
├───• vec3 (4, 3)
└───• vec2 (5, 6)

# Insert more vectors.
insert
vec5: (8, 11)
vec6: (14, 1)
vec7: (0, 0)
vec8: (0, 4)
vec9: (-2, 8)
----
• 1 (0, 0)
│
├───• 2 (9, 6)
│   │
│   ├───• vec6 (14, 1)
│   ├───• vec5 (8, 11)
│   └───• vec2 (5, 6)
│
├───• 5 (4, 3)
│   │
│   ├───• vec4 (4, 3)
│   └───• vec3 (4, 3)
│
└───• 4 (-0.25, 3.5)
    │
    ├───• vec9 (-2, 8)
    ├───• vec8 (0, 4)
    ├───• vec1 (1, 2)
    └───• vec7 (0, 0)

# Overwrite vector with a new value that won't be found in the index, causing
# duplicate child keys that point to the same vector (but with different
# quantized values). This simulates the situation where updating a vector fails
# to locate the existing entry in the index and now there are multiple
# references to the same vector. The duplicates should be detected before being
# returned to the caller.
insert
vec2: (-5, -5)
----
• 1 (0, 0)
│
├───• 2 (9, 6)
│   │
│   ├───• vec6 (14, 1)
│   ├───• vec5 (8, 11)
│   └───• vec2 (-5, -5)
│
├───• 5 (4, 3)
│   │
│   ├───• vec4 (4, 3)
│   ├───• vec3 (4, 3)
│   └───• vec1 (1, 2)
│
├───• 7 (-1, 6)
│   │
│   ├───• vec8 (0, 4)
│   └───• vec9 (-2, 8)
│
└───• 6 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    └───• vec2 (-5, -5)

search max-results=10 beam-size=8
(-5, -5)
----
vec2: 0
vec7: 50
vec1: 85
vec8: 106
vec3: 145
vec4: 145
vec9: 178
vec6: 397
vec5: 425
10 leaf vectors, 14 vectors, 9 full vectors, 5 partitions

# ----------------------------------------------------------------------
# Use Cosine distance metric.
# ----------------------------------------------------------------------
new-index distance-metric=Cosine min-partition-size=1 max-partition-size=4 beam-size=2
----
• 1 (0, 0)

insert
vec1: (0, 1)
vec2: (2, 0)
vec3: (-3, 0)
vec4: (0, -4)
vec5: (4, 3)
vec6: (4, 3)
vec7: (0, 0)
vec8: (-4, -3)
vec9: (4, -3)
vec10: (-4, 3)
----
• 1 (0, 0)
│
├───• 5 (0.8, 0.6)
│   │
│   ├───• vec5 (4, 3)
│   └───• vec6 (4, 3)
│
├───• 7 (0, 0.5)
│   │
│   ├───• vec7 (0, 0)
│   ├───• vec1 (0, 1)
│   └───• vec10 (-4, 3)
│
├───• 4 (0.5, -0.5)
│   │
│   ├───• vec4 (0, -4)
│   ├───• vec2 (2, 0)
│   └───• vec9 (4, -3)
│
└───• 6 (-0.9, -0.3)
    │
    ├───• vec3 (-3, 0)
    └───• vec8 (-4, -3)

# ----------------------------------------------------------------------
# Use InnerProduct distance metric.
# ----------------------------------------------------------------------
new-index distance-metric=InnerProduct min-partition-size=1 max-partition-size=4 beam-size=2
----
• 1 (0, 0)

insert
vec1: (0, 1)
vec2: (2, 0)
vec3: (-3, 0)
vec4: (0, -4)
vec5: (4, 3)
vec6: (4, 3)
vec7: (0, 0)
vec8: (-4, -3)
vec9: (4, -3)
vec10: (-4, 3)
----
• 1 (0, 0)
│
├───• 5 (4, 3)
│   │
│   ├───• vec5 (4, 3)
│   └───• vec6 (4, 3)
│
├───• 7 (0, 0.5)
│   │
│   ├───• vec7 (0, 0)
│   ├───• vec1 (0, 1)
│   └───• vec10 (-4, 3)
│
├───• 4 (1, -2)
│   │
│   ├───• vec4 (0, -4)
│   ├───• vec2 (2, 0)
│   └───• vec9 (4, -3)
│
└───• 6 (-3.5, -1.5)
    │
    ├───• vec3 (-3, 0)
    └───• vec8 (-4, -3)
