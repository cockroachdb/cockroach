# ----------------------------------------------------------------------
# Step through typical split of a root partition.
# ----------------------------------------------------------------------

load-index min-partition-size=1 max-partition-size=3 beam-size=2 new-fixups
• 1 (6.8, 4.2)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
└───• vec5 (14, 1)
----
Loaded 4 vectors.

# Update splitting root partition to Splitting state.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [Splitting:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
└───• vec5 (14, 1)

# Create empty left sub-partition #2.
force-split partition-key=1 root=2 steps=1
----
• 2 (10.5, 2.5) [Updating:1]

# Create empty right sub-partition #3.
force-split partition-key=1 root=3 steps=1
----
• 3 (2.5, 2.5) [Updating:1]

# Update splitting root partition to DrainingForSplit state.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [DrainingForSplit:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
└───• vec5 (14, 1)

# Add ~1/2 vectors to left sub-partition #2.
force-split partition-key=1 root=2 steps=1
----
• 2 (10.5, 2.5) [Updating:1]
│
├───• vec5 (14, 1)
└───• vec2 (7, 4)

# Add ~1/2 vectors to right sub-partition #3.
force-split partition-key=1 root=3 steps=1
----
• 3 (2.5, 2.5) [Updating:1]
│
├───• vec3 (4, 3)
└───• vec1 (1, 2)

# Update left sub-partition #2 to Ready state.
force-split partition-key=1 root=2 steps=1
----
• 2 (10.5, 2.5)
│
├───• vec5 (14, 1)
└───• vec2 (7, 4)

# Update right sub-partition #3 to Ready state.
force-split partition-key=1 root=3 steps=1
----
• 3 (2.5, 2.5)
│
├───• vec3 (4, 3)
└───• vec1 (1, 2)

# Remove children from root partition.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [DrainingForSplit:2,3]

# Update splitting root partition to AddingLevel state.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [AddingLevel:2,3]

# Add left sub-partition #2 to root partition.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [AddingLevel:2,3]
│
└───• 2 (10.5, 2.5)
    │
    ├───• vec5 (14, 1)
    └───• vec2 (7, 4)

# Add right sub-partition #3 to root partition.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [AddingLevel:2,3]
│
├───• 2 (10.5, 2.5)
│   │
│   ├───• vec5 (14, 1)
│   └───• vec2 (7, 4)
│
└───• 3 (2.5, 2.5)
    │
    ├───• vec3 (4, 3)
    └───• vec1 (1, 2)

# Update splitting root partition to Ready state.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2)
│
├───• 2 (10.5, 2.5)
│   │
│   ├───• vec5 (14, 1)
│   └───• vec2 (7, 4)
│
└───• 3 (2.5, 2.5)
    │
    ├───• vec3 (4, 3)
    └───• vec1 (1, 2)

# ----------------------------------------------------------------------
# Try to split a root partition with only 1 vector.
# ----------------------------------------------------------------------

load-index min-partition-size=1 max-partition-size=2 beam-size=2 new-fixups
• 1 (6.8, 4.2)
│
└───• 2 (2.5, 2.5)
    │
    ├───• vec1 (1, 2)
    └───• vec2 (4, 3)

----
Loaded 2 vectors.

# Step to point where partition #2 is copied to target sub-partition #3.
force-split partition-key=1 root=3 steps=5
----
• 3 (2.5, 2.5) [Updating:1]
│
└───• 2 (2.5, 2.5)
    │
    ├───• vec1 (1, 2)
    └───• vec2 (4, 3)

# Next steps should duplicate the last remaining vector in partition #1 and also
# add it to partition #4. This will prevent partition #4 from being empty, which
# would be a violation of the constraint that the K-means tree must be balanced.
force-split partition-key=1 root=4 steps=1
----
• 4 (2.5, 2.5) [Updating:1]
│
└───• 2 (2.5, 2.5)
    │
    ├───• vec1 (1, 2)
    └───• vec2 (4, 3)

# Finish the split, with partition #2 a child of both sub-partitions.
force-split partition-key=1
----
• 1 (6.8, 4.2)
│
├───• 3 (2.5, 2.5)
│   │
│   └───• 2 (2.5, 2.5)
│       │
│       ├───• vec1 (1, 2)
│       └───• vec2 (4, 3)
│
└───• 4 (2.5, 2.5)
    │
    └───• 2 (2.5, 2.5)
        │
        ├───• vec1 (1, 2)
        └───• vec2 (4, 3)

# ----------------------------------------------------------------------
# Search the tree when the root is in splitting states.
# ----------------------------------------------------------------------

load-index min-partition-size=1 max-partition-size=3 beam-size=4 new-fixups
• 1 (7.25, 4.75)
│
├───• 2 (11, 6)
│   │
│   ├───• vec6 (14, 1)
│   └───• vec5 (8, 11)
│
├───• 3 (4.3333, 4)
│   │
│   ├───• vec3 (4, 3)
│   └───• vec4 (4, 3)
│
├───• 4 (-1, 6)
│   │
│   ├───• vec9 (-2, 8)
│   └───• vec8 (0, 4)
│
└───• 5 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    ├───• vec1 (1, 2)
    └───• vec2 (-5, -5)
----
Loaded 9 vectors.

# Move to the Splitting state.
force-split partition-key=1 steps=1
----
• 1 (7.25, 4.75) [Splitting:6,7]
│
├───• 2 (11, 6)
│   │
│   ├───• vec6 (14, 1)
│   └───• vec5 (8, 11)
│
├───• 3 (4.3333, 4)
│   │
│   ├───• vec3 (4, 3)
│   └───• vec4 (4, 3)
│
├───• 4 (-1, 6)
│   │
│   ├───• vec9 (-2, 8)
│   └───• vec8 (0, 4)
│
└───• 5 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    ├───• vec1 (1, 2)
    └───• vec2 (-5, -5)

# Search the tree without triggering fixups.
# NOTE: vec4 is an extra duplicate zero (within error bound of zero).
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 13 vectors, 6 full vectors, 5 partitions

# Move to the DrainingForSplit state, where sub-partition #6 has vectors.
force-split partition-key=1 steps=4
----
• 1 (7.25, 4.75) [DrainingForSplit:6,7]
│
├───• 2 (11, 6)
│   │
│   ├───• vec6 (14, 1)
│   └───• vec5 (8, 11)
│
├───• 3 (4.3333, 4)
│   │
│   ├───• vec3 (4, 3)
│   └───• vec4 (4, 3)
│
├───• 4 (-1, 6)
│   │
│   ├───• vec9 (-2, 8)
│   └───• vec8 (0, 4)
│
└───• 5 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    ├───• vec1 (1, 2)
    └───• vec2 (-5, -5)

format-tree root=6
----
• 6 (-1.1667, 2.5) [Updating:1]
│
├───• 4 (-1, 6)
│   │
│   ├───• vec9 (-2, 8)
│   └───• vec8 (0, 4)
│
└───• 5 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    ├───• vec1 (1, 2)
    └───• vec2 (-5, -5)

# Search the tree, ensure that duplicates are not returned.
# NOTE: vec4 is an extra duplicate zero (within error bound of zero).
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 15 vectors, 6 full vectors, 7 partitions

# Move to the point where partition #1 children have been cleared.
force-split partition-key=1 steps=4
----
• 1 (7.25, 4.75) [DrainingForSplit:6,7]

# Search the tree, ensure that results are still returned.
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 13 vectors, 6 full vectors, 7 partitions

# Move to the AddingLevel state, where root partition's level has increased.
force-split partition-key=1 steps=1
----
• 1 (7.25, 4.75) [AddingLevel:6,7]

# Search the tree, ensure that results are still returned.
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 13 vectors, 6 full vectors, 7 partitions

# Move to point where sub-partitions #6 and #7 have been added to the root.
force-split partition-key=1 steps=2
----
• 1 (7.25, 4.75) [AddingLevel:6,7]
│
├───• 6 (-1.1667, 2.5)
│   │
│   ├───• 4 (-1, 6)
│   │   │
│   │   ├───• vec9 (-2, 8)
│   │   └───• vec8 (0, 4)
│   │
│   └───• 5 (-1.3333, -1)
│       │
│       ├───• vec7 (0, 0)
│       ├───• vec1 (1, 2)
│       └───• vec2 (-5, -5)
│
└───• 7 (7.6666, 5)
    │
    ├───• 2 (11, 6)
    │   │
    │   ├───• vec6 (14, 1)
    │   └───• vec5 (8, 11)
    │
    └───• 3 (4.3333, 4)
        │
        ├───• vec3 (4, 3)
        └───• vec4 (4, 3)

# Search the tree.
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 15 vectors, 6 full vectors, 7 partitions

# Finish the split.
force-split partition-key=1 steps=1
----
• 1 (7.25, 4.75)
│
├───• 6 (-1.1667, 2.5)
│   │
│   ├───• 4 (-1, 6)
│   │   │
│   │   ├───• vec9 (-2, 8)
│   │   └───• vec8 (0, 4)
│   │
│   └───• 5 (-1.3333, -1)
│       │
│       ├───• vec7 (0, 0)
│       ├───• vec1 (1, 2)
│       └───• vec2 (-5, -5)
│
└───• 7 (7.6666, 5)
    │
    ├───• 2 (11, 6)
    │   │
    │   ├───• vec6 (14, 1)
    │   └───• vec5 (8, 11)
    │
    └───• 3 (4.3333, 4)
        │
        ├───• vec3 (4, 3)
        └───• vec4 (4, 3)

# Search the tree.
search max-results=4 discard-fixups
(-1, 2)
----
vec1: 4 (centroid=3.8)
vec7: 5 (centroid=1.67)
vec8: 5 (centroid=2.24)
vec3: 26 (centroid=1.05)
vec4: 26 (centroid=1.05)
9 leaf vectors, 15 vectors, 6 full vectors, 7 partitions

# ----------------------------------------------------------------------
# Insert into the tree when the root is in splitting states.
# ----------------------------------------------------------------------

load-index min-partition-size=1 max-partition-size=4 beam-size=2 new-fixups
• 1 (6.8, 4.2)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
└───• vec3 (14, 1)
----
Loaded 3 vectors.

# Update splitting root partition to Splitting state.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [Splitting:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
└───• vec3 (14, 1)

# Insert vector into root.
search-for-insert discard-fixups
(-3, 6)
----
partition 1, centroid=(6.8, 4.2), sqdist=0

insert discard-fixups
vec4: (-3, 6)
----
• 1 (6.8, 4.2) [Splitting:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (14, 1)
└───• vec4 (-3, 6)

# Move to DrainingForSplit state where the sub-partitions are still empty.
force-split partition-key=1 steps=3
----
• 1 (6.8, 4.2) [DrainingForSplit:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (14, 1)
└───• vec4 (-3, 6)

# Insert vector that should be redirected to sub-partition #2.
search-for-insert discard-fixups
(10, 5)
----
partition 2, centroid=(10.5, 2.5), sqdist=6.5

insert discard-fixups
vec5: (10, 5)
----
• 1 (6.8, 4.2) [DrainingForSplit:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (14, 1)
└───• vec4 (-3, 6)

format-tree root=2
----
• 2 (10.5, 2.5) [Updating:1]
│
└───• vec5 (10, 5)

# Copy vectors to sub-partitions.
force-split partition-key=1 steps=4 root=2
----
• 2 (10.5, 2.5)
│
├───• vec5 (10, 5)
├───• vec3 (14, 1)
└───• vec2 (7, 4)

# Insert vector that should be redirected to sub-partition #3.
search-for-insert discard-fixups
(0, 0)
----
partition 3, centroid=(-1, 4), sqdist=17

insert discard-fixups root=3
vec6: (0, 0)
----
• 3 (-1, 4)
│
├───• vec1 (1, 2)
├───• vec4 (-3, 6)
└───• vec6 (0, 0)

# Clear vectors in root.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [DrainingForSplit:2,3]

# Insert another vector that goes to sub-partition #2.
search-for-insert discard-fixups
(8, 8)
----
partition 2, centroid=(10.5, 2.5), sqdist=36.5

insert discard-fixups root=2
vec7: (8, 8)
----
• 2 (10.5, 2.5)
│
├───• vec5 (10, 5)
├───• vec3 (14, 1)
├───• vec2 (7, 4)
└───• vec7 (8, 8)

# Move to the AddingLevel state in the root partition.
force-split partition-key=1 steps=1
----
• 1 (6.8, 4.2) [AddingLevel:2,3]

# Start split of child partition #2. This should only get to the Splitting step
# before aborting, since its parent partition #1 is not in the Ready state.
force-split partition-key=2 parent-partition-key=1 steps=10 root=2
----
• 2 (10.5, 2.5) [Splitting:4,5]
│
├───• vec5 (10, 5)
├───• vec3 (14, 1)
├───• vec2 (7, 4)
└───• vec7 (8, 8)

# Insert another vector that should be redirected to sub-partition #2.
# NOTE: sqdist is 0 since we don't fetch the original full vectors in this case,
# but instead arbitrarily pick the first target as the insertion partition.
search-for-insert discard-fixups
(15, 5)
----
partition 2, centroid=(10.5, 2.5), sqdist=0

insert discard-fixups root=2
vec8: (15, 5)
----
• 2 (10.5, 2.5) [Splitting:4,5]
│
├───• vec5 (10, 5)
├───• vec3 (14, 1)
├───• vec2 (7, 4)
├───• vec7 (8, 8)
└───• vec8 (15, 5)

# Finish split of root partition.
force-split partition-key=1 steps=3
----
• 1 (6.8, 4.2)
│
├───• 2 (10.5, 2.5) [Splitting:4,5]
│   │
│   ├───• vec5 (10, 5)
│   ├───• vec3 (14, 1)
│   ├───• vec2 (7, 4)
│   ├───• vec7 (8, 8)
│   └───• vec8 (15, 5)
│
└───• 3 (-1, 4)
    │
    ├───• vec1 (1, 2)
    ├───• vec4 (-3, 6)
    └───• vec6 (0, 0)

# Finish split of child partition #2.
force-split partition-key=2 parent-partition-key=1
----
• 1 (6.8, 4.2)
│
├───• 5 (8.3333, 5.6667)
│   │
│   ├───• vec2 (7, 4)
│   ├───• vec7 (8, 8)
│   └───• vec5 (10, 5)
│
├───• 3 (-1, 4)
│   │
│   ├───• vec1 (1, 2)
│   ├───• vec4 (-3, 6)
│   └───• vec6 (0, 0)
│
└───• 4 (12, 3)
    │
    ├───• vec8 (15, 5)
    └───• vec3 (14, 1)

# ----------------------------------------------------------------------
# Delete from the tree when the root is in splitting states.
# ----------------------------------------------------------------------

load-index min-partition-size=1 max-partition-size=4 beam-size=2 discard-fixups new-fixups
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
├───• vec9 (6, 5)
└───• vec10 (5, 8)
----
Loaded 10 vectors.

# Delete vector in Splitting state.
force-split partition-key=1 steps=1
----
• 1 (0, 0) [Splitting:2,3]
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
├───• vec9 (6, 5)
└───• vec10 (5, 8)

delete discard-fixups
vec1
----
• 1 (0, 0) [Splitting:2,3]
│
├───• vec10 (5, 8)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec9 (6, 5)

# Delete vector in DrainingForSplit state where the sub-partitions are still
# empty. This will result in a dangling vector in the root partition, since the
# full vector is deleted in the primary index.
force-split partition-key=1 steps=3
----
• 1 (0, 0) [DrainingForSplit:2,3]
│
├───• vec10 (5, 8)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec9 (6, 5)

delete discard-fixups
vec2
----
• 1 (0, 0) [DrainingForSplit:2,3]
│
├───• vec10 (5, 8)
├───• vec2 (MISSING)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec9 (6, 5)

# Delete vector after vectors have been copied to sub-partitions. This should
# delete the vector in sub-partition #2, but leave it danging in the root
# partition.
force-split partition-key=1 steps=4
----
• 1 (0, 0) [DrainingForSplit:2,3]
│
├───• vec10 (5, 8)
├───• vec2 (MISSING)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec9 (6, 5)

format-tree root=2
----
• 2 (5.3333, 6.6667)
│
├───• vec10 (5, 8)
├───• vec7 (3, 5)
├───• vec3 (4, 3)
├───• vec4 (8, 11)
└───• vec8 (6, 8)

delete discard-fixups
vec3
----
• 1 (0, 0) [DrainingForSplit:2,3]
│
├───• vec10 (5, 8)
├───• vec2 (MISSING)
├───• vec3 (MISSING)
├───• vec4 (8, 11)
├───• vec5 (14, 1)
├───• vec6 (8, 6)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec9 (6, 5)

format-tree root=2
----
• 2 (5.3333, 6.6667)
│
├───• vec10 (5, 8)
├───• vec7 (3, 5)
├───• vec8 (6, 8)
└───• vec4 (8, 11)

# Delete vector after vectors have been cleared in the root. This should remove
# the vector from sub-partition #3.
force-split partition-key=1 steps=1
----
• 1 (0, 0) [DrainingForSplit:2,3]

delete discard-fixups root=3
vec4
----
• 3 (9.6667, 3.6667)
│
├───• vec6 (8, 6)
├───• vec9 (6, 5)
└───• vec5 (14, 1)

# Delete vector in AddingLevel state. This should remove the vector from
# sub-partition #3.
force-split partition-key=1 steps=1
----
• 1 (0, 0) [AddingLevel:2,3]

delete discard-fixups root=3
vec5
----
• 3 (9.6667, 3.6667)
│
├───• vec6 (8, 6)
└───• vec9 (6, 5)

# Finish split of root partition.
force-split partition-key=1
----
• 1 (0, 0)
│
├───• 2 (5.3333, 6.6667)
│   │
│   ├───• vec10 (5, 8)
│   ├───• vec7 (3, 5)
│   └───• vec8 (6, 8)
│
└───• 3 (9.6667, 3.6667)
    │
    ├───• vec6 (8, 6)
    └───• vec9 (6, 5)
