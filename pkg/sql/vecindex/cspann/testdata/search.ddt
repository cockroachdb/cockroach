# ----------
# Search tree with only root-level vectors.
# ----------
new-index min-partition-size=1 max-partition-size=4 beam-size=2
vec1: (1, 2)
vec2: (7, 4)
vec3: (4, 3)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
└───• vec3 (4, 3)

# Search for vector that has exact match.
search
(7, 4)
----
vec2: 0 (centroid=8.06)
3 leaf vectors, 3 vectors, 3 full vectors, 1 partitions

# Search for vector with no exact match.
search max-results=2
(3, 5)
----
vec3: 5 (centroid=5)
vec1: 13 (centroid=2.24)
3 leaf vectors, 3 vectors, 3 full vectors, 1 partitions

# ----------
# Search tree with multiple levels.
# ----------
new-index min-partition-size=1 max-partition-size=4 beam-size=2
vec1: (1, 2)
vec2: (7, 4)
vec3: (4, 3)
vec4: (-4, 5)
vec5: (1, 11)
vec6: (1, -6)
vec7: (0, 4)
vec8: (-2, 8)
vec9: (2, 8)
vec10: (0, 3)
vec11: (1, 1)
vec12: (5, 4)
vec13: (6, 2)
----
• 1 (1.5, 1.875)
│
├───• 2 (1, -2)
│   │
│   └───• vec6 (1, -6)
│
├───• 4 (-1.6667, 8)
│   │
│   ├───• vec8 (-2, 8)
│   ├───• vec4 (-4, 5)
│   ├───• vec5 (1, 11)
│   └───• vec9 (2, 8)
│
├───• 6 (0.3333, 3)
│   │
│   ├───• vec10 (0, 3)
│   ├───• vec7 (0, 4)
│   ├───• vec1 (1, 2)
│   └───• vec11 (1, 1)
│
└───• 7 (5.5, 3.5)
    │
    ├───• vec3 (4, 3)
    ├───• vec2 (7, 4)
    ├───• vec12 (5, 4)
    └───• vec13 (6, 2)

# Search for closest vectors with beam-size=1.
search max-results=2 beam-size=1
(1, 6)
----
vec7: 5 (centroid=1.05)
vec10: 10 (centroid=0.33)
4 leaf vectors, 8 vectors, 4 full vectors, 2 partitions

# Search for closest vectors with beam-size=2.
search max-results=2 beam-size=2
(1, 6)
----
vec7: 5 (centroid=1.05)
vec9: 5 (centroid=3.67)
8 leaf vectors, 12 vectors, 6 full vectors, 3 partitions

# ----------
# Search tree with only duplicate vectors.
# ----------
new-index min-partition-size=1 max-partition-size=4 beam-size=2
vec1: (4, 9)
vec2: (4, 9)
vec3: (4, 9)
vec4: (4, 9)
vec5: (4, 9)
vec6: (4, 9)
----
• 1 (4, 9)
│
├───• 2 (4, 9)
│   │
│   ├───• vec1 (4, 9)
│   └───• vec2 (4, 9)
│
└───• 3 (4, 9)
    │
    ├───• vec3 (4, 9)
    ├───• vec4 (4, 9)
    ├───• vec5 (4, 9)
    └───• vec6 (4, 9)

# Ensure that search result returns multiple keys.
search max-results=3
(5, 10)
----
vec1: 2 (centroid=0)
vec2: 2 (centroid=0)
vec3: 2 (centroid=0)
6 leaf vectors, 8 vectors, 6 full vectors, 3 partitions

# ----------
# Search tree with duplicate keys. This can happen when a vector is updated in
# the primary index, but it cannot be found in the secondary index.
# ----------
new-index min-partition-size=1 max-partition-size=3 beam-size=2
vec1: (1, 2)
vec2: (7, 4)
vec3: (4, 3)
vec4: (-4, 5)
vec5: (6, 1)
vec1: (10, 5)
vec1: (-2, -2)
----
• 1 (2, 3.5)
│
├───• 3 (-1.5, 3.5)
│   │
│   ├───• vec4 (-4, 5)
│   └───• vec1 (-2, -2)
│
├───• 4 (5, 2)
│   │
│   ├───• vec3 (4, 3)
│   └───• vec5 (6, 1)
│
└───• 5 (8.5, 4.5)
    │
    ├───• vec2 (7, 4)
    └───• vec1 (-2, -2)

# Ensure that search result doesn't contain duplicates.
search max-results=6
(1, 1)
----
vec3: 13 (centroid=1.41)
vec1: 18 (centroid=5.52)
vec5: 25 (centroid=1.41)
vec4: 41 (centroid=2.92)
4 leaf vectors, 7 vectors, 4 full vectors, 3 partitions

# Do not rerank results. This may cause a different vec1 duplicate to be
# returned.
search max-results=6 skip-rerank
(8, 9)
----
vec1: 17.8042 ±10.12 (centroid=1.58)
vec2: 28.1958 ±10.12 (centroid=1.58)
vec3: 45.6359 ±15.23 (centroid=1.41)
vec5: 74.3641 ±15.23 (centroid=1.41)
4 leaf vectors, 7 vectors, 0 full vectors, 3 partitions
