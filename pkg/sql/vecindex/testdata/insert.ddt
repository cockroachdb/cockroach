new-index min-partition-size=1 max-partition-size=4 beam-size=2
----
• 1 (0, 0)

# Insert vectors.
insert
vec1: (1, 2)
vec2: (7, 4)
vec3: (4, 3)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
└───• vec3 (4, 3)

# Insert a duplicate vector.
insert
vec4: (4, 3)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (7, 4)
├───• vec3 (4, 3)
└───• vec4 (4, 3)

# Insert a duplicate child key and expect existing vector to be overwritten.
insert
vec2: (5, 6)
----
• 1 (0, 0)
│
├───• vec1 (1, 2)
├───• vec2 (5, 6)
├───• vec3 (4, 3)
└───• vec4 (4, 3)

# Insert more vectors.
insert
vec5: (8, 11)
vec6: (14, 1)
vec7: (0, 0)
vec8: (0, 4)
vec9: (-2, 8)
----
• 1 (3.6667, 3.4)
│
├───• 2 (7, 4.8)
│   │
│   ├───• vec6 (14, 1)
│   ├───• vec2 (5, 6)
│   ├───• vec3 (4, 3)
│   ├───• vec4 (4, 3)
│   └───• vec5 (8, 11)
│
└───• 3 (0.3333, 2)
    │
    ├───• vec1 (1, 2)
    ├───• vec7 (0, 0)
    ├───• vec8 (0, 4)
    └───• vec9 (-2, 8)

# Overwrite vector with a new value that won't be found in the index, causing
# duplicate child keys that point to the same vector (but with different
# quantized values). This simulates the situation where updating a vector fails
# to locate the existing entry in the index and now there are multiple
# references to the same vector. The duplicates should be detected before being
# returned to the caller.
insert
vec2: (-5, -5)
----
• 1 (3.6667, 3.4)
│
├───• 2 (7, 4.8)
│   │
│   ├───• vec6 (14, 1)
│   ├───• vec2 (-5, -5)
│   ├───• vec3 (4, 3)
│   ├───• vec4 (4, 3)
│   └───• vec5 (8, 11)
│
├───• 4 (-1, 6)
│   │
│   ├───• vec9 (-2, 8)
│   └───• vec8 (0, 4)
│
└───• 5 (-1.3333, -1)
    │
    ├───• vec7 (0, 0)
    ├───• vec1 (1, 2)
    └───• vec2 (-5, -5)

search max-results=10 beam-size=8
(-5, -5)
----
vec2: 0 (centroid=2.3324)
vec7: 50 (centroid=1.6667)
vec1: 85 (centroid=3.8006)
vec8: 106 (centroid=2.2361)
vec3: 145 (centroid=3.4986)
vec4: 145 (centroid=3.4986)
vec9: 178 (centroid=2.2361)
vec6: 397 (centroid=7.9649)
vec5: 425 (centroid=6.2801)
10 leaf vectors, 13 vectors, 9 full vectors, 4 partitions
