// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.sql.vecindex.vecpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/sql/vecindex/vecpb";

import "gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;

// RotAlgorithm specifies the algorithm used to randomly rotate the original
// vectors inserted into the index.
enum RotAlgorithm {
  option (gogoproto.goproto_enum_prefix) = false;

  // RotMatrix specifies that vectors will be randomly rotated by multiplying
  // them by a full random orthogonal matrix (e.g., generated via QR
  // decomposition of a random Gaussian matrix). This provides a true
  // Haar-random rotation, which fully preserves all pairwise distances and
  // angles.
  // NOTE: This algorithm is retained for backwards-compatibility and will not
  // be used for new indexes due to its high computational cost, especially in
  // high dimensions.
  RotMatrix = 0;
  // RotNone specifies that vectors will not be randomly rotated. This is
  // appropriate when the input vectors are already sufficiently mixed. For
  // example, OpenAI embeddings are often already well-mixed, so additional
  // random rotation provides little benefit and can be skipped to save
  // computation.
  RotNone = 1;
  // RotGivens specifies that vectors will be randomly rotated by applying a
  // sequence of Givens rotations. Each Givens rotation mixes a pair of vector
  // coordinates using a random angle, and applying O(N log N) such rotations
  // (where N is the number of dimensions) is sufficient to approximate a
  // Haar-random orthogonal transformation. This approach is much more
  // computationally efficient than applying a full random orthogonal matrix,
  // while still providing strong mixing and preserving all pairwise distances
  // and angles between vectors.
  RotGivens = 2;
}

// DistanceMetric defines the function that's used to compute similarity between
// vectors.
enum DistanceMetric {
  option (gogoproto.goproto_enum_prefix) = false;

  // L2SquaredDistance specifies squared Euclidean distance between two vectors,
  // defined as the square of the L2 norm of their difference:
  //  ||vec1 - vec2||²
  //
  // This is equivalent to the dot product of the difference with itself:
  //  (vec1 - vec2) · (vec1 - vec2)
  L2SquaredDistance = 0;

  // InnerProductDistance specifies inner product distance between two vectors,
  // defined as the negative value of the dot product between them:
  //  -(vec1 · vec2)
  //
  // Negating the distance ensures that the smaller the distance, the more
  // similar are the vectors, aligning this metric with L2Squared and Cosine.
  InnerProductDistance = 1;

  // CosineDistance specifies the cosine distance between two vectors, defined
  // as one minus their cosine similarity:
  //  1 - cos(vec1, vec2)
  //
  // Cosine similarity is computed as the dot product of the vectors divided
  // by the product of their norms (magnitudes):
  //  cos(vec1, vec2) = (vec1 · vec2) / (||vec1|| * ||vec2||)
  //
  // However, when using Cosine distance, we always pre-normalize vectors, so
  // that they are always unit vectors. This means the product of their norms
  // is one. Therefore, cosine distance becomes simply:
  //  1 - (vec1 · vec2)
  CosineDistance = 2;
}

// Config encapsulates the information needed to search and maintain a vector
// index. This includes the dimensions of the vectors and the random seed,
// neither of which should change after the index is created.
message Config {
  option (gogoproto.equal) = true;
  // Dims is the width of vectors in the index (i.e. number of dimensions).
  int32 dims = 1;
  // Seed initializes the pseudo-random generator used to randomly perturb
  // vectors, in order to mitigate the impact of skewed input data
  // distributions. This seed stays constant for the lifetime of the index.
  int64 seed = 2;
  // BuildBeamSize specifies the default breadth of searches used when inserting
  // into, deleting from, or updating the index. This is typically quite a bit
  // smaller than the beam sizes used during read-only search, since it's not
  // critical for vectors to be in exactly the nearest partition - close enough
  // is good enough.
  int32 build_beam_size = 3;
  // MinPartitionSize is the lowest number of vectors that a partition can have
  // without being merged away.
  int32 min_partition_size = 4;
  // MaxPartitionSize is the highest number of vectors that a partition can have
  // without being split.
  int32 max_partition_size = 5;
  // IsDeterministic means that background fixup operations on the index are
  // deterministic, as explained in the DeterministicFixupsSetting comment. This
  // is set to true when the DeterministicFixupsSetting is true at index
  // creation time.
  bool is_deterministic = 6;
  // RotAlgorithm specifies the type of random orthogonal transformation to
  // apply to vectors before indexing and search. It must be one of the
  // cspann.RotAlgorithm enum values.
  RotAlgorithm rot_algorithm = 7;
  // DistanceMetric specifies how similarity is computed for vectors in the
  // index, e.g. Euclidean (L2Squared), InnerProduct, or Cosine.
  DistanceMetric distance_metric = 8;
}

