exec-ddl
CREATE TABLE t (a int)
----

# copy quote without CSV not allowed.
copy-from-error
COPY t FROM STDIN QUOTE '"'
----
ERROR: QUOTE only supported with CSV format (SQLSTATE 0A000)

copy-from-error
COPY t FROM STDIN QUOTE 'x'
----
ERROR: QUOTE only supported with CSV format (SQLSTATE 0A000)

# builtins not allowed
copy-from-error
COPY t FROM STDIN
random()
----
ERROR: could not parse "random()" as type int: strconv.ParseInt: parsing "random()": invalid syntax (SQLSTATE 22P02)

copy-from
COPY t FROM STDIN QUOTE '"' CSV
----
0

copy-from
COPY t FROM STDIN
1
----
1

copy-from
COPY t FROM STDIN
1
2
----
2

query
SELECT * FROM t
----
1
1
2

exec-ddl
CREATE TABLE t2 (i INT, d DATE, dec DECIMAL, t TIMESTAMP)
----

copy-from
COPY t2 FROM STDIN
1	1996-03-13	12.123	2016-01-25 10:10:10.555555
----
1

query
SELECT i,dec FROM t2
----
1|12.123

copy-from-error
COPY t2 FROM STDIN
a	1996-03-13	12.123	2016-01-25 10:10:10.555555
----
ERROR: could not parse "a" as type int: strconv.ParseInt: parsing "a": invalid syntax (SQLSTATE 22P02)

copy-from-error
COPY t2 FROM STDIN
1	2	12.123	2016-01-25 10:10:10.555555
----
ERROR: parsing as type date: missing required date fields (SQLSTATE 22007)

copy-from-error
COPY t2 FROM STDIN
1	1996-03-13	not a decimal	2016-01-25 10:10:10.555555
----
ERROR: could not parse "not a decimal" as type decimal: parse exponent: cimal: strconv.ParseInt: parsing "cimal": invalid syntax (SQLSTATE 22P02)

copy-from-error
COPY t2 FROM STDIN
1	1996-03-13	12.123	not a timestamp
----
ERROR: parsing as type timestamp: could not parse "not a timestamp" (SQLSTATE 22007)

copy-from-error
COPY t2 FROM STDIN
1	1996-03-13	12.123
----
ERROR: expected 4 values, got 3 (SQLSTATE 22P04)

copy-from-error
COPY t2 FROM STDIN
1	1996-03-13	12.123	2016-01-25 10:10:10.555555	extra col
----
ERROR: expected 4 values, got 5 (SQLSTATE 22P04)

# now is allowed
copy-from
COPY t2 FROM STDIN
2	1996-03-13	12.123	now
----
1

# now is allowed
copy-from
COPY t2 FROM STDIN
3	1996-03-13	12.123	now()
----
1

# expressions are not allowed
copy-from-error
COPY t2 FROM STDIN
2	1996-03-13	12.123	now()-1
----
ERROR: parsing as type timestamp: could not parse "now()-1" (SQLSTATE 22007)

query
SELECT count(t) FROM t2 WHERE t > now()
----
0

copy-from
COPY t2 FROM STDIN
\N	\N	\N	\N
----
1

copy-from-error
COPY t2 FROM STDIN WITH DESTINATION = 'foo.csv'
\N	\N	\N	\N
----
ERROR: DESTINATION can only be specified when table is external storage table (SQLSTATE 0A000)

#subtest constraints

exec-ddl
CREATE TABLE t3 (i INT CHECK (i > 0))
----

copy-from-error
COPY t3 FROM STDIN
0
----
ERROR: failed to satisfy CHECK constraint (i > 0:::INT8) (SQLSTATE 23514)

copy-from
COPY t3 FROM STDIN
1
----
1

# Foreign key checks happen
exec-ddl
CREATE TABLE parent (k INT PRIMARY KEY);
CREATE TABLE child (k INT PRIMARY KEY REFERENCES parent)
----

copy-from-error
COPY child FROM STDIN
1
----
ERROR: insert on table "child" violates foreign key constraint "child_k_fkey" (SQLSTATE 23503)

exec-ddl
CREATE TABLE t4 (i INT UNIQUE)
----

copy-from-error
COPY t4 FROM STDIN
1
1
----
ERROR: duplicate key value violates unique constraint "t4_i_key" (SQLSTATE 23505)

#subtest defaults
# Default column values tests

exec-ddl
CREATE table tdefaults (i INT PRIMARY KEY DEFAULT unique_rowid(), d INT NOT NULL
DEFAULT -1, x INT)
----

copy-from
COPY tdefaults(x) FROM STDIN
1
----
1

copy-from
COPY tdefaults(x,d) FROM STDIN
1	2
----
1

copy-from
COPY tdefaults FROM STDIN
1	1	1
----
1

query
SELECT d,x FROM tdefaults
----
1|1
-1|1
2|1


#subtest array_decoding

exec-ddl
CREATE TABLE test_copy_array (id INT PRIMARY KEY, data TEXT[])
----

copy-from
COPY test_copy_array(id,data) FROM STDIN
1	{}
2	{}
3	{}
4	{}
5	{}
6	{}
7	{}
8	{\b}
9	{"\t"}
10	{"\n"}
11	{"\v"}
12	{"\f"}
13	{"\r"}
14	{}
15	{}
16	{}
17	{}
18	{}
19	{}
20	{}
21	{}
22	{}
23	{}
24	{}
25	{}
26	{}
27	{}
28	{}
29	{}
30	{}
31	{}
32	{" "}
33	{!}
34	{"\\""}
35	{#}
36	{$}
37	{%}
38	{&}
39	{'}
40	{(}
41	{)}
42	{*}
43	{+}
44	{","}
45	{-}
46	{.}
47	{/}
48	{0}
49	{1}
50	{2}
51	{3}
52	{4}
53	{5}
54	{6}
55	{7}
56	{8}
57	{9}
58	{:}
59	{;}
60	{<}
61	{=}
62	{>}
63	{?}
64	{@}
65	{A}
66	{B}
67	{C}
68	{D}
69	{E}
70	{F}
71	{G}
72	{H}
73	{I}
74	{J}
75	{K}
76	{L}
77	{M}
78	{N}
79	{O}
80	{P}
81	{Q}
82	{R}
83	{S}
84	{T}
85	{U}
86	{V}
87	{W}
88	{X}
89	{Y}
90	{Z}
91	{[}
92	{"\\\\"}
93	{]}
94	{^}
95	{_}
96	{`}
97	{a}
98	{b}
99	{c}
100	{d}
101	{e}
102	{f}
103	{g}
104	{h}
105	{i}
106	{j}
107	{k}
108	{l}
109	{m}
110	{n}
111	{o}
112	{p}
113	{q}
114	{r}
115	{s}
116	{t}
117	{u}
118	{v}
119	{w}
120	{x}
121	{y}
122	{z}
123	{"{"}
124	{|}
125	{"}"}
126	{~}
127	{}
128	{¬Ä}
129	{¬Å}
130	{¬Ç}
131	{¬É}
132	{¬Ñ}
133	{¬Ö}
134	{¬Ü}
135	{¬á}
136	{¬à}
137	{¬â}
138	{¬ä}
139	{¬ã}
140	{¬å}
141	{¬ç}
142	{¬é}
143	{¬è}
144	{¬ê}
145	{¬ë}
146	{¬í}
147	{¬ì}
148	{¬î}
149	{¬ï}
150	{¬ñ}
151	{¬ó}
152	{¬ò}
153	{¬ô}
154	{¬ö}
155	{¬õ}
156	{¬ú}
157	{¬ù}
158	{¬û}
159	{¬ü}
160	{¬†}
161	{¬°}
162	{¬¢}
163	{¬£}
164	{¬§}
165	{¬•}
166	{¬¶}
167	{¬ß}
168	{¬®}
169	{¬©}
170	{¬™}
171	{¬´}
172	{¬¨}
173	{¬≠}
174	{¬Æ}
175	{¬Ø}
176	{¬∞}
177	{¬±}
178	{¬≤}
179	{¬≥}
180	{¬¥}
181	{¬µ}
182	{¬∂}
183	{¬∑}
184	{¬∏}
185	{¬π}
186	{¬∫}
187	{¬ª}
188	{¬º}
189	{¬Ω}
190	{¬æ}
191	{¬ø}
192	{√Ä}
193	{√Å}
194	{√Ç}
195	{√É}
196	{√Ñ}
197	{√Ö}
198	{√Ü}
199	{√á}
200	{√à}
201	{√â}
202	{√ä}
203	{√ã}
204	{√å}
205	{√ç}
206	{√é}
207	{√è}
208	{√ê}
209	{√ë}
210	{√í}
211	{√ì}
212	{√î}
213	{√ï}
214	{√ñ}
215	{√ó}
216	{√ò}
217	{√ô}
218	{√ö}
219	{√õ}
220	{√ú}
221	{√ù}
222	{√û}
223	{√ü}
224	{√†}
225	{√°}
226	{√¢}
227	{√£}
228	{√§}
229	{√•}
230	{√¶}
231	{√ß}
232	{√®}
233	{√©}
234	{√™}
235	{√´}
236	{√¨}
237	{√≠}
238	{√Æ}
239	{√Ø}
240	{√∞}
241	{√±}
242	{√≤}
243	{√≥}
244	{√¥}
245	{√µ}
246	{√∂}
247	{√∑}
248	{√∏}
249	{√π}
250	{√∫}
251	{√ª}
252	{√º}
253	{√Ω}
254	{√æ}
255	{√ø}
----
255

query
SELECT id, data AS got, array[chr(id)] AS want FROM test_copy_array WHERE data != ARRAY[chr(id)]
----

# Regression test for #87011
exec-ddl
CREATE TABLE tab (
  col1 STRING,
  col2 STRING,
  col3 STRING,
  col4 STRING,
  col5 STRING,
  col6 STRING NOT NULL, index(col5) where col3 like '%ride%', index ((col2 || col3)),
  PRIMARY KEY (col1, col2, col3, col4, col5) using hash,
  UNIQUE (col5, col6)
);
CREATE TABLE tab_child (
  col1 STRING,
  col2 STRING,
  col3 STRING,
  col4 STRING,
  col5 STRING,
  col6 STRING NOT NULL, index(col5) where col3 like '%ride%', index ((col2 || col3)),
  PRIMARY KEY (col1, col2, col3, col4, col5) using hash,
  FOREIGN KEY (col5, col6) REFERENCES tab (col5, col6)
)
----

copy-from-error
COPY tab_child FROM STDIN
'high'	'straight'	'writer'	'develop'	'shells'	'bean'
'basic'	'tent'	'compound'	'it'	'future'	'held'
'bite'	'bring'	'taught'	'world'	'themselves'	'airplane'
'island'	'number'	'has'	'blow'	'prize'	'cookies'
'hole'	'wear'	'way'	'troops'	'eye'	'sure'
'thick'	'joy'	'impossible'	'area'	'ordinary'	'piano'
'grabbed'	'reader'	'number'	'serve'	'fill'	'wonderful'
'tower'	'former'	'mainly'	'point'	'class'	'idea'
----
ERROR: insert on table "tab_child" violates foreign key constraint "tab_child_col5_col6_fkey" (SQLSTATE 23503)

exec-ddl
CREATE TABLE tabnn (i INT NOT NULL)
----

copy-from-error
COPY tabnn FROM STDIN
\N
----
ERROR: null value in column "i" violates not-null constraint (SQLSTATE 23502)

exec-ddl
CREATE TABLE tinet (i INET CHECK (i < b), b INET)
----

# Put to rest concerns about Datum types on both sides of check constraint expr.
copy-from-error
COPY tinet FROM STDIN
192.168.100.128/25	0.0.0.0/0
----
ERROR: failed to satisfy CHECK constraint (i < b) (SQLSTATE 23514)

# Put to rest concerns about Datum types on both sides of check constraint expr.
copy-from
COPY tinet FROM STDIN
0.0.0.0/0	192.168.100.128/25
----
1

exec-ddl
CREATE TABLE tpartial (i INT PRIMARY KEY, index(i) WHERE i > 0)
----

copy-from-kvtrace
COPY tpartial FROM STDIN
-1
0
1
----
CPut /Table/<>/1/-1/0 -> /TUPLE/
CPut /Table/<>/1/0/0 -> /TUPLE/
CPut /Table/<>/1/1/0 -> /TUPLE/
InitPut /Table/<>/2/1/0 -> /BYTES/

exec-ddl
CREATE TABLE tpartial2 (i INT PRIMARY KEY, b INT, index(b) WHERE i > 0, FAMILY (i), FAMILY (b))
----

# Unfortunately we have to do the inserts 1 row at a time because the row inserter does it
# that way and the vector inserter  doesn't.
copy-from-kvtrace
COPY tpartial2 FROM STDIN
-1	-2
----
CPut /Table/<>/1/-1/0 -> /TUPLE/
CPut /Table/<>/1/-1/1/1 -> /INT/-2

copy-from-kvtrace
COPY tpartial2 FROM STDIN
0	0
----
CPut /Table/<>/1/0/0 -> /TUPLE/
CPut /Table/<>/1/0/1/1 -> /INT/0

copy-from-kvtrace
COPY tpartial2 FROM STDIN
1	2
----
CPut /Table/<>/1/1/0 -> /TUPLE/
CPut /Table/<>/1/1/1/1 -> /INT/2
InitPut /Table/<>/2/2/1/0 -> /BYTES/

exec-ddl
CREATE TYPE testenum AS ENUM('cat','dog','bear');
CREATE TABLE tenum (i INT PRIMARY KEY,c1 testenum)
----

copy-from
COPY tenum FROM STDIN
0	cat
1	dog
2	bear
----
3

copy-from-kvtrace
COPY tenum FROM STDIN
3	cat
4	dog
5	bear
----
CPut /Table/<>/1/3/0 -> /TUPLE/2:2:Bytes/@
CPut /Table/<>/1/4/0 -> /TUPLE/2:2:Bytes/0x80
CPut /Table/<>/1/5/0 -> /TUPLE/2:2:Bytes/0xc0

exec-ddl
CREATE TABLE tenum2 (i INT PRIMARY KEY, c1 testenum, INDEX(c1))
----

copy-from
COPY tenum2 FROM STDIN
0	cat
----
1

copy-from-kvtrace
COPY tenum2 FROM STDIN
1	cat
----
CPut /Table/<>/1/1/0 -> /TUPLE/2:2:Bytes/@
InitPut /Table/<>/2/"@"/1/0 -> /BYTES/

exec-ddl
CREATE TABLE tenum3 (i INT PRIMARY KEY, c1 testenum, UNIQUE INDEX(c1))
----

copy-from
COPY tenum3 FROM STDIN
0	cat
----
1

copy-from-kvtrace
COPY tenum3 FROM STDIN
1	dog
----
CPut /Table/<>/1/1/0 -> /TUPLE/2:2:Bytes/0x80
InitPut /Table/<>/2/"\x80"/0 -> /BYTES/0x89

exec-ddl
CREATE TYPE comp AS (a INT, b INT);
CREATE TABLE tcomp (i INT PRIMARY KEY, c comp)
----

copy-from
COPY tcomp FROM STDIN
0	(1, 2)
----
1

copy-from-kvtrace
COPY tcomp FROM STDIN
1	(1, 2)
----
CPut /Table/<>/1/1/0 -> /TUPLE/

# Regression test for #103220
exec-ddl
CREATE TABLE tfam (id INT PRIMARY KEY, c1 INT NOT NULL, c2 INT NOT NULL, FAMILY cf1 (id, c1), FAMILY cf2(c2))
----

copy-from-kvtrace
COPY tfam FROM STDIN QUOTE '"' CSV
2,1,2
1,2,1
----
CPut /Table/<>/1/1/0 -> /TUPLE/2:2:Int/2
CPut /Table/<>/1/1/1/1 -> /INT/1
CPut /Table/<>/1/2/0 -> /TUPLE/2:2:Int/1
CPut /Table/<>/1/2/1/1 -> /INT/2

query
SELECT * FROM tfam
----
1|2|1
2|1|2


exec-ddl
CREATE TABLE tfam2 (id INT PRIMARY KEY, c1 INT NOT NULL, c2 INT NOT NULL, c3 INT NOT NULL, FAMILY cf1 (id, c1), FAMILY cf2(c2), FAMILY cf3(c3), INDEX(c2,c1,c3))
----

copy-from-kvtrace
COPY tfam2 FROM STDIN QUOTE '"' CSV
2,1,2,3
1,2,1,4
3,5,2,1
----
CPut /Table/<>/1/1/0 -> /TUPLE/2:2:Int/2
CPut /Table/<>/1/1/1/1 -> /INT/1
CPut /Table/<>/1/1/2/1 -> /INT/4
CPut /Table/<>/1/2/0 -> /TUPLE/2:2:Int/1
CPut /Table/<>/1/2/1/1 -> /INT/2
CPut /Table/<>/1/2/2/1 -> /INT/3
CPut /Table/<>/1/3/0 -> /TUPLE/2:2:Int/5
CPut /Table/<>/1/3/1/1 -> /INT/2
CPut /Table/<>/1/3/2/1 -> /INT/1
InitPut /Table/<>/2/1/2/4/1/0 -> /BYTES/
InitPut /Table/<>/2/2/1/3/2/0 -> /BYTES/
InitPut /Table/<>/2/2/5/1/3/0 -> /BYTES/

query
SELECT * FROM tfam2
----
1|2|1|4
2|1|2|3
3|5|2|1

# regression test for #106913
exec-ddl
CREATE TABLE theader (n1 numeric(19, 2))
----

copy-from
COPY theader FROM STDIN WITH CSV HEADER
n1
12.123
----
1
