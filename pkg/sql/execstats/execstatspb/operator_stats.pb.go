// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execstats/execstatspb/operator_stats.proto

package execstatspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// OperatorStats contains statistics for an execution operator. Depending on the
// operator, not all statistics apply. For all fields, the zero value Indicates
// that the particular stat is not available.
type OperatorStats struct {
	OperatorID int32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// num_batches is the number of batches that this stats collector observed its
	// operator to output.
	NumBatches IntValue `protobuf:"varint,2,opt,name=num_batches,json=numBatches,proto3,customtype=IntValue" json:"num_batches"`
	// num_tuples is the number of tuples that this stats collector
	// received from its input.
	NumTuples        IntValue      `protobuf:"varint,3,opt,name=num_tuples,json=numTuples,proto3,customtype=IntValue" json:"num_tuples"`
	IOTime           time.Duration `protobuf:"bytes,4,opt,name=io_time,json=ioTime,proto3,stdduration" json:"io_time"`
	ExecTime         time.Duration `protobuf:"bytes,5,opt,name=exec_time,json=execTime,proto3,stdduration" json:"exec_time"`
	MaxAllocatedMem  IntValue      `protobuf:"varint,6,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3,customtype=IntValue" json:"max_allocated_mem"`
	MaxAllocatedDisk IntValue      `protobuf:"varint,7,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3,customtype=IntValue" json:"max_allocated_disk"`
	// bytes_read is the number of bytes read.
	// TODO(radu): this should be split into bytes read from disk, received over
	// the network, etc.
	BytesRead IntValue `protobuf:"varint,8,opt,name=bytes_read,json=bytesRead,proto3,customtype=IntValue" json:"bytes_read"`
	// rows_read is the number of rows read.
	// TODO(radu): read from where? KV? other processors?
	RowsRead IntValue `protobuf:"varint,9,opt,name=rows_read,json=rowsRead,proto3,customtype=IntValue" json:"rows_read"`
	// network_latency is the latency time in nanoseconds between outbox and inbox.
	NetworkLatency time.Duration `protobuf:"bytes,10,opt,name=network_latency,json=networkLatency,proto3,stdduration" json:"network_latency"`
}

func (m *OperatorStats) Reset()         { *m = OperatorStats{} }
func (m *OperatorStats) String() string { return proto.CompactTextString(m) }
func (*OperatorStats) ProtoMessage()    {}
func (*OperatorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_ed3f8d65dbde1be0, []int{0}
}
func (m *OperatorStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *OperatorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorStats.Merge(dst, src)
}
func (m *OperatorStats) XXX_Size() int {
	return m.Size()
}
func (m *OperatorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorStats.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OperatorStats)(nil), "cockroach.sql.execstats.execstatspb.OperatorStats")
}
func (m *OperatorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.OperatorID))
	}
	if m.NumBatches != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.NumTuples))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.IOTime)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.IOTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x2a
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExecTime)))
	n2, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ExecTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	if m.BytesRead != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.RowsRead))
	}
	dAtA[i] = 0x52
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.NetworkLatency)))
	n3, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.NetworkLatency, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintOperatorStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperatorStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovOperatorStats(uint64(m.OperatorID))
	}
	if m.NumBatches != 0 {
		n += 1 + sovOperatorStats(uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		n += 1 + sovOperatorStats(uint64(m.NumTuples))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.IOTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExecTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovOperatorStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovOperatorStats(uint64(m.MaxAllocatedDisk))
	}
	if m.BytesRead != 0 {
		n += 1 + sovOperatorStats(uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		n += 1 + sovOperatorStats(uint64(m.RowsRead))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.NetworkLatency)
	n += 1 + l + sovOperatorStats(uint64(l))
	return n
}

func sovOperatorStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperatorStats(x uint64) (n int) {
	return sovOperatorStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBatches", wireType)
			}
			m.NumBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBatches |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			m.NumTuples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTuples |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IOTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.IOTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsRead", wireType)
			}
			m.RowsRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkLatency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.NetworkLatency, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperatorStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperatorStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperatorStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperatorStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperatorStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperatorStats   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/execstats/execstatspb/operator_stats.proto", fileDescriptor_operator_stats_ed3f8d65dbde1be0)
}

var fileDescriptor_operator_stats_ed3f8d65dbde1be0 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x90, 0xa6, 0xce, 0x45, 0xb4, 0xe5, 0xc4, 0x60, 0x3a, 0x9c, 0x23, 0x58, 0xb2,
	0xd4, 0x16, 0xb0, 0x22, 0x04, 0x56, 0x84, 0x14, 0xa9, 0xa8, 0x52, 0xa8, 0x18, 0x58, 0xac, 0xb3,
	0xfd, 0x48, 0xad, 0xf8, 0xfc, 0x82, 0x7d, 0x56, 0xd3, 0x6f, 0xc1, 0xc8, 0x47, 0xca, 0xd8, 0xb1,
	0xea, 0x10, 0xc0, 0xf9, 0x22, 0xe8, 0xce, 0x49, 0x08, 0x83, 0x05, 0xdb, 0x3b, 0xfb, 0xf7, 0xfb,
	0xdb, 0xef, 0xaf, 0xa3, 0x5e, 0xf9, 0x35, 0xf3, 0x61, 0x01, 0x71, 0xa9, 0x84, 0x2a, 0xff, 0x4c,
	0xf3, 0xc8, 0xc7, 0x39, 0x14, 0x42, 0x61, 0x11, 0x9a, 0x07, 0xde, 0xbc, 0x40, 0x85, 0xec, 0x79,
	0x8c, 0xf1, 0xac, 0x40, 0x11, 0x5f, 0x69, 0xd3, 0xdb, 0xf1, 0xde, 0x9e, 0x79, 0xfa, 0x64, 0x8a,
	0x53, 0x34, 0xbc, 0xaf, 0xa7, 0x46, 0x3d, 0xe5, 0x53, 0xc4, 0x69, 0x06, 0xbe, 0x39, 0x45, 0xd5,
	0x17, 0x3f, 0xa9, 0x0a, 0xa1, 0x52, 0xcc, 0x9b, 0xf7, 0xcf, 0xee, 0x3b, 0xf4, 0xd1, 0xc5, 0xe6,
	0x9b, 0x1f, 0x75, 0x12, 0xf3, 0x69, 0x7f, 0xf7, 0x13, 0x69, 0xe2, 0x90, 0x01, 0x19, 0x1e, 0x04,
	0x47, 0xf5, 0xca, 0xa5, 0x5b, 0x6e, 0x3c, 0x9a, 0xd0, 0x2d, 0x32, 0x4e, 0xd8, 0x0b, 0xda, 0xcf,
	0x2b, 0x19, 0x46, 0x42, 0xc5, 0x57, 0x50, 0x3a, 0x0f, 0x06, 0x64, 0xd8, 0x09, 0x4e, 0x96, 0x2b,
	0xd7, 0xba, 0x5f, 0xb9, 0xf6, 0x38, 0x57, 0x9f, 0x44, 0x56, 0xc1, 0x84, 0xe6, 0x95, 0x0c, 0x1a,
	0x86, 0xf9, 0x54, 0x9f, 0x42, 0x55, 0xcd, 0x33, 0x28, 0x9d, 0x87, 0x2d, 0x46, 0x2f, 0xaf, 0xe4,
	0xa5, 0x41, 0xd8, 0x7b, 0x7a, 0x98, 0x62, 0xa8, 0x52, 0x09, 0x4e, 0x67, 0x40, 0x86, 0xfd, 0x97,
	0x4f, 0xbd, 0x66, 0x31, 0x6f, 0xbb, 0x98, 0x37, 0xda, 0x2c, 0x16, 0x30, 0x1d, 0x54, 0xaf, 0xdc,
	0xee, 0xf8, 0xe2, 0x32, 0x95, 0xf0, 0xfd, 0x87, 0x4b, 0x26, 0xdd, 0x14, 0xf5, 0xcc, 0xde, 0xd2,
	0x9e, 0xee, 0xac, 0x49, 0x3a, 0xf8, 0x57, 0x92, 0xad, 0x93, 0x8c, 0x6f, 0x6b, 0xcb, 0x24, 0xbc,
	0xa6, 0x8f, 0xa5, 0x58, 0x84, 0x22, 0xcb, 0x30, 0x16, 0x0a, 0x92, 0x50, 0x82, 0x74, 0xba, 0x2d,
	0x1b, 0x1c, 0x4b, 0xb1, 0x78, 0xb7, 0x25, 0x3f, 0x80, 0x64, 0x6f, 0x28, 0xfb, 0xdb, 0x4e, 0xd2,
	0x72, 0xe6, 0x1c, 0xb6, 0xe8, 0x27, 0xfb, 0xfa, 0x28, 0x2d, 0x67, 0xba, 0xb8, 0xe8, 0x46, 0x41,
	0x19, 0x16, 0x20, 0x12, 0xc7, 0x6e, 0x2b, 0xce, 0x30, 0x13, 0x10, 0x09, 0x3b, 0xa3, 0xbd, 0x02,
	0xaf, 0x37, 0x7c, 0xaf, 0x85, 0xb7, 0x35, 0x62, 0xf0, 0x73, 0x7a, 0x9c, 0x83, 0xba, 0xc6, 0x62,
	0x16, 0x66, 0x42, 0x41, 0x1e, 0xdf, 0x38, 0xf4, 0xff, 0x5b, 0x3a, 0xda, 0xb8, 0xe7, 0x8d, 0x1a,
	0x9c, 0x2d, 0x7f, 0x71, 0x6b, 0x59, 0x73, 0x72, 0x5b, 0x73, 0x72, 0x57, 0x73, 0xf2, 0xb3, 0xe6,
	0xe4, 0xdb, 0x9a, 0x5b, 0xb7, 0x6b, 0x6e, 0xdd, 0xad, 0xb9, 0xf5, 0xb9, 0xbf, 0x77, 0x83, 0xa3,
	0xae, 0xc9, 0x7e, 0xf5, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x29, 0x5f, 0xd4, 0xa5, 0x1f, 0x03, 0x00,
	0x00,
}
