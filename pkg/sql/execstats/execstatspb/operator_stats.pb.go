// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/execstats/execstatspb/operator_stats.proto

package execstatspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// OperatorStats contains statistics for an execution operator.
//
// For the purposes of this package, any unit that has some associated stats
// (including a stream) is an "operator".
//
// Depending on the operator, not all statistics apply. For all fields, the zero
// value indicates that the particular stat is not available.
//
// TODO(radu): consider defining a union for the various groups of stats and
// changing this to contain a repeated field.
type OperatorStats struct {
	OperatorID int32          `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	NetRx      NetworkRxStats `protobuf:"bytes,2,opt,name=net_rx,json=netRx,proto3" json:"net_rx"`
	NetTx      NetworkTxStats `protobuf:"bytes,3,opt,name=net_tx,json=netTx,proto3" json:"net_tx"`
	KV         KVStats        `protobuf:"bytes,4,opt,name=kv,proto3" json:"kv"`
	Exec       ExecStats      `protobuf:"bytes,5,opt,name=exec,proto3" json:"exec"`
	Output     OutputStats    `protobuf:"bytes,6,opt,name=output,proto3" json:"output"`
}

func (m *OperatorStats) Reset()         { *m = OperatorStats{} }
func (m *OperatorStats) String() string { return proto.CompactTextString(m) }
func (*OperatorStats) ProtoMessage()    {}
func (*OperatorStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{0}
}
func (m *OperatorStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *OperatorStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorStats.Merge(dst, src)
}
func (m *OperatorStats) XXX_Size() int {
	return m.Size()
}
func (m *OperatorStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorStats.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorStats proto.InternalMessageInfo

// NetworkRxStats contains statistics for operators that receive row data
// over the network.
type NetworkRxStats struct {
	// Observed network latency (round-trip time between the two nodes).
	Latency time.Duration `protobuf:"bytes,1,opt,name=latency,proto3,stdduration" json:"latency"`
	// Cumulated time spent waiting to receive or transmit rows.
	WaitTime time.Duration `protobuf:"bytes,2,opt,name=wait_time,json=waitTime,proto3,stdduration" json:"wait_time"`
	// Time spent deserializing network data.
	DeserializationTime time.Duration `protobuf:"bytes,3,opt,name=deserialization_time,json=deserializationTime,proto3,stdduration" json:"deserialization_time"`
	RowsReceived        IntValue      `protobuf:"varint,4,opt,name=rows_received,json=rowsReceived,proto3,customtype=IntValue" json:"rows_received"`
	BytesReceived       IntValue      `protobuf:"varint,5,opt,name=bytes_received,json=bytesReceived,proto3,customtype=IntValue" json:"bytes_received"`
}

func (m *NetworkRxStats) Reset()         { *m = NetworkRxStats{} }
func (m *NetworkRxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkRxStats) ProtoMessage()    {}
func (*NetworkRxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{1}
}
func (m *NetworkRxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkRxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *NetworkRxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRxStats.Merge(dst, src)
}
func (m *NetworkRxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkRxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRxStats proto.InternalMessageInfo

// NetworkTxStats contains statistics for operators that send row data over the
// network.
type NetworkTxStats struct {
	RowsSent  IntValue `protobuf:"varint,1,opt,name=rows_sent,json=rowsSent,proto3,customtype=IntValue" json:"rows_sent"`
	BytesSent IntValue `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3,customtype=IntValue" json:"bytes_sent"`
}

func (m *NetworkTxStats) Reset()         { *m = NetworkTxStats{} }
func (m *NetworkTxStats) String() string { return proto.CompactTextString(m) }
func (*NetworkTxStats) ProtoMessage()    {}
func (*NetworkTxStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{2}
}
func (m *NetworkTxStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkTxStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *NetworkTxStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTxStats.Merge(dst, src)
}
func (m *NetworkTxStats) XXX_Size() int {
	return m.Size()
}
func (m *NetworkTxStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTxStats.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTxStats proto.InternalMessageInfo

// KVStats contains statistics for operators that performe KV operations.
type KVStats struct {
	BytesRead IntValue `protobuf:"varint,1,opt,name=bytes_read,json=bytesRead,proto3,customtype=IntValue" json:"bytes_read"`
	RowsRead  IntValue `protobuf:"varint,2,opt,name=rows_read,json=rowsRead,proto3,customtype=IntValue" json:"rows_read"`
	// Cumulated time spent waiting for a KV request. This includes disk IO time
	// and potentially network time (if any of the keys are not local).
	KVTime time.Duration `protobuf:"bytes,3,opt,name=kv_time,json=kvTime,proto3,stdduration" json:"kv_time"`
}

func (m *KVStats) Reset()         { *m = KVStats{} }
func (m *KVStats) String() string { return proto.CompactTextString(m) }
func (*KVStats) ProtoMessage()    {}
func (*KVStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{3}
}
func (m *KVStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *KVStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVStats.Merge(dst, src)
}
func (m *KVStats) XXX_Size() int {
	return m.Size()
}
func (m *KVStats) XXX_DiscardUnknown() {
	xxx_messageInfo_KVStats.DiscardUnknown(m)
}

var xxx_messageInfo_KVStats proto.InternalMessageInfo

// ExecStats contains statistics about the execution of an operator.
type ExecStats struct {
	// Time spent executing the operator.
	ExecTime time.Duration `protobuf:"bytes,1,opt,name=exec_time,json=execTime,proto3,stdduration" json:"exec_time"`
	// Maximum memory allocated by the operator.
	MaxAllocatedMem IntValue `protobuf:"varint,2,opt,name=max_allocated_mem,json=maxAllocatedMem,proto3,customtype=IntValue" json:"max_allocated_mem"`
	// Maximum scratch disk allocated by the operator.
	MaxAllocatedDisk IntValue `protobuf:"varint,3,opt,name=max_allocated_disk,json=maxAllocatedDisk,proto3,customtype=IntValue" json:"max_allocated_disk"`
}

func (m *ExecStats) Reset()         { *m = ExecStats{} }
func (m *ExecStats) String() string { return proto.CompactTextString(m) }
func (*ExecStats) ProtoMessage()    {}
func (*ExecStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{4}
}
func (m *ExecStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ExecStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecStats.Merge(dst, src)
}
func (m *ExecStats) XXX_Size() int {
	return m.Size()
}
func (m *ExecStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecStats.DiscardUnknown(m)
}

var xxx_messageInfo_ExecStats proto.InternalMessageInfo

// OutputStats contains statistics about the output (results) of an operator.
type OutputStats struct {
	// Number of batches produced by the operator.
	NumBatches IntValue `protobuf:"varint,1,opt,name=num_batches,json=numBatches,proto3,customtype=IntValue" json:"num_batches"`
	// Number of tuples produced by the operator.
	// TODO(radu): should rename to 'rows' for consistency with other stats.
	NumTuples IntValue `protobuf:"varint,2,opt,name=num_tuples,json=numTuples,proto3,customtype=IntValue" json:"num_tuples"`
}

func (m *OutputStats) Reset()         { *m = OutputStats{} }
func (m *OutputStats) String() string { return proto.CompactTextString(m) }
func (*OutputStats) ProtoMessage()    {}
func (*OutputStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_operator_stats_b1437d46ce1adea8, []int{5}
}
func (m *OutputStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutputStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *OutputStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputStats.Merge(dst, src)
}
func (m *OutputStats) XXX_Size() int {
	return m.Size()
}
func (m *OutputStats) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputStats.DiscardUnknown(m)
}

var xxx_messageInfo_OutputStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OperatorStats)(nil), "cockroach.sql.execstats.execstatspb.OperatorStats")
	proto.RegisterType((*NetworkRxStats)(nil), "cockroach.sql.execstats.execstatspb.NetworkRxStats")
	proto.RegisterType((*NetworkTxStats)(nil), "cockroach.sql.execstats.execstatspb.NetworkTxStats")
	proto.RegisterType((*KVStats)(nil), "cockroach.sql.execstats.execstatspb.KVStats")
	proto.RegisterType((*ExecStats)(nil), "cockroach.sql.execstats.execstatspb.ExecStats")
	proto.RegisterType((*OutputStats)(nil), "cockroach.sql.execstats.execstatspb.OutputStats")
}
func (m *OperatorStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OperatorID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.OperatorID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(m.NetRx.Size()))
	n1, err := m.NetRx.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(m.NetTx.Size()))
	n2, err := m.NetTx.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x22
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(m.KV.Size()))
	n3, err := m.KV.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x2a
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(m.Exec.Size()))
	n4, err := m.Exec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x32
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(m.Output.Size()))
	n5, err := m.Output.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *NetworkRxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkRxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency)))
	n6, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Latency, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.WaitTime)))
	n7, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.WaitTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.DeserializationTime)))
	n8, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DeserializationTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.RowsReceived != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.RowsReceived))
	}
	if m.BytesReceived != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.BytesReceived))
	}
	return i, nil
}

func (m *NetworkTxStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkTxStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RowsSent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.RowsSent))
	}
	if m.BytesSent != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.BytesSent))
	}
	return i, nil
}

func (m *KVStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BytesRead != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.RowsRead))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.KVTime)))
	n9, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.KVTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *ExecStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOperatorStats(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExecTime)))
	n10, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ExecTime, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.MaxAllocatedMem != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.MaxAllocatedDisk))
	}
	return i, nil
}

func (m *OutputStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutputStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumBatches != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOperatorStats(dAtA, i, uint64(m.NumTuples))
	}
	return i, nil
}

func encodeVarintOperatorStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperatorStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovOperatorStats(uint64(m.OperatorID))
	}
	l = m.NetRx.Size()
	n += 1 + l + sovOperatorStats(uint64(l))
	l = m.NetTx.Size()
	n += 1 + l + sovOperatorStats(uint64(l))
	l = m.KV.Size()
	n += 1 + l + sovOperatorStats(uint64(l))
	l = m.Exec.Size()
	n += 1 + l + sovOperatorStats(uint64(l))
	l = m.Output.Size()
	n += 1 + l + sovOperatorStats(uint64(l))
	return n
}

func (m *NetworkRxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Latency)
	n += 1 + l + sovOperatorStats(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.WaitTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DeserializationTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	if m.RowsReceived != 0 {
		n += 1 + sovOperatorStats(uint64(m.RowsReceived))
	}
	if m.BytesReceived != 0 {
		n += 1 + sovOperatorStats(uint64(m.BytesReceived))
	}
	return n
}

func (m *NetworkTxStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RowsSent != 0 {
		n += 1 + sovOperatorStats(uint64(m.RowsSent))
	}
	if m.BytesSent != 0 {
		n += 1 + sovOperatorStats(uint64(m.BytesSent))
	}
	return n
}

func (m *KVStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesRead != 0 {
		n += 1 + sovOperatorStats(uint64(m.BytesRead))
	}
	if m.RowsRead != 0 {
		n += 1 + sovOperatorStats(uint64(m.RowsRead))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.KVTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	return n
}

func (m *ExecStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ExecTime)
	n += 1 + l + sovOperatorStats(uint64(l))
	if m.MaxAllocatedMem != 0 {
		n += 1 + sovOperatorStats(uint64(m.MaxAllocatedMem))
	}
	if m.MaxAllocatedDisk != 0 {
		n += 1 + sovOperatorStats(uint64(m.MaxAllocatedDisk))
	}
	return n
}

func (m *OutputStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumBatches != 0 {
		n += 1 + sovOperatorStats(uint64(m.NumBatches))
	}
	if m.NumTuples != 0 {
		n += 1 + sovOperatorStats(uint64(m.NumTuples))
	}
	return n
}

func sovOperatorStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperatorStats(x uint64) (n int) {
	return sovOperatorStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetRx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetRx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KV", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KV.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Exec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkRxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkRxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkRxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Latency, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.WaitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeserializationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DeserializationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsReceived", wireType)
			}
			m.RowsReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsReceived |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesReceived", wireType)
			}
			m.BytesReceived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesReceived |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkTxStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkTxStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkTxStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsSent", wireType)
			}
			m.RowsSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsSent |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesSent", wireType)
			}
			m.BytesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesSent |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRead", wireType)
			}
			m.BytesRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsRead", wireType)
			}
			m.RowsRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsRead |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KVTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.KVTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperatorStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ExecTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedMem", wireType)
			}
			m.MaxAllocatedMem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedMem |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAllocatedDisk", wireType)
			}
			m.MaxAllocatedDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAllocatedDisk |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutputStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutputStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutputStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBatches", wireType)
			}
			m.NumBatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBatches |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTuples", wireType)
			}
			m.NumTuples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTuples |= (IntValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperatorStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperatorStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperatorStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperatorStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperatorStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperatorStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperatorStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperatorStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperatorStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperatorStats   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("sql/execstats/execstatspb/operator_stats.proto", fileDescriptor_operator_stats_b1437d46ce1adea8)
}

var fileDescriptor_operator_stats_b1437d46ce1adea8 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x53, 0xd3, 0x40,
	0x18, 0xc6, 0x9b, 0xd0, 0x96, 0xf6, 0xad, 0x20, 0xae, 0x1c, 0x2a, 0x87, 0x94, 0xa9, 0x17, 0x0e,
	0x92, 0x28, 0x8c, 0xe3, 0x45, 0x1d, 0xed, 0xa0, 0x03, 0xc3, 0x08, 0x4e, 0xe8, 0xf4, 0xe0, 0x25,
	0xb3, 0x4d, 0xd6, 0x92, 0xc9, 0x9f, 0x2d, 0xc9, 0xa6, 0x04, 0x3f, 0x85, 0x47, 0xbf, 0x86, 0xdf,
	0xa2, 0x33, 0x5e, 0x38, 0xa2, 0x87, 0xaa, 0xe5, 0x8b, 0x38, 0xbb, 0x49, 0x4a, 0x50, 0xea, 0x84,
	0xdb, 0xb6, 0x7d, 0x9e, 0xdf, 0xbe, 0x79, 0x9f, 0x27, 0x05, 0x35, 0x3c, 0x71, 0x35, 0x12, 0x13,
	0x33, 0x64, 0x98, 0x85, 0x57, 0xa7, 0x61, 0x5f, 0xa3, 0x43, 0x12, 0x60, 0x46, 0x03, 0x43, 0x7c,
	0xa1, 0x0e, 0x03, 0xca, 0x28, 0x7a, 0x68, 0x52, 0xd3, 0x09, 0x28, 0x36, 0x8f, 0xb9, 0x53, 0x9d,
	0xe9, 0xd5, 0x9c, 0x73, 0x6d, 0x75, 0x40, 0x07, 0x54, 0xe8, 0x35, 0x7e, 0x4a, 0xac, 0x6b, 0xca,
	0x80, 0xd2, 0x81, 0x4b, 0x34, 0xf1, 0xa9, 0x1f, 0x7d, 0xd4, 0xac, 0x28, 0xc0, 0xcc, 0xa6, 0x7e,
	0xf2, 0x7b, 0x7b, 0xbc, 0x00, 0x4b, 0x87, 0xe9, 0x9d, 0x47, 0x9c, 0x84, 0x34, 0x68, 0xcc, 0x86,
	0xb0, 0xad, 0xa6, 0xb4, 0x2e, 0x6d, 0x54, 0x3a, 0xcb, 0xd3, 0x49, 0x0b, 0x32, 0xdd, 0xde, 0x8e,
	0x0e, 0x99, 0x64, 0xcf, 0x42, 0xef, 0xa1, 0xea, 0x13, 0x66, 0x04, 0x71, 0x53, 0x5e, 0x97, 0x36,
	0x1a, 0x5b, 0xdb, 0x6a, 0x81, 0x71, 0xd5, 0x03, 0xc2, 0x4e, 0x69, 0xe0, 0xe8, 0xb1, 0xb8, 0xb5,
	0x53, 0x1e, 0x4f, 0x5a, 0x25, 0xbd, 0xe2, 0x13, 0xa6, 0xc7, 0x19, 0x91, 0xc5, 0xcd, 0x85, 0xdb,
	0x13, 0xbb, 0xff, 0x10, 0xbb, 0x31, 0xda, 0x05, 0xd9, 0x19, 0x35, 0xcb, 0x82, 0xf6, 0xa8, 0x10,
	0x6d, 0xbf, 0x97, 0x60, 0x80, 0x63, 0xa6, 0x93, 0x96, 0xbc, 0xdf, 0xd3, 0x65, 0x67, 0x84, 0x76,
	0xa1, 0xcc, 0x65, 0xcd, 0x8a, 0x60, 0xa9, 0x85, 0x58, 0x6f, 0x62, 0x62, 0xe6, 0x87, 0x12, 0x04,
	0x74, 0x00, 0x55, 0x1a, 0xb1, 0x61, 0xc4, 0x9a, 0x55, 0xc1, 0x7a, 0x5c, 0x88, 0x75, 0x28, 0x2c,
	0x79, 0x5a, 0x4a, 0x69, 0x7f, 0x97, 0x61, 0xf9, 0xfa, 0x56, 0xd1, 0x0b, 0x58, 0x74, 0x31, 0x23,
	0xbe, 0x79, 0x26, 0x72, 0x6c, 0x6c, 0x3d, 0x50, 0x93, 0x3e, 0xa8, 0x59, 0x1f, 0xd4, 0x9d, 0xb4,
	0x0f, 0x9d, 0x1a, 0x87, 0x7d, 0xf9, 0xd9, 0x92, 0xf4, 0xcc, 0x83, 0x5e, 0x41, 0xfd, 0x14, 0xdb,
	0xcc, 0x60, 0xb6, 0x47, 0xd2, 0x70, 0x0b, 0x01, 0x6a, 0xdc, 0xd5, 0xb5, 0x3d, 0x82, 0x7a, 0xb0,
	0x6a, 0x91, 0x90, 0x04, 0x36, 0x76, 0xed, 0x4f, 0x42, 0x96, 0xc0, 0x16, 0x8a, 0xc3, 0xee, 0xff,
	0x05, 0x10, 0xdc, 0xa7, 0xb0, 0x14, 0xd0, 0xd3, 0xd0, 0x08, 0x88, 0x49, 0xec, 0x11, 0xb1, 0x44,
	0xb4, 0xe5, 0xce, 0x0a, 0x77, 0xfd, 0x98, 0xb4, 0x6a, 0x7b, 0x3e, 0xeb, 0x61, 0x37, 0x22, 0xfa,
	0x1d, 0x2e, 0xd3, 0x53, 0x15, 0x7a, 0x06, 0xcb, 0xfd, 0x33, 0x46, 0x72, 0xbe, 0xca, 0x1c, 0xdf,
	0x92, 0xd0, 0x65, 0xc6, 0xf6, 0x70, 0xb6, 0xda, 0xb4, 0x5e, 0x68, 0x13, 0xea, 0x62, 0x82, 0x90,
	0xf8, 0x4c, 0x2c, 0xf7, 0x26, 0x4a, 0x8d, 0x4b, 0x8e, 0x88, 0xcf, 0x90, 0x06, 0x90, 0xdc, 0x2c,
	0xf4, 0xf2, 0x1c, 0x7d, 0x5d, 0x68, 0xb8, 0xa1, 0xfd, 0x55, 0x82, 0xc5, 0xb4, 0x83, 0x57, 0xe6,
	0x80, 0x60, 0x6b, 0xee, 0x65, 0xf5, 0x74, 0x64, 0x6c, 0xcd, 0x86, 0x13, 0x7a, 0xf9, 0x7f, 0xc3,
	0x09, 0xf9, 0x5b, 0x58, 0x74, 0x46, 0x05, 0x83, 0x41, 0xe9, 0xfb, 0x50, 0xdd, 0xef, 0xf1, 0x24,
	0x44, 0x44, 0x55, 0x67, 0xc4, 0xcf, 0xed, 0x6f, 0x12, 0xd4, 0x67, 0x5d, 0xe7, 0xed, 0xe1, 0xc5,
	0x4d, 0xb8, 0xb7, 0xa8, 0x5f, 0x8d, 0xbb, 0x44, 0xca, 0xcf, 0xe1, 0x9e, 0x87, 0x63, 0x03, 0xbb,
	0x2e, 0x35, 0x31, 0x23, 0x96, 0xe1, 0x11, 0x6f, 0xee, 0xe3, 0xdc, 0xf5, 0x70, 0xfc, 0x3a, 0x53,
	0xbe, 0x23, 0x1e, 0x7a, 0x09, 0xe8, 0xba, 0xdb, 0xb2, 0x43, 0x47, 0x3c, 0xe0, 0x4d, 0xf6, 0x95,
	0xbc, 0x7d, 0xc7, 0x0e, 0x9d, 0xf6, 0x09, 0x34, 0x72, 0x2f, 0x1b, 0x7a, 0x02, 0x0d, 0x3f, 0xf2,
	0x8c, 0x3e, 0x66, 0xe6, 0x31, 0x09, 0xe7, 0xa6, 0x00, 0x7e, 0xe4, 0x75, 0x12, 0x0d, 0xcf, 0x8d,
	0x5b, 0x58, 0x34, 0x74, 0x49, 0x38, 0x3f, 0x74, 0x3f, 0xf2, 0xba, 0x42, 0xd2, 0xd9, 0x1c, 0xff,
	0x56, 0x4a, 0xe3, 0xa9, 0x22, 0x9d, 0x4f, 0x15, 0xe9, 0x62, 0xaa, 0x48, 0xbf, 0xa6, 0x8a, 0xf4,
	0xf9, 0x52, 0x29, 0x9d, 0x5f, 0x2a, 0xa5, 0x8b, 0x4b, 0xa5, 0xf4, 0xa1, 0x91, 0xfb, 0x2f, 0xe8,
	0x57, 0xc5, 0x1a, 0xb7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x43, 0x6c, 0xe6, 0xfd, 0x50, 0x06,
	0x00, 0x00,
}
