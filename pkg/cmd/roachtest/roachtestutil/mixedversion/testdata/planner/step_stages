# Test that steps have the expected upgrade stage associated to their
# context.

mixed-version-test predecessors=(21.2.11, 22.1.8, 22.2.3, 23.1.4, 23.2.0, 24.1.1, 24.2.0) num_upgrades=5 enable_skip_version=true
----
ok

in-mixed-version name=(mixed-version 1)
----
ok

in-mixed-version name=(mixed-version 2)
----
ok

workload name=bank
----
ok

background-command name=(csv server)
----
ok

after-upgrade-finalized name=(validate upgrade)
----
ok

plan debug=true
----
Seed:               12345
Upgrades:           v22.2.3 → v23.1.4 → v23.2.0 → v24.1.1 → v24.3.0 (<current>)
Deployment mode:    system-only
Mutators:           cluster_setting[storage.sstable.compression_algorithm], cluster_setting[kv.transaction.write_buffering.enabled], cluster_setting[kv.rangefeed.buffered_sender.enabled]
Hooks:              bank workload, csv server, initialize bank workload, mixed-version 1, mixed-version 2, validate upgrade
Plan:
├── install fixtures for version "v22.2.3" (1) [stage=system-setup]
├── start cluster at version "v22.2.3" (2) [stage=system-setup]
├── wait for all nodes (:1-4) to acknowledge cluster version '22.2' on system tenant (3) [stage=system-setup]
├── run "initialize bank workload" hookId="mixedversion.go:879" (4) [stage=on-startup]
├── start background hooks concurrently
│   ├── run "bank workload" hookId="mixedversion.go:893", after 0s delay (5) [stage=background]
│   └── run "csv server" hookId="mixedversion.go:851", after 0s delay (6) [stage=background]
├── upgrade cluster from "v22.2.3" to "v23.1.4"
│   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (7) [stage=selectProtectedNodes]
│   ├── upgrade nodes :1-4 from "v22.2.3" to "v23.1.4"
│   │   ├── restart node 3 with binary version v23.1.4 (8) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (9) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v23.1.4 (10) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (11) [stage=last-upgrade]
│   │   ├── restart node 4 with binary version v23.1.4 (12) [stage=last-upgrade]
│   │   └── restart node 2 with binary version v23.1.4 (13) [stage=last-upgrade]
│   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (14) [stage=running-upgrade-migrations,finalizing]
│   ├── run mixed-version hooks concurrently
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143", after 100ms delay (15) [stage=running-upgrade-migrations,finalizing]
│   │   └── run "mixed-version 2" hookId="planner_test.go:143_1", after 500ms delay (16) [stage=running-upgrade-migrations,finalizing]
│   ├── wait for all nodes (:1-4) to acknowledge cluster version '23.1' on system tenant (17) [stage=running-upgrade-migrations,finalizing]
│   └── run "validate upgrade" hookId="planner_test.go:145" (18) [stage=after-upgrade-finished]
├── upgrade cluster from "v23.1.4" to "v23.2.0"
│   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (19) [stage=selectProtectedNodes]
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 1 with binary version v23.2.0 (20) [stage=temporary-upgrade]
│   │   ├── restart node 3 with binary version v23.2.0 (21) [stage=temporary-upgrade]
│   │   ├── restart node 4 with binary version v23.2.0 (22) [stage=temporary-upgrade]
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (23) [stage=temporary-upgrade]
│   │   ├── restart node 2 with binary version v23.2.0 (24) [stage=temporary-upgrade]
│   │   └── run "mixed-version 2" hookId="planner_test.go:143_1" (25) [stage=temporary-upgrade]
│   ├── downgrade nodes :1-4 from "v23.2.0" to "v23.1.4"
│   │   ├── restart node 4 with binary version v23.1.4 (26) [stage=rollback-upgrade]
│   │   ├── restart node 3 with binary version v23.1.4 (27) [stage=rollback-upgrade]
│   │   ├── restart node 2 with binary version v23.1.4 (28) [stage=rollback-upgrade]
│   │   └── restart node 1 with binary version v23.1.4 (29) [stage=rollback-upgrade]
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 3 with binary version v23.2.0 (30) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (31) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v23.2.0 (32) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v23.2.0 (33) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (34) [stage=last-upgrade]
│   │   └── restart node 4 with binary version v23.2.0 (35) [stage=last-upgrade]
│   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (36) [stage=running-upgrade-migrations,finalizing]
│   ├── wait for all nodes (:1-4) to acknowledge cluster version '23.2' on system tenant (37) [stage=running-upgrade-migrations,finalizing]
│   └── run "validate upgrade" hookId="planner_test.go:145" (38) [stage=after-upgrade-finished]
├── upgrade cluster from "v23.2.0" to "v24.1.1"
│   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (39) [stage=selectProtectedNodes]
│   ├── upgrade nodes :1-4 from "v23.2.0" to "v24.1.1"
│   │   ├── restart node 3 with binary version v24.1.1 (40) [stage=temporary-upgrade]
│   │   ├── run following steps concurrently
│   │   │   ├── run "mixed-version 1" hookId="planner_test.go:143", after 100ms delay (41) [stage=temporary-upgrade]
│   │   │   └── set cluster setting "storage.sstable.compression_algorithm" to 'snappy' on system tenant, after 5s delay (42) [stage=temporary-upgrade]
│   │   ├── restart node 2 with binary version v24.1.1 (43) [stage=temporary-upgrade]
│   │   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (44) [stage=temporary-upgrade]
│   │   ├── restart node 4 with binary version v24.1.1 (45) [stage=temporary-upgrade]
│   │   └── restart node 1 with binary version v24.1.1 (46) [stage=temporary-upgrade]
│   ├── downgrade nodes :1-4 from "v24.1.1" to "v23.2.0"
│   │   ├── restart node 2 with binary version v23.2.0 (47) [stage=rollback-upgrade]
│   │   ├── restart node 3 with binary version v23.2.0 (48) [stage=rollback-upgrade]
│   │   ├── restart node 1 with binary version v23.2.0 (49) [stage=rollback-upgrade]
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (50) [stage=rollback-upgrade]
│   │   └── restart node 4 with binary version v23.2.0 (51) [stage=rollback-upgrade]
│   ├── upgrade nodes :1-4 from "v23.2.0" to "v24.1.1"
│   │   ├── restart node 1 with binary version v24.1.1 (52) [stage=last-upgrade]
│   │   ├── restart node 3 with binary version v24.1.1 (53) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (54) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v24.1.1 (55) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (56) [stage=last-upgrade]
│   │   └── restart node 4 with binary version v24.1.1 (57) [stage=last-upgrade]
│   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (58) [stage=running-upgrade-migrations,finalizing]
│   ├── run "mixed-version 1" hookId="planner_test.go:143" (59) [stage=running-upgrade-migrations,finalizing]
│   ├── wait for all nodes (:1-4) to acknowledge cluster version '24.1' on system tenant (60) [stage=running-upgrade-migrations,finalizing]
│   └── run "validate upgrade" hookId="planner_test.go:145" (61) [stage=after-upgrade-finished]
└── upgrade cluster from "v24.1.1" to "v24.3.0 (<current>)"
   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (62) [stage=selectProtectedNodes]
   ├── upgrade nodes :1-4 from "v24.1.1" to "v24.3.0 (<current>)"
   │   ├── restart node 4 with binary version v24.3.0 (<current>) (63) [stage=temporary-upgrade]
   │   ├── restart node 3 with binary version v24.3.0 (<current>) (64) [stage=temporary-upgrade]
   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (65) [stage=temporary-upgrade]
   │   ├── restart node 2 with binary version v24.3.0 (<current>) (66) [stage=temporary-upgrade]
   │   ├── restart node 1 with binary version v24.3.0 (<current>) (67) [stage=temporary-upgrade]
   │   └── run "mixed-version 2" hookId="planner_test.go:143_1" (68) [stage=temporary-upgrade]
   ├── downgrade nodes :1-4 from "v24.3.0 (<current>)" to "v24.1.1"
   │   ├── restart node 4 with binary version v24.1.1 (69) [stage=rollback-upgrade]
   │   ├── restart node 2 with binary version v24.1.1 (70) [stage=rollback-upgrade]
   │   ├── restart node 1 with binary version v24.1.1 (71) [stage=rollback-upgrade]
   │   ├── reset cluster setting "storage.sstable.compression_algorithm" on system tenant (72) [stage=rollback-upgrade]
   │   ├── run "mixed-version 1" hookId="planner_test.go:143" (73) [stage=rollback-upgrade]
   │   └── restart node 3 with binary version v24.1.1 (74) [stage=rollback-upgrade]
   ├── upgrade nodes :1-4 from "v24.1.1" to "v24.3.0 (<current>)"
   │   ├── restart node 4 with binary version v24.3.0 (<current>) (75) [stage=last-upgrade]
   │   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (76) [stage=last-upgrade]
   │   ├── restart node 3 with binary version v24.3.0 (<current>) (77) [stage=last-upgrade]
   │   ├── restart node 1 with binary version v24.3.0 (<current>) (78) [stage=last-upgrade]
   │   ├── restart node 2 with binary version v24.3.0 (<current>) (79) [stage=last-upgrade]
   │   └── run "mixed-version 1" hookId="planner_test.go:143" (80) [stage=last-upgrade]
   ├── set cluster setting "storage.sstable.compression_algorithm" to 'snappy' on system tenant (81) [stage=running-upgrade-migrations,finalizing]
   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (82) [stage=running-upgrade-migrations,finalizing]
   ├── run "mixed-version 2" hookId="planner_test.go:143_1" (83) [stage=running-upgrade-migrations,finalizing]
   ├── wait for all nodes (:1-4) to acknowledge cluster version <current> on system tenant (84) [stage=running-upgrade-migrations,finalizing]
   └── run "validate upgrade" hookId="planner_test.go:145" (85) [stage=after-upgrade-finished]
