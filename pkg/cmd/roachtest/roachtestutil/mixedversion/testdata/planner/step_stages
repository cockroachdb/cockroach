# Test that steps have the expected upgrade stage associated to their
# context.

mixed-version-test predecessors=(21.2.11, 22.1.8, 22.2.3, 23.1.4, 23.2.0) num_upgrades=5
----
ok

in-mixed-version name=(mixed-version 1)
----
ok

in-mixed-version name=(mixed-version 2)
----
ok

workload name=bank
----
ok

background-command name=(csv server)
----
ok

after-upgrade-finalized name=(validate upgrade)
----
ok

plan debug=true
----
mixed-version test plan for upgrading from "v21.2.11" to "v22.1.8" to "v22.2.3" to "v23.1.4" to "v23.2.0" to "<current>":
├── start cluster at version "v21.2.11" (1) [stage=cluster-setup]
├── wait for nodes :1-4 to reach cluster version '21.2' (2) [stage=cluster-setup]
├── upgrade cluster from "v21.2.11" to "v22.1.8"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (3) [stage=init]
│   ├── upgrade nodes :1-4 from "v21.2.11" to "v22.1.8"
│   │   ├── restart node 3 with binary version v22.1.8 (4) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v22.1.8 (5) [stage=last-upgrade]
│   │   ├── wait for 1m0s (6) [stage=last-upgrade]
│   │   ├── restart node 4 with binary version v22.1.8 (7) [stage=last-upgrade]
│   │   └── restart node 1 with binary version v22.1.8 (8) [stage=last-upgrade]
│   ├── allow upgrade to happen by resetting `preserve_downgrade_option` (9) [stage=running-upgrade-migrations]
│   └── wait for nodes :1-4 to reach cluster version '22.1' (10) [stage=running-upgrade-migrations]
├── upgrade cluster from "v22.1.8" to "v22.2.3"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (11) [stage=init]
│   ├── upgrade nodes :1-4 from "v22.1.8" to "v22.2.3"
│   │   ├── restart node 1 with binary version v22.2.3 (12) [stage=temporary-upgrade]
│   │   ├── restart node 3 with binary version v22.2.3 (13) [stage=temporary-upgrade]
│   │   ├── restart node 4 with binary version v22.2.3 (14) [stage=temporary-upgrade]
│   │   └── restart node 2 with binary version v22.2.3 (15) [stage=temporary-upgrade]
│   ├── downgrade nodes :1-4 from "v22.2.3" to "v22.1.8"
│   │   ├── restart node 1 with binary version v22.1.8 (16) [stage=rollback-upgrade]
│   │   ├── restart node 3 with binary version v22.1.8 (17) [stage=rollback-upgrade]
│   │   ├── restart node 4 with binary version v22.1.8 (18) [stage=rollback-upgrade]
│   │   └── restart node 2 with binary version v22.1.8 (19) [stage=rollback-upgrade]
│   ├── upgrade nodes :1-4 from "v22.1.8" to "v22.2.3"
│   │   ├── restart node 4 with binary version v22.2.3 (20) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v22.2.3 (21) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v22.2.3 (22) [stage=last-upgrade]
│   │   ├── restart node 3 with binary version v22.2.3 (23) [stage=last-upgrade]
│   │   └── wait for 5m0s (24) [stage=last-upgrade]
│   ├── allow upgrade to happen by resetting `preserve_downgrade_option` (25) [stage=running-upgrade-migrations]
│   └── wait for nodes :1-4 to reach cluster version '22.2' (26) [stage=running-upgrade-migrations]
├── run "initialize bank workload" (27) [stage=on-startup]
├── start background hooks concurrently
│   ├── run "bank workload", after 30s delay (28) [stage=background]
│   └── run "csv server", after 5s delay (29) [stage=background]
├── upgrade cluster from "v22.2.3" to "v23.1.4"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (30) [stage=init]
│   ├── upgrade nodes :1-4 from "v22.2.3" to "v23.1.4"
│   │   ├── restart node 4 with binary version v23.1.4 (31) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" (32) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v23.1.4 (33) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v23.1.4 (34) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" (35) [stage=last-upgrade]
│   │   └── restart node 3 with binary version v23.1.4 (36) [stage=last-upgrade]
│   ├── allow upgrade to happen by resetting `preserve_downgrade_option` (37) [stage=running-upgrade-migrations]
│   ├── run "mixed-version 1" (38) [stage=running-upgrade-migrations]
│   ├── wait for nodes :1-4 to reach cluster version '23.1' (39) [stage=running-upgrade-migrations]
│   └── run "validate upgrade" (40) [stage=after-upgrade-finished]
├── upgrade cluster from "v23.1.4" to "v23.2.0"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (41) [stage=init]
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 2 with binary version v23.2.0 (42) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" (43) [stage=last-upgrade]
│   │   ├── restart node 3 with binary version v23.2.0 (44) [stage=last-upgrade]
│   │   ├── restart node 4 with binary version v23.2.0 (45) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" (46) [stage=last-upgrade]
│   │   └── restart node 1 with binary version v23.2.0 (47) [stage=last-upgrade]
│   ├── allow upgrade to happen by resetting `preserve_downgrade_option` (48) [stage=running-upgrade-migrations]
│   ├── run mixed-version hooks concurrently
│   │   ├── run "mixed-version 1", after 5s delay (49) [stage=running-upgrade-migrations]
│   │   └── run "mixed-version 2", after 30s delay (50) [stage=running-upgrade-migrations]
│   ├── wait for nodes :1-4 to reach cluster version '23.2' (51) [stage=running-upgrade-migrations]
│   └── run "validate upgrade" (52) [stage=after-upgrade-finished]
└── upgrade cluster from "v23.2.0" to "<current>"
   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (53) [stage=init]
   ├── upgrade nodes :1-4 from "v23.2.0" to "<current>"
   │   ├── restart node 2 with binary version <current> (54) [stage=temporary-upgrade]
   │   ├── restart node 4 with binary version <current> (55) [stage=temporary-upgrade]
   │   ├── run "mixed-version 1" (56) [stage=temporary-upgrade]
   │   ├── restart node 1 with binary version <current> (57) [stage=temporary-upgrade]
   │   ├── restart node 3 with binary version <current> (58) [stage=temporary-upgrade]
   │   └── run "mixed-version 2" (59) [stage=temporary-upgrade]
   ├── downgrade nodes :1-4 from "<current>" to "v23.2.0"
   │   ├── restart node 2 with binary version v23.2.0 (60) [stage=rollback-upgrade]
   │   ├── restart node 4 with binary version v23.2.0 (61) [stage=rollback-upgrade]
   │   ├── run mixed-version hooks concurrently
   │   │   ├── run "mixed-version 1", after 3m0s delay (62) [stage=rollback-upgrade]
   │   │   └── run "mixed-version 2", after 5s delay (63) [stage=rollback-upgrade]
   │   ├── restart node 3 with binary version v23.2.0 (64) [stage=rollback-upgrade]
   │   └── restart node 1 with binary version v23.2.0 (65) [stage=rollback-upgrade]
   ├── upgrade nodes :1-4 from "v23.2.0" to "<current>"
   │   ├── restart node 3 with binary version <current> (66) [stage=last-upgrade]
   │   ├── run "mixed-version 1" (67) [stage=last-upgrade]
   │   ├── restart node 1 with binary version <current> (68) [stage=last-upgrade]
   │   ├── run "mixed-version 2" (69) [stage=last-upgrade]
   │   ├── restart node 4 with binary version <current> (70) [stage=last-upgrade]
   │   └── restart node 2 with binary version <current> (71) [stage=last-upgrade]
   ├── allow upgrade to happen by resetting `preserve_downgrade_option` (72) [stage=running-upgrade-migrations]
   ├── run mixed-version hooks concurrently
   │   ├── run "mixed-version 1", after 100ms delay (73) [stage=running-upgrade-migrations]
   │   └── run "mixed-version 2", after 3m0s delay (74) [stage=running-upgrade-migrations]
   ├── wait for nodes :1-4 to reach cluster version <current> (75) [stage=running-upgrade-migrations]
   └── run "validate upgrade" (76) [stage=after-upgrade-finished]
