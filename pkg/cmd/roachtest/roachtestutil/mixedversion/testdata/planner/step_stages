# Test that steps have the expected upgrade stage associated to their
# context.

mixed-version-test predecessors=(21.2.11, 22.1.8, 22.2.3, 23.1.4, 23.2.0) num_upgrades=5
----
ok

in-mixed-version name=(mixed-version 1)
----
ok

in-mixed-version name=(mixed-version 2)
----
ok

workload name=bank
----
ok

background-command name=(csv server)
----
ok

after-upgrade-finalized name=(validate upgrade)
----
ok

plan debug=true
----
mixed-version test plan for upgrading from "v21.2.11" to "v22.1.8" to "v22.2.3" to "v23.1.4" to "v23.2.0" to "<current>":
├── start cluster at version "v21.2.11" (1) [stage=cluster-setup]
├── wait for nodes :1-4 to reach cluster version '21.2' (2) [stage=cluster-setup]
├── upgrade cluster from "v21.2.11" to "v22.1.8"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (3) [stage=init]
│   ├── upgrade nodes :1-4 from "v21.2.11" to "v22.1.8"
│   │   ├── restart node 3 with binary version v22.1.8 (4) [stage=temporary-upgrade]
│   │   ├── restart node 1 with binary version v22.1.8 (5) [stage=temporary-upgrade]
│   │   ├── restart node 2 with binary version v22.1.8 (6) [stage=temporary-upgrade]
│   │   ├── wait for 10m0s (7) [stage=temporary-upgrade]
│   │   └── restart node 4 with binary version v22.1.8 (8) [stage=temporary-upgrade]
│   ├── downgrade nodes :1-4 from "v22.1.8" to "v21.2.11"
│   │   ├── restart node 1 with binary version v21.2.11 (9) [stage=rollback-upgrade]
│   │   ├── restart node 4 with binary version v21.2.11 (10) [stage=rollback-upgrade]
│   │   ├── restart node 3 with binary version v21.2.11 (11) [stage=rollback-upgrade]
│   │   └── restart node 2 with binary version v21.2.11 (12) [stage=rollback-upgrade]
│   ├── upgrade nodes :1-4 from "v21.2.11" to "v22.1.8"
│   │   ├── restart node 3 with binary version v22.1.8 (13) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v22.1.8 (14) [stage=last-upgrade]
│   │   ├── wait for 5m0s (15) [stage=last-upgrade]
│   │   ├── restart node 4 with binary version v22.1.8 (16) [stage=last-upgrade]
│   │   └── restart node 2 with binary version v22.1.8 (17) [stage=last-upgrade]
│   ├── finalize upgrade by resetting `preserve_downgrade_option` (18) [stage=running-upgrade-migrations]
│   └── wait for nodes :1-4 to reach cluster version '22.1' (19) [stage=running-upgrade-migrations]
├── upgrade cluster from "v22.1.8" to "v22.2.3"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (20) [stage=init]
│   ├── upgrade nodes :1-4 from "v22.1.8" to "v22.2.3"
│   │   ├── restart node 4 with binary version v22.2.3 (21) [stage=last-upgrade]
│   │   ├── wait for 5m0s (22) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v22.2.3 (23) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v22.2.3 (24) [stage=last-upgrade]
│   │   └── restart node 3 with binary version v22.2.3 (25) [stage=last-upgrade]
│   ├── finalize upgrade by resetting `preserve_downgrade_option` (26) [stage=running-upgrade-migrations]
│   └── wait for nodes :1-4 to reach cluster version '22.2' (27) [stage=running-upgrade-migrations]
├── run "initialize bank workload" (28) [stage=on-startup]
├── start background hooks concurrently
│   ├── run "bank workload", after 30s delay (29) [stage=background]
│   └── run "csv server", after 500ms delay (30) [stage=background]
├── upgrade cluster from "v22.2.3" to "v23.1.4"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (31) [stage=init]
│   ├── upgrade nodes :1-4 from "v22.2.3" to "v23.1.4"
│   │   ├── restart node 1 with binary version v23.1.4 (32) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v23.1.4 (33) [stage=last-upgrade]
│   │   ├── restart node 3 with binary version v23.1.4 (34) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" (35) [stage=last-upgrade]
│   │   ├── restart node 4 with binary version v23.1.4 (36) [stage=last-upgrade]
│   │   └── run "mixed-version 2" (37) [stage=last-upgrade]
│   ├── finalize upgrade by resetting `preserve_downgrade_option` (38) [stage=running-upgrade-migrations]
│   ├── run "mixed-version 1" (39) [stage=running-upgrade-migrations]
│   ├── wait for nodes :1-4 to reach cluster version '23.1' (40) [stage=running-upgrade-migrations]
│   └── run "validate upgrade" (41) [stage=after-upgrade-finished]
├── upgrade cluster from "v23.1.4" to "v23.2.0"
│   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (42) [stage=init]
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 4 with binary version v23.2.0 (43) [stage=temporary-upgrade]
│   │   ├── run "mixed-version 1" (44) [stage=temporary-upgrade]
│   │   ├── restart node 3 with binary version v23.2.0 (45) [stage=temporary-upgrade]
│   │   ├── restart node 1 with binary version v23.2.0 (46) [stage=temporary-upgrade]
│   │   ├── run "mixed-version 2" (47) [stage=temporary-upgrade]
│   │   └── restart node 2 with binary version v23.2.0 (48) [stage=temporary-upgrade]
│   ├── downgrade nodes :1-4 from "v23.2.0" to "v23.1.4"
│   │   ├── restart node 2 with binary version v23.1.4 (49) [stage=rollback-upgrade]
│   │   ├── restart node 4 with binary version v23.1.4 (50) [stage=rollback-upgrade]
│   │   ├── run "mixed-version 1" (51) [stage=rollback-upgrade]
│   │   ├── restart node 1 with binary version v23.1.4 (52) [stage=rollback-upgrade]
│   │   ├── run "mixed-version 2" (53) [stage=rollback-upgrade]
│   │   └── restart node 3 with binary version v23.1.4 (54) [stage=rollback-upgrade]
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 3 with binary version v23.2.0 (55) [stage=last-upgrade]
│   │   ├── run "mixed-version 2" (56) [stage=last-upgrade]
│   │   ├── restart node 2 with binary version v23.2.0 (57) [stage=last-upgrade]
│   │   ├── restart node 1 with binary version v23.2.0 (58) [stage=last-upgrade]
│   │   ├── run "mixed-version 1" (59) [stage=last-upgrade]
│   │   └── restart node 4 with binary version v23.2.0 (60) [stage=last-upgrade]
│   ├── finalize upgrade by resetting `preserve_downgrade_option` (61) [stage=running-upgrade-migrations]
│   ├── wait for nodes :1-4 to reach cluster version '23.2' (62) [stage=running-upgrade-migrations]
│   └── run "validate upgrade" (63) [stage=after-upgrade-finished]
└── upgrade cluster from "v23.2.0" to "<current>"
   ├── prevent auto-upgrades by setting `preserve_downgrade_option` (64) [stage=init]
   ├── upgrade nodes :1-4 from "v23.2.0" to "<current>"
   │   ├── restart node 2 with binary version <current> (65) [stage=temporary-upgrade]
   │   ├── restart node 3 with binary version <current> (66) [stage=temporary-upgrade]
   │   ├── restart node 4 with binary version <current> (67) [stage=temporary-upgrade]
   │   ├── run "mixed-version 1" (68) [stage=temporary-upgrade]
   │   ├── restart node 1 with binary version <current> (69) [stage=temporary-upgrade]
   │   └── run "mixed-version 2" (70) [stage=temporary-upgrade]
   ├── downgrade nodes :1-4 from "<current>" to "v23.2.0"
   │   ├── restart node 3 with binary version v23.2.0 (71) [stage=rollback-upgrade]
   │   ├── run "mixed-version 2" (72) [stage=rollback-upgrade]
   │   ├── restart node 2 with binary version v23.2.0 (73) [stage=rollback-upgrade]
   │   ├── restart node 4 with binary version v23.2.0 (74) [stage=rollback-upgrade]
   │   ├── run "mixed-version 1" (75) [stage=rollback-upgrade]
   │   └── restart node 1 with binary version v23.2.0 (76) [stage=rollback-upgrade]
   ├── upgrade nodes :1-4 from "v23.2.0" to "<current>"
   │   ├── restart node 3 with binary version <current> (77) [stage=last-upgrade]
   │   ├── run "mixed-version 2" (78) [stage=last-upgrade]
   │   ├── restart node 4 with binary version <current> (79) [stage=last-upgrade]
   │   ├── restart node 1 with binary version <current> (80) [stage=last-upgrade]
   │   ├── restart node 2 with binary version <current> (81) [stage=last-upgrade]
   │   └── run "mixed-version 1" (82) [stage=last-upgrade]
   ├── finalize upgrade by resetting `preserve_downgrade_option` (83) [stage=running-upgrade-migrations]
   ├── run "mixed-version 2" (84) [stage=running-upgrade-migrations]
   ├── wait for nodes :1-4 to reach cluster version <current> (85) [stage=running-upgrade-migrations]
   └── run "validate upgrade" (86) [stage=after-upgrade-finished]
