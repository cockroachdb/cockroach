# Test that we are able to generate "skip-version" upgrades when
# requested (default disabled if no custom option is passed).

mixed-version-test predecessors=(22.2.3, 23.1.4, 23.2.0, 24.1.1, 24.2.0) num_upgrades=3 enable_skip_version
----
ok

in-mixed-version name=(mixed-version 1)
----
ok

in-mixed-version name=(mixed-version 2)
----
ok

workload name=bank
----
ok

background-command name=(csv server)
----
ok

after-upgrade-finalized name=(validate upgrade)
----
ok

plan
----
Seed:               12345
Upgrades:           v23.1.4 → v23.2.0 → v24.1.1 → <current>
Deployment mode:    system-only
Plan:
├── start cluster at version "v23.1.4" (1)
├── wait for all nodes (:1-4) to acknowledge cluster version '23.1' on system tenant (2)
├── run "initialize bank workload" (3)
├── start background hooks concurrently
│   ├── run "bank workload", after 500ms delay (4)
│   └── run "csv server", after 100ms delay (5)
├── upgrade cluster from "v23.1.4" to "v23.2.0"
│   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (6)
│   ├── upgrade nodes :1-4 from "v23.1.4" to "v23.2.0"
│   │   ├── restart node 4 with binary version v23.2.0 (7)
│   │   ├── run "mixed-version 1" (8)
│   │   ├── restart node 3 with binary version v23.2.0 (9)
│   │   ├── restart node 2 with binary version v23.2.0 (10)
│   │   ├── run "mixed-version 2" (11)
│   │   └── restart node 1 with binary version v23.2.0 (12)
│   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (13)
│   ├── run "mixed-version 1" (14)
│   ├── wait for all nodes (:1-4) to acknowledge cluster version '23.2' on system tenant (15)
│   └── run "validate upgrade" (16)
├── upgrade cluster from "v23.2.0" to "v24.1.1"
│   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (17)
│   ├── upgrade nodes :1-4 from "v23.2.0" to "v24.1.1"
│   │   ├── restart node 4 with binary version v24.1.1 (18)
│   │   ├── run "mixed-version 1" (19)
│   │   ├── restart node 1 with binary version v24.1.1 (20)
│   │   ├── restart node 2 with binary version v24.1.1 (21)
│   │   ├── run "mixed-version 2" (22)
│   │   └── restart node 3 with binary version v24.1.1 (23)
│   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (24)
│   ├── run "mixed-version 2" (25)
│   ├── wait for all nodes (:1-4) to acknowledge cluster version '24.1' on system tenant (26)
│   └── run "validate upgrade" (27)
└── upgrade cluster from "v24.1.1" to "<current>"
   ├── prevent auto-upgrades on system tenant by setting `preserve_downgrade_option` (28)
   ├── upgrade nodes :1-4 from "v24.1.1" to "<current>"
   │   ├── restart node 3 with binary version <current> (29)
   │   ├── run "mixed-version 1" (30)
   │   ├── restart node 4 with binary version <current> (31)
   │   ├── restart node 2 with binary version <current> (32)
   │   ├── run "mixed-version 2" (33)
   │   └── restart node 1 with binary version <current> (34)
   ├── downgrade nodes :1-4 from "<current>" to "v24.1.1"
   │   ├── restart node 3 with binary version v24.1.1 (35)
   │   ├── run "mixed-version 2" (36)
   │   ├── restart node 2 with binary version v24.1.1 (37)
   │   ├── restart node 1 with binary version v24.1.1 (38)
   │   ├── run "mixed-version 1" (39)
   │   └── restart node 4 with binary version v24.1.1 (40)
   ├── upgrade nodes :1-4 from "v24.1.1" to "<current>"
   │   ├── restart node 1 with binary version <current> (41)
   │   ├── restart node 3 with binary version <current> (42)
   │   ├── run "mixed-version 2" (43)
   │   ├── restart node 4 with binary version <current> (44)
   │   ├── run "mixed-version 1" (45)
   │   └── restart node 2 with binary version <current> (46)
   ├── allow upgrade to happen on system tenant by resetting `preserve_downgrade_option` (47)
   ├── run "mixed-version 2" (48)
   ├── wait for all nodes (:1-4) to acknowledge cluster version <current> on system tenant (49)
   └── run "validate upgrade" (50)
