// Code generated by MockGen. DO NOT EDIT.
// Source: cluster_interface.go

// Package main is a generated GoMock package.
package main

import (
	context "context"
	sql "database/sql"
	os "os"
	reflect "reflect"

	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/logger"
	option "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/option"
	spec "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/spec"
	gomock "github.com/golang/mock/gomock"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockCluster) All() option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockClusterMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCluster)(nil).All))
}

// CheckReplicaDivergenceOnDB mocks base method.
func (m *MockCluster) CheckReplicaDivergenceOnDB(arg0 context.Context, arg1 *test, arg2 *sql.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReplicaDivergenceOnDB", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckReplicaDivergenceOnDB indicates an expected call of CheckReplicaDivergenceOnDB.
func (mr *MockClusterMockRecorder) CheckReplicaDivergenceOnDB(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReplicaDivergenceOnDB", reflect.TypeOf((*MockCluster)(nil).CheckReplicaDivergenceOnDB), arg0, arg1, arg2)
}

// Conn mocks base method.
func (m *MockCluster) Conn(ctx context.Context, node int) *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn", ctx, node)
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockClusterMockRecorder) Conn(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockCluster)(nil).Conn), ctx, node)
}

// ConnE mocks base method.
func (m *MockCluster) ConnE(ctx context.Context, node int) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnE", ctx, node)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnE indicates an expected call of ConnE.
func (mr *MockClusterMockRecorder) ConnE(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnE", reflect.TypeOf((*MockCluster)(nil).ConnE), ctx, node)
}

// ConnSecure mocks base method.
func (m *MockCluster) ConnSecure(ctx context.Context, node int, user, certsDir string, port int) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnSecure", ctx, node, user, certsDir, port)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnSecure indicates an expected call of ConnSecure.
func (mr *MockClusterMockRecorder) ConnSecure(ctx, node, user, certsDir, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnSecure", reflect.TypeOf((*MockCluster)(nil).ConnSecure), ctx, node, user, certsDir, port)
}

// EncryptAtRandom mocks base method.
func (m *MockCluster) EncryptAtRandom(on bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptAtRandom", on)
}

// EncryptAtRandom indicates an expected call of EncryptAtRandom.
func (mr *MockClusterMockRecorder) EncryptAtRandom(on interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptAtRandom", reflect.TypeOf((*MockCluster)(nil).EncryptAtRandom), on)
}

// EncryptDefault mocks base method.
func (m *MockCluster) EncryptDefault(on bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EncryptDefault", on)
}

// EncryptDefault indicates an expected call of EncryptDefault.
func (mr *MockClusterMockRecorder) EncryptDefault(on interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptDefault", reflect.TypeOf((*MockCluster)(nil).EncryptDefault), on)
}

// ExternalAddr mocks base method.
func (m *MockCluster) ExternalAddr(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalAddr", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalAddr indicates an expected call of ExternalAddr.
func (mr *MockClusterMockRecorder) ExternalAddr(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalAddr", reflect.TypeOf((*MockCluster)(nil).ExternalAddr), ctx, node)
}

// ExternalAdminUIAddr mocks base method.
func (m *MockCluster) ExternalAdminUIAddr(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalAdminUIAddr", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalAdminUIAddr indicates an expected call of ExternalAdminUIAddr.
func (mr *MockClusterMockRecorder) ExternalAdminUIAddr(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalAdminUIAddr", reflect.TypeOf((*MockCluster)(nil).ExternalAdminUIAddr), ctx, node)
}

// ExternalIP mocks base method.
func (m *MockCluster) ExternalIP(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalIP", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalIP indicates an expected call of ExternalIP.
func (mr *MockClusterMockRecorder) ExternalIP(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalIP", reflect.TypeOf((*MockCluster)(nil).ExternalIP), ctx, node)
}

// ExternalPGUrl mocks base method.
func (m *MockCluster) ExternalPGUrl(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalPGUrl", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalPGUrl indicates an expected call of ExternalPGUrl.
func (mr *MockClusterMockRecorder) ExternalPGUrl(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalPGUrl", reflect.TypeOf((*MockCluster)(nil).ExternalPGUrl), ctx, node)
}

// ExternalPGUrlSecure mocks base method.
func (m *MockCluster) ExternalPGUrlSecure(ctx context.Context, node option.NodeListOption, user, certsDir string, port int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalPGUrlSecure", ctx, node, user, certsDir, port)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalPGUrlSecure indicates an expected call of ExternalPGUrlSecure.
func (mr *MockClusterMockRecorder) ExternalPGUrlSecure(ctx, node, user, certsDir, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalPGUrlSecure", reflect.TypeOf((*MockCluster)(nil).ExternalPGUrlSecure), ctx, node, user, certsDir, port)
}

// FetchDiskUsage mocks base method.
func (m *MockCluster) FetchDiskUsage(ctx context.Context, t *test) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDiskUsage", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchDiskUsage indicates an expected call of FetchDiskUsage.
func (mr *MockClusterMockRecorder) FetchDiskUsage(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDiskUsage", reflect.TypeOf((*MockCluster)(nil).FetchDiskUsage), ctx, t)
}

// Get mocks base method.
func (m *MockCluster) Get(ctx context.Context, l *logger.Logger, src, dest string, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, src, dest}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClusterMockRecorder) Get(ctx, l, src, dest interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, src, dest}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCluster)(nil).Get), varargs...)
}

// GitClone mocks base method.
func (m *MockCluster) GitClone(ctx context.Context, l *logger.Logger, src, dest, branch string, node option.NodeListOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitClone", ctx, l, src, dest, branch, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitClone indicates an expected call of GitClone.
func (mr *MockClusterMockRecorder) GitClone(ctx, l, src, dest, branch, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitClone", reflect.TypeOf((*MockCluster)(nil).GitClone), ctx, l, src, dest, branch, node)
}

// Install mocks base method.
func (m *MockCluster) Install(ctx context.Context, l *logger.Logger, node option.NodeListOption, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Install", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockClusterMockRecorder) Install(ctx, l, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockCluster)(nil).Install), varargs...)
}

// InternalAddr mocks base method.
func (m *MockCluster) InternalAddr(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalAddr", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalAddr indicates an expected call of InternalAddr.
func (mr *MockClusterMockRecorder) InternalAddr(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalAddr", reflect.TypeOf((*MockCluster)(nil).InternalAddr), ctx, node)
}

// InternalAdminUIAddr mocks base method.
func (m *MockCluster) InternalAdminUIAddr(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalAdminUIAddr", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalAdminUIAddr indicates an expected call of InternalAdminUIAddr.
func (mr *MockClusterMockRecorder) InternalAdminUIAddr(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalAdminUIAddr", reflect.TypeOf((*MockCluster)(nil).InternalAdminUIAddr), ctx, node)
}

// InternalIP mocks base method.
func (m *MockCluster) InternalIP(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalIP", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalIP indicates an expected call of InternalIP.
func (mr *MockClusterMockRecorder) InternalIP(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalIP", reflect.TypeOf((*MockCluster)(nil).InternalIP), ctx, node)
}

// InternalPGUrl mocks base method.
func (m *MockCluster) InternalPGUrl(ctx context.Context, node option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalPGUrl", ctx, node)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalPGUrl indicates an expected call of InternalPGUrl.
func (mr *MockClusterMockRecorder) InternalPGUrl(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalPGUrl", reflect.TypeOf((*MockCluster)(nil).InternalPGUrl), ctx, node)
}

// Name mocks base method.
func (m *MockCluster) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockClusterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCluster)(nil).Name))
}

// Node mocks base method.
func (m *MockCluster) Node(i int) option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", i)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockClusterMockRecorder) Node(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockCluster)(nil).Node), i)
}

// Nodes mocks base method.
func (m *MockCluster) Nodes(ns ...int) option.NodeListOption {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nodes", varargs...)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockClusterMockRecorder) Nodes(ns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCluster)(nil).Nodes), ns...)
}

// Put mocks base method.
func (m *MockCluster) Put(ctx context.Context, src, dest string, opts ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, src, dest}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Put", varargs...)
}

// Put indicates an expected call of Put.
func (mr *MockClusterMockRecorder) Put(ctx, src, dest interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, src, dest}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCluster)(nil).Put), varargs...)
}

// PutE mocks base method.
func (m *MockCluster) PutE(ctx context.Context, l *logger.Logger, src, dest string, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, src, dest}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutE indicates an expected call of PutE.
func (mr *MockClusterMockRecorder) PutE(ctx, l, src, dest interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, src, dest}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutE", reflect.TypeOf((*MockCluster)(nil).PutE), varargs...)
}

// PutLibraries mocks base method.
func (m *MockCluster) PutLibraries(ctx context.Context, libraryDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLibraries", ctx, libraryDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLibraries indicates an expected call of PutLibraries.
func (mr *MockClusterMockRecorder) PutLibraries(ctx, libraryDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLibraries", reflect.TypeOf((*MockCluster)(nil).PutLibraries), ctx, libraryDir)
}

// PutString mocks base method.
func (m *MockCluster) PutString(ctx context.Context, content, dest string, mode os.FileMode, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, content, dest, mode}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutString", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutString indicates an expected call of PutString.
func (mr *MockClusterMockRecorder) PutString(ctx, content, dest, mode interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, content, dest, mode}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutString", reflect.TypeOf((*MockCluster)(nil).PutString), varargs...)
}

// Range mocks base method.
func (m *MockCluster) Range(begin, end int) option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", begin, end)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockClusterMockRecorder) Range(begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockCluster)(nil).Range), begin, end)
}

// Reformat mocks base method.
func (m *MockCluster) Reformat(ctx context.Context, node option.NodeListOption, args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Reformat", varargs...)
}

// Reformat indicates an expected call of Reformat.
func (mr *MockClusterMockRecorder) Reformat(ctx, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reformat", reflect.TypeOf((*MockCluster)(nil).Reformat), varargs...)
}

// Reset mocks base method.
func (m *MockCluster) Reset(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockClusterMockRecorder) Reset(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCluster)(nil).Reset), ctx)
}

// Run mocks base method.
func (m *MockCluster) Run(ctx context.Context, node option.NodeListOption, args ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Run", varargs...)
}

// Run indicates an expected call of Run.
func (mr *MockClusterMockRecorder) Run(ctx, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCluster)(nil).Run), varargs...)
}

// RunE mocks base method.
func (m *MockCluster) RunE(ctx context.Context, node option.NodeListOption, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockClusterMockRecorder) RunE(ctx, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*MockCluster)(nil).RunE), varargs...)
}

// RunL mocks base method.
func (m *MockCluster) RunL(ctx context.Context, l *logger.Logger, node option.NodeListOption, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunL", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunL indicates an expected call of RunL.
func (mr *MockClusterMockRecorder) RunL(ctx, l, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunL", reflect.TypeOf((*MockCluster)(nil).RunL), varargs...)
}

// RunWithBuffer mocks base method.
func (m *MockCluster) RunWithBuffer(ctx context.Context, l *logger.Logger, node option.NodeListOption, args ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithBuffer", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithBuffer indicates an expected call of RunWithBuffer.
func (mr *MockClusterMockRecorder) RunWithBuffer(ctx, l, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithBuffer", reflect.TypeOf((*MockCluster)(nil).RunWithBuffer), varargs...)
}

// Spec mocks base method.
func (m *MockCluster) Spec() spec.ClusterSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec")
	ret0, _ := ret[0].(spec.ClusterSpec)
	return ret0
}

// Spec indicates an expected call of Spec.
func (mr *MockClusterMockRecorder) Spec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockCluster)(nil).Spec))
}

// Stage mocks base method.
func (m *MockCluster) Stage(ctx context.Context, l *logger.Logger, application, versionOrSHA, dir string, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, application, versionOrSHA, dir}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stage indicates an expected call of Stage.
func (mr *MockClusterMockRecorder) Stage(ctx, l, application, versionOrSHA, dir interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, application, versionOrSHA, dir}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stage", reflect.TypeOf((*MockCluster)(nil).Stage), varargs...)
}

// Start mocks base method.
func (m *MockCluster) Start(ctx context.Context, t *test, opts ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, t}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Start", varargs...)
}

// Start indicates an expected call of Start.
func (mr *MockClusterMockRecorder) Start(ctx, t interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, t}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCluster)(nil).Start), varargs...)
}

// StartE mocks base method.
func (m *MockCluster) StartE(ctx context.Context, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartE indicates an expected call of StartE.
func (mr *MockClusterMockRecorder) StartE(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartE", reflect.TypeOf((*MockCluster)(nil).StartE), varargs...)
}

// Stop mocks base method.
func (m *MockCluster) Stop(ctx context.Context, opts ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Stop", varargs...)
}

// Stop indicates an expected call of Stop.
func (mr *MockClusterMockRecorder) Stop(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCluster)(nil).Stop), varargs...)
}

// StopCockroachGracefullyOnNode mocks base method.
func (m *MockCluster) StopCockroachGracefullyOnNode(ctx context.Context, node int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCockroachGracefullyOnNode", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopCockroachGracefullyOnNode indicates an expected call of StopCockroachGracefullyOnNode.
func (mr *MockClusterMockRecorder) StopCockroachGracefullyOnNode(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCockroachGracefullyOnNode", reflect.TypeOf((*MockCluster)(nil).StopCockroachGracefullyOnNode), ctx, node)
}

// StopE mocks base method.
func (m *MockCluster) StopE(ctx context.Context, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopE indicates an expected call of StopE.
func (mr *MockClusterMockRecorder) StopE(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopE", reflect.TypeOf((*MockCluster)(nil).StopE), varargs...)
}

// Wipe mocks base method.
func (m *MockCluster) Wipe(ctx context.Context, opts ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Wipe", varargs...)
}

// Wipe indicates an expected call of Wipe.
func (mr *MockClusterMockRecorder) Wipe(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipe", reflect.TypeOf((*MockCluster)(nil).Wipe), varargs...)
}

// WipeE mocks base method.
func (m *MockCluster) WipeE(ctx context.Context, l *logger.Logger, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WipeE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WipeE indicates an expected call of WipeE.
func (mr *MockClusterMockRecorder) WipeE(ctx, l interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WipeE", reflect.TypeOf((*MockCluster)(nil).WipeE), varargs...)
}

// isLocal mocks base method.
func (m *MockCluster) isLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// isLocal indicates an expected call of isLocal.
func (mr *MockClusterMockRecorder) isLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isLocal", reflect.TypeOf((*MockCluster)(nil).isLocal))
}

// makeNodes mocks base method.
func (m *MockCluster) makeNodes(opts ...option.Option) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "makeNodes", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// makeNodes indicates an expected call of makeNodes.
func (mr *MockClusterMockRecorder) makeNodes(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeNodes", reflect.TypeOf((*MockCluster)(nil).makeNodes), opts...)
}
