diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/hash_func.out --label=/mnt/data1/postgres/src/test/regress/results/hash_func.out /mnt/data1/postgres/src/test/regress/expected/hash_func.out /mnt/data1/postgres/src/test/regress/results/hash_func.out
--- /mnt/data1/postgres/src/test/regress/expected/hash_func.out
+++ /mnt/data1/postgres/src/test/regress/results/hash_func.out
@@ -11,70 +11,49 @@
 FROM   (VALUES (0::int2), (1::int2), (17::int2), (42::int2)) x(v)
 WHERE  hashint2(v)::bit(32) != hashint2extended(v, 0)::bit(32)
        OR hashint2(v)::bit(32) = hashint2extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashint2()
 SELECT v as value, hashint4(v)::bit(32) as standard,
        hashint4extended(v, 0)::bit(32) as extended0,
        hashint4extended(v, 1)::bit(32) as extended1
 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v)
 WHERE  hashint4(v)::bit(32) != hashint4extended(v, 0)::bit(32)
        OR hashint4(v)::bit(32) = hashint4extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashint4()
 SELECT v as value, hashint8(v)::bit(32) as standard,
        hashint8extended(v, 0)::bit(32) as extended0,
        hashint8extended(v, 1)::bit(32) as extended1
 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v)
 WHERE  hashint8(v)::bit(32) != hashint8extended(v, 0)::bit(32)
        OR hashint8(v)::bit(32) = hashint8extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashint8()
 SELECT v as value, hashfloat4(v)::bit(32) as standard,
        hashfloat4extended(v, 0)::bit(32) as extended0,
        hashfloat4extended(v, 1)::bit(32) as extended1
 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v)
 WHERE  hashfloat4(v)::bit(32) != hashfloat4extended(v, 0)::bit(32)
        OR hashfloat4(v)::bit(32) = hashfloat4extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashfloat4()
 SELECT v as value, hashfloat8(v)::bit(32) as standard,
        hashfloat8extended(v, 0)::bit(32) as extended0,
        hashfloat8extended(v, 1)::bit(32) as extended1
 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v)
 WHERE  hashfloat8(v)::bit(32) != hashfloat8extended(v, 0)::bit(32)
        OR hashfloat8(v)::bit(32) = hashfloat8extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashfloat8()
 SELECT v as value, hashoid(v)::bit(32) as standard,
        hashoidextended(v, 0)::bit(32) as extended0,
        hashoidextended(v, 1)::bit(32) as extended1
 FROM   (VALUES (0), (1), (17), (42), (550273), (207112489)) x(v)
 WHERE  hashoid(v)::bit(32) != hashoidextended(v, 0)::bit(32)
        OR hashoid(v)::bit(32) = hashoidextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashoid()
 SELECT v as value, hashchar(v)::bit(32) as standard,
        hashcharextended(v, 0)::bit(32) as extended0,
        hashcharextended(v, 1)::bit(32) as extended1
 FROM   (VALUES (NULL::"char"), ('1'), ('x'), ('X'), ('p'), ('N')) x(v)
 WHERE  hashchar(v)::bit(32) != hashcharextended(v, 0)::bit(32)
        OR hashchar(v)::bit(32) = hashcharextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashchar()
 SELECT v as value, hashname(v)::bit(32) as standard,
        hashnameextended(v, 0)::bit(32) as extended0,
        hashnameextended(v, 1)::bit(32) as extended1
@@ -82,10 +61,7 @@
         ('muop28x03'), ('yi3nm0d73')) x(v)
 WHERE  hashname(v)::bit(32) != hashnameextended(v, 0)::bit(32)
        OR hashname(v)::bit(32) = hashnameextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashname()
 SELECT v as value, hashtext(v)::bit(32) as standard,
        hashtextextended(v, 0)::bit(32) as extended0,
        hashtextextended(v, 1)::bit(32) as extended1
@@ -93,10 +69,7 @@
         ('muop28x03'), ('yi3nm0d73')) x(v)
 WHERE  hashtext(v)::bit(32) != hashtextextended(v, 0)::bit(32)
        OR hashtext(v)::bit(32) = hashtextextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashtext()
 SELECT v as value, hashoidvector(v)::bit(32) as standard,
        hashoidvectorextended(v, 0)::bit(32) as extended0,
        hashoidvectorextended(v, 1)::bit(32) as extended1
@@ -105,20 +78,14 @@
         ('207112489 207112499 21512 2155 372325 1363252')) x(v)
 WHERE  hashoidvector(v)::bit(32) != hashoidvectorextended(v, 0)::bit(32)
        OR hashoidvector(v)::bit(32) = hashoidvectorextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and oidvector cannot be matched
 SELECT v as value, hash_aclitem(v)::bit(32) as standard,
        hash_aclitem_extended(v, 0)::bit(32) as extended0,
        hash_aclitem_extended(v, 1)::bit(32) as extended1
 FROM   (SELECT DISTINCT(relacl[1]) FROM pg_class LIMIT 10) x(v)
 WHERE  hash_aclitem(v)::bit(32) != hash_aclitem_extended(v, 0)::bit(32)
        OR hash_aclitem(v)::bit(32) = hash_aclitem_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hash_aclitem()
 SELECT v as value, hashmacaddr(v)::bit(32) as standard,
        hashmacaddrextended(v, 0)::bit(32) as extended0,
        hashmacaddrextended(v, 1)::bit(32) as extended1
@@ -127,10 +94,15 @@
         ('ea:29:b1:5e:1f:a5')) x(v)
 WHERE  hashmacaddr(v)::bit(32) != hashmacaddrextended(v, 0)::bit(32)
        OR hashmacaddr(v)::bit(32) = hashmacaddrextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT v as value, hashmacaddr(v)::bit(32) as standard,
+       hashmacaddrextended(v, 0)::bit(32) as extended0,
+       hashmacaddrextended(v, 1)::bit(32) as extended1
+FROM   (VALUES (NULL::macaddr), ('08:00:2b:01:02:04'), ('08:00:2b:01:02:04'),
+                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/45813/_version_
 SELECT v as value, hashinet(v)::bit(32) as standard,
        hashinetextended(v, 0)::bit(32) as extended0,
        hashinetextended(v, 1)::bit(32) as extended1
@@ -138,10 +110,7 @@
         ('172.168.10.126/16'), ('172.18.103.126/24'), ('192.188.13.16/32')) x(v)
 WHERE  hashinet(v)::bit(32) != hashinetextended(v, 0)::bit(32)
        OR hashinet(v)::bit(32) = hashinetextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and inet cannot be matched
 SELECT v as value, hash_numeric(v)::bit(32) as standard,
        hash_numeric_extended(v, 0)::bit(32) as extended0,
        hash_numeric_extended(v, 1)::bit(32) as extended1
@@ -149,10 +118,7 @@
         (149484958.550273), (2071124898672)) x(v)
 WHERE  hash_numeric(v)::bit(32) != hash_numeric_extended(v, 0)::bit(32)
        OR hash_numeric(v)::bit(32) = hash_numeric_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types decimal and int cannot be matched
 SELECT v as value, hashmacaddr8(v)::bit(32) as standard,
        hashmacaddr8extended(v, 0)::bit(32) as extended0,
        hashmacaddr8extended(v, 1)::bit(32) as extended1
@@ -161,10 +127,15 @@
         ('d6:a9:4a:78:1c:d5:47:32'), ('ea:29:b1:5e:1f:a5')) x(v)
 WHERE  hashmacaddr8(v)::bit(32) != hashmacaddr8extended(v, 0)::bit(32)
        OR hashmacaddr8(v)::bit(32) = hashmacaddr8extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT v as value, hashmacaddr8(v)::bit(32) as standard,
+       hashmacaddr8extended(v, 0)::bit(32) as extended0,
+       hashmacaddr8extended(v, 1)::bit(32) as extended1
+FROM   (VALUES (NULL::macaddr8), ('08:00:2b:01:02:04:36:49'),
+                              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/45813/_version_
 SELECT v as value, hash_array(v)::bit(32) as standard,
        hash_array_extended(v, 0)::bit(32) as extended0,
        hash_array_extended(v, 1)::bit(32) as extended1
@@ -173,17 +144,26 @@
         ('{207112489, 807112489}')) x(v)
 WHERE  hash_array(v)::bit(32) != hash_array_extended(v, 0)::bit(32)
        OR hash_array(v)::bit(32) = hash_array_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and int4[] cannot be matched
 -- array hashing with non-hashable element type
 SELECT v as value, hash_array(v)::bit(32) as standard
 FROM   (VALUES ('{0}'::money[])) x(v);
-ERROR:  could not identify a hash function for type money
+ERROR:  at or near "[": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT v as value, hash_array(v)::bit(32) as standard
+FROM   (VALUES ('{0}'::money[])) x(v)
+                            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/41578/_version_
 SELECT v as value, hash_array_extended(v, 0)::bit(32) as extended0
 FROM   (VALUES ('{0}'::money[])) x(v);
-ERROR:  could not identify an extended hash function for type money
+ERROR:  at or near "[": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT v as value, hash_array_extended(v, 0)::bit(32) as extended0
+FROM   (VALUES ('{0}'::money[])) x(v)
+                            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/41578/_version_
 SELECT v as value, hashbpchar(v)::bit(32) as standard,
        hashbpcharextended(v, 0)::bit(32) as extended0,
        hashbpcharextended(v, 1)::bit(32) as extended1
@@ -191,10 +171,7 @@
         ('muop28x03'), ('yi3nm0d73')) x(v)
 WHERE  hashbpchar(v)::bit(32) != hashbpcharextended(v, 0)::bit(32)
        OR hashbpchar(v)::bit(32) = hashbpcharextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hashbpchar()
 SELECT v as value, time_hash(v)::bit(32) as standard,
        time_hash_extended(v, 0)::bit(32) as extended0,
        time_hash_extended(v, 1)::bit(32) as extended1
@@ -202,10 +179,7 @@
         ('7:9:59'), ('5:15:59')) x(v)
 WHERE  time_hash(v)::bit(32) != time_hash_extended(v, 0)::bit(32)
        OR time_hash(v)::bit(32) = time_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and time cannot be matched
 SELECT v as value, timetz_hash(v)::bit(32) as standard,
        timetz_hash_extended(v, 0)::bit(32) as extended0,
        timetz_hash_extended(v, 1)::bit(32) as extended1
@@ -213,10 +187,7 @@
         ('00:11:52.62-01'), ('00:11:52.62+01'), ('11:59:59+04')) x(v)
 WHERE  timetz_hash(v)::bit(32) != timetz_hash_extended(v, 0)::bit(32)
        OR timetz_hash(v)::bit(32) = timetz_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and timetz cannot be matched
 SELECT v as value, interval_hash(v)::bit(32) as standard,
        interval_hash_extended(v, 0)::bit(32) as extended0,
        interval_hash_extended(v, 1)::bit(32) as extended1
@@ -226,10 +197,7 @@
         ('17 year 11 month 7 day 9 hours 46 minutes 5 seconds')) x(v)
 WHERE  interval_hash(v)::bit(32) != interval_hash_extended(v, 0)::bit(32)
        OR interval_hash(v)::bit(32) = interval_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and interval cannot be matched
 SELECT v as value, timestamp_hash(v)::bit(32) as standard,
        timestamp_hash_extended(v, 0)::bit(32) as extended0,
        timestamp_hash_extended(v, 1)::bit(32) as extended1
@@ -239,10 +207,7 @@
         ('2013-08-22 00:11:52.62+01'), ('2013-08-22 11:59:59+04')) x(v)
 WHERE  timestamp_hash(v)::bit(32) != timestamp_hash_extended(v, 0)::bit(32)
        OR timestamp_hash(v)::bit(32) = timestamp_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and timestamp cannot be matched
 SELECT v as value, uuid_hash(v)::bit(32) as standard,
        uuid_hash_extended(v, 0)::bit(32) as extended0,
        uuid_hash_extended(v, 1)::bit(32) as extended1
@@ -253,10 +218,7 @@
         ('9ad46d4f-6f2a-4edd-aadb-745993928e1e')) x(v)
 WHERE  uuid_hash(v)::bit(32) != uuid_hash_extended(v, 0)::bit(32)
        OR uuid_hash(v)::bit(32) = uuid_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and uuid cannot be matched
 SELECT v as value, pg_lsn_hash(v)::bit(32) as standard,
        pg_lsn_hash_extended(v, 0)::bit(32) as extended0,
        pg_lsn_hash_extended(v, 1)::bit(32) as extended1
@@ -264,10 +226,7 @@
         ('255/B374D84'), ('25/B379D90'), ('900/F37FD90')) x(v)
 WHERE  pg_lsn_hash(v)::bit(32) != pg_lsn_hash_extended(v, 0)::bit(32)
        OR pg_lsn_hash(v)::bit(32) = pg_lsn_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and pg_lsn cannot be matched
 CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
 SELECT v as value, hashenum(v)::bit(32) as standard,
        hashenumextended(v, 0)::bit(32) as extended0,
@@ -275,10 +234,7 @@
 FROM   (VALUES ('sad'::mood), ('ok'), ('happy')) x(v)
 WHERE  hashenum(v)::bit(32) != hashenumextended(v, 0)::bit(32)
        OR hashenum(v)::bit(32) = hashenumextended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and mood cannot be matched
 DROP TYPE mood;
 SELECT v as value, jsonb_hash(v)::bit(32) as standard,
        jsonb_hash_extended(v, 0)::bit(32) as extended0,
@@ -289,10 +245,7 @@
         ('{"g": {"h": "value"}}')) x(v)
 WHERE  jsonb_hash(v)::bit(32) != jsonb_hash_extended(v, 0)::bit(32)
        OR jsonb_hash(v)::bit(32) = jsonb_hash_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  VALUES types string and jsonb cannot be matched
 SELECT v as value, hash_range(v)::bit(32) as standard,
        hash_range_extended(v, 0)::bit(32) as extended0,
        hash_range_extended(v, 1)::bit(32) as extended1
@@ -301,10 +254,7 @@
         (int4range(550274, 1550274)), (int4range(1550275, 208112489))) x(v)
 WHERE  hash_range(v)::bit(32) != hash_range_extended(v, 0)::bit(32)
        OR hash_range(v)::bit(32) = hash_range_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: int4range()
 SELECT v as value, hash_multirange(v)::bit(32) as standard,
 	   hash_multirange_extended(v, 0)::bit(32) as extended0,
 	   hash_multirange_extended(v, 1)::bit(32) as extended1
@@ -314,10 +264,7 @@
 		 ('{[1550275, 208112489)}'::int4multirange)) x(v)
 WHERE  hash_multirange(v)::bit(32) != hash_multirange_extended(v, 0)::bit(32)
        OR hash_multirange(v)::bit(32) = hash_multirange_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  type "int4multirange" does not exist
 CREATE TYPE hash_test_t1 AS (a int, b text);
 SELECT v as value, hash_record(v)::bit(32) as standard,
        hash_record_extended(v, 0)::bit(32) as extended0,
@@ -325,50 +272,34 @@
 FROM   (VALUES (row(1, 'aaa')::hash_test_t1, row(2, 'bbb'), row(-1, 'ccc'))) x(v)
 WHERE  hash_record(v)::bit(32) != hash_record_extended(v, 0)::bit(32)
        OR hash_record(v)::bit(32) = hash_record_extended(v, 1)::bit(32);
- value | standard | extended0 | extended1 
--------+----------+-----------+-----------
-(0 rows)
-
+ERROR:  unknown function: hash_record()
 DROP TYPE hash_test_t1;
 -- record hashing with non-hashable field type
 CREATE TYPE hash_test_t2 AS (a money, b text);
+ERROR:  at or near ",": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE hash_test_t2 AS (a money, b text)
+                                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/41578/_version_
 SELECT v as value, hash_record(v)::bit(32) as standard
 FROM   (VALUES (row(1, 'aaa')::hash_test_t2)) x(v);
-ERROR:  could not identify a hash function for type money
+ERROR:  type "hash_test_t2" does not exist
 SELECT v as value, hash_record_extended(v, 0)::bit(32) as extended0
 FROM   (VALUES (row(1, 'aaa')::hash_test_t2)) x(v);
-ERROR:  could not identify an extended hash function for type money
+ERROR:  type "hash_test_t2" does not exist
 DROP TYPE hash_test_t2;
+ERROR:  type "hash_test_t2" does not exist
 --
 -- Check special cases for specific data types
 --
 SELECT hashfloat4('0'::float4) = hashfloat4('-0'::float4) AS t;
- t 
----
- t
-(1 row)
-
+ERROR:  unknown function: hashfloat4()
 SELECT hashfloat4('NaN'::float4) = hashfloat4(-'NaN'::float4) AS t;
- t 
----
- t
-(1 row)
-
+ERROR:  unknown function: hashfloat4()
 SELECT hashfloat8('0'::float8) = hashfloat8('-0'::float8) AS t;
- t 
----
- t
-(1 row)
-
+ERROR:  unknown function: hashfloat8()
 SELECT hashfloat8('NaN'::float8) = hashfloat8(-'NaN'::float8) AS t;
- t 
----
- t
-(1 row)
-
+ERROR:  unknown function: hashfloat8()
 SELECT hashfloat4('NaN'::float4) = hashfloat8('NaN'::float8) AS t;
- t 
----
- t
-(1 row)
-
+ERROR:  unknown function: hashfloat4()
