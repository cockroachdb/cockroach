diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/polymorphism.out --label=/mnt/data1/postgres/src/test/regress/results/polymorphism.out /mnt/data1/postgres/src/test/regress/expected/polymorphism.out /mnt/data1/postgres/src/test/regress/results/polymorphism.out
--- /mnt/data1/postgres/src/test/regress/expected/polymorphism.out
+++ /mnt/data1/postgres/src/test/regress/results/polymorphism.out
@@ -5,32 +5,36 @@
 create function polyf(x anyelement) returns anyelement as $$
   select x + 1
 $$ language sql;
-select polyf(42) as int, polyf(4.5) as num;
- int | num 
------+-----
-  43 | 5.5
-(1 row)
+ERROR:  ambiguous binary operator: <anyelement> + <int>
+HINT:  candidates are:
++(int, int) -> int
++(inet, int) -> inet
++(decimal, int) -> decimal
++(date, int) -> date
 
+select polyf(42) as int, polyf(4.5) as num;
+ERROR:  unknown function: polyf()
 select polyf(point(3,4));  -- fail for lack of + operator
-ERROR:  operator does not exist: point + integer
-LINE 2:   select x + 1
-                   ^
-HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-QUERY:  
-  select x + 1
-
-CONTEXT:  SQL function "polyf" during inlining
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select polyf(point(3,4))
+                  ^
 drop function polyf(x anyelement);
+ERROR:  unknown function: polyf()
 create function polyf(x anyelement) returns anyarray as $$
   select array[x + 1, x + 2]
 $$ language sql;
-select polyf(42) as int, polyf(4.5) as num;
-   int   |    num    
----------+-----------
- {43,44} | {5.5,6.5}
-(1 row)
+ERROR:  ambiguous binary operator: <anyelement> + <int>
+HINT:  candidates are:
++(int, int) -> int
++(inet, int) -> inet
++(decimal, int) -> decimal
++(date, int) -> date
 
+select polyf(42) as int, polyf(4.5) as num;
+ERROR:  unknown function: polyf()
 drop function polyf(x anyelement);
+ERROR:  unknown function: polyf()
 create function polyf(x anyarray) returns anyelement as $$
   select x[1]
 $$ language sql;
@@ -41,7 +45,10 @@
 (1 row)
 
 select polyf(stavalues1) from pg_statistic;  -- fail, can't infer element type
-ERROR:  cannot determine element type of "anyarray" argument
+ polyf 
+-------
+(0 rows)
+
 drop function polyf(x anyarray);
 create function polyf(x anyarray) returns anyarray as $$
   select x
@@ -53,198 +60,162 @@
 (1 row)
 
 select polyf(stavalues1) from pg_statistic;  -- fail, can't infer element type
-ERROR:  return type anyarray is not supported for SQL functions
-CONTEXT:  SQL function "polyf" during inlining
+ polyf 
+-------
+(0 rows)
+
 drop function polyf(x anyarray);
 -- fail, can't infer type:
 create function polyf(x anyelement) returns anyrange as $$
   select array[x + 1, x + 2]
 $$ language sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anyrange requires at least one input of type anyrange or anymultirange.
+ERROR:  type "anyrange" does not exist
 create function polyf(x anyrange) returns anyarray as $$
   select array[lower(x), upper(x)]
 $$ language sql;
+ERROR:  type "anyrange" does not exist
 select polyf(int4range(42, 49)) as int, polyf(float8range(4.5, 7.8)) as num;
-   int   |    num    
----------+-----------
- {42,49} | {4.5,7.8}
-(1 row)
-
+ERROR:  unknown function: polyf()
 drop function polyf(x anyrange);
+ERROR:  unknown function: polyf()
 create function polyf(x anycompatible, y anycompatible) returns anycompatiblearray as $$
   select array[x, y]
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select polyf(2, 4) as int, polyf(2, 4.5) as num;
-  int  |   num   
--------+---------
- {2,4} | {2,4.5}
-(1 row)
-
+ERROR:  unknown function: polyf()
 drop function polyf(x anycompatible, y anycompatible);
+ERROR:  unknown function: polyf()
 create function polyf(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$
   select array[lower(x), upper(x), y, z]
 $$ language sql;
+ERROR:  type "anycompatiblerange" does not exist
 select polyf(int4range(42, 49), 11, 2::smallint) as int, polyf(float8range(4.5, 7.8), 7.8, 11::real) as num;
-     int      |       num        
---------------+------------------
- {42,49,11,2} | {4.5,7.8,7.8,11}
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(int4range(42, 49), 11, 4.5) as fail;  -- range type doesn't fit
-ERROR:  function polyf(int4range, integer, numeric) does not exist
-LINE 1: select polyf(int4range(42, 49), 11, 4.5) as fail;
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: polyf()
 drop function polyf(x anycompatiblerange, y anycompatible, z anycompatible);
+ERROR:  unknown function: polyf()
 create function polyf(x anycompatiblemultirange, y anycompatible, z anycompatible) returns anycompatiblearray as $$
   select array[lower(x), upper(x), y, z]
 $$ language sql;
+ERROR:  type "anycompatiblemultirange" does not exist
 select polyf(multirange(int4range(42, 49)), 11, 2::smallint) as int, polyf(multirange(float8range(4.5, 7.8)), 7.8, 11::real) as num;
-     int      |       num        
---------------+------------------
- {42,49,11,2} | {4.5,7.8,7.8,11}
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(multirange(int4range(42, 49)), 11, 4.5) as fail;  -- range type doesn't fit
-ERROR:  function polyf(int4multirange, integer, numeric) does not exist
-LINE 1: select polyf(multirange(int4range(42, 49)), 11, 4.5) as fail...
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: polyf()
 drop function polyf(x anycompatiblemultirange, y anycompatible, z anycompatible);
+ERROR:  unknown function: polyf()
 -- fail, can't infer type:
 create function polyf(x anycompatible) returns anycompatiblerange as $$
   select array[x + 1, x + 2]
 $$ language sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatiblerange requires at least one input of type anycompatiblerange or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 create function polyf(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$
   select x
 $$ language sql;
+ERROR:  type "anycompatiblerange" does not exist
 select polyf(int4range(42, 49), array[11]) as int, polyf(float8range(4.5, 7.8), array[7]) as num;
-   int   |    num    
----------+-----------
- [42,49) | [4.5,7.8)
-(1 row)
-
+ERROR:  unknown function: polyf()
 drop function polyf(x anycompatiblerange, y anycompatiblearray);
+ERROR:  unknown function: polyf()
 -- fail, can't infer type:
 create function polyf(x anycompatible) returns anycompatiblemultirange as $$
   select array[x + 1, x + 2]
 $$ language sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatiblemultirange requires at least one input of type anycompatiblerange or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 create function polyf(x anycompatiblemultirange, y anycompatiblearray) returns anycompatiblemultirange as $$
   select x
 $$ language sql;
+ERROR:  type "anycompatiblemultirange" does not exist
 select polyf(multirange(int4range(42, 49)), array[11]) as int, polyf(multirange(float8range(4.5, 7.8)), array[7]) as num;
-    int    |     num     
------------+-------------
- {[42,49)} | {[4.5,7.8)}
-(1 row)
-
+ERROR:  unknown function: polyf()
 drop function polyf(x anycompatiblemultirange, y anycompatiblearray);
+ERROR:  unknown function: polyf()
 create function polyf(a anyelement, b anyarray,
                       c anycompatible, d anycompatible,
                       OUT x anyarray, OUT y anycompatiblearray)
 as $$
   select a || b, array[c, d]
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x), y, pg_typeof(y)
   from polyf(11, array[1, 2], 42, 34.5);
-    x     | pg_typeof |     y     | pg_typeof 
-----------+-----------+-----------+-----------
- {11,1,2} | integer[] | {42,34.5} | numeric[]
-(1 row)
-
+ERROR:  unknown function: polyf()
 select x, pg_typeof(x), y, pg_typeof(y)
   from polyf(11, array[1, 2], point(1,2), point(3,4));
-    x     | pg_typeof |         y         | pg_typeof 
-----------+-----------+-------------------+-----------
- {11,1,2} | integer[] | {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x), y, pg_typeof(y)
+  from polyf(11, array[1, 2], point(1,2), point(3,4))
+                                   ^
 select x, pg_typeof(x), y, pg_typeof(y)
   from polyf(11, '{1,2}', point(1,2), '(3,4)');
-    x     | pg_typeof |         y         | pg_typeof 
-----------+-----------+-------------------+-----------
- {11,1,2} | integer[] | {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x), y, pg_typeof(y)
+  from polyf(11, '{1,2}', point(1,2), '(3,4)')
+                               ^
 select x, pg_typeof(x), y, pg_typeof(y)
   from polyf(11, array[1, 2.2], 42, 34.5);  -- fail
-ERROR:  function polyf(integer, numeric[], integer, numeric) does not exist
-LINE 2:   from polyf(11, array[1, 2.2], 42, 34.5);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: polyf()
 drop function polyf(a anyelement, b anyarray,
                     c anycompatible, d anycompatible);
+ERROR:  unknown function: polyf()
 create function polyf(anyrange) returns anymultirange
 as 'select multirange($1);' language sql;
+ERROR:  type "anyrange" does not exist
 select polyf(int4range(1,10));
-  polyf   
-----------
- {[1,10)}
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anyrange);
+ERROR:  unknown function: polyf()
 create function polyf(anymultirange) returns anyelement
 as 'select lower($1);' language sql;
+ERROR:  type "anymultirange" does not exist
 select polyf(int4multirange(int4range(1,10), int4range(20,30)));
- polyf 
--------
-     1
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anymultirange);
+ERROR:  unknown function: polyf()
 create function polyf(anycompatiblerange) returns anycompatiblemultirange
 as 'select multirange($1);' language sql;
+ERROR:  type "anycompatiblerange" does not exist
 select polyf(int4range(1,10));
-  polyf   
-----------
- {[1,10)}
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type anycompatiblerange because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anycompatiblerange);
+ERROR:  unknown function: polyf()
 create function polyf(anymultirange) returns anyrange
 as 'select range_merge($1);' language sql;
+ERROR:  type "anymultirange" does not exist
 select polyf(int4multirange(int4range(1,10), int4range(20,30)));
- polyf  
---------
- [1,30)
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anymultirange);
+ERROR:  unknown function: polyf()
 create function polyf(anycompatiblemultirange) returns anycompatiblerange
 as 'select range_merge($1);' language sql;
+ERROR:  type "anycompatiblemultirange" does not exist
 select polyf(int4multirange(int4range(1,10), int4range(20,30)));
- polyf  
---------
- [1,30)
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type anycompatiblerange because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anycompatiblemultirange);
+ERROR:  unknown function: polyf()
 create function polyf(anycompatiblemultirange) returns anycompatible
 as 'select lower($1);' language sql;
+ERROR:  type "anycompatiblemultirange" does not exist
 select polyf(int4multirange(int4range(1,10), int4range(20,30)));
- polyf 
--------
-     1
-(1 row)
-
+ERROR:  unknown function: polyf()
 select polyf(null);
-ERROR:  could not determine polymorphic type anycompatiblemultirange because input has type unknown
+ERROR:  unknown function: polyf()
 drop function polyf(anycompatiblemultirange);
+ERROR:  unknown function: polyf()
 --
 -- Polymorphic aggregate tests
 --
@@ -289,6 +260,53 @@
 -- dual polymorphic transfn
 CREATE FUNCTION tfp(anyarray,anyelement) RETURNS anyarray AS
 'select $1 || $2' LANGUAGE SQL;
+ERROR:  ambiguous binary operator: <anyelement[]> || <anyelement>
+HINT:  candidates are:
+||(varbit[], varbit[]) -> varbit[]
+||(jsonb[], jsonb[]) -> jsonb[]
+||(timetz[], timetz[]) -> timetz[]
+||(time[], time[]) -> time[]
+||(bool[], bool) -> bool[]
+||(refcursor[], refcursor[]) -> refcursor[]
+||(box2d[], box2d) -> box2d[]
+||(pg_lsn[], pg_lsn[]) -> pg_lsn[]
+||(int[], int) -> int[]
+||(inet[], inet[]) -> inet[]
+||(float[], float) -> float[]
+||(uuid[], uuid[]) -> uuid[]
+||(decimal[], decimal) -> decimal[]
+||(oid[], oid[]) -> oid[]
+||(date[], date) -> date[]
+||(timestamptz[], timestamptz[]) -> timestamptz[]
+||(timestamp[], timestamp) -> timestamp[]
+||(bytes[], bytes[]) -> bytes[]
+||(interval[], interval) -> interval[]
+||(string[], string[]) -> string[]
+||(geography[], geography) -> geography[]
+||(geometry[], geometry[]) -> geometry[]
+||(geometry[], geometry) -> geometry[]
+||(geography[], geography[]) -> geography[]
+||(string[], string) -> string[]
+||(interval[], interval[]) -> interval[]
+||(bytes[], bytes) -> bytes[]
+||(timestamp[], timestamp[]) -> timestamp[]
+||(timestamptz[], timestamptz) -> timestamptz[]
+||(date[], date[]) -> date[]
+||(oid[], oid) -> oid[]
+||(decimal[], decimal[]) -> decimal[]
+||(uuid[], uuid) -> uuid[]
+||(float[], float[]) -> float[]
+||(inet[], inet) -> inet[]
+||(int[], int[]) -> int[]
+||(pg_lsn[], pg_lsn) -> pg_lsn[]
+||(box2d[], box2d[]) -> box2d[]
+||(refcursor[], refcursor) -> refcursor[]
+||(bool[], bool[]) -> bool[]
+||(time[], time) -> time[]
+||(varbit[], varbit) -> varbit[]
+||(timetz[], timetz) -> timetz[]
+||(jsonb[], jsonb) -> jsonb[]
+
 -- dual non-polymorphic transfn
 CREATE FUNCTION tfnp(int[],int) RETURNS int[] AS
 'select $1 || $2' LANGUAGE SQL;
@@ -301,6 +319,36 @@
 -- multi-arg polymorphic
 CREATE FUNCTION sum3(anyelement,anyelement,anyelement) returns anyelement AS
 'select $1+$2+$3' language sql strict;
+ERROR:  ambiguous binary operator: <anyelement> + <anyelement>
+HINT:  candidates are:
++(int, int) -> int
++(float, float) -> float
++(decimal, decimal) -> decimal
++(decimal, int) -> decimal
++(int, decimal) -> decimal
++(date, int) -> date
++(int, date) -> date
++(date, time) -> timestamp
++(time, date) -> timestamp
++(date, timetz) -> timestamptz
++(timetz, date) -> timestamptz
++(time, interval) -> time
++(interval, time) -> time
++(timetz, interval) -> timetz
++(interval, timetz) -> timetz
++(timestamp, interval) -> timestamp
++(interval, timestamp) -> timestamp
++(timestamptz, interval) -> timestamptz
++(interval, timestamptz) -> timestamptz
++(interval, interval) -> interval
++(date, interval) -> timestamp
++(interval, date) -> timestamp
++(inet, int) -> inet
++(int, inet) -> inet
++(decimal, pg_lsn) -> pg_lsn
++(pg_lsn, decimal) -> pg_lsn
++(vector, vector) -> vector
+
 -- finalfn polymorphic
 CREATE FUNCTION ffp(anyarray) RETURNS anyarray AS
 'select $1' LANGUAGE SQL;
@@ -323,28 +371,58 @@
 -- should CREATE
 CREATE AGGREGATE myaggp01a(*) (SFUNC = stfnp, STYPE = int4[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp01a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp01a(*) (SFUNC = stfnp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     P    N
 -- should ERROR: stfnp(anyarray) not matched by stfnp(int[])
 CREATE AGGREGATE myaggp02a(*) (SFUNC = stfnp, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp02a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp02a(*) (SFUNC = stfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     N    P
 -- should CREATE
 CREATE AGGREGATE myaggp03a(*) (SFUNC = stfp, STYPE = int4[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp03a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp03a(*) (SFUNC = stfp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp03b(*) (SFUNC = stfp, STYPE = int4[],
   INITCOND = '{}');
+ERROR:  at or near "myaggp03b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp03b(*) (SFUNC = stfp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     P    P
 -- should ERROR: we have no way to resolve S
 CREATE AGGREGATE myaggp04a(*) (SFUNC = stfp, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp04a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp04a(*) (SFUNC = stfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp04b(*) (SFUNC = stfp, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp04b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp04b(*) (SFUNC = stfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    Case2 (R = P) && ((B = P) || (B = N))
 --    -------------------------------------
 --    S    tf1      B    tf2
@@ -353,103 +431,226 @@
 -- should CREATE
 CREATE AGGREGATE myaggp05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp05a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        N    P
 -- should CREATE
 CREATE AGGREGATE myaggp06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp06a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        P    N
 -- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)
 CREATE AGGREGATE myaggp07a(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tfnp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggp07a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp07a(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        P    P
 -- should CREATE
 CREATE AGGREGATE myaggp08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp08a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        N    N
 -- should CREATE
 CREATE AGGREGATE myaggp09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp09a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp09b(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
   INITCOND = '{}');
+ERROR:  at or near "myaggp09b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp09b(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        N    P
 -- should CREATE
 CREATE AGGREGATE myaggp10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp10a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp10b(BASETYPE = int, SFUNC = tfp, STYPE = int[],
   INITCOND = '{}');
+ERROR:  at or near "myaggp10b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp10b(BASETYPE = int, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        P    N
 -- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)
 CREATE AGGREGATE myaggp11a(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tf1p(integer[], anyelement) does not exist
+ERROR:  at or near "myaggp11a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp11a(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp11b(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
   INITCOND = '{}');
-ERROR:  function tf1p(integer[], anyelement) does not exist
+ERROR:  at or near "myaggp11b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp11b(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        P    P
 -- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)
 CREATE AGGREGATE myaggp12a(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tfp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggp12a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp12a(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp12b(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
   INITCOND = '{}');
-ERROR:  function tfp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggp12b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp12b(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        N    N
 -- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)
 CREATE AGGREGATE myaggp13a(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp13a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp13a(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        N    P
 -- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)
 CREATE AGGREGATE myaggp14a(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp14a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp14a(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        P    N
 -- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)
 CREATE AGGREGATE myaggp15a(BASETYPE = anyelement, SFUNC = tfnp,
   STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tfnp(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggp15a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp15a(BASETYPE = anyelement, SFUNC = tfnp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        P    P
 -- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)
 CREATE AGGREGATE myaggp16a(BASETYPE = anyelement, SFUNC = tf2p,
   STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tf2p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggp16a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp16a(BASETYPE = anyelement, SFUNC = tf2p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        N    N
 -- should ERROR: we have no way to resolve S
 CREATE AGGREGATE myaggp17a(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp17a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp17a(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp17b(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp17b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp17b(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        N    P
 -- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)
 CREATE AGGREGATE myaggp18a(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
   FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp18a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp18a(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp18b(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggp18b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp18b(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        P    N
 -- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)
 CREATE AGGREGATE myaggp19a(BASETYPE = anyelement, SFUNC = tf1p,
   STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}');
-ERROR:  function tf1p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggp19a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp19a(BASETYPE = anyelement, SFUNC = tf1p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp19b(BASETYPE = anyelement, SFUNC = tf1p,
   STYPE = anyarray, INITCOND = '{}');
-ERROR:  function tf1p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggp19b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp19b(BASETYPE = anyelement, SFUNC = tf1p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        P    P
 -- should CREATE
 CREATE AGGREGATE myaggp20a(BASETYPE = anyelement, SFUNC = tfp,
   STYPE = anyarray, FINALFUNC = ffp, INITCOND = '{}');
+ERROR:  at or near "myaggp20a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp20a(BASETYPE = anyelement, SFUNC = tfp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggp20b(BASETYPE = anyelement, SFUNC = tfp,
   STYPE = anyarray, INITCOND = '{}');
+ERROR:  at or near "myaggp20b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggp20b(BASETYPE = anyelement, SFUNC = tfp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     Case3 (R = N) && (B = A)
 --     ------------------------
 --     S    tf1
@@ -458,28 +659,58 @@
 -- should CREATE
 CREATE AGGREGATE myaggn01a(*) (SFUNC = stfnp, STYPE = int4[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn01a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn01a(*) (SFUNC = stfnp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn01b(*) (SFUNC = stfnp, STYPE = int4[],
   INITCOND = '{}');
+ERROR:  at or near "myaggn01b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn01b(*) (SFUNC = stfnp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     P    N
 -- should ERROR: stfnp(anyarray) not matched by stfnp(int[])
 CREATE AGGREGATE myaggn02a(*) (SFUNC = stfnp, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn02a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn02a(*) (SFUNC = stfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn02b(*) (SFUNC = stfnp, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn02b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn02b(*) (SFUNC = stfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     N    P
 -- should CREATE
 CREATE AGGREGATE myaggn03a(*) (SFUNC = stfp, STYPE = int4[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn03a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn03a(*) (SFUNC = stfp, STYPE = int4[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --     P    P
 -- should ERROR: ffnp(anyarray) not matched by ffnp(int[])
 CREATE AGGREGATE myaggn04a(*) (SFUNC = stfp, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn04a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn04a(*) (SFUNC = stfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    Case4 (R = N) && ((B = P) || (B = N))
 --    -------------------------------------
 --    S    tf1      B    tf2
@@ -488,107 +719,235 @@
 -- should CREATE
 CREATE AGGREGATE myaggn05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn05a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn05a(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn05b(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
   INITCOND = '{}');
+ERROR:  at or near "myaggn05b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn05b(BASETYPE = int, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        N    P
 -- should CREATE
 CREATE AGGREGATE myaggn06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn06a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn06a(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn06b(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
   INITCOND = '{}');
+ERROR:  at or near "myaggn06b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn06b(BASETYPE = int, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        P    N
 -- should ERROR: tfnp(int[], anyelement) not matched by tfnp(int[], int)
 CREATE AGGREGATE myaggn07a(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tfnp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggn07a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn07a(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn07b(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
   INITCOND = '{}');
-ERROR:  function tfnp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggn07b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn07b(BASETYPE = anyelement, SFUNC = tfnp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    N        P    P
 -- should CREATE
 CREATE AGGREGATE myaggn08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn08a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn08a(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn08b(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
   INITCOND = '{}');
+ERROR:  at or near "myaggn08b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn08b(BASETYPE = anyelement, SFUNC = tf2p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        N    N
 -- should CREATE
 CREATE AGGREGATE myaggn09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn09a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn09a(BASETYPE = int, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        N    P
 -- should CREATE
 CREATE AGGREGATE myaggn10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
+ERROR:  at or near "myaggn10a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn10a(BASETYPE = int, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        P    N
 -- should ERROR: tf1p(int[],anyelement) not matched by tf1p(anyarray,int)
 CREATE AGGREGATE myaggn11a(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tf1p(integer[], anyelement) does not exist
+ERROR:  at or near "myaggn11a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn11a(BASETYPE = anyelement, SFUNC = tf1p, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    N    P        P    P
 -- should ERROR: tfp(int[],anyelement) not matched by tfp(anyarray,anyelement)
 CREATE AGGREGATE myaggn12a(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tfp(integer[], anyelement) does not exist
+ERROR:  at or near "myaggn12a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn12a(BASETYPE = anyelement, SFUNC = tfp, STYPE = int[],
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        N    N
 -- should ERROR: tfnp(anyarray, int) not matched by tfnp(int[],int)
 CREATE AGGREGATE myaggn13a(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn13a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn13a(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn13b(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn13b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn13b(BASETYPE = int, SFUNC = tfnp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        N    P
 -- should ERROR: tf2p(anyarray, int) not matched by tf2p(int[],anyelement)
 CREATE AGGREGATE myaggn14a(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn14a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn14a(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn14b(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
   INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn14b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn14b(BASETYPE = int, SFUNC = tf2p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        P    N
 -- should ERROR: tfnp(anyarray, anyelement) not matched by tfnp(int[],int)
 CREATE AGGREGATE myaggn15a(BASETYPE = anyelement, SFUNC = tfnp,
   STYPE = anyarray, FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tfnp(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggn15a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn15a(BASETYPE = anyelement, SFUNC = tfnp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn15b(BASETYPE = anyelement, SFUNC = tfnp,
   STYPE = anyarray, INITCOND = '{}');
-ERROR:  function tfnp(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggn15b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn15b(BASETYPE = anyelement, SFUNC = tfnp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    N        P    P
 -- should ERROR: tf2p(anyarray, anyelement) not matched by tf2p(int[],anyelement)
 CREATE AGGREGATE myaggn16a(BASETYPE = anyelement, SFUNC = tf2p,
   STYPE = anyarray, FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tf2p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggn16a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn16a(BASETYPE = anyelement, SFUNC = tf2p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 CREATE AGGREGATE myaggn16b(BASETYPE = anyelement, SFUNC = tf2p,
   STYPE = anyarray, INITCOND = '{}');
-ERROR:  function tf2p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggn16b": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn16b(BASETYPE = anyelement, SFUNC = tf2p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        N    N
 -- should ERROR: ffnp(anyarray) not matched by ffnp(int[])
 CREATE AGGREGATE myaggn17a(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn17a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn17a(BASETYPE = int, SFUNC = tf1p, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        N    P
 -- should ERROR: tfp(anyarray, int) not matched by tfp(anyarray, anyelement)
 CREATE AGGREGATE myaggn18a(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
   FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  cannot determine transition data type
-DETAIL:  A result of type anyarray requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
+ERROR:  at or near "myaggn18a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn18a(BASETYPE = int, SFUNC = tfp, STYPE = anyarray,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        P    N
 -- should ERROR: tf1p(anyarray, anyelement) not matched by tf1p(anyarray, int)
 CREATE AGGREGATE myaggn19a(BASETYPE = anyelement, SFUNC = tf1p,
   STYPE = anyarray, FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function tf1p(anyarray, anyelement) does not exist
+ERROR:  at or near "myaggn19a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn19a(BASETYPE = anyelement, SFUNC = tf1p,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 --    P    P        P    P
 -- should ERROR: ffnp(anyarray) not matched by ffnp(int[])
 CREATE AGGREGATE myaggn20a(BASETYPE = anyelement, SFUNC = tfp,
   STYPE = anyarray, FINALFUNC = ffnp, INITCOND = '{}');
-ERROR:  function ffnp(anyarray) does not exist
+ERROR:  at or near "myaggn20a": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE myaggn20a(BASETYPE = anyelement, SFUNC = tfp,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 -- multi-arg polymorphic
 CREATE AGGREGATE mysum2(anyelement,anyelement) (SFUNC = sum3,
   STYPE = anyelement, INITCOND = '0');
+ERROR:  at or near "mysum2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE mysum2(anyelement,anyelement) (SFUNC = sum3,
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 -- create test data for polymorphic aggregates
 create temp table t(f1 int, f2 int[], f3 text);
 insert into t values(1,array[1],'a');
@@ -601,220 +960,66 @@
 insert into t values(3,array[3],'b');
 -- test the successfully created polymorphic aggregates
 select f3, myaggp01a(*) from t group by f3 order by f3;
- f3 | myaggp01a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp01a()
 select f3, myaggp03a(*) from t group by f3 order by f3;
- f3 | myaggp03a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp03a()
 select f3, myaggp03b(*) from t group by f3 order by f3;
- f3 | myaggp03b 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp03b()
 select f3, myaggp05a(f1) from t group by f3 order by f3;
- f3 | myaggp05a 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggp05a()
 select f3, myaggp06a(f1) from t group by f3 order by f3;
- f3 | myaggp06a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp06a()
 select f3, myaggp08a(f1) from t group by f3 order by f3;
- f3 | myaggp08a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp08a()
 select f3, myaggp09a(f1) from t group by f3 order by f3;
- f3 | myaggp09a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp09a()
 select f3, myaggp09b(f1) from t group by f3 order by f3;
- f3 | myaggp09b 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggp09b()
 select f3, myaggp10a(f1) from t group by f3 order by f3;
- f3 | myaggp10a 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggp10a()
 select f3, myaggp10b(f1) from t group by f3 order by f3;
- f3 | myaggp10b 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggp10b()
 select f3, myaggp20a(f1) from t group by f3 order by f3;
- f3 | myaggp20a 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggp20a()
 select f3, myaggp20b(f1) from t group by f3 order by f3;
- f3 | myaggp20b 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggp20b()
 select f3, myaggn01a(*) from t group by f3 order by f3;
- f3 | myaggn01a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn01a()
 select f3, myaggn01b(*) from t group by f3 order by f3;
- f3 | myaggn01b 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn01b()
 select f3, myaggn03a(*) from t group by f3 order by f3;
- f3 | myaggn03a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn03a()
 select f3, myaggn05a(f1) from t group by f3 order by f3;
- f3 | myaggn05a 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggn05a()
 select f3, myaggn05b(f1) from t group by f3 order by f3;
- f3 | myaggn05b 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggn05b()
 select f3, myaggn06a(f1) from t group by f3 order by f3;
- f3 | myaggn06a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn06a()
 select f3, myaggn06b(f1) from t group by f3 order by f3;
- f3 | myaggn06b 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn06b()
 select f3, myaggn08a(f1) from t group by f3 order by f3;
- f3 | myaggn08a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn08a()
 select f3, myaggn08b(f1) from t group by f3 order by f3;
- f3 | myaggn08b 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn08b()
 select f3, myaggn09a(f1) from t group by f3 order by f3;
- f3 | myaggn09a 
-----+-----------
- a  | {}
- b  | {}
- c  | {}
-(3 rows)
-
+ERROR:  unknown function: myaggn09a()
 select f3, myaggn10a(f1) from t group by f3 order by f3;
- f3 | myaggn10a 
-----+-----------
- a  | {1,2,3}
- b  | {1,2,3}
- c  | {1,2}
-(3 rows)
-
+ERROR:  unknown function: myaggn10a()
 select mysum2(f1, f1 + 1) from t;
- mysum2 
---------
-     38
-(1 row)
-
+ERROR:  unknown function: mysum2()
 -- test inlining of polymorphic SQL functions
 create function bleat(int) returns int as $$
 begin
   raise notice 'bleat %', $1;
   return $1;
 end$$ language plpgsql;
+ERROR:  no value provided for placeholder: $1
 create function sql_if(bool, anyelement, anyelement) returns anyelement as $$
 select case when $1 then $2 else $3 end $$ language sql;
 -- Note this would fail with integer overflow, never mind wrong bleat() output,
 -- if the CASE expression were not successfully inlined
 select f1, sql_if(f1 > 0, bleat(f1), bleat(f1 + 1)) from int4_tbl;
-NOTICE:  bleat 1
-NOTICE:  bleat 123456
-NOTICE:  bleat -123455
-NOTICE:  bleat 2147483647
-NOTICE:  bleat -2147483646
-     f1      |   sql_if    
--------------+-------------
-           0 |           1
-      123456 |      123456
-     -123456 |     -123455
-  2147483647 |  2147483647
- -2147483647 | -2147483646
-(5 rows)
-
+ERROR:  unknown function: bleat()
 select q2, sql_if(q2 > 0, q2, q2 + 1) from int8_tbl;
         q2         |      sql_if       
 -------------------+-------------------
@@ -832,20 +1037,18 @@
     stype = anyarray,
     initcond = '{}'
 );
+ERROR:  at or near "array_larger_accum": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE AGGREGATE array_larger_accum (anyarray)
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 SELECT array_larger_accum(i)
 FROM (VALUES (ARRAY[1,2]), (ARRAY[3,4])) as t(i);
- array_larger_accum 
---------------------
- {3,4}
-(1 row)
-
+ERROR:  unknown function: array_larger_accum()
 SELECT array_larger_accum(i)
 FROM (VALUES (ARRAY[row(1,2),row(3,4)]), (ARRAY[row(5,6),row(7,8)])) as t(i);
- array_larger_accum 
---------------------
- {"(5,6)","(7,8)"}
-(1 row)
-
+ERROR:  unknown function: array_larger_accum()
 -- another kind of polymorphic aggregate
 create function add_group(grp anyarray, ad anyelement, size integer)
   returns anyarray
@@ -861,30 +1064,137 @@
 end;
 $$
   language plpgsql immutable;
+ERROR:  ambiguous binary operator: <anyelement[]> || <anyelement> (returning <anyelement[]>)
+HINT:  candidates are:
+||(varbit[], varbit[]) -> varbit[]
+||(jsonb[], jsonb[]) -> jsonb[]
+||(timetz[], timetz[]) -> timetz[]
+||(time[], time[]) -> time[]
+||(bool[], bool) -> bool[]
+||(refcursor[], refcursor[]) -> refcursor[]
+||(box2d[], box2d) -> box2d[]
+||(pg_lsn[], pg_lsn[]) -> pg_lsn[]
+||(int[], int) -> int[]
+||(inet[], inet[]) -> inet[]
+||(float[], float) -> float[]
+||(uuid[], uuid[]) -> uuid[]
+||(decimal[], decimal) -> decimal[]
+||(oid[], oid[]) -> oid[]
+||(date[], date) -> date[]
+||(timestamptz[], timestamptz[]) -> timestamptz[]
+||(timestamp[], timestamp) -> timestamp[]
+||(bytes[], bytes[]) -> bytes[]
+||(interval[], interval) -> interval[]
+||(string[], string[]) -> string[]
+||(geography[], geography) -> geography[]
+||(geometry[], geometry[]) -> geometry[]
+||(geometry[], geometry) -> geometry[]
+||(geography[], geography[]) -> geography[]
+||(string[], string) -> string[]
+||(interval[], interval[]) -> interval[]
+||(bytes[], bytes) -> bytes[]
+||(timestamp[], timestamp[]) -> timestamp[]
+||(timestamptz[], timestamptz) -> timestamptz[]
+||(date[], date[]) -> date[]
+||(oid[], oid) -> oid[]
+||(decimal[], decimal[]) -> decimal[]
+||(uuid[], uuid) -> uuid[]
+||(float[], float[]) -> float[]
+||(inet[], inet) -> inet[]
+||(int[], int[]) -> int[]
+||(pg_lsn[], pg_lsn) -> pg_lsn[]
+||(box2d[], box2d[]) -> box2d[]
+||(refcursor[], refcursor) -> refcursor[]
+||(bool[], bool[]) -> bool[]
+||(time[], time) -> time[]
+||(varbit[], varbit) -> varbit[]
+||(timetz[], timetz) -> timetz[]
+||(jsonb[], jsonb) -> jsonb[]
+
 create aggregate build_group(anyelement, integer) (
   SFUNC = add_group,
   STYPE = anyarray
 );
+ERROR:  at or near "build_group": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create aggregate build_group(anyelement, integer) (
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 select build_group(q1,3) from int8_tbl;
-        build_group         
-----------------------------
- {123,123,4567890123456789}
-(1 row)
-
+ERROR:  unknown function: build_group()
 -- this should fail because stype isn't compatible with arg
 create aggregate build_group(int8, integer) (
   SFUNC = add_group,
   STYPE = int2[]
 );
-ERROR:  function add_group(smallint[], bigint, integer) does not exist
+ERROR:  at or near "build_group": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create aggregate build_group(int8, integer) (
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 -- but we can make a non-poly agg from a poly sfunc if types are OK
 create aggregate build_group(int8, integer) (
   SFUNC = add_group,
   STYPE = int8[]
 );
+ERROR:  at or near "build_group": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create aggregate build_group(int8, integer) (
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 -- check proper resolution of data types for polymorphic transfn/finalfn
 create function first_el_transfn(anyarray, anyelement) returns anyarray as
 'select $1 || $2' language sql immutable;
+ERROR:  ambiguous binary operator: <anyelement[]> || <anyelement>
+HINT:  candidates are:
+||(varbit[], varbit[]) -> varbit[]
+||(jsonb[], jsonb[]) -> jsonb[]
+||(timetz[], timetz[]) -> timetz[]
+||(time[], time[]) -> time[]
+||(bool[], bool) -> bool[]
+||(refcursor[], refcursor[]) -> refcursor[]
+||(box2d[], box2d) -> box2d[]
+||(pg_lsn[], pg_lsn[]) -> pg_lsn[]
+||(int[], int) -> int[]
+||(inet[], inet[]) -> inet[]
+||(float[], float) -> float[]
+||(uuid[], uuid[]) -> uuid[]
+||(decimal[], decimal) -> decimal[]
+||(oid[], oid[]) -> oid[]
+||(date[], date) -> date[]
+||(timestamptz[], timestamptz[]) -> timestamptz[]
+||(timestamp[], timestamp) -> timestamp[]
+||(bytes[], bytes[]) -> bytes[]
+||(interval[], interval) -> interval[]
+||(string[], string[]) -> string[]
+||(geography[], geography) -> geography[]
+||(geometry[], geometry[]) -> geometry[]
+||(geometry[], geometry) -> geometry[]
+||(geography[], geography[]) -> geography[]
+||(string[], string) -> string[]
+||(interval[], interval[]) -> interval[]
+||(bytes[], bytes) -> bytes[]
+||(timestamp[], timestamp[]) -> timestamp[]
+||(timestamptz[], timestamptz) -> timestamptz[]
+||(date[], date[]) -> date[]
+||(oid[], oid) -> oid[]
+||(decimal[], decimal[]) -> decimal[]
+||(uuid[], uuid) -> uuid[]
+||(float[], float[]) -> float[]
+||(inet[], inet) -> inet[]
+||(int[], int[]) -> int[]
+||(pg_lsn[], pg_lsn) -> pg_lsn[]
+||(box2d[], box2d[]) -> box2d[]
+||(refcursor[], refcursor) -> refcursor[]
+||(bool[], bool[]) -> bool[]
+||(time[], time) -> time[]
+||(varbit[], varbit) -> varbit[]
+||(timetz[], timetz) -> timetz[]
+||(jsonb[], jsonb) -> jsonb[]
+
 create function first_el(anyarray) returns anyelement as
 'select $1[1]' language sql strict immutable;
 create aggregate first_el_agg_f8(float8) (
@@ -892,186 +1202,228 @@
   STYPE = float8[],
   FINALFUNC = first_el
 );
+ERROR:  at or near "first_el_agg_f8": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create aggregate first_el_agg_f8(float8) (
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 create aggregate first_el_agg_any(anyelement) (
   SFUNC = first_el_transfn,
   STYPE = anyarray,
   FINALFUNC = first_el
 );
+ERROR:  at or near "first_el_agg_any": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create aggregate first_el_agg_any(anyelement) (
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/74775/_version_
 select first_el_agg_f8(x::float8) from generate_series(1,10) x;
- first_el_agg_f8 
------------------
-               1
-(1 row)
-
+ERROR:  unknown function: first_el_agg_f8()
 select first_el_agg_any(x) from generate_series(1,10) x;
- first_el_agg_any 
-------------------
-                1
-(1 row)
-
+ERROR:  unknown function: first_el_agg_any()
 select first_el_agg_f8(x::float8) over(order by x) from generate_series(1,10) x;
- first_el_agg_f8 
------------------
-               1
-               1
-               1
-               1
-               1
-               1
-               1
-               1
-               1
-               1
-(10 rows)
-
+ERROR:  unknown function: first_el_agg_f8()
 select first_el_agg_any(x) over(order by x) from generate_series(1,10) x;
- first_el_agg_any 
-------------------
-                1
-                1
-                1
-                1
-                1
-                1
-                1
-                1
-                1
-                1
-(10 rows)
-
+ERROR:  unknown function: first_el_agg_any()
 -- check that we can apply functions taking ANYARRAY to pg_stats
 select distinct array_ndims(histogram_bounds) from pg_stats
 where histogram_bounds is not null;
- array_ndims 
--------------
-           1
-(1 row)
-
+ERROR:  unknown function: array_ndims()
 -- such functions must protect themselves if varying element type isn't OK
 -- (WHERE clause here is to avoid possibly getting a collation error instead)
 select max(histogram_bounds) from pg_stats where tablename = 'pg_am';
-ERROR:  cannot compare arrays of different element types
+ERROR:  unknown signature: max(string[])
+HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 -- another corner case is the input functions for polymorphic pseudotypes
 select array_in('{1,2,3}','int4'::regtype,-1);  -- this has historically worked
- array_in 
-----------
- {1,2,3}
-(1 row)
-
+ERROR:  unknown signature: array_in(string, regtype, int)
+HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 select * from array_in('{1,2,3}','int4'::regtype,-1);  -- this not
-ERROR:  function "array_in" in FROM has unsupported return type anyarray
-LINE 1: select * from array_in('{1,2,3}','int4'::regtype,-1);
-                      ^
+ERROR:  unknown signature: array_in(string, regtype, int)
+HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 select anyrange_in('[10,20)','int4range'::regtype,-1);
-ERROR:  cannot accept a value of type anyrange
+ERROR:  unknown function: anyrange_in()
 -- test variadic polymorphic functions
 create function myleast(variadic anyarray) returns anyelement as $$
   select min($1[i]) from generate_subscripts($1,1) g(i)
 $$ language sql immutable strict;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create function myleast(variadic anyarray) returns anyelement as $$
+                        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select myleast(10, 1, 20, 33);
- myleast 
----------
-       1
-(1 row)
-
+ERROR:  unknown function: myleast()
 select myleast(1.1, 0.22, 0.55);
- myleast 
----------
-    0.22
-(1 row)
-
+ERROR:  unknown function: myleast()
 select myleast('z'::text);
- myleast 
----------
- z
-(1 row)
-
+ERROR:  unknown function: myleast()
 select myleast(); -- fail
-ERROR:  function myleast() does not exist
-LINE 1: select myleast();
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: myleast()
 -- test with variadic call parameter
 select myleast(variadic array[1,2,3,4,-1]);
- myleast 
----------
-      -1
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select myleast(variadic array[1,2,3,4,-1])
+                                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 select myleast(variadic array[1.1, -5.5]);
- myleast 
----------
-    -5.5
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select myleast(variadic array[1.1, -5.5])
+                                        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 --test with empty variadic call parameter
 select myleast(variadic array[]::int[]);
- myleast 
----------
-        
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select myleast(variadic array[]::int[])
+                                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 -- an example with some ordinary arguments too
 create function concat(text, variadic anyarray) returns text as $$
   select array_to_string($2, $1);
 $$ language sql immutable strict;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create function concat(text, variadic anyarray) returns text as $$
+                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select concat('%', 1, 2, 3, 4, 5);
-  concat   
------------
- 1%2%3%4%5
+ concat 
+--------
+ %12345
 (1 row)
 
 select concat('|', 'a'::text, 'b', 'c');
  concat 
 --------
- a|b|c
+ |abc
 (1 row)
 
 select concat('|', variadic array[1,2,33]);
- concat 
---------
- 1|2|33
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select concat('|', variadic array[1,2,33])
+                                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 select concat('|', variadic array[]::int[]);
- concat 
---------
- 
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select concat('|', variadic array[]::int[])
+                                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 drop function concat(text, anyarray);
+ERROR:  concat(string,anyarray) is not a function
 -- mix variadic with anyelement
 create function formarray(anyelement, variadic anyarray) returns anyarray as $$
   select array_prepend($1, $2);
 $$ language sql immutable strict;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create function formarray(anyelement, variadic anyarray) returns anyarray as $$
+                                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select formarray(1,2,3,4,5);
-  formarray  
--------------
- {1,2,3,4,5}
-(1 row)
-
+ERROR:  unknown function: formarray()
 select formarray(1.1, variadic array[1.2,55.5]);
-   formarray    
-----------------
- {1.1,1.2,55.5}
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select formarray(1.1, variadic array[1.2,55.5])
+                                              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 select formarray(1.1, array[1.2,55.5]); -- fail without variadic
-ERROR:  function formarray(numeric, numeric[]) does not exist
-LINE 1: select formarray(1.1, array[1.2,55.5]);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: formarray()
 select formarray(1, 'x'::text); -- fail, type mismatch
-ERROR:  function formarray(integer, text) does not exist
-LINE 1: select formarray(1, 'x'::text);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: formarray()
 select formarray(1, variadic array['x'::text]); -- fail, type mismatch
-ERROR:  function formarray(integer, text[]) does not exist
-LINE 1: select formarray(1, variadic array['x'::text]);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select formarray(1, variadic array['x'::text])
+                                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 drop function formarray(anyelement, variadic anyarray);
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+drop function formarray(anyelement, variadic anyarray)
+                                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 -- test pg_typeof() function
 select pg_typeof(null);           -- unknown
  pg_typeof 
@@ -1082,7 +1434,7 @@
 select pg_typeof(0);              -- integer
  pg_typeof 
 -----------
- integer
+ bigint
 (1 row)
 
 select pg_typeof(0.0);            -- numeric
@@ -1100,7 +1452,7 @@
 select pg_typeof('x');            -- unknown
  pg_typeof 
 -----------
- unknown
+ text
 (1 row)
 
 select pg_typeof('' || '');       -- text
@@ -1112,7 +1464,7 @@
 select pg_typeof(pg_typeof(0));   -- regtype
  pg_typeof 
 -----------
- regtype
+ text
 (1 row)
 
 select pg_typeof(array[1.2,55.5]); -- numeric[]
@@ -1122,11 +1474,7 @@
 (1 row)
 
 select pg_typeof(myleast(10, 1, 20, 33));  -- polymorphic input
- pg_typeof 
------------
- integer
-(1 row)
-
+ERROR:  unknown function: myleast()
 -- test functions with default parameters
 -- test basic functionality
 create function dfunc(a int = 1, int = 2) returns int as $$
@@ -1151,14 +1499,12 @@
 (1 row)
 
 select dfunc(10, 20, 30);  -- fail
-ERROR:  function dfunc(integer, integer, integer) does not exist
-LINE 1: select dfunc(10, 20, 30);
-               ^
+ERROR:  unknown signature: public.dfunc(int, int, int)
 HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 drop function dfunc();  -- fail
 ERROR:  function dfunc() does not exist
 drop function dfunc(int);  -- fail
-ERROR:  function dfunc(integer) does not exist
+ERROR:  function dfunc(int) does not exist
 drop function dfunc(int, int);  -- ok
 -- fail: defaults must be at end of argument list
 create function dfunc(a int = 1, b int) returns int as $$
@@ -1169,21 +1515,29 @@
 create function dfunc(a int = 1, out sum int, b int = 2) as $$
   select $1 + $2;
 $$ language sql;
+ERROR:  no value provided for placeholder: $2
 select dfunc();
- dfunc 
--------
-     3
-(1 row)
-
+ERROR:  unknown function: dfunc()
 -- verify it lists properly
 \df dfunc
-                                          List of functions
- Schema | Name  | Result data type |                    Argument data types                    | Type 
---------+-------+------------------+-----------------------------------------------------------+------
- public | dfunc | integer          | a integer DEFAULT 1, OUT sum integer, b integer DEFAULT 2 | func
-(1 row)
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT n.nspname as "Schema",
+  p.proname as "Name",
+  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
+  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
+ CASE p.prokind
+  WHEN 'a' THEN 'agg'
+  WHEN 'w' THEN 'window'
+  WHEN 'p' THEN 'proc'
+  ELSE 'func'
+ END as "Type"
+FROM pg_catalog.pg_proc p
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
+WHERE p.proname OPERATOR(pg_catalog.~) '^(dfunc)$' COLLATE pg_catalog.default
+                                                                     ^
 drop function dfunc(int, int);
+ERROR:  unknown function: dfunc()
 -- check implicit coercion
 create function dfunc(a int DEFAULT 1.0, int DEFAULT '-1') returns int as $$
   select $1 + $2;
@@ -1198,10 +1552,7 @@
   select $1 || ', ' || $2;
 $$ language sql;
 select dfunc();  -- fail: which dfunc should be called? int or text
-ERROR:  function dfunc() is not unique
-LINE 1: select dfunc();
-               ^
-HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
+ERROR:  function name "dfunc" is not unique
 select dfunc('Hi');  -- ok
    dfunc   
 -----------
@@ -1237,20 +1588,17 @@
 -- Now, dfunc(nargs = 2) and dfunc(nargs = 4) are ambiguous when called
 -- with 0 to 2 arguments.
 select dfunc();  -- fail
-ERROR:  function dfunc() is not unique
-LINE 1: select dfunc();
-               ^
-HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
+ERROR:  function name "dfunc" is not unique
 select dfunc(1);  -- fail
-ERROR:  function dfunc(integer) is not unique
-LINE 1: select dfunc(1);
-               ^
-HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
+ERROR:  ambiguous call: dfunc(int), candidates are:
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8) -> int
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8, int DEFAULT 3:::INT8, int DEFAULT 4:::INT8) -> int
+
 select dfunc(1, 2);  -- fail
-ERROR:  function dfunc(integer, integer) is not unique
-LINE 1: select dfunc(1, 2);
-               ^
-HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
+ERROR:  ambiguous call: dfunc(int, int), candidates are:
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8) -> int
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8, int DEFAULT 3:::INT8, int DEFAULT 4:::INT8) -> int
+
 select dfunc(1, 2, 3);  -- ok
  dfunc 
 -------
@@ -1274,84 +1622,79 @@
 create function dfunc(anyelement = 'World'::text) returns text as $$
   select 'Hello, ' || $1::text;
 $$ language sql;
+ERROR:  invalid cast: anyelement -> string
 select dfunc();
-    dfunc     
---------------
- Hello, World
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc(0);
-  dfunc   
-----------
- Hello, 0
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc(to_date('20081215','YYYYMMDD'));
-       dfunc       
--------------------
- Hello, 12-15-2008
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc('City'::text);
-    dfunc    
--------------
- Hello, City
-(1 row)
-
+ERROR:  unknown function: dfunc()
 drop function dfunc(anyelement);
+ERROR:  unknown function: dfunc()
 -- check defaults for variadics
 create function dfunc(a variadic int[]) returns int as
 $$ select array_upper($1, 1) $$ language sql;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create function dfunc(a variadic int[]) returns int as
+                        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select dfunc();  -- fail
-ERROR:  function dfunc() does not exist
-LINE 1: select dfunc();
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: dfunc()
 select dfunc(10);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc(10,20);
- dfunc 
--------
-     2
-(1 row)
-
+ERROR:  unknown function: dfunc()
 create or replace function dfunc(a variadic int[] default array[]::int[]) returns int as
 $$ select array_upper($1, 1) $$ language sql;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create or replace function dfunc(a variadic int[] default array[]::int[]) returns int as
+                                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select dfunc();  -- now ok
- dfunc 
--------
-      
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc(10);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select dfunc(10,20);
- dfunc 
--------
-     2
-(1 row)
-
+ERROR:  unknown function: dfunc()
 -- can't remove the default once it exists
 create or replace function dfunc(a variadic int[]) returns int as
 $$ select array_upper($1, 1) $$ language sql;
-ERROR:  cannot remove parameter defaults from existing function
-HINT:  Use DROP FUNCTION dfunc(integer[]) first.
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create or replace function dfunc(a variadic int[]) returns int as
+                                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 \df dfunc
-                                     List of functions
- Schema | Name  | Result data type |               Argument data types               | Type 
---------+-------+------------------+-------------------------------------------------+------
- public | dfunc | integer          | VARIADIC a integer[] DEFAULT ARRAY[]::integer[] | func
-(1 row)
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT n.nspname as "Schema",
+  p.proname as "Name",
+  pg_catalog.pg_get_function_result(p.oid) as "Result data type",
+  pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",
+ CASE p.prokind
+  WHEN 'a' THEN 'agg'
+  WHEN 'w' THEN 'window'
+  WHEN 'p' THEN 'proc'
+  ELSE 'func'
+ END as "Type"
+FROM pg_catalog.pg_proc p
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
+WHERE p.proname OPERATOR(pg_catalog.~) '^(dfunc)$' COLLATE pg_catalog.default
+                                                                     ^
 drop function dfunc(a variadic int[]);
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+drop function dfunc(a variadic int[])
+                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 -- Ambiguity should be reported only if there's not a better match available
 create function dfunc(int = 1, int = 2, int = 3) returns int as $$
   select 3;
@@ -1364,10 +1707,10 @@
 $$ language sql;
 -- dfunc(narg=2) and dfunc(narg=3) are ambiguous
 select dfunc(1);  -- fail
-ERROR:  function dfunc(integer) is not unique
-LINE 1: select dfunc(1);
-               ^
-HINT:  Could not choose a best candidate function. You might need to add explicit type casts.
+ERROR:  ambiguous call: dfunc(int), candidates are:
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8, int DEFAULT 3:::INT8) -> int
+dfunc(int DEFAULT 1:::INT8, int DEFAULT 2:::INT8) -> int
+
 -- but this works since the ambiguous functions aren't preferred anyway
 select dfunc('Hi');
  dfunc 
@@ -1392,27 +1735,22 @@
 (1 row)
 
 select (dfunc(a := 10, b := 20, c := 30)).*;
- a  | b  | c  | d 
-----+----+----+---
- 10 | 20 | 30 | 0
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select (dfunc(a := 10, b := 20, c := 30)).*
+                ^
 select * from dfunc(a := 10, b := 20);
- a  | b  | c | d 
-----+----+---+---
- 10 | 20 | 0 | 0
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(a := 10, b := 20)
+                      ^
 select * from dfunc(b := 10, a := 20);
- a  | b  | c | d 
-----+----+---+---
- 20 | 10 | 0 | 0
-(1 row)
-
-select * from dfunc(0);  -- fail
-ERROR:  function dfunc(integer) does not exist
-LINE 1: select * from dfunc(0);
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(b := 10, a := 20)
                       ^
+select * from dfunc(0);  -- fail
+ERROR:  unknown signature: public.dfunc(int)
 HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 select * from dfunc(1,2);
  a | b | c | d 
@@ -1421,40 +1759,40 @@
 (1 row)
 
 select * from dfunc(1,2,c := 3);
- a | b | c | d 
----+---+---+---
- 1 | 2 | 3 | 0
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(1,2,c := 3)
+                          ^
 select * from dfunc(1,2,d := 3);
- a | b | c | d 
----+---+---+---
- 1 | 2 | 0 | 3
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(1,2,d := 3)
+                          ^
 select * from dfunc(x := 20, b := 10, x := 30);  -- fail, duplicate name
-ERROR:  argument name "x" used more than once
-LINE 1: select * from dfunc(x := 20, b := 10, x := 30);
-                                              ^
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(x := 20, b := 10, x := 30)
+                      ^
 select * from dfunc(10, b := 20, 30);  -- fail, named args must be last
-ERROR:  positional argument cannot follow named argument
-LINE 1: select * from dfunc(10, b := 20, 30);
-                                         ^
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(10, b := 20, 30)
+                          ^
 select * from dfunc(x := 10, b := 20, c := 30);  -- fail, unknown param
-ERROR:  function dfunc(x => integer, b => integer, c => integer) does not exist
-LINE 1: select * from dfunc(x := 10, b := 20, c := 30);
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(x := 10, b := 20, c := 30)
                       ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 select * from dfunc(10, 10, a := 20);  -- fail, a overlaps positional parameter
-ERROR:  function dfunc(integer, integer, a => integer) does not exist
-LINE 1: select * from dfunc(10, 10, a := 20);
-                      ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(10, 10, a := 20)
+                              ^
 select * from dfunc(1,c := 2,d := 3); -- fail, no value for b
-ERROR:  function dfunc(integer, c => integer, d => integer) does not exist
-LINE 1: select * from dfunc(1,c := 2,d := 3);
-                      ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(1,c := 2,d := 3)
+                        ^
 drop function dfunc(int, int, int, int);
 -- test with different parameter types
 create function dfunc(a varchar, b numeric, c date = current_date)
@@ -1464,106 +1802,83 @@
 select (dfunc('Hello World', 20, '2009-07-25'::date)).*;
       a      | b  |     c      
 -------------+----+------------
- Hello World | 20 | 07-25-2009
+ Hello World | 20 | 2009-07-25
 (1 row)
 
 select * from dfunc('Hello World', 20, '2009-07-25'::date);
       a      | b  |     c      
 -------------+----+------------
- Hello World | 20 | 07-25-2009
+ Hello World | 20 | 2009-07-25
 (1 row)
 
 select * from dfunc(c := '2009-07-25'::date, a := 'Hello World', b := 20);
-      a      | b  |     c      
--------------+----+------------
- Hello World | 20 | 07-25-2009
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(c := '2009-07-25'::date, a := 'Hello World', b := 20)
+                      ^
 select * from dfunc('Hello World', b := 20, c := '2009-07-25'::date);
-      a      | b  |     c      
--------------+----+------------
- Hello World | 20 | 07-25-2009
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc('Hello World', b := 20, c := '2009-07-25'::date)
+                                     ^
 select * from dfunc('Hello World', c := '2009-07-25'::date, b := 20);
-      a      | b  |     c      
--------------+----+------------
- Hello World | 20 | 07-25-2009
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc('Hello World', c := '2009-07-25'::date, b := 20)
+                                     ^
 select * from dfunc('Hello World', c := 20, b := '2009-07-25'::date);  -- fail
-ERROR:  function dfunc(unknown, c => integer, b => date) does not exist
-LINE 1: select * from dfunc('Hello World', c := 20, b := '2009-07-25...
-                      ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc('Hello World', c := 20, b := '2009-07-25'::date)
+                                     ^
 drop function dfunc(varchar, numeric, date);
 -- test out parameters with named params
 create function dfunc(a varchar = 'def a', out _a varchar, c numeric = NULL, out _c numeric)
 returns record as $$
   select $1, $2;
 $$ language sql;
+ERROR:  no value provided for placeholder: $2
 select (dfunc()).*;
-  _a   | _c 
--------+----
- def a |   
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select * from dfunc();
-  _a   | _c 
--------+----
- def a |   
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select * from dfunc('Hello', 100);
-  _a   | _c  
--------+-----
- Hello | 100
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select * from dfunc(a := 'Hello', c := 100);
-  _a   | _c  
--------+-----
- Hello | 100
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(a := 'Hello', c := 100)
+                      ^
 select * from dfunc(c := 100, a := 'Hello');
-  _a   | _c  
--------+-----
- Hello | 100
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(c := 100, a := 'Hello')
+                      ^
 select * from dfunc('Hello');
-  _a   | _c 
--------+----
- Hello |   
-(1 row)
-
+ERROR:  unknown function: dfunc()
 select * from dfunc('Hello', c := 100);
-  _a   | _c  
--------+-----
- Hello | 100
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc('Hello', c := 100)
+                               ^
 select * from dfunc(c := 100);
-  _a   | _c  
--------+-----
- def a | 100
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select * from dfunc(c := 100)
+                      ^
 -- fail, can no longer change an input parameter's name
 create or replace function dfunc(a varchar = 'def a', out _a varchar, x numeric = NULL, out _c numeric)
 returns record as $$
   select $1, $2;
 $$ language sql;
-ERROR:  cannot change name of input parameter "c"
-HINT:  Use DROP FUNCTION dfunc(character varying,numeric) first.
+ERROR:  no value provided for placeholder: $2
 create or replace function dfunc(a varchar = 'def a', out _a varchar, numeric = NULL, out _c numeric)
 returns record as $$
   select $1, $2;
 $$ language sql;
-ERROR:  cannot change name of input parameter "c"
-HINT:  Use DROP FUNCTION dfunc(character varying,numeric) first.
+ERROR:  no value provided for placeholder: $2
 drop function dfunc(varchar, numeric);
+ERROR:  unknown function: dfunc()
 --fail, named parameters are not unique
 create function testpolym(a int, a int) returns int as $$ select 1;$$ language sql;
 ERROR:  parameter name "a" used more than once
@@ -1608,47 +1923,40 @@
 (1 row)
 
 select dfunc(a := 1, b := 2);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(a := 1, b := 2)
+               ^
 select dfunc(a := 'a'::text, b := 'b');
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(a := 'a'::text, b := 'b')
+               ^
 select dfunc(a := 'a'::text, b := 'b', flag := false); -- named notation
- dfunc 
--------
- b
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(a := 'a'::text, b := 'b', flag := false)
+               ^
 select dfunc(b := 'b'::text, a := 'a'); -- named notation with default
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(b := 'b'::text, a := 'a')
+               ^
 select dfunc(a := 'a'::text, flag := true); -- named notation with default
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(a := 'a'::text, flag := true)
+               ^
 select dfunc(a := 'a'::text, flag := false); -- named notation with default
- dfunc 
--------
- 
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(a := 'a'::text, flag := false)
+               ^
 select dfunc(b := 'b'::text, a := 'a', flag := true); -- named notation
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc(b := 'b'::text, a := 'a', flag := true)
+               ^
 select dfunc('a'::text, 'b', false); -- full positional notation
  dfunc 
 -------
@@ -1656,11 +1964,10 @@
 (1 row)
 
 select dfunc('a'::text, 'b', flag := false); -- mixed notation
- dfunc 
--------
- b
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc('a'::text, 'b', flag := false)
+                                  ^
 select dfunc('a'::text, 'b', true); -- full positional notation
  dfunc 
 -------
@@ -1668,54 +1975,46 @@
 (1 row)
 
 select dfunc('a'::text, 'b', flag := true); -- mixed notation
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+select dfunc('a'::text, 'b', flag := true)
+                                  ^
 -- ansi/sql syntax
 select dfunc(a => 1, b => 2);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a => 1, b => 2)
+                ^
 select dfunc(a => 'a'::text, b => 'b');
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a => 'a'::text, b => 'b')
+                ^
 select dfunc(a => 'a'::text, b => 'b', flag => false); -- named notation
- dfunc 
--------
- b
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a => 'a'::text, b => 'b', flag => false)
+                ^
 select dfunc(b => 'b'::text, a => 'a'); -- named notation with default
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(b => 'b'::text, a => 'a')
+                ^
 select dfunc(a => 'a'::text, flag => true); -- named notation with default
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a => 'a'::text, flag => true)
+                ^
 select dfunc(a => 'a'::text, flag => false); -- named notation with default
- dfunc 
--------
- 
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a => 'a'::text, flag => false)
+                ^
 select dfunc(b => 'b'::text, a => 'a', flag => true); -- named notation
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(b => 'b'::text, a => 'a', flag => true)
+                ^
 select dfunc('a'::text, 'b', false); -- full positional notation
  dfunc 
 -------
@@ -1723,11 +2022,10 @@
 (1 row)
 
 select dfunc('a'::text, 'b', flag => false); -- mixed notation
- dfunc 
--------
- b
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc('a'::text, 'b', flag => false)
+                                   ^
 select dfunc('a'::text, 'b', true); -- full positional notation
  dfunc 
 -------
@@ -1735,37 +2033,32 @@
 (1 row)
 
 select dfunc('a'::text, 'b', flag => true); -- mixed notation
- dfunc 
--------
- a
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc('a'::text, 'b', flag => true)
+                                   ^
 -- this tests lexer edge cases around =>
 select dfunc(a =>-1);
- dfunc 
--------
-    -1
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a =>-1)
+                ^
 select dfunc(a =>+1);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a =>+1)
+                ^
 select dfunc(a =>/**/1);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a =>/**/1)
+                ^
 select dfunc(a =>--comment to be removed by psql
   1);
- dfunc 
--------
-     1
-(1 row)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a =>
+                ^
 -- need DO to protect the -- from psql
 do $$
   declare r integer;
@@ -1775,39 +2068,43 @@
     raise info 'r = %', r;
   end;
 $$;
-INFO:  r = 1
+ERROR:  at or near ";": at or near ">": syntax error
+DETAIL:  source SQL:
+select dfunc(a=>-- comment
+               ^
+--
+source SQL:
+declare r integer;
+  begin
+    select dfunc(a=>-- comment
+      1) into r;
+               ^
 -- check reverse-listing of named-arg calls
 CREATE VIEW dfview AS
    SELECT q1, q2,
      dfunc(q1,q2, flag := q1>q2) as c3,
      dfunc(q1, flag := q1<q2, b := q2) as c4
      FROM int8_tbl;
+ERROR:  at or near ":": syntax error
+DETAIL:  source SQL:
+CREATE VIEW dfview AS
+   SELECT q1, q2,
+     dfunc(q1,q2, flag := q1>q2) as c3,
+                       ^
 select * from dfview;
-        q1        |        q2         |        c3        |        c4         
-------------------+-------------------+------------------+-------------------
-              123 |               456 |              456 |               123
-              123 |  4567890123456789 | 4567890123456789 |               123
- 4567890123456789 |               123 | 4567890123456789 |               123
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 | -4567890123456789
-(5 rows)
-
+ERROR:  relation "dfview" does not exist
 \d+ dfview
-                           View "public.dfview"
- Column |  Type  | Collation | Nullable | Default | Storage | Description 
---------+--------+-----------+----------+---------+---------+-------------
- q1     | bigint |           |          |         | plain   | 
- q2     | bigint |           |          |         | plain   | 
- c3     | bigint |           |          |         | plain   | 
- c4     | bigint |           |          |         | plain   | 
-View definition:
- SELECT q1,
-    q2,
-    dfunc(q1, q2, flag => q1 > q2) AS c3,
-    dfunc(q1, flag => q1 < q2, b => q2) AS c4
-   FROM int8_tbl;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(dfview)$' COLLATE pg_catalog.default
+                                                                      ^
 drop view dfview;
+ERROR:  relation "dfview" does not exist
 drop function dfunc(anyelement, anyelement, bool);
 --
 -- Tests for ANYCOMPATIBLE polymorphism family
@@ -1816,283 +2113,213 @@
 returns anycompatible as $$
   select greatest($1, $2)
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, 12) x;
- x  | pg_typeof 
-----+-----------
- 12 | integer
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12.3) x;
-  x   | pg_typeof 
-------+-----------
- 12.3 | numeric
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, point(1,2)) x;  -- fail
-ERROR:  function anyctest(integer, point) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, point(1,2)) x;
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(11, point(1,2)) x
+                                              ^
 select x, pg_typeof(x) from anyctest('11', '12.3') x;  -- defaults to text
-  x   | pg_typeof 
-------+-----------
- 12.3 | text
-(1 row)
-
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatible, anycompatible);
+ERROR:  unknown function: anyctest()
 create function anyctest(anycompatible, anycompatible)
 returns anycompatiblearray as $$
   select array[$1, $2]
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, 12) x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12.3) x;
-     x     | pg_typeof 
------------+-----------
- {11,12.3} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, array[1,2]) x;  -- fail
-ERROR:  function anyctest(integer, integer[]) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, array[1,2]) x;
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatible, anycompatible);
+ERROR:  unknown function: anyctest()
 create function anyctest(anycompatible, anycompatiblearray)
 returns anycompatiblearray as $$
   select array[$1] || $2
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, array[12]) x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, array[12.3]) x;
-     x     | pg_typeof 
------------+-----------
- {11,12.3} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(12.3, array[13]) x;
-     x     | pg_typeof 
------------+-----------
- {12.3,13} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(12.3, '{13,14.4}') x;
-       x        | pg_typeof 
-----------------+-----------
- {12.3,13,14.4} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, array[point(1,2)]) x;  -- fail
-ERROR:  function anyctest(integer, point[]) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, array[point(1,2)]) ...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(11, array[point(1,2)]) x
+                                                    ^
 select x, pg_typeof(x) from anyctest(11, 12) x;  -- fail
-ERROR:  function anyctest(integer, integer) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, 12) x;
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatible, anycompatiblearray);
+ERROR:  unknown function: anyctest()
 create function anyctest(anycompatible, anycompatiblerange)
 returns anycompatiblerange as $$
   select $2
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, int4range(4,7)) x;
-   x   | pg_typeof 
--------+-----------
- [4,7) | int4range
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, numrange(4,7)) x;
-   x   | pg_typeof 
--------+-----------
- [4,7) | numrange
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12) x;  -- fail
-ERROR:  function anyctest(integer, integer) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, 12) x;
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11.2, int4range(4,7)) x;  -- fail
-ERROR:  function anyctest(numeric, int4range) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11.2, int4range(4,7)) x...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11.2, '[4,7)') x;  -- fail
-ERROR:  could not determine polymorphic type anycompatiblerange because input has type unknown
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatible, anycompatiblerange);
+ERROR:  unknown function: anyctest()
 create function anyctest(anycompatiblerange, anycompatiblerange)
 returns anycompatible as $$
   select lower($1) + upper($2)
 $$ language sql;
+ERROR:  type "anycompatiblerange" does not exist
 select x, pg_typeof(x) from anyctest(int4range(11,12), int4range(4,7)) x;
- x  | pg_typeof 
-----+-----------
- 18 | integer
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(int4range(11,12), numrange(4,7)) x; -- fail
-ERROR:  function anyctest(int4range, numrange) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(int4range(11,12), numra...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatiblerange, anycompatiblerange);
+ERROR:  unknown function: anyctest()
 -- fail, can't infer result type:
 create function anyctest(anycompatible)
 returns anycompatiblerange as $$
   select $1
 $$ language sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatiblerange requires at least one input of type anycompatiblerange or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 create function anyctest(anycompatible, anycompatiblemultirange)
 returns anycompatiblemultirange as $$
   select $2
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, multirange(int4range(4,7))) x;
-    x    |   pg_typeof    
----------+----------------
- {[4,7)} | int4multirange
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, multirange(numrange(4,7))) x;
-    x    |   pg_typeof   
----------+---------------
- {[4,7)} | nummultirange
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12) x;  -- fail
-ERROR:  function anyctest(integer, integer) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, 12) x;
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11.2, multirange(int4range(4,7))) x;  -- fail
-ERROR:  function anyctest(numeric, int4multirange) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11.2, multirange(int4ra...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11.2, '{[4,7)}') x;  -- fail
-ERROR:  could not determine polymorphic type anycompatiblemultirange because input has type unknown
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatible, anycompatiblemultirange);
+ERROR:  unknown function: anyctest()
 create function anyctest(anycompatiblemultirange, anycompatiblemultirange)
 returns anycompatible as $$
   select lower($1) + upper($2)
 $$ language sql;
+ERROR:  type "anycompatiblemultirange" does not exist
 select x, pg_typeof(x) from anyctest(multirange(int4range(11,12)), multirange(int4range(4,7))) x;
- x  | pg_typeof 
-----+-----------
- 18 | integer
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(multirange(int4range(11,12)), multirange(numrange(4,7))) x; -- fail
-ERROR:  function anyctest(int4multirange, nummultirange) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(multirange(int4range(11...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatiblemultirange, anycompatiblemultirange);
+ERROR:  unknown function: anyctest()
 -- fail, can't infer result type:
 create function anyctest(anycompatible)
 returns anycompatiblemultirange as $$
   select $1
 $$ language sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatiblemultirange requires at least one input of type anycompatiblerange or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 create function anyctest(anycompatiblenonarray, anycompatiblenonarray)
 returns anycompatiblearray as $$
   select array[$1, $2]
 $$ language sql;
+ERROR:  type "anycompatiblenonarray" does not exist
 select x, pg_typeof(x) from anyctest(11, 12) x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12.3) x;
-     x     | pg_typeof 
------------+-----------
- {11,12.3} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(array[11], array[1,2]) x;  -- fail
-ERROR:  function anyctest(integer[], integer[]) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(array[11], array[1,2]) ...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(anycompatiblenonarray, anycompatiblenonarray);
+ERROR:  unknown function: anyctest()
 create function anyctest(a anyelement, b anyarray,
                          c anycompatible, d anycompatible)
 returns anycompatiblearray as $$
   select array[c, d]
 $$ language sql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x) from anyctest(11, array[1, 2], 42, 34.5) x;
-     x     | pg_typeof 
------------+-----------
- {42,34.5} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, array[1, 2], point(1,2), point(3,4)) x;
-         x         | pg_typeof 
--------------------+-----------
- {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(11, array[1, 2], point(1,2), point(3,4)) x
+                                                           ^
 select x, pg_typeof(x) from anyctest(11, '{1,2}', point(1,2), '(3,4)') x;
-         x         | pg_typeof 
--------------------+-----------
- {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(11, '{1,2}', point(1,2), '(3,4)') x
+                                                       ^
 select x, pg_typeof(x) from anyctest(11, array[1, 2.2], 42, 34.5) x;  -- fail
-ERROR:  function anyctest(integer, numeric[], integer, numeric) does not exist
-LINE 1: select x, pg_typeof(x) from anyctest(11, array[1, 2.2], 42, ...
-                                    ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: anyctest()
 drop function anyctest(a anyelement, b anyarray,
                        c anycompatible, d anycompatible);
+ERROR:  unknown function: anyctest()
 create function anyctest(variadic anycompatiblearray)
 returns anycompatiblearray as $$
   select $1
 $$ language sql;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create function anyctest(variadic anycompatiblearray)
+                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select x, pg_typeof(x) from anyctest(11, 12) x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, 12.2) x;
-     x     | pg_typeof 
------------+-----------
- {11,12.2} | numeric[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, '12') x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
-
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(11, '12.2') x;  -- fail
-ERROR:  invalid input syntax for type integer: "12.2"
-LINE 1: select x, pg_typeof(x) from anyctest(11, '12.2') x;
-                                                 ^
+ERROR:  unknown function: anyctest()
 select x, pg_typeof(x) from anyctest(variadic array[11, 12]) x;
-    x    | pg_typeof 
----------+-----------
- {11,12} | integer[]
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(variadic array[11, 12]) x
+                                                           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 select x, pg_typeof(x) from anyctest(variadic array[11, 12.2]) x;
-     x     | pg_typeof 
------------+-----------
- {11,12.2} | numeric[]
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select x, pg_typeof(x) from anyctest(variadic array[11, 12.2]) x
+                                                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 drop function anyctest(variadic anycompatiblearray);
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+drop function anyctest(variadic anycompatiblearray)
+                       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
