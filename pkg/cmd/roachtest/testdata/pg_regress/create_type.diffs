diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/create_type.out --label=/mnt/data1/postgres/src/test/regress/results/create_type.out /mnt/data1/postgres/src/test/regress/expected/create_type.out /mnt/data1/postgres/src/test/regress/results/create_type.out
--- /mnt/data1/postgres/src/test/regress/expected/create_type.out
+++ /mnt/data1/postgres/src/test/regress/results/create_type.out
@@ -3,7 +3,9 @@
 --
 -- directory path and dlsuffix are passed to us in environment variables
 \getenv libdir PG_LIBDIR
+invalid command \getenv
 \getenv dlsuffix PG_DLSUFFIX
+invalid command \getenv
 \set regresslib :libdir '/regress' :dlsuffix
 --
 -- Test the "old style" approach of making the I/O functions first,
@@ -13,24 +15,30 @@
    RETURNS widget
    AS :'regresslib'
    LANGUAGE C STRICT IMMUTABLE;
-NOTICE:  type "widget" is not yet defined
-DETAIL:  Creating a shell type definition.
+ERROR:  unimplemented: C is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/102201/_version_
 CREATE FUNCTION widget_out(widget)
    RETURNS cstring
    AS :'regresslib'
    LANGUAGE C STRICT IMMUTABLE;
-NOTICE:  argument type widget is only a shell
+ERROR:  unimplemented: C is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/102201/_version_
 CREATE FUNCTION int44in(cstring)
    RETURNS city_budget
    AS :'regresslib'
    LANGUAGE C STRICT IMMUTABLE;
-NOTICE:  type "city_budget" is not yet defined
-DETAIL:  Creating a shell type definition.
+ERROR:  unimplemented: C is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/102201/_version_
 CREATE FUNCTION int44out(city_budget)
    RETURNS cstring
    AS :'regresslib'
    LANGUAGE C STRICT IMMUTABLE;
-NOTICE:  argument type city_budget is only a shell
+ERROR:  unimplemented: C is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/102201/_version_
 CREATE TYPE widget (
    internallength = 24,
    input = widget_in,
@@ -39,6 +47,13 @@
    typmod_out = numerictypmodout,
    alignment = double
 );
+ERROR:  at or near "internallength": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE widget (
+   internallength = 24,
+   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE TYPE city_budget (
    internallength = 16,
    input = int44in,
@@ -47,15 +62,40 @@
    category = 'x',   -- just to verify the system will take it
    preferred = true  -- ditto
 );
+ERROR:  at or near "internallength": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE city_budget (
+   internallength = 16,
+   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- Test creation and destruction of shell types
 CREATE TYPE shell;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE shell
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE TYPE shell;   -- fail, type already present
-ERROR:  type "shell" already exists
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE shell
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 DROP TYPE shell;
+ERROR:  type "shell" does not exist
 DROP TYPE shell;     -- fail, type not exist
 ERROR:  type "shell" does not exist
 -- also, let's leave one around for purposes of pg_dump testing
 CREATE TYPE myshell;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE myshell
+                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 --
 -- Test type-related default values (broken in releases before PG 7.2)
 --
@@ -63,28 +103,40 @@
 -- a shell type and then filling it in.
 --
 CREATE TYPE int42;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE int42
+                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE TYPE text_w_default;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE text_w_default
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- Make dummy I/O routines using the existing internal support for int4, text
 CREATE FUNCTION int42_in(cstring)
    RETURNS int42
    AS 'int4in'
    LANGUAGE internal STRICT IMMUTABLE;
-NOTICE:  return type int42 is only a shell
+ERROR:  language "internal" does not exist
 CREATE FUNCTION int42_out(int42)
    RETURNS cstring
    AS 'int4out'
    LANGUAGE internal STRICT IMMUTABLE;
-NOTICE:  argument type int42 is only a shell
+ERROR:  language "internal" does not exist
 CREATE FUNCTION text_w_default_in(cstring)
    RETURNS text_w_default
    AS 'textin'
    LANGUAGE internal STRICT IMMUTABLE;
-NOTICE:  return type text_w_default is only a shell
+ERROR:  language "internal" does not exist
 CREATE FUNCTION text_w_default_out(text_w_default)
    RETURNS cstring
    AS 'textout'
    LANGUAGE internal STRICT IMMUTABLE;
-NOTICE:  argument type text_w_default is only a shell
+ERROR:  language "internal" does not exist
 CREATE TYPE int42 (
    internallength = 4,
    input = int42_in,
@@ -93,6 +145,13 @@
    default = 42,
    passedbyvalue
 );
+ERROR:  at or near "internallength": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE int42 (
+   internallength = 4,
+   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE TYPE text_w_default (
    internallength = variable,
    input = text_w_default_in,
@@ -100,16 +159,27 @@
    alignment = int4,
    default = 'zippo'
 );
+ERROR:  at or near "internallength": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE text_w_default (
+   internallength = variable,
+   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE TABLE default_test (f1 text_w_default, f2 int42);
+ERROR:  type "text_w_default" does not exist
 INSERT INTO default_test DEFAULT VALUES;
+ERROR:  relation "default_test" does not exist
 SELECT * FROM default_test;
-  f1   | f2 
--------+----
- zippo | 42
-(1 row)
-
+ERROR:  relation "default_test" does not exist
 -- We need a shell type to test some CREATE TYPE failure cases with
 CREATE TYPE bogus_type;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE bogus_type
+                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- invalid: non-lowercase quoted identifiers
 CREATE TYPE bogus_type (
 	"Internallength" = 4,
@@ -119,116 +189,126 @@
 	"Default" = 42,
 	"Passedbyvalue"
 );
-WARNING:  type attribute "Internallength" not recognized
-LINE 2:  "Internallength" = 4,
-         ^
-WARNING:  type attribute "Input" not recognized
-LINE 3:  "Input" = int42_in,
-         ^
-WARNING:  type attribute "Output" not recognized
-LINE 4:  "Output" = int42_out,
-         ^
-WARNING:  type attribute "Alignment" not recognized
-LINE 5:  "Alignment" = int4,
-         ^
-WARNING:  type attribute "Default" not recognized
-LINE 6:  "Default" = 42,
-         ^
-WARNING:  type attribute "Passedbyvalue" not recognized
-LINE 7:  "Passedbyvalue"
-         ^
-ERROR:  type input function must be specified
+ERROR:  at or near "Internallength": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE bogus_type (
+	"Internallength" = 4,
+ ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- invalid: input/output function incompatibility
 CREATE TYPE bogus_type (INPUT = array_in,
     OUTPUT = array_out,
     ELEMENT = int,
     INTERNALLENGTH = 32);
-ERROR:  type input function array_in must return type bogus_type
+ERROR:  at or near "input": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE bogus_type (INPUT = array_in,
+                        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 DROP TYPE bogus_type;
+ERROR:  type "bogus_type" does not exist
 -- It no longer is possible to issue CREATE TYPE without making a shell first
 CREATE TYPE bogus_type (INPUT = array_in,
     OUTPUT = array_out,
     ELEMENT = int,
     INTERNALLENGTH = 32);
-ERROR:  type "bogus_type" does not exist
-HINT:  Create the type as a shell type, then create its I/O functions, then do a full CREATE TYPE.
+ERROR:  at or near "input": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE bogus_type (INPUT = array_in,
+                        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- Test stand-alone composite type
 CREATE TYPE default_test_row AS (f1 text_w_default, f2 int42);
+ERROR:  type "text_w_default" does not exist
 CREATE FUNCTION get_default_test() RETURNS SETOF default_test_row AS '
   SELECT * FROM default_test;
 ' LANGUAGE SQL;
+ERROR:  type "default_test_row" does not exist
 SELECT * FROM get_default_test();
-  f1   | f2 
--------+----
- zippo | 42
-(1 row)
-
+ERROR:  unknown function: get_default_test()
 -- Test comments
 COMMENT ON TYPE bad IS 'bad comment';
 ERROR:  type "bad" does not exist
 COMMENT ON TYPE default_test_row IS 'good comment';
+ERROR:  type "default_test_row" does not exist
 COMMENT ON TYPE default_test_row IS NULL;
+ERROR:  type "default_test_row" does not exist
 COMMENT ON COLUMN default_test_row.nope IS 'bad comment';
-ERROR:  column "nope" of relation "default_test_row" does not exist
+ERROR:  relation "default_test_row" does not exist
 COMMENT ON COLUMN default_test_row.f1 IS 'good comment';
+ERROR:  relation "default_test_row" does not exist
 COMMENT ON COLUMN default_test_row.f1 IS NULL;
+ERROR:  relation "default_test_row" does not exist
 -- Check shell type create for existing types
 CREATE TYPE text_w_default;		-- should fail
-ERROR:  type "text_w_default" already exists
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE text_w_default
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 DROP TYPE default_test_row CASCADE;
-NOTICE:  drop cascades to function get_default_test()
+ERROR:  unimplemented: DROP TYPE CASCADE is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/51480/_version_
 DROP TABLE default_test;
+ERROR:  relation "default_test" does not exist
 -- Check dependencies are established when creating a new type
 CREATE TYPE base_type;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE base_type
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE FUNCTION base_fn_in(cstring) RETURNS base_type AS 'boolin'
     LANGUAGE internal IMMUTABLE STRICT;
-NOTICE:  return type base_type is only a shell
+ERROR:  language "internal" does not exist
 CREATE FUNCTION base_fn_out(base_type) RETURNS cstring AS 'boolout'
     LANGUAGE internal IMMUTABLE STRICT;
-NOTICE:  argument type base_type is only a shell
+ERROR:  language "internal" does not exist
 CREATE TYPE base_type(INPUT = base_fn_in, OUTPUT = base_fn_out);
+ERROR:  at or near "input": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE base_type(INPUT = base_fn_in, OUTPUT = base_fn_out)
+                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 DROP FUNCTION base_fn_in(cstring); -- error
-ERROR:  cannot drop function base_fn_in(cstring) because other objects depend on it
-DETAIL:  type base_type depends on function base_fn_in(cstring)
-function base_fn_out(base_type) depends on type base_type
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  unknown function: base_fn_in()
 DROP FUNCTION base_fn_out(base_type); -- error
-ERROR:  cannot drop function base_fn_out(base_type) because other objects depend on it
-DETAIL:  type base_type depends on function base_fn_out(base_type)
-function base_fn_in(cstring) depends on type base_type
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  unknown function: base_fn_out()
 DROP TYPE base_type; -- error
-ERROR:  cannot drop type base_type because other objects depend on it
-DETAIL:  function base_fn_in(cstring) depends on type base_type
-function base_fn_out(base_type) depends on type base_type
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  type "base_type" does not exist
 DROP TYPE base_type CASCADE;
-NOTICE:  drop cascades to 2 other objects
-DETAIL:  drop cascades to function base_fn_in(cstring)
-drop cascades to function base_fn_out(base_type)
+ERROR:  unimplemented: DROP TYPE CASCADE is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/51480/_version_
 -- Check usage of typmod with a user-defined type
 -- (we have borrowed numeric's typmod functions)
 CREATE TEMP TABLE mytab (foo widget(42,13,7));     -- should fail
-ERROR:  invalid NUMERIC type modifier
-LINE 1: CREATE TEMP TABLE mytab (foo widget(42,13,7));
-                                     ^
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE mytab (foo widget(42,13,7))
+                                   ^
+HINT:  try \h CREATE TABLE
 CREATE TEMP TABLE mytab (foo widget(42,13));
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE mytab (foo widget(42,13))
+                                   ^
+HINT:  try \h CREATE TABLE
 SELECT format_type(atttypid,atttypmod) FROM pg_attribute
 WHERE attrelid = 'mytab'::regclass AND attnum > 0;
-  format_type  
----------------
- widget(42,13)
-(1 row)
-
+ERROR:  relation "mytab" does not exist
 -- might as well exercise the widget type while we're here
 INSERT INTO mytab VALUES ('(1,2,3)'), ('(-44,5.5,12)');
+ERROR:  relation "mytab" does not exist
 TABLE mytab;
-     foo      
---------------
- (1,2,3)
- (-44,5.5,12)
-(2 rows)
-
+ERROR:  relation "mytab" does not exist
 -- and test format_type() a bit more, too
 select format_type('varchar'::regtype, 42);
       format_type      
@@ -251,34 +331,28 @@
 
 -- Test non-error-throwing APIs using widget, which still throws errors
 SELECT pg_input_is_valid('(1,2,3)', 'widget');
- pg_input_is_valid 
--------------------
- t
-(1 row)
-
+ERROR:  unknown function: pg_input_is_valid()
 SELECT pg_input_is_valid('(1,2)', 'widget');  -- hard error expected
-ERROR:  invalid input syntax for type widget: "(1,2)"
+ERROR:  unknown function: pg_input_is_valid()
 SELECT pg_input_is_valid('{"(1,2,3)"}', 'widget[]');
- pg_input_is_valid 
--------------------
- t
-(1 row)
-
+ERROR:  unknown function: pg_input_is_valid()
 SELECT pg_input_is_valid('{"(1,2)"}', 'widget[]');  -- hard error expected
-ERROR:  invalid input syntax for type widget: "(1,2)"
+ERROR:  unknown function: pg_input_is_valid()
 SELECT pg_input_is_valid('("(1,2,3)")', 'mytab');
- pg_input_is_valid 
--------------------
- t
-(1 row)
-
+ERROR:  unknown function: pg_input_is_valid()
 SELECT pg_input_is_valid('("(1,2)")', 'mytab');  -- hard error expected
-ERROR:  invalid input syntax for type widget: "(1,2)"
+ERROR:  unknown function: pg_input_is_valid()
 -- Test creation of an operator over a user-defined type
 CREATE FUNCTION pt_in_widget(point, widget)
    RETURNS bool
    AS :'regresslib'
    LANGUAGE C STRICT;
+ERROR:  at or near ",": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FUNCTION pt_in_widget(point, widget)
+                                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 CREATE OPERATOR <% (
    leftarg = point,
    rightarg = widget,
@@ -286,60 +360,161 @@
    commutator = >% ,
    negator = >=%
 );
+ERROR:  at or near "<": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE OPERATOR <% (
+                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/65017/_version_
 SELECT point '(1,2)' <% widget '(0,0,3)' AS t,
        point '(1,2)' <% widget '(0,0,1)' AS f;
- t | f 
----+---
- t | f
-(1 row)
-
+ERROR:  at or near "(1,2)": syntax error
+DETAIL:  source SQL:
+SELECT point '(1,2)' <% widget '(0,0,3)' AS t,
+             ^
 -- exercise city_budget type
 CREATE TABLE city (
 	name		name,
 	location 	box,
 	budget 		city_budget
 );
+ERROR:  at or near ",": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TABLE city (
+	name		name,
+	location 	box,
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 INSERT INTO city VALUES
 ('Podunk', '(1,2),(3,4)', '100,127,1000'),
 ('Gotham', '(1000,34),(1100,334)', '123456,127,-1000,6789');
+ERROR:  relation "city" does not exist
 TABLE city;
-  name  |       location       |        budget         
---------+----------------------+-----------------------
- Podunk | (3,4),(1,2)          | 100,127,1000,0
- Gotham | (1100,334),(1000,34) | 123456,127,-1000,6789
-(2 rows)
-
+ERROR:  relation "city" does not exist
 --
 -- Test CREATE/ALTER TYPE using a type that's compatible with varchar,
 -- so we can re-use those support functions
 --
 CREATE TYPE myvarchar;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE myvarchar
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 CREATE FUNCTION myvarcharin(cstring, oid, integer) RETURNS myvarchar
 LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharin';
-NOTICE:  return type myvarchar is only a shell
+ERROR:  at or near "parallel": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FUNCTION myvarcharin(cstring, oid, integer) RETURNS myvarchar
+LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharin'
+                            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION myvarcharout(myvarchar) RETURNS cstring
 LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharout';
-NOTICE:  argument type myvarchar is only a shell
+ERROR:  at or near "parallel": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FUNCTION myvarcharout(myvarchar) RETURNS cstring
+LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharout'
+                            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION myvarcharsend(myvarchar) RETURNS bytea
 LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharsend';
-NOTICE:  argument type myvarchar is only a shell
+ERROR:  at or near "parallel": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FUNCTION myvarcharsend(myvarchar) RETURNS bytea
+LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharsend'
+                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION myvarcharrecv(internal, oid, integer) RETURNS myvarchar
 LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharrecv';
-NOTICE:  return type myvarchar is only a shell
+ERROR:  at or near "parallel": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FUNCTION myvarcharrecv(internal, oid, integer) RETURNS myvarchar
+LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharrecv'
+                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- fail, it's still a shell:
 ALTER TYPE myvarchar SET (storage = extended);
-ERROR:  type "myvarchar" is only a shell
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+ALTER TYPE myvarchar SET (storage = extended)
+                         ^
+HINT:  try \h ALTER TYPE
 CREATE TYPE myvarchar (
     input = myvarcharin,
     output = myvarcharout,
     alignment = integer,
     storage = main
 );
+ERROR:  at or near "input": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE myvarchar (
+    input = myvarcharin,
+    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27793/_version_
 -- want to check updating of a domain over the target type, too
 CREATE DOMAIN myvarchardom AS myvarchar;
+ERROR:  at or near "as": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE DOMAIN myvarchardom AS myvarchar
+                           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27796/_version_
 ALTER TYPE myvarchar SET (storage = plain);  -- not allowed
-ERROR:  cannot change type's storage to PLAIN
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+ALTER TYPE myvarchar SET (storage = plain)
+                         ^
+HINT:  try \h ALTER TYPE
 ALTER TYPE myvarchar SET (storage = extended);
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+ALTER TYPE myvarchar SET (storage = extended)
+                         ^
+HINT:  try \h ALTER TYPE
 ALTER TYPE myvarchar SET (
     send = myvarcharsend,
     receive = myvarcharrecv,
@@ -349,59 +524,33 @@
     analyze = ts_typanalyze,
     subscript = raw_array_subscript_handler
 );
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+ALTER TYPE myvarchar SET (
+                         ^
+HINT:  try \h ALTER TYPE
 SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
        typanalyze, typsubscript, typstorage
 FROM pg_type WHERE typname = 'myvarchar';
-  typinput   |  typoutput   |  typreceive   |    typsend    |    typmodin     |    typmodout     |  typanalyze   |        typsubscript         | typstorage 
--------------+--------------+---------------+---------------+-----------------+------------------+---------------+-----------------------------+------------
- myvarcharin | myvarcharout | myvarcharrecv | myvarcharsend | varchartypmodin | varchartypmodout | ts_typanalyze | raw_array_subscript_handler | x
-(1 row)
-
+ERROR:  column "typsubscript" does not exist
 SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
        typanalyze, typsubscript, typstorage
 FROM pg_type WHERE typname = '_myvarchar';
- typinput | typoutput | typreceive |  typsend   |    typmodin     |    typmodout     |    typanalyze    |      typsubscript       | typstorage 
-----------+-----------+------------+------------+-----------------+------------------+------------------+-------------------------+------------
- array_in | array_out | array_recv | array_send | varchartypmodin | varchartypmodout | array_typanalyze | array_subscript_handler | x
-(1 row)
-
+ERROR:  column "typsubscript" does not exist
 SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
        typanalyze, typsubscript, typstorage
 FROM pg_type WHERE typname = 'myvarchardom';
- typinput  |  typoutput   | typreceive  |    typsend    | typmodin | typmodout |  typanalyze   | typsubscript | typstorage 
------------+--------------+-------------+---------------+----------+-----------+---------------+--------------+------------
- domain_in | myvarcharout | domain_recv | myvarcharsend | -        | -         | ts_typanalyze | -            | x
-(1 row)
-
+ERROR:  column "typsubscript" does not exist
 SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
        typanalyze, typsubscript, typstorage
 FROM pg_type WHERE typname = '_myvarchardom';
- typinput | typoutput | typreceive |  typsend   | typmodin | typmodout |    typanalyze    |      typsubscript       | typstorage 
-----------+-----------+------------+------------+----------+-----------+------------------+-------------------------+------------
- array_in | array_out | array_recv | array_send | -        | -         | array_typanalyze | array_subscript_handler | x
-(1 row)
-
+ERROR:  column "typsubscript" does not exist
 -- ensure dependencies are straight
 DROP FUNCTION myvarcharsend(myvarchar);  -- fail
-ERROR:  cannot drop function myvarcharsend(myvarchar) because other objects depend on it
-DETAIL:  type myvarchar depends on function myvarcharsend(myvarchar)
-function myvarcharin(cstring,oid,integer) depends on type myvarchar
-function myvarcharout(myvarchar) depends on type myvarchar
-function myvarcharrecv(internal,oid,integer) depends on type myvarchar
-type myvarchardom depends on function myvarcharsend(myvarchar)
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  unknown function: myvarcharsend()
 DROP TYPE myvarchar;  -- fail
-ERROR:  cannot drop type myvarchar because other objects depend on it
-DETAIL:  function myvarcharin(cstring,oid,integer) depends on type myvarchar
-function myvarcharout(myvarchar) depends on type myvarchar
-function myvarcharsend(myvarchar) depends on type myvarchar
-function myvarcharrecv(internal,oid,integer) depends on type myvarchar
-type myvarchardom depends on type myvarchar
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  type "myvarchar" does not exist
 DROP TYPE myvarchar CASCADE;
-NOTICE:  drop cascades to 5 other objects
-DETAIL:  drop cascades to function myvarcharin(cstring,oid,integer)
-drop cascades to function myvarcharout(myvarchar)
-drop cascades to function myvarcharsend(myvarchar)
-drop cascades to function myvarcharrecv(internal,oid,integer)
-drop cascades to type myvarchardom
+ERROR:  unimplemented: DROP TYPE CASCADE is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/51480/_version_
