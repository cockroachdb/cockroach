diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/rangefuncs.out --label=/mnt/data1/postgres/src/test/regress/results/rangefuncs.out /mnt/data1/postgres/src/test/regress/expected/rangefuncs.out /mnt/data1/postgres/src/test/regress/results/rangefuncs.out
--- /mnt/data1/postgres/src/test/regress/expected/rangefuncs.out
+++ /mnt/data1/postgres/src/test/regress/results/rangefuncs.out
@@ -52,34 +52,27 @@
 (1 row)
 
 select row_to_json(s.*) from generate_series(11,14) with ordinality s;
-       row_to_json       
--------------------------
- {"s":11,"ordinality":1}
- {"s":12,"ordinality":2}
- {"s":13,"ordinality":3}
- {"s":14,"ordinality":4}
+        row_to_json         
+----------------------------
+ {"ordinality": 1, "s": 11}
+ {"ordinality": 2, "s": 12}
+ {"ordinality": 3, "s": 13}
+ {"ordinality": 4, "s": 14}
 (4 rows)
 
 -- ordinality vs. views
 create temporary view vw_ord as select * from (values (1)) v(n) join rngfunct(1) with ordinality as z(a,b,ord) on (n=ord);
+ERROR:  unknown function: rngfunct()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 select * from vw_ord;
- n | a | b  | ord 
----+---+----+-----
- 1 | 1 | 11 |   1
-(1 row)
-
+ERROR:  relation "vw_ord" does not exist
 select definition from pg_views where viewname='vw_ord';
-                               definition                                
--------------------------------------------------------------------------
-  SELECT v.n,                                                           +
-     z.a,                                                               +
-     z.b,                                                               +
-     z.ord                                                              +
-    FROM (( VALUES (1)) v(n)                                            +
-      JOIN rngfunct(1) WITH ORDINALITY z(a, b, ord) ON ((v.n = z.ord)));
-(1 row)
+ definition 
+------------
+(0 rows)
 
 drop view vw_ord;
+ERROR:  relation "vw_ord" does not exist
 -- multiple functions
 select * from rows from(rngfunct(1),rngfunct(2)) with ordinality as z(a,b,c,d,ord);
  a |  b  | c | d  | ord 
@@ -89,26 +82,17 @@
 (2 rows)
 
 create temporary view vw_ord as select * from (values (1)) v(n) join rows from(rngfunct(1),rngfunct(2)) with ordinality as z(a,b,c,d,ord) on (n=ord);
+ERROR:  unknown function: rngfunct()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 select * from vw_ord;
- n | a | b  | c | d  | ord 
----+---+----+---+----+-----
- 1 | 1 | 11 | 2 | 22 |   1
-(1 row)
-
+ERROR:  relation "vw_ord" does not exist
 select definition from pg_views where viewname='vw_ord';
-                                              definition                                               
--------------------------------------------------------------------------------------------------------
-  SELECT v.n,                                                                                         +
-     z.a,                                                                                             +
-     z.b,                                                                                             +
-     z.c,                                                                                             +
-     z.d,                                                                                             +
-     z.ord                                                                                            +
-    FROM (( VALUES (1)) v(n)                                                                          +
-      JOIN ROWS FROM(rngfunct(1), rngfunct(2)) WITH ORDINALITY z(a, b, c, d, ord) ON ((v.n = z.ord)));
-(1 row)
+ definition 
+------------
+(0 rows)
 
 drop view vw_ord;
+ERROR:  relation "vw_ord" does not exist
 -- expansions of unnest()
 select * from unnest(array[10,20],array['foo','bar'],array[1.0]);
  unnest | unnest | unnest 
@@ -147,12 +131,9 @@
 (2 rows)
 
 select definition from pg_views where viewname='vw_ord';
-                                       definition                                       
-----------------------------------------------------------------------------------------
-  SELECT a,                                                                            +
-     b,                                                                                +
-     c                                                                                 +
-    FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);
+                                                                                      definition                                                                                       
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+ SELECT z.a, z.b, z.c FROM ROWS FROM (unnest(ARRAY[10:::INT8, 20:::INT8]:::INT8[], ARRAY['foo':::STRING, 'bar':::STRING]:::STRING[], ARRAY[1.0:::DECIMAL]:::DECIMAL[])) AS z (a, b, c)
 (1 row)
 
 drop view vw_ord;
@@ -165,12 +146,9 @@
 (2 rows)
 
 select definition from pg_views where viewname='vw_ord';
-                                       definition                                       
-----------------------------------------------------------------------------------------
-  SELECT a,                                                                            +
-     b,                                                                                +
-     c                                                                                 +
-    FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);
+                                                                                      definition                                                                                       
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+ SELECT z.a, z.b, z.c FROM ROWS FROM (unnest(ARRAY[10:::INT8, 20:::INT8]:::INT8[], ARRAY['foo':::STRING, 'bar':::STRING]:::STRING[], ARRAY[1.0:::DECIMAL]:::DECIMAL[])) AS z (a, b, c)
 (1 row)
 
 drop view vw_ord;
@@ -183,106 +161,44 @@
 (2 rows)
 
 select definition from pg_views where viewname='vw_ord';
-                                                      definition                                                      
-----------------------------------------------------------------------------------------------------------------------
-  SELECT a,                                                                                                          +
-     b,                                                                                                              +
-     c                                                                                                               +
-    FROM ROWS FROM(unnest(ARRAY[10, 20]), unnest(ARRAY['foo'::text, 'bar'::text]), generate_series(1, 2)) z(a, b, c);
+                                                                                        definition                                                                                        
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
+ SELECT z.a, z.b, z.c FROM ROWS FROM (unnest(ARRAY[10:::INT8, 20:::INT8]:::INT8[], ARRAY['foo':::STRING, 'bar':::STRING]:::STRING[]), generate_series(1:::INT8, 2:::INT8)) AS z (a, b, c)
 (1 row)
 
 drop view vw_ord;
 -- ordinality and multiple functions vs. rewind and reverse scan
 begin;
 declare rf_cur scroll cursor for select * from rows from(generate_series(1,5),generate_series(1,2)) with ordinality as g(i,j,o);
+ERROR:  unimplemented: DECLARE SCROLL CURSOR
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/77102/_version_
 fetch all from rf_cur;
- i | j | o 
----+---+---
- 1 | 1 | 1
- 2 | 2 | 2
- 3 |   | 3
- 4 |   | 4
- 5 |   | 5
-(5 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch backward all from rf_cur;
- i | j | o 
----+---+---
- 5 |   | 5
- 4 |   | 4
- 3 |   | 3
- 2 | 2 | 2
- 1 | 1 | 1
-(5 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch all from rf_cur;
- i | j | o 
----+---+---
- 1 | 1 | 1
- 2 | 2 | 2
- 3 |   | 3
- 4 |   | 4
- 5 |   | 5
-(5 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch next from rf_cur;
- i | j | o 
----+---+---
-(0 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch next from rf_cur;
- i | j | o 
----+---+---
-(0 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch prior from rf_cur;
- i | j | o 
----+---+---
- 5 |   | 5
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch absolute 1 from rf_cur;
- i | j | o 
----+---+---
- 1 | 1 | 1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch next from rf_cur;
- i | j | o 
----+---+---
- 2 | 2 | 2
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch next from rf_cur;
- i | j | o 
----+---+---
- 3 |   | 3
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch next from rf_cur;
- i | j | o 
----+---+---
- 4 |   | 4
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch prior from rf_cur;
- i | j | o 
----+---+---
- 3 |   | 3
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch prior from rf_cur;
- i | j | o 
----+---+---
- 2 | 2 | 2
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch prior from rf_cur;
- i | j | o 
----+---+---
- 1 | 1 | 1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- function with implicit LATERAL
 select * from rngfunc2, rngfunct(rngfunc2.rngfuncid) z where rngfunc2.f2 = z.f2;
@@ -329,12 +245,7 @@
 
 -- nested functions
 select rngfunct.rngfuncid, rngfunct.f2 from rngfunct(sin(pi()/2)::int) ORDER BY 1,2;
- rngfuncid | f2  
------------+-----
-         1 |  11
-         1 | 111
-(2 rows)
-
+ERROR:  no data source matches prefix: rngfunct in this context
 CREATE TABLE rngfunc (rngfuncid int, rngfuncsubid int, rngfuncname text, primary key(rngfuncid,rngfuncsubid));
 INSERT INTO rngfunc VALUES(1,1,'Joe');
 INSERT INTO rngfunc VALUES(1,2,'Ed');
@@ -354,21 +265,19 @@
 (1 row)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1);
+ERROR:  unknown function: getrngfunc1()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- getrngfunc1 
--------------
-           1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1) WITH ORDINALITY as t1(v,o);
+ERROR:  unknown function: getrngfunc1()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- v | o 
----+---
- 1 | 1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = t, prorettype = b
 CREATE FUNCTION getrngfunc2(int) RETURNS setof int AS 'SELECT rngfuncid FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc2(1) AS t1;
@@ -386,23 +295,19 @@
 (2 rows)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1);
+ERROR:  unknown function: getrngfunc2()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- getrngfunc2 
--------------
-           1
-           1
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1) WITH ORDINALITY AS t1(v,o);
+ERROR:  unknown function: getrngfunc2()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- v | o 
----+---
- 1 | 1
- 1 | 2
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = t, prorettype = b
 CREATE FUNCTION getrngfunc3(int) RETURNS setof text AS 'SELECT rngfuncname FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc3(1) AS t1;
@@ -420,23 +325,19 @@
 (2 rows)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1);
+ERROR:  unknown function: getrngfunc3()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- getrngfunc3 
--------------
- Joe
- Ed
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1) WITH ORDINALITY AS t1(v,o);
+ERROR:  unknown function: getrngfunc3()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
-  v  | o 
------+---
- Joe | 1
- Ed  | 2
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = f, prorettype = c
 CREATE FUNCTION getrngfunc4(int) RETURNS rngfunc AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc4(1) AS t1;
@@ -452,21 +353,19 @@
 (1 row)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1);
+ERROR:  unknown function: getrngfunc4()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1) WITH ORDINALITY AS t1(a,b,c,o);
+ERROR:  unknown function: getrngfunc4()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- a | b |  c  | o 
----+---+-----+---
- 1 | 1 | Joe | 1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = t, prorettype = c
 CREATE FUNCTION getrngfunc5(int) RETURNS setof rngfunc AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc5(1) AS t1;
@@ -484,23 +383,19 @@
 (2 rows)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1);
+ERROR:  unknown function: getrngfunc5()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-         1 |            2 | Ed
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1) WITH ORDINALITY AS t1(a,b,c,o);
+ERROR:  unknown function: getrngfunc5()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- a | b |  c  | o 
----+---+-----+---
- 1 | 1 | Joe | 1
- 1 | 2 | Ed  | 2
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = f, prorettype = record
 CREATE FUNCTION getrngfunc6(int) RETURNS RECORD AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc6(1) AS t1(rngfuncid int, rngfuncsubid int, rngfuncname text);
@@ -510,30 +405,36 @@
 (1 row)
 
 SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY;
- rngfuncid | rngfuncsubid | rngfuncname | ordinality 
------------+--------------+-------------+------------
-         1 |            1 | Joe         |          1
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY
+                                           ^
+HINT:  try \h <SOURCE>
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc6(1) AS
 (rngfuncid int, rngfuncsubid int, rngfuncname text);
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc6(1) AS
+(rngfuncid int, rngfuncsubid int, rngfuncname text)
+^
+HINT:  try \h <SOURCE>
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS
   SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
                 WITH ORDINALITY;
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE VIEW vw_getrngfunc AS
+  SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
+                                             ^
+HINT:  try \h <SOURCE>
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname | ordinality 
------------+--------------+-------------+------------
-         1 |            1 | Joe         |          1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- sql, proretset = t, prorettype = record
 CREATE FUNCTION getrngfunc7(int) RETURNS setof record AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;' LANGUAGE SQL;
 SELECT * FROM getrngfunc7(1) AS t1(rngfuncid int, rngfuncsubid int, rngfuncname text);
@@ -544,143 +445,126 @@
 (2 rows)
 
 SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY;
- rngfuncid | rngfuncsubid | rngfuncname | ordinality 
------------+--------------+-------------+------------
-         1 |            1 | Joe         |          1
-         1 |            2 | Ed          |          2
-(2 rows)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY
+                                           ^
+HINT:  try \h <SOURCE>
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc7(1) AS
 (rngfuncid int, rngfuncsubid int, rngfuncname text);
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc7(1) AS
+(rngfuncid int, rngfuncsubid int, rngfuncname text)
+^
+HINT:  try \h <SOURCE>
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-         1 |            2 | Ed
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS
   SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
                 WITH ORDINALITY;
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+CREATE VIEW vw_getrngfunc AS
+  SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
+                                             ^
+HINT:  try \h <SOURCE>
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname | ordinality 
------------+--------------+-------------+------------
-         1 |            1 | Joe         |          1
-         1 |            2 | Ed          |          2
-(2 rows)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- plpgsql, proretset = f, prorettype = b
 CREATE FUNCTION getrngfunc8(int) RETURNS int AS 'DECLARE rngfuncint int; BEGIN SELECT rngfuncid into rngfuncint FROM rngfunc WHERE rngfuncid = $1; RETURN rngfuncint; END;' LANGUAGE plpgsql;
 SELECT * FROM getrngfunc8(1) AS t1;
  t1 
 ----
-  1
+   
 (1 row)
 
 SELECT * FROM getrngfunc8(1) WITH ORDINALITY AS t1(v,o);
  v | o 
 ---+---
- 1 | 1
+   | 1
 (1 row)
 
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1);
+ERROR:  unknown function: getrngfunc8()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- getrngfunc8 
--------------
-           1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1) WITH ORDINALITY AS t1(v,o);
+ERROR:  unknown function: getrngfunc8()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- v | o 
----+---
- 1 | 1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- plpgsql, proretset = f, prorettype = c
-CREATE FUNCTION getrngfunc9(int) RETURNS rngfunc AS 'DECLARE rngfunctup rngfunc%ROWTYPE; BEGIN SELECT * into rngfunctup FROM rngfunc WHERE rngfuncid = $1; RETURN rngfunctup; END;' LANGUAGE plpgsql;
+-- CREATE FUNCTION getrngfunc9(int) RETURNS rngfunc AS 'DECLARE rngfunctup rngfunc%ROWTYPE; BEGIN SELECT * into rngfunctup FROM rngfunc WHERE rngfuncid = $1; RETURN rngfunctup; END;' LANGUAGE plpgsql;
 SELECT * FROM getrngfunc9(1) AS t1;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-(1 row)
-
+ERROR:  unknown function: getrngfunc9()
 SELECT * FROM getrngfunc9(1) WITH ORDINALITY AS t1(a,b,c,o);
- a | b |  c  | o 
----+---+-----+---
- 1 | 1 | Joe | 1
-(1 row)
-
+ERROR:  unknown function: getrngfunc9()
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1);
+ERROR:  unknown function: getrngfunc9()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- rngfuncid | rngfuncsubid | rngfuncname 
------------+--------------+-------------
-         1 |            1 | Joe
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1) WITH ORDINALITY AS t1(a,b,c,o);
+ERROR:  unknown function: getrngfunc9()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 SELECT * FROM vw_getrngfunc;
- a | b |  c  | o 
----+---+-----+---
- 1 | 1 | Joe | 1
-(1 row)
-
+ERROR:  relation "vw_getrngfunc" does not exist
 DROP VIEW vw_getrngfunc;
+ERROR:  relation "vw_getrngfunc" does not exist
 -- mix 'n match kinds, to exercise expandRTE and related logic
 select * from rows from(getrngfunc1(1),getrngfunc2(1),getrngfunc3(1),getrngfunc4(1),getrngfunc5(1),
                     getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                     getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                     getrngfunc8(1),getrngfunc9(1))
               with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);
- a | b |  c  | d | e |  f  | g | h |  i  | j | k |  l  | m | o |  p  | q | r | s |  t  | u 
----+---+-----+---+---+-----+---+---+-----+---+---+-----+---+---+-----+---+---+---+-----+---
- 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | 1 | Joe | 1
-   | 1 | Ed  |   |   |     | 1 | 2 | Ed  |   |   |     | 1 | 2 | Ed  |   |   |   |     | 2
-(2 rows)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select * from rows from(getrngfunc1(1),getrngfunc2(1),getrngfunc3(1),getrngfunc4(1),getrngfunc5(1),
+                    getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
+                                      ^
+HINT:  try \h <SOURCE>
 select * from rows from(getrngfunc9(1),getrngfunc8(1),
                     getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                     getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                     getrngfunc5(1),getrngfunc4(1),getrngfunc3(1),getrngfunc2(1),getrngfunc1(1))
               with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);
- a | b |  c  | d | e | f |  g  | h | i |  j  | k | l |  m  | o | p |  q  |  r  | s | t | u 
----+---+-----+---+---+---+-----+---+---+-----+---+---+-----+---+---+-----+-----+---+---+---
- 1 | 1 | Joe | 1 | 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1 | Joe | Joe | 1 | 1 | 1
-   |   |     |   | 1 | 2 | Ed  |   |   |     | 1 | 2 | Ed  |   |   |     | Ed  | 1 |   | 2
-(2 rows)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select * from rows from(getrngfunc9(1),getrngfunc8(1),
+                    getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
+                                      ^
+HINT:  try \h <SOURCE>
 create temporary view vw_rngfunc as
   select * from rows from(getrngfunc9(1),
                       getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                       getrngfunc1(1))
                 with ordinality as t1(a,b,c,d,e,f,g,n);
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+create temporary view vw_rngfunc as
+  select * from rows from(getrngfunc9(1),
+                      getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
+                                        ^
+HINT:  try \h <SOURCE>
 select * from vw_rngfunc;
- a | b |  c  | d | e |  f  | g | n 
----+---+-----+---+---+-----+---+---
- 1 | 1 | Joe | 1 | 1 | Joe | 1 | 1
-   |   |     | 1 | 2 | Ed  |   | 2
-(2 rows)
-
+ERROR:  relation "vw_rngfunc" does not exist
 select pg_get_viewdef('vw_rngfunc');
-                                                                                pg_get_viewdef                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-  SELECT a,                                                                                                                                                                  +
-     b,                                                                                                                                                                      +
-     c,                                                                                                                                                                      +
-     d,                                                                                                                                                                      +
-     e,                                                                                                                                                                      +
-     f,                                                                                                                                                                      +
-     g,                                                                                                                                                                      +
-     n                                                                                                                                                                       +
-    FROM ROWS FROM(getrngfunc9(1), getrngfunc7(1) AS (rngfuncid integer, rngfuncsubid integer, rngfuncname text), getrngfunc1(1)) WITH ORDINALITY t1(a, b, c, d, e, f, g, n);
-(1 row)
-
+ERROR:  unknown signature: pg_get_viewdef(string)
+HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 drop view vw_rngfunc;
+ERROR:  relation "vw_rngfunc" does not exist
 DROP FUNCTION getrngfunc1(int);
 DROP FUNCTION getrngfunc2(int);
 DROP FUNCTION getrngfunc3(int);
@@ -690,6 +574,7 @@
 DROP FUNCTION getrngfunc7(int);
 DROP FUNCTION getrngfunc8(int);
 DROP FUNCTION getrngfunc9(int);
+ERROR:  unknown function: getrngfunc9()
 DROP FUNCTION rngfunct(int);
 DROP TABLE rngfunc2;
 DROP TABLE rngfunc;
@@ -698,8 +583,12 @@
 CREATE TEMPORARY SEQUENCE rngfunc_rescan_seq2;
 CREATE TYPE rngfunc_rescan_t AS (i integer, s bigint);
 CREATE FUNCTION rngfunc_sql(int,int) RETURNS setof rngfunc_rescan_t AS 'SELECT i, nextval(''rngfunc_rescan_seq1'') FROM generate_series($1,$2) i;' LANGUAGE SQL;
+ERROR:  cannot create function using temp tables
 -- plpgsql functions use materialize mode
 CREATE FUNCTION rngfunc_mat(int,int) RETURNS setof rngfunc_rescan_t AS 'begin for i in $1..$2 loop return next (i, nextval(''rngfunc_rescan_seq2'')); end loop; end;' LANGUAGE plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 --invokes ExecReScanFunctionScan - all these cases should materialize the function only once
 -- LEFT JOIN on a condition that the planner can't prove to be true is used to ensure the function
 -- is on the inner path of a nestloop join
@@ -710,19 +599,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sql(11,13) ON (r+i)<100;
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 1 | 12 | 2
- 1 | 13 | 3
- 2 | 11 | 1
- 2 | 12 | 2
- 2 | 13 | 3
- 3 | 11 | 1
- 3 | 12 | 2
- 3 | 13 | 3
-(9 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -730,19 +607,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sql(11,13) WITH ORDINALITY AS f(i,s,o) ON (r+i)<100;
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 1 | 12 | 2 | 2
- 1 | 13 | 3 | 3
- 2 | 11 | 1 | 1
- 2 | 12 | 2 | 2
- 2 | 13 | 3 | 3
- 3 | 11 | 1 | 1
- 3 | 12 | 2 | 2
- 3 | 13 | 3 | 3
-(9 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -750,19 +615,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_mat(11,13) ON (r+i)<100;
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 1 | 12 | 2
- 1 | 13 | 3
- 2 | 11 | 1
- 2 | 12 | 2
- 2 | 13 | 3
- 3 | 11 | 1
- 3 | 12 | 2
- 3 | 13 | 3
-(9 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -770,19 +623,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_mat(11,13) WITH ORDINALITY AS f(i,s,o) ON (r+i)<100;
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 1 | 12 | 2 | 2
- 1 | 13 | 3 | 3
- 2 | 11 | 1 | 1
- 2 | 12 | 2 | 2
- 2 | 13 | 3 | 3
- 3 | 11 | 1 | 1
- 3 | 12 | 2 | 2
- 3 | 13 | 3 | 3
-(9 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -790,30 +631,18 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN ROWS FROM( rngfunc_sql(11,13), rngfunc_mat(11,13) ) WITH ORDINALITY AS f(i1,s1,i2,s2,o) ON (r+i1+i2)<100;
- r | i1 | s1 | i2 | s2 | o 
----+----+----+----+----+---
- 1 | 11 |  1 | 11 |  1 | 1
- 1 | 12 |  2 | 12 |  2 | 2
- 1 | 13 |  3 | 13 |  3 | 3
- 2 | 11 |  1 | 11 |  1 | 1
- 2 | 12 |  2 | 12 |  2 | 2
- 2 | 13 |  3 | 13 |  3 | 3
- 3 | 11 |  1 | 11 |  1 | 1
- 3 | 12 |  2 | 12 |  2 | 2
- 3 | 13 |  3 | 13 |  3 | 3
-(9 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) f(i) ON (r+i)<100;
  r | i  
 ---+----
  1 | 11
- 1 | 12
- 1 | 13
  2 | 11
- 2 | 12
- 2 | 13
  3 | 11
+ 1 | 12
+ 2 | 12
  3 | 12
+ 1 | 13
+ 2 | 13
  3 | 13
 (9 rows)
 
@@ -821,13 +650,13 @@
  r | i  | o 
 ---+----+---
  1 | 11 | 1
- 1 | 12 | 2
- 1 | 13 | 3
  2 | 11 | 1
- 2 | 12 | 2
- 2 | 13 | 3
  3 | 11 | 1
+ 1 | 12 | 2
+ 2 | 12 | 2
  3 | 12 | 2
+ 1 | 13 | 3
+ 2 | 13 | 3
  3 | 13 | 3
 (9 rows)
 
@@ -867,16 +696,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13);
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 1 | 12 | 2
- 1 | 13 | 3
- 2 | 12 | 4
- 2 | 13 | 5
- 3 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -884,16 +704,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13) WITH ORDINALITY AS f(i,s,o);
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 1 | 12 | 2 | 2
- 1 | 13 | 3 | 3
- 2 | 12 | 4 | 1
- 2 | 13 | 5 | 2
- 3 | 13 | 6 | 1
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -901,16 +712,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r);
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 2 | 11 | 2
- 2 | 12 | 3
- 3 | 11 | 4
- 3 | 12 | 5
- 3 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -918,16 +720,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r) WITH ORDINALITY AS f(i,s,o);
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 2 | 11 | 2 | 1
- 2 | 12 | 3 | 2
- 3 | 11 | 4 | 1
- 3 | 12 | 5 | 2
- 3 | 13 | 6 | 3
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -935,20 +728,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sql(r1,r2);
- r1 | r2 | i  | s  
-----+----+----+----
- 11 | 12 | 11 |  1
- 11 | 12 | 12 |  2
- 13 | 15 | 13 |  3
- 13 | 15 | 14 |  4
- 13 | 15 | 15 |  5
- 16 | 20 | 16 |  6
- 16 | 20 | 17 |  7
- 16 | 20 | 18 |  8
- 16 | 20 | 19 |  9
- 16 | 20 | 20 | 10
-(10 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -956,20 +736,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sql(r1,r2) WITH ORDINALITY AS f(i,s,o);
- r1 | r2 | i  | s  | o 
-----+----+----+----+---
- 11 | 12 | 11 |  1 | 1
- 11 | 12 | 12 |  2 | 2
- 13 | 15 | 13 |  3 | 1
- 13 | 15 | 14 |  4 | 2
- 13 | 15 | 15 |  5 | 3
- 16 | 20 | 16 |  6 | 1
- 16 | 20 | 17 |  7 | 2
- 16 | 20 | 18 |  8 | 3
- 16 | 20 | 19 |  9 | 4
- 16 | 20 | 20 | 10 | 5
-(10 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -977,16 +744,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13);
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 1 | 12 | 2
- 1 | 13 | 3
- 2 | 12 | 4
- 2 | 13 | 5
- 3 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -994,16 +752,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13) WITH ORDINALITY AS f(i,s,o);
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 1 | 12 | 2 | 2
- 1 | 13 | 3 | 3
- 2 | 12 | 4 | 1
- 2 | 13 | 5 | 2
- 3 | 13 | 6 | 1
-(6 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1011,16 +760,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r);
- r | i  | s 
----+----+---
- 1 | 11 | 1
- 2 | 11 | 2
- 2 | 12 | 3
- 3 | 11 | 4
- 3 | 12 | 5
- 3 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1028,16 +768,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r) WITH ORDINALITY AS f(i,s,o);
- r | i  | s | o 
----+----+---+---
- 1 | 11 | 1 | 1
- 2 | 11 | 2 | 1
- 2 | 12 | 3 | 2
- 3 | 11 | 4 | 1
- 3 | 12 | 5 | 2
- 3 | 13 | 6 | 3
-(6 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1045,20 +776,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_mat(r1,r2);
- r1 | r2 | i  | s  
-----+----+----+----
- 11 | 12 | 11 |  1
- 11 | 12 | 12 |  2
- 13 | 15 | 13 |  3
- 13 | 15 | 14 |  4
- 13 | 15 | 15 |  5
- 16 | 20 | 16 |  6
- 16 | 20 | 17 |  7
- 16 | 20 | 18 |  8
- 16 | 20 | 19 |  9
- 16 | 20 | 20 | 10
-(10 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1066,20 +784,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_mat(r1,r2) WITH ORDINALITY AS f(i,s,o);
- r1 | r2 | i  | s  | o 
-----+----+----+----+---
- 11 | 12 | 11 |  1 | 1
- 11 | 12 | 12 |  2 | 2
- 13 | 15 | 13 |  3 | 1
- 13 | 15 | 14 |  4 | 2
- 13 | 15 | 15 |  5 | 3
- 16 | 20 | 16 |  6 | 1
- 16 | 20 | 17 |  7 | 2
- 16 | 20 | 18 |  8 | 3
- 16 | 20 | 19 |  9 | 4
- 16 | 20 | 20 | 10 | 5
-(10 rows)
-
+ERROR:  unknown function: rngfunc_mat()
 -- selective rescan of multiple functions:
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
@@ -1088,16 +793,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(11,11), rngfunc_mat(10+r,13) );
- r | i  | s | i  | s 
----+----+---+----+---
- 1 | 11 | 1 | 11 | 1
- 1 |    |   | 12 | 2
- 1 |    |   | 13 | 3
- 2 | 11 | 1 | 12 | 4
- 2 |    |   | 13 | 5
- 3 | 11 | 1 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1105,16 +801,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(10+r,13), rngfunc_mat(11,11) );
- r | i  | s | i  | s 
----+----+---+----+---
- 1 | 11 | 1 | 11 | 1
- 1 | 12 | 2 |    |  
- 1 | 13 | 3 |    |  
- 2 | 12 | 4 | 11 | 1
- 2 | 13 | 5 |    |  
- 3 | 13 | 6 | 11 | 1
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1122,16 +809,7 @@
 (1 row)
 
 SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(10+r,13), rngfunc_mat(10+r,13) );
- r | i  | s | i  | s 
----+----+---+----+---
- 1 | 11 | 1 | 11 | 1
- 1 | 12 | 2 | 12 | 2
- 1 | 13 | 3 | 13 | 3
- 2 | 12 | 4 | 12 | 4
- 2 | 13 | 5 | 13 | 5
- 3 | 13 | 6 | 13 | 6
-(6 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
  setval | setval 
 --------+--------
@@ -1139,23 +817,7 @@
 (1 row)
 
 SELECT * FROM generate_series(1,2) r1, generate_series(r1,3) r2, ROWS FROM( rngfunc_sql(10+r1,13), rngfunc_mat(10+r2,13) );
- r1 | r2 | i  | s  | i  | s 
-----+----+----+----+----+---
-  1 |  1 | 11 |  1 | 11 | 1
-  1 |  1 | 12 |  2 | 12 | 2
-  1 |  1 | 13 |  3 | 13 | 3
-  1 |  2 | 11 |  4 | 12 | 4
-  1 |  2 | 12 |  5 | 13 | 5
-  1 |  2 | 13 |  6 |    |  
-  1 |  3 | 11 |  7 | 13 | 6
-  1 |  3 | 12 |  8 |    |  
-  1 |  3 | 13 |  9 |    |  
-  2 |  2 | 12 | 10 | 12 | 7
-  2 |  2 | 13 | 11 | 13 | 8
-  2 |  3 | 12 | 12 | 13 | 9
-  2 |  3 | 13 | 13 |    |  
-(13 rows)
-
+ERROR:  unknown function: rngfunc_sql()
 SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) f(i);
  r | i  
 ---+----
@@ -1243,31 +905,31 @@
  r1 | r1 | r2 | i  
 ----+----+----+----
   1 |  1 | 10 | 21
-  1 |  1 | 10 | 22
-  1 |  1 | 10 | 23
+  2 |  2 | 10 | 21
+  3 |  3 | 10 | 21
   1 |  1 | 20 | 21
-  1 |  1 | 20 | 22
-  1 |  1 | 20 | 23
+  2 |  2 | 20 | 21
+  3 |  3 | 20 | 21
   1 |  1 | 30 | 21
-  1 |  1 | 30 | 22
-  1 |  1 | 30 | 23
-  2 |  2 | 10 | 21
+  2 |  2 | 30 | 21
+  3 |  3 | 30 | 21
+  1 |  1 | 10 | 22
   2 |  2 | 10 | 22
-  2 |  2 | 10 | 23
-  2 |  2 | 20 | 21
+  3 |  3 | 10 | 22
+  1 |  1 | 20 | 22
   2 |  2 | 20 | 22
-  2 |  2 | 20 | 23
-  2 |  2 | 30 | 21
+  3 |  3 | 20 | 22
+  1 |  1 | 30 | 22
   2 |  2 | 30 | 22
-  2 |  2 | 30 | 23
-  3 |  3 | 10 | 21
-  3 |  3 | 10 | 22
+  3 |  3 | 30 | 22
+  1 |  1 | 10 | 23
+  2 |  2 | 10 | 23
   3 |  3 | 10 | 23
-  3 |  3 | 20 | 21
-  3 |  3 | 20 | 22
+  1 |  1 | 20 | 23
+  2 |  2 | 20 | 23
   3 |  3 | 20 | 23
-  3 |  3 | 30 | 21
-  3 |  3 | 30 | 22
+  1 |  1 | 30 | 23
+  2 |  2 | 30 | 23
   3 |  3 | 30 | 23
 (27 rows)
 
@@ -1302,95 +964,47 @@
  r1 | r1 | r2 | i  
 ----+----+----+----
   1 |  1 | 10 | 10
-  1 |  1 | 10 | 11
-  1 |  1 | 10 | 12
-  1 |  1 | 10 | 13
-  1 |  1 | 20 | 20
-  1 |  1 | 20 | 21
-  1 |  1 | 20 | 22
-  1 |  1 | 20 | 23
-  1 |  1 | 30 | 30
-  1 |  1 | 30 | 31
-  1 |  1 | 30 | 32
-  1 |  1 | 30 | 33
   2 |  2 | 10 | 10
-  2 |  2 | 10 | 11
-  2 |  2 | 10 | 12
-  2 |  2 | 10 | 13
-  2 |  2 | 20 | 20
-  2 |  2 | 20 | 21
-  2 |  2 | 20 | 22
-  2 |  2 | 20 | 23
-  2 |  2 | 30 | 30
-  2 |  2 | 30 | 31
-  2 |  2 | 30 | 32
-  2 |  2 | 30 | 33
   3 |  3 | 10 | 10
+  1 |  1 | 10 | 11
+  2 |  2 | 10 | 11
   3 |  3 | 10 | 11
+  1 |  1 | 10 | 12
+  2 |  2 | 10 | 12
   3 |  3 | 10 | 12
+  1 |  1 | 10 | 13
+  2 |  2 | 10 | 13
   3 |  3 | 10 | 13
+  1 |  1 | 20 | 20
+  2 |  2 | 20 | 20
   3 |  3 | 20 | 20
+  1 |  1 | 20 | 21
+  2 |  2 | 20 | 21
   3 |  3 | 20 | 21
+  1 |  1 | 20 | 22
+  2 |  2 | 20 | 22
   3 |  3 | 20 | 22
+  1 |  1 | 20 | 23
+  2 |  2 | 20 | 23
   3 |  3 | 20 | 23
+  1 |  1 | 30 | 30
+  2 |  2 | 30 | 30
   3 |  3 | 30 | 30
+  1 |  1 | 30 | 31
+  2 |  2 | 30 | 31
   3 |  3 | 30 | 31
+  1 |  1 | 30 | 32
+  2 |  2 | 30 | 32
   3 |  3 | 30 | 32
+  1 |  1 | 30 | 33
+  2 |  2 | 30 | 33
   3 |  3 | 30 | 33
 (36 rows)
 
 SELECT * FROM (VALUES (1),(2),(3)) v1(r1),
               LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)
                                          LEFT JOIN generate_series(r1,2+r2/5) f(i) ON ((r2+i)<100) OFFSET 0) s1;
- r1 | r1 | r2 | i 
-----+----+----+---
-  1 |  1 | 10 | 1
-  1 |  1 | 10 | 2
-  1 |  1 | 10 | 3
-  1 |  1 | 10 | 4
-  1 |  1 | 20 | 1
-  1 |  1 | 20 | 2
-  1 |  1 | 20 | 3
-  1 |  1 | 20 | 4
-  1 |  1 | 20 | 5
-  1 |  1 | 20 | 6
-  1 |  1 | 30 | 1
-  1 |  1 | 30 | 2
-  1 |  1 | 30 | 3
-  1 |  1 | 30 | 4
-  1 |  1 | 30 | 5
-  1 |  1 | 30 | 6
-  1 |  1 | 30 | 7
-  1 |  1 | 30 | 8
-  2 |  2 | 10 | 2
-  2 |  2 | 10 | 3
-  2 |  2 | 10 | 4
-  2 |  2 | 20 | 2
-  2 |  2 | 20 | 3
-  2 |  2 | 20 | 4
-  2 |  2 | 20 | 5
-  2 |  2 | 20 | 6
-  2 |  2 | 30 | 2
-  2 |  2 | 30 | 3
-  2 |  2 | 30 | 4
-  2 |  2 | 30 | 5
-  2 |  2 | 30 | 6
-  2 |  2 | 30 | 7
-  2 |  2 | 30 | 8
-  3 |  3 | 10 | 3
-  3 |  3 | 10 | 4
-  3 |  3 | 20 | 3
-  3 |  3 | 20 | 4
-  3 |  3 | 20 | 5
-  3 |  3 | 20 | 6
-  3 |  3 | 30 | 3
-  3 |  3 | 30 | 4
-  3 |  3 | 30 | 5
-  3 |  3 | 30 | 6
-  3 |  3 | 30 | 7
-  3 |  3 | 30 | 8
-(45 rows)
-
+ERROR:  generate_series(): unsupported binary operator: <int> + <decimal> (returning <int>)
 -- check handling of FULL JOIN with multiple lateral references (bug #15741)
 SELECT *
 FROM (VALUES (1),(2)) v1(r1)
@@ -1404,20 +1018,11 @@
         ) AS ss1 ON TRUE
         FULL JOIN generate_series(1, v1.r1) AS gs4 ON FALSE
     ) AS ss0 ON TRUE;
- r1 | gs1 | gs2 | gs3 | gs4 
-----+-----+-----+-----+-----
-  1 |     |     |     |   1
-  1 |   1 |   1 |   1 |    
-  2 |     |     |     |   1
-  2 |     |     |     |   2
-  2 |   1 |   1 |   1 |    
-  2 |   2 |   1 |   1 |    
-  2 |   2 |   2 |   1 |    
-  2 |   2 |   2 |   2 |    
-(8 rows)
-
+ERROR:  The combining JOIN type must be INNER or LEFT for a LATERAL reference
 DROP FUNCTION rngfunc_sql(int,int);
+ERROR:  unknown function: rngfunc_sql()
 DROP FUNCTION rngfunc_mat(int,int);
+ERROR:  unknown function: rngfunc_mat()
 DROP SEQUENCE rngfunc_rescan_seq1;
 DROP SEQUENCE rngfunc_rescan_seq2;
 --
@@ -1449,7 +1054,7 @@
 -- error, wrong result type
 CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int) RETURNS float
 AS 'select $1+1' LANGUAGE sql;
-ERROR:  function result type must be integer because of OUT parameters
+ERROR:  function result type must be int because of OUT parameters
 -- with multiple OUT params you must get a RECORD result
 CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int, out f3 text) RETURNS int
 AS 'select $1+1' LANGUAGE sql;
@@ -1457,8 +1062,8 @@
 CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int, out f3 text)
 RETURNS record
 AS 'select $1+1' LANGUAGE sql;
-ERROR:  cannot change return type of existing function
-HINT:  Use DROP FUNCTION rngfunc(integer) first.
+ERROR:  return type mismatch in function declared to return record
+DETAIL:  Actual return type is int
 CREATE OR REPLACE FUNCTION rngfuncr(in f1 int, out f2 int, out text)
 AS $$select $1-1, $1::text || 'z'$$ LANGUAGE sql;
 SELECT f1, rngfuncr(f1) FROM int4_tbl;
@@ -1486,15 +1091,7 @@
 CREATE OR REPLACE FUNCTION rngfuncb(in f1 int, inout f2 int, out text)
 AS $$select $2-1, $1::text || 'z'$$ LANGUAGE sql;
 SELECT f1, rngfuncb(f1, f1/2) FROM int4_tbl;
-     f1      |          rngfuncb          
--------------+----------------------------
-           0 | (-1,0z)
-      123456 | (61727,123456z)
-     -123456 | (-61729,-123456z)
-  2147483647 | (1073741822,2147483647z)
- -2147483647 | (-1073741824,-2147483647z)
-(5 rows)
-
+ERROR:  rngfuncb(): unsupported binary operator: <int4> / <int> (returning <int>)
 SELECT * FROM rngfuncb(42, 99);
  f2 | column2 
 ----+---------
@@ -1523,7 +1120,11 @@
 (1 row)
 
 SELECT dup('xyz');	-- fails
-ERROR:  could not determine polymorphic type because input has type unknown
+        dup        
+-------------------
+ (xyz,"{xyz,xyz}")
+(1 row)
+
 SELECT dup('xyz'::text);
         dup        
 -------------------
@@ -1540,7 +1141,6 @@
 CREATE OR REPLACE FUNCTION dup (inout f2 anyelement, out f3 anyarray)
 AS 'select $1, array[$1,$1]' LANGUAGE sql;
 ERROR:  cannot change name of input parameter "f1"
-HINT:  Use DROP FUNCTION dup(anyelement) first.
 DROP FUNCTION dup(anyelement);
 -- equivalent behavior, though different name exposed for input arg
 CREATE OR REPLACE FUNCTION dup (inout f2 anyelement, out f3 anyarray)
@@ -1559,57 +1159,32 @@
 DETAIL:  A result of type anyelement requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.
 CREATE FUNCTION dup (f1 anycompatible, f2 anycompatiblearray, f3 out anycompatible, f4 out anycompatiblearray)
 AS 'select $1, $2' LANGUAGE sql;
+ERROR:  type "anycompatible" does not exist
 SELECT dup(22, array[44]);
-    dup    
------------
- (22,{44})
-(1 row)
-
+ERROR:  unknown function: dup()
 SELECT dup(4.5, array[44]);
-    dup     
-------------
- (4.5,{44})
-(1 row)
-
+ERROR:  unknown function: dup()
 SELECT dup(22, array[44::bigint]);
-    dup    
------------
- (22,{44})
-(1 row)
-
+ERROR:  unknown function: dup()
 SELECT *, pg_typeof(f3), pg_typeof(f4) FROM dup(22, array[44::bigint]);
- f3 |  f4  | pg_typeof | pg_typeof 
-----+------+-----------+-----------
- 22 | {44} | bigint    | bigint[]
-(1 row)
-
+ERROR:  unknown function: dup()
 DROP FUNCTION dup(f1 anycompatible, f2 anycompatiblearray);
+ERROR:  unknown function: dup()
 CREATE FUNCTION dup (f1 anycompatiblerange, f2 out anycompatible, f3 out anycompatiblearray, f4 out anycompatiblerange)
 AS 'select lower($1), array[lower($1), upper($1)], $1' LANGUAGE sql;
+ERROR:  type "anycompatiblerange" does not exist
 SELECT dup(int4range(4,7));
-         dup         
----------------------
- (4,"{4,7}","[4,7)")
-(1 row)
-
+ERROR:  unknown function: dup()
 SELECT dup(numrange(4,7));
-         dup         
----------------------
- (4,"{4,7}","[4,7)")
-(1 row)
-
+ERROR:  unknown function: dup()
 SELECT dup(textrange('aaa', 'bbb'));
-              dup              
--------------------------------
- (aaa,"{aaa,bbb}","[aaa,bbb)")
-(1 row)
-
+ERROR:  unknown function: dup()
 DROP FUNCTION dup(f1 anycompatiblerange);
+ERROR:  unknown function: dup()
 -- fails, no way to deduce outputs
 CREATE FUNCTION bad (f1 anyarray, out f2 anycompatible, out f3 anycompatiblearray)
 AS 'select $1, array[$1,$1]' LANGUAGE sql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatible requires at least one input of type anycompatible, anycompatiblearray, anycompatiblenonarray, anycompatiblerange, or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 --
 -- table functions
 --
@@ -1661,100 +1236,77 @@
 --
 -- some tests on SQL functions with RETURNING
 --
-create temp table tt(f1 serial, data text);
+create sequence f1_seq;
+ERROR:  relation "root.public.f1_seq" already exists
+create temp table tt(f1 int default nextval('f1_seq'), data text);
 create function insert_tt(text) returns int as
 $$ insert into tt(data) values($1) returning f1 $$
 language sql;
 select insert_tt('foo');
  insert_tt 
 -----------
-         1
+         7
 (1 row)
 
 select insert_tt('bar');
  insert_tt 
 -----------
-         2
+         8
 (1 row)
 
 select * from tt;
  f1 | data 
 ----+------
-  1 | foo
-  2 | bar
+  7 | foo
+  8 | bar
 (2 rows)
 
 -- insert will execute to completion even if function needs just 1 row
 create or replace function insert_tt(text) returns int as
 $$ insert into tt(data) values($1),($1||$1) returning f1 $$
 language sql;
+ERROR:  cannot create function using temp tables
 select insert_tt('fool');
  insert_tt 
 -----------
-         3
+         9
 (1 row)
 
 select * from tt;
- f1 |   data   
-----+----------
-  1 | foo
-  2 | bar
-  3 | fool
-  4 | foolfool
-(4 rows)
+ f1 | data 
+----+------
+  7 | foo
+  8 | bar
+  9 | fool
+(3 rows)
 
 -- setof does what's expected
 create or replace function insert_tt2(text,text) returns setof int as
 $$ insert into tt(data) values($1),($2) returning f1 $$
 language sql;
+ERROR:  cannot create function using temp tables
 select insert_tt2('foolish','barrish');
- insert_tt2 
-------------
-          5
-          6
-(2 rows)
-
+ERROR:  unknown function: insert_tt2()
 select * from insert_tt2('baz','quux');
- insert_tt2 
-------------
-          7
-          8
-(2 rows)
-
+ERROR:  unknown function: insert_tt2()
 select * from tt;
- f1 |   data   
-----+----------
-  1 | foo
-  2 | bar
-  3 | fool
-  4 | foolfool
-  5 | foolish
-  6 | barrish
-  7 | baz
-  8 | quux
-(8 rows)
+ f1 | data 
+----+------
+  7 | foo
+  8 | bar
+  9 | fool
+(3 rows)
 
 -- limit doesn't prevent execution to completion
 select insert_tt2('foolish','barrish') limit 1;
- insert_tt2 
-------------
-          9
-(1 row)
-
+ERROR:  unknown function: insert_tt2()
 select * from tt;
- f1 |   data   
-----+----------
-  1 | foo
-  2 | bar
-  3 | fool
-  4 | foolfool
-  5 | foolish
-  6 | barrish
-  7 | baz
-  8 | quux
-  9 | foolish
- 10 | barrish
-(10 rows)
+ f1 | data 
+----+------
+  7 | foo
+  8 | bar
+  9 | fool
+(3 rows)
 
 -- triggers will fire, too
 create function noticetrigger() returns trigger as $$
@@ -1764,70 +1316,55 @@
 end $$ language plpgsql;
 create trigger tnoticetrigger after insert on tt for each row
 execute procedure noticetrigger();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 select insert_tt2('foolme','barme') limit 1;
-NOTICE:  noticetrigger 11 foolme
-NOTICE:  noticetrigger 12 barme
- insert_tt2 
-------------
-         11
-(1 row)
-
+ERROR:  unknown function: insert_tt2()
 select * from tt;
- f1 |   data   
-----+----------
-  1 | foo
-  2 | bar
-  3 | fool
-  4 | foolfool
-  5 | foolish
-  6 | barrish
-  7 | baz
-  8 | quux
-  9 | foolish
- 10 | barrish
- 11 | foolme
- 12 | barme
-(12 rows)
+ f1 | data 
+----+------
+  7 | foo
+  8 | bar
+  9 | fool
+(3 rows)
 
 -- and rules work
 create temp table tt_log(f1 int, data text);
 create rule insert_tt_rule as on insert to tt do also
   insert into tt_log values(new.*);
-select insert_tt2('foollog','barlog') limit 1;
-NOTICE:  noticetrigger 13 foollog
-NOTICE:  noticetrigger 14 barlog
- insert_tt2 
-------------
-         13
-(1 row)
+ERROR:  at or near "insert_tt_rule": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create rule insert_tt_rule as on insert to tt do also
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select insert_tt2('foollog','barlog') limit 1;
+ERROR:  unknown function: insert_tt2()
 select * from tt;
- f1 |   data   
-----+----------
-  1 | foo
-  2 | bar
-  3 | fool
-  4 | foolfool
-  5 | foolish
-  6 | barrish
-  7 | baz
-  8 | quux
-  9 | foolish
- 10 | barrish
- 11 | foolme
- 12 | barme
- 13 | foollog
- 14 | barlog
-(14 rows)
+ f1 | data 
+----+------
+  7 | foo
+  8 | bar
+  9 | fool
+(3 rows)
 
 -- note that nextval() gets executed a second time in the rule expansion,
 -- which is expected.
 select * from tt_log;
- f1 |  data   
-----+---------
- 15 | foollog
- 16 | barlog
-(2 rows)
+ f1 | data 
+----+------
+(0 rows)
 
 -- test case for a whole-row-variable bug
 create function rngfunc1(n integer, out a text, out b text)
@@ -1835,6 +1372,18 @@
   language sql
   as $$ select 'foo ' || i, 'bar ' || i from generate_series(1,$1) i $$;
 set work_mem='64kB';
+ERROR:  unimplemented: the configuration setting "work_mem" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select t.a, t, t.a from rngfunc1(10000) t limit 1;
    a   |         t         |   a   
 -------+-------------------+-------
@@ -1842,6 +1391,18 @@
 (1 row)
 
 reset work_mem;
+ERROR:  unimplemented: the configuration setting "work_mem" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select t.a, t, t.a from rngfunc1(10000) t limit 1;
    a   |         t         |   a   
 -------+-------------------+-------
@@ -1871,31 +1432,24 @@
 
 select * from array_to_set(array['one', 'two']); -- fail
 ERROR:  a column definition list is required for functions returning "record"
-LINE 1: select * from array_to_set(array['one', 'two']);
-                      ^
 -- after-the-fact coercion of the columns is now possible, too
-select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
-  f1  | f2  
-------+-----
- 1.00 | one
- 2.00 | two
-(2 rows)
-
+-- select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
 -- and if it doesn't work, you get a compile-time not run-time error
 select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text);
-ERROR:  return type mismatch in function declared to return record
-DETAIL:  Final statement returns integer instead of point at column 1.
-CONTEXT:  SQL function "array_to_set" during startup
+ERROR:  at or near ",": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text)
+                                                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 -- with "strict", this function can't be inlined in FROM
 explain (verbose, costs off)
   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
-                     QUERY PLAN                     
-----------------------------------------------------
- Function Scan on public.array_to_set t
-   Output: f1, f2
-   Function Call: array_to_set('{one,two}'::text[])
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- but without, it can be:
 create or replace function array_to_set(anyarray) returns setof record as $$
   select i AS "index", $1[i] AS "value" from generate_subscripts($1, 1) i
@@ -1914,26 +1468,21 @@
   2 | two
 (2 rows)
 
-select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
-  f1  | f2  
-------+-----
- 1.00 | one
- 2.00 | two
-(2 rows)
-
+-- select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
 select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text);
-ERROR:  return type mismatch in function declared to return record
-DETAIL:  Final statement returns integer instead of point at column 1.
-CONTEXT:  SQL function "array_to_set" during inlining
+ERROR:  at or near ",": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text)
+                                                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 explain (verbose, costs off)
   select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
-                          QUERY PLAN                          
---------------------------------------------------------------
- Function Scan on pg_catalog.generate_subscripts i
-   Output: i.i, ('{one,two}'::text[])[i.i]
-   Function Call: generate_subscripts('{one,two}'::text[], 1)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 create temp table rngfunc(f1 int8, f2 int8);
 create function testrngfunc() returns record as $$
   insert into rngfunc values (1,2) returning *;
@@ -1952,8 +1501,6 @@
 
 select * from testrngfunc(); -- fail
 ERROR:  a column definition list is required for functions returning "record"
-LINE 1: select * from testrngfunc();
-                      ^
 drop function testrngfunc();
 create function testrngfunc() returns setof record as $$
   insert into rngfunc values (1,2), (3,4) returning *;
@@ -1974,8 +1521,6 @@
 
 select * from testrngfunc(); -- fail
 ERROR:  a column definition list is required for functions returning "record"
-LINE 1: select * from testrngfunc();
-                      ^
 drop function testrngfunc();
 -- Check that typmod imposed by a composite type is honored
 create type rngfunc_type as (f1 numeric(35,6), f2 numeric(35,2));
@@ -1984,12 +1529,11 @@
 $$ language sql immutable;
 explain (verbose, costs off)
 select testrngfunc();
-                QUERY PLAN                 
--------------------------------------------
- Result
-   Output: '(7.136178,7.14)'::rngfunc_type
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select testrngfunc();
    testrngfunc   
 -----------------
@@ -1998,13 +1542,11 @@
 
 explain (verbose, costs off)
 select * from testrngfunc();
-                    QUERY PLAN                    
---------------------------------------------------
- Function Scan on testrngfunc
-   Output: f1, f2
-   Function Call: '(7.136178,7.14)'::rngfunc_type
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from testrngfunc();
     f1    |  f2  
 ----------+------
@@ -2016,12 +1558,11 @@
 $$ language sql volatile;
 explain (verbose, costs off)
 select testrngfunc();
-       QUERY PLAN        
--------------------------
- Result
-   Output: testrngfunc()
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select testrngfunc();
    testrngfunc   
 -----------------
@@ -2030,13 +1571,11 @@
 
 explain (verbose, costs off)
 select * from testrngfunc();
-             QUERY PLAN              
--------------------------------------
- Function Scan on public.testrngfunc
-   Output: f1, f2
-   Function Call: testrngfunc()
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from testrngfunc();
     f1    |  f2  
 ----------+------
@@ -2049,13 +1588,11 @@
 $$ language sql immutable;
 explain (verbose, costs off)
 select testrngfunc();
-       QUERY PLAN        
--------------------------
- ProjectSet
-   Output: testrngfunc()
-   ->  Result
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select testrngfunc();
    testrngfunc   
 -----------------
@@ -2064,12 +1601,11 @@
 
 explain (verbose, costs off)
 select * from testrngfunc();
-                       QUERY PLAN                       
---------------------------------------------------------
- Result
-   Output: 7.136178::numeric(35,6), 7.14::numeric(35,2)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from testrngfunc();
     f1    |  f2  
 ----------+------
@@ -2081,13 +1617,11 @@
 $$ language sql volatile;
 explain (verbose, costs off)
 select testrngfunc();
-       QUERY PLAN        
--------------------------
- ProjectSet
-   Output: testrngfunc()
-   ->  Result
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select testrngfunc();
    testrngfunc   
 -----------------
@@ -2096,13 +1630,11 @@
 
 explain (verbose, costs off)
 select * from testrngfunc();
-             QUERY PLAN              
--------------------------------------
- Function Scan on public.testrngfunc
-   Output: f1, f2
-   Function Call: testrngfunc()
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from testrngfunc();
     f1    |  f2  
 ----------+------
@@ -2112,62 +1644,45 @@
 create or replace function testrngfunc() returns setof rngfunc_type as $$
   select 1, 2 union select 3, 4 order by 1;
 $$ language sql immutable;
+ERROR:  return type mismatch in function declared to return rngfunc_type
+DETAIL:  Final statement returns int instead of decimal at column 1
 explain (verbose, costs off)
 select testrngfunc();
-       QUERY PLAN        
--------------------------
- ProjectSet
-   Output: testrngfunc()
-   ->  Result
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select testrngfunc();
    testrngfunc   
 -----------------
- (1.000000,2.00)
- (3.000000,4.00)
-(2 rows)
+ (7.136178,7.14)
+(1 row)
 
 explain (verbose, costs off)
 select * from testrngfunc();
-                        QUERY PLAN                        
-----------------------------------------------------------
- Subquery Scan on "*SELECT*"
-   Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1"
-   ->  Unique
-         Output: (1), (2)
-         ->  Sort
-               Output: (1), (2)
-               Sort Key: (1), (2)
-               ->  Append
-                     ->  Result
-                           Output: 1, 2
-                     ->  Result
-                           Output: 3, 4
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from testrngfunc();
     f1    |  f2  
 ----------+------
- 1.000000 | 2.00
- 3.000000 | 4.00
-(2 rows)
+ 7.136178 | 7.14
+(1 row)
 
 -- Check a couple of error cases while we're here
 select * from testrngfunc() as t(f1 int8,f2 int8);  -- fail, composite result
 ERROR:  a column definition list is redundant for a function returning a named composite type
-LINE 1: select * from testrngfunc() as t(f1 int8,f2 int8);
-                                         ^
 select * from pg_get_keywords() as t(f1 int8,f2 int8);  -- fail, OUT params
-ERROR:  a column definition list is redundant for a function with OUT parameters
-LINE 1: select * from pg_get_keywords() as t(f1 int8,f2 int8);
-                                             ^
+ERROR:  a column definition list is redundant for a function returning a named composite type
 select * from sin(3) as t(f1 int8,f2 int8);  -- fail, scalar result type
-ERROR:  a column definition list is only allowed for functions returning "record"
-LINE 1: select * from sin(3) as t(f1 int8,f2 int8);
-                                  ^
+ERROR:  source "t" has 1 columns available but 2 columns specified
 drop type rngfunc_type cascade;
-NOTICE:  drop cascades to function testrngfunc()
+ERROR:  unimplemented: DROP TYPE CASCADE is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/51480/_version_
 --
 -- Check some cases involving added/dropped columns in a rowtype result
 --
@@ -2178,79 +1693,37 @@
 create or replace function get_first_user() returns users as
 $$ SELECT * FROM users ORDER BY userid LIMIT 1; $$
 language sql stable;
+ERROR:  cannot create function using temp tables
 SELECT get_first_user();
-  get_first_user   
--------------------
- (id,1,email,11,t)
-(1 row)
-
+ERROR:  unknown function: get_first_user()
 SELECT * FROM get_first_user();
- userid | seq | email | moredrop | enabled 
---------+-----+-------+----------+---------
- id     |   1 | email |       11 | t
-(1 row)
-
+ERROR:  unknown function: get_first_user()
 create or replace function get_users() returns setof users as
 $$ SELECT * FROM users ORDER BY userid; $$
 language sql stable;
+ERROR:  cannot create function using temp tables
 SELECT get_users();
-      get_users      
----------------------
- (id,1,email,11,t)
- (id2,2,email2,12,t)
-(2 rows)
-
+ERROR:  unknown function: get_users()
 SELECT * FROM get_users();
- userid | seq | email  | moredrop | enabled 
---------+-----+--------+----------+---------
- id     |   1 | email  |       11 | t
- id2    |   2 | email2 |       12 | t
-(2 rows)
-
+ERROR:  unknown function: get_users()
 SELECT * FROM get_users() WITH ORDINALITY;   -- make sure ordinality copes
- userid | seq | email  | moredrop | enabled | ordinality 
---------+-----+--------+----------+---------+------------
- id     |   1 | email  |       11 | t       |          1
- id2    |   2 | email2 |       12 | t       |          2
-(2 rows)
-
+ERROR:  unknown function: get_users()
 -- multiple functions vs. dropped columns
 SELECT * FROM ROWS FROM(generate_series(10,11), get_users()) WITH ORDINALITY;
- generate_series | userid | seq | email  | moredrop | enabled | ordinality 
------------------+--------+-----+--------+----------+---------+------------
-              10 | id     |   1 | email  |       11 | t       |          1
-              11 | id2    |   2 | email2 |       12 | t       |          2
-(2 rows)
-
+ERROR:  unknown function: get_users()
 SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;
- userid | seq | email  | moredrop | enabled | generate_series | ordinality 
---------+-----+--------+----------+---------+-----------------+------------
- id     |   1 | email  |       11 | t       |              10 |          1
- id2    |   2 | email2 |       12 | t       |              11 |          2
-(2 rows)
-
+ERROR:  unknown function: get_users()
 -- check that we can cope with post-parsing changes in rowtypes
 create temp view usersview as
 SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;
+ERROR:  unknown function: get_users()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 select * from usersview;
- userid | seq | email  | moredrop | enabled | generate_series | ordinality 
---------+-----+--------+----------+---------+-----------------+------------
- id     |   1 | email  |       11 | t       |              10 |          1
- id2    |   2 | email2 |       12 | t       |              11 |          2
-(2 rows)
-
+ERROR:  relation "usersview" does not exist
 alter table users add column junk text;
 select * from usersview;
- userid | seq | email  | moredrop | enabled | generate_series | ordinality 
---------+-----+--------+----------+---------+-----------------+------------
- id     |   1 | email  |       11 | t       |              10 |          1
- id2    |   2 | email2 |       12 | t       |              11 |          2
-(2 rows)
-
+ERROR:  relation "usersview" does not exist
 alter table users drop column moredrop;  -- fail, view has reference
-ERROR:  cannot drop column moredrop of table users because other objects depend on it
-DETAIL:  view usersview depends on column moredrop of table users
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
 -- We used to have a bug that would allow the above to succeed, posing
 -- hazards for later execution of the view.  Check that the internal
 -- defenses for those hazards haven't bit-rotted, in case some other
@@ -2264,18 +1737,14 @@
 returning pg_describe_object(classid, objid, objsubid) as obj,
           pg_describe_object(refclassid, refobjid, refobjsubid) as ref,
           deptype;
-              obj               |              ref               | deptype 
---------------------------------+--------------------------------+---------
- rule _RETURN on view usersview | column moredrop of table users | n
-(1 row)
-
+ERROR:  user test_admin does not have DELETE privilege on relation pg_depend
 alter table users drop column moredrop;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 select * from usersview;  -- expect clean failure
-ERROR:  attribute 5 of type record has been dropped
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 rollback;
 alter table users alter column seq type numeric;  -- fail, view has reference
-ERROR:  cannot alter type of a column used by a view or rule
-DETAIL:  rule _RETURN on view usersview depends on column "seq"
+ERROR:  ALTER COLUMN TYPE is only implemented in the declarative schema changer
 -- likewise, check we don't crash if the dependency goes wrong
 begin;
 -- destroy the dependency entry that prevents the ALTER:
@@ -2286,19 +1755,18 @@
 returning pg_describe_object(classid, objid, objsubid) as obj,
           pg_describe_object(refclassid, refobjid, refobjsubid) as ref,
           deptype;
-              obj               |            ref            | deptype 
---------------------------------+---------------------------+---------
- rule _RETURN on view usersview | column seq of table users | n
-(1 row)
-
+ERROR:  user test_admin does not have DELETE privilege on relation pg_depend
 alter table users alter column seq type numeric;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 select * from usersview;  -- expect clean failure
-ERROR:  attribute 2 of type record has wrong type
-DETAIL:  Table has type numeric, but query expects integer.
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 rollback;
 drop view usersview;
+ERROR:  relation "usersview" does not exist
 drop function get_first_user();
+ERROR:  unknown function: get_first_user()
 drop function get_users();
+ERROR:  unknown function: get_users()
 drop table users;
 -- check behavior with type coercion required for a set-op
 create or replace function rngfuncbar() returns setof text as
@@ -2320,17 +1788,11 @@
 
 -- this function is now inlinable, too:
 explain (verbose, costs off) select * from rngfuncbar();
-                   QUERY PLAN                   
-------------------------------------------------
- Result
-   Output: ('foo'::character varying)
-   ->  Append
-         ->  Result
-               Output: 'foo'::character varying
-         ->  Result
-               Output: 'bar'::character varying
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off) select * from rngfuncbar()
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 drop function rngfuncbar();
 -- check handling of a SQL function with multiple OUT params (bug #5777)
 create or replace function rngfuncbar(out integer, out numeric) as
@@ -2344,115 +1806,93 @@
 create or replace function rngfuncbar(out integer, out numeric) as
 $$ select (1, 2) $$ language sql;
 select * from rngfuncbar();  -- fail
-ERROR:  function return row and query-specified return row do not match
-DETAIL:  Returned type integer at ordinal position 2, but query expects numeric.
+ column1 | column2 
+---------+---------
+       1 |       2
+(1 row)
+
 create or replace function rngfuncbar(out integer, out numeric) as
 $$ select (1, 2.1, 3) $$ language sql;
+ERROR:  return type mismatch in function declared to return record
+DETAIL:  Actual return type is record
 select * from rngfuncbar();  -- fail
-ERROR:  function return row and query-specified return row do not match
-DETAIL:  Returned row contains 3 attributes, but query expects 2.
+ column1 | column2 
+---------+---------
+       1 |       2
+(1 row)
+
 drop function rngfuncbar();
 -- check whole-row-Var handling in nested lateral functions (bug #11703)
 create function extractq2(t int8_tbl) returns int8 as $$
   select t.q2
 $$ language sql immutable;
+ERROR:  no data source matches prefix: t in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 explain (verbose, costs off)
 select x from int8_tbl, extractq2(int8_tbl) f(x);
-                QUERY PLAN                
-------------------------------------------
- Nested Loop
-   Output: f.x
-   ->  Seq Scan on public.int8_tbl
-         Output: int8_tbl.q1, int8_tbl.q2
-   ->  Function Scan on f
-         Output: f.x
-         Function Call: int8_tbl.q2
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select x from int8_tbl, extractq2(int8_tbl) f(x);
-         x         
--------------------
-               456
-  4567890123456789
-               123
-  4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  unknown function: extractq2()
 create function extractq2_2(t int8_tbl) returns table(ret1 int8) as $$
   select extractq2(t) offset 0
 $$ language sql immutable;
+ERROR:  unknown function: extractq2()
 explain (verbose, costs off)
 select x from int8_tbl, extractq2_2(int8_tbl) f(x);
-            QUERY PLAN             
------------------------------------
- Nested Loop
-   Output: ((int8_tbl.*).q2)
-   ->  Seq Scan on public.int8_tbl
-         Output: int8_tbl.*
-   ->  Result
-         Output: (int8_tbl.*).q2
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select x from int8_tbl, extractq2_2(int8_tbl) f(x);
-         x         
--------------------
-               456
-  4567890123456789
-               123
-  4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  unknown function: extractq2_2()
 -- without the "offset 0", this function gets optimized quite differently
 create function extractq2_2_opt(t int8_tbl) returns table(ret1 int8) as $$
   select extractq2(t)
 $$ language sql immutable;
+ERROR:  unknown function: extractq2()
 explain (verbose, costs off)
 select x from int8_tbl, extractq2_2_opt(int8_tbl) f(x);
-         QUERY PLAN          
------------------------------
- Seq Scan on public.int8_tbl
-   Output: int8_tbl.q2
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select x from int8_tbl, extractq2_2_opt(int8_tbl) f(x);
-         x         
--------------------
-               456
-  4567890123456789
-               123
-  4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  unknown function: extractq2_2_opt()
 -- check handling of nulls in SRF results (bug #7808)
 create type rngfunc2 as (a integer, b text);
 select *, row_to_json(u) from unnest(array[(1,'foo')::rngfunc2, null::rngfunc2]) u;
- a |  b  |     row_to_json     
----+-----+---------------------
- 1 | foo | {"a":1,"b":"foo"}
-   |     | {"a":null,"b":null}
+    u    |     row_to_json      
+---------+----------------------
+ (1,foo) | {"a": 1, "b": "foo"}
+         | 
 (2 rows)
 
 select *, row_to_json(u) from unnest(array[null::rngfunc2, null::rngfunc2]) u;
- a | b |     row_to_json     
----+---+---------------------
-   |   | {"a":null,"b":null}
-   |   | {"a":null,"b":null}
+ u | row_to_json 
+---+-------------
+   | 
+   | 
 (2 rows)
 
 select *, row_to_json(u) from unnest(array[null::rngfunc2, (1,'foo')::rngfunc2, null::rngfunc2]) u;
- a |  b  |     row_to_json     
----+-----+---------------------
-   |     | {"a":null,"b":null}
- 1 | foo | {"a":1,"b":"foo"}
-   |     | {"a":null,"b":null}
+    u    |     row_to_json      
+---------+----------------------
+         | 
+ (1,foo) | {"a": 1, "b": "foo"}
+         | 
 (3 rows)
 
 select *, row_to_json(u) from unnest(array[]::rngfunc2[]) u;
- a | b | row_to_json 
----+---+-------------
+ u | row_to_json 
+---+-------------
 (0 rows)
 
 drop type rngfunc2;
@@ -2463,25 +1903,16 @@
    from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])
         as unnested_modules(module)) as ss,
   jsonb_to_recordset(ss.lecture) as j (id text);
-                                                                       QUERY PLAN                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------
- Nested Loop
-   Output: jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false), j.id
-   ->  Function Scan on pg_catalog.unnest unnested_modules
-         Output: unnested_modules.module
-         Function Call: unnest('{"{\"lectures\": [{\"id\": \"1\"}]}"}'::jsonb[])
-   ->  Function Scan on pg_catalog.jsonb_to_recordset j
-         Output: j.id
-         Function Call: jsonb_to_recordset(jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false))
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture
    from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])
         as unnested_modules(module)) as ss,
   jsonb_to_recordset(ss.lecture) as j (id text);
-    lecture    | id 
----------------+----
- [{"id": "1"}] | 1
-(1 row)
-
+ERROR:  jsonb_path_query_array(): unimplemented: this function is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/22513/_version_
