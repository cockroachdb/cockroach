diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/create_function_sql.out --label=/mnt/data1/postgres/src/test/regress/results/create_function_sql.out /mnt/data1/postgres/src/test/regress/expected/create_function_sql.out /mnt/data1/postgres/src/test/regress/results/create_function_sql.out
--- /mnt/data1/postgres/src/test/regress/expected/create_function_sql.out
+++ /mnt/data1/postgres/src/test/regress/results/create_function_sql.out
@@ -24,11 +24,11 @@
        WHERE oid in ('functest_A_1'::regproc,
                      'functest_A_2'::regproc,
                      'functest_A_3'::regproc) ORDER BY proname;
-   proname    | prorettype |    proargtypes    
---------------+------------+-------------------
- functest_a_1 | boolean    | [0:1]={text,date}
- functest_a_2 | integer    | [0:0]={text[]}
- functest_a_3 | boolean    | {}
+   proname    | prorettype | proargtypes 
+--------------+------------+-------------
+ functest_a_1 | bool       | {text,date}
+ functest_a_2 | int8       | {_text}
+ functest_a_3 | bool       | {}
 (3 rows)
 
 SELECT functest_A_1('abcd', '2020-01-01');
@@ -75,6 +75,21 @@
 
 ALTER FUNCTION functest_B_2(int) VOLATILE;
 ALTER FUNCTION functest_B_3(int) COST 100;	-- unrelated change, no effect
+ERROR:  at or near "100": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+ALTER FUNCTION functest_B_3(int) COST 100
+                                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 SELECT proname, provolatile FROM pg_proc
        WHERE oid in ('functest_B_1'::regproc,
                      'functest_B_2'::regproc,
@@ -104,7 +119,7 @@
    proname    | prosecdef 
 --------------+-----------
  functest_c_1 | f
- functest_c_2 | t
+ functest_c_2 | f
  functest_c_3 | f
 (3 rows)
 
@@ -119,7 +134,7 @@
 --------------+-----------
  functest_c_1 | f
  functest_c_2 | f
- functest_c_3 | t
+ functest_c_3 | f
 (3 rows)
 
 --
@@ -129,48 +144,49 @@
        AS 'SELECT $1 > 100';
 CREATE FUNCTION functest_E_2(int) RETURNS bool LANGUAGE 'sql'
        LEAKPROOF AS 'SELECT $1 > 100';
+ERROR:  invalid volatility: leak proof function must be immutable, but got volatility: VOLATILE
 SELECT proname, proleakproof FROM pg_proc
        WHERE oid in ('functest_E_1'::regproc,
                      'functest_E_2'::regproc) ORDER BY proname;
-   proname    | proleakproof 
---------------+--------------
- functest_e_1 | f
- functest_e_2 | t
-(2 rows)
-
+ERROR:  unknown function: functest_e_2()
 ALTER FUNCTION functest_E_1(int) LEAKPROOF;
+ERROR:  invalid volatility: leak proof function must be immutable, but got volatility: VOLATILE
 ALTER FUNCTION functest_E_2(int) STABLE;	-- unrelated change, no effect
+ERROR:  unknown function: functest_e_2()
 SELECT proname, proleakproof FROM pg_proc
        WHERE oid in ('functest_E_1'::regproc,
                      'functest_E_2'::regproc) ORDER BY proname;
-   proname    | proleakproof 
---------------+--------------
- functest_e_1 | t
- functest_e_2 | t
-(2 rows)
-
+ERROR:  unknown function: functest_e_2()
 ALTER FUNCTION functest_E_2(int) NOT LEAKPROOF;	-- remove leakproof attribute
+ERROR:  unknown function: functest_e_2()
 SELECT proname, proleakproof FROM pg_proc
        WHERE oid in ('functest_E_1'::regproc,
                      'functest_E_2'::regproc) ORDER BY proname;
-   proname    | proleakproof 
---------------+--------------
- functest_e_1 | t
- functest_e_2 | f
-(2 rows)
-
+ERROR:  unknown function: functest_e_2()
 -- it takes superuser privilege to turn on leakproof, but not to turn off
 ALTER FUNCTION functest_E_1(int) OWNER TO regress_unpriv_user;
 ALTER FUNCTION functest_E_2(int) OWNER TO regress_unpriv_user;
+ERROR:  unknown function: functest_e_2()
 SET SESSION AUTHORIZATION regress_unpriv_user;
+ERROR:  at or near "regress_unpriv_user": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SET SESSION AUTHORIZATION regress_unpriv_user
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/40283/_version_
 SET search_path TO temp_func_test, public;
 ALTER FUNCTION functest_E_1(int) NOT LEAKPROOF;
 ALTER FUNCTION functest_E_2(int) LEAKPROOF;
-ERROR:  only superuser can define a leakproof function
+ERROR:  unknown function: functest_e_2()
 CREATE FUNCTION functest_E_3(int) RETURNS bool LANGUAGE 'sql'
        LEAKPROOF AS 'SELECT $1 < 200';	-- fail
-ERROR:  only superuser can define a leakproof function
+ERROR:  invalid volatility: leak proof function must be immutable, but got volatility: VOLATILE
 RESET SESSION AUTHORIZATION;
+ERROR:  at or near "authorization": syntax error
+DETAIL:  source SQL:
+RESET SESSION AUTHORIZATION
+              ^
+HINT:  try \h RESET
 --
 -- CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
 --
@@ -213,46 +229,63 @@
 
 -- pg_get_functiondef tests
 SELECT pg_get_functiondef('functest_A_1'::regproc);
-                         pg_get_functiondef                         
---------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_a_1(text, date)+
-  RETURNS boolean                                                  +
-  LANGUAGE sql                                                     +
- AS $function$SELECT $1 = 'abcd' AND $2 > '2001-01-01'$function$   +
- 
+                    pg_get_functiondef                     
+-----------------------------------------------------------
+ CREATE FUNCTION temp_func_test.functest_a_1(STRING, DATE)+
+         RETURNS BOOL                                     +
+         VOLATILE                                         +
+         NOT LEAKPROOF                                    +
+         CALLED ON NULL INPUT                             +
+         LANGUAGE SQL                                     +
+         SECURITY INVOKER                                 +
+         AS $$                                            +
+         SELECT ($1 = 'abcd') AND ($2 > '2001-01-01');    +
+ $$
 (1 row)
 
 SELECT pg_get_functiondef('functest_B_3'::regproc);
-                       pg_get_functiondef                        
------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_b_3(integer)+
-  RETURNS boolean                                               +
-  LANGUAGE sql                                                  +
-  STABLE                                                        +
- AS $function$SELECT $1 = 0$function$                           +
- 
+                pg_get_functiondef                 
+---------------------------------------------------
+ CREATE FUNCTION temp_func_test.functest_b_3(INT8)+
+         RETURNS BOOL                             +
+         STABLE                                   +
+         NOT LEAKPROOF                            +
+         CALLED ON NULL INPUT                     +
+         LANGUAGE SQL                             +
+         SECURITY INVOKER                         +
+         AS $$                                    +
+         SELECT $1 = 0;                           +
+ $$
 (1 row)
 
 SELECT pg_get_functiondef('functest_C_3'::regproc);
-                       pg_get_functiondef                        
------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_c_3(integer)+
-  RETURNS boolean                                               +
-  LANGUAGE sql                                                  +
-  SECURITY DEFINER                                              +
- AS $function$SELECT $1 < 0$function$                           +
- 
+                pg_get_functiondef                 
+---------------------------------------------------
+ CREATE FUNCTION temp_func_test.functest_c_3(INT8)+
+         RETURNS BOOL                             +
+         VOLATILE                                 +
+         NOT LEAKPROOF                            +
+         CALLED ON NULL INPUT                     +
+         LANGUAGE SQL                             +
+         SECURITY DEFINER                         +
+         AS $$                                    +
+         SELECT $1 < 0;                           +
+ $$
 (1 row)
 
 SELECT pg_get_functiondef('functest_F_2'::regproc);
-                       pg_get_functiondef                        
------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_f_2(integer)+
-  RETURNS boolean                                               +
-  LANGUAGE sql                                                  +
-  STRICT                                                        +
- AS $function$SELECT $1 = 50$function$                          +
- 
+                pg_get_functiondef                 
+---------------------------------------------------
+ CREATE FUNCTION temp_func_test.functest_f_2(INT8)+
+         RETURNS BOOL                             +
+         VOLATILE                                 +
+         NOT LEAKPROOF                            +
+         STRICT                                   +
+         LANGUAGE SQL                             +
+         SECURITY INVOKER                         +
+         AS $$                                    +
+         SELECT $1 = 50;                          +
+ $$
 (1 row)
 
 --
@@ -261,24 +294,91 @@
 CREATE FUNCTION functest_S_1(a text, b date) RETURNS boolean
     LANGUAGE SQL
     RETURN a = 'abcd' AND b > '2001-01-01';
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION functest_S_2(a text[]) RETURNS int
     RETURN a[1]::int;
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION functest_S_3() RETURNS boolean
     RETURN false;
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION functest_S_3a() RETURNS boolean
     BEGIN ATOMIC
         ;;RETURN false;;
     END;
+ERROR:  at or near ";": syntax error
+DETAIL:  source SQL:
+CREATE FUNCTION functest_S_3a() RETURNS boolean
+    BEGIN ATOMIC
+        ;;RETURN false;;
+        ^
+HINT:  try \h CREATE FUNCTION
 CREATE FUNCTION functest_S_10(a text, b date) RETURNS boolean
     LANGUAGE SQL
     BEGIN ATOMIC
         SELECT a = 'abcd' AND b > '2001-01-01';
     END;
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FUNCTION functest_S_13() RETURNS boolean
     BEGIN ATOMIC
         SELECT 1;
         SELECT false;
     END;
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- check display of function arguments in sub-SELECT
 CREATE TABLE functest1 (i int);
 CREATE FUNCTION functest_S_16(a int, b int) RETURNS void
@@ -286,174 +386,129 @@
     BEGIN ATOMIC
         INSERT INTO functest1 SELECT a + $2;
     END;
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- error: duplicate function body
 CREATE FUNCTION functest_S_xxx(x int) RETURNS int
     LANGUAGE SQL
     AS $$ SELECT x * 2 $$
     RETURN x * 3;
-ERROR:  duplicate function body specified
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- polymorphic arguments not allowed in this form
 CREATE FUNCTION functest_S_xx(x anyarray) RETURNS anyelement
     LANGUAGE SQL
     RETURN x[1];
-ERROR:  SQL function with unquoted function body cannot have polymorphic arguments
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- check reporting of parse-analysis errors
 CREATE FUNCTION functest_S_xx(x date) RETURNS boolean
     LANGUAGE SQL
     RETURN x > 1;
-ERROR:  operator does not exist: date > integer
-LINE 3:     RETURN x > 1;
-                     ^
-HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- tricky parsing
 CREATE FUNCTION functest_S_15(x int) RETURNS boolean
 LANGUAGE SQL
 BEGIN ATOMIC
     select case when x % 2 = 0 then true else false end;
 END;
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE FUNCTION functest_S_15(x int) RETURNS boolean
+LANGUAGE SQL
+BEGIN ATOMIC
+    select case when x % 2 = 0 then true else false end
+                                                       ^
+HINT:  try \h CREATE FUNCTION
 SELECT functest_S_1('abcd', '2020-01-01');
- functest_s_1 
---------------
- t
-(1 row)
-
+ERROR:  unknown function: functest_s_1()
 SELECT functest_S_2(ARRAY['1', '2', '3']);
- functest_s_2 
---------------
-            1
-(1 row)
-
+ERROR:  unknown function: functest_s_2()
 SELECT functest_S_3();
- functest_s_3 
---------------
- f
-(1 row)
-
+ERROR:  unknown function: functest_s_3()
 SELECT functest_S_10('abcd', '2020-01-01');
- functest_s_10 
----------------
- t
-(1 row)
-
+ERROR:  unknown function: functest_s_10()
 SELECT functest_S_13();
- functest_s_13 
----------------
- f
-(1 row)
-
+ERROR:  unknown function: functest_s_13()
 SELECT pg_get_functiondef('functest_S_1'::regproc);
-                           pg_get_functiondef                           
-------------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_1(a text, b date)+
-  RETURNS boolean                                                      +
-  LANGUAGE sql                                                         +
- RETURN ((a = 'abcd'::text) AND (b > '01-01-2001'::date))              +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_1()
 SELECT pg_get_functiondef('functest_S_2'::regproc);
-                        pg_get_functiondef                        
-------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_2(a text[])+
-  RETURNS integer                                                +
-  LANGUAGE sql                                                   +
- RETURN ((a)[1])::integer                                        +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_2()
 SELECT pg_get_functiondef('functest_S_3'::regproc);
-                    pg_get_functiondef                    
-----------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_3()+
-  RETURNS boolean                                        +
-  LANGUAGE sql                                           +
- RETURN false                                            +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_3()
 SELECT pg_get_functiondef('functest_S_3a'::regproc);
-                    pg_get_functiondef                     
------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_3a()+
-  RETURNS boolean                                         +
-  LANGUAGE sql                                            +
- BEGIN ATOMIC                                             +
-  RETURN false;                                           +
- END                                                      +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_3a()
 SELECT pg_get_functiondef('functest_S_10'::regproc);
-                           pg_get_functiondef                            
--------------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_10(a text, b date)+
-  RETURNS boolean                                                       +
-  LANGUAGE sql                                                          +
- BEGIN ATOMIC                                                           +
-  SELECT ((a = 'abcd'::text) AND (b > '01-01-2001'::date));             +
- END                                                                    +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_10()
 SELECT pg_get_functiondef('functest_S_13'::regproc);
-                    pg_get_functiondef                     
------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_13()+
-  RETURNS boolean                                         +
-  LANGUAGE sql                                            +
- BEGIN ATOMIC                                             +
-  SELECT 1;                                               +
-  SELECT false;                                           +
- END                                                      +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_13()
 SELECT pg_get_functiondef('functest_S_15'::regproc);
-                         pg_get_functiondef                         
---------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_15(x integer)+
-  RETURNS boolean                                                  +
-  LANGUAGE sql                                                     +
- BEGIN ATOMIC                                                      +
-  SELECT                                                           +
-          CASE                                                     +
-              WHEN ((x % 2) = 0) THEN true                         +
-              ELSE false                                           +
-          END AS "case";                                           +
- END                                                               +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_15()
 SELECT pg_get_functiondef('functest_S_16'::regproc);
-                              pg_get_functiondef                               
--------------------------------------------------------------------------------
- CREATE OR REPLACE FUNCTION temp_func_test.functest_s_16(a integer, b integer)+
-  RETURNS void                                                                +
-  LANGUAGE sql                                                                +
- BEGIN ATOMIC                                                                 +
-  INSERT INTO functest1 (i)  SELECT (functest_s_16.a + functest_s_16.b);      +
- END                                                                          +
- 
-(1 row)
-
+ERROR:  unknown function: functest_s_16()
 DROP TABLE functest1 CASCADE;
-NOTICE:  drop cascades to function functest_s_16(integer,integer)
 -- test with views
 CREATE TABLE functest3 (a int);
 INSERT INTO functest3 VALUES (1), (2);
 CREATE VIEW functestv3 AS SELECT * FROM functest3;
 CREATE FUNCTION functest_S_14() RETURNS bigint
     RETURN (SELECT count(*) FROM functestv3);
-SELECT functest_S_14();
- functest_s_14 
----------------
-             2
-(1 row)
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
 
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+SELECT functest_S_14();
+ERROR:  unknown function: functest_s_14()
 DROP TABLE functest3 CASCADE;
-NOTICE:  drop cascades to 2 other objects
-DETAIL:  drop cascades to view functestv3
-drop cascades to function functest_s_14()
 -- information_schema tests
 CREATE FUNCTION functest_IS_1(a int, b int default 1, c text default 'foo')
     RETURNS int
@@ -463,6 +518,7 @@
     RETURNS int
     LANGUAGE SQL
     AS 'SELECT $1';
+ERROR:  no value provided for placeholder: $1
 CREATE FUNCTION functest_IS_3(a int default 1, out b int)
     RETURNS int
     LANGUAGE SQL
@@ -474,15 +530,14 @@
  routine_name  | ordinal_position | parameter_name | parameter_default 
 ---------------+------------------+----------------+-------------------
  functest_is_1 |                1 | a              | 
- functest_is_1 |                2 | b              | 1
- functest_is_1 |                3 | c              | 'foo'::text
- functest_is_2 |                1 | a              | 
- functest_is_2 |                2 | b              | 1
- functest_is_3 |                1 | a              | 1
+ functest_is_1 |                2 | b              | 
+ functest_is_1 |                3 | c              | 
+ functest_is_3 |                1 | a              | 
  functest_is_3 |                2 | b              | 
-(7 rows)
+(5 rows)
 
 DROP FUNCTION functest_IS_1(int, int, text), functest_IS_2(int), functest_IS_3(int);
+ERROR:  unknown function: functest_is_2()
 -- routine usage views
 CREATE FUNCTION functest_IS_4a() RETURNS int LANGUAGE SQL AS 'SELECT 1';
 CREATE FUNCTION functest_IS_4b(x int DEFAULT functest_IS_4a()) RETURNS int LANGUAGE SQL AS 'SELECT x';
@@ -495,11 +550,35 @@
     RETURNS int
     LANGUAGE SQL
     RETURN nextval('functest1');
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE TABLE functest2 (a int, b int);
 CREATE FUNCTION functest_IS_7()
     RETURNS int
     LANGUAGE SQL
     RETURN (SELECT count(a) FROM functest2);
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 SELECT r0.routine_name, r1.routine_name
   FROM information_schema.routine_routine_usage rru
        JOIN information_schema.routines r0 ON r0.specific_name = rru.specific_name
@@ -507,61 +586,63 @@
   WHERE r0.routine_schema = 'temp_func_test' AND
         r1.routine_schema = 'temp_func_test'
   ORDER BY 1, 2;
-  routine_name  |  routine_name  
-----------------+----------------
- functest_is_4b | functest_is_4a
-(1 row)
-
+ERROR:  relation "information_schema.routine_routine_usage" does not exist
 SELECT routine_name, sequence_name FROM information_schema.routine_sequence_usage
   WHERE routine_schema = 'temp_func_test'
   ORDER BY 1, 2;
- routine_name  | sequence_name 
----------------+---------------
- functest_is_5 | functest1
- functest_is_6 | functest1
-(2 rows)
-
+ERROR:  relation "information_schema.routine_sequence_usage" does not exist
 SELECT routine_name, table_name, column_name FROM information_schema.routine_column_usage
   WHERE routine_schema = 'temp_func_test'
   ORDER BY 1, 2;
- routine_name  | table_name | column_name 
----------------+------------+-------------
- functest_is_7 | functest2  | a
-(1 row)
-
+ERROR:  relation "information_schema.routine_column_usage" does not exist
 SELECT routine_name, table_name FROM information_schema.routine_table_usage
   WHERE routine_schema = 'temp_func_test'
   ORDER BY 1, 2;
- routine_name  | table_name 
----------------+------------
- functest_is_7 | functest2
-(1 row)
-
+ERROR:  relation "information_schema.routine_table_usage" does not exist
 DROP FUNCTION functest_IS_4a CASCADE;
-NOTICE:  drop cascades to function functest_is_4b(integer)
+ERROR:  unimplemented: drop function cascade not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 DROP SEQUENCE functest1 CASCADE;
-NOTICE:  drop cascades to 2 other objects
-DETAIL:  drop cascades to function functest_is_5(integer)
-drop cascades to function functest_is_6()
 DROP TABLE functest2 CASCADE;
-NOTICE:  drop cascades to function functest_is_7()
 -- overload
 CREATE FUNCTION functest_B_2(bigint) RETURNS bool LANGUAGE 'sql'
        IMMUTABLE AS 'SELECT $1 > 0';
+ERROR:  function "functest_b_2" already exists with same argument types
 DROP FUNCTION functest_b_1;
 DROP FUNCTION functest_b_1;  -- error, not found
-ERROR:  could not find a function named "functest_b_1"
+ERROR:  unknown function: functest_b_1()
 DROP FUNCTION functest_b_2;  -- error, ambiguous
-ERROR:  function name "functest_b_2" is not unique
-HINT:  Specify the argument list to select the function unambiguously.
 -- CREATE OR REPLACE tests
 CREATE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL AS 'SELECT $1';
 CREATE OR REPLACE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL WINDOW AS 'SELECT $1';
-ERROR:  cannot change routine kind
-DETAIL:  "functest1" is a function.
+ERROR:  at or near "window": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE OR REPLACE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL WINDOW AS 'SELECT $1'
+                                                                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE OR REPLACE PROCEDURE functest1(a int) LANGUAGE SQL AS 'SELECT $1';
 ERROR:  cannot change routine kind
-DETAIL:  "functest1" is a function.
+DETAIL:  "functest1" is a function
 DROP FUNCTION functest1(a int);
 -- inlining of set-returning functions
 CREATE TABLE functest3 (a int);
@@ -581,35 +662,38 @@
 (3 rows)
 
 EXPLAIN (verbose, costs off) SELECT * FROM functest_sri1();
-              QUERY PLAN              
---------------------------------------
- Seq Scan on temp_func_test.functest3
-   Output: functest3.a
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (verbose, costs off) SELECT * FROM functest_sri1()
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE FUNCTION functest_sri2() RETURNS SETOF int
 LANGUAGE SQL
 STABLE
 BEGIN ATOMIC
     SELECT * FROM functest3;
 END;
-SELECT * FROM functest_sri2();
- functest_sri2 
----------------
-             1
-             2
-             3
-(3 rows)
+ERROR:  unimplemented: CREATE FUNCTION...sql_body unimplemented
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2();
-              QUERY PLAN              
---------------------------------------
- Seq Scan on temp_func_test.functest3
-   Output: functest3.a
-(2 rows)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
+SELECT * FROM functest_sri2();
+ERROR:  unknown function: functest_sri2()
+EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2();
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2()
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 DROP TABLE functest3 CASCADE;
-NOTICE:  drop cascades to function functest_sri2()
 -- Check behavior of VOID-returning SQL functions
 CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS
 $$ SELECT a + 1 $$;
@@ -629,12 +713,11 @@
 
 -- currently, we can inline voidtest2 but not voidtest1
 EXPLAIN (verbose, costs off) SELECT voidtest2(11,22);
-       QUERY PLAN        
--------------------------
- Result
-   Output: voidtest1(33)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (verbose, costs off) SELECT voidtest2(11,22)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE TEMP TABLE sometable(f1 int);
 CREATE FUNCTION voidtest3(a int) RETURNS VOID LANGUAGE SQL AS
 $$ INSERT INTO sometable VALUES(a + 1) $$;
@@ -664,7 +747,8 @@
 SELECT * FROM voidtest5(3);
  voidtest5 
 -----------
-(0 rows)
+ 
+(1 row)
 
 -- Regression tests for bugs:
 -- Check that arguments that are R/W expanded datums aren't corrupted by
@@ -674,70 +758,60 @@
 CREATE FUNCTION double_append(anyarray, anyelement) RETURNS SETOF anyarray
 LANGUAGE SQL IMMUTABLE AS
 $$ SELECT array_append($1, $2) || array_append($1, $2) $$;
+ERROR:  ambiguous call: array_append(anyelement[], anyelement), candidates are:
+array_append(bool[], bool) -> bool[]
+array_append(box2d[], box2d) -> box2d[]
+array_append(int[], int) -> int[]
+array_append(float[], float) -> float[]
+array_append(decimal[], decimal) -> decimal[]
+array_append(date[], date) -> date[]
+array_append(timestamp[], timestamp) -> timestamp[]
+array_append(interval[], interval) -> interval[]
+array_append(geography[], geography) -> geography[]
+array_append(geometry[], geometry) -> geometry[]
+array_append(string[], string) -> string[]
+array_append(bytes[], bytes) -> bytes[]
+array_append(timestamptz[], timestamptz) -> timestamptz[]
+array_append(oid[], oid) -> oid[]
+array_append(uuid[], uuid) -> uuid[]
+array_append(inet[], inet) -> inet[]
+array_append(pg_lsn[], pg_lsn) -> pg_lsn[]
+array_append(refcursor[], refcursor) -> refcursor[]
+array_append(time[], time) -> time[]
+array_append(timetz[], timetz) -> timetz[]
+array_append(jsonb[], jsonb) -> jsonb[]
+array_append(varbit[], varbit) -> varbit[]
+array_append(anyenum[], anyenum) -> anyenum[]
+array_append(tuple[], tuple) -> tuple[]
+
 SELECT double_append(array_append(ARRAY[q1], q2), q3)
   FROM (VALUES(1,2,3), (4,5,6)) v(q1,q2,q3);
- double_append 
----------------
- {1,2,3,1,2,3}
- {4,5,6,4,5,6}
-(2 rows)
-
+ERROR:  unknown function: double_append()
 -- Things that shouldn't work:
 CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
     AS 'SELECT ''not an integer'';';
-ERROR:  return type mismatch in function declared to return integer
-DETAIL:  Actual return type is text.
-CONTEXT:  SQL function "test1"
+ERROR:  return type mismatch in function declared to return int
+DETAIL:  Actual return type is string
 CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
     AS 'not even SQL';
-ERROR:  syntax error at or near "not"
-LINE 2:     AS 'not even SQL';
-                ^
+ERROR:  at or near "not": syntax error
+DETAIL:  source SQL:
+not even SQL
+^
 CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
     AS 'SELECT 1, 2, 3;';
-ERROR:  return type mismatch in function declared to return integer
-DETAIL:  Final statement must return exactly one column.
-CONTEXT:  SQL function "test1"
+ERROR:  return type mismatch in function declared to return int
+DETAIL:  Actual return type is record
 CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
     AS 'SELECT $2;';
-ERROR:  there is no parameter $2
-LINE 2:     AS 'SELECT $2;';
-                       ^
+ERROR:  no value provided for placeholder: $2
 CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
     AS 'a', 'b';
-ERROR:  only one AS item needed for language "sql"
+ERROR:  at or near "a": syntax error
+DETAIL:  source SQL:
+a
+^
 -- Cleanup
 DROP SCHEMA temp_func_test CASCADE;
-NOTICE:  drop cascades to 30 other objects
-DETAIL:  drop cascades to function functest_a_1(text,date)
-drop cascades to function functest_a_2(text[])
-drop cascades to function functest_a_3()
-drop cascades to function functest_b_2(integer)
-drop cascades to function functest_b_3(integer)
-drop cascades to function functest_b_4(integer)
-drop cascades to function functest_c_1(integer)
-drop cascades to function functest_c_2(integer)
-drop cascades to function functest_c_3(integer)
-drop cascades to function functest_e_1(integer)
-drop cascades to function functest_e_2(integer)
-drop cascades to function functest_f_1(integer)
-drop cascades to function functest_f_2(integer)
-drop cascades to function functest_f_3(integer)
-drop cascades to function functest_f_4(integer)
-drop cascades to function functest_s_1(text,date)
-drop cascades to function functest_s_2(text[])
-drop cascades to function functest_s_3()
-drop cascades to function functest_s_3a()
-drop cascades to function functest_s_10(text,date)
-drop cascades to function functest_s_13()
-drop cascades to function functest_s_15(integer)
-drop cascades to function functest_b_2(bigint)
-drop cascades to function functest_sri1()
-drop cascades to function voidtest1(integer)
-drop cascades to function voidtest2(integer,integer)
-drop cascades to function voidtest3(integer)
-drop cascades to function voidtest4(integer)
-drop cascades to function voidtest5(integer)
-drop cascades to function double_append(anyarray,anyelement)
 DROP USER regress_unpriv_user;
 RESET search_path;
