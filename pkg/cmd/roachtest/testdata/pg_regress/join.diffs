diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/join.out --label=/mnt/data1/postgres/src/test/regress/results/join.out /mnt/data1/postgres/src/test/regress/expected/join.out /mnt/data1/postgres/src/test/regress/results/join.out
--- /mnt/data1/postgres/src/test/regress/expected/join.out
+++ /mnt/data1/postgres/src/test/regress/results/join.out
@@ -113,103 +113,103 @@
  a | b |   c   | d | e  
 ---+---+-------+---+----
  1 | 4 | one   | 1 | -1
- 2 | 3 | two   | 1 | -1
- 3 | 2 | three | 1 | -1
- 4 | 1 | four  | 1 | -1
- 5 | 0 | five  | 1 | -1
- 6 | 6 | six   | 1 | -1
- 7 | 7 | seven | 1 | -1
- 8 | 8 | eight | 1 | -1
- 0 |   | zero  | 1 | -1
-   |   | null  | 1 | -1
-   | 0 | zero  | 1 | -1
  1 | 4 | one   | 2 |  2
- 2 | 3 | two   | 2 |  2
- 3 | 2 | three | 2 |  2
- 4 | 1 | four  | 2 |  2
- 5 | 0 | five  | 2 |  2
- 6 | 6 | six   | 2 |  2
- 7 | 7 | seven | 2 |  2
- 8 | 8 | eight | 2 |  2
- 0 |   | zero  | 2 |  2
-   |   | null  | 2 |  2
-   | 0 | zero  | 2 |  2
  1 | 4 | one   | 3 | -3
- 2 | 3 | two   | 3 | -3
- 3 | 2 | three | 3 | -3
- 4 | 1 | four  | 3 | -3
- 5 | 0 | five  | 3 | -3
- 6 | 6 | six   | 3 | -3
- 7 | 7 | seven | 3 | -3
- 8 | 8 | eight | 3 | -3
- 0 |   | zero  | 3 | -3
-   |   | null  | 3 | -3
-   | 0 | zero  | 3 | -3
  1 | 4 | one   | 2 |  4
- 2 | 3 | two   | 2 |  4
- 3 | 2 | three | 2 |  4
- 4 | 1 | four  | 2 |  4
- 5 | 0 | five  | 2 |  4
- 6 | 6 | six   | 2 |  4
- 7 | 7 | seven | 2 |  4
- 8 | 8 | eight | 2 |  4
- 0 |   | zero  | 2 |  4
-   |   | null  | 2 |  4
-   | 0 | zero  | 2 |  4
  1 | 4 | one   | 5 | -5
- 2 | 3 | two   | 5 | -5
- 3 | 2 | three | 5 | -5
- 4 | 1 | four  | 5 | -5
- 5 | 0 | five  | 5 | -5
- 6 | 6 | six   | 5 | -5
- 7 | 7 | seven | 5 | -5
- 8 | 8 | eight | 5 | -5
- 0 |   | zero  | 5 | -5
-   |   | null  | 5 | -5
-   | 0 | zero  | 5 | -5
  1 | 4 | one   | 5 | -5
- 2 | 3 | two   | 5 | -5
- 3 | 2 | three | 5 | -5
- 4 | 1 | four  | 5 | -5
- 5 | 0 | five  | 5 | -5
- 6 | 6 | six   | 5 | -5
- 7 | 7 | seven | 5 | -5
- 8 | 8 | eight | 5 | -5
- 0 |   | zero  | 5 | -5
-   |   | null  | 5 | -5
-   | 0 | zero  | 5 | -5
  1 | 4 | one   | 0 |   
- 2 | 3 | two   | 0 |   
- 3 | 2 | three | 0 |   
- 4 | 1 | four  | 0 |   
- 5 | 0 | five  | 0 |   
- 6 | 6 | six   | 0 |   
- 7 | 7 | seven | 0 |   
- 8 | 8 | eight | 0 |   
- 0 |   | zero  | 0 |   
-   |   | null  | 0 |   
-   | 0 | zero  | 0 |   
  1 | 4 | one   |   |   
- 2 | 3 | two   |   |   
- 3 | 2 | three |   |   
- 4 | 1 | four  |   |   
- 5 | 0 | five  |   |   
- 6 | 6 | six   |   |   
- 7 | 7 | seven |   |   
- 8 | 8 | eight |   |   
- 0 |   | zero  |   |   
-   |   | null  |   |   
-   | 0 | zero  |   |   
  1 | 4 | one   |   |  0
+ 2 | 3 | two   | 1 | -1
+ 2 | 3 | two   | 2 |  2
+ 2 | 3 | two   | 3 | -3
+ 2 | 3 | two   | 2 |  4
+ 2 | 3 | two   | 5 | -5
+ 2 | 3 | two   | 5 | -5
+ 2 | 3 | two   | 0 |   
+ 2 | 3 | two   |   |   
  2 | 3 | two   |   |  0
+ 3 | 2 | three | 1 | -1
+ 3 | 2 | three | 2 |  2
+ 3 | 2 | three | 3 | -3
+ 3 | 2 | three | 2 |  4
+ 3 | 2 | three | 5 | -5
+ 3 | 2 | three | 5 | -5
+ 3 | 2 | three | 0 |   
+ 3 | 2 | three |   |   
  3 | 2 | three |   |  0
+ 4 | 1 | four  | 1 | -1
+ 4 | 1 | four  | 2 |  2
+ 4 | 1 | four  | 3 | -3
+ 4 | 1 | four  | 2 |  4
+ 4 | 1 | four  | 5 | -5
+ 4 | 1 | four  | 5 | -5
+ 4 | 1 | four  | 0 |   
+ 4 | 1 | four  |   |   
  4 | 1 | four  |   |  0
+ 5 | 0 | five  | 1 | -1
+ 5 | 0 | five  | 2 |  2
+ 5 | 0 | five  | 3 | -3
+ 5 | 0 | five  | 2 |  4
+ 5 | 0 | five  | 5 | -5
+ 5 | 0 | five  | 5 | -5
+ 5 | 0 | five  | 0 |   
+ 5 | 0 | five  |   |   
  5 | 0 | five  |   |  0
+ 6 | 6 | six   | 1 | -1
+ 6 | 6 | six   | 2 |  2
+ 6 | 6 | six   | 3 | -3
+ 6 | 6 | six   | 2 |  4
+ 6 | 6 | six   | 5 | -5
+ 6 | 6 | six   | 5 | -5
+ 6 | 6 | six   | 0 |   
+ 6 | 6 | six   |   |   
  6 | 6 | six   |   |  0
+ 7 | 7 | seven | 1 | -1
+ 7 | 7 | seven | 2 |  2
+ 7 | 7 | seven | 3 | -3
+ 7 | 7 | seven | 2 |  4
+ 7 | 7 | seven | 5 | -5
+ 7 | 7 | seven | 5 | -5
+ 7 | 7 | seven | 0 |   
+ 7 | 7 | seven |   |   
  7 | 7 | seven |   |  0
+ 8 | 8 | eight | 1 | -1
+ 8 | 8 | eight | 2 |  2
+ 8 | 8 | eight | 3 | -3
+ 8 | 8 | eight | 2 |  4
+ 8 | 8 | eight | 5 | -5
+ 8 | 8 | eight | 5 | -5
+ 8 | 8 | eight | 0 |   
+ 8 | 8 | eight |   |   
  8 | 8 | eight |   |  0
+ 0 |   | zero  | 1 | -1
+ 0 |   | zero  | 2 |  2
+ 0 |   | zero  | 3 | -3
+ 0 |   | zero  | 2 |  4
+ 0 |   | zero  | 5 | -5
+ 0 |   | zero  | 5 | -5
+ 0 |   | zero  | 0 |   
+ 0 |   | zero  |   |   
  0 |   | zero  |   |  0
+   |   | null  | 1 | -1
+   |   | null  | 2 |  2
+   |   | null  | 3 | -3
+   |   | null  | 2 |  4
+   |   | null  | 5 | -5
+   |   | null  | 5 | -5
+   |   | null  | 0 |   
+   |   | null  |   |   
    |   | null  |   |  0
+   | 0 | zero  | 1 | -1
+   | 0 | zero  | 2 |  2
+   | 0 | zero  | 3 | -3
+   | 0 | zero  | 2 |  4
+   | 0 | zero  | 5 | -5
+   | 0 | zero  | 5 | -5
+   | 0 | zero  | 0 |   
+   | 0 | zero  |   |   
    | 0 | zero  |   |  0
 (99 rows)
 
@@ -218,13 +218,13 @@
   WHERE t1.a = t2.d;
  a | e  
 ---+----
- 0 |   
  1 | -1
  2 |  2
  2 |  4
  3 | -3
  5 | -5
  5 | -5
+ 0 |   
 (7 rows)
 
 --
@@ -237,215 +237,213 @@
  i | j |   t   | i | k  
 ---+---+-------+---+----
  1 | 4 | one   | 1 | -1
- 2 | 3 | two   | 1 | -1
- 3 | 2 | three | 1 | -1
- 4 | 1 | four  | 1 | -1
- 5 | 0 | five  | 1 | -1
- 6 | 6 | six   | 1 | -1
- 7 | 7 | seven | 1 | -1
- 8 | 8 | eight | 1 | -1
- 0 |   | zero  | 1 | -1
-   |   | null  | 1 | -1
-   | 0 | zero  | 1 | -1
  1 | 4 | one   | 2 |  2
- 2 | 3 | two   | 2 |  2
- 3 | 2 | three | 2 |  2
- 4 | 1 | four  | 2 |  2
- 5 | 0 | five  | 2 |  2
- 6 | 6 | six   | 2 |  2
- 7 | 7 | seven | 2 |  2
- 8 | 8 | eight | 2 |  2
- 0 |   | zero  | 2 |  2
-   |   | null  | 2 |  2
-   | 0 | zero  | 2 |  2
  1 | 4 | one   | 3 | -3
- 2 | 3 | two   | 3 | -3
- 3 | 2 | three | 3 | -3
- 4 | 1 | four  | 3 | -3
- 5 | 0 | five  | 3 | -3
- 6 | 6 | six   | 3 | -3
- 7 | 7 | seven | 3 | -3
- 8 | 8 | eight | 3 | -3
- 0 |   | zero  | 3 | -3
-   |   | null  | 3 | -3
-   | 0 | zero  | 3 | -3
  1 | 4 | one   | 2 |  4
- 2 | 3 | two   | 2 |  4
- 3 | 2 | three | 2 |  4
- 4 | 1 | four  | 2 |  4
- 5 | 0 | five  | 2 |  4
- 6 | 6 | six   | 2 |  4
- 7 | 7 | seven | 2 |  4
- 8 | 8 | eight | 2 |  4
- 0 |   | zero  | 2 |  4
-   |   | null  | 2 |  4
-   | 0 | zero  | 2 |  4
  1 | 4 | one   | 5 | -5
- 2 | 3 | two   | 5 | -5
- 3 | 2 | three | 5 | -5
- 4 | 1 | four  | 5 | -5
- 5 | 0 | five  | 5 | -5
- 6 | 6 | six   | 5 | -5
- 7 | 7 | seven | 5 | -5
- 8 | 8 | eight | 5 | -5
- 0 |   | zero  | 5 | -5
-   |   | null  | 5 | -5
-   | 0 | zero  | 5 | -5
  1 | 4 | one   | 5 | -5
- 2 | 3 | two   | 5 | -5
- 3 | 2 | three | 5 | -5
- 4 | 1 | four  | 5 | -5
- 5 | 0 | five  | 5 | -5
- 6 | 6 | six   | 5 | -5
- 7 | 7 | seven | 5 | -5
- 8 | 8 | eight | 5 | -5
- 0 |   | zero  | 5 | -5
-   |   | null  | 5 | -5
-   | 0 | zero  | 5 | -5
  1 | 4 | one   | 0 |   
- 2 | 3 | two   | 0 |   
- 3 | 2 | three | 0 |   
- 4 | 1 | four  | 0 |   
- 5 | 0 | five  | 0 |   
- 6 | 6 | six   | 0 |   
- 7 | 7 | seven | 0 |   
- 8 | 8 | eight | 0 |   
- 0 |   | zero  | 0 |   
-   |   | null  | 0 |   
-   | 0 | zero  | 0 |   
  1 | 4 | one   |   |   
- 2 | 3 | two   |   |   
- 3 | 2 | three |   |   
- 4 | 1 | four  |   |   
- 5 | 0 | five  |   |   
- 6 | 6 | six   |   |   
- 7 | 7 | seven |   |   
- 8 | 8 | eight |   |   
- 0 |   | zero  |   |   
-   |   | null  |   |   
-   | 0 | zero  |   |   
  1 | 4 | one   |   |  0
+ 2 | 3 | two   | 1 | -1
+ 2 | 3 | two   | 2 |  2
+ 2 | 3 | two   | 3 | -3
+ 2 | 3 | two   | 2 |  4
+ 2 | 3 | two   | 5 | -5
+ 2 | 3 | two   | 5 | -5
+ 2 | 3 | two   | 0 |   
+ 2 | 3 | two   |   |   
  2 | 3 | two   |   |  0
+ 3 | 2 | three | 1 | -1
+ 3 | 2 | three | 2 |  2
+ 3 | 2 | three | 3 | -3
+ 3 | 2 | three | 2 |  4
+ 3 | 2 | three | 5 | -5
+ 3 | 2 | three | 5 | -5
+ 3 | 2 | three | 0 |   
+ 3 | 2 | three |   |   
  3 | 2 | three |   |  0
+ 4 | 1 | four  | 1 | -1
+ 4 | 1 | four  | 2 |  2
+ 4 | 1 | four  | 3 | -3
+ 4 | 1 | four  | 2 |  4
+ 4 | 1 | four  | 5 | -5
+ 4 | 1 | four  | 5 | -5
+ 4 | 1 | four  | 0 |   
+ 4 | 1 | four  |   |   
  4 | 1 | four  |   |  0
+ 5 | 0 | five  | 1 | -1
+ 5 | 0 | five  | 2 |  2
+ 5 | 0 | five  | 3 | -3
+ 5 | 0 | five  | 2 |  4
+ 5 | 0 | five  | 5 | -5
+ 5 | 0 | five  | 5 | -5
+ 5 | 0 | five  | 0 |   
+ 5 | 0 | five  |   |   
  5 | 0 | five  |   |  0
+ 6 | 6 | six   | 1 | -1
+ 6 | 6 | six   | 2 |  2
+ 6 | 6 | six   | 3 | -3
+ 6 | 6 | six   | 2 |  4
+ 6 | 6 | six   | 5 | -5
+ 6 | 6 | six   | 5 | -5
+ 6 | 6 | six   | 0 |   
+ 6 | 6 | six   |   |   
  6 | 6 | six   |   |  0
+ 7 | 7 | seven | 1 | -1
+ 7 | 7 | seven | 2 |  2
+ 7 | 7 | seven | 3 | -3
+ 7 | 7 | seven | 2 |  4
+ 7 | 7 | seven | 5 | -5
+ 7 | 7 | seven | 5 | -5
+ 7 | 7 | seven | 0 |   
+ 7 | 7 | seven |   |   
  7 | 7 | seven |   |  0
+ 8 | 8 | eight | 1 | -1
+ 8 | 8 | eight | 2 |  2
+ 8 | 8 | eight | 3 | -3
+ 8 | 8 | eight | 2 |  4
+ 8 | 8 | eight | 5 | -5
+ 8 | 8 | eight | 5 | -5
+ 8 | 8 | eight | 0 |   
+ 8 | 8 | eight |   |   
  8 | 8 | eight |   |  0
+ 0 |   | zero  | 1 | -1
+ 0 |   | zero  | 2 |  2
+ 0 |   | zero  | 3 | -3
+ 0 |   | zero  | 2 |  4
+ 0 |   | zero  | 5 | -5
+ 0 |   | zero  | 5 | -5
+ 0 |   | zero  | 0 |   
+ 0 |   | zero  |   |   
  0 |   | zero  |   |  0
+   |   | null  | 1 | -1
+   |   | null  | 2 |  2
+   |   | null  | 3 | -3
+   |   | null  | 2 |  4
+   |   | null  | 5 | -5
+   |   | null  | 5 | -5
+   |   | null  | 0 |   
+   |   | null  |   |   
    |   | null  |   |  0
+   | 0 | zero  | 1 | -1
+   | 0 | zero  | 2 |  2
+   | 0 | zero  | 3 | -3
+   | 0 | zero  | 2 |  4
+   | 0 | zero  | 5 | -5
+   | 0 | zero  | 5 | -5
+   | 0 | zero  | 0 |   
+   | 0 | zero  |   |   
    | 0 | zero  |   |  0
 (99 rows)
 
 -- ambiguous column
 SELECT i, k, t
   FROM J1_TBL CROSS JOIN J2_TBL;
-ERROR:  column reference "i" is ambiguous
-LINE 1: SELECT i, k, t
-               ^
+ERROR:  column reference "i" is ambiguous (candidates: j1_tbl.i, j2_tbl.i)
 -- resolve previous ambiguity by specifying the table name
 SELECT t1.i, k, t
   FROM J1_TBL t1 CROSS JOIN J2_TBL t2;
  i | k  |   t   
 ---+----+-------
  1 | -1 | one
- 2 | -1 | two
- 3 | -1 | three
- 4 | -1 | four
- 5 | -1 | five
- 6 | -1 | six
- 7 | -1 | seven
- 8 | -1 | eight
- 0 | -1 | zero
-   | -1 | null
-   | -1 | zero
  1 |  2 | one
- 2 |  2 | two
- 3 |  2 | three
- 4 |  2 | four
- 5 |  2 | five
- 6 |  2 | six
- 7 |  2 | seven
- 8 |  2 | eight
- 0 |  2 | zero
-   |  2 | null
-   |  2 | zero
  1 | -3 | one
- 2 | -3 | two
- 3 | -3 | three
- 4 | -3 | four
- 5 | -3 | five
- 6 | -3 | six
- 7 | -3 | seven
- 8 | -3 | eight
- 0 | -3 | zero
-   | -3 | null
-   | -3 | zero
  1 |  4 | one
- 2 |  4 | two
- 3 |  4 | three
- 4 |  4 | four
- 5 |  4 | five
- 6 |  4 | six
- 7 |  4 | seven
- 8 |  4 | eight
- 0 |  4 | zero
-   |  4 | null
-   |  4 | zero
  1 | -5 | one
- 2 | -5 | two
- 3 | -5 | three
- 4 | -5 | four
- 5 | -5 | five
- 6 | -5 | six
- 7 | -5 | seven
- 8 | -5 | eight
- 0 | -5 | zero
-   | -5 | null
-   | -5 | zero
  1 | -5 | one
- 2 | -5 | two
- 3 | -5 | three
- 4 | -5 | four
- 5 | -5 | five
- 6 | -5 | six
- 7 | -5 | seven
- 8 | -5 | eight
- 0 | -5 | zero
-   | -5 | null
-   | -5 | zero
  1 |    | one
- 2 |    | two
- 3 |    | three
- 4 |    | four
- 5 |    | five
- 6 |    | six
- 7 |    | seven
- 8 |    | eight
- 0 |    | zero
-   |    | null
-   |    | zero
  1 |    | one
- 2 |    | two
- 3 |    | three
- 4 |    | four
- 5 |    | five
- 6 |    | six
- 7 |    | seven
- 8 |    | eight
- 0 |    | zero
-   |    | null
-   |    | zero
  1 |  0 | one
+ 2 | -1 | two
+ 2 |  2 | two
+ 2 | -3 | two
+ 2 |  4 | two
+ 2 | -5 | two
+ 2 | -5 | two
+ 2 |    | two
+ 2 |    | two
  2 |  0 | two
+ 3 | -1 | three
+ 3 |  2 | three
+ 3 | -3 | three
+ 3 |  4 | three
+ 3 | -5 | three
+ 3 | -5 | three
+ 3 |    | three
+ 3 |    | three
  3 |  0 | three
+ 4 | -1 | four
+ 4 |  2 | four
+ 4 | -3 | four
+ 4 |  4 | four
+ 4 | -5 | four
+ 4 | -5 | four
+ 4 |    | four
+ 4 |    | four
  4 |  0 | four
+ 5 | -1 | five
+ 5 |  2 | five
+ 5 | -3 | five
+ 5 |  4 | five
+ 5 | -5 | five
+ 5 | -5 | five
+ 5 |    | five
+ 5 |    | five
  5 |  0 | five
+ 6 | -1 | six
+ 6 |  2 | six
+ 6 | -3 | six
+ 6 |  4 | six
+ 6 | -5 | six
+ 6 | -5 | six
+ 6 |    | six
+ 6 |    | six
  6 |  0 | six
+ 7 | -1 | seven
+ 7 |  2 | seven
+ 7 | -3 | seven
+ 7 |  4 | seven
+ 7 | -5 | seven
+ 7 | -5 | seven
+ 7 |    | seven
+ 7 |    | seven
  7 |  0 | seven
+ 8 | -1 | eight
+ 8 |  2 | eight
+ 8 | -3 | eight
+ 8 |  4 | eight
+ 8 | -5 | eight
+ 8 | -5 | eight
+ 8 |    | eight
+ 8 |    | eight
  8 |  0 | eight
+ 0 | -1 | zero
+ 0 |  2 | zero
+ 0 | -3 | zero
+ 0 |  4 | zero
+ 0 | -5 | zero
+ 0 | -5 | zero
+ 0 |    | zero
+ 0 |    | zero
  0 |  0 | zero
+   | -1 | null
+   |  2 | null
+   | -3 | null
+   |  4 | null
+   | -5 | null
+   | -5 | null
+   |    | null
+   |    | null
    |  0 | null
+   | -1 | zero
+   |  2 | zero
+   | -3 | zero
+   |  4 | zero
+   | -5 | zero
+   | -5 | zero
+   |    | zero
+   |    | zero
    |  0 | zero
 (99 rows)
 
@@ -455,103 +453,103 @@
  ii |  tt   | kk 
 ----+-------+----
   1 | one   | -1
-  2 | two   | -1
-  3 | three | -1
-  4 | four  | -1
-  5 | five  | -1
-  6 | six   | -1
-  7 | seven | -1
-  8 | eight | -1
-  0 | zero  | -1
-    | null  | -1
-    | zero  | -1
   1 | one   |  2
-  2 | two   |  2
-  3 | three |  2
-  4 | four  |  2
-  5 | five  |  2
-  6 | six   |  2
-  7 | seven |  2
-  8 | eight |  2
-  0 | zero  |  2
-    | null  |  2
-    | zero  |  2
   1 | one   | -3
-  2 | two   | -3
-  3 | three | -3
-  4 | four  | -3
-  5 | five  | -3
-  6 | six   | -3
-  7 | seven | -3
-  8 | eight | -3
-  0 | zero  | -3
-    | null  | -3
-    | zero  | -3
   1 | one   |  4
-  2 | two   |  4
-  3 | three |  4
-  4 | four  |  4
-  5 | five  |  4
-  6 | six   |  4
-  7 | seven |  4
-  8 | eight |  4
-  0 | zero  |  4
-    | null  |  4
-    | zero  |  4
   1 | one   | -5
-  2 | two   | -5
-  3 | three | -5
-  4 | four  | -5
-  5 | five  | -5
-  6 | six   | -5
-  7 | seven | -5
-  8 | eight | -5
-  0 | zero  | -5
-    | null  | -5
-    | zero  | -5
   1 | one   | -5
-  2 | two   | -5
-  3 | three | -5
-  4 | four  | -5
-  5 | five  | -5
-  6 | six   | -5
-  7 | seven | -5
-  8 | eight | -5
-  0 | zero  | -5
-    | null  | -5
-    | zero  | -5
   1 | one   |   
-  2 | two   |   
-  3 | three |   
-  4 | four  |   
-  5 | five  |   
-  6 | six   |   
-  7 | seven |   
-  8 | eight |   
-  0 | zero  |   
-    | null  |   
-    | zero  |   
   1 | one   |   
-  2 | two   |   
-  3 | three |   
-  4 | four  |   
-  5 | five  |   
-  6 | six   |   
-  7 | seven |   
-  8 | eight |   
-  0 | zero  |   
-    | null  |   
-    | zero  |   
   1 | one   |  0
+  2 | two   | -1
+  2 | two   |  2
+  2 | two   | -3
+  2 | two   |  4
+  2 | two   | -5
+  2 | two   | -5
+  2 | two   |   
+  2 | two   |   
   2 | two   |  0
+  3 | three | -1
+  3 | three |  2
+  3 | three | -3
+  3 | three |  4
+  3 | three | -5
+  3 | three | -5
+  3 | three |   
+  3 | three |   
   3 | three |  0
+  4 | four  | -1
+  4 | four  |  2
+  4 | four  | -3
+  4 | four  |  4
+  4 | four  | -5
+  4 | four  | -5
+  4 | four  |   
+  4 | four  |   
   4 | four  |  0
+  5 | five  | -1
+  5 | five  |  2
+  5 | five  | -3
+  5 | five  |  4
+  5 | five  | -5
+  5 | five  | -5
+  5 | five  |   
+  5 | five  |   
   5 | five  |  0
+  6 | six   | -1
+  6 | six   |  2
+  6 | six   | -3
+  6 | six   |  4
+  6 | six   | -5
+  6 | six   | -5
+  6 | six   |   
+  6 | six   |   
   6 | six   |  0
+  7 | seven | -1
+  7 | seven |  2
+  7 | seven | -3
+  7 | seven |  4
+  7 | seven | -5
+  7 | seven | -5
+  7 | seven |   
+  7 | seven |   
   7 | seven |  0
+  8 | eight | -1
+  8 | eight |  2
+  8 | eight | -3
+  8 | eight |  4
+  8 | eight | -5
+  8 | eight | -5
+  8 | eight |   
+  8 | eight |   
   8 | eight |  0
+  0 | zero  | -1
+  0 | zero  |  2
+  0 | zero  | -3
+  0 | zero  |  4
+  0 | zero  | -5
+  0 | zero  | -5
+  0 | zero  |   
+  0 | zero  |   
   0 | zero  |  0
+    | null  | -1
+    | null  |  2
+    | null  | -3
+    | null  |  4
+    | null  | -5
+    | null  | -5
+    | null  |   
+    | null  |   
     | null  |  0
+    | zero  | -1
+    | zero  |  2
+    | zero  | -3
+    | zero  |  4
+    | zero  | -5
+    | zero  | -5
+    | zero  |   
+    | zero  |   
     | zero  |  0
 (99 rows)
 
@@ -561,103 +559,103 @@
  ii | jj | kk 
 ----+----+----
   1 |  4 | -1
-  2 |  3 | -1
-  3 |  2 | -1
-  4 |  1 | -1
-  5 |  0 | -1
-  6 |  6 | -1
-  7 |  7 | -1
-  8 |  8 | -1
-  0 |    | -1
-    |    | -1
-    |  0 | -1
   1 |  4 |  2
-  2 |  3 |  2
-  3 |  2 |  2
-  4 |  1 |  2
-  5 |  0 |  2
-  6 |  6 |  2
-  7 |  7 |  2
-  8 |  8 |  2
-  0 |    |  2
-    |    |  2
-    |  0 |  2
   1 |  4 | -3
-  2 |  3 | -3
-  3 |  2 | -3
-  4 |  1 | -3
-  5 |  0 | -3
-  6 |  6 | -3
-  7 |  7 | -3
-  8 |  8 | -3
-  0 |    | -3
-    |    | -3
-    |  0 | -3
   1 |  4 |  4
-  2 |  3 |  4
-  3 |  2 |  4
-  4 |  1 |  4
-  5 |  0 |  4
-  6 |  6 |  4
-  7 |  7 |  4
-  8 |  8 |  4
-  0 |    |  4
-    |    |  4
-    |  0 |  4
   1 |  4 | -5
-  2 |  3 | -5
-  3 |  2 | -5
-  4 |  1 | -5
-  5 |  0 | -5
-  6 |  6 | -5
-  7 |  7 | -5
-  8 |  8 | -5
-  0 |    | -5
-    |    | -5
-    |  0 | -5
   1 |  4 | -5
-  2 |  3 | -5
-  3 |  2 | -5
-  4 |  1 | -5
-  5 |  0 | -5
-  6 |  6 | -5
-  7 |  7 | -5
-  8 |  8 | -5
-  0 |    | -5
-    |    | -5
-    |  0 | -5
   1 |  4 |   
-  2 |  3 |   
-  3 |  2 |   
-  4 |  1 |   
-  5 |  0 |   
-  6 |  6 |   
-  7 |  7 |   
-  8 |  8 |   
-  0 |    |   
-    |    |   
-    |  0 |   
   1 |  4 |   
-  2 |  3 |   
-  3 |  2 |   
-  4 |  1 |   
-  5 |  0 |   
-  6 |  6 |   
-  7 |  7 |   
-  8 |  8 |   
-  0 |    |   
-    |    |   
-    |  0 |   
   1 |  4 |  0
+  2 |  3 | -1
+  2 |  3 |  2
+  2 |  3 | -3
+  2 |  3 |  4
+  2 |  3 | -5
+  2 |  3 | -5
+  2 |  3 |   
+  2 |  3 |   
   2 |  3 |  0
+  3 |  2 | -1
+  3 |  2 |  2
+  3 |  2 | -3
+  3 |  2 |  4
+  3 |  2 | -5
+  3 |  2 | -5
+  3 |  2 |   
+  3 |  2 |   
   3 |  2 |  0
+  4 |  1 | -1
+  4 |  1 |  2
+  4 |  1 | -3
+  4 |  1 |  4
+  4 |  1 | -5
+  4 |  1 | -5
+  4 |  1 |   
+  4 |  1 |   
   4 |  1 |  0
+  5 |  0 | -1
+  5 |  0 |  2
+  5 |  0 | -3
+  5 |  0 |  4
+  5 |  0 | -5
+  5 |  0 | -5
+  5 |  0 |   
+  5 |  0 |   
   5 |  0 |  0
+  6 |  6 | -1
+  6 |  6 |  2
+  6 |  6 | -3
+  6 |  6 |  4
+  6 |  6 | -5
+  6 |  6 | -5
+  6 |  6 |   
+  6 |  6 |   
   6 |  6 |  0
+  7 |  7 | -1
+  7 |  7 |  2
+  7 |  7 | -3
+  7 |  7 |  4
+  7 |  7 | -5
+  7 |  7 | -5
+  7 |  7 |   
+  7 |  7 |   
   7 |  7 |  0
+  8 |  8 | -1
+  8 |  8 |  2
+  8 |  8 | -3
+  8 |  8 |  4
+  8 |  8 | -5
+  8 |  8 | -5
+  8 |  8 |   
+  8 |  8 |   
   8 |  8 |  0
+  0 |    | -1
+  0 |    |  2
+  0 |    | -3
+  0 |    |  4
+  0 |    | -5
+  0 |    | -5
+  0 |    |   
+  0 |    |   
   0 |    |  0
+    |    | -1
+    |    |  2
+    |    | -3
+    |    |  4
+    |    | -5
+    |    | -5
+    |    |   
+    |    |   
     |    |  0
+    |  0 | -1
+    |  0 |  2
+    |  0 | -3
+    |  0 |  4
+    |  0 | -5
+    |  0 | -5
+    |  0 |   
+    |  0 |   
     |  0 |  0
 (99 rows)
 
@@ -674,96 +672,6 @@
  1 | 4 | one   | 1 | -1 | 0 |   
  1 | 4 | one   | 1 | -1 |   |   
  1 | 4 | one   | 1 | -1 |   |  0
- 2 | 3 | two   | 1 | -1 | 1 | -1
- 2 | 3 | two   | 1 | -1 | 2 |  2
- 2 | 3 | two   | 1 | -1 | 3 | -3
- 2 | 3 | two   | 1 | -1 | 2 |  4
- 2 | 3 | two   | 1 | -1 | 5 | -5
- 2 | 3 | two   | 1 | -1 | 5 | -5
- 2 | 3 | two   | 1 | -1 | 0 |   
- 2 | 3 | two   | 1 | -1 |   |   
- 2 | 3 | two   | 1 | -1 |   |  0
- 3 | 2 | three | 1 | -1 | 1 | -1
- 3 | 2 | three | 1 | -1 | 2 |  2
- 3 | 2 | three | 1 | -1 | 3 | -3
- 3 | 2 | three | 1 | -1 | 2 |  4
- 3 | 2 | three | 1 | -1 | 5 | -5
- 3 | 2 | three | 1 | -1 | 5 | -5
- 3 | 2 | three | 1 | -1 | 0 |   
- 3 | 2 | three | 1 | -1 |   |   
- 3 | 2 | three | 1 | -1 |   |  0
- 4 | 1 | four  | 1 | -1 | 1 | -1
- 4 | 1 | four  | 1 | -1 | 2 |  2
- 4 | 1 | four  | 1 | -1 | 3 | -3
- 4 | 1 | four  | 1 | -1 | 2 |  4
- 4 | 1 | four  | 1 | -1 | 5 | -5
- 4 | 1 | four  | 1 | -1 | 5 | -5
- 4 | 1 | four  | 1 | -1 | 0 |   
- 4 | 1 | four  | 1 | -1 |   |   
- 4 | 1 | four  | 1 | -1 |   |  0
- 5 | 0 | five  | 1 | -1 | 1 | -1
- 5 | 0 | five  | 1 | -1 | 2 |  2
- 5 | 0 | five  | 1 | -1 | 3 | -3
- 5 | 0 | five  | 1 | -1 | 2 |  4
- 5 | 0 | five  | 1 | -1 | 5 | -5
- 5 | 0 | five  | 1 | -1 | 5 | -5
- 5 | 0 | five  | 1 | -1 | 0 |   
- 5 | 0 | five  | 1 | -1 |   |   
- 5 | 0 | five  | 1 | -1 |   |  0
- 6 | 6 | six   | 1 | -1 | 1 | -1
- 6 | 6 | six   | 1 | -1 | 2 |  2
- 6 | 6 | six   | 1 | -1 | 3 | -3
- 6 | 6 | six   | 1 | -1 | 2 |  4
- 6 | 6 | six   | 1 | -1 | 5 | -5
- 6 | 6 | six   | 1 | -1 | 5 | -5
- 6 | 6 | six   | 1 | -1 | 0 |   
- 6 | 6 | six   | 1 | -1 |   |   
- 6 | 6 | six   | 1 | -1 |   |  0
- 7 | 7 | seven | 1 | -1 | 1 | -1
- 7 | 7 | seven | 1 | -1 | 2 |  2
- 7 | 7 | seven | 1 | -1 | 3 | -3
- 7 | 7 | seven | 1 | -1 | 2 |  4
- 7 | 7 | seven | 1 | -1 | 5 | -5
- 7 | 7 | seven | 1 | -1 | 5 | -5
- 7 | 7 | seven | 1 | -1 | 0 |   
- 7 | 7 | seven | 1 | -1 |   |   
- 7 | 7 | seven | 1 | -1 |   |  0
- 8 | 8 | eight | 1 | -1 | 1 | -1
- 8 | 8 | eight | 1 | -1 | 2 |  2
- 8 | 8 | eight | 1 | -1 | 3 | -3
- 8 | 8 | eight | 1 | -1 | 2 |  4
- 8 | 8 | eight | 1 | -1 | 5 | -5
- 8 | 8 | eight | 1 | -1 | 5 | -5
- 8 | 8 | eight | 1 | -1 | 0 |   
- 8 | 8 | eight | 1 | -1 |   |   
- 8 | 8 | eight | 1 | -1 |   |  0
- 0 |   | zero  | 1 | -1 | 1 | -1
- 0 |   | zero  | 1 | -1 | 2 |  2
- 0 |   | zero  | 1 | -1 | 3 | -3
- 0 |   | zero  | 1 | -1 | 2 |  4
- 0 |   | zero  | 1 | -1 | 5 | -5
- 0 |   | zero  | 1 | -1 | 5 | -5
- 0 |   | zero  | 1 | -1 | 0 |   
- 0 |   | zero  | 1 | -1 |   |   
- 0 |   | zero  | 1 | -1 |   |  0
-   |   | null  | 1 | -1 | 1 | -1
-   |   | null  | 1 | -1 | 2 |  2
-   |   | null  | 1 | -1 | 3 | -3
-   |   | null  | 1 | -1 | 2 |  4
-   |   | null  | 1 | -1 | 5 | -5
-   |   | null  | 1 | -1 | 5 | -5
-   |   | null  | 1 | -1 | 0 |   
-   |   | null  | 1 | -1 |   |   
-   |   | null  | 1 | -1 |   |  0
-   | 0 | zero  | 1 | -1 | 1 | -1
-   | 0 | zero  | 1 | -1 | 2 |  2
-   | 0 | zero  | 1 | -1 | 3 | -3
-   | 0 | zero  | 1 | -1 | 2 |  4
-   | 0 | zero  | 1 | -1 | 5 | -5
-   | 0 | zero  | 1 | -1 | 5 | -5
-   | 0 | zero  | 1 | -1 | 0 |   
-   | 0 | zero  | 1 | -1 |   |   
-   | 0 | zero  | 1 | -1 |   |  0
  1 | 4 | one   | 2 |  2 | 1 | -1
  1 | 4 | one   | 2 |  2 | 2 |  2
  1 | 4 | one   | 2 |  2 | 3 | -3
@@ -773,96 +681,6 @@
  1 | 4 | one   | 2 |  2 | 0 |   
  1 | 4 | one   | 2 |  2 |   |   
  1 | 4 | one   | 2 |  2 |   |  0
- 2 | 3 | two   | 2 |  2 | 1 | -1
- 2 | 3 | two   | 2 |  2 | 2 |  2
- 2 | 3 | two   | 2 |  2 | 3 | -3
- 2 | 3 | two   | 2 |  2 | 2 |  4
- 2 | 3 | two   | 2 |  2 | 5 | -5
- 2 | 3 | two   | 2 |  2 | 5 | -5
- 2 | 3 | two   | 2 |  2 | 0 |   
- 2 | 3 | two   | 2 |  2 |   |   
- 2 | 3 | two   | 2 |  2 |   |  0
- 3 | 2 | three | 2 |  2 | 1 | -1
- 3 | 2 | three | 2 |  2 | 2 |  2
- 3 | 2 | three | 2 |  2 | 3 | -3
- 3 | 2 | three | 2 |  2 | 2 |  4
- 3 | 2 | three | 2 |  2 | 5 | -5
- 3 | 2 | three | 2 |  2 | 5 | -5
- 3 | 2 | three | 2 |  2 | 0 |   
- 3 | 2 | three | 2 |  2 |   |   
- 3 | 2 | three | 2 |  2 |   |  0
- 4 | 1 | four  | 2 |  2 | 1 | -1
- 4 | 1 | four  | 2 |  2 | 2 |  2
- 4 | 1 | four  | 2 |  2 | 3 | -3
- 4 | 1 | four  | 2 |  2 | 2 |  4
- 4 | 1 | four  | 2 |  2 | 5 | -5
- 4 | 1 | four  | 2 |  2 | 5 | -5
- 4 | 1 | four  | 2 |  2 | 0 |   
- 4 | 1 | four  | 2 |  2 |   |   
- 4 | 1 | four  | 2 |  2 |   |  0
- 5 | 0 | five  | 2 |  2 | 1 | -1
- 5 | 0 | five  | 2 |  2 | 2 |  2
- 5 | 0 | five  | 2 |  2 | 3 | -3
- 5 | 0 | five  | 2 |  2 | 2 |  4
- 5 | 0 | five  | 2 |  2 | 5 | -5
- 5 | 0 | five  | 2 |  2 | 5 | -5
- 5 | 0 | five  | 2 |  2 | 0 |   
- 5 | 0 | five  | 2 |  2 |   |   
- 5 | 0 | five  | 2 |  2 |   |  0
- 6 | 6 | six   | 2 |  2 | 1 | -1
- 6 | 6 | six   | 2 |  2 | 2 |  2
- 6 | 6 | six   | 2 |  2 | 3 | -3
- 6 | 6 | six   | 2 |  2 | 2 |  4
- 6 | 6 | six   | 2 |  2 | 5 | -5
- 6 | 6 | six   | 2 |  2 | 5 | -5
- 6 | 6 | six   | 2 |  2 | 0 |   
- 6 | 6 | six   | 2 |  2 |   |   
- 6 | 6 | six   | 2 |  2 |   |  0
- 7 | 7 | seven | 2 |  2 | 1 | -1
- 7 | 7 | seven | 2 |  2 | 2 |  2
- 7 | 7 | seven | 2 |  2 | 3 | -3
- 7 | 7 | seven | 2 |  2 | 2 |  4
- 7 | 7 | seven | 2 |  2 | 5 | -5
- 7 | 7 | seven | 2 |  2 | 5 | -5
- 7 | 7 | seven | 2 |  2 | 0 |   
- 7 | 7 | seven | 2 |  2 |   |   
- 7 | 7 | seven | 2 |  2 |   |  0
- 8 | 8 | eight | 2 |  2 | 1 | -1
- 8 | 8 | eight | 2 |  2 | 2 |  2
- 8 | 8 | eight | 2 |  2 | 3 | -3
- 8 | 8 | eight | 2 |  2 | 2 |  4
- 8 | 8 | eight | 2 |  2 | 5 | -5
- 8 | 8 | eight | 2 |  2 | 5 | -5
- 8 | 8 | eight | 2 |  2 | 0 |   
- 8 | 8 | eight | 2 |  2 |   |   
- 8 | 8 | eight | 2 |  2 |   |  0
- 0 |   | zero  | 2 |  2 | 1 | -1
- 0 |   | zero  | 2 |  2 | 2 |  2
- 0 |   | zero  | 2 |  2 | 3 | -3
- 0 |   | zero  | 2 |  2 | 2 |  4
- 0 |   | zero  | 2 |  2 | 5 | -5
- 0 |   | zero  | 2 |  2 | 5 | -5
- 0 |   | zero  | 2 |  2 | 0 |   
- 0 |   | zero  | 2 |  2 |   |   
- 0 |   | zero  | 2 |  2 |   |  0
-   |   | null  | 2 |  2 | 1 | -1
-   |   | null  | 2 |  2 | 2 |  2
-   |   | null  | 2 |  2 | 3 | -3
-   |   | null  | 2 |  2 | 2 |  4
-   |   | null  | 2 |  2 | 5 | -5
-   |   | null  | 2 |  2 | 5 | -5
-   |   | null  | 2 |  2 | 0 |   
-   |   | null  | 2 |  2 |   |   
-   |   | null  | 2 |  2 |   |  0
-   | 0 | zero  | 2 |  2 | 1 | -1
-   | 0 | zero  | 2 |  2 | 2 |  2
-   | 0 | zero  | 2 |  2 | 3 | -3
-   | 0 | zero  | 2 |  2 | 2 |  4
-   | 0 | zero  | 2 |  2 | 5 | -5
-   | 0 | zero  | 2 |  2 | 5 | -5
-   | 0 | zero  | 2 |  2 | 0 |   
-   | 0 | zero  | 2 |  2 |   |   
-   | 0 | zero  | 2 |  2 |   |  0
  1 | 4 | one   | 3 | -3 | 1 | -1
  1 | 4 | one   | 3 | -3 | 2 |  2
  1 | 4 | one   | 3 | -3 | 3 | -3
@@ -872,96 +690,6 @@
  1 | 4 | one   | 3 | -3 | 0 |   
  1 | 4 | one   | 3 | -3 |   |   
  1 | 4 | one   | 3 | -3 |   |  0
- 2 | 3 | two   | 3 | -3 | 1 | -1
- 2 | 3 | two   | 3 | -3 | 2 |  2
- 2 | 3 | two   | 3 | -3 | 3 | -3
- 2 | 3 | two   | 3 | -3 | 2 |  4
- 2 | 3 | two   | 3 | -3 | 5 | -5
- 2 | 3 | two   | 3 | -3 | 5 | -5
- 2 | 3 | two   | 3 | -3 | 0 |   
- 2 | 3 | two   | 3 | -3 |   |   
- 2 | 3 | two   | 3 | -3 |   |  0
- 3 | 2 | three | 3 | -3 | 1 | -1
- 3 | 2 | three | 3 | -3 | 2 |  2
- 3 | 2 | three | 3 | -3 | 3 | -3
- 3 | 2 | three | 3 | -3 | 2 |  4
- 3 | 2 | three | 3 | -3 | 5 | -5
- 3 | 2 | three | 3 | -3 | 5 | -5
- 3 | 2 | three | 3 | -3 | 0 |   
- 3 | 2 | three | 3 | -3 |   |   
- 3 | 2 | three | 3 | -3 |   |  0
- 4 | 1 | four  | 3 | -3 | 1 | -1
- 4 | 1 | four  | 3 | -3 | 2 |  2
- 4 | 1 | four  | 3 | -3 | 3 | -3
- 4 | 1 | four  | 3 | -3 | 2 |  4
- 4 | 1 | four  | 3 | -3 | 5 | -5
- 4 | 1 | four  | 3 | -3 | 5 | -5
- 4 | 1 | four  | 3 | -3 | 0 |   
- 4 | 1 | four  | 3 | -3 |   |   
- 4 | 1 | four  | 3 | -3 |   |  0
- 5 | 0 | five  | 3 | -3 | 1 | -1
- 5 | 0 | five  | 3 | -3 | 2 |  2
- 5 | 0 | five  | 3 | -3 | 3 | -3
- 5 | 0 | five  | 3 | -3 | 2 |  4
- 5 | 0 | five  | 3 | -3 | 5 | -5
- 5 | 0 | five  | 3 | -3 | 5 | -5
- 5 | 0 | five  | 3 | -3 | 0 |   
- 5 | 0 | five  | 3 | -3 |   |   
- 5 | 0 | five  | 3 | -3 |   |  0
- 6 | 6 | six   | 3 | -3 | 1 | -1
- 6 | 6 | six   | 3 | -3 | 2 |  2
- 6 | 6 | six   | 3 | -3 | 3 | -3
- 6 | 6 | six   | 3 | -3 | 2 |  4
- 6 | 6 | six   | 3 | -3 | 5 | -5
- 6 | 6 | six   | 3 | -3 | 5 | -5
- 6 | 6 | six   | 3 | -3 | 0 |   
- 6 | 6 | six   | 3 | -3 |   |   
- 6 | 6 | six   | 3 | -3 |   |  0
- 7 | 7 | seven | 3 | -3 | 1 | -1
- 7 | 7 | seven | 3 | -3 | 2 |  2
- 7 | 7 | seven | 3 | -3 | 3 | -3
- 7 | 7 | seven | 3 | -3 | 2 |  4
- 7 | 7 | seven | 3 | -3 | 5 | -5
- 7 | 7 | seven | 3 | -3 | 5 | -5
- 7 | 7 | seven | 3 | -3 | 0 |   
- 7 | 7 | seven | 3 | -3 |   |   
- 7 | 7 | seven | 3 | -3 |   |  0
- 8 | 8 | eight | 3 | -3 | 1 | -1
- 8 | 8 | eight | 3 | -3 | 2 |  2
- 8 | 8 | eight | 3 | -3 | 3 | -3
- 8 | 8 | eight | 3 | -3 | 2 |  4
- 8 | 8 | eight | 3 | -3 | 5 | -5
- 8 | 8 | eight | 3 | -3 | 5 | -5
- 8 | 8 | eight | 3 | -3 | 0 |   
- 8 | 8 | eight | 3 | -3 |   |   
- 8 | 8 | eight | 3 | -3 |   |  0
- 0 |   | zero  | 3 | -3 | 1 | -1
- 0 |   | zero  | 3 | -3 | 2 |  2
- 0 |   | zero  | 3 | -3 | 3 | -3
- 0 |   | zero  | 3 | -3 | 2 |  4
- 0 |   | zero  | 3 | -3 | 5 | -5
- 0 |   | zero  | 3 | -3 | 5 | -5
- 0 |   | zero  | 3 | -3 | 0 |   
- 0 |   | zero  | 3 | -3 |   |   
- 0 |   | zero  | 3 | -3 |   |  0
-   |   | null  | 3 | -3 | 1 | -1
-   |   | null  | 3 | -3 | 2 |  2
-   |   | null  | 3 | -3 | 3 | -3
-   |   | null  | 3 | -3 | 2 |  4
-   |   | null  | 3 | -3 | 5 | -5
-   |   | null  | 3 | -3 | 5 | -5
-   |   | null  | 3 | -3 | 0 |   
-   |   | null  | 3 | -3 |   |   
-   |   | null  | 3 | -3 |   |  0
-   | 0 | zero  | 3 | -3 | 1 | -1
-   | 0 | zero  | 3 | -3 | 2 |  2
-   | 0 | zero  | 3 | -3 | 3 | -3
-   | 0 | zero  | 3 | -3 | 2 |  4
-   | 0 | zero  | 3 | -3 | 5 | -5
-   | 0 | zero  | 3 | -3 | 5 | -5
-   | 0 | zero  | 3 | -3 | 0 |   
-   | 0 | zero  | 3 | -3 |   |   
-   | 0 | zero  | 3 | -3 |   |  0
  1 | 4 | one   | 2 |  4 | 1 | -1
  1 | 4 | one   | 2 |  4 | 2 |  2
  1 | 4 | one   | 2 |  4 | 3 | -3
@@ -971,96 +699,6 @@
  1 | 4 | one   | 2 |  4 | 0 |   
  1 | 4 | one   | 2 |  4 |   |   
  1 | 4 | one   | 2 |  4 |   |  0
- 2 | 3 | two   | 2 |  4 | 1 | -1
- 2 | 3 | two   | 2 |  4 | 2 |  2
- 2 | 3 | two   | 2 |  4 | 3 | -3
- 2 | 3 | two   | 2 |  4 | 2 |  4
- 2 | 3 | two   | 2 |  4 | 5 | -5
- 2 | 3 | two   | 2 |  4 | 5 | -5
- 2 | 3 | two   | 2 |  4 | 0 |   
- 2 | 3 | two   | 2 |  4 |   |   
- 2 | 3 | two   | 2 |  4 |   |  0
- 3 | 2 | three | 2 |  4 | 1 | -1
- 3 | 2 | three | 2 |  4 | 2 |  2
- 3 | 2 | three | 2 |  4 | 3 | -3
- 3 | 2 | three | 2 |  4 | 2 |  4
- 3 | 2 | three | 2 |  4 | 5 | -5
- 3 | 2 | three | 2 |  4 | 5 | -5
- 3 | 2 | three | 2 |  4 | 0 |   
- 3 | 2 | three | 2 |  4 |   |   
- 3 | 2 | three | 2 |  4 |   |  0
- 4 | 1 | four  | 2 |  4 | 1 | -1
- 4 | 1 | four  | 2 |  4 | 2 |  2
- 4 | 1 | four  | 2 |  4 | 3 | -3
- 4 | 1 | four  | 2 |  4 | 2 |  4
- 4 | 1 | four  | 2 |  4 | 5 | -5
- 4 | 1 | four  | 2 |  4 | 5 | -5
- 4 | 1 | four  | 2 |  4 | 0 |   
- 4 | 1 | four  | 2 |  4 |   |   
- 4 | 1 | four  | 2 |  4 |   |  0
- 5 | 0 | five  | 2 |  4 | 1 | -1
- 5 | 0 | five  | 2 |  4 | 2 |  2
- 5 | 0 | five  | 2 |  4 | 3 | -3
- 5 | 0 | five  | 2 |  4 | 2 |  4
- 5 | 0 | five  | 2 |  4 | 5 | -5
- 5 | 0 | five  | 2 |  4 | 5 | -5
- 5 | 0 | five  | 2 |  4 | 0 |   
- 5 | 0 | five  | 2 |  4 |   |   
- 5 | 0 | five  | 2 |  4 |   |  0
- 6 | 6 | six   | 2 |  4 | 1 | -1
- 6 | 6 | six   | 2 |  4 | 2 |  2
- 6 | 6 | six   | 2 |  4 | 3 | -3
- 6 | 6 | six   | 2 |  4 | 2 |  4
- 6 | 6 | six   | 2 |  4 | 5 | -5
- 6 | 6 | six   | 2 |  4 | 5 | -5
- 6 | 6 | six   | 2 |  4 | 0 |   
- 6 | 6 | six   | 2 |  4 |   |   
- 6 | 6 | six   | 2 |  4 |   |  0
- 7 | 7 | seven | 2 |  4 | 1 | -1
- 7 | 7 | seven | 2 |  4 | 2 |  2
- 7 | 7 | seven | 2 |  4 | 3 | -3
- 7 | 7 | seven | 2 |  4 | 2 |  4
- 7 | 7 | seven | 2 |  4 | 5 | -5
- 7 | 7 | seven | 2 |  4 | 5 | -5
- 7 | 7 | seven | 2 |  4 | 0 |   
- 7 | 7 | seven | 2 |  4 |   |   
- 7 | 7 | seven | 2 |  4 |   |  0
- 8 | 8 | eight | 2 |  4 | 1 | -1
- 8 | 8 | eight | 2 |  4 | 2 |  2
- 8 | 8 | eight | 2 |  4 | 3 | -3
- 8 | 8 | eight | 2 |  4 | 2 |  4
- 8 | 8 | eight | 2 |  4 | 5 | -5
- 8 | 8 | eight | 2 |  4 | 5 | -5
- 8 | 8 | eight | 2 |  4 | 0 |   
- 8 | 8 | eight | 2 |  4 |   |   
- 8 | 8 | eight | 2 |  4 |   |  0
- 0 |   | zero  | 2 |  4 | 1 | -1
- 0 |   | zero  | 2 |  4 | 2 |  2
- 0 |   | zero  | 2 |  4 | 3 | -3
- 0 |   | zero  | 2 |  4 | 2 |  4
- 0 |   | zero  | 2 |  4 | 5 | -5
- 0 |   | zero  | 2 |  4 | 5 | -5
- 0 |   | zero  | 2 |  4 | 0 |   
- 0 |   | zero  | 2 |  4 |   |   
- 0 |   | zero  | 2 |  4 |   |  0
-   |   | null  | 2 |  4 | 1 | -1
-   |   | null  | 2 |  4 | 2 |  2
-   |   | null  | 2 |  4 | 3 | -3
-   |   | null  | 2 |  4 | 2 |  4
-   |   | null  | 2 |  4 | 5 | -5
-   |   | null  | 2 |  4 | 5 | -5
-   |   | null  | 2 |  4 | 0 |   
-   |   | null  | 2 |  4 |   |   
-   |   | null  | 2 |  4 |   |  0
-   | 0 | zero  | 2 |  4 | 1 | -1
-   | 0 | zero  | 2 |  4 | 2 |  2
-   | 0 | zero  | 2 |  4 | 3 | -3
-   | 0 | zero  | 2 |  4 | 2 |  4
-   | 0 | zero  | 2 |  4 | 5 | -5
-   | 0 | zero  | 2 |  4 | 5 | -5
-   | 0 | zero  | 2 |  4 | 0 |   
-   | 0 | zero  | 2 |  4 |   |   
-   | 0 | zero  | 2 |  4 |   |  0
  1 | 4 | one   | 5 | -5 | 1 | -1
  1 | 4 | one   | 5 | -5 | 2 |  2
  1 | 4 | one   | 5 | -5 | 3 | -3
@@ -1070,96 +708,6 @@
  1 | 4 | one   | 5 | -5 | 0 |   
  1 | 4 | one   | 5 | -5 |   |   
  1 | 4 | one   | 5 | -5 |   |  0
- 2 | 3 | two   | 5 | -5 | 1 | -1
- 2 | 3 | two   | 5 | -5 | 2 |  2
- 2 | 3 | two   | 5 | -5 | 3 | -3
- 2 | 3 | two   | 5 | -5 | 2 |  4
- 2 | 3 | two   | 5 | -5 | 5 | -5
- 2 | 3 | two   | 5 | -5 | 5 | -5
- 2 | 3 | two   | 5 | -5 | 0 |   
- 2 | 3 | two   | 5 | -5 |   |   
- 2 | 3 | two   | 5 | -5 |   |  0
- 3 | 2 | three | 5 | -5 | 1 | -1
- 3 | 2 | three | 5 | -5 | 2 |  2
- 3 | 2 | three | 5 | -5 | 3 | -3
- 3 | 2 | three | 5 | -5 | 2 |  4
- 3 | 2 | three | 5 | -5 | 5 | -5
- 3 | 2 | three | 5 | -5 | 5 | -5
- 3 | 2 | three | 5 | -5 | 0 |   
- 3 | 2 | three | 5 | -5 |   |   
- 3 | 2 | three | 5 | -5 |   |  0
- 4 | 1 | four  | 5 | -5 | 1 | -1
- 4 | 1 | four  | 5 | -5 | 2 |  2
- 4 | 1 | four  | 5 | -5 | 3 | -3
- 4 | 1 | four  | 5 | -5 | 2 |  4
- 4 | 1 | four  | 5 | -5 | 5 | -5
- 4 | 1 | four  | 5 | -5 | 5 | -5
- 4 | 1 | four  | 5 | -5 | 0 |   
- 4 | 1 | four  | 5 | -5 |   |   
- 4 | 1 | four  | 5 | -5 |   |  0
- 5 | 0 | five  | 5 | -5 | 1 | -1
- 5 | 0 | five  | 5 | -5 | 2 |  2
- 5 | 0 | five  | 5 | -5 | 3 | -3
- 5 | 0 | five  | 5 | -5 | 2 |  4
- 5 | 0 | five  | 5 | -5 | 5 | -5
- 5 | 0 | five  | 5 | -5 | 5 | -5
- 5 | 0 | five  | 5 | -5 | 0 |   
- 5 | 0 | five  | 5 | -5 |   |   
- 5 | 0 | five  | 5 | -5 |   |  0
- 6 | 6 | six   | 5 | -5 | 1 | -1
- 6 | 6 | six   | 5 | -5 | 2 |  2
- 6 | 6 | six   | 5 | -5 | 3 | -3
- 6 | 6 | six   | 5 | -5 | 2 |  4
- 6 | 6 | six   | 5 | -5 | 5 | -5
- 6 | 6 | six   | 5 | -5 | 5 | -5
- 6 | 6 | six   | 5 | -5 | 0 |   
- 6 | 6 | six   | 5 | -5 |   |   
- 6 | 6 | six   | 5 | -5 |   |  0
- 7 | 7 | seven | 5 | -5 | 1 | -1
- 7 | 7 | seven | 5 | -5 | 2 |  2
- 7 | 7 | seven | 5 | -5 | 3 | -3
- 7 | 7 | seven | 5 | -5 | 2 |  4
- 7 | 7 | seven | 5 | -5 | 5 | -5
- 7 | 7 | seven | 5 | -5 | 5 | -5
- 7 | 7 | seven | 5 | -5 | 0 |   
- 7 | 7 | seven | 5 | -5 |   |   
- 7 | 7 | seven | 5 | -5 |   |  0
- 8 | 8 | eight | 5 | -5 | 1 | -1
- 8 | 8 | eight | 5 | -5 | 2 |  2
- 8 | 8 | eight | 5 | -5 | 3 | -3
- 8 | 8 | eight | 5 | -5 | 2 |  4
- 8 | 8 | eight | 5 | -5 | 5 | -5
- 8 | 8 | eight | 5 | -5 | 5 | -5
- 8 | 8 | eight | 5 | -5 | 0 |   
- 8 | 8 | eight | 5 | -5 |   |   
- 8 | 8 | eight | 5 | -5 |   |  0
- 0 |   | zero  | 5 | -5 | 1 | -1
- 0 |   | zero  | 5 | -5 | 2 |  2
- 0 |   | zero  | 5 | -5 | 3 | -3
- 0 |   | zero  | 5 | -5 | 2 |  4
- 0 |   | zero  | 5 | -5 | 5 | -5
- 0 |   | zero  | 5 | -5 | 5 | -5
- 0 |   | zero  | 5 | -5 | 0 |   
- 0 |   | zero  | 5 | -5 |   |   
- 0 |   | zero  | 5 | -5 |   |  0
-   |   | null  | 5 | -5 | 1 | -1
-   |   | null  | 5 | -5 | 2 |  2
-   |   | null  | 5 | -5 | 3 | -3
-   |   | null  | 5 | -5 | 2 |  4
-   |   | null  | 5 | -5 | 5 | -5
-   |   | null  | 5 | -5 | 5 | -5
-   |   | null  | 5 | -5 | 0 |   
-   |   | null  | 5 | -5 |   |   
-   |   | null  | 5 | -5 |   |  0
-   | 0 | zero  | 5 | -5 | 1 | -1
-   | 0 | zero  | 5 | -5 | 2 |  2
-   | 0 | zero  | 5 | -5 | 3 | -3
-   | 0 | zero  | 5 | -5 | 2 |  4
-   | 0 | zero  | 5 | -5 | 5 | -5
-   | 0 | zero  | 5 | -5 | 5 | -5
-   | 0 | zero  | 5 | -5 | 0 |   
-   | 0 | zero  | 5 | -5 |   |   
-   | 0 | zero  | 5 | -5 |   |  0
  1 | 4 | one   | 5 | -5 | 1 | -1
  1 | 4 | one   | 5 | -5 | 2 |  2
  1 | 4 | one   | 5 | -5 | 3 | -3
@@ -1169,96 +717,6 @@
  1 | 4 | one   | 5 | -5 | 0 |   
  1 | 4 | one   | 5 | -5 |   |   
  1 | 4 | one   | 5 | -5 |   |  0
- 2 | 3 | two   | 5 | -5 | 1 | -1
- 2 | 3 | two   | 5 | -5 | 2 |  2
- 2 | 3 | two   | 5 | -5 | 3 | -3
- 2 | 3 | two   | 5 | -5 | 2 |  4
- 2 | 3 | two   | 5 | -5 | 5 | -5
- 2 | 3 | two   | 5 | -5 | 5 | -5
- 2 | 3 | two   | 5 | -5 | 0 |   
- 2 | 3 | two   | 5 | -5 |   |   
- 2 | 3 | two   | 5 | -5 |   |  0
- 3 | 2 | three | 5 | -5 | 1 | -1
- 3 | 2 | three | 5 | -5 | 2 |  2
- 3 | 2 | three | 5 | -5 | 3 | -3
- 3 | 2 | three | 5 | -5 | 2 |  4
- 3 | 2 | three | 5 | -5 | 5 | -5
- 3 | 2 | three | 5 | -5 | 5 | -5
- 3 | 2 | three | 5 | -5 | 0 |   
- 3 | 2 | three | 5 | -5 |   |   
- 3 | 2 | three | 5 | -5 |   |  0
- 4 | 1 | four  | 5 | -5 | 1 | -1
- 4 | 1 | four  | 5 | -5 | 2 |  2
- 4 | 1 | four  | 5 | -5 | 3 | -3
- 4 | 1 | four  | 5 | -5 | 2 |  4
- 4 | 1 | four  | 5 | -5 | 5 | -5
- 4 | 1 | four  | 5 | -5 | 5 | -5
- 4 | 1 | four  | 5 | -5 | 0 |   
- 4 | 1 | four  | 5 | -5 |   |   
- 4 | 1 | four  | 5 | -5 |   |  0
- 5 | 0 | five  | 5 | -5 | 1 | -1
- 5 | 0 | five  | 5 | -5 | 2 |  2
- 5 | 0 | five  | 5 | -5 | 3 | -3
- 5 | 0 | five  | 5 | -5 | 2 |  4
- 5 | 0 | five  | 5 | -5 | 5 | -5
- 5 | 0 | five  | 5 | -5 | 5 | -5
- 5 | 0 | five  | 5 | -5 | 0 |   
- 5 | 0 | five  | 5 | -5 |   |   
- 5 | 0 | five  | 5 | -5 |   |  0
- 6 | 6 | six   | 5 | -5 | 1 | -1
- 6 | 6 | six   | 5 | -5 | 2 |  2
- 6 | 6 | six   | 5 | -5 | 3 | -3
- 6 | 6 | six   | 5 | -5 | 2 |  4
- 6 | 6 | six   | 5 | -5 | 5 | -5
- 6 | 6 | six   | 5 | -5 | 5 | -5
- 6 | 6 | six   | 5 | -5 | 0 |   
- 6 | 6 | six   | 5 | -5 |   |   
- 6 | 6 | six   | 5 | -5 |   |  0
- 7 | 7 | seven | 5 | -5 | 1 | -1
- 7 | 7 | seven | 5 | -5 | 2 |  2
- 7 | 7 | seven | 5 | -5 | 3 | -3
- 7 | 7 | seven | 5 | -5 | 2 |  4
- 7 | 7 | seven | 5 | -5 | 5 | -5
- 7 | 7 | seven | 5 | -5 | 5 | -5
- 7 | 7 | seven | 5 | -5 | 0 |   
- 7 | 7 | seven | 5 | -5 |   |   
- 7 | 7 | seven | 5 | -5 |   |  0
- 8 | 8 | eight | 5 | -5 | 1 | -1
- 8 | 8 | eight | 5 | -5 | 2 |  2
- 8 | 8 | eight | 5 | -5 | 3 | -3
- 8 | 8 | eight | 5 | -5 | 2 |  4
- 8 | 8 | eight | 5 | -5 | 5 | -5
- 8 | 8 | eight | 5 | -5 | 5 | -5
- 8 | 8 | eight | 5 | -5 | 0 |   
- 8 | 8 | eight | 5 | -5 |   |   
- 8 | 8 | eight | 5 | -5 |   |  0
- 0 |   | zero  | 5 | -5 | 1 | -1
- 0 |   | zero  | 5 | -5 | 2 |  2
- 0 |   | zero  | 5 | -5 | 3 | -3
- 0 |   | zero  | 5 | -5 | 2 |  4
- 0 |   | zero  | 5 | -5 | 5 | -5
- 0 |   | zero  | 5 | -5 | 5 | -5
- 0 |   | zero  | 5 | -5 | 0 |   
- 0 |   | zero  | 5 | -5 |   |   
- 0 |   | zero  | 5 | -5 |   |  0
-   |   | null  | 5 | -5 | 1 | -1
-   |   | null  | 5 | -5 | 2 |  2
-   |   | null  | 5 | -5 | 3 | -3
-   |   | null  | 5 | -5 | 2 |  4
-   |   | null  | 5 | -5 | 5 | -5
-   |   | null  | 5 | -5 | 5 | -5
-   |   | null  | 5 | -5 | 0 |   
-   |   | null  | 5 | -5 |   |   
-   |   | null  | 5 | -5 |   |  0
-   | 0 | zero  | 5 | -5 | 1 | -1
-   | 0 | zero  | 5 | -5 | 2 |  2
-   | 0 | zero  | 5 | -5 | 3 | -3
-   | 0 | zero  | 5 | -5 | 2 |  4
-   | 0 | zero  | 5 | -5 | 5 | -5
-   | 0 | zero  | 5 | -5 | 5 | -5
-   | 0 | zero  | 5 | -5 | 0 |   
-   | 0 | zero  | 5 | -5 |   |   
-   | 0 | zero  | 5 | -5 |   |  0
  1 | 4 | one   | 0 |    | 1 | -1
  1 | 4 | one   | 0 |    | 2 |  2
  1 | 4 | one   | 0 |    | 3 | -3
@@ -1268,96 +726,6 @@
  1 | 4 | one   | 0 |    | 0 |   
  1 | 4 | one   | 0 |    |   |   
  1 | 4 | one   | 0 |    |   |  0
- 2 | 3 | two   | 0 |    | 1 | -1
- 2 | 3 | two   | 0 |    | 2 |  2
- 2 | 3 | two   | 0 |    | 3 | -3
- 2 | 3 | two   | 0 |    | 2 |  4
- 2 | 3 | two   | 0 |    | 5 | -5
- 2 | 3 | two   | 0 |    | 5 | -5
- 2 | 3 | two   | 0 |    | 0 |   
- 2 | 3 | two   | 0 |    |   |   
- 2 | 3 | two   | 0 |    |   |  0
- 3 | 2 | three | 0 |    | 1 | -1
- 3 | 2 | three | 0 |    | 2 |  2
- 3 | 2 | three | 0 |    | 3 | -3
- 3 | 2 | three | 0 |    | 2 |  4
- 3 | 2 | three | 0 |    | 5 | -5
- 3 | 2 | three | 0 |    | 5 | -5
- 3 | 2 | three | 0 |    | 0 |   
- 3 | 2 | three | 0 |    |   |   
- 3 | 2 | three | 0 |    |   |  0
- 4 | 1 | four  | 0 |    | 1 | -1
- 4 | 1 | four  | 0 |    | 2 |  2
- 4 | 1 | four  | 0 |    | 3 | -3
- 4 | 1 | four  | 0 |    | 2 |  4
- 4 | 1 | four  | 0 |    | 5 | -5
- 4 | 1 | four  | 0 |    | 5 | -5
- 4 | 1 | four  | 0 |    | 0 |   
- 4 | 1 | four  | 0 |    |   |   
- 4 | 1 | four  | 0 |    |   |  0
- 5 | 0 | five  | 0 |    | 1 | -1
- 5 | 0 | five  | 0 |    | 2 |  2
- 5 | 0 | five  | 0 |    | 3 | -3
- 5 | 0 | five  | 0 |    | 2 |  4
- 5 | 0 | five  | 0 |    | 5 | -5
- 5 | 0 | five  | 0 |    | 5 | -5
- 5 | 0 | five  | 0 |    | 0 |   
- 5 | 0 | five  | 0 |    |   |   
- 5 | 0 | five  | 0 |    |   |  0
- 6 | 6 | six   | 0 |    | 1 | -1
- 6 | 6 | six   | 0 |    | 2 |  2
- 6 | 6 | six   | 0 |    | 3 | -3
- 6 | 6 | six   | 0 |    | 2 |  4
- 6 | 6 | six   | 0 |    | 5 | -5
- 6 | 6 | six   | 0 |    | 5 | -5
- 6 | 6 | six   | 0 |    | 0 |   
- 6 | 6 | six   | 0 |    |   |   
- 6 | 6 | six   | 0 |    |   |  0
- 7 | 7 | seven | 0 |    | 1 | -1
- 7 | 7 | seven | 0 |    | 2 |  2
- 7 | 7 | seven | 0 |    | 3 | -3
- 7 | 7 | seven | 0 |    | 2 |  4
- 7 | 7 | seven | 0 |    | 5 | -5
- 7 | 7 | seven | 0 |    | 5 | -5
- 7 | 7 | seven | 0 |    | 0 |   
- 7 | 7 | seven | 0 |    |   |   
- 7 | 7 | seven | 0 |    |   |  0
- 8 | 8 | eight | 0 |    | 1 | -1
- 8 | 8 | eight | 0 |    | 2 |  2
- 8 | 8 | eight | 0 |    | 3 | -3
- 8 | 8 | eight | 0 |    | 2 |  4
- 8 | 8 | eight | 0 |    | 5 | -5
- 8 | 8 | eight | 0 |    | 5 | -5
- 8 | 8 | eight | 0 |    | 0 |   
- 8 | 8 | eight | 0 |    |   |   
- 8 | 8 | eight | 0 |    |   |  0
- 0 |   | zero  | 0 |    | 1 | -1
- 0 |   | zero  | 0 |    | 2 |  2
- 0 |   | zero  | 0 |    | 3 | -3
- 0 |   | zero  | 0 |    | 2 |  4
- 0 |   | zero  | 0 |    | 5 | -5
- 0 |   | zero  | 0 |    | 5 | -5
- 0 |   | zero  | 0 |    | 0 |   
- 0 |   | zero  | 0 |    |   |   
- 0 |   | zero  | 0 |    |   |  0
-   |   | null  | 0 |    | 1 | -1
-   |   | null  | 0 |    | 2 |  2
-   |   | null  | 0 |    | 3 | -3
-   |   | null  | 0 |    | 2 |  4
-   |   | null  | 0 |    | 5 | -5
-   |   | null  | 0 |    | 5 | -5
-   |   | null  | 0 |    | 0 |   
-   |   | null  | 0 |    |   |   
-   |   | null  | 0 |    |   |  0
-   | 0 | zero  | 0 |    | 1 | -1
-   | 0 | zero  | 0 |    | 2 |  2
-   | 0 | zero  | 0 |    | 3 | -3
-   | 0 | zero  | 0 |    | 2 |  4
-   | 0 | zero  | 0 |    | 5 | -5
-   | 0 | zero  | 0 |    | 5 | -5
-   | 0 | zero  | 0 |    | 0 |   
-   | 0 | zero  | 0 |    |   |   
-   | 0 | zero  | 0 |    |   |  0
  1 | 4 | one   |   |    | 1 | -1
  1 | 4 | one   |   |    | 2 |  2
  1 | 4 | one   |   |    | 3 | -3
@@ -1367,96 +735,6 @@
  1 | 4 | one   |   |    | 0 |   
  1 | 4 | one   |   |    |   |   
  1 | 4 | one   |   |    |   |  0
- 2 | 3 | two   |   |    | 1 | -1
- 2 | 3 | two   |   |    | 2 |  2
- 2 | 3 | two   |   |    | 3 | -3
- 2 | 3 | two   |   |    | 2 |  4
- 2 | 3 | two   |   |    | 5 | -5
- 2 | 3 | two   |   |    | 5 | -5
- 2 | 3 | two   |   |    | 0 |   
- 2 | 3 | two   |   |    |   |   
- 2 | 3 | two   |   |    |   |  0
- 3 | 2 | three |   |    | 1 | -1
- 3 | 2 | three |   |    | 2 |  2
- 3 | 2 | three |   |    | 3 | -3
- 3 | 2 | three |   |    | 2 |  4
- 3 | 2 | three |   |    | 5 | -5
- 3 | 2 | three |   |    | 5 | -5
- 3 | 2 | three |   |    | 0 |   
- 3 | 2 | three |   |    |   |   
- 3 | 2 | three |   |    |   |  0
- 4 | 1 | four  |   |    | 1 | -1
- 4 | 1 | four  |   |    | 2 |  2
- 4 | 1 | four  |   |    | 3 | -3
- 4 | 1 | four  |   |    | 2 |  4
- 4 | 1 | four  |   |    | 5 | -5
- 4 | 1 | four  |   |    | 5 | -5
- 4 | 1 | four  |   |    | 0 |   
- 4 | 1 | four  |   |    |   |   
- 4 | 1 | four  |   |    |   |  0
- 5 | 0 | five  |   |    | 1 | -1
- 5 | 0 | five  |   |    | 2 |  2
- 5 | 0 | five  |   |    | 3 | -3
- 5 | 0 | five  |   |    | 2 |  4
- 5 | 0 | five  |   |    | 5 | -5
- 5 | 0 | five  |   |    | 5 | -5
- 5 | 0 | five  |   |    | 0 |   
- 5 | 0 | five  |   |    |   |   
- 5 | 0 | five  |   |    |   |  0
- 6 | 6 | six   |   |    | 1 | -1
- 6 | 6 | six   |   |    | 2 |  2
- 6 | 6 | six   |   |    | 3 | -3
- 6 | 6 | six   |   |    | 2 |  4
- 6 | 6 | six   |   |    | 5 | -5
- 6 | 6 | six   |   |    | 5 | -5
- 6 | 6 | six   |   |    | 0 |   
- 6 | 6 | six   |   |    |   |   
- 6 | 6 | six   |   |    |   |  0
- 7 | 7 | seven |   |    | 1 | -1
- 7 | 7 | seven |   |    | 2 |  2
- 7 | 7 | seven |   |    | 3 | -3
- 7 | 7 | seven |   |    | 2 |  4
- 7 | 7 | seven |   |    | 5 | -5
- 7 | 7 | seven |   |    | 5 | -5
- 7 | 7 | seven |   |    | 0 |   
- 7 | 7 | seven |   |    |   |   
- 7 | 7 | seven |   |    |   |  0
- 8 | 8 | eight |   |    | 1 | -1
- 8 | 8 | eight |   |    | 2 |  2
- 8 | 8 | eight |   |    | 3 | -3
- 8 | 8 | eight |   |    | 2 |  4
- 8 | 8 | eight |   |    | 5 | -5
- 8 | 8 | eight |   |    | 5 | -5
- 8 | 8 | eight |   |    | 0 |   
- 8 | 8 | eight |   |    |   |   
- 8 | 8 | eight |   |    |   |  0
- 0 |   | zero  |   |    | 1 | -1
- 0 |   | zero  |   |    | 2 |  2
- 0 |   | zero  |   |    | 3 | -3
- 0 |   | zero  |   |    | 2 |  4
- 0 |   | zero  |   |    | 5 | -5
- 0 |   | zero  |   |    | 5 | -5
- 0 |   | zero  |   |    | 0 |   
- 0 |   | zero  |   |    |   |   
- 0 |   | zero  |   |    |   |  0
-   |   | null  |   |    | 1 | -1
-   |   | null  |   |    | 2 |  2
-   |   | null  |   |    | 3 | -3
-   |   | null  |   |    | 2 |  4
-   |   | null  |   |    | 5 | -5
-   |   | null  |   |    | 5 | -5
-   |   | null  |   |    | 0 |   
-   |   | null  |   |    |   |   
-   |   | null  |   |    |   |  0
-   | 0 | zero  |   |    | 1 | -1
-   | 0 | zero  |   |    | 2 |  2
-   | 0 | zero  |   |    | 3 | -3
-   | 0 | zero  |   |    | 2 |  4
-   | 0 | zero  |   |    | 5 | -5
-   | 0 | zero  |   |    | 5 | -5
-   | 0 | zero  |   |    | 0 |   
-   | 0 | zero  |   |    |   |   
-   | 0 | zero  |   |    |   |  0
  1 | 4 | one   |   |  0 | 1 | -1
  1 | 4 | one   |   |  0 | 2 |  2
  1 | 4 | one   |   |  0 | 3 | -3
@@ -1466,6 +744,78 @@
  1 | 4 | one   |   |  0 | 0 |   
  1 | 4 | one   |   |  0 |   |   
  1 | 4 | one   |   |  0 |   |  0
+ 2 | 3 | two   | 1 | -1 | 1 | -1
+ 2 | 3 | two   | 1 | -1 | 2 |  2
+ 2 | 3 | two   | 1 | -1 | 3 | -3
+ 2 | 3 | two   | 1 | -1 | 2 |  4
+ 2 | 3 | two   | 1 | -1 | 5 | -5
+ 2 | 3 | two   | 1 | -1 | 5 | -5
+ 2 | 3 | two   | 1 | -1 | 0 |   
+ 2 | 3 | two   | 1 | -1 |   |   
+ 2 | 3 | two   | 1 | -1 |   |  0
+ 2 | 3 | two   | 2 |  2 | 1 | -1
+ 2 | 3 | two   | 2 |  2 | 2 |  2
+ 2 | 3 | two   | 2 |  2 | 3 | -3
+ 2 | 3 | two   | 2 |  2 | 2 |  4
+ 2 | 3 | two   | 2 |  2 | 5 | -5
+ 2 | 3 | two   | 2 |  2 | 5 | -5
+ 2 | 3 | two   | 2 |  2 | 0 |   
+ 2 | 3 | two   | 2 |  2 |   |   
+ 2 | 3 | two   | 2 |  2 |   |  0
+ 2 | 3 | two   | 3 | -3 | 1 | -1
+ 2 | 3 | two   | 3 | -3 | 2 |  2
+ 2 | 3 | two   | 3 | -3 | 3 | -3
+ 2 | 3 | two   | 3 | -3 | 2 |  4
+ 2 | 3 | two   | 3 | -3 | 5 | -5
+ 2 | 3 | two   | 3 | -3 | 5 | -5
+ 2 | 3 | two   | 3 | -3 | 0 |   
+ 2 | 3 | two   | 3 | -3 |   |   
+ 2 | 3 | two   | 3 | -3 |   |  0
+ 2 | 3 | two   | 2 |  4 | 1 | -1
+ 2 | 3 | two   | 2 |  4 | 2 |  2
+ 2 | 3 | two   | 2 |  4 | 3 | -3
+ 2 | 3 | two   | 2 |  4 | 2 |  4
+ 2 | 3 | two   | 2 |  4 | 5 | -5
+ 2 | 3 | two   | 2 |  4 | 5 | -5
+ 2 | 3 | two   | 2 |  4 | 0 |   
+ 2 | 3 | two   | 2 |  4 |   |   
+ 2 | 3 | two   | 2 |  4 |   |  0
+ 2 | 3 | two   | 5 | -5 | 1 | -1
+ 2 | 3 | two   | 5 | -5 | 2 |  2
+ 2 | 3 | two   | 5 | -5 | 3 | -3
+ 2 | 3 | two   | 5 | -5 | 2 |  4
+ 2 | 3 | two   | 5 | -5 | 5 | -5
+ 2 | 3 | two   | 5 | -5 | 5 | -5
+ 2 | 3 | two   | 5 | -5 | 0 |   
+ 2 | 3 | two   | 5 | -5 |   |   
+ 2 | 3 | two   | 5 | -5 |   |  0
+ 2 | 3 | two   | 5 | -5 | 1 | -1
+ 2 | 3 | two   | 5 | -5 | 2 |  2
+ 2 | 3 | two   | 5 | -5 | 3 | -3
+ 2 | 3 | two   | 5 | -5 | 2 |  4
+ 2 | 3 | two   | 5 | -5 | 5 | -5
+ 2 | 3 | two   | 5 | -5 | 5 | -5
+ 2 | 3 | two   | 5 | -5 | 0 |   
+ 2 | 3 | two   | 5 | -5 |   |   
+ 2 | 3 | two   | 5 | -5 |   |  0
+ 2 | 3 | two   | 0 |    | 1 | -1
+ 2 | 3 | two   | 0 |    | 2 |  2
+ 2 | 3 | two   | 0 |    | 3 | -3
+ 2 | 3 | two   | 0 |    | 2 |  4
+ 2 | 3 | two   | 0 |    | 5 | -5
+ 2 | 3 | two   | 0 |    | 5 | -5
+ 2 | 3 | two   | 0 |    | 0 |   
+ 2 | 3 | two   | 0 |    |   |   
+ 2 | 3 | two   | 0 |    |   |  0
+ 2 | 3 | two   |   |    | 1 | -1
+ 2 | 3 | two   |   |    | 2 |  2
+ 2 | 3 | two   |   |    | 3 | -3
+ 2 | 3 | two   |   |    | 2 |  4
+ 2 | 3 | two   |   |    | 5 | -5
+ 2 | 3 | two   |   |    | 5 | -5
+ 2 | 3 | two   |   |    | 0 |   
+ 2 | 3 | two   |   |    |   |   
+ 2 | 3 | two   |   |    |   |  0
  2 | 3 | two   |   |  0 | 1 | -1
  2 | 3 | two   |   |  0 | 2 |  2
  2 | 3 | two   |   |  0 | 3 | -3
@@ -1475,6 +825,78 @@
  2 | 3 | two   |   |  0 | 0 |   
  2 | 3 | two   |   |  0 |   |   
  2 | 3 | two   |   |  0 |   |  0
+ 3 | 2 | three | 1 | -1 | 1 | -1
+ 3 | 2 | three | 1 | -1 | 2 |  2
+ 3 | 2 | three | 1 | -1 | 3 | -3
+ 3 | 2 | three | 1 | -1 | 2 |  4
+ 3 | 2 | three | 1 | -1 | 5 | -5
+ 3 | 2 | three | 1 | -1 | 5 | -5
+ 3 | 2 | three | 1 | -1 | 0 |   
+ 3 | 2 | three | 1 | -1 |   |   
+ 3 | 2 | three | 1 | -1 |   |  0
+ 3 | 2 | three | 2 |  2 | 1 | -1
+ 3 | 2 | three | 2 |  2 | 2 |  2
+ 3 | 2 | three | 2 |  2 | 3 | -3
+ 3 | 2 | three | 2 |  2 | 2 |  4
+ 3 | 2 | three | 2 |  2 | 5 | -5
+ 3 | 2 | three | 2 |  2 | 5 | -5
+ 3 | 2 | three | 2 |  2 | 0 |   
+ 3 | 2 | three | 2 |  2 |   |   
+ 3 | 2 | three | 2 |  2 |   |  0
+ 3 | 2 | three | 3 | -3 | 1 | -1
+ 3 | 2 | three | 3 | -3 | 2 |  2
+ 3 | 2 | three | 3 | -3 | 3 | -3
+ 3 | 2 | three | 3 | -3 | 2 |  4
+ 3 | 2 | three | 3 | -3 | 5 | -5
+ 3 | 2 | three | 3 | -3 | 5 | -5
+ 3 | 2 | three | 3 | -3 | 0 |   
+ 3 | 2 | three | 3 | -3 |   |   
+ 3 | 2 | three | 3 | -3 |   |  0
+ 3 | 2 | three | 2 |  4 | 1 | -1
+ 3 | 2 | three | 2 |  4 | 2 |  2
+ 3 | 2 | three | 2 |  4 | 3 | -3
+ 3 | 2 | three | 2 |  4 | 2 |  4
+ 3 | 2 | three | 2 |  4 | 5 | -5
+ 3 | 2 | three | 2 |  4 | 5 | -5
+ 3 | 2 | three | 2 |  4 | 0 |   
+ 3 | 2 | three | 2 |  4 |   |   
+ 3 | 2 | three | 2 |  4 |   |  0
+ 3 | 2 | three | 5 | -5 | 1 | -1
+ 3 | 2 | three | 5 | -5 | 2 |  2
+ 3 | 2 | three | 5 | -5 | 3 | -3
+ 3 | 2 | three | 5 | -5 | 2 |  4
+ 3 | 2 | three | 5 | -5 | 5 | -5
+ 3 | 2 | three | 5 | -5 | 5 | -5
+ 3 | 2 | three | 5 | -5 | 0 |   
+ 3 | 2 | three | 5 | -5 |   |   
+ 3 | 2 | three | 5 | -5 |   |  0
+ 3 | 2 | three | 5 | -5 | 1 | -1
+ 3 | 2 | three | 5 | -5 | 2 |  2
+ 3 | 2 | three | 5 | -5 | 3 | -3
+ 3 | 2 | three | 5 | -5 | 2 |  4
+ 3 | 2 | three | 5 | -5 | 5 | -5
+ 3 | 2 | three | 5 | -5 | 5 | -5
+ 3 | 2 | three | 5 | -5 | 0 |   
+ 3 | 2 | three | 5 | -5 |   |   
+ 3 | 2 | three | 5 | -5 |   |  0
+ 3 | 2 | three | 0 |    | 1 | -1
+ 3 | 2 | three | 0 |    | 2 |  2
+ 3 | 2 | three | 0 |    | 3 | -3
+ 3 | 2 | three | 0 |    | 2 |  4
+ 3 | 2 | three | 0 |    | 5 | -5
+ 3 | 2 | three | 0 |    | 5 | -5
+ 3 | 2 | three | 0 |    | 0 |   
+ 3 | 2 | three | 0 |    |   |   
+ 3 | 2 | three | 0 |    |   |  0
+ 3 | 2 | three |   |    | 1 | -1
+ 3 | 2 | three |   |    | 2 |  2
+ 3 | 2 | three |   |    | 3 | -3
+ 3 | 2 | three |   |    | 2 |  4
+ 3 | 2 | three |   |    | 5 | -5
+ 3 | 2 | three |   |    | 5 | -5
+ 3 | 2 | three |   |    | 0 |   
+ 3 | 2 | three |   |    |   |   
+ 3 | 2 | three |   |    |   |  0
  3 | 2 | three |   |  0 | 1 | -1
  3 | 2 | three |   |  0 | 2 |  2
  3 | 2 | three |   |  0 | 3 | -3
@@ -1484,6 +906,78 @@
  3 | 2 | three |   |  0 | 0 |   
  3 | 2 | three |   |  0 |   |   
  3 | 2 | three |   |  0 |   |  0
+ 4 | 1 | four  | 1 | -1 | 1 | -1
+ 4 | 1 | four  | 1 | -1 | 2 |  2
+ 4 | 1 | four  | 1 | -1 | 3 | -3
+ 4 | 1 | four  | 1 | -1 | 2 |  4
+ 4 | 1 | four  | 1 | -1 | 5 | -5
+ 4 | 1 | four  | 1 | -1 | 5 | -5
+ 4 | 1 | four  | 1 | -1 | 0 |   
+ 4 | 1 | four  | 1 | -1 |   |   
+ 4 | 1 | four  | 1 | -1 |   |  0
+ 4 | 1 | four  | 2 |  2 | 1 | -1
+ 4 | 1 | four  | 2 |  2 | 2 |  2
+ 4 | 1 | four  | 2 |  2 | 3 | -3
+ 4 | 1 | four  | 2 |  2 | 2 |  4
+ 4 | 1 | four  | 2 |  2 | 5 | -5
+ 4 | 1 | four  | 2 |  2 | 5 | -5
+ 4 | 1 | four  | 2 |  2 | 0 |   
+ 4 | 1 | four  | 2 |  2 |   |   
+ 4 | 1 | four  | 2 |  2 |   |  0
+ 4 | 1 | four  | 3 | -3 | 1 | -1
+ 4 | 1 | four  | 3 | -3 | 2 |  2
+ 4 | 1 | four  | 3 | -3 | 3 | -3
+ 4 | 1 | four  | 3 | -3 | 2 |  4
+ 4 | 1 | four  | 3 | -3 | 5 | -5
+ 4 | 1 | four  | 3 | -3 | 5 | -5
+ 4 | 1 | four  | 3 | -3 | 0 |   
+ 4 | 1 | four  | 3 | -3 |   |   
+ 4 | 1 | four  | 3 | -3 |   |  0
+ 4 | 1 | four  | 2 |  4 | 1 | -1
+ 4 | 1 | four  | 2 |  4 | 2 |  2
+ 4 | 1 | four  | 2 |  4 | 3 | -3
+ 4 | 1 | four  | 2 |  4 | 2 |  4
+ 4 | 1 | four  | 2 |  4 | 5 | -5
+ 4 | 1 | four  | 2 |  4 | 5 | -5
+ 4 | 1 | four  | 2 |  4 | 0 |   
+ 4 | 1 | four  | 2 |  4 |   |   
+ 4 | 1 | four  | 2 |  4 |   |  0
+ 4 | 1 | four  | 5 | -5 | 1 | -1
+ 4 | 1 | four  | 5 | -5 | 2 |  2
+ 4 | 1 | four  | 5 | -5 | 3 | -3
+ 4 | 1 | four  | 5 | -5 | 2 |  4
+ 4 | 1 | four  | 5 | -5 | 5 | -5
+ 4 | 1 | four  | 5 | -5 | 5 | -5
+ 4 | 1 | four  | 5 | -5 | 0 |   
+ 4 | 1 | four  | 5 | -5 |   |   
+ 4 | 1 | four  | 5 | -5 |   |  0
+ 4 | 1 | four  | 5 | -5 | 1 | -1
+ 4 | 1 | four  | 5 | -5 | 2 |  2
+ 4 | 1 | four  | 5 | -5 | 3 | -3
+ 4 | 1 | four  | 5 | -5 | 2 |  4
+ 4 | 1 | four  | 5 | -5 | 5 | -5
+ 4 | 1 | four  | 5 | -5 | 5 | -5
+ 4 | 1 | four  | 5 | -5 | 0 |   
+ 4 | 1 | four  | 5 | -5 |   |   
+ 4 | 1 | four  | 5 | -5 |   |  0
+ 4 | 1 | four  | 0 |    | 1 | -1
+ 4 | 1 | four  | 0 |    | 2 |  2
+ 4 | 1 | four  | 0 |    | 3 | -3
+ 4 | 1 | four  | 0 |    | 2 |  4
+ 4 | 1 | four  | 0 |    | 5 | -5
+ 4 | 1 | four  | 0 |    | 5 | -5
+ 4 | 1 | four  | 0 |    | 0 |   
+ 4 | 1 | four  | 0 |    |   |   
+ 4 | 1 | four  | 0 |    |   |  0
+ 4 | 1 | four  |   |    | 1 | -1
+ 4 | 1 | four  |   |    | 2 |  2
+ 4 | 1 | four  |   |    | 3 | -3
+ 4 | 1 | four  |   |    | 2 |  4
+ 4 | 1 | four  |   |    | 5 | -5
+ 4 | 1 | four  |   |    | 5 | -5
+ 4 | 1 | four  |   |    | 0 |   
+ 4 | 1 | four  |   |    |   |   
+ 4 | 1 | four  |   |    |   |  0
  4 | 1 | four  |   |  0 | 1 | -1
  4 | 1 | four  |   |  0 | 2 |  2
  4 | 1 | four  |   |  0 | 3 | -3
@@ -1493,6 +987,78 @@
  4 | 1 | four  |   |  0 | 0 |   
  4 | 1 | four  |   |  0 |   |   
  4 | 1 | four  |   |  0 |   |  0
+ 5 | 0 | five  | 1 | -1 | 1 | -1
+ 5 | 0 | five  | 1 | -1 | 2 |  2
+ 5 | 0 | five  | 1 | -1 | 3 | -3
+ 5 | 0 | five  | 1 | -1 | 2 |  4
+ 5 | 0 | five  | 1 | -1 | 5 | -5
+ 5 | 0 | five  | 1 | -1 | 5 | -5
+ 5 | 0 | five  | 1 | -1 | 0 |   
+ 5 | 0 | five  | 1 | -1 |   |   
+ 5 | 0 | five  | 1 | -1 |   |  0
+ 5 | 0 | five  | 2 |  2 | 1 | -1
+ 5 | 0 | five  | 2 |  2 | 2 |  2
+ 5 | 0 | five  | 2 |  2 | 3 | -3
+ 5 | 0 | five  | 2 |  2 | 2 |  4
+ 5 | 0 | five  | 2 |  2 | 5 | -5
+ 5 | 0 | five  | 2 |  2 | 5 | -5
+ 5 | 0 | five  | 2 |  2 | 0 |   
+ 5 | 0 | five  | 2 |  2 |   |   
+ 5 | 0 | five  | 2 |  2 |   |  0
+ 5 | 0 | five  | 3 | -3 | 1 | -1
+ 5 | 0 | five  | 3 | -3 | 2 |  2
+ 5 | 0 | five  | 3 | -3 | 3 | -3
+ 5 | 0 | five  | 3 | -3 | 2 |  4
+ 5 | 0 | five  | 3 | -3 | 5 | -5
+ 5 | 0 | five  | 3 | -3 | 5 | -5
+ 5 | 0 | five  | 3 | -3 | 0 |   
+ 5 | 0 | five  | 3 | -3 |   |   
+ 5 | 0 | five  | 3 | -3 |   |  0
+ 5 | 0 | five  | 2 |  4 | 1 | -1
+ 5 | 0 | five  | 2 |  4 | 2 |  2
+ 5 | 0 | five  | 2 |  4 | 3 | -3
+ 5 | 0 | five  | 2 |  4 | 2 |  4
+ 5 | 0 | five  | 2 |  4 | 5 | -5
+ 5 | 0 | five  | 2 |  4 | 5 | -5
+ 5 | 0 | five  | 2 |  4 | 0 |   
+ 5 | 0 | five  | 2 |  4 |   |   
+ 5 | 0 | five  | 2 |  4 |   |  0
+ 5 | 0 | five  | 5 | -5 | 1 | -1
+ 5 | 0 | five  | 5 | -5 | 2 |  2
+ 5 | 0 | five  | 5 | -5 | 3 | -3
+ 5 | 0 | five  | 5 | -5 | 2 |  4
+ 5 | 0 | five  | 5 | -5 | 5 | -5
+ 5 | 0 | five  | 5 | -5 | 5 | -5
+ 5 | 0 | five  | 5 | -5 | 0 |   
+ 5 | 0 | five  | 5 | -5 |   |   
+ 5 | 0 | five  | 5 | -5 |   |  0
+ 5 | 0 | five  | 5 | -5 | 1 | -1
+ 5 | 0 | five  | 5 | -5 | 2 |  2
+ 5 | 0 | five  | 5 | -5 | 3 | -3
+ 5 | 0 | five  | 5 | -5 | 2 |  4
+ 5 | 0 | five  | 5 | -5 | 5 | -5
+ 5 | 0 | five  | 5 | -5 | 5 | -5
+ 5 | 0 | five  | 5 | -5 | 0 |   
+ 5 | 0 | five  | 5 | -5 |   |   
+ 5 | 0 | five  | 5 | -5 |   |  0
+ 5 | 0 | five  | 0 |    | 1 | -1
+ 5 | 0 | five  | 0 |    | 2 |  2
+ 5 | 0 | five  | 0 |    | 3 | -3
+ 5 | 0 | five  | 0 |    | 2 |  4
+ 5 | 0 | five  | 0 |    | 5 | -5
+ 5 | 0 | five  | 0 |    | 5 | -5
+ 5 | 0 | five  | 0 |    | 0 |   
+ 5 | 0 | five  | 0 |    |   |   
+ 5 | 0 | five  | 0 |    |   |  0
+ 5 | 0 | five  |   |    | 1 | -1
+ 5 | 0 | five  |   |    | 2 |  2
+ 5 | 0 | five  |   |    | 3 | -3
+ 5 | 0 | five  |   |    | 2 |  4
+ 5 | 0 | five  |   |    | 5 | -5
+ 5 | 0 | five  |   |    | 5 | -5
+ 5 | 0 | five  |   |    | 0 |   
+ 5 | 0 | five  |   |    |   |   
+ 5 | 0 | five  |   |    |   |  0
  5 | 0 | five  |   |  0 | 1 | -1
  5 | 0 | five  |   |  0 | 2 |  2
  5 | 0 | five  |   |  0 | 3 | -3
@@ -1502,6 +1068,78 @@
  5 | 0 | five  |   |  0 | 0 |   
  5 | 0 | five  |   |  0 |   |   
  5 | 0 | five  |   |  0 |   |  0
+ 6 | 6 | six   | 1 | -1 | 1 | -1
+ 6 | 6 | six   | 1 | -1 | 2 |  2
+ 6 | 6 | six   | 1 | -1 | 3 | -3
+ 6 | 6 | six   | 1 | -1 | 2 |  4
+ 6 | 6 | six   | 1 | -1 | 5 | -5
+ 6 | 6 | six   | 1 | -1 | 5 | -5
+ 6 | 6 | six   | 1 | -1 | 0 |   
+ 6 | 6 | six   | 1 | -1 |   |   
+ 6 | 6 | six   | 1 | -1 |   |  0
+ 6 | 6 | six   | 2 |  2 | 1 | -1
+ 6 | 6 | six   | 2 |  2 | 2 |  2
+ 6 | 6 | six   | 2 |  2 | 3 | -3
+ 6 | 6 | six   | 2 |  2 | 2 |  4
+ 6 | 6 | six   | 2 |  2 | 5 | -5
+ 6 | 6 | six   | 2 |  2 | 5 | -5
+ 6 | 6 | six   | 2 |  2 | 0 |   
+ 6 | 6 | six   | 2 |  2 |   |   
+ 6 | 6 | six   | 2 |  2 |   |  0
+ 6 | 6 | six   | 3 | -3 | 1 | -1
+ 6 | 6 | six   | 3 | -3 | 2 |  2
+ 6 | 6 | six   | 3 | -3 | 3 | -3
+ 6 | 6 | six   | 3 | -3 | 2 |  4
+ 6 | 6 | six   | 3 | -3 | 5 | -5
+ 6 | 6 | six   | 3 | -3 | 5 | -5
+ 6 | 6 | six   | 3 | -3 | 0 |   
+ 6 | 6 | six   | 3 | -3 |   |   
+ 6 | 6 | six   | 3 | -3 |   |  0
+ 6 | 6 | six   | 2 |  4 | 1 | -1
+ 6 | 6 | six   | 2 |  4 | 2 |  2
+ 6 | 6 | six   | 2 |  4 | 3 | -3
+ 6 | 6 | six   | 2 |  4 | 2 |  4
+ 6 | 6 | six   | 2 |  4 | 5 | -5
+ 6 | 6 | six   | 2 |  4 | 5 | -5
+ 6 | 6 | six   | 2 |  4 | 0 |   
+ 6 | 6 | six   | 2 |  4 |   |   
+ 6 | 6 | six   | 2 |  4 |   |  0
+ 6 | 6 | six   | 5 | -5 | 1 | -1
+ 6 | 6 | six   | 5 | -5 | 2 |  2
+ 6 | 6 | six   | 5 | -5 | 3 | -3
+ 6 | 6 | six   | 5 | -5 | 2 |  4
+ 6 | 6 | six   | 5 | -5 | 5 | -5
+ 6 | 6 | six   | 5 | -5 | 5 | -5
+ 6 | 6 | six   | 5 | -5 | 0 |   
+ 6 | 6 | six   | 5 | -5 |   |   
+ 6 | 6 | six   | 5 | -5 |   |  0
+ 6 | 6 | six   | 5 | -5 | 1 | -1
+ 6 | 6 | six   | 5 | -5 | 2 |  2
+ 6 | 6 | six   | 5 | -5 | 3 | -3
+ 6 | 6 | six   | 5 | -5 | 2 |  4
+ 6 | 6 | six   | 5 | -5 | 5 | -5
+ 6 | 6 | six   | 5 | -5 | 5 | -5
+ 6 | 6 | six   | 5 | -5 | 0 |   
+ 6 | 6 | six   | 5 | -5 |   |   
+ 6 | 6 | six   | 5 | -5 |   |  0
+ 6 | 6 | six   | 0 |    | 1 | -1
+ 6 | 6 | six   | 0 |    | 2 |  2
+ 6 | 6 | six   | 0 |    | 3 | -3
+ 6 | 6 | six   | 0 |    | 2 |  4
+ 6 | 6 | six   | 0 |    | 5 | -5
+ 6 | 6 | six   | 0 |    | 5 | -5
+ 6 | 6 | six   | 0 |    | 0 |   
+ 6 | 6 | six   | 0 |    |   |   
+ 6 | 6 | six   | 0 |    |   |  0
+ 6 | 6 | six   |   |    | 1 | -1
+ 6 | 6 | six   |   |    | 2 |  2
+ 6 | 6 | six   |   |    | 3 | -3
+ 6 | 6 | six   |   |    | 2 |  4
+ 6 | 6 | six   |   |    | 5 | -5
+ 6 | 6 | six   |   |    | 5 | -5
+ 6 | 6 | six   |   |    | 0 |   
+ 6 | 6 | six   |   |    |   |   
+ 6 | 6 | six   |   |    |   |  0
  6 | 6 | six   |   |  0 | 1 | -1
  6 | 6 | six   |   |  0 | 2 |  2
  6 | 6 | six   |   |  0 | 3 | -3
@@ -1511,6 +1149,78 @@
  6 | 6 | six   |   |  0 | 0 |   
  6 | 6 | six   |   |  0 |   |   
  6 | 6 | six   |   |  0 |   |  0
+ 7 | 7 | seven | 1 | -1 | 1 | -1
+ 7 | 7 | seven | 1 | -1 | 2 |  2
+ 7 | 7 | seven | 1 | -1 | 3 | -3
+ 7 | 7 | seven | 1 | -1 | 2 |  4
+ 7 | 7 | seven | 1 | -1 | 5 | -5
+ 7 | 7 | seven | 1 | -1 | 5 | -5
+ 7 | 7 | seven | 1 | -1 | 0 |   
+ 7 | 7 | seven | 1 | -1 |   |   
+ 7 | 7 | seven | 1 | -1 |   |  0
+ 7 | 7 | seven | 2 |  2 | 1 | -1
+ 7 | 7 | seven | 2 |  2 | 2 |  2
+ 7 | 7 | seven | 2 |  2 | 3 | -3
+ 7 | 7 | seven | 2 |  2 | 2 |  4
+ 7 | 7 | seven | 2 |  2 | 5 | -5
+ 7 | 7 | seven | 2 |  2 | 5 | -5
+ 7 | 7 | seven | 2 |  2 | 0 |   
+ 7 | 7 | seven | 2 |  2 |   |   
+ 7 | 7 | seven | 2 |  2 |   |  0
+ 7 | 7 | seven | 3 | -3 | 1 | -1
+ 7 | 7 | seven | 3 | -3 | 2 |  2
+ 7 | 7 | seven | 3 | -3 | 3 | -3
+ 7 | 7 | seven | 3 | -3 | 2 |  4
+ 7 | 7 | seven | 3 | -3 | 5 | -5
+ 7 | 7 | seven | 3 | -3 | 5 | -5
+ 7 | 7 | seven | 3 | -3 | 0 |   
+ 7 | 7 | seven | 3 | -3 |   |   
+ 7 | 7 | seven | 3 | -3 |   |  0
+ 7 | 7 | seven | 2 |  4 | 1 | -1
+ 7 | 7 | seven | 2 |  4 | 2 |  2
+ 7 | 7 | seven | 2 |  4 | 3 | -3
+ 7 | 7 | seven | 2 |  4 | 2 |  4
+ 7 | 7 | seven | 2 |  4 | 5 | -5
+ 7 | 7 | seven | 2 |  4 | 5 | -5
+ 7 | 7 | seven | 2 |  4 | 0 |   
+ 7 | 7 | seven | 2 |  4 |   |   
+ 7 | 7 | seven | 2 |  4 |   |  0
+ 7 | 7 | seven | 5 | -5 | 1 | -1
+ 7 | 7 | seven | 5 | -5 | 2 |  2
+ 7 | 7 | seven | 5 | -5 | 3 | -3
+ 7 | 7 | seven | 5 | -5 | 2 |  4
+ 7 | 7 | seven | 5 | -5 | 5 | -5
+ 7 | 7 | seven | 5 | -5 | 5 | -5
+ 7 | 7 | seven | 5 | -5 | 0 |   
+ 7 | 7 | seven | 5 | -5 |   |   
+ 7 | 7 | seven | 5 | -5 |   |  0
+ 7 | 7 | seven | 5 | -5 | 1 | -1
+ 7 | 7 | seven | 5 | -5 | 2 |  2
+ 7 | 7 | seven | 5 | -5 | 3 | -3
+ 7 | 7 | seven | 5 | -5 | 2 |  4
+ 7 | 7 | seven | 5 | -5 | 5 | -5
+ 7 | 7 | seven | 5 | -5 | 5 | -5
+ 7 | 7 | seven | 5 | -5 | 0 |   
+ 7 | 7 | seven | 5 | -5 |   |   
+ 7 | 7 | seven | 5 | -5 |   |  0
+ 7 | 7 | seven | 0 |    | 1 | -1
+ 7 | 7 | seven | 0 |    | 2 |  2
+ 7 | 7 | seven | 0 |    | 3 | -3
+ 7 | 7 | seven | 0 |    | 2 |  4
+ 7 | 7 | seven | 0 |    | 5 | -5
+ 7 | 7 | seven | 0 |    | 5 | -5
+ 7 | 7 | seven | 0 |    | 0 |   
+ 7 | 7 | seven | 0 |    |   |   
+ 7 | 7 | seven | 0 |    |   |  0
+ 7 | 7 | seven |   |    | 1 | -1
+ 7 | 7 | seven |   |    | 2 |  2
+ 7 | 7 | seven |   |    | 3 | -3
+ 7 | 7 | seven |   |    | 2 |  4
+ 7 | 7 | seven |   |    | 5 | -5
+ 7 | 7 | seven |   |    | 5 | -5
+ 7 | 7 | seven |   |    | 0 |   
+ 7 | 7 | seven |   |    |   |   
+ 7 | 7 | seven |   |    |   |  0
  7 | 7 | seven |   |  0 | 1 | -1
  7 | 7 | seven |   |  0 | 2 |  2
  7 | 7 | seven |   |  0 | 3 | -3
@@ -1520,6 +1230,78 @@
  7 | 7 | seven |   |  0 | 0 |   
  7 | 7 | seven |   |  0 |   |   
  7 | 7 | seven |   |  0 |   |  0
+ 8 | 8 | eight | 1 | -1 | 1 | -1
+ 8 | 8 | eight | 1 | -1 | 2 |  2
+ 8 | 8 | eight | 1 | -1 | 3 | -3
+ 8 | 8 | eight | 1 | -1 | 2 |  4
+ 8 | 8 | eight | 1 | -1 | 5 | -5
+ 8 | 8 | eight | 1 | -1 | 5 | -5
+ 8 | 8 | eight | 1 | -1 | 0 |   
+ 8 | 8 | eight | 1 | -1 |   |   
+ 8 | 8 | eight | 1 | -1 |   |  0
+ 8 | 8 | eight | 2 |  2 | 1 | -1
+ 8 | 8 | eight | 2 |  2 | 2 |  2
+ 8 | 8 | eight | 2 |  2 | 3 | -3
+ 8 | 8 | eight | 2 |  2 | 2 |  4
+ 8 | 8 | eight | 2 |  2 | 5 | -5
+ 8 | 8 | eight | 2 |  2 | 5 | -5
+ 8 | 8 | eight | 2 |  2 | 0 |   
+ 8 | 8 | eight | 2 |  2 |   |   
+ 8 | 8 | eight | 2 |  2 |   |  0
+ 8 | 8 | eight | 3 | -3 | 1 | -1
+ 8 | 8 | eight | 3 | -3 | 2 |  2
+ 8 | 8 | eight | 3 | -3 | 3 | -3
+ 8 | 8 | eight | 3 | -3 | 2 |  4
+ 8 | 8 | eight | 3 | -3 | 5 | -5
+ 8 | 8 | eight | 3 | -3 | 5 | -5
+ 8 | 8 | eight | 3 | -3 | 0 |   
+ 8 | 8 | eight | 3 | -3 |   |   
+ 8 | 8 | eight | 3 | -3 |   |  0
+ 8 | 8 | eight | 2 |  4 | 1 | -1
+ 8 | 8 | eight | 2 |  4 | 2 |  2
+ 8 | 8 | eight | 2 |  4 | 3 | -3
+ 8 | 8 | eight | 2 |  4 | 2 |  4
+ 8 | 8 | eight | 2 |  4 | 5 | -5
+ 8 | 8 | eight | 2 |  4 | 5 | -5
+ 8 | 8 | eight | 2 |  4 | 0 |   
+ 8 | 8 | eight | 2 |  4 |   |   
+ 8 | 8 | eight | 2 |  4 |   |  0
+ 8 | 8 | eight | 5 | -5 | 1 | -1
+ 8 | 8 | eight | 5 | -5 | 2 |  2
+ 8 | 8 | eight | 5 | -5 | 3 | -3
+ 8 | 8 | eight | 5 | -5 | 2 |  4
+ 8 | 8 | eight | 5 | -5 | 5 | -5
+ 8 | 8 | eight | 5 | -5 | 5 | -5
+ 8 | 8 | eight | 5 | -5 | 0 |   
+ 8 | 8 | eight | 5 | -5 |   |   
+ 8 | 8 | eight | 5 | -5 |   |  0
+ 8 | 8 | eight | 5 | -5 | 1 | -1
+ 8 | 8 | eight | 5 | -5 | 2 |  2
+ 8 | 8 | eight | 5 | -5 | 3 | -3
+ 8 | 8 | eight | 5 | -5 | 2 |  4
+ 8 | 8 | eight | 5 | -5 | 5 | -5
+ 8 | 8 | eight | 5 | -5 | 5 | -5
+ 8 | 8 | eight | 5 | -5 | 0 |   
+ 8 | 8 | eight | 5 | -5 |   |   
+ 8 | 8 | eight | 5 | -5 |   |  0
+ 8 | 8 | eight | 0 |    | 1 | -1
+ 8 | 8 | eight | 0 |    | 2 |  2
+ 8 | 8 | eight | 0 |    | 3 | -3
+ 8 | 8 | eight | 0 |    | 2 |  4
+ 8 | 8 | eight | 0 |    | 5 | -5
+ 8 | 8 | eight | 0 |    | 5 | -5
+ 8 | 8 | eight | 0 |    | 0 |   
+ 8 | 8 | eight | 0 |    |   |   
+ 8 | 8 | eight | 0 |    |   |  0
+ 8 | 8 | eight |   |    | 1 | -1
+ 8 | 8 | eight |   |    | 2 |  2
+ 8 | 8 | eight |   |    | 3 | -3
+ 8 | 8 | eight |   |    | 2 |  4
+ 8 | 8 | eight |   |    | 5 | -5
+ 8 | 8 | eight |   |    | 5 | -5
+ 8 | 8 | eight |   |    | 0 |   
+ 8 | 8 | eight |   |    |   |   
+ 8 | 8 | eight |   |    |   |  0
  8 | 8 | eight |   |  0 | 1 | -1
  8 | 8 | eight |   |  0 | 2 |  2
  8 | 8 | eight |   |  0 | 3 | -3
@@ -1529,6 +1311,78 @@
  8 | 8 | eight |   |  0 | 0 |   
  8 | 8 | eight |   |  0 |   |   
  8 | 8 | eight |   |  0 |   |  0
+ 0 |   | zero  | 1 | -1 | 1 | -1
+ 0 |   | zero  | 1 | -1 | 2 |  2
+ 0 |   | zero  | 1 | -1 | 3 | -3
+ 0 |   | zero  | 1 | -1 | 2 |  4
+ 0 |   | zero  | 1 | -1 | 5 | -5
+ 0 |   | zero  | 1 | -1 | 5 | -5
+ 0 |   | zero  | 1 | -1 | 0 |   
+ 0 |   | zero  | 1 | -1 |   |   
+ 0 |   | zero  | 1 | -1 |   |  0
+ 0 |   | zero  | 2 |  2 | 1 | -1
+ 0 |   | zero  | 2 |  2 | 2 |  2
+ 0 |   | zero  | 2 |  2 | 3 | -3
+ 0 |   | zero  | 2 |  2 | 2 |  4
+ 0 |   | zero  | 2 |  2 | 5 | -5
+ 0 |   | zero  | 2 |  2 | 5 | -5
+ 0 |   | zero  | 2 |  2 | 0 |   
+ 0 |   | zero  | 2 |  2 |   |   
+ 0 |   | zero  | 2 |  2 |   |  0
+ 0 |   | zero  | 3 | -3 | 1 | -1
+ 0 |   | zero  | 3 | -3 | 2 |  2
+ 0 |   | zero  | 3 | -3 | 3 | -3
+ 0 |   | zero  | 3 | -3 | 2 |  4
+ 0 |   | zero  | 3 | -3 | 5 | -5
+ 0 |   | zero  | 3 | -3 | 5 | -5
+ 0 |   | zero  | 3 | -3 | 0 |   
+ 0 |   | zero  | 3 | -3 |   |   
+ 0 |   | zero  | 3 | -3 |   |  0
+ 0 |   | zero  | 2 |  4 | 1 | -1
+ 0 |   | zero  | 2 |  4 | 2 |  2
+ 0 |   | zero  | 2 |  4 | 3 | -3
+ 0 |   | zero  | 2 |  4 | 2 |  4
+ 0 |   | zero  | 2 |  4 | 5 | -5
+ 0 |   | zero  | 2 |  4 | 5 | -5
+ 0 |   | zero  | 2 |  4 | 0 |   
+ 0 |   | zero  | 2 |  4 |   |   
+ 0 |   | zero  | 2 |  4 |   |  0
+ 0 |   | zero  | 5 | -5 | 1 | -1
+ 0 |   | zero  | 5 | -5 | 2 |  2
+ 0 |   | zero  | 5 | -5 | 3 | -3
+ 0 |   | zero  | 5 | -5 | 2 |  4
+ 0 |   | zero  | 5 | -5 | 5 | -5
+ 0 |   | zero  | 5 | -5 | 5 | -5
+ 0 |   | zero  | 5 | -5 | 0 |   
+ 0 |   | zero  | 5 | -5 |   |   
+ 0 |   | zero  | 5 | -5 |   |  0
+ 0 |   | zero  | 5 | -5 | 1 | -1
+ 0 |   | zero  | 5 | -5 | 2 |  2
+ 0 |   | zero  | 5 | -5 | 3 | -3
+ 0 |   | zero  | 5 | -5 | 2 |  4
+ 0 |   | zero  | 5 | -5 | 5 | -5
+ 0 |   | zero  | 5 | -5 | 5 | -5
+ 0 |   | zero  | 5 | -5 | 0 |   
+ 0 |   | zero  | 5 | -5 |   |   
+ 0 |   | zero  | 5 | -5 |   |  0
+ 0 |   | zero  | 0 |    | 1 | -1
+ 0 |   | zero  | 0 |    | 2 |  2
+ 0 |   | zero  | 0 |    | 3 | -3
+ 0 |   | zero  | 0 |    | 2 |  4
+ 0 |   | zero  | 0 |    | 5 | -5
+ 0 |   | zero  | 0 |    | 5 | -5
+ 0 |   | zero  | 0 |    | 0 |   
+ 0 |   | zero  | 0 |    |   |   
+ 0 |   | zero  | 0 |    |   |  0
+ 0 |   | zero  |   |    | 1 | -1
+ 0 |   | zero  |   |    | 2 |  2
+ 0 |   | zero  |   |    | 3 | -3
+ 0 |   | zero  |   |    | 2 |  4
+ 0 |   | zero  |   |    | 5 | -5
+ 0 |   | zero  |   |    | 5 | -5
+ 0 |   | zero  |   |    | 0 |   
+ 0 |   | zero  |   |    |   |   
+ 0 |   | zero  |   |    |   |  0
  0 |   | zero  |   |  0 | 1 | -1
  0 |   | zero  |   |  0 | 2 |  2
  0 |   | zero  |   |  0 | 3 | -3
@@ -1538,6 +1392,78 @@
  0 |   | zero  |   |  0 | 0 |   
  0 |   | zero  |   |  0 |   |   
  0 |   | zero  |   |  0 |   |  0
+   |   | null  | 1 | -1 | 1 | -1
+   |   | null  | 1 | -1 | 2 |  2
+   |   | null  | 1 | -1 | 3 | -3
+   |   | null  | 1 | -1 | 2 |  4
+   |   | null  | 1 | -1 | 5 | -5
+   |   | null  | 1 | -1 | 5 | -5
+   |   | null  | 1 | -1 | 0 |   
+   |   | null  | 1 | -1 |   |   
+   |   | null  | 1 | -1 |   |  0
+   |   | null  | 2 |  2 | 1 | -1
+   |   | null  | 2 |  2 | 2 |  2
+   |   | null  | 2 |  2 | 3 | -3
+   |   | null  | 2 |  2 | 2 |  4
+   |   | null  | 2 |  2 | 5 | -5
+   |   | null  | 2 |  2 | 5 | -5
+   |   | null  | 2 |  2 | 0 |   
+   |   | null  | 2 |  2 |   |   
+   |   | null  | 2 |  2 |   |  0
+   |   | null  | 3 | -3 | 1 | -1
+   |   | null  | 3 | -3 | 2 |  2
+   |   | null  | 3 | -3 | 3 | -3
+   |   | null  | 3 | -3 | 2 |  4
+   |   | null  | 3 | -3 | 5 | -5
+   |   | null  | 3 | -3 | 5 | -5
+   |   | null  | 3 | -3 | 0 |   
+   |   | null  | 3 | -3 |   |   
+   |   | null  | 3 | -3 |   |  0
+   |   | null  | 2 |  4 | 1 | -1
+   |   | null  | 2 |  4 | 2 |  2
+   |   | null  | 2 |  4 | 3 | -3
+   |   | null  | 2 |  4 | 2 |  4
+   |   | null  | 2 |  4 | 5 | -5
+   |   | null  | 2 |  4 | 5 | -5
+   |   | null  | 2 |  4 | 0 |   
+   |   | null  | 2 |  4 |   |   
+   |   | null  | 2 |  4 |   |  0
+   |   | null  | 5 | -5 | 1 | -1
+   |   | null  | 5 | -5 | 2 |  2
+   |   | null  | 5 | -5 | 3 | -3
+   |   | null  | 5 | -5 | 2 |  4
+   |   | null  | 5 | -5 | 5 | -5
+   |   | null  | 5 | -5 | 5 | -5
+   |   | null  | 5 | -5 | 0 |   
+   |   | null  | 5 | -5 |   |   
+   |   | null  | 5 | -5 |   |  0
+   |   | null  | 5 | -5 | 1 | -1
+   |   | null  | 5 | -5 | 2 |  2
+   |   | null  | 5 | -5 | 3 | -3
+   |   | null  | 5 | -5 | 2 |  4
+   |   | null  | 5 | -5 | 5 | -5
+   |   | null  | 5 | -5 | 5 | -5
+   |   | null  | 5 | -5 | 0 |   
+   |   | null  | 5 | -5 |   |   
+   |   | null  | 5 | -5 |   |  0
+   |   | null  | 0 |    | 1 | -1
+   |   | null  | 0 |    | 2 |  2
+   |   | null  | 0 |    | 3 | -3
+   |   | null  | 0 |    | 2 |  4
+   |   | null  | 0 |    | 5 | -5
+   |   | null  | 0 |    | 5 | -5
+   |   | null  | 0 |    | 0 |   
+   |   | null  | 0 |    |   |   
+   |   | null  | 0 |    |   |  0
+   |   | null  |   |    | 1 | -1
+   |   | null  |   |    | 2 |  2
+   |   | null  |   |    | 3 | -3
+   |   | null  |   |    | 2 |  4
+   |   | null  |   |    | 5 | -5
+   |   | null  |   |    | 5 | -5
+   |   | null  |   |    | 0 |   
+   |   | null  |   |    |   |   
+   |   | null  |   |    |   |  0
    |   | null  |   |  0 | 1 | -1
    |   | null  |   |  0 | 2 |  2
    |   | null  |   |  0 | 3 | -3
@@ -1547,6 +1473,78 @@
    |   | null  |   |  0 | 0 |   
    |   | null  |   |  0 |   |   
    |   | null  |   |  0 |   |  0
+   | 0 | zero  | 1 | -1 | 1 | -1
+   | 0 | zero  | 1 | -1 | 2 |  2
+   | 0 | zero  | 1 | -1 | 3 | -3
+   | 0 | zero  | 1 | -1 | 2 |  4
+   | 0 | zero  | 1 | -1 | 5 | -5
+   | 0 | zero  | 1 | -1 | 5 | -5
+   | 0 | zero  | 1 | -1 | 0 |   
+   | 0 | zero  | 1 | -1 |   |   
+   | 0 | zero  | 1 | -1 |   |  0
+   | 0 | zero  | 2 |  2 | 1 | -1
+   | 0 | zero  | 2 |  2 | 2 |  2
+   | 0 | zero  | 2 |  2 | 3 | -3
+   | 0 | zero  | 2 |  2 | 2 |  4
+   | 0 | zero  | 2 |  2 | 5 | -5
+   | 0 | zero  | 2 |  2 | 5 | -5
+   | 0 | zero  | 2 |  2 | 0 |   
+   | 0 | zero  | 2 |  2 |   |   
+   | 0 | zero  | 2 |  2 |   |  0
+   | 0 | zero  | 3 | -3 | 1 | -1
+   | 0 | zero  | 3 | -3 | 2 |  2
+   | 0 | zero  | 3 | -3 | 3 | -3
+   | 0 | zero  | 3 | -3 | 2 |  4
+   | 0 | zero  | 3 | -3 | 5 | -5
+   | 0 | zero  | 3 | -3 | 5 | -5
+   | 0 | zero  | 3 | -3 | 0 |   
+   | 0 | zero  | 3 | -3 |   |   
+   | 0 | zero  | 3 | -3 |   |  0
+   | 0 | zero  | 2 |  4 | 1 | -1
+   | 0 | zero  | 2 |  4 | 2 |  2
+   | 0 | zero  | 2 |  4 | 3 | -3
+   | 0 | zero  | 2 |  4 | 2 |  4
+   | 0 | zero  | 2 |  4 | 5 | -5
+   | 0 | zero  | 2 |  4 | 5 | -5
+   | 0 | zero  | 2 |  4 | 0 |   
+   | 0 | zero  | 2 |  4 |   |   
+   | 0 | zero  | 2 |  4 |   |  0
+   | 0 | zero  | 5 | -5 | 1 | -1
+   | 0 | zero  | 5 | -5 | 2 |  2
+   | 0 | zero  | 5 | -5 | 3 | -3
+   | 0 | zero  | 5 | -5 | 2 |  4
+   | 0 | zero  | 5 | -5 | 5 | -5
+   | 0 | zero  | 5 | -5 | 5 | -5
+   | 0 | zero  | 5 | -5 | 0 |   
+   | 0 | zero  | 5 | -5 |   |   
+   | 0 | zero  | 5 | -5 |   |  0
+   | 0 | zero  | 5 | -5 | 1 | -1
+   | 0 | zero  | 5 | -5 | 2 |  2
+   | 0 | zero  | 5 | -5 | 3 | -3
+   | 0 | zero  | 5 | -5 | 2 |  4
+   | 0 | zero  | 5 | -5 | 5 | -5
+   | 0 | zero  | 5 | -5 | 5 | -5
+   | 0 | zero  | 5 | -5 | 0 |   
+   | 0 | zero  | 5 | -5 |   |   
+   | 0 | zero  | 5 | -5 |   |  0
+   | 0 | zero  | 0 |    | 1 | -1
+   | 0 | zero  | 0 |    | 2 |  2
+   | 0 | zero  | 0 |    | 3 | -3
+   | 0 | zero  | 0 |    | 2 |  4
+   | 0 | zero  | 0 |    | 5 | -5
+   | 0 | zero  | 0 |    | 5 | -5
+   | 0 | zero  | 0 |    | 0 |   
+   | 0 | zero  | 0 |    |   |   
+   | 0 | zero  | 0 |    |   |  0
+   | 0 | zero  |   |    | 1 | -1
+   | 0 | zero  |   |    | 2 |  2
+   | 0 | zero  |   |    | 3 | -3
+   | 0 | zero  |   |    | 2 |  4
+   | 0 | zero  |   |    | 5 | -5
+   | 0 | zero  |   |    | 5 | -5
+   | 0 | zero  |   |    | 0 |   
+   | 0 | zero  |   |    |   |   
+   | 0 | zero  |   |    |   |  0
    | 0 | zero  |   |  0 | 1 | -1
    | 0 | zero  |   |  0 | 2 |  2
    | 0 | zero  |   |  0 | 3 | -3
@@ -1573,13 +1571,13 @@
   FROM J1_TBL INNER JOIN J2_TBL USING (i);
  i | j |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
  2 | 3 | two   |  4
  3 | 2 | three | -3
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
 (7 rows)
 
 -- Same as above, slightly different syntax
@@ -1587,13 +1585,13 @@
   FROM J1_TBL JOIN J2_TBL USING (i);
  i | j |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
  2 | 3 | two   |  4
  3 | 2 | three | -3
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
 (7 rows)
 
 SELECT *
@@ -1615,8 +1613,8 @@
   ORDER BY b, t1.a;
  b | a |   c   | a 
 ---+---+-------+---
- 0 | 5 | five  |  
  0 |   | zero  |  
+ 0 | 5 | five  |  
  2 | 3 | three | 2
  4 | 1 | one   | 2
 (4 rows)
@@ -1629,50 +1627,48 @@
 (1 row)
 
 SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';  -- ok
- i | j |  t  | k  
----+---+-----+----
- 1 | 4 | one | -1
-(1 row)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
+                                           ^
 SELECT * FROM (J1_TBL JOIN J2_TBL USING (i)) AS x WHERE J1_TBL.t = 'one';  -- error
-ERROR:  invalid reference to FROM-clause entry for table "j1_tbl"
-LINE 1: ... * FROM (J1_TBL JOIN J2_TBL USING (i)) AS x WHERE J1_TBL.t =...
-                                                             ^
-DETAIL:  There is an entry for table "j1_tbl", but it cannot be referenced from this part of the query.
+ERROR:  no data source matches prefix: j1_tbl in this context
 SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.i = 1;  -- ok
- i | j |  t  | k  
----+---+-----+----
- 1 | 4 | one | -1
-(1 row)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.i = 1
+                                           ^
 SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.t = 'one';  -- error
-ERROR:  column x.t does not exist
-LINE 1: ...CT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.t = 'one...
-                                                             ^
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT * FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE x.t = 'one'
+                                           ^
 SELECT * FROM (J1_TBL JOIN J2_TBL USING (i) AS x) AS xx WHERE x.i = 1;  -- error (XXX could use better hint)
-ERROR:  missing FROM-clause entry for table "x"
-LINE 1: ...ROM (J1_TBL JOIN J2_TBL USING (i) AS x) AS xx WHERE x.i = 1;
-                                                               ^
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT * FROM (J1_TBL JOIN J2_TBL USING (i) AS x) AS xx WHERE x.i = 1
+                                            ^
+HINT:  try \h <SOURCE>
 SELECT * FROM J1_TBL a1 JOIN J2_TBL a2 USING (i) AS a1;  -- error
-ERROR:  table name "a1" specified more than once
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT * FROM J1_TBL a1 JOIN J2_TBL a2 USING (i) AS a1
+                                                 ^
 SELECT x.* FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';
- i 
----
- 1
-(1 row)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT x.* FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
+                                             ^
 SELECT ROW(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';
- row 
------
- (1)
-(1 row)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT ROW(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
+                                                  ^
 SELECT row_to_json(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one';
- row_to_json 
--------------
- {"i":1}
-(1 row)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+SELECT row_to_json(x.*) FROM J1_TBL JOIN J2_TBL USING (i) AS x WHERE J1_TBL.t = 'one'
+                                                          ^
 --
 -- NATURAL JOIN
 -- Inner equi-join on all columns with the same name
@@ -1681,35 +1677,35 @@
   FROM J1_TBL NATURAL JOIN J2_TBL;
  i | j |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
  2 | 3 | two   |  4
  3 | 2 | three | -3
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
 (7 rows)
 
 SELECT *
   FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (a, d);
  a | b |   c   | d  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
  2 | 3 | two   |  4
  3 | 2 | three | -3
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
 (7 rows)
 
 SELECT *
   FROM J1_TBL t1 (a, b, c) NATURAL JOIN J2_TBL t2 (d, a);
  a | b |  c   | d 
 ---+---+------+---
- 0 |   | zero |  
  2 | 3 | two  | 2
  4 | 1 | four | 2
+ 0 |   | zero |  
 (3 rows)
 
 -- mismatch number of columns
@@ -1718,13 +1714,13 @@
   FROM J1_TBL t1 (a, b) NATURAL JOIN J2_TBL t2 (a);
  a | b |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
  2 | 3 | two   |  4
  3 | 2 | three | -3
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
 (7 rows)
 
 --
@@ -1734,22 +1730,22 @@
   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.i);
  i | j |   t   | i | k  
 ---+---+-------+---+----
- 0 |   | zero  | 0 |   
  1 | 4 | one   | 1 | -1
  2 | 3 | two   | 2 |  2
  2 | 3 | two   | 2 |  4
  3 | 2 | three | 3 | -3
  5 | 0 | five  | 5 | -5
  5 | 0 | five  | 5 | -5
+ 0 |   | zero  | 0 |   
 (7 rows)
 
 SELECT *
   FROM J1_TBL JOIN J2_TBL ON (J1_TBL.i = J2_TBL.k);
  i | j |  t   | i | k 
 ---+---+------+---+---
- 0 |   | zero |   | 0
  2 | 3 | two  | 2 | 2
  4 | 1 | four | 2 | 4
+ 0 |   | zero |   | 0
 (3 rows)
 
 --
@@ -1760,12 +1756,12 @@
  i | j |   t   | i | k 
 ---+---+-------+---+---
  1 | 4 | one   | 2 | 2
- 2 | 3 | two   | 2 | 2
- 0 |   | zero  | 2 | 2
  1 | 4 | one   | 2 | 4
+ 2 | 3 | two   | 2 | 2
  2 | 3 | two   | 2 | 4
  3 | 2 | three | 2 | 4
  4 | 1 | four  | 2 | 4
+ 0 |   | zero  | 2 | 2
  0 |   | zero  | 2 | 4
  0 |   | zero  |   | 0
 (9 rows)
@@ -1779,6 +1775,8 @@
   ORDER BY i, k, t;
  i | j |   t   | k  
 ---+---+-------+----
+   |   | null  |   
+   | 0 | zero  |   
  0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
@@ -1790,8 +1788,6 @@
  6 | 6 | six   |   
  7 | 7 | seven |   
  8 | 8 | eight |   
-   |   | null  |   
-   | 0 | zero  |   
 (13 rows)
 
 SELECT *
@@ -1799,6 +1795,8 @@
   ORDER BY i, k, t;
  i | j |   t   | k  
 ---+---+-------+----
+   |   | null  |   
+   | 0 | zero  |   
  0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
@@ -1810,21 +1808,19 @@
  6 | 6 | six   |   
  7 | 7 | seven |   
  8 | 8 | eight |   
-   |   | null  |   
-   | 0 | zero  |   
 (13 rows)
 
 SELECT *
   FROM J1_TBL RIGHT OUTER JOIN J2_TBL USING (i);
  i | j |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
- 2 | 3 | two   |  4
  3 | 2 | three | -3
+ 2 | 3 | two   |  4
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
    |   |       |   
    |   |       |  0
 (9 rows)
@@ -1833,13 +1829,13 @@
   FROM J1_TBL RIGHT JOIN J2_TBL USING (i);
  i | j |   t   | k  
 ---+---+-------+----
- 0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
- 2 | 3 | two   |  4
  3 | 2 | three | -3
+ 2 | 3 | two   |  4
  5 | 0 | five  | -5
  5 | 0 | five  | -5
+ 0 |   | zero  |   
    |   |       |   
    |   |       |  0
 (9 rows)
@@ -1849,6 +1845,10 @@
   ORDER BY i, k, t;
  i | j |   t   | k  
 ---+---+-------+----
+   |   |       |   
+   |   | null  |   
+   | 0 | zero  |   
+   |   |       |  0
  0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
@@ -1860,10 +1860,6 @@
  6 | 6 | six   |   
  7 | 7 | seven |   
  8 | 8 | eight |   
-   |   |       |  0
-   |   | null  |   
-   | 0 | zero  |   
-   |   |       |   
 (15 rows)
 
 SELECT *
@@ -1871,6 +1867,10 @@
   ORDER BY i, k, t;
  i | j |   t   | k  
 ---+---+-------+----
+   |   |       |   
+   |   | null  |   
+   | 0 | zero  |   
+   |   |       |  0
  0 |   | zero  |   
  1 | 4 | one   | -1
  2 | 3 | two   |  2
@@ -1882,10 +1882,6 @@
  6 | 6 | six   |   
  7 | 7 | seven |   
  8 | 8 | eight |   
-   |   |       |  0
-   |   | null  |   
-   | 0 | zero  |   
-   |   |       |   
 (15 rows)
 
 SELECT *
@@ -1909,20 +1905,11 @@
 where exists(select * from tenk1 b
              where a.twothousand = b.twothousand and a.fivethous <> b.fivethous)
       and i4.f1 = a.tenthous;
-                  QUERY PLAN                  
-----------------------------------------------
- Hash Semi Join
-   Hash Cond: (a.twothousand = b.twothousand)
-   Join Filter: (a.fivethous <> b.fivethous)
-   ->  Hash Join
-         Hash Cond: (a.tenthous = i4.f1)
-         ->  Seq Scan on tenk1 a
-         ->  Hash
-               ->  Seq Scan on int4_tbl i4
-   ->  Hash
-         ->  Seq Scan on tenk1 b
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- More complicated constructs
 --
@@ -1944,8 +1931,8 @@
 ------+----+----+----
  bb   | 11 | 12 | 13
  cc   |    | 22 | 23
- dd   |    |    | 33
  ee   |    | 42 |   
+ dd   |    |    | 33
 (4 rows)
 
 --
@@ -1984,8 +1971,8 @@
 ------+----+----
  bb   | 12 | 13
  cc   | 22 | 23
- dd   |    | 33
  ee   | 42 |   
+ dd   |    | 33
 (4 rows)
 
 -- Cases with non-nullable expressions in subquery results;
@@ -2019,8 +2006,8 @@
 ------+------+------+------+------
  bb   |   12 |    2 |   13 |    3
  cc   |   22 |    2 |   23 |    3
- dd   |      |      |   33 |    3
  ee   |   42 |    2 |      |     
+ dd   |      |      |   33 |    3
 (4 rows)
 
 SELECT * FROM
@@ -2044,8 +2031,8 @@
 ------+------+------+------+------+------+------
  bb   |   11 |    1 |   12 |    2 |   13 |    3
  cc   |      |      |   22 |    2 |   23 |    3
- dd   |      |      |      |      |   33 |    3
  ee   |      |      |   42 |    2 |      |     
+ dd   |      |      |      |      |   33 |    3
 (4 rows)
 
 SELECT * FROM
@@ -2060,8 +2047,8 @@
 ------+------+------+------
  bb   |   11 |   12 |   13
  cc   |      |   22 |   23
- dd   |      |      |   33
  ee   |      |   42 |     
+ dd   |      |      |   33
 (4 rows)
 
 SELECT * FROM
@@ -2076,8 +2063,8 @@
 ------+------+------+------+------
  bb   |   11 |   12 |    2 |   13
  cc   |      |   22 |    2 |   23
- dd   |      |      |      |   33
  ee   |      |   42 |    2 |     
+ dd   |      |      |      |   33
 (4 rows)
 
 -- Constants as join keys can also be problematic
@@ -2088,10 +2075,10 @@
 ON (s1_n = s2_n);
  name | s1_n | name | s2_n 
 ------+------+------+------
+ bb   |   11 |      |     
       |      | bb   |    2
       |      | cc   |    2
       |      | ee   |    2
- bb   |   11 |      |     
 (4 rows)
 
 -- Test for propagation of nullability constraints into sub-joins
@@ -2245,16 +2232,25 @@
 -- try that with GEQO too
 begin;
 set geqo = on;
+ERROR:  unimplemented: the configuration setting "geqo" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set geqo_threshold = 2;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 select count(*) from tenk1 x where
   x.unique1 in (select a.f1 from int4_tbl a,float8_tbl b where a.f1=b.f1) and
   x.unique1 = 0 and
   x.unique1 in (select aa.f1 from int4_tbl aa,float8_tbl bb where aa.f1=bb.f1);
- count 
--------
-     1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 rollback;
 --
 -- regression test: be sure we cope with proven-dummy append rels
@@ -2263,19 +2259,15 @@
 select aa, bb, unique1, unique1
   from tenk1 right join b_star on aa = unique1
   where bb < bb and bb is null;
-        QUERY PLAN        
---------------------------
- Result
-   One-Time Filter: false
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select aa, bb, unique1, unique1
   from tenk1 right join b_star on aa = unique1
   where bb < bb and bb is null;
- aa | bb | unique1 | unique1 
-----+----+---------+---------
-(0 rows)
-
+ERROR:  relation "b_star" does not exist
 --
 -- regression test: check handling of empty-FROM subquery underneath outer join
 --
@@ -2283,18 +2275,11 @@
 select * from int8_tbl i1 left join (int8_tbl i2 join
   (select 123 as x) ss on i2.q1 = x) on i1.q2 = i2.q2
 order by 1, 2;
-                QUERY PLAN                 
--------------------------------------------
- Sort
-   Sort Key: i1.q1, i1.q2
-   ->  Hash Left Join
-         Hash Cond: (i1.q2 = i2.q2)
-         ->  Seq Scan on int8_tbl i1
-         ->  Hash
-               ->  Seq Scan on int8_tbl i2
-                     Filter: (q1 = 123)
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int8_tbl i1 left join (int8_tbl i2 join
   (select 123 as x) ss on i2.q1 = x) on i1.q2 = i2.q2
 order by 1, 2;
@@ -2335,19 +2320,11 @@
   (select sum(f1)+1 as f1 from int4_tbl i4a) a,
   (select sum(f1) as f1 from int4_tbl i4b) b
 where b.f1 = t.thousand and a.f1 = b.f1 and (a.f1+b.f1+999) = t.tenthous;
-                                                   QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
- Nested Loop
-   ->  Nested Loop
-         Join Filter: ((sum(i4b.f1)) = ((sum(i4a.f1) + 1)))
-         ->  Aggregate
-               ->  Seq Scan on int4_tbl i4a
-         ->  Aggregate
-               ->  Seq Scan on int4_tbl i4b
-   ->  Index Only Scan using tenk1_thous_tenthous on tenk1 t
-         Index Cond: ((thousand = (sum(i4b.f1))) AND (tenthous = ((((sum(i4a.f1) + 1)) + (sum(i4b.f1))) + 999)))
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.f1, b.f1, t.thousand, t.tenthous from
   tenk1 t,
   (select sum(f1)+1 as f1 from int4_tbl i4a) a,
@@ -2366,22 +2343,11 @@
   left join int4_tbl t3 on t3.f1 > 0
   left join int4_tbl t4 on t3.f1 > 1
 where t4.f1 is null;
-                      QUERY PLAN                       
--------------------------------------------------------
- Nested Loop
-   ->  Nested Loop Left Join
-         Filter: (t4.f1 IS NULL)
-         ->  Seq Scan on int4_tbl t2
-         ->  Materialize
-               ->  Nested Loop Left Join
-                     Join Filter: (t3.f1 > 1)
-                     ->  Seq Scan on int4_tbl t3
-                           Filter: (f1 > 0)
-                     ->  Materialize
-                           ->  Seq Scan on int4_tbl t4
-   ->  Seq Scan on int4_tbl t1
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.f1
 from int4_tbl t1, int4_tbl t2
   left join int4_tbl t3 on t3.f1 > 0
@@ -2396,132 +2362,62 @@
 from int4_tbl t1 left join int4_tbl t2 on true
   left join int4_tbl t3 on t2.f1 > 0
   left join int4_tbl t4 on t3.f1 > 0;
-                      QUERY PLAN                       
--------------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int4_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t3.f1 > 0)
-               ->  Nested Loop Left Join
-                     Join Filter: (t2.f1 > 0)
-                     ->  Seq Scan on int4_tbl t2
-                     ->  Materialize
-                           ->  Seq Scan on int4_tbl t3
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t4
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from onek t1
   left join onek t2 on t1.unique1 = t2.unique1
   left join onek t3 on t2.unique1 != t3.unique1
   left join onek t4 on t3.unique1 = t4.unique1;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   Join Filter: (t2.unique1 <> t3.unique1)
-   ->  Hash Left Join
-         Hash Cond: (t1.unique1 = t2.unique1)
-         ->  Seq Scan on onek t1
-         ->  Hash
-               ->  Seq Scan on onek t2
-   ->  Materialize
-         ->  Hash Left Join
-               Hash Cond: (t3.unique1 = t4.unique1)
-               ->  Seq Scan on onek t3
-               ->  Hash
-                     ->  Seq Scan on onek t4
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join (select now() from int4_tbl t2
              left join int4_tbl t3 on t2.f1 = t3.f1
              left join int4_tbl t4 on t3.f1 = t4.f1) s on true
   inner join int4_tbl t5 on true;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Nested Loop
-   ->  Nested Loop Left Join
-         ->  Seq Scan on int4_tbl t1
-         ->  Materialize
-               ->  Hash Left Join
-                     Hash Cond: (t3.f1 = t4.f1)
-                     ->  Hash Left Join
-                           Hash Cond: (t2.f1 = t3.f1)
-                           ->  Seq Scan on int4_tbl t2
-                           ->  Hash
-                                 ->  Seq Scan on int4_tbl t3
-                     ->  Hash
-                           ->  Seq Scan on int4_tbl t4
-   ->  Materialize
-         ->  Seq Scan on int4_tbl t5
-(15 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join int4_tbl t2 on true
   left join int4_tbl t3 on true
   left join int4_tbl t4 on t2.f1 = t3.f1;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop Left Join
-   Join Filter: (t2.f1 = t3.f1)
-   ->  Nested Loop Left Join
-         ->  Nested Loop Left Join
-               ->  Seq Scan on int4_tbl t1
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t2
-         ->  Materialize
-               ->  Seq Scan on int4_tbl t3
-   ->  Materialize
-         ->  Seq Scan on int4_tbl t4
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join int4_tbl t2 on true
   left join int4_tbl t3 on t2.f1 = t3.f1
   left join int4_tbl t4 on t3.f1 != t4.f1;
-                      QUERY PLAN                       
--------------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int4_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t3.f1 <> t4.f1)
-               ->  Hash Left Join
-                     Hash Cond: (t2.f1 = t3.f1)
-                     ->  Seq Scan on int4_tbl t2
-                     ->  Hash
-                           ->  Seq Scan on int4_tbl t3
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t4
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join (int4_tbl t2 left join int4_tbl t3 on t2.f1 > 0) on t2.f1 > 1
   left join int4_tbl t4 on t2.f1 > 2 and t3.f1 > 3
 where t1.f1 = coalesce(t2.f1, 1);
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   Join Filter: ((t2.f1 > 2) AND (t3.f1 > 3))
-   ->  Nested Loop Left Join
-         Join Filter: (t2.f1 > 0)
-         ->  Nested Loop Left Join
-               Filter: (t1.f1 = COALESCE(t2.f1, 1))
-               ->  Seq Scan on int4_tbl t1
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t2
-                           Filter: (f1 > 1)
-         ->  Seq Scan on int4_tbl t3
-   ->  Materialize
-         ->  Seq Scan on int4_tbl t4
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join ((select t2.f1 from int4_tbl t2
@@ -2529,23 +2425,11 @@
                 where t3.f1 is null) s
              left join tenk1 t4 on s.f1 > 1)
     on s.f1 = t1.f1;
-                   QUERY PLAN                    
--------------------------------------------------
- Hash Right Join
-   Hash Cond: (t2.f1 = t1.f1)
-   ->  Nested Loop Left Join
-         Join Filter: (t2.f1 > 1)
-         ->  Nested Loop Left Join
-               Join Filter: (t2.f1 > 0)
-               Filter: (t3.f1 IS NULL)
-               ->  Seq Scan on int4_tbl t2
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t3
-         ->  Seq Scan on tenk1 t4
-   ->  Hash
-         ->  Seq Scan on int4_tbl t1
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int4_tbl t1
   left join ((select t2.f1 from int4_tbl t2
@@ -2553,140 +2437,75 @@
                 where t2.f1 <> coalesce(t3.f1, -1)) s
              left join tenk1 t4 on s.f1 > 1)
     on s.f1 = t1.f1;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Nested Loop Left Join
-   Join Filter: (t2.f1 > 1)
-   ->  Hash Right Join
-         Hash Cond: (t2.f1 = t1.f1)
-         ->  Nested Loop Left Join
-               Join Filter: (t2.f1 > 0)
-               Filter: (t2.f1 <> COALESCE(t3.f1, '-1'::integer))
-               ->  Seq Scan on int4_tbl t2
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t3
-         ->  Hash
-               ->  Seq Scan on int4_tbl t1
-   ->  Materialize
-         ->  Seq Scan on tenk1 t4
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from onek t1
     left join onek t2 on t1.unique1 = t2.unique1
     left join onek t3 on t2.unique1 = t3.unique1
     left join onek t4 on t3.unique1 = t4.unique1 and t2.unique2 = t4.unique2;
-                               QUERY PLAN                               
-------------------------------------------------------------------------
- Hash Left Join
-   Hash Cond: ((t3.unique1 = t4.unique1) AND (t2.unique2 = t4.unique2))
-   ->  Hash Left Join
-         Hash Cond: (t2.unique1 = t3.unique1)
-         ->  Hash Left Join
-               Hash Cond: (t1.unique1 = t2.unique1)
-               ->  Seq Scan on onek t1
-               ->  Hash
-                     ->  Seq Scan on onek t2
-         ->  Hash
-               ->  Seq Scan on onek t3
-   ->  Hash
-         ->  Seq Scan on onek t4
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int8_tbl t1 left join
     (int8_tbl t2 left join int8_tbl t3 full join int8_tbl t4 on false on false)
     left join int8_tbl t5 on t2.q1 = t5.q1
 on t2.q2 = 123;
-                    QUERY PLAN                    
---------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int8_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.q1 = t5.q1)
-               ->  Nested Loop Left Join
-                     Join Filter: false
-                     ->  Seq Scan on int8_tbl t2
-                           Filter: (q2 = 123)
-                     ->  Result
-                           One-Time Filter: false
-               ->  Seq Scan on int8_tbl t5
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int8_tbl t1
     left join int8_tbl t2 on true
     left join lateral
       (select * from int8_tbl t3 where t3.q1 = t2.q1 offset 0) s
       on t2.q1 = 1;
-                QUERY PLAN                 
--------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int8_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.q1 = 1)
-               ->  Seq Scan on int8_tbl t2
-               ->  Seq Scan on int8_tbl t3
-                     Filter: (q1 = t2.q1)
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int8_tbl t1
     left join int8_tbl t2 on true
     left join lateral
       (select * from generate_series(t2.q1, 100)) s
       on t2.q1 = 1;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int8_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.q1 = 1)
-               ->  Seq Scan on int8_tbl t2
-               ->  Function Scan on generate_series
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from int8_tbl t1
     left join int8_tbl t2 on true
     left join lateral
       (select t2.q1 from int8_tbl t3) s
       on t2.q1 = 1;
-                QUERY PLAN                 
--------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int8_tbl t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.q1 = 1)
-               ->  Seq Scan on int8_tbl t2
-               ->  Seq Scan on int8_tbl t3
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from onek t1
     left join onek t2 on true
     left join lateral
       (select * from onek t3 where t3.two = t2.two offset 0) s
       on t2.unique1 = 1;
-                    QUERY PLAN                    
---------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on onek t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.unique1 = 1)
-               ->  Seq Scan on onek t2
-               ->  Memoize
-                     Cache Key: t2.two
-                     Cache Mode: binary
-                     ->  Seq Scan on onek t3
-                           Filter: (two = t2.two)
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- check a case where we formerly got confused by conflicting sort orders
 -- in redundant merge join path keys
@@ -2696,43 +2515,36 @@
   j1_tbl full join
   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl
   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Merge Full Join
-   Merge Cond: ((j2_tbl.i = j1_tbl.i) AND (j2_tbl.k = j1_tbl.i))
-   ->  Sort
-         Sort Key: j2_tbl.i DESC, j2_tbl.k
-         ->  Seq Scan on j2_tbl
-   ->  Sort
-         Sort Key: j1_tbl.i DESC
-         ->  Seq Scan on j1_tbl
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   j1_tbl full join
   (select * from j2_tbl order by j2_tbl.i desc, j2_tbl.k asc) j2_tbl
   on j1_tbl.i = j2_tbl.i and j1_tbl.i = j2_tbl.k;
  i | j |   t   | i | k  
 ---+---+-------+---+----
-   |   |       |   |  0
    |   |       |   |   
-   | 0 | zero  |   |   
-   |   | null  |   |   
- 8 | 8 | eight |   |   
- 7 | 7 | seven |   |   
- 6 | 6 | six   |   |   
-   |   |       | 5 | -5
-   |   |       | 5 | -5
- 5 | 0 | five  |   |   
+   |   |       |   |  0
+ 1 | 4 | one   |   |   
+ 2 | 3 | two   | 2 |  2
+ 3 | 2 | three |   |   
  4 | 1 | four  |   |   
+ 5 | 0 | five  |   |   
+ 6 | 6 | six   |   |   
+ 7 | 7 | seven |   |   
+ 8 | 8 | eight |   |   
+ 0 |   | zero  |   |   
+   |   | null  |   |   
+   | 0 | zero  |   |   
+   |   |       | 1 | -1
    |   |       | 3 | -3
- 3 | 2 | three |   |   
- 2 | 3 | two   | 2 |  2
    |   |       | 2 |  4
-   |   |       | 1 | -1
+   |   |       | 5 | -5
+   |   |       | 5 | -5
    |   |       | 0 |   
- 1 | 4 | one   |   |   
- 0 |   | zero  |   |   
 (19 rows)
 
 --
@@ -2744,19 +2556,11 @@
   left join
   (select * from tenk1 y order by y.unique2) y
   on x.thousand = y.unique2 and x.twothousand = y.hundred and x.fivethous = y.unique2;
-                                    QUERY PLAN                                    
-----------------------------------------------------------------------------------
- Aggregate
-   ->  Merge Left Join
-         Merge Cond: (x.thousand = y.unique2)
-         Join Filter: ((x.twothousand = y.hundred) AND (x.fivethous = y.unique2))
-         ->  Sort
-               Sort Key: x.thousand, x.twothousand, x.fivethous
-               ->  Seq Scan on tenk1 x
-         ->  Materialize
-               ->  Index Scan using tenk1_unique2 on tenk1 y
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select count(*) from
   (select * from tenk1 x order by x.thousand, x.twothousand, x.fivethous) x
   left join
@@ -2768,8 +2572,44 @@
 (1 row)
 
 set enable_hashjoin = 0;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_nestloop = 0;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_hashagg = 0;
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 --
 -- Check that we use the pathkeys from a prefix of the group by / order by
 -- clause for the join pathkeys when that prefix covers all join quals.  We
@@ -2780,24 +2620,50 @@
 from tenk1 x inner join tenk1 y on x.thousand = y.thousand
 group by x.thousand, x.twothousand
 order by x.thousand desc, x.twothousand;
-                                    QUERY PLAN                                    
-----------------------------------------------------------------------------------
- GroupAggregate
-   Group Key: x.thousand, x.twothousand
-   ->  Incremental Sort
-         Sort Key: x.thousand DESC, x.twothousand
-         Presorted Key: x.thousand
-         ->  Merge Join
-               Merge Cond: (y.thousand = x.thousand)
-               ->  Index Only Scan Backward using tenk1_thous_tenthous on tenk1 y
-               ->  Sort
-                     Sort Key: x.thousand DESC
-                     ->  Seq Scan on tenk1 x
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 reset enable_hashagg;
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_nestloop;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 --
 -- Clean up
 --
@@ -2845,7 +2711,14 @@
 
 -- Test join against inheritance tree
 create temp table t2a () inherits (t2);
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create temp table t2a () inherits (t2)
+                                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/22456/_version_
 insert into t2a values (200, 2001);
+ERROR:  relation "t2a" does not exist
 select * from t1 left join t2 on (t1.a = t2.a);
   a  |  b   |  a  |  b   
 -----+------+-----+------
@@ -2853,15 +2726,11 @@
   15 |   20 |     |     
  100 |  100 |     |     
  200 | 1000 | 200 | 2000
- 200 | 1000 | 200 | 2001
-(5 rows)
+(4 rows)
 
 -- Test matching of column name with wrong alias
 select t1.x from t1 join t3 on (t1.a = t3.x);
-ERROR:  column t1.x does not exist
-LINE 1: select t1.x from t1 join t3 on (t1.a = t3.x);
-               ^
-HINT:  Perhaps you meant to reference the column "t3.x".
+ERROR:  column "t1.x" does not exist
 -- Test matching of locking clause with wrong alias
 select t1.*, t2.*, unnamed_join.* from
   t1 join t2 on (t1.a = t2.a), t3 as unnamed_join
@@ -2873,28 +2742,37 @@
 select foo.*, unnamed_join.* from
   t1 join t2 using (a) as foo, t3 as unnamed_join
   for update of unnamed_join;
- a | x | y 
----+---+---
-(0 rows)
-
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+select foo.*, unnamed_join.* from
+  t1 join t2 using (a) as foo, t3 as unnamed_join
+                       ^
 select foo.*, unnamed_join.* from
   t1 join t2 using (a) as foo, t3 as unnamed_join
   for update of foo;
-ERROR:  FOR UPDATE cannot be applied to a join
-LINE 3:   for update of foo;
-                        ^
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+select foo.*, unnamed_join.* from
+  t1 join t2 using (a) as foo, t3 as unnamed_join
+                       ^
 select bar.*, unnamed_join.* from
   (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
   for update of foo;
-ERROR:  relation "foo" in FOR UPDATE clause not found in FROM clause
-LINE 3:   for update of foo;
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+select bar.*, unnamed_join.* from
+  (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
                         ^
+HINT:  try \h <SOURCE>
 select bar.*, unnamed_join.* from
   (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
   for update of bar;
-ERROR:  FOR UPDATE cannot be applied to a join
-LINE 3:   for update of bar;
+ERROR:  at or near "as": syntax error
+DETAIL:  source SQL:
+select bar.*, unnamed_join.* from
+  (t1 join t2 using (a) as foo) as bar, t3 as unnamed_join
                         ^
+HINT:  try \h <SOURCE>
 --
 -- regression test for 8.1 merge right join bug
 --
@@ -2905,7 +2783,31 @@
 INSERT INTO tt2 VALUES (21, 11);
 INSERT INTO tt2 VALUES (22, 11);
 set enable_hashjoin to off;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_nestloop to off;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- these should give the same results
 select tt1.*, tt2.* from tt1 left join tt2 on tt1.joincol = tt2.joincol;
  tt1_id | joincol | tt2_id | joincol 
@@ -2924,27 +2826,70 @@
 (3 rows)
 
 reset enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_nestloop;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 --
 -- regression test for bug #13908 (hash join with skew tuples & nbatch increase)
 --
 set work_mem to '64kB';
+ERROR:  unimplemented: the configuration setting "work_mem" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_mergejoin to off;
+ERROR:  unimplemented: the configuration setting "enable_mergejoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_memoize to off;
+ERROR:  unrecognized configuration parameter "enable_memoize"
 explain (costs off)
 select count(*) from tenk1 a, tenk1 b
   where a.hundred = b.thousand and (b.fivethous % 10) < 10;
-                         QUERY PLAN                         
-------------------------------------------------------------
- Aggregate
-   ->  Hash Join
-         Hash Cond: (a.hundred = b.thousand)
-         ->  Index Only Scan using tenk1_hundred on tenk1 a
-         ->  Hash
-               ->  Seq Scan on tenk1 b
-                     Filter: ((fivethous % 10) < 10)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select count(*) from tenk1 a, tenk1 b
   where a.hundred = b.thousand and (b.fivethous % 10) < 10;
  count  
@@ -2953,8 +2898,33 @@
 (1 row)
 
 reset work_mem;
+ERROR:  unimplemented: the configuration setting "work_mem" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_mergejoin;
+ERROR:  unimplemented: the configuration setting "enable_mergejoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_memoize;
+ERROR:  unrecognized configuration parameter "enable_memoize"
 --
 -- regression test for 8.2 bug with improper re-ordering of left joins
 --
@@ -2965,6 +2935,18 @@
 insert into tt4 values (0),(1),(9999);
 analyze tt4;
 set enable_nestloop to off;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 EXPLAIN (COSTS OFF)
 SELECT a.f1
 FROM tt4 a
@@ -2975,23 +2957,11 @@
 ) AS d ON (a.f1 = d.f1)
 WHERE COALESCE(d.f1, 0) = 0
 ORDER BY 1;
-                  QUERY PLAN                   
------------------------------------------------
- Sort
-   Sort Key: a.f1
-   ->  Hash Right Join
-         Hash Cond: (b.f1 = a.f1)
-         Filter: (COALESCE(b.f1, 0) = 0)
-         ->  Hash Left Join
-               Hash Cond: (b.f1 = c.f1)
-               Filter: (COALESCE(c.f1, 0) = 0)
-               ->  Seq Scan on tt3 b
-               ->  Hash
-                     ->  Seq Scan on tt3 c
-         ->  Hash
-               ->  Seq Scan on tt4 a
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT a.f1
 FROM tt4 a
 LEFT JOIN (
@@ -3009,69 +2979,62 @@
 (3 rows)
 
 reset enable_nestloop;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 --
 -- basic semijoin and antijoin recognition tests
 --
 explain (costs off)
 select a.* from tenk1 a
 where unique1 in (select unique2 from tenk1 b);
-                         QUERY PLAN                         
-------------------------------------------------------------
- Hash Semi Join
-   Hash Cond: (a.unique1 = b.unique2)
-   ->  Seq Scan on tenk1 a
-   ->  Hash
-         ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- sadly, this is not an antijoin
 explain (costs off)
 select a.* from tenk1 a
 where unique1 not in (select unique2 from tenk1 b);
-                       QUERY PLAN                       
---------------------------------------------------------
- Seq Scan on tenk1 a
-   Filter: (NOT (hashed SubPlan 1))
-   SubPlan 1
-     ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select a.* from tenk1 a
 where exists (select 1 from tenk1 b where a.unique1 = b.unique2);
-                         QUERY PLAN                         
-------------------------------------------------------------
- Hash Semi Join
-   Hash Cond: (a.unique1 = b.unique2)
-   ->  Seq Scan on tenk1 a
-   ->  Hash
-         ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select a.* from tenk1 a
 where not exists (select 1 from tenk1 b where a.unique1 = b.unique2);
-                         QUERY PLAN                         
-------------------------------------------------------------
- Hash Anti Join
-   Hash Cond: (a.unique1 = b.unique2)
-   ->  Seq Scan on tenk1 a
-   ->  Hash
-         ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select a.* from tenk1 a left join tenk1 b on a.unique1 = b.unique2
 where b.unique2 is null;
-                         QUERY PLAN                         
-------------------------------------------------------------
- Hash Anti Join
-   Hash Cond: (a.unique1 = b.unique2)
-   ->  Seq Scan on tenk1 a
-   ->  Hash
-         ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- regression test for proper handling of outer joins within antijoins
 --
@@ -3086,34 +3049,11 @@
               ) a1 on t3.c2 = a1.c1
   where t1.c1 = t2.c2
 );
-                       QUERY PLAN                        
----------------------------------------------------------
- Hash Anti Join
-   Hash Cond: (t1.c1 = t2.c2)
-   ->  Seq Scan on tt4x t1
-   ->  Hash
-         ->  Merge Right Join
-               Merge Cond: (t5.c1 = t3.c2)
-               ->  Merge Join
-                     Merge Cond: (t4.c2 = t5.c1)
-                     ->  Sort
-                           Sort Key: t4.c2
-                           ->  Seq Scan on tt4x t4
-                     ->  Sort
-                           Sort Key: t5.c1
-                           ->  Seq Scan on tt4x t5
-               ->  Sort
-                     Sort Key: t3.c2
-                     ->  Merge Left Join
-                           Merge Cond: (t2.c3 = t3.c1)
-                           ->  Sort
-                                 Sort Key: t2.c3
-                                 ->  Seq Scan on tt4x t2
-                           ->  Sort
-                                 Sort Key: t3.c1
-                                 ->  Seq Scan on tt4x t3
-(24 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- regression test for problems of the sort depicted in bug #3494
 --
@@ -3218,47 +3158,82 @@
 --
 begin;
 set enable_mergejoin = 1;
+ERROR:  unimplemented: the configuration setting "enable_mergejoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_hashjoin = 0;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 set enable_nestloop = 0;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 create temp table a (i integer);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 create temp table b (x integer, y integer);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 select * from a left join b on i = x and i = y and x = i;
- i | x | y 
----+---+---
-(0 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 rollback;
 --
 -- test handling of merge clauses using record_ops
 --
 begin;
 create type mycomptype as (id int, v bigint);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 create temp table tidv (idv mycomptype);
 create index on tidv (idv);
+ERROR:  unimplemented: column idv has type mycomptype, which is not indexable
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/35730/_version_
 explain (costs off)
 select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv;
-                        QUERY PLAN                        
-----------------------------------------------------------
- Merge Join
-   Merge Cond: (a.idv = b.idv)
-   ->  Index Only Scan using tidv_idv_idx on tidv a
-   ->  Materialize
-         ->  Index Only Scan using tidv_idv_idx on tidv b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 set enable_mergejoin = 0;
+ERROR:  unimplemented: the configuration setting "enable_mergejoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_hashjoin = 0;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 explain (costs off)
 select a.idv, b.idv from tidv a, tidv b where a.idv = b.idv;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop
-   ->  Seq Scan on tidv a
-   ->  Index Only Scan using tidv_idv_idx on tidv b
-         Index Cond: (idv = a.idv)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 --
 -- test NULL behavior of whole-row Vars, per bug #5025
 --
@@ -3267,9 +3242,9 @@
 group by t1.q2 order by 1;
         q2         | count 
 -------------------+-------
- -4567890123456789 |     0
+ -4567890123456789 |     1
                123 |     2
-               456 |     0
+               456 |     1
   4567890123456789 |     6
 (4 rows)
 
@@ -3278,9 +3253,9 @@
 group by t1.q2 order by 1;
         q2         | count 
 -------------------+-------
- -4567890123456789 |     0
+ -4567890123456789 |     1
                123 |     2
-               456 |     0
+               456 |     1
   4567890123456789 |     6
 (4 rows)
 
@@ -3289,9 +3264,9 @@
 group by t1.q2 order by 1;
         q2         | count 
 -------------------+-------
- -4567890123456789 |     0
+ -4567890123456789 |     1
                123 |     2
-               456 |     0
+               456 |     1
   4567890123456789 |     6
 (4 rows)
 
@@ -3302,9 +3277,9 @@
 group by t1.q2 order by 1;
         q2         | count 
 -------------------+-------
- -4567890123456789 |     0
+ -4567890123456789 |     1
                123 |     2
-               456 |     0
+               456 |     1
   4567890123456789 |     6
 (4 rows)
 
@@ -3316,6 +3291,7 @@
      code char not null,
      constraint a_pk primary key (code)
 );
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 create temp table b (
      a char not null,
      num integer not null,
@@ -3350,6 +3326,7 @@
 (3 rows)
 
 rollback;
+WARNING:  there is no transaction in progress
 --
 -- test incorrect handling of placeholders that only appear in targetlists,
 -- per bug #6154
@@ -3406,18 +3383,11 @@
   ( SELECT COALESCE(q2, -1) AS qq FROM int8_tbl b ) AS ss2
   USING (qq)
   INNER JOIN tenk1 c ON qq = unique2;
-                                               QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
- Nested Loop
-   ->  Hash Full Join
-         Hash Cond: ((COALESCE(a.q1, '0'::bigint)) = (COALESCE(b.q2, '-1'::bigint)))
-         ->  Seq Scan on int8_tbl a
-         ->  Hash
-               ->  Seq Scan on int8_tbl b
-   ->  Index Scan using tenk1_unique2 on tenk1 c
-         Index Cond: (unique2 = COALESCE((COALESCE(a.q1, '0'::bigint)), (COALESCE(b.q2, '-1'::bigint))))
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT qq, unique1
   FROM
   ( SELECT COALESCE(q1, 0) AS qq FROM int8_tbl a ) AS ss1
@@ -3474,19 +3444,11 @@
     ) as ss2
     on ss2.id = nt3.nt2_id
 where nt3.id = 1 and ss2.b3;
-                  QUERY PLAN                   
------------------------------------------------
- Nested Loop
-   ->  Nested Loop
-         ->  Index Scan using nt3_pkey on nt3
-               Index Cond: (id = 1)
-         ->  Index Scan using nt2_pkey on nt2
-               Index Cond: (id = nt3.nt2_id)
-   ->  Index Only Scan using nt1_pkey on nt1
-         Index Cond: (id = nt2.nt1_id)
-         Filter: (nt2.b1 AND (id IS NOT NULL))
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select nt3.id
 from nt3 as nt3
   left join
@@ -3514,23 +3476,11 @@
 where
   1 = (select 1 from int8_tbl t3 where ss.y is not null limit 1)
 order by 1,2;
-                        QUERY PLAN                         
------------------------------------------------------------
- Sort
-   Sort Key: t1.q1, t1.q2
-   ->  Hash Left Join
-         Hash Cond: (t1.q2 = t2.q1)
-         Filter: (1 = (SubPlan 1))
-         ->  Seq Scan on int8_tbl t1
-         ->  Hash
-               ->  Seq Scan on int8_tbl t2
-         SubPlan 1
-           ->  Limit
-                 ->  Result
-                       One-Time Filter: ((42) IS NOT NULL)
-                       ->  Seq Scan on int8_tbl t3
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   int8_tbl t1 left join
   (select q1 as x, 42 as y from int8_tbl t2) ss
@@ -3564,22 +3514,11 @@
       right join int4_tbl as i43 on (i43.f1 > 1)
       where ss1.loc = ss1.lat) as ss2
 where i41.f1 > 0;
-                    QUERY PLAN                    
---------------------------------------------------
- Nested Loop
-   ->  Nested Loop
-         ->  Seq Scan on int4_tbl i41
-               Filter: (f1 > 0)
-         ->  Nested Loop
-               Join Filter: (i42.f1 = i41.f1)
-               ->  Seq Scan on int8_tbl i81
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl i42
-   ->  Materialize
-         ->  Seq Scan on int4_tbl i43
-               Filter: (f1 > 1)
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   int4_tbl as i41,
   lateral
@@ -3594,22 +3533,22 @@
 ------------+---
      123456 | 1
      123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
-     123456 | 1
  2147483647 | 1
  2147483647 | 1
+     123456 | 1
+     123456 | 1
  2147483647 | 1
  2147483647 | 1
+     123456 | 1
+     123456 | 1
  2147483647 | 1
  2147483647 | 1
+     123456 | 1
+     123456 | 1
  2147483647 | 1
  2147483647 | 1
+     123456 | 1
+     123456 | 1
  2147483647 | 1
  2147483647 | 1
 (20 rows)
@@ -3650,23 +3589,25 @@
 select * from int4_tbl a full join int4_tbl b on false;
      f1      |     f1      
 -------------+-------------
-             |           0
-             |      123456
-             |     -123456
-             |  2147483647
-             | -2147483647
            0 |            
       123456 |            
      -123456 |            
   2147483647 |            
  -2147483647 |            
+             |           0
+             |      123456
+             |     -123456
+             |  2147483647
+             | -2147483647
 (10 rows)
 
 --
 -- test for ability to use a cartesian join when necessary
 --
 create temp table q1 as select 1 as q1;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 create temp table q2 as select 0 as q2;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 analyze q1;
 analyze q2;
 explain (costs off)
@@ -3674,46 +3615,21 @@
   tenk1 join int4_tbl on f1 = twothousand,
   q1, q2
 where q1 = thousand or q2 = thousand;
-                               QUERY PLAN                               
-------------------------------------------------------------------------
- Hash Join
-   Hash Cond: (tenk1.twothousand = int4_tbl.f1)
-   ->  Nested Loop
-         ->  Nested Loop
-               ->  Seq Scan on q1
-               ->  Seq Scan on q2
-         ->  Bitmap Heap Scan on tenk1
-               Recheck Cond: ((q1.q1 = thousand) OR (q2.q2 = thousand))
-               ->  BitmapOr
-                     ->  Bitmap Index Scan on tenk1_thous_tenthous
-                           Index Cond: (thousand = q1.q1)
-                     ->  Bitmap Index Scan on tenk1_thous_tenthous
-                           Index Cond: (thousand = q2.q2)
-   ->  Hash
-         ->  Seq Scan on int4_tbl
-(15 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from
   tenk1 join int4_tbl on f1 = twothousand,
   q1, q2
 where thousand = (q1 + q2);
-                          QUERY PLAN                          
---------------------------------------------------------------
- Hash Join
-   Hash Cond: (tenk1.twothousand = int4_tbl.f1)
-   ->  Nested Loop
-         ->  Nested Loop
-               ->  Seq Scan on q1
-               ->  Seq Scan on q2
-         ->  Bitmap Heap Scan on tenk1
-               Recheck Cond: (thousand = (q1.q1 + q2.q2))
-               ->  Bitmap Index Scan on tenk1_thous_tenthous
-                     Index Cond: (thousand = (q1.q1 + q2.q2))
-   ->  Hash
-         ->  Seq Scan on int4_tbl
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test ability to generate a suitable plan for a star-schema query
 --
@@ -3721,18 +3637,11 @@
 select * from
   tenk1, int8_tbl a, int8_tbl b
 where thousand = a.q1 and tenthous = b.q1 and a.q2 = 1 and b.q2 = 2;
-                             QUERY PLAN                              
----------------------------------------------------------------------
- Nested Loop
-   ->  Seq Scan on int8_tbl b
-         Filter: (q2 = 2)
-   ->  Nested Loop
-         ->  Seq Scan on int8_tbl a
-               Filter: (q2 = 1)
-         ->  Index Scan using tenk1_thous_tenthous on tenk1
-               Index Cond: ((thousand = a.q1) AND (tenthous = b.q1))
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test a corner case in which we shouldn't apply the star-schema optimization
 --
@@ -3749,23 +3658,11 @@
   left join tenk1 t2
   on (subq1.y1 = t2.unique1)
 where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;
-                              QUERY PLAN                               
------------------------------------------------------------------------
- Nested Loop
-   ->  Nested Loop
-         Join Filter: (t1.stringu1 > t2.stringu2)
-         ->  Nested Loop
-               ->  Nested Loop
-                     ->  Seq Scan on onerow
-                     ->  Seq Scan on onerow onerow_1
-               ->  Index Scan using tenk1_unique2 on tenk1 t1
-                     Index Cond: ((unique2 = (11)) AND (unique2 < 42))
-         ->  Index Scan using tenk1_unique1 on tenk1 t2
-               Index Cond: (unique1 = (3))
-   ->  Seq Scan on int4_tbl i1
-         Filter: (f1 = 0)
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
   tenk1 t1
   inner join int4_tbl i1
@@ -3799,10 +3696,7 @@
     on i8.q1 = i4.f1
   on t1.tenthous = ss1.d1
 where t1.unique1 < i4.f1;
- d1 
-----
-(0 rows)
-
+ERROR:  unsupported binary operator: <int> + <float>
 -- this variant is foldable by the remove-useless-RESULT-RTEs code
 explain (costs off)
 select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
@@ -3817,19 +3711,11 @@
   left join tenk1 t2
   on (subq1.y1 = t2.unique1)
 where t1.unique2 < 42 and t1.stringu1 > t2.stringu2;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Nested Loop
-   Join Filter: (t1.stringu1 > t2.stringu2)
-   ->  Nested Loop
-         ->  Seq Scan on int4_tbl i1
-               Filter: (f1 = 0)
-         ->  Index Scan using tenk1_unique2 on tenk1 t1
-               Index Cond: ((unique2 = (11)) AND (unique2 < 42))
-   ->  Index Scan using tenk1_unique1 on tenk1 t2
-         Index Cond: (unique1 = (3))
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.unique2, t1.stringu1, t2.unique1, t2.stringu2 from
   tenk1 t1
   inner join int4_tbl i1
@@ -3853,18 +3739,11 @@
 select * from
   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),
   lateral (select ss2.y as z limit 1) ss3;
-        QUERY PLAN         
----------------------------
- Nested Loop
-   Output: 1, (2), ((2))
-   ->  Result
-         Output: 2
-   ->  Limit
-         Output: ((2))
-         ->  Result
-               Output: (2)
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select 1 as x) ss1 left join (select 2 as y) ss2 on (true),
   lateral (select ss2.y as z limit 1) ss3;
@@ -3884,16 +3763,11 @@
            union all
            select a as b) as t3
 where b;
-              QUERY PLAN               
----------------------------------------
- Nested Loop
-   ->  Result
-   ->  Append
-         ->  Result
-         ->  Result
-               One-Time Filter: (true)
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select 0 as z) as t1
   left join
@@ -3914,13 +3788,11 @@
 with ctetable as not materialized ( select 1 as f1 )
 select * from ctetable c1
 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true );
-         QUERY PLAN         
-----------------------------
- Result
-   Output: 1
-   One-Time Filter: (1 = 1)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 with ctetable as not materialized ( select 1 as f1 )
 select * from ctetable c1
 where f1 in ( select c3.f1 from ctetable c2 full join ctetable c3 on true );
@@ -3936,35 +3808,22 @@
   inner join (int8_tbl t2
               left join information_schema.column_udt_usage on null)
   on null;
-                                                    QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
- Result
-   Output: (current_database())::information_schema.sql_identifier, (c.relname)::information_schema.sql_identifier
-   One-Time Filter: false
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- Test handling of qual pushdown to appendrel members with non-Var outputs
 explain (verbose, costs off)
 select * from int4_tbl left join (
   select text 'foo' union all select text 'bar'
 ) ss(x) on true
 where ss.x is null;
-               QUERY PLAN                
------------------------------------------
- Nested Loop Left Join
-   Output: int4_tbl.f1, ('foo'::text)
-   Filter: (('foo'::text) IS NULL)
-   ->  Seq Scan on public.int4_tbl
-         Output: int4_tbl.f1
-   ->  Materialize
-         Output: ('foo'::text)
-         ->  Append
-               ->  Result
-                     Output: 'foo'::text
-               ->  Result
-                     Output: 'bar'::text
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test inlining of immutable functions
 --
@@ -3974,101 +3833,77 @@
 explain (costs off)
 select unique1 from tenk1, (select * from f_immutable_int4(1) x) x
 where x = unique1;
-                  QUERY PLAN                  
-----------------------------------------------
- Index Only Scan using tenk1_unique1 on tenk1
-   Index Cond: (unique1 = 1)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (verbose, costs off)
 select unique1, x.*
 from tenk1, (select *, random() from f_immutable_int4(1) x) x
 where x = unique1;
-                        QUERY PLAN                         
------------------------------------------------------------
- Nested Loop
-   Output: tenk1.unique1, (1), (random())
-   ->  Result
-         Output: 1, random()
-   ->  Index Only Scan using tenk1_unique1 on public.tenk1
-         Output: tenk1.unique1
-         Index Cond: (tenk1.unique1 = (1))
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1 from tenk1, f_immutable_int4(1) x where x = unique1;
-                  QUERY PLAN                  
-----------------------------------------------
- Index Only Scan using tenk1_unique1 on tenk1
-   Index Cond: (unique1 = 1)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1 from tenk1, lateral f_immutable_int4(1) x where x = unique1;
-                  QUERY PLAN                  
-----------------------------------------------
- Index Only Scan using tenk1_unique1 on tenk1
-   Index Cond: (unique1 = 1)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1 from tenk1, lateral f_immutable_int4(1) x where x in (select 17);
-        QUERY PLAN        
---------------------------
- Result
-   One-Time Filter: false
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1, x from tenk1 join f_immutable_int4(1) x on unique1 = x;
-                  QUERY PLAN                  
-----------------------------------------------
- Index Only Scan using tenk1_unique1 on tenk1
-   Index Cond: (unique1 = 1)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1, x from tenk1 left join f_immutable_int4(1) x on unique1 = x;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   Join Filter: (tenk1.unique1 = 1)
-   ->  Index Only Scan using tenk1_unique1 on tenk1
-   ->  Materialize
-         ->  Result
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1, x from tenk1 right join f_immutable_int4(1) x on unique1 = x;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   ->  Result
-   ->  Index Only Scan using tenk1_unique1 on tenk1
-         Index Cond: (unique1 = 1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select unique1, x from tenk1 full join f_immutable_int4(1) x on unique1 = x;
-                     QUERY PLAN                     
-----------------------------------------------------
- Merge Full Join
-   Merge Cond: (tenk1.unique1 = (1))
-   ->  Index Only Scan using tenk1_unique1 on tenk1
-   ->  Sort
-         Sort Key: (1)
-         ->  Result
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check that pullup of a const function allows further const-folding
 explain (costs off)
 select unique1 from tenk1, f_immutable_int4(1) x where x = 42;
-        QUERY PLAN        
---------------------------
- Result
-   One-Time Filter: false
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- test inlining of immutable functions with PlaceHolderVars
 explain (costs off)
 select nt3.id
@@ -4082,57 +3917,41 @@
     ) as ss2
     on ss2.id = nt3.nt2_id
 where nt3.id = 1 and ss2.b3;
-                  QUERY PLAN                  
-----------------------------------------------
- Nested Loop Left Join
-   Filter: ((nt2.b1 OR ((0) = 42)))
-   ->  Index Scan using nt3_pkey on nt3
-         Index Cond: (id = 1)
-   ->  Nested Loop Left Join
-         Join Filter: (0 = nt2.nt1_id)
-         ->  Index Scan using nt2_pkey on nt2
-               Index Cond: (id = nt3.nt2_id)
-         ->  Result
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 drop function f_immutable_int4(int);
 -- test inlining when function returns composite
 create function mki8(bigint, bigint) returns int8_tbl as
 $$select row($1,$2)::int8_tbl$$ language sql;
+ERROR:  no value provided for placeholder: $1
 create function mki4(int) returns int4_tbl as
 $$select row($1)::int4_tbl$$ language sql;
+ERROR:  no value provided for placeholder: $1
 explain (verbose, costs off)
 select * from mki8(1,2);
-             QUERY PLAN             
-------------------------------------
- Function Scan on mki8
-   Output: q1, q2
-   Function Call: '(1,2)'::int8_tbl
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from mki8(1,2);
- q1 | q2 
-----+----
-  1 |  2
-(1 row)
-
+ERROR:  unknown function: mki8()
 explain (verbose, costs off)
 select * from mki4(42);
-            QUERY PLAN             
------------------------------------
- Function Scan on mki4
-   Output: f1
-   Function Call: '(42)'::int4_tbl
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from mki4(42);
- f1 
-----
- 42
-(1 row)
-
+ERROR:  unknown function: mki4()
 drop function mki8(bigint, bigint);
+ERROR:  unknown function: mki8()
 drop function mki4(int);
+ERROR:  unknown function: mki4()
 --
 -- test extraction of restriction OR clauses from join OR clause
 -- (we used to only do this for indexable clauses)
@@ -4140,73 +3959,28 @@
 explain (costs off)
 select * from tenk1 a join tenk1 b on
   (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.hundred = 4);
-                                           QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
- Nested Loop
-   Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR ((a.unique2 = 3) AND (b.hundred = 4)))
-   ->  Bitmap Heap Scan on tenk1 b
-         Recheck Cond: ((unique1 = 2) OR (hundred = 4))
-         ->  BitmapOr
-               ->  Bitmap Index Scan on tenk1_unique1
-                     Index Cond: (unique1 = 2)
-               ->  Bitmap Index Scan on tenk1_hundred
-                     Index Cond: (hundred = 4)
-   ->  Materialize
-         ->  Bitmap Heap Scan on tenk1 a
-               Recheck Cond: ((unique1 = 1) OR (unique2 = 3))
-               ->  BitmapOr
-                     ->  Bitmap Index Scan on tenk1_unique1
-                           Index Cond: (unique1 = 1)
-                     ->  Bitmap Index Scan on tenk1_unique2
-                           Index Cond: (unique2 = 3)
-(17 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from tenk1 a join tenk1 b on
   (a.unique1 = 1 and b.unique1 = 2) or (a.unique2 = 3 and b.ten = 4);
-                                         QUERY PLAN                                          
----------------------------------------------------------------------------------------------
- Nested Loop
-   Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR ((a.unique2 = 3) AND (b.ten = 4)))
-   ->  Seq Scan on tenk1 b
-         Filter: ((unique1 = 2) OR (ten = 4))
-   ->  Materialize
-         ->  Bitmap Heap Scan on tenk1 a
-               Recheck Cond: ((unique1 = 1) OR (unique2 = 3))
-               ->  BitmapOr
-                     ->  Bitmap Index Scan on tenk1_unique1
-                           Index Cond: (unique1 = 1)
-                     ->  Bitmap Index Scan on tenk1_unique2
-                           Index Cond: (unique2 = 3)
-(12 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from tenk1 a join tenk1 b on
   (a.unique1 = 1 and b.unique1 = 2) or
   ((a.unique2 = 3 or a.unique2 = 7) and b.hundred = 4);
-                                                      QUERY PLAN                                                      
-----------------------------------------------------------------------------------------------------------------------
- Nested Loop
-   Join Filter: (((a.unique1 = 1) AND (b.unique1 = 2)) OR (((a.unique2 = 3) OR (a.unique2 = 7)) AND (b.hundred = 4)))
-   ->  Bitmap Heap Scan on tenk1 b
-         Recheck Cond: ((unique1 = 2) OR (hundred = 4))
-         ->  BitmapOr
-               ->  Bitmap Index Scan on tenk1_unique1
-                     Index Cond: (unique1 = 2)
-               ->  Bitmap Index Scan on tenk1_hundred
-                     Index Cond: (hundred = 4)
-   ->  Materialize
-         ->  Bitmap Heap Scan on tenk1 a
-               Recheck Cond: ((unique1 = 1) OR (unique2 = 3) OR (unique2 = 7))
-               ->  BitmapOr
-                     ->  Bitmap Index Scan on tenk1_unique1
-                           Index Cond: (unique1 = 1)
-                     ->  Bitmap Index Scan on tenk1_unique2
-                           Index Cond: (unique2 = 3)
-                     ->  Bitmap Index Scan on tenk1_unique2
-                           Index Cond: (unique2 = 7)
-(19 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test placement of movable quals in a parameterized join tree
 --
@@ -4215,64 +3989,31 @@
   (tenk1 t2 join tenk1 t3 on t2.thousand = t3.unique2)
   on t1.hundred = t2.hundred and t1.ten = t3.ten
 where t1.unique1 = 1;
-                       QUERY PLAN                       
---------------------------------------------------------
- Nested Loop Left Join
-   ->  Index Scan using tenk1_unique1 on tenk1 t1
-         Index Cond: (unique1 = 1)
-   ->  Nested Loop
-         Join Filter: (t1.ten = t3.ten)
-         ->  Bitmap Heap Scan on tenk1 t2
-               Recheck Cond: (t1.hundred = hundred)
-               ->  Bitmap Index Scan on tenk1_hundred
-                     Index Cond: (hundred = t1.hundred)
-         ->  Index Scan using tenk1_unique2 on tenk1 t3
-               Index Cond: (unique2 = t2.thousand)
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select * from tenk1 t1 left join
   (tenk1 t2 join tenk1 t3 on t2.thousand = t3.unique2)
   on t1.hundred = t2.hundred and t1.ten + t2.ten = t3.ten
 where t1.unique1 = 1;
-                       QUERY PLAN                       
---------------------------------------------------------
- Nested Loop Left Join
-   ->  Index Scan using tenk1_unique1 on tenk1 t1
-         Index Cond: (unique1 = 1)
-   ->  Nested Loop
-         Join Filter: ((t1.ten + t2.ten) = t3.ten)
-         ->  Bitmap Heap Scan on tenk1 t2
-               Recheck Cond: (t1.hundred = hundred)
-               ->  Bitmap Index Scan on tenk1_hundred
-                     Index Cond: (hundred = t1.hundred)
-         ->  Index Scan using tenk1_unique2 on tenk1 t3
-               Index Cond: (unique2 = t2.thousand)
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select count(*) from
   tenk1 a join tenk1 b on a.unique1 = b.unique2
   left join tenk1 c on a.unique2 = b.unique1 and c.thousand = a.thousand
   join int4_tbl on b.thousand = f1;
-                               QUERY PLAN                                
--------------------------------------------------------------------------
- Aggregate
-   ->  Nested Loop Left Join
-         Join Filter: (a.unique2 = b.unique1)
-         ->  Nested Loop
-               ->  Nested Loop
-                     ->  Seq Scan on int4_tbl
-                     ->  Bitmap Heap Scan on tenk1 b
-                           Recheck Cond: (thousand = int4_tbl.f1)
-                           ->  Bitmap Index Scan on tenk1_thous_tenthous
-                                 Index Cond: (thousand = int4_tbl.f1)
-               ->  Index Scan using tenk1_unique1 on tenk1 a
-                     Index Cond: (unique1 = b.unique2)
-         ->  Index Only Scan using tenk1_thous_tenthous on tenk1 c
-               Index Cond: (thousand = a.thousand)
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select count(*) from
   tenk1 a join tenk1 b on a.unique1 = b.unique2
   left join tenk1 c on a.unique2 = b.unique1 and c.thousand = a.thousand
@@ -4289,25 +4030,11 @@
   join int4_tbl i1 on b.thousand = f1
   right join int4_tbl i2 on i2.f1 = b.tenthous
   order by 1;
-                                       QUERY PLAN                                        
------------------------------------------------------------------------------------------
- Sort
-   Sort Key: b.unique1
-   ->  Nested Loop Left Join
-         ->  Seq Scan on int4_tbl i2
-         ->  Nested Loop Left Join
-               Join Filter: (b.unique1 = 42)
-               ->  Nested Loop
-                     ->  Nested Loop
-                           ->  Seq Scan on int4_tbl i1
-                           ->  Index Scan using tenk1_thous_tenthous on tenk1 b
-                                 Index Cond: ((thousand = i1.f1) AND (tenthous = i2.f1))
-                     ->  Index Scan using tenk1_unique1 on tenk1 a
-                           Index Cond: (unique1 = b.unique2)
-               ->  Index Only Scan using tenk1_thous_tenthous on tenk1 c
-                     Index Cond: (thousand = a.thousand)
-(15 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select b.unique1 from
   tenk1 a join tenk1 b on a.unique1 = b.unique2
   left join tenk1 c on b.unique1 = 42 and c.thousand = a.thousand
@@ -4316,11 +4043,11 @@
   order by 1;
  unique1 
 ---------
-       0
         
         
         
         
+       0
 (5 rows)
 
 explain (costs off)
@@ -4331,15 +4058,11 @@
 ) ss
 where fault = 122
 order by fault;
-                                QUERY PLAN                                
---------------------------------------------------------------------------
- Nested Loop Left Join
-   Filter: ((COALESCE(tenk1.unique1, '-1'::integer) + int8_tbl.q1) = 122)
-   ->  Seq Scan on int8_tbl
-   ->  Index Scan using tenk1_unique2 on tenk1
-         Index Cond: (unique2 = int8_tbl.q2)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
 (
   select unique1, q1, coalesce(unique1, -1) + q1 as fault
@@ -4357,18 +4080,11 @@
 (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys)
 left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x
 left join unnest(v1ys) as u1(u1y) on u1y = v2y;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Nested Loop Left Join
-   ->  Values Scan on "*VALUES*"
-   ->  Hash Right Join
-         Hash Cond: (u1.u1y = "*VALUES*_1".column2)
-         Filter: ("*VALUES*_1".column1 = "*VALUES*".column1)
-         ->  Function Scan on unnest u1
-         ->  Hash
-               ->  Values Scan on "*VALUES*_1"
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
 (values (1, array[10,20]), (2, array[20,30])) as v1(v1x,v1ys)
 left join (values (1, 10), (2, 20)) as v2(v2x,v2y) on v2x = v1x
@@ -4386,15 +4102,11 @@
 select q1, unique2, thousand, hundred
   from int8_tbl a left join tenk1 b on q1 = unique2
   where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);
-                                                QUERY PLAN                                                
-----------------------------------------------------------------------------------------------------------
- Nested Loop Left Join
-   Filter: ((COALESCE(b.thousand, 123) = COALESCE(b.hundred, 123)) AND (a.q1 = COALESCE(b.hundred, 123)))
-   ->  Seq Scan on int8_tbl a
-   ->  Index Scan using tenk1_unique2 on tenk1 b
-         Index Cond: (unique2 = a.q1)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select q1, unique2, thousand, hundred
   from int8_tbl a left join tenk1 b on q1 = unique2
   where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);
@@ -4406,15 +4118,11 @@
 select f1, unique2, case when unique2 is null then f1 else 0 end
   from int4_tbl a left join tenk1 b on f1 = unique2
   where (case when unique2 is null then f1 else 0 end) = 0;
-                             QUERY PLAN                             
---------------------------------------------------------------------
- Nested Loop Left Join
-   Filter: (CASE WHEN (b.unique2 IS NULL) THEN a.f1 ELSE 0 END = 0)
-   ->  Seq Scan on int4_tbl a
-   ->  Index Only Scan using tenk1_unique2 on tenk1 b
-         Index Cond: (unique2 = a.f1)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select f1, unique2, case when unique2 is null then f1 else 0 end
   from int4_tbl a left join tenk1 b on f1 = unique2
   where (case when unique2 is null then f1 else 0 end) = 0;
@@ -4430,21 +4138,11 @@
 select a.unique1, b.unique1, c.unique1, coalesce(b.twothousand, a.twothousand)
   from tenk1 a left join tenk1 b on b.thousand = a.unique1                        left join tenk1 c on c.unique2 = coalesce(b.twothousand, a.twothousand)
   where a.unique2 < 10 and coalesce(b.twothousand, a.twothousand) = 44;
-                          QUERY PLAN                           
----------------------------------------------------------------
- Nested Loop Left Join
-   ->  Nested Loop Left Join
-         Filter: (COALESCE(b.twothousand, a.twothousand) = 44)
-         ->  Index Scan using tenk1_unique2 on tenk1 a
-               Index Cond: (unique2 < 10)
-         ->  Bitmap Heap Scan on tenk1 b
-               Recheck Cond: (thousand = a.unique1)
-               ->  Bitmap Index Scan on tenk1_thous_tenthous
-                     Index Cond: (thousand = a.unique1)
-   ->  Index Scan using tenk1_unique2 on tenk1 c
-         Index Cond: (unique2 = 44)
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.unique1, b.unique1, c.unique1, coalesce(b.twothousand, a.twothousand)
   from tenk1 a left join tenk1 b on b.thousand = a.unique1                        left join tenk1 c on c.unique2 = coalesce(b.twothousand, a.twothousand)
   where a.unique2 < 10 and coalesce(b.twothousand, a.twothousand) = 44;
@@ -4456,31 +4154,24 @@
 explain (costs off)
 select * from int8_tbl t1 left join int8_tbl t2 on t1.q2 = t2.q1,
   lateral (select * from int8_tbl t3 where t2.q1 = t2.q2) ss;
-                QUERY PLAN                 
--------------------------------------------
- Nested Loop
-   ->  Hash Left Join
-         Hash Cond: (t1.q2 = t2.q1)
-         Filter: (t2.q1 = t2.q2)
-         ->  Seq Scan on int8_tbl t1
-         ->  Hash
-               ->  Seq Scan on int8_tbl t2
-   ->  Seq Scan on int8_tbl t3
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int8_tbl t1 left join int8_tbl t2 on t1.q2 = t2.q1,
   lateral (select * from int8_tbl t3 where t2.q1 = t2.q2) ss;
         q1        |        q2        |        q1        |        q2        |        q1        |        q2         
 ------------------+------------------+------------------+------------------+------------------+-------------------
               123 | 4567890123456789 | 4567890123456789 | 4567890123456789 |              123 |               456
-              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 |              123 |  4567890123456789
-              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |               123
-              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |  4567890123456789
-              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | -4567890123456789
  4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |              123 |               456
+              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 |              123 |  4567890123456789
  4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |              123 |  4567890123456789
+              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |               123
  4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |               123
+              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |  4567890123456789
  4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 |  4567890123456789
+              123 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | -4567890123456789
  4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | 4567890123456789 | -4567890123456789
 (10 rows)
 
@@ -4500,24 +4191,11 @@
    using (join_key)
   ) foo3
 using (join_key);
-                                QUERY PLAN                                
---------------------------------------------------------------------------
- Nested Loop Left Join
-   Output: "*VALUES*".column1, i1.f1, (666)
-   Join Filter: ("*VALUES*".column1 = i1.f1)
-   ->  Values Scan on "*VALUES*"
-         Output: "*VALUES*".column1
-   ->  Materialize
-         Output: i1.f1, (666)
-         ->  Nested Loop Left Join
-               Output: i1.f1, 666
-               ->  Seq Scan on public.int4_tbl i1
-                     Output: i1.f1
-               ->  Index Only Scan using tenk1_unique2 on public.tenk1 i2
-                     Output: i2.unique2
-                     Index Cond: (i2.unique2 = i1.f1)
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
   (values (0),(1)) foo1(join_key)
 left join
@@ -4549,29 +4227,11 @@
 ) ss0
 on (i0.f1 = ss0.f1)
 order by i0.f1, x;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Sort
-   Output: i0.f1, ('123'::bigint), i1.f1, i2.q1, i2.q2
-   Sort Key: i0.f1, ('123'::bigint)
-   ->  Hash Right Join
-         Output: i0.f1, ('123'::bigint), i1.f1, i2.q1, i2.q2
-         Hash Cond: (i1.f1 = i0.f1)
-         ->  Nested Loop Left Join
-               Output: i1.f1, i2.q1, i2.q2, '123'::bigint
-               ->  Seq Scan on public.int4_tbl i1
-                     Output: i1.f1
-               ->  Materialize
-                     Output: i2.q1, i2.q2
-                     ->  Seq Scan on public.int8_tbl i2
-                           Output: i2.q1, i2.q2
-                           Filter: (123 = i2.q2)
-         ->  Hash
-               Output: i0.f1
-               ->  Seq Scan on public.int4_tbl i0
-                     Output: i0.f1
-(19 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
 int4_tbl i0 left join
 ( (select *, 123 as x from int4_tbl i1) ss1
@@ -4604,40 +4264,11 @@
   on (t1.f1 = b1.d1)
   left join int4_tbl i4
   on (i8.q2 = i4.f1);
-                              QUERY PLAN                              
-----------------------------------------------------------------------
- Hash Left Join
-   Output: t1.f1
-   Hash Cond: (i8.q2 = i4.f1)
-   ->  Nested Loop Left Join
-         Output: t1.f1, i8.q2
-         Join Filter: (t1.f1 = '***'::text)
-         ->  Seq Scan on public.text_tbl t1
-               Output: t1.f1
-         ->  Materialize
-               Output: i8.q2
-               ->  Hash Right Join
-                     Output: i8.q2
-                     Hash Cond: ((NULL::integer) = i8b1.q2)
-                     ->  Hash Join
-                           Output: i8.q2, (NULL::integer)
-                           Hash Cond: (i8.q1 = i8b2.q1)
-                           ->  Seq Scan on public.int8_tbl i8
-                                 Output: i8.q1, i8.q2
-                           ->  Hash
-                                 Output: i8b2.q1, (NULL::integer)
-                                 ->  Seq Scan on public.int8_tbl i8b2
-                                       Output: i8b2.q1, NULL::integer
-                     ->  Hash
-                           Output: i8b1.q2
-                           ->  Seq Scan on public.int8_tbl i8b1
-                                 Output: i8b1.q2
-   ->  Hash
-         Output: i4.f1
-         ->  Seq Scan on public.int4_tbl i4
-               Output: i4.f1
-(30 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.* from
   text_tbl t1
   left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
@@ -4665,44 +4296,11 @@
   on (t1.f1 = b1.d1)
   left join int4_tbl i4
   on (i8.q2 = i4.f1);
-                                 QUERY PLAN                                 
-----------------------------------------------------------------------------
- Hash Left Join
-   Output: t1.f1
-   Hash Cond: (i8.q2 = i4.f1)
-   ->  Nested Loop Left Join
-         Output: t1.f1, i8.q2
-         Join Filter: (t1.f1 = '***'::text)
-         ->  Seq Scan on public.text_tbl t1
-               Output: t1.f1
-         ->  Materialize
-               Output: i8.q2
-               ->  Hash Right Join
-                     Output: i8.q2
-                     Hash Cond: ((NULL::integer) = i8b1.q2)
-                     ->  Hash Right Join
-                           Output: i8.q2, (NULL::integer)
-                           Hash Cond: (i8b2.q1 = i8.q1)
-                           ->  Nested Loop
-                                 Output: i8b2.q1, NULL::integer
-                                 ->  Seq Scan on public.int8_tbl i8b2
-                                       Output: i8b2.q1, i8b2.q2
-                                 ->  Materialize
-                                       ->  Seq Scan on public.int4_tbl i4b2
-                           ->  Hash
-                                 Output: i8.q1, i8.q2
-                                 ->  Seq Scan on public.int8_tbl i8
-                                       Output: i8.q1, i8.q2
-                     ->  Hash
-                           Output: i8b1.q2
-                           ->  Seq Scan on public.int8_tbl i8b1
-                                 Output: i8b1.q2
-   ->  Hash
-         Output: i4.f1
-         ->  Seq Scan on public.int4_tbl i4
-               Output: i4.f1
-(34 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.* from
   text_tbl t1
   left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
@@ -4731,47 +4329,11 @@
   on (t1.f1 = b1.d1)
   left join int4_tbl i4
   on (i8.q2 = i4.f1);
-                                 QUERY PLAN                                 
-----------------------------------------------------------------------------
- Hash Left Join
-   Output: t1.f1
-   Hash Cond: (i8.q2 = i4.f1)
-   ->  Nested Loop Left Join
-         Output: t1.f1, i8.q2
-         Join Filter: (t1.f1 = '***'::text)
-         ->  Seq Scan on public.text_tbl t1
-               Output: t1.f1
-         ->  Materialize
-               Output: i8.q2
-               ->  Hash Right Join
-                     Output: i8.q2
-                     Hash Cond: ((NULL::integer) = i8b1.q2)
-                     ->  Hash Right Join
-                           Output: i8.q2, (NULL::integer)
-                           Hash Cond: (i8b2.q1 = i8.q1)
-                           ->  Hash Join
-                                 Output: i8b2.q1, NULL::integer
-                                 Hash Cond: (i8b2.q1 = i4b2.f1)
-                                 ->  Seq Scan on public.int8_tbl i8b2
-                                       Output: i8b2.q1, i8b2.q2
-                                 ->  Hash
-                                       Output: i4b2.f1
-                                       ->  Seq Scan on public.int4_tbl i4b2
-                                             Output: i4b2.f1
-                           ->  Hash
-                                 Output: i8.q1, i8.q2
-                                 ->  Seq Scan on public.int8_tbl i8
-                                       Output: i8.q1, i8.q2
-                     ->  Hash
-                           Output: i8b1.q2
-                           ->  Seq Scan on public.int8_tbl i8b1
-                                 Output: i8b1.q2
-   ->  Hash
-         Output: i4.f1
-         ->  Seq Scan on public.int4_tbl i4
-               Output: i4.f1
-(37 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.* from
   text_tbl t1
   left join (select *, '***'::text as d1 from int8_tbl i8b1) b1
@@ -4798,29 +4360,11 @@
   on t1.f1 = 'doh!'
   left join int4_tbl i4
   on i8.q1 = i4.f1;
-                       QUERY PLAN                       
---------------------------------------------------------
- Nested Loop Left Join
-   Output: t1.f1, i8.q1, i8.q2, t2.f1, i4.f1
-   ->  Seq Scan on public.text_tbl t2
-         Output: t2.f1
-   ->  Materialize
-         Output: i8.q1, i8.q2, i4.f1, t1.f1
-         ->  Nested Loop
-               Output: i8.q1, i8.q2, i4.f1, t1.f1
-               ->  Nested Loop Left Join
-                     Output: i8.q1, i8.q2, i4.f1
-                     Join Filter: (i8.q1 = i4.f1)
-                     ->  Seq Scan on public.int8_tbl i8
-                           Output: i8.q1, i8.q2
-                           Filter: (i8.q2 = 456)
-                     ->  Seq Scan on public.int4_tbl i4
-                           Output: i4.f1
-               ->  Seq Scan on public.text_tbl t1
-                     Output: t1.f1
-                     Filter: (t1.f1 = 'doh!'::text)
-(19 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   text_tbl t1
   inner join int8_tbl i8
@@ -4844,15 +4388,11 @@
   from pg_class c left join pg_namespace n on n.oid = c.relnamespace
   where c.relkind = 'r'
 ) ss2 on false;
-           QUERY PLAN           
---------------------------------
- Nested Loop Left Join
-   Join Filter: false
-   ->  Result
-   ->  Result
-         One-Time Filter: false
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check handling of apparently-commutable outer joins with non-commutable
 -- joins between them
 explain (costs off)
@@ -4863,26 +4403,11 @@
   join int4_tbl i42 on ss1.a is null or i8.q1 <> i8.q2
   right join (select 2 as b) ss2
   on ss2.b < i4.f1;
-                        QUERY PLAN                         
------------------------------------------------------------
- Nested Loop Left Join
-   ->  Result
-   ->  Nested Loop
-         ->  Nested Loop Left Join
-               Join Filter: NULL::boolean
-               Filter: (((1) IS NULL) OR (i8.q1 <> i8.q2))
-               ->  Nested Loop Left Join
-                     Join Filter: (i4.f1 IS NOT NULL)
-                     ->  Seq Scan on int4_tbl i4
-                           Filter: (2 < f1)
-                     ->  Materialize
-                           ->  Seq Scan on int8_tbl i8
-               ->  Result
-                     One-Time Filter: false
-         ->  Materialize
-               ->  Seq Scan on int4_tbl i42
-(16 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test for appropriate join order in the presence of lateral references
 --
@@ -4893,30 +4418,11 @@
   on i8.q2 = 123,
   lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss
 where t1.f1 = ss.f1;
-                    QUERY PLAN                    
---------------------------------------------------
- Nested Loop
-   Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1
-   Join Filter: (t1.f1 = t2.f1)
-   ->  Nested Loop Left Join
-         Output: t1.f1, i8.q1, i8.q2
-         ->  Seq Scan on public.text_tbl t1
-               Output: t1.f1
-         ->  Materialize
-               Output: i8.q1, i8.q2
-               ->  Seq Scan on public.int8_tbl i8
-                     Output: i8.q1, i8.q2
-                     Filter: (i8.q2 = 123)
-   ->  Memoize
-         Output: (i8.q1), t2.f1
-         Cache Key: i8.q1
-         Cache Mode: binary
-         ->  Limit
-               Output: (i8.q1), t2.f1
-               ->  Seq Scan on public.text_tbl t2
-                     Output: i8.q1, t2.f1
-(20 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   text_tbl t1
   left join int8_tbl i8
@@ -4936,40 +4442,11 @@
   lateral (select i8.q1, t2.f1 from text_tbl t2 limit 1) as ss1,
   lateral (select ss1.* from text_tbl t3 limit 1) as ss2
 where t1.f1 = ss2.f1;
-                            QUERY PLAN                             
--------------------------------------------------------------------
- Nested Loop
-   Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1, ((i8.q1)), (t2.f1)
-   Join Filter: (t1.f1 = (t2.f1))
-   ->  Nested Loop
-         Output: t1.f1, i8.q1, i8.q2, (i8.q1), t2.f1
-         ->  Nested Loop Left Join
-               Output: t1.f1, i8.q1, i8.q2
-               ->  Seq Scan on public.text_tbl t1
-                     Output: t1.f1
-               ->  Materialize
-                     Output: i8.q1, i8.q2
-                     ->  Seq Scan on public.int8_tbl i8
-                           Output: i8.q1, i8.q2
-                           Filter: (i8.q2 = 123)
-         ->  Memoize
-               Output: (i8.q1), t2.f1
-               Cache Key: i8.q1
-               Cache Mode: binary
-               ->  Limit
-                     Output: (i8.q1), t2.f1
-                     ->  Seq Scan on public.text_tbl t2
-                           Output: i8.q1, t2.f1
-   ->  Memoize
-         Output: ((i8.q1)), (t2.f1)
-         Cache Key: (i8.q1), t2.f1
-         Cache Mode: binary
-         ->  Limit
-               Output: ((i8.q1)), (t2.f1)
-               ->  Seq Scan on public.text_tbl t3
-                     Output: (i8.q1), t2.f1
-(30 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   text_tbl t1
   left join int8_tbl i8
@@ -4990,42 +4467,11 @@
   left join text_tbl as tt4 on (tt3.f1 = tt4.f1),
   lateral (select tt4.f1 as c0 from text_tbl as tt5 limit 1) as ss1
 where tt1.f1 = ss1.c0;
-                        QUERY PLAN                        
-----------------------------------------------------------
- Nested Loop
-   Output: 1
-   ->  Nested Loop Left Join
-         Output: tt1.f1, tt4.f1
-         ->  Nested Loop
-               Output: tt1.f1
-               ->  Seq Scan on public.text_tbl tt1
-                     Output: tt1.f1
-                     Filter: (tt1.f1 = 'foo'::text)
-               ->  Seq Scan on public.text_tbl tt2
-                     Output: tt2.f1
-         ->  Materialize
-               Output: tt4.f1
-               ->  Nested Loop Left Join
-                     Output: tt4.f1
-                     ->  Seq Scan on public.text_tbl tt3
-                           Output: tt3.f1
-                           Filter: (tt3.f1 = 'foo'::text)
-                     ->  Seq Scan on public.text_tbl tt4
-                           Output: tt4.f1
-                           Filter: (tt4.f1 = 'foo'::text)
-   ->  Memoize
-         Output: ss1.c0
-         Cache Key: tt4.f1
-         Cache Mode: binary
-         ->  Subquery Scan on ss1
-               Output: ss1.c0
-               Filter: (ss1.c0 = 'foo'::text)
-               ->  Limit
-                     Output: (tt4.f1)
-                     ->  Seq Scan on public.text_tbl tt5
-                           Output: tt4.f1
-(32 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select 1 from
   text_tbl as tt1
   inner join text_tbl as tt2 on (tt1.f1 = 'foo')
@@ -5045,13 +4491,11 @@
      right join (select 1 as z) as ss2 on true)
   on false,
   lateral (select i4.f1, ss1.n from int8_tbl as i8 limit 1) as ss3;
-        QUERY PLAN        
---------------------------
- Result
-   Output: 1
-   One-Time Filter: false
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select 1 from
   int4_tbl as i4
   inner join
@@ -5068,6 +4512,7 @@
 --
 begin;
 create temp table t (a int unique);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 explain (costs off)
 select 1 from t t1
   join lateral (select t1.a from (select 1) foo offset 0) as s1 on true
@@ -5079,13 +4524,13 @@
        on false
      where t3.a = coalesce(t5.a,1)) as s2
   on true;
-        QUERY PLAN        
---------------------------
- Result
-   One-Time Filter: false
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 --
 -- check a case in which a PlaceHolderVar forces join order
 --
@@ -5099,35 +4544,11 @@
   on i41.f1 = ss1.c1,
   lateral (select i41.*, i8.*, ss1.* from text_tbl limit 1) ss2
 where ss1.c2 = 0;
-                               QUERY PLAN                               
-------------------------------------------------------------------------
- Nested Loop
-   Output: (i41.f1), (i8.q1), (i8.q2), (i42.f1), (i43.f1), ((42))
-   ->  Hash Join
-         Output: i41.f1, i42.f1, i8.q1, i8.q2, i43.f1, 42
-         Hash Cond: (i41.f1 = i42.f1)
-         ->  Nested Loop
-               Output: i8.q1, i8.q2, i43.f1, i41.f1
-               ->  Nested Loop
-                     Output: i8.q1, i8.q2, i43.f1
-                     ->  Seq Scan on public.int8_tbl i8
-                           Output: i8.q1, i8.q2
-                           Filter: (i8.q1 = 0)
-                     ->  Seq Scan on public.int4_tbl i43
-                           Output: i43.f1
-                           Filter: (i43.f1 = 0)
-               ->  Seq Scan on public.int4_tbl i41
-                     Output: i41.f1
-         ->  Hash
-               Output: i42.f1
-               ->  Seq Scan on public.int4_tbl i42
-                     Output: i42.f1
-   ->  Limit
-         Output: (i41.f1), (i8.q1), (i8.q2), (i42.f1), (i43.f1), ((42))
-         ->  Seq Scan on public.text_tbl
-               Output: i41.f1, i8.q1, i8.q2, i42.f1, i43.f1, (42)
-(25 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select ss2.* from
   int4_tbl i41
   left join int8_tbl i8
@@ -5150,18 +4571,11 @@
   left join
     (tenk1 as a1 full join (select 1 as id) as yy on (a1.unique1 = yy.id))
   on (xx.id = coalesce(yy.id));
-              QUERY PLAN               
----------------------------------------
- Nested Loop Left Join
-   ->  Result
-   ->  Hash Full Join
-         Hash Cond: (a1.unique1 = (1))
-         Filter: (1 = COALESCE((1)))
-         ->  Seq Scan on tenk1 a1
-         ->  Hash
-               ->  Result
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select 1 as id) as xx
   left join
@@ -5177,74 +4591,101 @@
 --
 explain (costs off)
   select * from int4_tbl a left join tenk1 b on f1 = unique2 where f1 = 0;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int4_tbl a
-         Filter: (f1 = 0)
-   ->  Index Scan using tenk1_unique2 on tenk1 b
-         Index Cond: (unique2 = 0)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
   select * from tenk1 a full join tenk1 b using(unique2) where unique2 = 42;
-                   QUERY PLAN                    
--------------------------------------------------
- Merge Full Join
-   ->  Index Scan using tenk1_unique2 on tenk1 a
-         Index Cond: (unique2 = 42)
-   ->  Index Scan using tenk1_unique2 on tenk1 b
-         Index Cond: (unique2 = 42)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- test that quals attached to an outer join have correct semantics,
 -- specifically that they don't re-use expressions computed below the join;
 -- we force a mergejoin so that coalesce(b.q1, 1) appears as a join input
 --
 set enable_hashjoin to off;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_nestloop to off;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 explain (verbose, costs off)
   select a.q2, b.q1
     from int8_tbl a left join int8_tbl b on a.q2 = coalesce(b.q1, 1)
     where coalesce(b.q1, 1) > 0;
-                       QUERY PLAN                        
----------------------------------------------------------
- Merge Left Join
-   Output: a.q2, b.q1
-   Merge Cond: (a.q2 = (COALESCE(b.q1, '1'::bigint)))
-   Filter: (COALESCE(b.q1, '1'::bigint) > 0)
-   ->  Sort
-         Output: a.q2
-         Sort Key: a.q2
-         ->  Seq Scan on public.int8_tbl a
-               Output: a.q2
-   ->  Sort
-         Output: b.q1, (COALESCE(b.q1, '1'::bigint))
-         Sort Key: (COALESCE(b.q1, '1'::bigint))
-         ->  Seq Scan on public.int8_tbl b
-               Output: b.q1, COALESCE(b.q1, '1'::bigint)
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select a.q2, b.q1
   from int8_tbl a left join int8_tbl b on a.q2 = coalesce(b.q1, 1)
   where coalesce(b.q1, 1) > 0;
         q2         |        q1        
 -------------------+------------------
- -4567890123456789 |                 
-               123 |              123
-               123 |              123
                456 |                 
   4567890123456789 | 4567890123456789
   4567890123456789 | 4567890123456789
   4567890123456789 | 4567890123456789
+               123 |              123
+               123 |              123
   4567890123456789 | 4567890123456789
   4567890123456789 | 4567890123456789
   4567890123456789 | 4567890123456789
+ -4567890123456789 |                 
 (10 rows)
 
 reset enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_nestloop;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 --
 -- test join strength reduction with a SubPlan providing the proof
 --
@@ -5252,19 +4693,11 @@
 select a.unique1, b.unique2
   from onek a left join onek b on a.unique1 = b.unique2
   where b.unique2 = any (select q1 from int8_tbl c where c.q1 < b.unique1);
-                        QUERY PLAN                        
-----------------------------------------------------------
- Hash Join
-   Hash Cond: (b.unique2 = a.unique1)
-   ->  Seq Scan on onek b
-         Filter: (SubPlan 1)
-         SubPlan 1
-           ->  Seq Scan on int8_tbl c
-                 Filter: (q1 < b.unique1)
-   ->  Hash
-         ->  Index Only Scan using onek_unique1 on onek a
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.unique1, b.unique2
   from onek a left join onek b on a.unique1 = b.unique2
   where b.unique2 = any (select q1 from int8_tbl c where c.q1 < b.unique1);
@@ -5280,15 +4713,11 @@
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where a.unique1 = 42;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   ->  Index Only Scan using onek_unique1 on onek a
-         Index Cond: (unique1 = 42)
-   ->  Index Only Scan using onek_unique2 on onek b
-         Index Cond: (unique2 = 42)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where a.unique1 = 42;
@@ -5301,15 +4730,11 @@
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where b.unique2 = 43;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop Left Join
-   ->  Index Only Scan using onek_unique2 on onek b
-         Index Cond: (unique2 = 43)
-   ->  Index Only Scan using onek_unique1 on onek a
-         Index Cond: (unique1 = 43)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where b.unique2 = 43;
@@ -5322,15 +4747,11 @@
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where a.unique1 = 42 and b.unique2 = 42;
-                     QUERY PLAN                     
-----------------------------------------------------
- Nested Loop
-   ->  Index Only Scan using onek_unique1 on onek a
-         Index Cond: (unique1 = 42)
-   ->  Index Only Scan using onek_unique2 on onek b
-         Index Cond: (unique2 = 42)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select a.unique1, b.unique2
   from onek a full join onek b on a.unique1 = b.unique2
   where a.unique1 = 42 and b.unique2 = 42;
@@ -5348,16 +4769,11 @@
 full join
   (select * from (values(456,2)) w(v1,v2) join int8_tbl i82 on q2=v1) ss2
 on true;
-              QUERY PLAN              
---------------------------------------
- Merge Full Join
-   ->  Seq Scan on int8_tbl i81
-         Filter: (q2 = 123)
-   ->  Materialize
-         ->  Seq Scan on int8_tbl i82
-               Filter: (q2 = 456)
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select * from int8_tbl i81 join (values(123,2)) v(v1,v2) on q2=v1) ss1
 full join
@@ -5373,48 +4789,50 @@
 --
 begin;
 CREATE TEMP TABLE a (id int PRIMARY KEY, b_id int);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  relation "root.public.a" already exists
 CREATE TEMP TABLE b (id int PRIMARY KEY, c_id int);
+ERROR:  relation "root.public.b" already exists
 CREATE TEMP TABLE c (id int PRIMARY KEY);
+ERROR:  relation "root.public.c" already exists
 CREATE TEMP TABLE d (a int, b int);
 INSERT INTO a VALUES (0, 0), (1, NULL);
+ERROR:  INSERT has more expressions than target columns, 2 expressions for 1 targets
 INSERT INTO b VALUES (0, 0), (1, NULL);
+ERROR:  null value in column "num" violates not-null constraint
 INSERT INTO c VALUES (0), (1);
 INSERT INTO d VALUES (1,3), (2,2), (3,1);
 -- all three cases should be optimizable into a simple seqscan
 explain (costs off) SELECT a.* FROM a LEFT JOIN b ON a.b_id = b.id;
-  QUERY PLAN   
----------------
- Seq Scan on a
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off) SELECT a.* FROM a LEFT JOIN b ON a.b_id = b.id
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off) SELECT b.* FROM b LEFT JOIN c ON b.c_id = c.id;
-  QUERY PLAN   
----------------
- Seq Scan on b
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off) SELECT b.* FROM b LEFT JOIN c ON b.c_id = c.id
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
   SELECT a.* FROM a LEFT JOIN (b left join c on b.c_id = c.id)
   ON (a.b_id = b.id);
-  QUERY PLAN   
----------------
- Seq Scan on a
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check optimization of outer join within another special join
 explain (costs off)
 select id from a where id in (
 	select b.id from b left join c on b.id = c.id
 );
-         QUERY PLAN         
-----------------------------
- Hash Join
-   Hash Cond: (a.id = b.id)
-   ->  Seq Scan on a
-   ->  Hash
-         ->  Seq Scan on b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check optimization with oddly-nested outer joins
 explain (costs off)
 select a1.id from
@@ -5422,41 +4840,32 @@
   left join
   (a a3 left join a a4 on a3.id = a4.id)
   on a2.id = a3.id;
-          QUERY PLAN          
-------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on a a1
-   ->  Materialize
-         ->  Seq Scan on a a2
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select a1.id from
   (a a1 left join a a2 on a1.id = a2.id)
   left join
   (a a3 left join a a4 on a3.id = a4.id)
   on a2.id = a3.id;
-    QUERY PLAN    
-------------------
- Seq Scan on a a1
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select 1 from a t1
     left join a t2 on true
    inner join a t3 on true
     left join a t4 on t2.id = t4.id and t2.id = t3.id;
-             QUERY PLAN             
-------------------------------------
- Nested Loop
-   ->  Nested Loop Left Join
-         ->  Seq Scan on a t1
-         ->  Materialize
-               ->  Seq Scan on a t2
-   ->  Materialize
-         ->  Seq Scan on a t3
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- another example (bug #17781)
 explain (costs off)
 select ss1.f1
@@ -5470,15 +4879,11 @@
                         inner join int8_tbl as t7 on null)
                on t5.q1 = t7.q2)
     on false;
-           QUERY PLAN           
---------------------------------
- Nested Loop Left Join
-   Join Filter: false
-   ->  Seq Scan on int4_tbl t1
-   ->  Result
-         One-Time Filter: false
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- variant with Var rather than PHV coming from t6
 explain (costs off)
 select ss1.f1
@@ -5492,31 +4897,22 @@
                         inner join int8_tbl as t7 on null)
                on t5.q1 = t7.q2)
     on false;
-           QUERY PLAN           
---------------------------------
- Nested Loop Left Join
-   Join Filter: false
-   ->  Seq Scan on int4_tbl t1
-   ->  Result
-         One-Time Filter: false
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- per further discussion of bug #17781
 explain (costs off)
 select ss1.x
 from (select f1/2 as x from int4_tbl i4 left join a on a.id = i4.f1) ss1
      right join int8_tbl i8 on true
 where current_user is not null;  -- this is to add a Result node
-                  QUERY PLAN                   
------------------------------------------------
- Result
-   One-Time Filter: (CURRENT_USER IS NOT NULL)
-   ->  Nested Loop Left Join
-         ->  Seq Scan on int8_tbl i8
-         ->  Materialize
-               ->  Seq Scan on int4_tbl i4
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- and further discussion of bug #17781
 explain (costs off)
 select *
@@ -5525,23 +4921,11 @@
     on t1.q2 = t2.q2
   left join onek t4
     on t2.q2 < t3.unique2;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop Left Join
-   Join Filter: (t2.q2 < t3.unique2)
-   ->  Nested Loop Left Join
-         Join Filter: (t2.q1 > t3.unique1)
-         ->  Hash Left Join
-               Hash Cond: (t1.q2 = t2.q2)
-               ->  Seq Scan on int8_tbl t1
-               ->  Hash
-                     ->  Seq Scan on int8_tbl t2
-         ->  Materialize
-               ->  Seq Scan on onek t3
-   ->  Materialize
-         ->  Seq Scan on onek t4
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- More tests of correct placement of pseudoconstant quals
 -- simple constant-false condition
 explain (costs off)
@@ -5549,32 +4933,22 @@
   (int8_tbl t2 inner join int8_tbl t3 on false
    left join int8_tbl t4 on t2.q2 = t4.q2)
 on t1.q1 = t2.q1;
-              QUERY PLAN              
---------------------------------------
- Hash Left Join
-   Hash Cond: (t1.q1 = q1)
-   ->  Seq Scan on int8_tbl t1
-   ->  Hash
-         ->  Result
-               One-Time Filter: false
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- deduce constant-false from an EquivalenceClass
 explain (costs off)
 select * from int8_tbl t1 left join
   (int8_tbl t2 inner join int8_tbl t3 on (t2.q1-t3.q2) = 0 and (t2.q1-t3.q2) = 1
    left join int8_tbl t4 on t2.q2 = t4.q2)
 on t1.q1 = t2.q1;
-              QUERY PLAN              
---------------------------------------
- Hash Left Join
-   Hash Cond: (t1.q1 = q1)
-   ->  Seq Scan on int8_tbl t1
-   ->  Hash
-         ->  Result
-               One-Time Filter: false
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- pseudoconstant based on an outer-level Param
 explain (costs off)
 select exists(
@@ -5583,45 +4957,30 @@
      left join int8_tbl t4 on t2.q2 = t4.q2)
   on t1.q1 = t2.q1
 ) from int4_tbl x0;
-                             QUERY PLAN                              
----------------------------------------------------------------------
- Seq Scan on int4_tbl x0
-   SubPlan 1
-     ->  Nested Loop Left Join
-           Join Filter: (t2.q2 = t4.q2)
-           ->  Nested Loop Left Join
-                 Join Filter: (t1.q1 = t2.q1)
-                 ->  Seq Scan on int8_tbl t1
-                 ->  Materialize
-                       ->  Result
-                             One-Time Filter: (x0.f1 = 1)
-                             ->  Nested Loop
-                                   ->  Seq Scan on int8_tbl t2
-                                   ->  Materialize
-                                         ->  Seq Scan on int8_tbl t3
-           ->  Materialize
-                 ->  Seq Scan on int8_tbl t4
-(16 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check that join removal works for a left join when joining a subquery
 -- that is guaranteed to be unique by its GROUP BY clause
 explain (costs off)
 select d.* from d left join (select * from b group by b.id, b.c_id) s
   on d.a = s.id and d.b = s.c_id;
-  QUERY PLAN   
----------------
- Seq Scan on d
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- similarly, but keying off a DISTINCT clause
 explain (costs off)
 select d.* from d left join (select distinct * from b) s
   on d.a = s.id and d.b = s.c_id;
-  QUERY PLAN   
----------------
- Seq Scan on d
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- join removal is not possible when the GROUP BY contains a column that is
 -- not in the join condition.  (Note: as of 9.6, we notice that b.id is a
 -- primary key and so drop b.c_id from the GROUP BY of the resulting plan;
@@ -5629,109 +4988,89 @@
 explain (costs off)
 select d.* from d left join (select * from b group by b.id, b.c_id) s
   on d.a = s.id;
-                QUERY PLAN                
-------------------------------------------
- Merge Right Join
-   Merge Cond: (b.id = d.a)
-   ->  Group
-         Group Key: b.id
-         ->  Index Scan using b_pkey on b
-   ->  Sort
-         Sort Key: d.a
-         ->  Seq Scan on d
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- similarly, but keying off a DISTINCT clause
 explain (costs off)
 select d.* from d left join (select distinct * from b) s
   on d.a = s.id;
-              QUERY PLAN              
---------------------------------------
- Merge Right Join
-   Merge Cond: (b.id = d.a)
-   ->  Unique
-         ->  Sort
-               Sort Key: b.id, b.c_id
-               ->  Seq Scan on b
-   ->  Sort
-         Sort Key: d.a
-         ->  Seq Scan on d
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- join removal is not possible here
 explain (costs off)
 select 1 from a t1
   left join (a t2 left join a t3 on t2.id = 1) on t2.id = 1;
-                       QUERY PLAN                       
---------------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on a t1
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: (t2.id = 1)
-               ->  Index Only Scan using a_pkey on a t2
-                     Index Cond: (id = 1)
-               ->  Seq Scan on a t3
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check join removal works when uniqueness of the join condition is enforced
 -- by a UNION
 explain (costs off)
 select d.* from d left join (select id from a union select id from b) s
   on d.a = s.id;
-  QUERY PLAN   
----------------
- Seq Scan on d
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check join removal with a cross-type comparison operator
 explain (costs off)
 select i8.* from int8_tbl i8 left join (select f1 from int4_tbl group by f1) i4
   on i8.q1 = i4.f1;
-       QUERY PLAN        
--------------------------
- Seq Scan on int8_tbl i8
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check join removal with lateral references
 explain (costs off)
 select 1 from (select a.id FROM a left join b on a.b_id = b.id) q,
 			  lateral generate_series(1, q.id) gs(i) where q.id = gs.i;
-                QUERY PLAN                 
--------------------------------------------
- Nested Loop
-   ->  Seq Scan on a
-   ->  Function Scan on generate_series gs
-         Filter: (a.id = i)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check join removal within RHS of an outer join
 explain (costs off)
 select c.id, ss.a from c
   left join (select d.a from onerow, d left join b on d.a = b.id) ss
   on c.id = ss.a;
-           QUERY PLAN           
---------------------------------
- Hash Right Join
-   Hash Cond: (d.a = c.id)
-   ->  Nested Loop
-         ->  Seq Scan on onerow
-         ->  Seq Scan on d
-   ->  Hash
-         ->  Seq Scan on c
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE TEMP TABLE parted_b (id int PRIMARY KEY) partition by range(id);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE parted_b (id int PRIMARY KEY) partition by range(id)
+                                                                      ^
+HINT:  try \h CREATE TABLE
 CREATE TEMP TABLE parted_b1 partition of parted_b for values from (0) to (10);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE parted_b1 partition of parted_b for values from (0) to (10)
+                            ^
+HINT:  try \h CREATE TABLE
 -- test join removals on a partitioned table
 explain (costs off)
 select a.* from a left join parted_b pb on a.b_id = pb.id;
-  QUERY PLAN   
----------------
- Seq Scan on a
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 create temp table parent (k int primary key, pd int);
 create temp table child (k int unique, cd int);
 insert into parent values (1, 10), (2, 20), (3, 30);
@@ -5747,11 +5086,11 @@
 
 explain (costs off)
   select p.* from parent p left join child c on (p.k = c.k);
-      QUERY PLAN      
-----------------------
- Seq Scan on parent p
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- this case is not
 select p.*, linked from parent p
   left join (select c.*, true as linked from child c) as ss
@@ -5767,15 +5106,11 @@
   select p.*, linked from parent p
     left join (select c.*, true as linked from child c) as ss
     on (p.k = ss.k);
-           QUERY PLAN            
----------------------------------
- Hash Left Join
-   Hash Cond: (p.k = c.k)
-   ->  Seq Scan on parent p
-   ->  Hash
-         ->  Seq Scan on child c
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check for a 9.0rc1 bug: join removal breaks pseudoconstant qual handling
 select p.* from
   parent p left join child c on (p.k = c.k)
@@ -5788,14 +5123,11 @@
 select p.* from
   parent p left join child c on (p.k = c.k)
   where p.k = 1 and p.k = 2;
-                   QUERY PLAN                   
-------------------------------------------------
- Result
-   One-Time Filter: false
-   ->  Index Scan using parent_pkey on parent p
-         Index Cond: (k = 1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select p.* from
   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k
   where p.k = 1 and p.k = 2;
@@ -5807,34 +5139,31 @@
 select p.* from
   (parent p left join child c on (p.k = c.k)) join parent x on p.k = x.k
   where p.k = 1 and p.k = 2;
-        QUERY PLAN        
---------------------------
- Result
-   One-Time Filter: false
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- bug 5255: this is not optimizable by join removal
 begin;
 CREATE TEMP TABLE a (id int PRIMARY KEY);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  relation "root.public.a" already exists
 CREATE TEMP TABLE b (id int PRIMARY KEY, a_id int);
+ERROR:  relation "root.public.b" already exists
 INSERT INTO a VALUES (0), (1);
 INSERT INTO b VALUES (0, 0), (1, NULL);
+ERROR:  null value in column "num" violates not-null constraint
 SELECT * FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0);
- id | a_id | id 
-----+------+----
-  1 |      |   
-(1 row)
-
+ERROR:  column "b.a_id" does not exist
 SELECT b.* FROM b LEFT JOIN a ON (b.a_id = a.id) WHERE (a.id IS NULL OR a.id > 0);
- id | a_id 
-----+------
-  1 |     
-(1 row)
-
+ERROR:  column "b.a_id" does not exist
 rollback;
+WARNING:  there is no transaction in progress
 -- another join removal bug: this is not optimizable, either
 begin;
 create temp table innertab (id int8 primary key, dat1 int8);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 insert into innertab values(123, 42);
 SELECT * FROM
     (SELECT 1 AS x) ss1
@@ -5844,9 +5173,9 @@
   ON true;
  x |        q1        |        q2         |        y         
 ---+------------------+-------------------+------------------
+ 1 | 4567890123456789 |               123 |               42
  1 |              123 |               456 |              123
  1 |              123 |  4567890123456789 |              123
- 1 | 4567890123456789 |               123 |               42
  1 | 4567890123456789 |  4567890123456789 | 4567890123456789
  1 | 4567890123456789 | -4567890123456789 | 4567890123456789
 (5 rows)
@@ -5857,15 +5186,11 @@
   (SELECT *
    FROM int8_tbl LEFT JOIN innertab ON q2 = id) ss
  WHERE COALESCE(dat1, 0) = q1;
-                           QUERY PLAN                           
-----------------------------------------------------------------
- Nested Loop Left Join
-   Filter: (COALESCE(innertab.dat1, '0'::bigint) = int8_tbl.q1)
-   ->  Seq Scan on int8_tbl
-   ->  Index Scan using innertab_pkey on innertab
-         Index Cond: (id = int8_tbl.q2)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- join removal bug #17773: otherwise-removable PHV appears in a qual condition
 EXPLAIN (VERBOSE, COSTS OFF)
 SELECT q2 FROM
@@ -5873,19 +5198,11 @@
    FROM int8_tbl LEFT JOIN innertab ON q2 = id) ss
   RIGHT JOIN int4_tbl ON NULL
  WHERE x >= x;
-                      QUERY PLAN                      
-------------------------------------------------------
- Nested Loop Left Join
-   Output: q2
-   Join Filter: NULL::boolean
-   Filter: (('constant'::text) >= ('constant'::text))
-   ->  Seq Scan on public.int4_tbl
-         Output: int4_tbl.f1
-   ->  Result
-         Output: q2, 'constant'::text
-         One-Time Filter: false
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (VERBOSE, COSTS OFF)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- join removal bug #17786: check that OR conditions are cleaned up
 EXPLAIN (COSTS OFF)
 SELECT f1, x
@@ -5893,23 +5210,17 @@
      JOIN ((SELECT 42 AS x FROM int8_tbl LEFT JOIN innertab ON q1 = id) AS ss1
            RIGHT JOIN tenk1 ON NULL)
         ON tenk1.unique1 = ss1.x OR tenk1.unique2 = ss1.x;
-                                QUERY PLAN                                
---------------------------------------------------------------------------
- Nested Loop
-   ->  Seq Scan on int4_tbl
-   ->  Materialize
-         ->  Nested Loop Left Join
-               Join Filter: NULL::boolean
-               Filter: ((tenk1.unique1 = (42)) OR (tenk1.unique2 = (42)))
-               ->  Seq Scan on tenk1
-               ->  Result
-                     One-Time Filter: false
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 -- another join removal bug: we must clean up correctly when removing a PHV
 begin;
 create temp table uniquetbl (f1 text unique);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 explain (costs off)
 select t1.* from
   uniquetbl as t1
@@ -5917,11 +5228,11 @@
   on t1.f1 = t2.f1
   left join uniquetbl t3
   on t2.d1 = t3.f1;
-        QUERY PLAN        
---------------------------
- Seq Scan on uniquetbl t1
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select t0.*
 from
@@ -5934,19 +5245,11 @@
      left join uniquetbl u1 ON u1.f1 = t1.string4) ss
   on t0.f1 = ss.case1
 where ss.stringu2 !~* ss.case1;
-                                         QUERY PLAN                                         
---------------------------------------------------------------------------------------------
- Nested Loop
-   Join Filter: (t0.f1 = CASE t1.ten WHEN 0 THEN 'doh!'::text ELSE NULL::text END)
-   ->  Nested Loop
-         ->  Seq Scan on int4_tbl i4
-         ->  Index Scan using tenk1_unique2 on tenk1 t1
-               Index Cond: (unique2 = i4.f1)
-               Filter: (stringu2 !~* CASE ten WHEN 0 THEN 'doh!'::text ELSE NULL::text END)
-   ->  Materialize
-         ->  Seq Scan on text_tbl t0
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select t0.*
 from
  text_tbl t0
@@ -5964,9 +5267,12 @@
 (1 row)
 
 rollback;
+WARNING:  there is no transaction in progress
 -- another join removal bug: we must clean up EquivalenceClasses too
 begin;
 create temp table t (a int unique);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  relation "root.public.t" already exists
 insert into t values (1);
 explain (costs off)
 select 1
@@ -5975,15 +5281,11 @@
              from t t2 left join t t3 on t2.a = t3.a) s
     on true
 where t1.a = s.c;
-          QUERY PLAN          
-------------------------------
- Nested Loop Left Join
-   Filter: (t1.a = (2))
-   ->  Seq Scan on t t1
-   ->  Materialize
-         ->  Seq Scan on t t2
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select 1
 from t t1
   left join (select 2 as c
@@ -5995,10 +5297,14 @@
 (0 rows)
 
 rollback;
+WARNING:  there is no transaction in progress
 -- test cases where we can remove a join, but not a PHV computed at it
 begin;
 create temp table t (a int unique, b int);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  relation "root.public.t" already exists
 insert into t values (1,1), (2,2);
+ERROR:  INSERT has more expressions than target columns, 2 expressions for 1 targets
 explain (costs off)
 select 1
 from t t1
@@ -6007,18 +5313,11 @@
   on true
   left join t t4 on true
 where s.a < s.c;
-             QUERY PLAN              
--------------------------------------
- Nested Loop Left Join
-   ->  Nested Loop
-         ->  Seq Scan on t t1
-         ->  Materialize
-               ->  Seq Scan on t t2
-                     Filter: (a < 1)
-   ->  Materialize
-         ->  Seq Scan on t t4
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
 select t1.a, s.*
 from t t1
@@ -6027,17 +5326,11 @@
   on true
   left join t t4 on true
 where s.a < s.c;
-                  QUERY PLAN                   
------------------------------------------------
- Nested Loop Left Join
-   ->  Nested Loop
-         ->  Seq Scan on t t1
-         ->  Seq Scan on t t2
-               Filter: (a < COALESCE(t1.a, 1))
-   ->  Materialize
-         ->  Seq Scan on t t4
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.a, s.*
 from t t1
   left join lateral (select t2.a, coalesce(t1.a, 1) as c
@@ -6047,11 +5340,10 @@
 where s.a < s.c;
  a | a | c 
 ---+---+---
- 2 | 1 | 2
- 2 | 1 | 2
-(2 rows)
+(0 rows)
 
 rollback;
+WARNING:  there is no transaction in progress
 -- test case to expose miscomputation of required relid set for a PHV
 explain (verbose, costs off)
 select i8.*, ss.v, t.unique2
@@ -6060,23 +5352,11 @@
     left join lateral (select i4.f1 + 1 as v) as ss on true
     left join tenk1 t on t.unique2 = ss.v
 where q2 = 456;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Nested Loop Left Join
-   Output: i8.q1, i8.q2, ((i4.f1 + 1)), t.unique2
-   ->  Nested Loop Left Join
-         Output: i8.q1, i8.q2, (i4.f1 + 1)
-         ->  Seq Scan on public.int8_tbl i8
-               Output: i8.q1, i8.q2
-               Filter: (i8.q2 = 456)
-         ->  Seq Scan on public.int4_tbl i4
-               Output: i4.f1
-               Filter: (i4.f1 = 1)
-   ->  Index Only Scan using tenk1_unique2 on public.tenk1 t
-         Output: t.unique2
-         Index Cond: (t.unique2 = ((i4.f1 + 1)))
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select i8.*, ss.v, t.unique2
   from int8_tbl i8
     left join int4_tbl i4 on i4.f1 = 1
@@ -6091,43 +5371,41 @@
 -- and check a related issue where we miscompute required relids for
 -- a PHV that's been translated to a child rel
 create temp table parttbl (a integer primary key) partition by range (a);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+create temp table parttbl (a integer primary key) partition by range (a)
+                                                                        ^
+HINT:  try \h CREATE TABLE
 create temp table parttbl1 partition of parttbl for values from (1) to (100);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table parttbl1 partition of parttbl for values from (1) to (100)
+                           ^
+HINT:  try \h CREATE TABLE
 insert into parttbl values (11), (12);
+ERROR:  relation "parttbl" does not exist
 explain (costs off)
 select * from
   (select *, 12 as phv from parttbl) as ss
   right join int4_tbl on true
 where ss.a = ss.phv and f1 = 0;
-             QUERY PLAN             
-------------------------------------
- Nested Loop
-   ->  Seq Scan on int4_tbl
-         Filter: (f1 = 0)
-   ->  Seq Scan on parttbl1 parttbl
-         Filter: (a = 12)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (select *, 12 as phv from parttbl) as ss
   right join int4_tbl on true
 where ss.a = ss.phv and f1 = 0;
- a  | phv | f1 
-----+-----+----
- 12 |  12 |  0
-(1 row)
-
+ERROR:  relation "parttbl" does not exist
 -- bug #8444: we've historically allowed duplicate aliases within aliased JOINs
 select * from
   int8_tbl x join (int4_tbl x cross join int4_tbl y) j on q1 = f1; -- error
-ERROR:  column reference "f1" is ambiguous
-LINE 2: ..._tbl x join (int4_tbl x cross join int4_tbl y) j on q1 = f1;
-                                                                    ^
+ERROR:  column reference "f1" is ambiguous (candidates: j.f1, j.f1)
 select * from
   int8_tbl x join (int4_tbl x cross join int4_tbl y) j on q1 = y.f1; -- error
-ERROR:  invalid reference to FROM-clause entry for table "y"
-LINE 2: ...bl x join (int4_tbl x cross join int4_tbl y) j on q1 = y.f1;
-                                                                  ^
-DETAIL:  There is an entry for table "y", but it cannot be referenced from this part of the query.
+ERROR:  no data source matches prefix: y in this context
 select * from
   int8_tbl x join (int4_tbl x cross join int4_tbl y(ff)) j on q1 = f1; -- ok
  q1 | q2 | f1 | ff 
@@ -6139,29 +5417,16 @@
 --
 select t1.uunique1 from
   tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, prefer "t1" suggestion
-ERROR:  column t1.uunique1 does not exist
-LINE 1: select t1.uunique1 from
-               ^
-HINT:  Perhaps you meant to reference the column "t1.unique1".
+ERROR:  column "t1.uunique1" does not exist
 select t2.uunique1 from
   tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, prefer "t2" suggestion
-ERROR:  column t2.uunique1 does not exist
-LINE 1: select t2.uunique1 from
-               ^
-HINT:  Perhaps you meant to reference the column "t2.unique1".
+ERROR:  column "t2.uunique1" does not exist
 select uunique1 from
   tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, suggest both at once
 ERROR:  column "uunique1" does not exist
-LINE 1: select uunique1 from
-               ^
-HINT:  Perhaps you meant to reference the column "t1.unique1" or the column "t2.unique1".
 select ctid from
   tenk1 t1 join tenk2 t2 on t1.two = t2.two; -- error, need qualification
 ERROR:  column "ctid" does not exist
-LINE 1: select ctid from
-               ^
-DETAIL:  There are columns named "ctid", but they are in tables that cannot be referenced from this part of the query.
-HINT:  Try using a table-qualified name.
 --
 -- Take care to reference the correct RTE
 --
@@ -6170,21 +5435,17 @@
     a.attrelid::regclass::text join (select unnest(indkey) attnum,
     indexrelid from pg_index i) atts on atts.attnum = a.attnum where
     schemaname != 'pg_catalog';
-ERROR:  column atts.relid does not exist
-LINE 1: select atts.relid::regclass, s.* from pg_stats s join
-               ^
+ERROR:  column "atts.relid" does not exist
 -- Test bug in rangetable flattening
 explain (verbose, costs off)
 select 1 from
   (select * from int8_tbl where q1 <> (select 42) offset 0) ss
 where false;
-        QUERY PLAN        
---------------------------
- Result
-   Output: 1
-   One-Time Filter: false
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 --
 -- Test LATERAL
 --
@@ -6198,14 +5459,11 @@
 explain (costs off)
   select unique2, x.*
   from tenk1 a, lateral (select * from int4_tbl b where f1 = a.unique1) x;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop
-   ->  Seq Scan on int4_tbl b
-   ->  Index Scan using tenk1_unique1 on tenk1 a
-         Index Cond: (unique1 = b.f1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select unique2, x.*
 from int4_tbl x, lateral (select unique2 from tenk1 where f1 = unique1) ss;
  unique2 | f1 
@@ -6216,25 +5474,19 @@
 explain (costs off)
   select unique2, x.*
   from int4_tbl x, lateral (select unique2 from tenk1 where f1 = unique1) ss;
-                  QUERY PLAN                   
------------------------------------------------
- Nested Loop
-   ->  Seq Scan on int4_tbl x
-   ->  Index Scan using tenk1_unique1 on tenk1
-         Index Cond: (unique1 = x.f1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
   select unique2, x.*
   from int4_tbl x cross join lateral (select unique2 from tenk1 where f1 = unique1) ss;
-                  QUERY PLAN                   
------------------------------------------------
- Nested Loop
-   ->  Seq Scan on int4_tbl x
-   ->  Index Scan using tenk1_unique1 on tenk1
-         Index Cond: (unique1 = x.f1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select unique2, x.*
 from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true;
  unique2 |     f1      
@@ -6249,14 +5501,11 @@
 explain (costs off)
   select unique2, x.*
   from int4_tbl x left join lateral (select unique1, unique2 from tenk1 where f1 = unique1) ss on true;
-                  QUERY PLAN                   
------------------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on int4_tbl x
-   ->  Index Scan using tenk1_unique1 on tenk1
-         Index Cond: (unique1 = x.f1)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check scoping of lateral versus parent references
 -- the first of these should return int8_tbl.q2, the second int8_tbl.q1
 select *, (select r from (select q1 as q2) x, (select q2 as r) y) from int8_tbl;
@@ -6288,60 +5537,36 @@
 
 explain (costs off)
   select count(*) from tenk1 a, lateral generate_series(1,two) g;
-                      QUERY PLAN                      
-------------------------------------------------------
- Aggregate
-   ->  Nested Loop
-         ->  Seq Scan on tenk1 a
-         ->  Memoize
-               Cache Key: a.two
-               Cache Mode: binary
-               ->  Function Scan on generate_series g
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 explain (costs off)
   select count(*) from tenk1 a cross join lateral generate_series(1,two) g;
-                      QUERY PLAN                      
-------------------------------------------------------
- Aggregate
-   ->  Nested Loop
-         ->  Seq Scan on tenk1 a
-         ->  Memoize
-               Cache Key: a.two
-               Cache Mode: binary
-               ->  Function Scan on generate_series g
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- don't need the explicit LATERAL keyword for functions
 explain (costs off)
   select count(*) from tenk1 a, generate_series(1,two) g;
-                      QUERY PLAN                      
-------------------------------------------------------
- Aggregate
-   ->  Nested Loop
-         ->  Seq Scan on tenk1 a
-         ->  Memoize
-               Cache Key: a.two
-               Cache Mode: binary
-               ->  Function Scan on generate_series g
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- lateral with UNION ALL subselect
 explain (costs off)
   select * from generate_series(100,200) g,
     lateral (select * from int8_tbl a where g = q1 union all
              select * from int8_tbl b where g = q2) ss;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop
-   ->  Function Scan on generate_series g
-   ->  Append
-         ->  Seq Scan on int8_tbl a
-               Filter: (g.g = q1)
-         ->  Seq Scan on int8_tbl b
-               Filter: (g.g = q2)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from generate_series(100,200) g,
   lateral (select * from int8_tbl a where g = q1 union all
            select * from int8_tbl b where g = q2) ss;
@@ -6356,131 +5581,42 @@
 explain (costs off)
   select count(*) from tenk1 a,
     tenk1 b join lateral (values(a.unique1)) ss(x) on b.unique2 = ss.x;
-                         QUERY PLAN                         
-------------------------------------------------------------
- Aggregate
-   ->  Merge Join
-         Merge Cond: (a.unique1 = b.unique2)
-         ->  Index Only Scan using tenk1_unique1 on tenk1 a
-         ->  Index Only Scan using tenk1_unique2 on tenk1 b
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select count(*) from tenk1 a,
   tenk1 b join lateral (values(a.unique1)) ss(x) on b.unique2 = ss.x;
- count 
--------
- 10000
-(1 row)
-
+ERROR:  no data source matches prefix: a in this context
 -- lateral with VALUES, no flattening possible
 explain (costs off)
   select count(*) from tenk1 a,
     tenk1 b join lateral (values(a.unique1),(-1)) ss(x) on b.unique2 = ss.x;
-                            QUERY PLAN                            
-------------------------------------------------------------------
- Aggregate
-   ->  Nested Loop
-         ->  Nested Loop
-               ->  Index Only Scan using tenk1_unique1 on tenk1 a
-               ->  Values Scan on "*VALUES*"
-         ->  Memoize
-               Cache Key: "*VALUES*".column1
-               Cache Mode: logical
-               ->  Index Only Scan using tenk1_unique2 on tenk1 b
-                     Index Cond: (unique2 = "*VALUES*".column1)
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select count(*) from tenk1 a,
   tenk1 b join lateral (values(a.unique1),(-1)) ss(x) on b.unique2 = ss.x;
- count 
--------
- 10000
-(1 row)
-
+ERROR:  no data source matches prefix: a in this context
 -- lateral injecting a strange outer join condition
 explain (costs off)
   select * from int8_tbl a,
     int8_tbl x left join lateral (select a.q1 from int4_tbl y) ss(z)
       on x.q2 = ss.z
   order by a.q1, a.q2, x.q1, x.q2, ss.z;
-                   QUERY PLAN                   
-------------------------------------------------
- Sort
-   Sort Key: a.q1, a.q2, x.q1, x.q2, (a.q1)
-   ->  Nested Loop
-         ->  Seq Scan on int8_tbl a
-         ->  Hash Left Join
-               Hash Cond: (x.q2 = (a.q1))
-               ->  Seq Scan on int8_tbl x
-               ->  Hash
-                     ->  Seq Scan on int4_tbl y
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int8_tbl a,
   int8_tbl x left join lateral (select a.q1 from int4_tbl y) ss(z)
     on x.q2 = ss.z
   order by a.q1, a.q2, x.q1, x.q2, ss.z;
-        q1        |        q2         |        q1        |        q2         |        z         
-------------------+-------------------+------------------+-------------------+------------------
-              123 |               456 |              123 |               456 |                 
-              123 |               456 |              123 |  4567890123456789 |                 
-              123 |               456 | 4567890123456789 | -4567890123456789 |                 
-              123 |               456 | 4567890123456789 |               123 |              123
-              123 |               456 | 4567890123456789 |               123 |              123
-              123 |               456 | 4567890123456789 |               123 |              123
-              123 |               456 | 4567890123456789 |               123 |              123
-              123 |               456 | 4567890123456789 |               123 |              123
-              123 |               456 | 4567890123456789 |  4567890123456789 |                 
-              123 |  4567890123456789 |              123 |               456 |                 
-              123 |  4567890123456789 |              123 |  4567890123456789 |                 
-              123 |  4567890123456789 | 4567890123456789 | -4567890123456789 |                 
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123
-              123 |  4567890123456789 | 4567890123456789 |  4567890123456789 |                 
- 4567890123456789 | -4567890123456789 |              123 |               456 |                 
- 4567890123456789 | -4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 | -4567890123456789 |                 
- 4567890123456789 | -4567890123456789 | 4567890123456789 |               123 |                 
- 4567890123456789 | -4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 | -4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 |              123 |               456 |                 
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 | 4567890123456789 | -4567890123456789 |                 
- 4567890123456789 |               123 | 4567890123456789 |               123 |                 
- 4567890123456789 |               123 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |               123 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 |              123 |               456 |                 
- 4567890123456789 |  4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 |              123 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 | -4567890123456789 |                 
- 4567890123456789 |  4567890123456789 | 4567890123456789 |               123 |                 
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
-(57 rows)
-
+ERROR:  no data source matches prefix: a in this context
 -- lateral reference to a join alias variable
 select * from (select f1/2 as x from int4_tbl) ss1 join int4_tbl i4 on x = f1,
   lateral (select x) ss2(y);
@@ -6520,35 +5656,8 @@
 
 select * from (select f1/1000000000 from int4_tbl) x(lb),
   lateral generate_series(lb,4) x4;
- lb | x4 
-----+----
-  0 |  0
-  0 |  1
-  0 |  2
-  0 |  3
-  0 |  4
-  0 |  0
-  0 |  1
-  0 |  2
-  0 |  3
-  0 |  4
-  0 |  0
-  0 |  1
-  0 |  2
-  0 |  3
-  0 |  4
-  2 |  2
-  2 |  3
-  2 |  4
- -2 | -2
- -2 | -1
- -2 |  0
- -2 |  1
- -2 |  2
- -2 |  3
- -2 |  4
-(25 rows)
-
+ERROR:  unknown signature: generate_series(decimal, int)
+HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
 select * from (values(1)) x(lb),
   lateral (values(lb)) y(lbcopy);
  lb | lbcopy 
@@ -6573,14 +5682,14 @@
         q1        |        q2         |        q1        |        q2         |       xq1        |       yq1        |        yq2        
 ------------------+-------------------+------------------+-------------------+------------------+------------------+-------------------
               123 |               456 |                  |                   |              123 |                  |                  
+              123 |  4567890123456789 | 4567890123456789 |               123 |              123 | 4567890123456789 |               123
               123 |  4567890123456789 | 4567890123456789 | -4567890123456789 |              123 | 4567890123456789 | -4567890123456789
               123 |  4567890123456789 | 4567890123456789 |  4567890123456789 |              123 | 4567890123456789 |  4567890123456789
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123 | 4567890123456789 |               123
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789 |              123 |  4567890123456789
  4567890123456789 |               123 |              123 |               456 | 4567890123456789 |              123 |               456
+ 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789 |              123 |  4567890123456789
+ 4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789 | 4567890123456789 |               123
  4567890123456789 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789 | 4567890123456789 | -4567890123456789
  4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789 | 4567890123456789 |  4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789 | 4567890123456789 |               123
  4567890123456789 | -4567890123456789 |                  |                   | 4567890123456789 |                  |                  
 (10 rows)
 
@@ -6590,14 +5699,14 @@
         q1        |        q2         |        q1        |        q2         |       xq1        |       yq1        |        yq2        
 ------------------+-------------------+------------------+-------------------+------------------+------------------+-------------------
               123 |               456 |                  |                   |              123 |                  |                  
+              123 |  4567890123456789 | 4567890123456789 |               123 |              123 | 4567890123456789 |               123
               123 |  4567890123456789 | 4567890123456789 | -4567890123456789 |              123 | 4567890123456789 | -4567890123456789
               123 |  4567890123456789 | 4567890123456789 |  4567890123456789 |              123 | 4567890123456789 |  4567890123456789
-              123 |  4567890123456789 | 4567890123456789 |               123 |              123 | 4567890123456789 |               123
- 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789 |              123 |  4567890123456789
  4567890123456789 |               123 |              123 |               456 | 4567890123456789 |              123 |               456
+ 4567890123456789 |               123 |              123 |  4567890123456789 | 4567890123456789 |              123 |  4567890123456789
+ 4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789 | 4567890123456789 |               123
  4567890123456789 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789 | 4567890123456789 | -4567890123456789
  4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789 | 4567890123456789 |  4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789 | 4567890123456789 |               123
  4567890123456789 | -4567890123456789 |                  |                   | 4567890123456789 |                  |                  
 (10 rows)
 
@@ -6627,21 +5736,21 @@
                123 |                  
                456 |                  
                123 |  4567890123456789
+  4567890123456789 |               123
+               123 |  4567890123456789
   4567890123456789 | -4567890123456789
                123 |  4567890123456789
   4567890123456789 |  4567890123456789
-               123 |  4567890123456789
   4567890123456789 |               123
+               123 |               456
   4567890123456789 |               123
                123 |  4567890123456789
+  4567890123456789 |  4567890123456789
   4567890123456789 |               123
-               123 |               456
   4567890123456789 |  4567890123456789
   4567890123456789 | -4567890123456789
   4567890123456789 |  4567890123456789
   4567890123456789 |  4567890123456789
-  4567890123456789 |  4567890123456789
-  4567890123456789 |               123
   4567890123456789 |                  
  -4567890123456789 |                  
 (20 rows)
@@ -6652,24 +5761,24 @@
   lateral (select x.q1,y.q1 union all select x.q2,y.q2) v(vx,vy);
         vx         |        vy         
 -------------------+-------------------
+               123 |                  
+               456 |                  
+               123 |  4567890123456789
   4567890123456789 |               123
-               123 |               456
-  4567890123456789 |               123
+               123 |  4567890123456789
+  4567890123456789 | -4567890123456789
                123 |  4567890123456789
   4567890123456789 |  4567890123456789
   4567890123456789 |               123
-               123 |  4567890123456789
+               123 |               456
   4567890123456789 |               123
-  4567890123456789 |  4567890123456789
-  4567890123456789 |  4567890123456789
                123 |  4567890123456789
   4567890123456789 |  4567890123456789
+  4567890123456789 |               123
   4567890123456789 |  4567890123456789
   4567890123456789 | -4567890123456789
-               123 |  4567890123456789
-  4567890123456789 | -4567890123456789
-               123 |                  
-               456 |                  
+  4567890123456789 |  4567890123456789
+  4567890123456789 |  4567890123456789
   4567890123456789 |                  
  -4567890123456789 |                  
 (20 rows)
@@ -6680,24 +5789,24 @@
   lateral (select x.q1,y.q1 from onerow union all select x.q2,y.q2 from onerow) v(vx,vy);
         vx         |        vy         
 -------------------+-------------------
-  4567890123456789 |               123
-               123 |               456
+               123 |                  
+               456 |                  
+               123 |  4567890123456789
   4567890123456789 |               123
                123 |  4567890123456789
+  4567890123456789 | -4567890123456789
+               123 |  4567890123456789
   4567890123456789 |  4567890123456789
   4567890123456789 |               123
-               123 |  4567890123456789
+               123 |               456
   4567890123456789 |               123
-  4567890123456789 |  4567890123456789
-  4567890123456789 |  4567890123456789
                123 |  4567890123456789
   4567890123456789 |  4567890123456789
+  4567890123456789 |               123
   4567890123456789 |  4567890123456789
   4567890123456789 | -4567890123456789
-               123 |  4567890123456789
-  4567890123456789 | -4567890123456789
-               123 |                  
-               456 |                  
+  4567890123456789 |  4567890123456789
+  4567890123456789 |  4567890123456789
   4567890123456789 |                  
  -4567890123456789 |                  
 (20 rows)
@@ -6706,17 +5815,11 @@
 select * from
   int8_tbl a left join
   lateral (select *, a.q2 as x from int8_tbl b) ss on a.q2 = ss.q1;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop Left Join
-   Output: a.q1, a.q2, b.q1, b.q2, (a.q2)
-   ->  Seq Scan on public.int8_tbl a
-         Output: a.q1, a.q2
-   ->  Seq Scan on public.int8_tbl b
-         Output: b.q1, b.q2, a.q2
-         Filter: (a.q2 = b.q1)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   int8_tbl a left join
   lateral (select *, a.q2 as x from int8_tbl b) ss on a.q2 = ss.q1;
@@ -6724,13 +5827,13 @@
 ------------------+-------------------+------------------+-------------------+------------------
               123 |               456 |                  |                   |                 
               123 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789
-              123 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
               123 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789
+              123 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 |               123 |              123 |               456 |              123
  4567890123456789 |               123 |              123 |  4567890123456789 |              123
  4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789
+ 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 | -4567890123456789 |                  |                   |                 
 (10 rows)
 
@@ -6738,17 +5841,11 @@
 select * from
   int8_tbl a left join
   lateral (select *, coalesce(a.q2, 42) as x from int8_tbl b) ss on a.q2 = ss.q1;
-                            QUERY PLAN                            
-------------------------------------------------------------------
- Nested Loop Left Join
-   Output: a.q1, a.q2, b.q1, b.q2, (COALESCE(a.q2, '42'::bigint))
-   ->  Seq Scan on public.int8_tbl a
-         Output: a.q1, a.q2
-   ->  Seq Scan on public.int8_tbl b
-         Output: b.q1, b.q2, COALESCE(a.q2, '42'::bigint)
-         Filter: (a.q2 = b.q1)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   int8_tbl a left join
   lateral (select *, coalesce(a.q2, 42) as x from int8_tbl b) ss on a.q2 = ss.q1;
@@ -6756,13 +5853,13 @@
 ------------------+-------------------+------------------+-------------------+------------------
               123 |               456 |                  |                   |                 
               123 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789
-              123 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
               123 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789
+              123 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 |               123 |              123 |               456 |              123
  4567890123456789 |               123 |              123 |  4567890123456789 |              123
  4567890123456789 |  4567890123456789 | 4567890123456789 |               123 | 4567890123456789
- 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 |  4567890123456789 | 4567890123456789 | -4567890123456789 | 4567890123456789
+ 4567890123456789 |  4567890123456789 | 4567890123456789 |  4567890123456789 | 4567890123456789
  4567890123456789 | -4567890123456789 |                  |                   |                 
 (10 rows)
 
@@ -6771,19 +5868,11 @@
 explain (verbose, costs off)
 select * from int4_tbl i left join
   lateral (select * from int2_tbl j where i.f1 = j.f1) k on true;
-                QUERY PLAN                 
--------------------------------------------
- Hash Left Join
-   Output: i.f1, j.f1
-   Hash Cond: (i.f1 = j.f1)
-   ->  Seq Scan on public.int4_tbl i
-         Output: i.f1
-   ->  Hash
-         Output: j.f1
-         ->  Seq Scan on public.int2_tbl j
-               Output: j.f1
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int4_tbl i left join
   lateral (select * from int2_tbl j where i.f1 = j.f1) k on true;
      f1      | f1 
@@ -6798,17 +5887,11 @@
 explain (verbose, costs off)
 select * from int4_tbl i left join
   lateral (select coalesce(i) from int2_tbl j where i.f1 = j.f1) k on true;
-             QUERY PLAN              
--------------------------------------
- Nested Loop Left Join
-   Output: i.f1, (COALESCE(i.*))
-   ->  Seq Scan on public.int4_tbl i
-         Output: i.f1, i.*
-   ->  Seq Scan on public.int2_tbl j
-         Output: j.f1, COALESCE(i.*)
-         Filter: (i.f1 = j.f1)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int4_tbl i left join
   lateral (select coalesce(i) from int2_tbl j where i.f1 = j.f1) k on true;
      f1      | coalesce 
@@ -6825,24 +5908,11 @@
   lateral (
     select * from int4_tbl b left join int8_tbl c on (b.f1 = q1 and a.f1 = q2)
   ) ss;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop
-   Output: a.f1, b.f1, c.q1, c.q2
-   ->  Seq Scan on public.int4_tbl a
-         Output: a.f1
-   ->  Hash Left Join
-         Output: b.f1, c.q1, c.q2
-         Hash Cond: (b.f1 = c.q1)
-         ->  Seq Scan on public.int4_tbl b
-               Output: b.f1
-         ->  Hash
-               Output: c.q1, c.q2
-               ->  Seq Scan on public.int8_tbl c
-                     Output: c.q1, c.q2
-                     Filter: (a.f1 = c.q2)
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from int4_tbl a,
   lateral (
     select * from int4_tbl b left join int8_tbl c on (b.f1 = q1 and a.f1 = q2)
@@ -6883,21 +5953,11 @@
   (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
    int8_tbl b cross join int8_tbl c) ss
   on a.q2 = ss.bq1;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Nested Loop Left Join
-   Output: a.q1, a.q2, b.q1, c.q1, (LEAST(a.q1, b.q1, c.q1))
-   ->  Seq Scan on public.int8_tbl a
-         Output: a.q1, a.q2
-   ->  Nested Loop
-         Output: b.q1, c.q1, LEAST(a.q1, b.q1, c.q1)
-         ->  Seq Scan on public.int8_tbl b
-               Output: b.q1, b.q2
-               Filter: (a.q2 = b.q1)
-         ->  Seq Scan on public.int8_tbl c
-               Output: c.q1, c.q2
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   int8_tbl a left join lateral
   (select b.q1 as bq1, c.q1 as cq1, least(a.q1,b.q1,c.q1) from
@@ -6959,34 +6019,11 @@
     lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2
   ) on c.q2 = ss2.q1,
   lateral (select ss2.y offset 0) ss3;
-                                                                                     QUERY PLAN                                                                                     
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- Nested Loop
-   Output: c.q1, c.q2, a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint)), d.q1, (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)), ((COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)))
-   ->  Hash Right Join
-         Output: c.q1, c.q2, a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint)), d.q1, (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))
-         Hash Cond: (d.q1 = c.q2)
-         ->  Nested Loop
-               Output: a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint)), d.q1, (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))
-               ->  Hash Left Join
-                     Output: a.q1, a.q2, b.q1, (COALESCE(b.q2, '42'::bigint))
-                     Hash Cond: (a.q2 = b.q1)
-                     ->  Seq Scan on public.int8_tbl a
-                           Output: a.q1, a.q2
-                     ->  Hash
-                           Output: b.q1, (COALESCE(b.q2, '42'::bigint))
-                           ->  Seq Scan on public.int8_tbl b
-                                 Output: b.q1, COALESCE(b.q2, '42'::bigint)
-               ->  Seq Scan on public.int8_tbl d
-                     Output: d.q1, COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2)
-         ->  Hash
-               Output: c.q1, c.q2
-               ->  Seq Scan on public.int8_tbl c
-                     Output: c.q1, c.q2
-   ->  Result
-         Output: (COALESCE((COALESCE(b.q2, '42'::bigint)), d.q2))
-(24 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- case that breaks the old ph_may_need optimization
 explain (verbose, costs off)
 select c.*,a.*,ss1.q1,ss2.q1,ss3.* from
@@ -6999,44 +6036,11 @@
     lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2
   ) on c.q2 = ss2.q1,
   lateral (select * from int4_tbl i where ss2.y > f1) ss3;
-                                               QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
- Nested Loop
-   Output: c.q1, c.q2, a.q1, a.q2, b.q1, d.q1, i.f1
-   Join Filter: ((COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2)) > i.f1)
-   ->  Hash Right Join
-         Output: c.q1, c.q2, a.q1, a.q2, b.q1, d.q1, (COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2))
-         Hash Cond: (d.q1 = c.q2)
-         ->  Nested Loop
-               Output: a.q1, a.q2, b.q1, d.q1, (COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2))
-               ->  Hash Right Join
-                     Output: a.q1, a.q2, b.q1, (COALESCE(b.q2, (b2.f1)::bigint))
-                     Hash Cond: (b.q1 = a.q2)
-                     ->  Nested Loop
-                           Output: b.q1, COALESCE(b.q2, (b2.f1)::bigint)
-                           Join Filter: (b.q1 < b2.f1)
-                           ->  Seq Scan on public.int8_tbl b
-                                 Output: b.q1, b.q2
-                           ->  Materialize
-                                 Output: b2.f1
-                                 ->  Seq Scan on public.int4_tbl b2
-                                       Output: b2.f1
-                     ->  Hash
-                           Output: a.q1, a.q2
-                           ->  Seq Scan on public.int8_tbl a
-                                 Output: a.q1, a.q2
-               ->  Seq Scan on public.int8_tbl d
-                     Output: d.q1, COALESCE((COALESCE(b.q2, (b2.f1)::bigint)), d.q2)
-         ->  Hash
-               Output: c.q1, c.q2
-               ->  Seq Scan on public.int8_tbl c
-                     Output: c.q1, c.q2
-   ->  Materialize
-         Output: i.f1
-         ->  Seq Scan on public.int4_tbl i
-               Output: i.f1
-(34 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- check processing of postponed quals (bug #9041)
 explain (verbose, costs off)
 select * from
@@ -7044,73 +6048,38 @@
   left join lateral (
     select * from (select 3 as z offset 0) z where z.z = x.x
   ) zz on zz.z = y.y;
-                  QUERY PLAN                  
-----------------------------------------------
- Nested Loop Left Join
-   Output: (1), (2), (3)
-   Join Filter: (((3) = (1)) AND ((3) = (2)))
-   ->  Nested Loop
-         Output: (1), (2)
-         ->  Result
-               Output: 1
-         ->  Result
-               Output: 2
-   ->  Result
-         Output: 3
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- a new postponed-quals issue (bug #17768)
 explain (costs off)
 select * from int4_tbl t1,
   lateral (select * from int4_tbl t2 inner join int4_tbl t3 on t1.f1 = 1
            inner join (int4_tbl t4 left join int4_tbl t5 on true) on true) ss;
-                   QUERY PLAN                    
--------------------------------------------------
- Nested Loop Left Join
-   ->  Nested Loop
-         ->  Nested Loop
-               ->  Nested Loop
-                     ->  Seq Scan on int4_tbl t1
-                           Filter: (f1 = 1)
-                     ->  Seq Scan on int4_tbl t2
-               ->  Materialize
-                     ->  Seq Scan on int4_tbl t3
-         ->  Materialize
-               ->  Seq Scan on int4_tbl t4
-   ->  Materialize
-         ->  Seq Scan on int4_tbl t5
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 -- check dummy rels with lateral references (bug #15694)
 explain (verbose, costs off)
 select * from int8_tbl i8 left join lateral
   (select *, i8.q2 from int4_tbl where false) ss on true;
-              QUERY PLAN              
---------------------------------------
- Nested Loop Left Join
-   Output: i8.q1, i8.q2, f1, (i8.q2)
-   Join Filter: false
-   ->  Seq Scan on public.int8_tbl i8
-         Output: i8.q1, i8.q2
-   ->  Result
-         Output: f1, i8.q2
-         One-Time Filter: false
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 explain (verbose, costs off)
 select * from int8_tbl i8 left join lateral
   (select *, i8.q2 from int4_tbl i1, int4_tbl i2 where false) ss on true;
-               QUERY PLAN                
------------------------------------------
- Nested Loop Left Join
-   Output: i8.q1, i8.q2, f1, f1, (i8.q2)
-   ->  Seq Scan on public.int8_tbl i8
-         Output: i8.q1, i8.q2
-   ->  Result
-         Output: f1, f1, i8.q2
-         One-Time Filter: false
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- check handling of nested appendrels inside LATERAL
 select * from
   ((select 2 as v) union all (select 3 as v)) as q1
@@ -7132,7 +6101,7 @@
 
 -- check the number of columns specified
 SELECT * FROM (int8_tbl i cross join int4_tbl j) ss(a,b,c,d);
-ERROR:  join expression "ss" has 3 columns available but 4 columns specified
+ERROR:  source "ss" has 3 columns available but 4 columns specified
 -- check we don't try to do a unique-ified semijoin with LATERAL
 explain (verbose, costs off)
 select * from
@@ -7140,24 +6109,11 @@
   lateral (select f1 from int4_tbl
            where f1 = any (select unique1 from tenk1
                            where unique2 = v.x offset 0)) ss;
-                              QUERY PLAN                              
-----------------------------------------------------------------------
- Nested Loop
-   Output: "*VALUES*".column1, "*VALUES*".column2, int4_tbl.f1
-   ->  Values Scan on "*VALUES*"
-         Output: "*VALUES*".column1, "*VALUES*".column2
-   ->  Nested Loop Semi Join
-         Output: int4_tbl.f1
-         Join Filter: (int4_tbl.f1 = tenk1.unique1)
-         ->  Seq Scan on public.int4_tbl
-               Output: int4_tbl.f1
-         ->  Materialize
-               Output: tenk1.unique1
-               ->  Index Scan using tenk1_unique2 on public.tenk1
-                     Output: tenk1.unique1
-                     Index Cond: (tenk1.unique2 = "*VALUES*".column2)
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from
   (values (0,9998), (1,1000)) v(id,x),
   lateral (select f1 from int4_tbl
@@ -7179,37 +6135,11 @@
                                      where q2 = (select greatest(t1.q1,t2.q2))
                                        and (select v.id=0)) offset 0) ss2) ss
          where t1.q1 = ss.q2) ss0;
-                              QUERY PLAN                              
-----------------------------------------------------------------------
- Nested Loop
-   Output: "*VALUES*".column1, t1.q1, t1.q2, ss2.q1, ss2.q2
-   ->  Seq Scan on public.int8_tbl t1
-         Output: t1.q1, t1.q2
-   ->  Nested Loop
-         Output: "*VALUES*".column1, ss2.q1, ss2.q2
-         ->  Values Scan on "*VALUES*"
-               Output: "*VALUES*".column1
-         ->  Subquery Scan on ss2
-               Output: ss2.q1, ss2.q2
-               Filter: (t1.q1 = ss2.q2)
-               ->  Seq Scan on public.int8_tbl t2
-                     Output: t2.q1, t2.q2
-                     Filter: (SubPlan 3)
-                     SubPlan 3
-                       ->  Result
-                             Output: t3.q2
-                             One-Time Filter: $4
-                             InitPlan 1 (returns $2)
-                               ->  Result
-                                     Output: GREATEST(t1.q1, t2.q2)
-                             InitPlan 2 (returns $4)
-                               ->  Result
-                                     Output: ("*VALUES*".column1 = 0)
-                             ->  Seq Scan on public.int8_tbl t3
-                                   Output: t3.q1, t3.q2
-                                   Filter: (t3.q2 = $2)
-(27 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select * from (values (0), (1)) v(id),
 lateral (select * from int8_tbl t1,
          lateral (select * from
@@ -7221,104 +6151,82 @@
  id |        q1        |        q2         |        q1        |        q2        
 ----+------------------+-------------------+------------------+------------------
   0 | 4567890123456789 |               123 | 4567890123456789 | 4567890123456789
-  0 | 4567890123456789 |  4567890123456789 | 4567890123456789 | 4567890123456789
   0 | 4567890123456789 | -4567890123456789 | 4567890123456789 | 4567890123456789
+  0 | 4567890123456789 |  4567890123456789 | 4567890123456789 | 4567890123456789
 (3 rows)
 
 -- test some error cases where LATERAL should have been used but wasn't
 select f1,g from int4_tbl a, (select f1 as g) ss;
 ERROR:  column "f1" does not exist
-LINE 1: select f1,g from int4_tbl a, (select f1 as g) ss;
-                                             ^
-DETAIL:  There is a column named "f1" in table "a", but it cannot be referenced from this part of the query.
-HINT:  To reference that column, you must mark this subquery with LATERAL.
 select f1,g from int4_tbl a, (select a.f1 as g) ss;
-ERROR:  invalid reference to FROM-clause entry for table "a"
-LINE 1: select f1,g from int4_tbl a, (select a.f1 as g) ss;
-                                             ^
-DETAIL:  There is an entry for table "a", but it cannot be referenced from this part of the query.
-HINT:  To reference that table, you must mark this subquery with LATERAL.
+ERROR:  no data source matches prefix: a in this context
 select f1,g from int4_tbl a cross join (select f1 as g) ss;
 ERROR:  column "f1" does not exist
-LINE 1: select f1,g from int4_tbl a cross join (select f1 as g) ss;
-                                                       ^
-DETAIL:  There is a column named "f1" in table "a", but it cannot be referenced from this part of the query.
-HINT:  To reference that column, you must mark this subquery with LATERAL.
 select f1,g from int4_tbl a cross join (select a.f1 as g) ss;
-ERROR:  invalid reference to FROM-clause entry for table "a"
-LINE 1: select f1,g from int4_tbl a cross join (select a.f1 as g) ss...
-                                                       ^
-DETAIL:  There is an entry for table "a", but it cannot be referenced from this part of the query.
-HINT:  To reference that table, you must mark this subquery with LATERAL.
+ERROR:  no data source matches prefix: a in this context
 -- SQL:2008 says the left table is in scope but illegal to access here
 select f1,g from int4_tbl a right join lateral generate_series(0, a.f1) g on true;
-ERROR:  invalid reference to FROM-clause entry for table "a"
-LINE 1: ... int4_tbl a right join lateral generate_series(0, a.f1) g on...
-                                                             ^
-DETAIL:  The combining JOIN type must be INNER or LEFT for a LATERAL reference.
+ERROR:  The combining JOIN type must be INNER or LEFT for a LATERAL reference
 select f1,g from int4_tbl a full join lateral generate_series(0, a.f1) g on true;
-ERROR:  invalid reference to FROM-clause entry for table "a"
-LINE 1: ...m int4_tbl a full join lateral generate_series(0, a.f1) g on...
-                                                             ^
-DETAIL:  The combining JOIN type must be INNER or LEFT for a LATERAL reference.
+ERROR:  The combining JOIN type must be INNER or LEFT for a LATERAL reference
 -- check we complain about ambiguous table references
 select * from
   int8_tbl x cross join (int4_tbl x cross join lateral (select x.f1) ss);
-ERROR:  table reference "x" is ambiguous
-LINE 2: ...cross join (int4_tbl x cross join lateral (select x.f1) ss);
-                                                             ^
+ERROR:  source name "x" specified more than once (missing AS clause)
 -- LATERAL can be used to put an aggregate into the FROM clause of its query
 select 1 from tenk1 a, lateral (select max(a.unique1) from int4_tbl b) ss;
 ERROR:  aggregate functions are not allowed in FROM clause of their own query level
-LINE 1: select 1 from tenk1 a, lateral (select max(a.unique1) from i...
-                                               ^
 -- check behavior of LATERAL in UPDATE/DELETE
 create temp table xx1 as select f1 as x1, -f1 as x2 from int4_tbl;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 -- error, can't do this:
 update xx1 set x2 = f1 from (select * from int4_tbl where f1 = x1) ss;
 ERROR:  column "x1" does not exist
-LINE 1: ... set x2 = f1 from (select * from int4_tbl where f1 = x1) ss;
-                                                                ^
-DETAIL:  There is a column named "x1" in table "xx1", but it cannot be referenced from this part of the query.
 update xx1 set x2 = f1 from (select * from int4_tbl where f1 = xx1.x1) ss;
-ERROR:  invalid reference to FROM-clause entry for table "xx1"
-LINE 1: ...t x2 = f1 from (select * from int4_tbl where f1 = xx1.x1) ss...
-                                                             ^
-DETAIL:  There is an entry for table "xx1", but it cannot be referenced from this part of the query.
+ERROR:  no data source matches prefix: xx1 in this context
 -- can't do it even with LATERAL:
 update xx1 set x2 = f1 from lateral (select * from int4_tbl where f1 = x1) ss;
-ERROR:  invalid reference to FROM-clause entry for table "xx1"
-LINE 1: ...= f1 from lateral (select * from int4_tbl where f1 = x1) ss;
-                                                                ^
-HINT:  There is an entry for table "xx1", but it cannot be referenced from this part of the query.
+ERROR:  column "x1" does not exist
 -- we might in future allow something like this, but for now it's an error:
 update xx1 set x2 = f1 from xx1, lateral (select * from int4_tbl where f1 = x1) ss;
-ERROR:  table name "xx1" specified more than once
+ERROR:  source name "xx1" specified more than once (missing AS clause)
 -- also errors:
 delete from xx1 using (select * from int4_tbl where f1 = x1) ss;
 ERROR:  column "x1" does not exist
-LINE 1: ...te from xx1 using (select * from int4_tbl where f1 = x1) ss;
-                                                                ^
-DETAIL:  There is a column named "x1" in table "xx1", but it cannot be referenced from this part of the query.
 delete from xx1 using (select * from int4_tbl where f1 = xx1.x1) ss;
-ERROR:  invalid reference to FROM-clause entry for table "xx1"
-LINE 1: ...from xx1 using (select * from int4_tbl where f1 = xx1.x1) ss...
-                                                             ^
-DETAIL:  There is an entry for table "xx1", but it cannot be referenced from this part of the query.
+ERROR:  no data source matches prefix: xx1 in this context
 delete from xx1 using lateral (select * from int4_tbl where f1 = x1) ss;
-ERROR:  invalid reference to FROM-clause entry for table "xx1"
-LINE 1: ...xx1 using lateral (select * from int4_tbl where f1 = x1) ss;
-                                                                ^
-HINT:  There is an entry for table "xx1", but it cannot be referenced from this part of the query.
+ERROR:  column "x1" does not exist
 --
 -- test LATERAL reference propagation down a multi-level inheritance hierarchy
 -- produced for a multi-level partitioned table hierarchy.
 --
 create table join_pt1 (a int, b int, c varchar) partition by range(a);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+create table join_pt1 (a int, b int, c varchar) partition by range(a)
+                                                                     ^
+HINT:  try \h CREATE TABLE
 create table join_pt1p1 partition of join_pt1 for values from (0) to (100) partition by range(b);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create table join_pt1p1 partition of join_pt1 for values from (0) to (100) partition by range(b)
+                        ^
+HINT:  try \h CREATE TABLE
 create table join_pt1p2 partition of join_pt1 for values from (100) to (200);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create table join_pt1p2 partition of join_pt1 for values from (100) to (200)
+                        ^
+HINT:  try \h CREATE TABLE
 create table join_pt1p1p1 partition of join_pt1p1 for values from (0) to (100);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create table join_pt1p1p1 partition of join_pt1p1 for values from (0) to (100)
+                          ^
+HINT:  try \h CREATE TABLE
 insert into join_pt1 values (1, 1, 'x'), (101, 101, 'y');
+ERROR:  relation "join_pt1" does not exist
 create table join_ut1 (a int, b int, c varchar);
 insert into join_ut1 values (101, 101, 'y'), (2, 2, 'z');
 explain (verbose, costs off)
@@ -7326,49 +6234,27 @@
               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv
 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss
               on t1.a = ss.t2a order by t1.a;
-                             QUERY PLAN                             
---------------------------------------------------------------------
- Sort
-   Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a
-   Sort Key: t1.a
-   ->  Nested Loop Left Join
-         Output: t1.b, (LEAST(t1.a, t2.a, t3.a)), t1.a
-         ->  Seq Scan on public.join_ut1 t1
-               Output: t1.a, t1.b, t1.c
-         ->  Hash Join
-               Output: t2.a, LEAST(t1.a, t2.a, t3.a)
-               Hash Cond: (t3.b = t2.a)
-               ->  Seq Scan on public.join_ut1 t3
-                     Output: t3.a, t3.b, t3.c
-               ->  Hash
-                     Output: t2.a
-                     ->  Append
-                           ->  Seq Scan on public.join_pt1p1p1 t2_1
-                                 Output: t2_1.a
-                                 Filter: (t1.a = t2_1.a)
-                           ->  Seq Scan on public.join_pt1p2 t2_2
-                                 Output: t2_2.a
-                                 Filter: (t1.a = t2_2.a)
-(21 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select t1.b, ss.phv from join_ut1 t1 left join lateral
               (select t2.a as t2a, t3.a t3a, least(t1.a, t2.a, t3.a) phv
 					  from join_pt1 t2 join join_ut1 t3 on t2.a = t3.b) ss
               on t1.a = ss.t2a order by t1.a;
-  b  | phv 
------+-----
-   2 |    
- 101 | 101
-(2 rows)
-
+ERROR:  relation "join_pt1" does not exist
 drop table join_pt1;
+ERROR:  relation "join_pt1" does not exist
 drop table join_ut1;
 --
 -- test estimation behavior with multi-column foreign key and constant qual
 --
 begin;
 create table fkest (x integer, x10 integer, x10b integer, x100 integer);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 insert into fkest select x, x/10, x/10, x/100 from generate_series(1,1000) x;
+ERROR:  unsupported binary operator: <int> / <int> (returning <int>)
 create unique index on fkest(x, x10, x100);
 analyze fkest;
 explain (costs off)
@@ -7376,20 +6262,11 @@
   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)
   join fkest f3 on f1.x = f3.x
   where f1.x100 = 2;
-                        QUERY PLAN                         
------------------------------------------------------------
- Nested Loop
-   ->  Hash Join
-         Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))
-         ->  Seq Scan on fkest f2
-               Filter: (x100 = 2)
-         ->  Hash
-               ->  Seq Scan on fkest f1
-                     Filter: (x100 = 2)
-   ->  Index Scan using fkest_x_x10_x100_idx on fkest f3
-         Index Cond: (x = f1.x)
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 alter table fkest add constraint fk
   foreign key (x, x10b, x100) references fkest (x, x10, x100);
 explain (costs off)
@@ -7397,32 +6274,28 @@
   join fkest f2 on (f1.x = f2.x and f1.x10 = f2.x10b and f1.x100 = f2.x100)
   join fkest f3 on f1.x = f3.x
   where f1.x100 = 2;
-                     QUERY PLAN                      
------------------------------------------------------
- Hash Join
-   Hash Cond: ((f2.x = f1.x) AND (f2.x10b = f1.x10))
-   ->  Hash Join
-         Hash Cond: (f3.x = f2.x)
-         ->  Seq Scan on fkest f3
-         ->  Hash
-               ->  Seq Scan on fkest f2
-                     Filter: (x100 = 2)
-   ->  Hash
-         ->  Seq Scan on fkest f1
-               Filter: (x100 = 2)
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 --
 -- test that foreign key join estimation performs sanely for outer joins
 --
 begin;
 create table fkest (a int, b int, c int unique, primary key(a,b));
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  relation "root.public.fkest" already exists
 create table fkest1 (a int, b int, primary key(a,b));
 insert into fkest select x/10, x%10, x from generate_series(1,1000) x;
+ERROR:  unsupported binary operator: <int> / <int> (returning <int>)
 insert into fkest1 select x/10, x%10 from generate_series(1,1000) x;
+ERROR:  unsupported binary operator: <int> / <int> (returning <int>)
 alter table fkest1
   add constraint fkest1_a_b_fkey foreign key (a,b) references fkest;
+ERROR:  2 columns must reference exactly 2 columns in referenced table (found 1)
 analyze fkest;
 analyze fkest1;
 explain (costs off)
@@ -7432,22 +6305,13 @@
   left join fkest1 f2 on f.a = f2.a and f.b = f2.b
   left join fkest1 f3 on f.a = f3.a and f.b = f3.b
 where f.c = 1;
-                            QUERY PLAN                            
-------------------------------------------------------------------
- Nested Loop Left Join
-   ->  Nested Loop Left Join
-         ->  Nested Loop Left Join
-               ->  Index Scan using fkest_c_key on fkest f
-                     Index Cond: (c = 1)
-               ->  Index Only Scan using fkest1_pkey on fkest1 f1
-                     Index Cond: ((a = f.a) AND (b = f.b))
-         ->  Index Only Scan using fkest1_pkey on fkest1 f2
-               Index Cond: ((a = f.a) AND (b = f.b))
-   ->  Index Only Scan using fkest1_pkey on fkest1 f3
-         Index Cond: ((a = f.a) AND (b = f.b))
-(11 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 rollback;
+WARNING:  there is no transaction in progress
 --
 -- test planner's ability to mark joins as unique
 --
@@ -7463,179 +6327,85 @@
 -- ensure join is properly marked as unique
 explain (verbose, costs off)
 select * from j1 inner join j2 on j1.id = j2.id;
-            QUERY PLAN             
------------------------------------
- Hash Join
-   Output: j1.id, j2.id
-   Inner Unique: true
-   Hash Cond: (j1.id = j2.id)
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Hash
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure join is not unique when not an equi-join
 explain (verbose, costs off)
 select * from j1 inner join j2 on j1.id > j2.id;
-            QUERY PLAN             
------------------------------------
- Nested Loop
-   Output: j1.id, j2.id
-   Join Filter: (j1.id > j2.id)
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Materialize
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure non-unique rel is not chosen as inner
 explain (verbose, costs off)
 select * from j1 inner join j3 on j1.id = j3.id;
-            QUERY PLAN             
------------------------------------
- Hash Join
-   Output: j1.id, j3.id
-   Inner Unique: true
-   Hash Cond: (j3.id = j1.id)
-   ->  Seq Scan on public.j3
-         Output: j3.id
-   ->  Hash
-         Output: j1.id
-         ->  Seq Scan on public.j1
-               Output: j1.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure left join is marked as unique
 explain (verbose, costs off)
 select * from j1 left join j2 on j1.id = j2.id;
-            QUERY PLAN             
------------------------------------
- Hash Left Join
-   Output: j1.id, j2.id
-   Inner Unique: true
-   Hash Cond: (j1.id = j2.id)
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Hash
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure right join is marked as unique
 explain (verbose, costs off)
 select * from j1 right join j2 on j1.id = j2.id;
-            QUERY PLAN             
------------------------------------
- Hash Left Join
-   Output: j1.id, j2.id
-   Inner Unique: true
-   Hash Cond: (j2.id = j1.id)
-   ->  Seq Scan on public.j2
-         Output: j2.id
-   ->  Hash
-         Output: j1.id
-         ->  Seq Scan on public.j1
-               Output: j1.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure full join is marked as unique
 explain (verbose, costs off)
 select * from j1 full join j2 on j1.id = j2.id;
-            QUERY PLAN             
------------------------------------
- Hash Full Join
-   Output: j1.id, j2.id
-   Inner Unique: true
-   Hash Cond: (j1.id = j2.id)
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Hash
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- a clauseless (cross) join can't be unique
 explain (verbose, costs off)
 select * from j1 cross join j2;
-            QUERY PLAN             
------------------------------------
- Nested Loop
-   Output: j1.id, j2.id
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Materialize
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure a natural join is marked as unique
 explain (verbose, costs off)
 select * from j1 natural join j2;
-            QUERY PLAN             
------------------------------------
- Hash Join
-   Output: j1.id
-   Inner Unique: true
-   Hash Cond: (j1.id = j2.id)
-   ->  Seq Scan on public.j1
-         Output: j1.id
-   ->  Hash
-         Output: j2.id
-         ->  Seq Scan on public.j2
-               Output: j2.id
-(10 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure a distinct clause allows the inner to become unique
 explain (verbose, costs off)
 select * from j1
 inner join (select distinct id from j3) j3 on j1.id = j3.id;
-               QUERY PLAN                
------------------------------------------
- Nested Loop
-   Output: j1.id, j3.id
-   Inner Unique: true
-   Join Filter: (j1.id = j3.id)
-   ->  Unique
-         Output: j3.id
-         ->  Sort
-               Output: j3.id
-               Sort Key: j3.id
-               ->  Seq Scan on public.j3
-                     Output: j3.id
-   ->  Seq Scan on public.j1
-         Output: j1.id
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure group by clause allows the inner to become unique
 explain (verbose, costs off)
 select * from j1
 inner join (select id from j3 group by id) j3 on j1.id = j3.id;
-               QUERY PLAN                
------------------------------------------
- Nested Loop
-   Output: j1.id, j3.id
-   Inner Unique: true
-   Join Filter: (j1.id = j3.id)
-   ->  Group
-         Output: j3.id
-         Group Key: j3.id
-         ->  Sort
-               Output: j3.id
-               Sort Key: j3.id
-               ->  Seq Scan on public.j3
-                     Output: j3.id
-   ->  Seq Scan on public.j1
-         Output: j1.id
-(14 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 drop table j1;
 drop table j2;
 drop table j3;
@@ -7654,89 +6424,94 @@
 explain (verbose, costs off)
 select * from j1
 inner join j2 on j1.id1 = j2.id1;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop
-   Output: j1.id1, j1.id2, j2.id1, j2.id2
-   Join Filter: (j1.id1 = j2.id1)
-   ->  Seq Scan on public.j2
-         Output: j2.id1, j2.id2
-   ->  Seq Scan on public.j1
-         Output: j1.id1, j1.id2
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure proper unique detection with multiple join quals
 explain (verbose, costs off)
 select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2;
-                        QUERY PLAN                        
-----------------------------------------------------------
- Nested Loop
-   Output: j1.id1, j1.id2, j2.id1, j2.id2
-   Inner Unique: true
-   Join Filter: ((j1.id1 = j2.id1) AND (j1.id2 = j2.id2))
-   ->  Seq Scan on public.j2
-         Output: j2.id1, j2.id2
-   ->  Seq Scan on public.j1
-         Output: j1.id1, j1.id2
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ensure we don't detect the join to be unique when quals are not part of the
 -- join condition
 explain (verbose, costs off)
 select * from j1
 inner join j2 on j1.id1 = j2.id1 where j1.id2 = 1;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop
-   Output: j1.id1, j1.id2, j2.id1, j2.id2
-   Join Filter: (j1.id1 = j2.id1)
-   ->  Seq Scan on public.j1
-         Output: j1.id1, j1.id2
-         Filter: (j1.id2 = 1)
-   ->  Seq Scan on public.j2
-         Output: j2.id1, j2.id2
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- as above, but for left joins.
 explain (verbose, costs off)
 select * from j1
 left join j2 on j1.id1 = j2.id1 where j1.id2 = 1;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop Left Join
-   Output: j1.id1, j1.id2, j2.id1, j2.id2
-   Join Filter: (j1.id1 = j2.id1)
-   ->  Seq Scan on public.j1
-         Output: j1.id1, j1.id2
-         Filter: (j1.id2 = 1)
-   ->  Seq Scan on public.j2
-         Output: j2.id1, j2.id2
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 create unique index j1_id2_idx on j1(id2) where id2 is not null;
 -- ensure we don't use a partial unique index as unique proofs
 explain (verbose, costs off)
 select * from j1
 inner join j2 on j1.id2 = j2.id2;
-                QUERY PLAN                
-------------------------------------------
- Nested Loop
-   Output: j1.id1, j1.id2, j2.id1, j2.id2
-   Join Filter: (j2.id2 = j1.id2)
-   ->  Seq Scan on public.j2
-         Output: j2.id1, j2.id2
-   ->  Seq Scan on public.j1
-         Output: j1.id1, j1.id2
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 drop index j1_id2_idx;
+NOTICE:  the data for dropped indexes is reclaimed asynchronously
+HINT:  The reclamation delay can be customized in the zone configuration for the table.
 -- validate logic in merge joins which skips mark and restore.
 -- it should only do this if all quals which were used to detect the unique
 -- are present as join quals, and not plain quals.
 set enable_nestloop to 0;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_hashjoin to 0;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_sort to 0;
+ERROR:  unimplemented: the configuration setting "enable_sort" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- create indexes that will be preferred over the PKs to perform the join
 create index j1_id1_idx on j1 (id1) where id1 % 1000 = 1;
 create index j2_id1_idx on j2 (id1) where id1 % 1000 = 1;
@@ -7746,15 +6521,11 @@
 explain (costs off) select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1;
-               QUERY PLAN                
------------------------------------------
- Merge Join
-   Merge Cond: (j1.id1 = j2.id1)
-   Join Filter: (j2.id2 = j1.id2)
-   ->  Index Scan using j1_id1_idx on j1
-   ->  Index Scan using j2_id1_idx on j2
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off) select * from j1
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1;
@@ -7768,16 +6539,11 @@
 explain (costs off) select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]);
-                     QUERY PLAN                     
-----------------------------------------------------
- Merge Join
-   Merge Cond: (j1.id1 = j2.id1)
-   Join Filter: (j2.id2 = j1.id2)
-   ->  Index Scan using j1_id1_idx on j1
-   ->  Index Scan using j2_id1_idx on j2
-         Index Cond: (id1 = ANY ('{1}'::integer[]))
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off) select * from j1
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 = any (array[1]);
@@ -7791,17 +6557,11 @@
 explain (costs off) select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5]);
-                      QUERY PLAN                       
--------------------------------------------------------
- Merge Join
-   Merge Cond: (j1.id1 = j2.id1)
-   Join Filter: (j2.id2 = j1.id2)
-   ->  Index Scan using j1_id1_idx on j1
-   ->  Index Only Scan using j2_pkey on j2
-         Index Cond: (id1 >= ANY ('{1,5}'::integer[]))
-         Filter: ((id1 % 1000) = 1)
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off) select * from j1
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from j1
 inner join j2 on j1.id1 = j2.id1 and j1.id2 = j2.id2
 where j1.id1 % 1000 = 1 and j2.id1 % 1000 = 1 and j2.id1 >= any (array[1,5]);
@@ -7812,8 +6572,44 @@
 (2 rows)
 
 reset enable_nestloop;
+ERROR:  unimplemented: the configuration setting "enable_nestloop" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_sort;
+ERROR:  unimplemented: the configuration setting "enable_sort" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 drop table j1;
 drop table j2;
 drop table j3;
@@ -7824,31 +6620,19 @@
 where exists (select 1 from tenk1 t3
               where t3.thousand = t1.unique1 and t3.tenthous = t2.hundred)
       and t1.unique1 < 1;
-                                   QUERY PLAN                                    
----------------------------------------------------------------------------------
- Nested Loop
-   Output: t1.unique1, t2.hundred
-   ->  Hash Join
-         Output: t1.unique1, t3.tenthous
-         Hash Cond: (t3.thousand = t1.unique1)
-         ->  HashAggregate
-               Output: t3.thousand, t3.tenthous
-               Group Key: t3.thousand, t3.tenthous
-               ->  Index Only Scan using tenk1_thous_tenthous on public.tenk1 t3
-                     Output: t3.thousand, t3.tenthous
-         ->  Hash
-               Output: t1.unique1
-               ->  Index Only Scan using onek_unique1 on public.onek t1
-                     Output: t1.unique1
-                     Index Cond: (t1.unique1 < 1)
-   ->  Index Only Scan using tenk1_hundred on public.tenk1 t2
-         Output: t2.hundred
-         Index Cond: (t2.hundred = t3.tenthous)
-(18 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 -- ... unless it actually is unique
 create table j3 as select unique1, tenthous from onek;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 vacuum analyze j3;
+ERROR:  at or near "vacuum": syntax error
+DETAIL:  source SQL:
+vacuum analyze j3
+^
 create unique index on j3(unique1, tenthous);
 explain (verbose, costs off)
 select t1.unique1, t2.hundred
@@ -7856,21 +6640,9 @@
 where exists (select 1 from j3
               where j3.unique1 = t1.unique1 and j3.tenthous = t2.hundred)
       and t1.unique1 < 1;
-                               QUERY PLAN                               
-------------------------------------------------------------------------
- Nested Loop
-   Output: t1.unique1, t2.hundred
-   ->  Nested Loop
-         Output: t1.unique1, j3.tenthous
-         ->  Index Only Scan using onek_unique1 on public.onek t1
-               Output: t1.unique1
-               Index Cond: (t1.unique1 < 1)
-         ->  Index Only Scan using j3_unique1_tenthous_idx on public.j3
-               Output: j3.unique1, j3.tenthous
-               Index Cond: (j3.unique1 = t1.unique1)
-   ->  Index Only Scan using tenk1_hundred on public.tenk1 t2
-         Output: t2.hundred
-         Index Cond: (t2.hundred = j3.tenthous)
-(13 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 drop table j3;
