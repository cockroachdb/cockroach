diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/plpgsql.out --label=/mnt/data1/postgres/src/test/regress/results/plpgsql.out /mnt/data1/postgres/src/test/regress/expected/plpgsql.out /mnt/data1/postgres/src/test/regress/results/plpgsql.out
--- /mnt/data1/postgres/src/test/regress/expected/plpgsql.out
+++ /mnt/data1/postgres/src/test/regress/results/plpgsql.out
@@ -25,6 +25,7 @@
     comment	text
 );
 create unique index Room_rno on Room using btree (roomno bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table WSlot (
     slotname	char(20),
     roomno	char(8),
@@ -32,11 +33,13 @@
     backlink	char(20)
 );
 create unique index WSlot_name on WSlot using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table PField (
     name	text,
     comment	text
 );
 create unique index PField_name on PField using btree (name text_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table PSlot (
     slotname	char(20),
     pfname	text,
@@ -44,6 +47,7 @@
     backlink	char(20)
 );
 create unique index PSlot_name on PSlot using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table PLine (
     slotname	char(20),
     phonenumber	char(20),
@@ -51,12 +55,14 @@
     backlink	char(20)
 );
 create unique index PLine_name on PLine using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table Hub (
     name	char(14),
     comment	text,
     nslots	integer
 );
 create unique index Hub_name on Hub using btree (name bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table HSlot (
     slotname	char(20),
     hubname	char(14),
@@ -64,12 +70,15 @@
     slotlink	char(20)
 );
 create unique index HSlot_name on HSlot using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create index HSlot_hubname on HSlot using btree (hubname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table System (
     name	text,
     comment	text
 );
 create unique index System_name on System using btree (name text_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table IFace (
     slotname	char(20),
     sysname	text,
@@ -77,12 +86,14 @@
     slotlink	char(20)
 );
 create unique index IFace_name on IFace using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 create table PHone (
     slotname	char(20),
     comment	text,
     slotlink	char(20)
 );
 create unique index PHone_name on PHone using btree (slotname bpchar_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 -- ************************************************************
 -- *
 -- * Trigger procedures and functions for the patchfield
@@ -103,6 +114,10 @@
 ' language plpgsql;
 create trigger tg_room_au after update
     on Room for each row execute procedure tg_room_au();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * AFTER DELETE on Room
 -- *	- delete wall slots in this room
@@ -115,6 +130,10 @@
 ' language plpgsql;
 create trigger tg_room_ad after delete
     on Room for each row execute procedure tg_room_ad();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on WSlot
 -- *	- Check that room exists
@@ -127,8 +146,21 @@
     return new;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": at or near "from": syntax error
+DETAIL:  source SQL:
+SET ROW (count(*) = 0 from Room where roomno = new.roomno )
+                      ^
+--
+source SQL:
+begin
+    if count(*) = 0 from Room where roomno = new.roomno then
+        raise exception 'Room % does not exist', new.roomno;
+    end if;
+          ^
+HINT:  try \h SET SESSION
 create trigger tg_wslot_biu before insert or update
     on WSlot for each row execute procedure tg_wslot_biu();
+ERROR:  unknown function: tg_wslot_biu()
 -- ************************************************************
 -- * AFTER UPDATE on PField
 -- *	- Let PSlots of this field follow
@@ -143,6 +175,10 @@
 ' language plpgsql;
 create trigger tg_pfield_au after update
     on PField for each row execute procedure tg_pfield_au();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * AFTER DELETE on PField
 -- *	- Remove all slots of this patchfield
@@ -155,6 +191,10 @@
 ' language plpgsql;
 create trigger tg_pfield_ad after delete
     on PField for each row execute procedure tg_pfield_ad();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on PSlot
 -- *	- Ensure that our patchfield does exist
@@ -171,8 +211,26 @@
     return ps;
 end;
 $proc$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    pfrec	record;
+    ps          alias for new;
+                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 create trigger tg_pslot_biu before insert or update
     on PSlot for each row execute procedure tg_pslot_biu();
+ERROR:  unknown function: tg_pslot_biu()
 -- ************************************************************
 -- * AFTER UPDATE on System
 -- *	- If system name changes let interfaces follow
@@ -187,6 +245,10 @@
 ' language plpgsql;
 create trigger tg_system_au after update
     on System for each row execute procedure tg_system_au();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on IFace
 -- *	- set the slotname to IF.sysname.ifname
@@ -210,8 +272,12 @@
     return new;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 create trigger tg_iface_biu before insert or update
     on IFace for each row execute procedure tg_iface_biu();
+ERROR:  unknown function: tg_iface_biu()
 -- ************************************************************
 -- * AFTER INSERT or UPDATE or DELETE on Hub
 -- *	- insert/delete/rename slots as required
@@ -240,6 +306,7 @@
 ' language plpgsql;
 create trigger tg_hub_a after insert or update or delete
     on Hub for each row execute procedure tg_hub_a();
+ERROR:  unknown function: tg_hub_adjustslots()
 -- ************************************************************
 -- * Support function to add/remove slots of Hub
 -- ************************************************************
@@ -264,9 +331,26 @@
 ' language plpgsql;
 -- Test comments
 COMMENT ON FUNCTION tg_hub_adjustslots_wrong(bpchar, integer, integer) IS 'function with args';
-ERROR:  function tg_hub_adjustslots_wrong(character, integer, integer) does not exist
+ERROR:  at or near "tg_hub_adjustslots_wrong": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COMMENT ON FUNCTION tg_hub_adjustslots_wrong(bpchar, integer, integer) IS 'function with args'
+                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/17511/_version_
 COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS 'function with args';
+ERROR:  at or near "tg_hub_adjustslots": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS 'function with args'
+                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/17511/_version_
 COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS NULL;
+ERROR:  at or near "tg_hub_adjustslots": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COMMENT ON FUNCTION tg_hub_adjustslots(bpchar, integer, integer) IS NULL
+                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/17511/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on HSlot
 -- *	- prevent from manual manipulation
@@ -300,8 +384,18 @@
     return new;
 end;
 ' language plpgsql;
+ERROR:  at or near "type": syntax error: unable to parse type of variable declaration
+DETAIL:  source SQL:
+declare
+    sname	text;
+    xname	HSlot.slotname%TYPE;
+                         ^
+HINT:  you may have attempted to use %TYPE or %ROWTYPE syntax, which is unsupported.
+--
+See: https://go.crdb.dev/issue-v/114676/_version_
 create trigger tg_hslot_biu before insert or update
     on HSlot for each row execute procedure tg_hslot_biu();
+ERROR:  unknown function: tg_hslot_biu()
 -- ************************************************************
 -- * BEFORE DELETE on HSlot
 -- *	- prevent from manual manipulation
@@ -320,8 +414,12 @@
     raise exception ''no manual manipulation of HSlot'';
 end;
 ' language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 create trigger tg_hslot_bd before delete
     on HSlot for each row execute procedure tg_hslot_bd();
+ERROR:  unknown function: tg_hslot_bd()
 -- ************************************************************
 -- * BEFORE INSERT on all slots
 -- *	- Check name prefix
@@ -336,14 +434,29 @@
 ' language plpgsql;
 create trigger tg_chkslotname before insert
     on PSlot for each row execute procedure tg_chkslotname('PS');
+ERROR:  unimplemented: referencing the TG_ARGV trigger function parameter is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/135311/_version_
 create trigger tg_chkslotname before insert
     on WSlot for each row execute procedure tg_chkslotname('WS');
+ERROR:  unimplemented: referencing the TG_ARGV trigger function parameter is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/135311/_version_
 create trigger tg_chkslotname before insert
     on PLine for each row execute procedure tg_chkslotname('PL');
+ERROR:  unimplemented: referencing the TG_ARGV trigger function parameter is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/135311/_version_
 create trigger tg_chkslotname before insert
     on IFace for each row execute procedure tg_chkslotname('IF');
+ERROR:  unimplemented: referencing the TG_ARGV trigger function parameter is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/135311/_version_
 create trigger tg_chkslotname before insert
     on PHone for each row execute procedure tg_chkslotname('PH');
+ERROR:  unimplemented: referencing the TG_ARGV trigger function parameter is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/135311/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on all slots with slotlink
 -- *	- Set slotlink to empty string if NULL value given
@@ -358,14 +471,34 @@
 ' language plpgsql;
 create trigger tg_chkslotlink before insert or update
     on PSlot for each row execute procedure tg_chkslotlink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkslotlink before insert or update
     on WSlot for each row execute procedure tg_chkslotlink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkslotlink before insert or update
     on IFace for each row execute procedure tg_chkslotlink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkslotlink before insert or update
     on HSlot for each row execute procedure tg_chkslotlink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkslotlink before insert or update
     on PHone for each row execute procedure tg_chkslotlink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE INSERT or UPDATE on all slots with backlink
 -- *	- Set backlink to empty string if NULL value given
@@ -380,10 +513,22 @@
 ' language plpgsql;
 create trigger tg_chkbacklink before insert or update
     on PSlot for each row execute procedure tg_chkbacklink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkbacklink before insert or update
     on WSlot for each row execute procedure tg_chkbacklink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 create trigger tg_chkbacklink before insert or update
     on PLine for each row execute procedure tg_chkbacklink();
+ERROR:  no data source matches prefix: new in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on PSlot
 -- *	- do delete/insert instead of update if name changes
@@ -410,6 +555,10 @@
 ' language plpgsql;
 create trigger tg_pslot_bu before update
     on PSlot for each row execute procedure tg_pslot_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on WSlot
 -- *	- do delete/insert instead of update if name changes
@@ -436,6 +585,10 @@
 ' language plpgsql;
 create trigger tg_wslot_bu before update
     on WSlot for each row execute procedure tg_Wslot_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on PLine
 -- *	- do delete/insert instead of update if name changes
@@ -462,6 +615,10 @@
 ' language plpgsql;
 create trigger tg_pline_bu before update
     on PLine for each row execute procedure tg_pline_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on IFace
 -- *	- do delete/insert instead of update if name changes
@@ -488,6 +645,10 @@
 ' language plpgsql;
 create trigger tg_iface_bu before update
     on IFace for each row execute procedure tg_iface_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on HSlot
 -- *	- do delete/insert instead of update if name changes
@@ -514,6 +675,10 @@
 ' language plpgsql;
 create trigger tg_hslot_bu before update
     on HSlot for each row execute procedure tg_hslot_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * BEFORE UPDATE on PHone
 -- *	- do delete/insert instead of update if name changes
@@ -538,6 +703,10 @@
 ' language plpgsql;
 create trigger tg_phone_bu before update
     on PHone for each row execute procedure tg_phone_bu();
+ERROR:  no data source matches prefix: old in this context
+HINT:  to access a field of a composite-typed column or variable, surround the column/variable name in parentheses: (varName).fieldName
+--
+See: https://go.crdb.dev/issue-v/114687/_version_
 -- ************************************************************
 -- * AFTER INSERT or UPDATE or DELETE on slot with backlink
 -- *	- Ensure that the opponent correctly points back to us
@@ -577,10 +746,13 @@
 ' language plpgsql;
 create trigger tg_backlink_a after insert or update or delete
     on PSlot for each row execute procedure tg_backlink_a('PS');
+ERROR:  unknown function: tg_backlink_unset()
 create trigger tg_backlink_a after insert or update or delete
     on WSlot for each row execute procedure tg_backlink_a('WS');
+ERROR:  unknown function: tg_backlink_unset()
 create trigger tg_backlink_a after insert or update or delete
     on PLine for each row execute procedure tg_backlink_a('PL');
+ERROR:  unknown function: tg_backlink_unset()
 -- ************************************************************
 -- * Support function to set the opponents backlink field
 -- * if it does not already point to the requested slot
@@ -635,6 +807,9 @@
     raise exception ''illegal backlink beginning with %'', mytype;
 end;
 ' language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 -- ************************************************************
 -- * Support function to clear out the backlink field if
 -- * it still points to specific slot
@@ -680,6 +855,11 @@
     end if;
 end
 ' language plpgsql;
+ERROR:  at or near "$": syntax error
+DETAIL:  source SQL:
+declare
+    myname	alias for $1;
+                     ^
 -- ************************************************************
 -- * AFTER INSERT or UPDATE or DELETE on slot with slotlink
 -- *	- Ensure that the opponent correctly points back to us
@@ -719,14 +899,19 @@
 ' language plpgsql;
 create trigger tg_slotlink_a after insert or update or delete
     on PSlot for each row execute procedure tg_slotlink_a('PS');
+ERROR:  unknown function: tg_slotlink_unset()
 create trigger tg_slotlink_a after insert or update or delete
     on WSlot for each row execute procedure tg_slotlink_a('WS');
+ERROR:  unknown function: tg_slotlink_unset()
 create trigger tg_slotlink_a after insert or update or delete
     on IFace for each row execute procedure tg_slotlink_a('IF');
+ERROR:  unknown function: tg_slotlink_unset()
 create trigger tg_slotlink_a after insert or update or delete
     on HSlot for each row execute procedure tg_slotlink_a('HS');
+ERROR:  unknown function: tg_slotlink_unset()
 create trigger tg_slotlink_a after insert or update or delete
     on PHone for each row execute procedure tg_slotlink_a('PH');
+ERROR:  unknown function: tg_slotlink_unset()
 -- ************************************************************
 -- * Support function to set the opponents slotlink field
 -- * if it does not already point to the requested slot
@@ -811,6 +996,11 @@
     raise exception ''illegal slotlink beginning with %'', mytype;
 end;
 ' language plpgsql;
+ERROR:  at or near "$": syntax error
+DETAIL:  source SQL:
+declare
+    myname	alias for $1;
+                     ^
 -- ************************************************************
 -- * Support function to clear out the slotlink field if
 -- * it still points to specific slot
@@ -876,6 +1066,11 @@
     end if;
 end;
 ' language plpgsql;
+ERROR:  at or near "$": syntax error
+DETAIL:  source SQL:
+declare
+    myname	alias for $1;
+                     ^
 -- ************************************************************
 -- * Describe the backside of a patchfield slot
 -- ************************************************************
@@ -919,6 +1114,9 @@
     return rec.backlink;
 end;
 ' language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 -- ************************************************************
 -- * Describe the front of a patchfield slot
 -- ************************************************************
@@ -953,54 +1151,83 @@
     return psrec.slotlink;
 end;
 ' language plpgsql;
--- ************************************************************
--- * Describe the front of a wall connector slot
--- ************************************************************
-create function wslot_slotlink_view(bpchar)
-returns text as '
+ERROR:  at or near ";": at or near "from": syntax error
+DETAIL:  source SQL:
+SET ROW (comment from Hub H, HSlot HS
+                 ^
+--
+source SQL:
 declare
-    rec		record;
+    psrec	record;
     sltype	char(2);
     retval	text;
 begin
-    select into rec * from WSlot where slotname = $1;
+    select into psrec * from PSlot where slotname = $1;
     if not found then
-        return '''';
-    end if;
-    if rec.slotlink = '''' then
-        return ''-'';
+        return '';
     end if;
-    sltype := substr(rec.slotlink, 1, 2);
-    if sltype = ''PH'' then
-        select into rec * from PHone where slotname = rec.slotlink;
-	retval := ''Phone '' || trim(rec.slotname);
-	if rec.comment != '''' then
-	    retval := retval || '' ('';
-	    retval := retval || rec.comment;
-	    retval := retval || '')'';
-	end if;
-	return retval;
+    if psrec.slotlink = '' then
+        return '-';
     end if;
-    if sltype = ''IF'' then
-	declare
-	    syrow	System%RowType;
-	    ifrow	IFace%ROWTYPE;
-        begin
-	    select into ifrow * from IFace where slotname = rec.slotlink;
-	    select into syrow * from System where name = ifrow.sysname;
-	    retval := syrow.name || '' IF '';
-	    retval := retval || ifrow.ifname;
-	    if syrow.comment != '''' then
-	        retval := retval || '' ('';
-		retval := retval || syrow.comment;
-		retval := retval || '')'';
-	    end if;
-	    return retval;
-	end;
+    sltype := substr(psrec.slotlink, 1, 2);
+    if sltype = 'PS' then
+	retval := trim(psrec.slotlink) || ' -> ';
+	return retval || pslot_backlink_view(psrec.slotlink);
     end if;
-    return rec.slotlink;
-end;
-' language plpgsql;
+    if sltype = 'HS' then
+        retval := comment from Hub H, HSlot HS
+			where HS.slotname = psrec.slotlink
+			  and H.name = HS.hubname;
+                            ^
+HINT:  try \h SET SESSION
+-- ************************************************************
+-- * Describe the front of a wall connector slot
+-- ************************************************************
+-- create function wslot_slotlink_view(bpchar)
+-- returns text as '
+-- declare
+--     rec		record;
+--     sltype	char(2);
+--     retval	text;
+-- begin
+--     select into rec * from WSlot where slotname = $1;
+--     if not found then
+--         return '''';
+--     end if;
+--     if rec.slotlink = '''' then
+--         return ''-'';
+--     end if;
+--     sltype := substr(rec.slotlink, 1, 2);
+--     if sltype = ''PH'' then
+--         select into rec * from PHone where slotname = rec.slotlink;
+-- 	retval := ''Phone '' || trim(rec.slotname);
+-- 	if rec.comment != '''' then
+-- 	    retval := retval || '' ('';
+-- 	    retval := retval || rec.comment;
+-- 	    retval := retval || '')'';
+-- 	end if;
+-- 	return retval;
+--     end if;
+--     if sltype = ''IF'' then
+-- 	declare
+-- 	    syrow	System%RowType;
+-- 	    ifrow	IFace%ROWTYPE;
+--         begin
+-- 	    select into ifrow * from IFace where slotname = rec.slotlink;
+-- 	    select into syrow * from System where name = ifrow.sysname;
+-- 	    retval := syrow.name || '' IF '';
+-- 	    retval := retval || ifrow.ifname;
+-- 	    if syrow.comment != '''' then
+-- 	        retval := retval || '' ('';
+-- 		retval := retval || syrow.comment;
+-- 		retval := retval || '')'';
+-- 	    end if;
+-- 	    return retval;
+-- 	end;
+--     end if;
+--     return rec.slotlink;
+-- end;
+-- ' language plpgsql;
 -- ************************************************************
 -- * View of a patchfield describing backside and patches
 -- ************************************************************
@@ -1008,6 +1235,8 @@
 	pslot_backlink_view(PF.slotname) as backside,
 	pslot_slotlink_view(PF.slotname) as patch
     from PSlot PF;
+ERROR:  unknown function: pslot_backlink_view()
+HINT:  There is probably a typo in function name. Or the intention was to use a user-defined function in the view query, which is currently not supported.
 --
 -- First we build the house - so we create the rooms
 --
@@ -1146,8 +1375,8 @@
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
  WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      |                     
  WS.001.3a            | 001      |                      |                     
@@ -1169,9 +1398,9 @@
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
+ WS.001.1a            | 001      |                      |                     
  WS.001.1b            | 001      |                      |                     
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      |                     
  WS.001.3a            | 001      |                      |                     
  WS.001.3b            | 001      |                      |                     
@@ -1192,9 +1421,9 @@
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a2          
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      |                     
  WS.001.3a            | 001      |                      |                     
  WS.001.3b            | 001      |                      |                     
@@ -1221,9 +1450,9 @@
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a2          
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      | PS.base.a4          
  WS.001.3a            | 001      |                      | PS.base.a6          
  WS.001.3b            | 001      |                      |                     
@@ -1235,20 +1464,20 @@
  PS.base.a1           | PF0_1  |                      | WS.001.1a           
  PS.base.a2           | PF0_1  |                      | WS.001.1b           
  PS.base.a3           | PF0_1  |                      | WS.001.2a           
- PS.base.a4           | PF0_1  |                      | WS.001.2b           
+ PS.base.a4           | PF0_1  |                      |                     
  PS.base.a5           | PF0_1  |                      |                     
- PS.base.a6           | PF0_1  |                      | WS.001.3a           
+ PS.base.a6           | PF0_1  |                      |                     
 (6 rows)
 
 update WSlot set backlink = 'PS.base.a6' where slotname = 'WS.001.3b';
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a2          
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      | PS.base.a4          
- WS.001.3a            | 001      |                      |                     
+ WS.001.3a            | 001      |                      | PS.base.a6          
  WS.001.3b            | 001      |                      | PS.base.a6          
 (6 rows)
 
@@ -1258,18 +1487,18 @@
  PS.base.a1           | PF0_1  |                      | WS.001.1a           
  PS.base.a2           | PF0_1  |                      | WS.001.1b           
  PS.base.a3           | PF0_1  |                      | WS.001.2a           
- PS.base.a4           | PF0_1  |                      | WS.001.2b           
+ PS.base.a4           | PF0_1  |                      |                     
  PS.base.a5           | PF0_1  |                      |                     
- PS.base.a6           | PF0_1  |                      | WS.001.3b           
+ PS.base.a6           | PF0_1  |                      |                     
 (6 rows)
 
 update WSlot set backlink = 'PS.base.a5' where slotname = 'WS.001.3a';
 select * from WSlot where roomno = '001' order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a2          
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      | PS.base.a4          
  WS.001.3a            | 001      |                      | PS.base.a5          
  WS.001.3b            | 001      |                      | PS.base.a6          
@@ -1281,9 +1510,9 @@
  PS.base.a1           | PF0_1  |                      | WS.001.1a           
  PS.base.a2           | PF0_1  |                      | WS.001.1b           
  PS.base.a3           | PF0_1  |                      | WS.001.2a           
- PS.base.a4           | PF0_1  |                      | WS.001.2b           
- PS.base.a5           | PF0_1  |                      | WS.001.3a           
- PS.base.a6           | PF0_1  |                      | WS.001.3b           
+ PS.base.a4           | PF0_1  |                      |                     
+ PS.base.a5           | PF0_1  |                      |                     
+ PS.base.a6           | PF0_1  |                      |                     
 (6 rows)
 
 insert into PField values ('PF1_2', 'Phonelines first floor');
@@ -1309,9 +1538,9 @@
  PS.base.a1           | PF0_1  |                      | WS.001.1a           
  PS.base.a2           | PF0_1  |                      | WS.001.1b           
  PS.base.a3           | PF0_1  |                      | WS.001.2a           
- PS.base.a4           | PF0_1  |                      | WS.001.2b           
- PS.base.a5           | PF0_1  |                      | WS.001.3a           
- PS.base.a6           | PF0_1  |                      | WS.001.3b           
+ PS.base.a4           | PF0_1  |                      |                     
+ PS.base.a5           | PF0_1  |                      |                     
+ PS.base.a6           | PF0_1  |                      |                     
  PS.base.b1           | PF0_1  |                      | WS.002.1a           
  PS.base.b2           | PF0_1  |                      | WS.002.1b           
  PS.base.b3           | PF0_1  |                      | WS.002.2a           
@@ -1324,18 +1553,18 @@
  PS.base.c4           | PF0_1  |                      | WS.003.2b           
  PS.base.c5           | PF0_1  |                      | WS.003.3a           
  PS.base.c6           | PF0_1  |                      | WS.003.3b           
- PS.base.ta1          | PF0_2  |                      |                     
- PS.base.ta2          | PF0_2  |                      |                     
- PS.base.ta3          | PF0_2  |                      |                     
- PS.base.ta4          | PF0_2  |                      |                     
- PS.base.ta5          | PF0_2  |                      |                     
- PS.base.ta6          | PF0_2  |                      |                     
- PS.base.tb1          | PF0_2  |                      |                     
- PS.base.tb2          | PF0_2  |                      |                     
- PS.base.tb3          | PF0_2  |                      |                     
- PS.base.tb4          | PF0_2  |                      |                     
- PS.base.tb5          | PF0_2  |                      |                     
- PS.base.tb6          | PF0_2  |                      |                     
+ PS.base.ta1          | PF0_X  |                      |                     
+ PS.base.ta2          | PF0_X  |                      |                     
+ PS.base.ta3          | PF0_X  |                      |                     
+ PS.base.ta4          | PF0_X  |                      |                     
+ PS.base.ta5          | PF0_X  |                      |                     
+ PS.base.ta6          | PF0_X  |                      |                     
+ PS.base.tb1          | PF0_X  |                      |                     
+ PS.base.tb2          | PF0_X  |                      |                     
+ PS.base.tb3          | PF0_X  |                      |                     
+ PS.base.tb4          | PF0_X  |                      |                     
+ PS.base.tb5          | PF0_X  |                      |                     
+ PS.base.tb6          | PF0_X  |                      |                     
  PS.first.a1          | PF1_1  |                      | WS.101.1a           
  PS.first.a2          | PF1_1  |                      | WS.101.1b           
  PS.first.a3          | PF1_1  |                      | WS.101.2a           
@@ -1377,48 +1606,48 @@
 select * from WSlot order by slotname;
        slotname       |  roomno  |       slotlink       |       backlink       
 ----------------------+----------+----------------------+----------------------
- WS.001.1a            | 001      |                      | PS.base.a1          
- WS.001.1b            | 001      |                      | PS.base.a2          
- WS.001.2a            | 001      |                      | PS.base.a3          
+ WS.001.1a            | 001      |                      |                     
+ WS.001.1b            | 001      |                      |                     
+ WS.001.2a            | 001      |                      |                     
  WS.001.2b            | 001      |                      | PS.base.a4          
  WS.001.3a            | 001      |                      | PS.base.a5          
  WS.001.3b            | 001      |                      | PS.base.a6          
- WS.002.1a            | 002      |                      | PS.base.b1          
- WS.002.1b            | 002      |                      | PS.base.b2          
- WS.002.2a            | 002      |                      | PS.base.b3          
- WS.002.2b            | 002      |                      | PS.base.b4          
- WS.002.3a            | 002      |                      | PS.base.b5          
- WS.002.3b            | 002      |                      | PS.base.b6          
- WS.003.1a            | 003      |                      | PS.base.c1          
- WS.003.1b            | 003      |                      | PS.base.c2          
- WS.003.2a            | 003      |                      | PS.base.c3          
- WS.003.2b            | 003      |                      | PS.base.c4          
- WS.003.3a            | 003      |                      | PS.base.c5          
- WS.003.3b            | 003      |                      | PS.base.c6          
- WS.101.1a            | 101      |                      | PS.first.a1         
- WS.101.1b            | 101      |                      | PS.first.a2         
- WS.101.2a            | 101      |                      | PS.first.a3         
- WS.101.2b            | 101      |                      | PS.first.a4         
- WS.101.3a            | 101      |                      | PS.first.a5         
- WS.101.3b            | 101      |                      | PS.first.a6         
- WS.102.1a            | 102      |                      | PS.first.b1         
- WS.102.1b            | 102      |                      | PS.first.b2         
- WS.102.2a            | 102      |                      | PS.first.b3         
- WS.102.2b            | 102      |                      | PS.first.b4         
- WS.102.3a            | 102      |                      | PS.first.b5         
- WS.102.3b            | 102      |                      | PS.first.b6         
- WS.105.1a            | 105      |                      | PS.first.c1         
- WS.105.1b            | 105      |                      | PS.first.c2         
- WS.105.2a            | 105      |                      | PS.first.c3         
- WS.105.2b            | 105      |                      | PS.first.c4         
- WS.105.3a            | 105      |                      | PS.first.c5         
- WS.105.3b            | 105      |                      | PS.first.c6         
- WS.106.1a            | 106      |                      | PS.first.d1         
- WS.106.1b            | 106      |                      | PS.first.d2         
- WS.106.2a            | 106      |                      | PS.first.d3         
- WS.106.2b            | 106      |                      | PS.first.d4         
- WS.106.3a            | 106      |                      | PS.first.d5         
- WS.106.3b            | 106      |                      | PS.first.d6         
+ WS.002.1a            | 002      |                      |                     
+ WS.002.1b            | 002      |                      |                     
+ WS.002.2a            | 002      |                      |                     
+ WS.002.2b            | 002      |                      |                     
+ WS.002.3a            | 002      |                      |                     
+ WS.002.3b            | 002      |                      |                     
+ WS.003.1a            | 003      |                      |                     
+ WS.003.1b            | 003      |                      |                     
+ WS.003.2a            | 003      |                      |                     
+ WS.003.2b            | 003      |                      |                     
+ WS.003.3a            | 003      |                      |                     
+ WS.003.3b            | 003      |                      |                     
+ WS.101.1a            | 101      |                      |                     
+ WS.101.1b            | 101      |                      |                     
+ WS.101.2a            | 101      |                      |                     
+ WS.101.2b            | 101      |                      |                     
+ WS.101.3a            | 101      |                      |                     
+ WS.101.3b            | 101      |                      |                     
+ WS.102.1a            | 102      |                      |                     
+ WS.102.1b            | 102      |                      |                     
+ WS.102.2a            | 102      |                      |                     
+ WS.102.2b            | 102      |                      |                     
+ WS.102.3a            | 102      |                      |                     
+ WS.102.3b            | 102      |                      |                     
+ WS.105.1a            | 105      |                      |                     
+ WS.105.1b            | 105      |                      |                     
+ WS.105.2a            | 105      |                      |                     
+ WS.105.2b            | 105      |                      |                     
+ WS.105.3a            | 105      |                      |                     
+ WS.105.3b            | 105      |                      |                     
+ WS.106.1a            | 106      |                      |                     
+ WS.106.1b            | 106      |                      |                     
+ WS.106.2a            | 106      |                      |                     
+ WS.106.2b            | 106      |                      |                     
+ WS.106.3a            | 106      |                      |                     
+ WS.106.3b            | 106      |                      |                     
 (42 rows)
 
 --
@@ -1471,82 +1700,22 @@
 -- Now we take a look at the patchfield
 --
 select * from PField_v1 where pfname = 'PF0_1' order by slotname;
- pfname |       slotname       |                         backside                         |                     patch                     
---------+----------------------+----------------------------------------------------------+-----------------------------------------------
- PF0_1  | PS.base.a1           | WS.001.1a in room 001 -> Phone PH.hc001 (Hicom standard) | PS.base.ta1 -> Phone line -0 (Central call)
- PF0_1  | PS.base.a2           | WS.001.1b in room 001 -> -                               | -
- PF0_1  | PS.base.a3           | WS.001.2a in room 001 -> Phone PH.fax001 (Canon fax)     | PS.base.ta2 -> Phone line -501 (Fax entrance)
- PF0_1  | PS.base.a4           | WS.001.2b in room 001 -> -                               | -
- PF0_1  | PS.base.a5           | WS.001.3a in room 001 -> -                               | -
- PF0_1  | PS.base.a6           | WS.001.3b in room 001 -> -                               | -
- PF0_1  | PS.base.b1           | WS.002.1a in room 002 -> Phone PH.hc002 (Hicom standard) | PS.base.ta5 -> Phone line -103
- PF0_1  | PS.base.b2           | WS.002.1b in room 002 -> orion IF eth0 (PC)              | Patchfield PF0_1 hub slot 1
- PF0_1  | PS.base.b3           | WS.002.2a in room 002 -> Phone PH.hc003 (Hicom standard) | PS.base.tb2 -> Phone line -106
- PF0_1  | PS.base.b4           | WS.002.2b in room 002 -> -                               | -
- PF0_1  | PS.base.b5           | WS.002.3a in room 002 -> -                               | -
- PF0_1  | PS.base.b6           | WS.002.3b in room 002 -> -                               | -
- PF0_1  | PS.base.c1           | WS.003.1a in room 003 -> -                               | -
- PF0_1  | PS.base.c2           | WS.003.1b in room 003 -> -                               | -
- PF0_1  | PS.base.c3           | WS.003.2a in room 003 -> -                               | -
- PF0_1  | PS.base.c4           | WS.003.2b in room 003 -> -                               | -
- PF0_1  | PS.base.c5           | WS.003.3a in room 003 -> -                               | -
- PF0_1  | PS.base.c6           | WS.003.3b in room 003 -> -                               | -
-(18 rows)
-
+ERROR:  relation "pfield_v1" does not exist
 select * from PField_v1 where pfname = 'PF0_2' order by slotname;
- pfname |       slotname       |            backside            |                                 patch                                  
---------+----------------------+--------------------------------+------------------------------------------------------------------------
- PF0_2  | PS.base.ta1          | Phone line -0 (Central call)   | PS.base.a1 -> WS.001.1a in room 001 -> Phone PH.hc001 (Hicom standard)
- PF0_2  | PS.base.ta2          | Phone line -501 (Fax entrance) | PS.base.a3 -> WS.001.2a in room 001 -> Phone PH.fax001 (Canon fax)
- PF0_2  | PS.base.ta3          | Phone line -102                | -
- PF0_2  | PS.base.ta4          | -                              | -
- PF0_2  | PS.base.ta5          | Phone line -103                | PS.base.b1 -> WS.002.1a in room 002 -> Phone PH.hc002 (Hicom standard)
- PF0_2  | PS.base.ta6          | Phone line -104                | -
- PF0_2  | PS.base.tb1          | -                              | -
- PF0_2  | PS.base.tb2          | Phone line -106                | PS.base.b3 -> WS.002.2a in room 002 -> Phone PH.hc003 (Hicom standard)
- PF0_2  | PS.base.tb3          | Phone line -108                | -
- PF0_2  | PS.base.tb4          | Phone line -109                | -
- PF0_2  | PS.base.tb5          | Phone line -121                | -
- PF0_2  | PS.base.tb6          | Phone line -122                | -
-(12 rows)
-
+ERROR:  relation "pfield_v1" does not exist
 --
 -- Finally we want errors
 --
 insert into PField values ('PF1_1', 'should fail due to unique index');
-ERROR:  duplicate key value violates unique constraint "pfield_name"
-DETAIL:  Key (name)=(PF1_1) already exists.
 update PSlot set backlink = 'WS.not.there' where slotname = 'PS.base.a1';
-ERROR:  WS.not.there         does not exist
-CONTEXT:  PL/pgSQL function tg_backlink_set(character,character) line 30 at RAISE
-PL/pgSQL function tg_backlink_a() line 17 at assignment
 update PSlot set backlink = 'XX.illegal' where slotname = 'PS.base.a1';
-ERROR:  illegal backlink beginning with XX
-CONTEXT:  PL/pgSQL function tg_backlink_set(character,character) line 47 at RAISE
-PL/pgSQL function tg_backlink_a() line 17 at assignment
 update PSlot set slotlink = 'PS.not.there' where slotname = 'PS.base.a1';
-ERROR:  PS.not.there         does not exist
-CONTEXT:  PL/pgSQL function tg_slotlink_set(character,character) line 30 at RAISE
-PL/pgSQL function tg_slotlink_a() line 17 at assignment
 update PSlot set slotlink = 'XX.illegal' where slotname = 'PS.base.a1';
-ERROR:  illegal slotlink beginning with XX
-CONTEXT:  PL/pgSQL function tg_slotlink_set(character,character) line 77 at RAISE
-PL/pgSQL function tg_slotlink_a() line 17 at assignment
 insert into HSlot values ('HS', 'base.hub1', 1, '');
-ERROR:  duplicate key value violates unique constraint "hslot_name"
-DETAIL:  Key (slotname)=(HS.base.hub1.1      ) already exists.
 insert into HSlot values ('HS', 'base.hub1', 20, '');
-ERROR:  no manual manipulation of HSlot
-CONTEXT:  PL/pgSQL function tg_hslot_biu() line 12 at RAISE
 delete from HSlot;
-ERROR:  no manual manipulation of HSlot
-CONTEXT:  PL/pgSQL function tg_hslot_bd() line 12 at RAISE
 insert into IFace values ('IF', 'notthere', 'eth0', '');
-ERROR:  system "notthere" does not exist
-CONTEXT:  PL/pgSQL function tg_iface_biu() line 8 at RAISE
 insert into IFace values ('IF', 'orion', 'ethernet_interface_name_too_long', '');
-ERROR:  IFace slotname "IF.orion.ethernet_interface_name_too_long" too long (20 char max)
-CONTEXT:  PL/pgSQL function tg_iface_biu() line 14 at RAISE
 --
 -- The following tests are unrelated to the scenario outlined above;
 -- they merely exercise specific parts of PL/pgSQL
@@ -1564,12 +1733,9 @@
     END IF;
     RETURN rslt;
 END;' LANGUAGE plpgsql;
+ERROR:  unknown function: recursion_test()
 SELECT recursion_test(4,3);
- recursion_test 
-----------------
- 4,3,2,1,3
-(1 row)
-
+ERROR:  unknown function: recursion_test()
 --
 -- Test the FOUND magic variable
 --
@@ -1609,22 +1775,13 @@
   end if;
   return true;
   end;' language plpgsql;
+ERROR:  column "found" does not exist
 select test_found();
- test_found 
-------------
- t
-(1 row)
-
+ERROR:  unknown function: test_found()
 select * from found_test_tbl;
-  a  
------
-   2
- 100
-   3
-   4
-   5
-   6
-(6 rows)
+ a 
+---
+(0 rows)
 
 --
 -- Test set-returning functions for PL/pgSQL
@@ -1638,17 +1795,11 @@
 	END LOOP;
 	RETURN;
 END;' language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from test_table_func_rec();
-  a  
------
-   2
- 100
-   3
-   4
-   5
-   6
-(6 rows)
-
+ERROR:  unknown function: test_table_func_rec()
 create function test_table_func_row() returns setof found_test_tbl as '
 DECLARE
 	row found_test_tbl%ROWTYPE;
@@ -1658,17 +1809,11 @@
 	END LOOP;
 	RETURN;
 END;' language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from test_table_func_row();
-  a  
------
-   2
- 100
-   3
-   4
-   5
-   6
-(6 rows)
-
+ERROR:  unknown function: test_table_func_row()
 create function test_ret_set_scalar(int,int) returns setof int as '
 DECLARE
 	i int;
@@ -1678,21 +1823,11 @@
 	END LOOP;
 	RETURN;
 END;' language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from test_ret_set_scalar(1,10);
- test_ret_set_scalar 
----------------------
-                   2
-                   3
-                   4
-                   5
-                   6
-                   7
-                   8
-                   9
-                  10
-                  11
-(10 rows)
-
+ERROR:  unknown function: test_ret_set_scalar()
 create function test_ret_set_rec_dyn(int) returns setof record as '
 DECLARE
 	retval RECORD;
@@ -1708,20 +1843,21 @@
 	END IF;
 	RETURN;
 END;' language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 SELECT * FROM test_ret_set_rec_dyn(1500) AS (a int, b int, c int);
- a | b  | c  
----+----+----
- 5 | 10 | 15
- 5 | 10 | 15
-(2 rows)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM test_ret_set_rec_dyn(1500) AS (a int, b int, c int)
+                                            ^
+HINT:  try \h <SOURCE>
 SELECT * FROM test_ret_set_rec_dyn(5) AS (a int, b numeric, c text);
- a  | b |  c  
-----+---+-----
- 50 | 5 | xxx
- 50 | 5 | xxx
-(2 rows)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM test_ret_set_rec_dyn(5) AS (a int, b numeric, c text)
+                                         ^
+HINT:  try \h <SOURCE>
 create function test_ret_rec_dyn(int) returns record as '
 DECLARE
 	retval RECORD;
@@ -1734,18 +1870,21 @@
 		RETURN retval;
 	END IF;
 END;' language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 SELECT * FROM test_ret_rec_dyn(1500) AS (a int, b int, c int);
- a | b  | c  
----+----+----
- 5 | 10 | 15
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM test_ret_rec_dyn(1500) AS (a int, b int, c int)
+                                        ^
+HINT:  try \h <SOURCE>
 SELECT * FROM test_ret_rec_dyn(5) AS (a int, b numeric, c text);
- a  | b |  c  
-----+---+-----
- 50 | 5 | xxx
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+SELECT * FROM test_ret_rec_dyn(5) AS (a int, b numeric, c text)
+                                     ^
+HINT:  try \h <SOURCE>
 --
 -- Test some simple polymorphism cases.
 --
@@ -1753,31 +1892,37 @@
 begin
   return x + 1;
 end$$ language plpgsql;
-select f1(42) as int, f1(4.5) as num;
- int | num 
------+-----
-  43 | 5.5
-(1 row)
+ERROR:  ambiguous binary operator: <anyelement> + <int>
+HINT:  candidates are:
++(int, int) -> int
++(inet, int) -> inet
++(decimal, int) -> decimal
++(date, int) -> date
 
+select f1(42) as int, f1(4.5) as num;
+ERROR:  unknown function: f1()
 select f1(point(3,4));  -- fail for lack of + operator
-ERROR:  operator does not exist: point + integer
-LINE 1: x + 1
-          ^
-HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
-QUERY:  x + 1
-CONTEXT:  PL/pgSQL function f1(anyelement) line 3 at RETURN
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select f1(point(3,4))
+               ^
 drop function f1(x anyelement);
+ERROR:  unknown function: f1()
 create function f1(x anyelement) returns anyarray as $$
 begin
   return array[x + 1, x + 2];
 end$$ language plpgsql;
-select f1(42) as int, f1(4.5) as num;
-   int   |    num    
----------+-----------
- {43,44} | {5.5,6.5}
-(1 row)
+ERROR:  ambiguous binary operator: <anyelement> + <int>
+HINT:  candidates are:
++(int, int) -> int
++(inet, int) -> inet
++(decimal, int) -> decimal
++(date, int) -> date
 
+select f1(42) as int, f1(4.5) as num;
+ERROR:  unknown function: f1()
 drop function f1(x anyelement);
+ERROR:  unknown function: f1()
 create function f1(x anyarray) returns anyelement as $$
 begin
   return x[1];
@@ -1789,7 +1934,10 @@
 (1 row)
 
 select f1(stavalues1) from pg_statistic;  -- fail, can't infer element type
-ERROR:  cannot determine element type of "anyarray" argument
+ f1 
+----
+(0 rows)
+
 drop function f1(x anyarray);
 create function f1(x anyarray) returns anyarray as $$
 begin
@@ -1802,72 +1950,61 @@
 (1 row)
 
 select f1(stavalues1) from pg_statistic;  -- fail, can't infer element type
-ERROR:  PL/pgSQL functions cannot accept type anyarray
-CONTEXT:  compilation of PL/pgSQL function "f1" near line 1
+ f1 
+----
+(0 rows)
+
 drop function f1(x anyarray);
 -- fail, can't infer type:
 create function f1(x anyelement) returns anyrange as $$
 begin
   return array[x + 1, x + 2];
 end$$ language plpgsql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anyrange requires at least one input of type anyrange or anymultirange.
+ERROR:  type "anyrange" does not exist
 create function f1(x anyrange) returns anyarray as $$
 begin
   return array[lower(x), upper(x)];
 end$$ language plpgsql;
+ERROR:  type "anyrange" does not exist
 select f1(int4range(42, 49)) as int, f1(float8range(4.5, 7.8)) as num;
-   int   |    num    
----------+-----------
- {42,49} | {4.5,7.8}
-(1 row)
-
+ERROR:  unknown function: f1()
 drop function f1(x anyrange);
+ERROR:  unknown function: f1()
 create function f1(x anycompatible, y anycompatible) returns anycompatiblearray as $$
 begin
   return array[x, y];
 end$$ language plpgsql;
+ERROR:  type "anycompatible" does not exist
 select f1(2, 4) as int, f1(2, 4.5) as num;
-  int  |   num   
--------+---------
- {2,4} | {2,4.5}
-(1 row)
-
+ERROR:  unknown function: f1()
 drop function f1(x anycompatible, y anycompatible);
+ERROR:  unknown function: f1()
 create function f1(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$
 begin
   return array[lower(x), upper(x), y, z];
 end$$ language plpgsql;
+ERROR:  type "anycompatiblerange" does not exist
 select f1(int4range(42, 49), 11, 2::smallint) as int, f1(float8range(4.5, 7.8), 7.8, 11::real) as num;
-     int      |       num        
---------------+------------------
- {42,49,11,2} | {4.5,7.8,7.8,11}
-(1 row)
-
+ERROR:  unknown function: f1()
 select f1(int4range(42, 49), 11, 4.5) as fail;  -- range type doesn't fit
-ERROR:  function f1(int4range, integer, numeric) does not exist
-LINE 1: select f1(int4range(42, 49), 11, 4.5) as fail;
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: f1()
 drop function f1(x anycompatiblerange, y anycompatible, z anycompatible);
+ERROR:  unknown function: f1()
 -- fail, can't infer type:
 create function f1(x anycompatible) returns anycompatiblerange as $$
 begin
   return array[x + 1, x + 2];
 end$$ language plpgsql;
-ERROR:  cannot determine result data type
-DETAIL:  A result of type anycompatiblerange requires at least one input of type anycompatiblerange or anycompatiblemultirange.
+ERROR:  type "anycompatible" does not exist
 create function f1(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$
 begin
   return x;
 end$$ language plpgsql;
+ERROR:  type "anycompatiblerange" does not exist
 select f1(int4range(42, 49), array[11]) as int, f1(float8range(4.5, 7.8), array[7]) as num;
-   int   |    num    
----------+-----------
- [42,49) | [4.5,7.8)
-(1 row)
-
+ERROR:  unknown function: f1()
 drop function f1(x anycompatiblerange, y anycompatiblearray);
+ERROR:  unknown function: f1()
 create function f1(a anyelement, b anyarray,
                    c anycompatible, d anycompatible,
                    OUT x anyarray, OUT y anycompatiblearray)
@@ -1876,35 +2013,30 @@
   x := a || b;
   y := array[c, d];
 end$$ language plpgsql;
+ERROR:  type "anycompatible" does not exist
 select x, pg_typeof(x), y, pg_typeof(y)
   from f1(11, array[1, 2], 42, 34.5);
-    x     | pg_typeof |     y     | pg_typeof 
-----------+-----------+-----------+-----------
- {11,1,2} | integer[] | {42,34.5} | numeric[]
-(1 row)
-
+ERROR:  unknown function: f1()
 select x, pg_typeof(x), y, pg_typeof(y)
   from f1(11, array[1, 2], point(1,2), point(3,4));
-    x     | pg_typeof |         y         | pg_typeof 
-----------+-----------+-------------------+-----------
- {11,1,2} | integer[] | {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x), y, pg_typeof(y)
+  from f1(11, array[1, 2], point(1,2), point(3,4))
+                                ^
 select x, pg_typeof(x), y, pg_typeof(y)
   from f1(11, '{1,2}', point(1,2), '(3,4)');
-    x     | pg_typeof |         y         | pg_typeof 
-----------+-----------+-------------------+-----------
- {11,1,2} | integer[] | {"(1,2)","(3,4)"} | point[]
-(1 row)
-
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+select x, pg_typeof(x), y, pg_typeof(y)
+  from f1(11, '{1,2}', point(1,2), '(3,4)')
+                            ^
 select x, pg_typeof(x), y, pg_typeof(y)
   from f1(11, array[1, 2.2], 42, 34.5);  -- fail
-ERROR:  function f1(integer, numeric[], integer, numeric) does not exist
-LINE 2:   from f1(11, array[1, 2.2], 42, 34.5);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: f1()
 drop function f1(a anyelement, b anyarray,
                  c anycompatible, d anycompatible);
+ERROR:  unknown function: f1()
 --
 -- Test handling of OUT parameters, including polymorphic cases.
 -- Note that RETURN is optional with OUT params; we try both ways.
@@ -1915,8 +2047,6 @@
   return i+1;
 end$$ language plpgsql;
 ERROR:  RETURN cannot have a parameter in function with OUT parameters
-LINE 3:   return i+1;
-                 ^
 create function f1(in i int, out j int) as $$
 begin
   j := i+1;
@@ -1959,14 +2089,13 @@
   return next;
   return;
 end$$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from f1(42);
- j  
-----
- 43
- 44
-(2 rows)
-
+ERROR:  unknown function: f1()
 drop function f1(int);
+ERROR:  unknown function: f1()
 create function f1(in i int, out j int, out k text) as $$
 begin
   j := i;
@@ -1995,14 +2124,13 @@
   k := 'foot';
   return next;
 end$$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from f1(42);
- j  |  k   
-----+------
- 43 | foo
- 44 | foot
-(2 rows)
-
+ERROR:  unknown function: f1()
 drop function f1(int);
+ERROR:  unknown function: f1()
 create function duplic(in i anyelement, out j anyelement, out k anyarray) as $$
 begin
   j := i;
@@ -2028,19 +2156,13 @@
   k := array[lower(i),upper(i)];
   return;
 end$$ language plpgsql;
+ERROR:  type "anycompatiblerange" does not exist
 select * from duplic(int4range(42,49));
- j  |    k    
-----+---------
- 42 | {42,49}
-(1 row)
-
+ERROR:  unknown function: duplic()
 select * from duplic(textrange('aaa', 'bbb'));
-  j  |     k     
------+-----------
- aaa | {aaa,bbb}
-(1 row)
-
+ERROR:  unknown function: duplic()
 drop function duplic(anycompatiblerange);
+ERROR:  unknown function: duplic()
 --
 -- test PERFORM
 --
@@ -2057,6 +2179,7 @@
 		RETURN FALSE;
 	END IF;
 END;' language plpgsql;
+ERROR:  no value provided for placeholder: $1
 create function perform_test_func() returns void as '
 BEGIN
 	IF FOUND then
@@ -2077,19 +2200,32 @@
 
 	RETURN;
 END;' language plpgsql;
-SELECT perform_test_func();
- perform_test_func 
--------------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+BEGIN
+	IF FOUND then
+		INSERT INTO perform_test VALUES (100, 100);
+	END IF;
+
+	PERFORM perform_simple_func(5);
+                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+SELECT perform_test_func();
+ERROR:  unknown function: perform_test_func()
 SELECT * FROM perform_test;
-  a  |  b  
------+-----
-   5 |  15
- 100 | 100
- 100 | 100
-(3 rows)
+ a | b 
+---+---
+(0 rows)
 
 drop table perform_test;
 --
@@ -2103,19 +2239,12 @@
   if found then return x; end if;
   return 0;
 end$$ language plpgsql stable;
+ERROR:  column "found" does not exist
 insert into users values('user1');
 select sp_id_user('user1');
- sp_id_user 
-------------
-          1
-(1 row)
-
+ERROR:  unknown function: sp_id_user()
 select sp_id_user('userx');
- sp_id_user 
-------------
-          0
-(1 row)
-
+ERROR:  unknown function: sp_id_user()
 create function sp_add_user(a_login text) returns int as $$
 declare my_id_user int;
 begin
@@ -2130,38 +2259,21 @@
   END IF;
   RETURN my_id_user;
 end$$ language plpgsql;
+ERROR:  unknown function: sp_id_user()
 select sp_add_user('user1');
- sp_add_user 
--------------
-          -1
-(1 row)
-
+ERROR:  unknown function: sp_add_user()
 select sp_add_user('user2');
- sp_add_user 
--------------
-           2
-(1 row)
-
+ERROR:  unknown function: sp_add_user()
 select sp_add_user('user2');
- sp_add_user 
--------------
-          -1
-(1 row)
-
+ERROR:  unknown function: sp_add_user()
 select sp_add_user('user3');
- sp_add_user 
--------------
-           3
-(1 row)
-
+ERROR:  unknown function: sp_add_user()
 select sp_add_user('user3');
- sp_add_user 
--------------
-          -1
-(1 row)
-
+ERROR:  unknown function: sp_add_user()
 drop function sp_add_user(text);
+ERROR:  unknown function: sp_add_user()
 drop function sp_id_user(text);
+ERROR:  unknown function: sp_id_user()
 --
 -- tests for refcursors
 --
@@ -2185,12 +2297,13 @@
     return x.a;
 end
 $$ language plpgsql;
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "rc" shadows a previously defined variable
 select use_refcursor(return_unnamed_refcursor());
- use_refcursor 
----------------
-             5
-(1 row)
-
+ERROR:  unknown function: use_refcursor()
 create function return_refcursor(rc refcursor) returns refcursor as $$
 begin
     open rc for select a from rc_test;
@@ -2203,33 +2316,31 @@
     return $1;
 end
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+    perform return_refcursor($1);
+                                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 begin;
 select refcursor_test1('test1');
- refcursor_test1 
------------------
- test1
-(1 row)
-
+ERROR:  unknown function: refcursor_test1()
 fetch next in test1;
- a 
----
- 5
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 select refcursor_test1('test2');
- refcursor_test1 
------------------
- test2
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 fetch all from test2;
-  a  
------
-   5
-  50
- 500
-(3 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- should fail
 fetch next from test1;
@@ -2249,13 +2360,25 @@
     end if;
 end
 $$ language plpgsql;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select refcursor_test2(20000, 20000) as "Should be false",
        refcursor_test2(20, 20) as "Should be true";
- Should be false | Should be true 
------------------+----------------
- f               | t
-(1 row)
-
+ERROR:  unknown function: refcursor_test2()
 -- should fail
 create function constant_refcursor() returns refcursor as $$
 declare
@@ -2266,8 +2389,11 @@
 end
 $$ language plpgsql;
 select constant_refcursor();
-ERROR:  variable "rc" is declared CONSTANT
-CONTEXT:  PL/pgSQL function constant_refcursor() line 5 at OPEN
+ constant_refcursor 
+--------------------
+ <unnamed portal 1>
+(1 row)
+
 -- but it's okay like this
 create or replace function constant_refcursor() returns refcursor as $$
 declare
@@ -2301,13 +2427,25 @@
     end if;
 end
 $$ language plpgsql;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    c1 cursor (param1 int, param12 int) for select * from rc_test where a > param1 and b > param12;
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select namedparmcursor_test1(20000, 20000) as "Should be false",
        namedparmcursor_test1(20, 20) as "Should be true";
- Should be false | Should be true 
------------------+----------------
- f               | t
-(1 row)
-
+ERROR:  unknown function: namedparmcursor_test1()
 -- mixing named and positional argument notations
 create function namedparmcursor_test2(int, int) returns boolean as $$
 declare
@@ -2324,12 +2462,24 @@
     end if;
 end
 $$ language plpgsql;
-select namedparmcursor_test2(20, 20);
- namedparmcursor_test2 
------------------------
- t
-(1 row)
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select namedparmcursor_test2(20, 20);
+ERROR:  unknown function: namedparmcursor_test2()
 -- mixing named and positional: param2 is given twice, once in named notation
 -- and second time in positional notation. Should throw an error at parse time
 create function namedparmcursor_test3() returns void as $$
@@ -2339,9 +2489,22 @@
     open c1(param2 := 20, 21);
 end
 $$ language plpgsql;
-ERROR:  value for parameter "param2" of cursor "c1" specified more than once
-LINE 5:     open c1(param2 := 20, 21);
-                                  ^
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- mixing named and positional: same as previous test, but param1 is duplicated
 create function namedparmcursor_test4() returns void as $$
 declare
@@ -2350,9 +2513,22 @@
     open c1(20, param1 := 21);
 end
 $$ language plpgsql;
-ERROR:  value for parameter "param1" of cursor "c1" specified more than once
-LINE 5:     open c1(20, param1 := 21);
-                        ^
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- duplicate named parameter, should throw an error at parse time
 create function namedparmcursor_test5() returns void as $$
 declare
@@ -2362,9 +2538,22 @@
   open c1 (p2 := 77, p2 := 42);
 end
 $$ language plpgsql;
-ERROR:  value for parameter "p2" of cursor "c1" specified more than once
-LINE 6:   open c1 (p2 := 77, p2 := 42);
-                             ^
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c1 cursor (p1 int, p2 int) for
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- not enough parameters, should throw an error at parse time
 create function namedparmcursor_test6() returns void as $$
 declare
@@ -2374,9 +2563,22 @@
   open c1 (p2 := 77);
 end
 $$ language plpgsql;
-ERROR:  not enough arguments for cursor "c1"
-LINE 6:   open c1 (p2 := 77);
-                           ^
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c1 cursor (p1 int, p2 int) for
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- division by zero runtime error, the context given in the error message
 -- should be sensible
 create function namedparmcursor_test7() returns void as $$
@@ -2386,10 +2588,24 @@
 begin
   open c1 (p2 := 77, p1 := 42/0);
 end $$ language plpgsql;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c1 cursor (p1 int, p2 int) for
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select namedparmcursor_test7();
-ERROR:  division by zero
-CONTEXT:  SQL expression "42/0 AS p1, 77 AS p2"
-PL/pgSQL function namedparmcursor_test7() line 6 at OPEN
+ERROR:  unknown function: namedparmcursor_test7()
 -- check that line comments work correctly within the argument list (there
 -- is some special handling of this case in the code: the newline after the
 -- comment must be preserved when the argument-evaluating query is
@@ -2406,12 +2622,24 @@
   fetch c1 into n;
   return n;
 end $$ language plpgsql;
-select namedparmcursor_test8();
- namedparmcursor_test8 
------------------------
-                     0
-(1 row)
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c1 cursor (p1 int, p2 int) for
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select namedparmcursor_test8();
+ERROR:  unknown function: namedparmcursor_test8()
 -- cursor parameter name can match plpgsql variable or unreserved keyword
 create function namedparmcursor_test9(p1 int) returns int4 as $$
 declare
@@ -2425,12 +2653,24 @@
   fetch c1 into n;
   return n;
 end $$ language plpgsql;
-select namedparmcursor_test9(6);
- namedparmcursor_test9 
------------------------
-                     1
-(1 row)
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c1 cursor (p1 int, p2 int, debug int) for
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select namedparmcursor_test9(6);
+ERROR:  unknown function: namedparmcursor_test9()
 --
 -- tests for "raise" processing
 --
@@ -2441,28 +2681,22 @@
 end;
 $$ language plpgsql;
 ERROR:  too many parameters specified for RAISE
-CONTEXT:  compilation of PL/pgSQL function "raise_test1" near line 3
 create function raise_test2(int) returns int as $$
 begin
     raise notice 'This message has too few parameters: %, %, %', $1, $1;
     return $1;
 end;
 $$ language plpgsql;
-ERROR:  too few parameters specified for RAISE
-CONTEXT:  compilation of PL/pgSQL function "raise_test2" near line 3
+ERROR:  no value provided for placeholder: $1
 create function raise_test3(int) returns int as $$
 begin
     raise notice 'This message has no parameters (despite having %% signs in it)!';
     return $1;
 end;
 $$ language plpgsql;
+ERROR:  no value provided for placeholder: $1
 select raise_test3(1);
-NOTICE:  This message has no parameters (despite having % signs in it)!
- raise_test3 
--------------
-           1
-(1 row)
-
+ERROR:  unknown function: raise_test3()
 -- Test re-RAISE inside a nested exception block.  This case is allowed
 -- by Oracle's PL/SQL but was handled differently by PG before 9.1.
 CREATE FUNCTION reraise_test() RETURNS void AS $$
@@ -2484,14 +2718,30 @@
        raise notice 'WRONG - exception % caught in outer block', sqlerrm;
 END;
 $$ LANGUAGE plpgsql;
-SELECT reraise_test();
-NOTICE:  exception syntax_error thrown in inner block, reraising
-NOTICE:  RIGHT - exception syntax_error caught in inner block
- reraise_test 
---------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+BEGIN
+   BEGIN
+       RAISE syntax_error;
+   EXCEPTION
+       WHEN syntax_error THEN
+           BEGIN
+               raise notice 'exception % thrown in inner block, reraising', sqlerrm;
+               RAISE;
+                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
+SELECT reraise_test();
+ERROR:  unknown function: reraise_test()
 --
 -- reject function definitions that contain malformed SQL queries at
 -- compile-time, where possible
@@ -2504,9 +2754,17 @@
     a := 10;
     return a;
 end$$ language plpgsql;
-ERROR:  syntax error at or near "Johnny"
-LINE 5:     Johnny Yuma;
-            ^
+ERROR:  at or near ";": at or near "johnny": syntax error
+DETAIL:  source SQL:
+Johnny Yuma
+^
+--
+source SQL:
+declare a int;
+begin
+    a := 5;
+    Johnny Yuma;
+               ^
 create function bad_sql2() returns int as $$
 declare r record;
 begin
@@ -2515,81 +2773,115 @@
     end loop;
     return 5;
 end;$$ language plpgsql;
-ERROR:  syntax error at or near "the"
-LINE 4:     for r in select I fought the law, the law won LOOP
-                                     ^
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare r record;
+begin
+    for r in select I fought the law, the law won LOOP
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- a RETURN expression is mandatory, except for void-returning
 -- functions, where it is not allowed
 create function missing_return_expr() returns int as $$
 begin
     return ;
 end;$$ language plpgsql;
-ERROR:  missing expression at or near ";"
-LINE 3:     return ;
-                   ^
+ERROR:  missing expression at or near "RETURN;"
 create function void_return_expr() returns void as $$
 begin
     return 5;
 end;$$ language plpgsql;
 ERROR:  RETURN cannot have a parameter in function returning void
-LINE 3:     return 5;
-                   ^
 -- VOID functions are allowed to omit RETURN
 create function void_return_expr() returns void as $$
 begin
     perform 2+2;
 end;$$ language plpgsql;
-select void_return_expr();
- void_return_expr 
-------------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+    perform 2+2;
+               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+-- select void_return_expr();
 -- but ordinary functions are not
 create function missing_return_expr() returns int as $$
 begin
     perform 2+2;
 end;$$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+    perform 2+2;
+               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select missing_return_expr();
-ERROR:  control reached end of function without RETURN
-CONTEXT:  PL/pgSQL function missing_return_expr()
+ERROR:  unknown function: missing_return_expr()
 drop function void_return_expr();
+ERROR:  unknown function: void_return_expr()
 drop function missing_return_expr();
+ERROR:  unknown function: missing_return_expr()
 --
 -- EXECUTE ... INTO test
 --
 create table eifoo (i integer, y integer);
 create type eitype as (i integer, y integer);
-create or replace function execute_into_test(varchar) returns record as $$
-declare
-    _r record;
-    _rt eifoo%rowtype;
-    _v eitype;
-    i int;
-    j int;
-    k int;
-begin
-    execute 'insert into '||$1||' values(10,15)';
-    execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;
-    raise notice '% %', _r.i, _r.y;
-    execute 'select * from '||$1||' limit 1' into _rt;
-    raise notice '% %', _rt.i, _rt.y;
-    execute 'select *, 20 from '||$1||' limit 1' into i, j, k;
-    raise notice '% % %', i, j, k;
-    execute 'select 1,2' into _v;
-    return _v;
-end; $$ language plpgsql;
+-- create or replace function execute_into_test(varchar) returns record as $$
+-- declare
+--     _r record;
+--     _rt eifoo%rowtype;
+--     _v eitype;
+--     i int;
+--     j int;
+--     k int;
+-- begin
+--     execute 'insert into '||$1||' values(10,15)';
+--     execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;
+--     raise notice '% %', _r.i, _r.y;
+--     execute 'select * from '||$1||' limit 1' into _rt;
+--     raise notice '% %', _rt.i, _rt.y;
+--     execute 'select *, 20 from '||$1||' limit 1' into i, j, k;
+--     raise notice '% % %', i, j, k;
+--     execute 'select 1,2' into _v;
+--     return _v;
+-- end; $$ language plpgsql;
 select execute_into_test('eifoo');
-NOTICE:  10 1
-NOTICE:  10 15
-NOTICE:  10 15 20
- execute_into_test 
--------------------
- (1,2)
-(1 row)
-
+ERROR:  unknown function: execute_into_test()
 drop table eifoo cascade;
 drop type eitype cascade;
+ERROR:  unimplemented: DROP TYPE CASCADE is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/51480/_version_
 --
 -- SQLSTATE and SQLERRM test
 --
@@ -2597,14 +2889,11 @@
 begin
     raise notice '% %', sqlstate, sqlerrm;
 end; $$ language plpgsql;
+ERROR:  column "sqlstate" does not exist
 -- should fail: SQLSTATE and SQLERRM are only in defined EXCEPTION
 -- blocks
 select excpt_test1();
-ERROR:  column "sqlstate" does not exist
-LINE 1: sqlstate
-        ^
-QUERY:  sqlstate
-CONTEXT:  PL/pgSQL function excpt_test1() line 3 at RAISE
+ERROR:  unknown function: excpt_test1()
 create function excpt_test2() returns void as $$
 begin
     begin
@@ -2613,13 +2902,10 @@
         end;
     end;
 end; $$ language plpgsql;
+ERROR:  column "sqlstate" does not exist
 -- should fail
 select excpt_test2();
-ERROR:  column "sqlstate" does not exist
-LINE 1: sqlstate
-        ^
-QUERY:  sqlstate
-CONTEXT:  PL/pgSQL function excpt_test2() line 5 at RAISE
+ERROR:  unknown function: excpt_test2()
 create function excpt_test3() returns void as $$
 begin
     begin
@@ -2639,31 +2925,61 @@
 	    raise notice '% %', sqlstate, sqlerrm;
     end;
 end; $$ language plpgsql;
-select excpt_test3();
-NOTICE:  caught exception P0001 user exception
-NOTICE:  P0001 user exception
-NOTICE:  caught exception 22012 division by zero
-NOTICE:  P0001 user exception
- excpt_test3 
--------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+    begin
+        raise exception 'user exception';
+    exception when others then
+	    raise notice 'caught exception % %', sqlstate, sqlerrm;
+	    begin
+	        raise notice '% %', sqlstate, sqlerrm;
+	        perform 10/0;
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select excpt_test3();
+ERROR:  unknown function: excpt_test3()
 create function excpt_test4() returns text as $$
 begin
 	begin perform 1/0;
 	exception when others then return sqlerrm; end;
 end; $$ language plpgsql;
-select excpt_test4();
-   excpt_test4    
-------------------
- division by zero
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+	begin perform 1/0;
+                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select excpt_test4();
+ERROR:  unknown function: excpt_test4()
 drop function excpt_test1();
+ERROR:  unknown function: excpt_test1()
 drop function excpt_test2();
+ERROR:  unknown function: excpt_test2()
 drop function excpt_test3();
+ERROR:  unknown function: excpt_test3()
 drop function excpt_test4();
+ERROR:  unknown function: excpt_test4()
 -- parameters of raise stmt can be expressions
 create function raise_exprs() returns void as $$
 declare
@@ -2714,13 +3030,11 @@
   insert into foo values(5,6) returning * into x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-NOTICE:  x.f1 = 5, x.f2 = 6
- stricttest 
-------------
- 
-(1 row)
-
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2728,10 +3042,11 @@
   insert into foo values(7,8),(9,10) returning * into x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 5 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2739,13 +3054,11 @@
   execute 'insert into foo values(5,6) returning *' into x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-NOTICE:  x.f1 = 5, x.f2 = 6
- stricttest 
-------------
- 
-(1 row)
-
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2753,23 +3066,17 @@
   execute 'insert into foo values(7,8),(9,10) returning *' into x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-NOTICE:  x.f1 = 7, x.f2 = 8
- stricttest 
-------------
- 
-(1 row)
-
+ERROR:  unknown function: stricttest()
 select * from foo;
  f1 | f2 
 ----+----
   1 |  2
   3 |  4
-  5 |  6
-  5 |  6
-  7 |  8
-  9 | 10
-(6 rows)
+(2 rows)
 
 create or replace function stricttest() returns void as $$
 declare x record;
@@ -2778,13 +3085,11 @@
   select * from foo where f1 = 3 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-NOTICE:  x.f1 = 3, x.f2 = 4
- stricttest 
-------------
- 
-(1 row)
-
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2792,9 +3097,11 @@
   select * from foo where f1 = 0 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned no rows
-CONTEXT:  PL/pgSQL function stricttest() line 5 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2802,10 +3109,11 @@
   select * from foo where f1 > 3 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 5 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2813,13 +3121,11 @@
   execute 'select * from foo where f1 = 3' into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-NOTICE:  x.f1 = 3, x.f2 = 4
- stricttest 
-------------
- 
-(1 row)
-
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2827,9 +3133,11 @@
   execute 'select * from foo where f1 = 0' into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned no rows
-CONTEXT:  PL/pgSQL function stricttest() line 5 at EXECUTE
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2837,12 +3145,17 @@
   execute 'select * from foo where f1 > 3' into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-CONTEXT:  PL/pgSQL function stricttest() line 5 at EXECUTE
+ERROR:  unknown function: stricttest()
 drop function stricttest();
+ERROR:  unknown function: stricttest()
 -- test printing parameters after failure due to STRICT
 set plpgsql.print_strict_params to true;
+ERROR:  parameter "plpgsql.print_strict_params" requires a string value
+DETAIL:  true is a bool
 create or replace function stricttest() returns void as $$
 declare
 x record;
@@ -2853,10 +3166,11 @@
   select * from foo where f1 = p1 and f1::text = p3 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned no rows
-DETAIL:  parameters: p1 = '2', p3 = 'foo'
-CONTEXT:  PL/pgSQL function stricttest() line 8 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare
 x record;
@@ -2867,10 +3181,11 @@
   select * from foo where f1 = p1 and f1::text = p3 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned no rows
-DETAIL:  parameters: p1 = '2', p3 = '''Valame Dios!'' dijo Sancho; ''no le dije yo a vuestra merced que mirase bien lo que hacia?'''
-CONTEXT:  PL/pgSQL function stricttest() line 8 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare
 x record;
@@ -2881,11 +3196,11 @@
   select * from foo where f1 > p1 or f1::text = p3  into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-DETAIL:  parameters: p1 = '2', p3 = 'foo'
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 8 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2893,10 +3208,11 @@
   select * from foo where f1 > 3 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 5 at SQL statement
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2904,10 +3220,11 @@
   execute 'select * from foo where f1 = $1 or f1::text = $2' using 0, 'foo' into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned no rows
-DETAIL:  parameters: $1 = '0', $2 = 'foo'
-CONTEXT:  PL/pgSQL function stricttest() line 5 at EXECUTE
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2915,10 +3232,11 @@
   execute 'select * from foo where f1 > $1' using 1 into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-DETAIL:  parameters: $1 = '1'
-CONTEXT:  PL/pgSQL function stricttest() line 5 at EXECUTE
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 declare x record;
 begin
@@ -2926,9 +3244,11 @@
   execute 'select * from foo where f1 > 3' into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select stricttest();
-ERROR:  query returned more than one row
-CONTEXT:  PL/pgSQL function stricttest() line 5 at EXECUTE
+ERROR:  unknown function: stricttest()
 create or replace function stricttest() returns void as $$
 -- override the global
 #print_strict_params off
@@ -2941,10 +3261,12 @@
   select * from foo where f1 > p1 or f1::text = p3  into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  at or near "#": syntax error
+DETAIL:  source SQL:
+#print_strict_params off
+^
 select stricttest();
-ERROR:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 10 at SQL statement
+ERROR:  unknown function: stricttest()
 reset plpgsql.print_strict_params;
 create or replace function stricttest() returns void as $$
 -- override the global
@@ -2958,11 +3280,12 @@
   select * from foo where f1 > p1 or f1::text = p3  into strict x;
   raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
 end$$ language plpgsql;
+ERROR:  at or near "#": syntax error
+DETAIL:  source SQL:
+#print_strict_params on
+^
 select stricttest();
-ERROR:  query returned more than one row
-DETAIL:  parameters: p1 = '2', p3 = 'foo'
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function stricttest() line 10 at SQL statement
+ERROR:  unknown function: stricttest()
 -- test warnings and errors
 set plpgsql.extra_warnings to 'all';
 set plpgsql.extra_warnings to 'none';
@@ -2979,23 +3302,14 @@
 begin
 end
 $$ language plpgsql;
-WARNING:  variable "in1" shadows a previously defined variable
-LINE 4: in1 int;
-        ^
-WARNING:  variable "out1" shadows a previously defined variable
-LINE 5: out1 int;
-        ^
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select shadowtest(1);
- shadowtest 
-------------
-(0 rows)
-
+ERROR:  unknown function: shadowtest()
 set plpgsql.extra_warnings to 'shadowed_variables';
 select shadowtest(1);
- shadowtest 
-------------
-(0 rows)
-
+ERROR:  unknown function: shadowtest()
 create or replace function shadowtest(in1 int)
 	returns table (out1 int) as $$
 declare
@@ -3004,18 +3318,13 @@
 begin
 end
 $$ language plpgsql;
-WARNING:  variable "in1" shadows a previously defined variable
-LINE 4: in1 int;
-        ^
-WARNING:  variable "out1" shadows a previously defined variable
-LINE 5: out1 int;
-        ^
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select shadowtest(1);
- shadowtest 
-------------
-(0 rows)
-
+ERROR:  unknown function: shadowtest()
 drop function shadowtest(int);
+ERROR:  unknown function: shadowtest()
 -- shadowing in a second DECLARE block
 create or replace function shadowtest()
 	returns void as $$
@@ -3027,10 +3336,13 @@
 	begin
 	end;
 end$$ language plpgsql;
-WARNING:  variable "f1" shadows a previously defined variable
-LINE 7:  f1 int;
-         ^
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "f1" shadows a previously defined variable
 drop function shadowtest();
+ERROR:  unknown function: shadowtest()
 -- several levels of shadowing
 create or replace function shadowtest(in1 int)
 	returns void as $$
@@ -3042,13 +3354,13 @@
 	begin
 	end;
 end$$ language plpgsql;
-WARNING:  variable "in1" shadows a previously defined variable
-LINE 4: in1 int;
-        ^
-WARNING:  variable "in1" shadows a previously defined variable
-LINE 7:  in1 int;
-         ^
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "in1" shadows a previously defined variable
 drop function shadowtest(int);
+ERROR:  unknown function: shadowtest()
 -- shadowing in cursor definitions
 create or replace function shadowtest()
 	returns void as $$
@@ -3057,34 +3369,49 @@
 c1 cursor (f1 int) for select 1;
 begin
 end$$ language plpgsql;
-WARNING:  variable "f1" shadows a previously defined variable
-LINE 5: c1 cursor (f1 int) for select 1;
-                   ^
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+f1 int;
+c1 cursor (f1 int) for select 1;
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 drop function shadowtest();
+ERROR:  unknown function: shadowtest()
 -- test errors when shadowing a variable
 set plpgsql.extra_errors to 'shadowed_variables';
 create or replace function shadowtest(f1 int)
 	returns boolean as $$
 declare f1 int; begin return 1; end $$ language plpgsql;
-ERROR:  variable "f1" shadows a previously defined variable
-LINE 3: declare f1 int; begin return 1; end $$ language plpgsql;
-                ^
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "f1" shadows a previously defined variable
 select shadowtest(1);
-ERROR:  function shadowtest(integer) does not exist
-LINE 1: select shadowtest(1);
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: shadowtest()
 reset plpgsql.extra_errors;
 reset plpgsql.extra_warnings;
 create or replace function shadowtest(f1 int)
 	returns boolean as $$
 declare f1 int; begin return 1; end $$ language plpgsql;
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "f1" shadows a previously defined variable
 select shadowtest(1);
- shadowtest 
-------------
- t
-(1 row)
-
+ERROR:  unknown function: shadowtest()
 -- runtime extra checks
 set plpgsql.extra_warnings to 'too_many_rows';
 do $$
@@ -3093,8 +3420,6 @@
   select v from generate_series(1,2) g(v) into x;
 end;
 $$;
-WARNING:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
 set plpgsql.extra_errors to 'too_many_rows';
 do $$
 declare x int;
@@ -3102,9 +3427,6 @@
   select v from generate_series(1,2) g(v) into x;
 end;
 $$;
-ERROR:  query returned more than one row
-HINT:  Make sure the query returns a single row, or use LIMIT 1.
-CONTEXT:  PL/pgSQL function inline_code_block line 4 at SQL statement
 reset plpgsql.extra_errors;
 reset plpgsql.extra_warnings;
 set plpgsql.extra_warnings to 'strict_multi_assignment';
@@ -3118,12 +3440,6 @@
   select 1,2,3 into x, y;
 end
 $$;
-WARNING:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_warnings is active.
-HINT:  Make sure the query returns the exact list of columns.
-WARNING:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_warnings is active.
-HINT:  Make sure the query returns the exact list of columns.
 set plpgsql.extra_errors to 'strict_multi_assignment';
 do $$
 declare
@@ -3135,10 +3451,6 @@
   select 1,2,3 into x, y;
 end
 $$;
-ERROR:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_errors is active.
-HINT:  Make sure the query returns the exact list of columns.
-CONTEXT:  PL/pgSQL function inline_code_block line 6 at SQL statement
 create table test_01(a int, b int, c int);
 alter table test_01 drop column a;
 -- the check is active only when source table is not empty
@@ -3154,10 +3466,6 @@
 end;
 $$;
 NOTICE:  ok
-ERROR:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_errors is active.
-HINT:  Make sure the query returns the exact list of columns.
-CONTEXT:  PL/pgSQL function inline_code_block line 8 at SQL statement
 do $$
 declare
   t test_01;
@@ -3168,10 +3476,6 @@
 end;
 $$;
 NOTICE:  ok
-ERROR:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_errors is active.
-HINT:  Make sure the query returns the exact list of columns.
-CONTEXT:  PL/pgSQL function inline_code_block line 7 at SQL statement
 do $$
 declare
   t test_01;
@@ -3179,10 +3483,6 @@
   select 1 into t; -- should fail;
 end;
 $$;
-ERROR:  number of source and target fields in assignment does not match
-DETAIL:  strict_multi_assignment check of extra_errors is active.
-HINT:  Make sure the query returns the exact list of columns.
-CONTEXT:  PL/pgSQL function inline_code_block line 5 at SQL statement
 drop table test_01;
 reset plpgsql.extra_errors;
 reset plpgsql.extra_warnings;
@@ -3201,16 +3501,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
-   sc_test   
--------------
- -2147483647
-  2147483647
-     -123456
-      123456
-           0
-(5 rows)
-
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c no scroll cursor for select f1 from int4_tbl;
@@ -3225,10 +3520,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();  -- fails because of NO SCROLL specification
-ERROR:  cursor can only scan forward
-HINT:  Declare it with SCROLL option to enable backward scan.
-CONTEXT:  PL/pgSQL function sc_test() line 7 at FETCH
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c refcursor;
@@ -3243,16 +3539,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
-   sc_test   
--------------
- -2147483647
-  2147483647
-     -123456
-      123456
-           0
-(5 rows)
-
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c refcursor;
@@ -3267,14 +3558,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
-   sc_test   
--------------
- -2147483647
-     -123456
-           0
-(3 rows)
-
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c refcursor;
@@ -3290,13 +3578,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
-   sc_test   
--------------
- -2147483647
-      123456
-(2 rows)
-
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c cursor for select * from generate_series(1, 10);
@@ -3316,14 +3602,11 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
- sc_test 
----------
-       3
-       6
-       9
-(3 rows)
-
+ERROR:  unknown function: sc_test()
 create or replace function sc_test() returns setof integer as $$
 declare
   c cursor for select * from generate_series(1, 10);
@@ -3338,13 +3621,13 @@
   close c;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from sc_test();
- sc_test 
----------
-      10
-(1 row)
-
+ERROR:  unknown function: sc_test()
 drop function sc_test();
+ERROR:  unknown function: sc_test()
 -- test qualified variable names
 create function pl_qual_names (param1 int) returns void as $$
 <<outerblock>>
@@ -3362,17 +3645,15 @@
   end;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "param1" shadows a previously defined variable
 select pl_qual_names(42);
-NOTICE:  param1 = 2
-NOTICE:  pl_qual_names.param1 = 42
-NOTICE:  outerblock.param1 = 1
-NOTICE:  innerblock.param1 = 2
- pl_qual_names 
----------------
- 
-(1 row)
-
+ERROR:  unknown function: pl_qual_names()
 drop function pl_qual_names(int);
+ERROR:  unknown function: pl_qual_names()
 -- tests for RETURN QUERY
 create function ret_query1(out int, out int) returns setof record as $$
 begin
@@ -3383,24 +3664,11 @@
     return next;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from ret_query1();
- column1 | column2 
----------+---------
-      -1 |      -2
-       1 |       0
-       2 |      10
-       3 |      20
-       4 |      30
-       5 |      40
-       6 |      50
-       7 |      60
-       8 |      70
-       9 |      80
-      10 |      90
-      11 |     100
-      -1 |      -2
-(13 rows)
-
+ERROR:  unknown function: ret_query1()
 create type record_type as (x text, y int, z boolean);
 create or replace function ret_query2(lim int) returns setof record_type as $$
 begin
@@ -3408,20 +3676,11 @@
                  from generate_series(-8, lim) s (x) where s.x % 2 = 0;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from ret_query2(8);
-                x                 | y  | z 
-----------------------------------+----+---
- e91592205d3881e3ea35d66973bb4898 | -8 | f
- 03b26944890929ff751653acb2f2af79 | -6 | f
- e5e0093f285a4fb94c3fcc2ad7fd04ed | -4 | f
- cf3bae39dd692048a8bf961182e6a34d | -2 | f
- 5feceb66ffc86f38d952786c6d696c79 |  0 | f
- d4735e3a265e16eee03f59718b9b5d03 |  2 | t
- 4b227777d4dd1fc61c6f884f48641d02 |  4 | t
- e7f6c011776e8db7cd330b54174fd76f |  6 | t
- 2c624232cdd221771294dfbb310aca00 |  8 | t
-(9 rows)
-
+ERROR:  unknown function: ret_query2()
 -- test EXECUTE USING
 create function exc_using(int, text) returns int as $$
 declare i int;
@@ -3433,19 +3692,27 @@
   return i;
 end
 $$ language plpgsql;
-select exc_using(5, 'foobar');
-NOTICE:  1
-NOTICE:  2
-NOTICE:  3
-NOTICE:  4
-NOTICE:  5
-NOTICE:  6
- exc_using 
------------
-        26
-(1 row)
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare i int;
+begin
+  for i in execute 'select * from generate_series(1,$1)' using $1+1 loop
+        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select exc_using(5, 'foobar');
+ERROR:  unknown function: exc_using()
 drop function exc_using(int, text);
+ERROR:  unknown function: exc_using()
 create or replace function exc_using(int) returns void as $$
 declare
   c refcursor;
@@ -3461,19 +3728,29 @@
   return;
 end;
 $$ language plpgsql;
-select exc_using(5);
-NOTICE:  1
-NOTICE:  2
-NOTICE:  3
-NOTICE:  4
-NOTICE:  5
-NOTICE:  6
- exc_using 
------------
- 
-(1 row)
+ERROR:  at or near "execute": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c refcursor;
+  i int;
+begin
+  open c for execute 'select * from generate_series(1,$1)' using $1+1;
+             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select exc_using(5);
+ERROR:  unknown function: exc_using()
 drop function exc_using(int);
+ERROR:  unknown function: exc_using()
 -- test FOR-over-cursor
 create or replace function forc01() returns void as $$
 declare
@@ -3513,32 +3790,28 @@
   return;
 end;
 $$ language plpgsql;
-select forc01();
-NOTICE:  5 from c
-NOTICE:  6 from c
-NOTICE:  7 from c
-NOTICE:  9 from c
-NOTICE:  10 from c
-NOTICE:  41 from c2
-NOTICE:  42 from c2
-NOTICE:  43 from c2
-NOTICE:  after loop, c2 = c2
-NOTICE:  41 from special_name
-NOTICE:  42 from special_name
-NOTICE:  43 from special_name
-NOTICE:  after loop, c2 = special_name
-NOTICE:  41
-NOTICE:  42
-NOTICE:  43
-NOTICE:  after loop, c2 = <NULL>
- forc01 
---------
- 
-(1 row)
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c cursor(r1 integer, r2 integer)
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
+select forc01();
+ERROR:  unknown function: forc01()
 -- try updating the cursor's current row
 create temp table forc_test as
   select n as i, n as j from generate_series(1,10) n;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 create or replace function forc01() returns void as $$
 declare
   c cursor for select * from forc_test;
@@ -3549,35 +3822,39 @@
   end loop;
 end;
 $$ language plpgsql;
-select forc01();
-NOTICE:  1, 1
-NOTICE:  2, 2
-NOTICE:  3, 3
-NOTICE:  4, 4
-NOTICE:  5, 5
-NOTICE:  6, 6
-NOTICE:  7, 7
-NOTICE:  8, 8
-NOTICE:  9, 9
-NOTICE:  10, 10
- forc01 
---------
- 
-(1 row)
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c cursor for select * from forc_test;
+begin
+  for r in c loop
+        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select forc01();
+ERROR:  unknown function: forc01()
 select * from forc_test;
-  i   | j  
-------+----
-  100 |  2
-  200 |  4
-  300 |  6
-  400 |  8
-  500 | 10
-  600 | 12
-  700 | 14
-  800 | 16
-  900 | 18
- 1000 | 20
+ i  | j  
+----+----
+  1 |  1
+  2 |  2
+  3 |  3
+  4 |  4
+  5 |  5
+  6 |  6
+  7 |  7
+  8 |  8
+  9 |  9
+ 10 | 10
 (10 rows)
 
 -- same, with a cursor whose portal name doesn't match variable name
@@ -3595,38 +3872,42 @@
   end loop;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": at or near "of": syntax error
+DETAIL:  source SQL:
+update forc_test set i = i * 100, j = r.j * 2 where current of c
+                                                            ^
+--
+source SQL:
+declare
+  c refcursor := 'fooled_ya';
+  r record;
+begin
+  open c for select * from forc_test;
+  loop
+    fetch c into r;
+    exit when not found;
+    raise notice '%, %', r.i, r.j;
+    update forc_test set i = i * 100, j = r.j * 2 where current of c;
+                                                                    ^
 select forc01();
-NOTICE:  100, 2
-NOTICE:  200, 4
-NOTICE:  300, 6
-NOTICE:  400, 8
-NOTICE:  500, 10
-NOTICE:  600, 12
-NOTICE:  700, 14
-NOTICE:  800, 16
-NOTICE:  900, 18
-NOTICE:  1000, 20
- forc01 
---------
- 
-(1 row)
-
+ERROR:  unknown function: forc01()
 select * from forc_test;
-   i    | j  
---------+----
-  10000 |  4
-  20000 |  8
-  30000 | 12
-  40000 | 16
-  50000 | 20
-  60000 | 24
-  70000 | 28
-  80000 | 32
-  90000 | 36
- 100000 | 40
+ i  | j  
+----+----
+  1 |  1
+  2 |  2
+  3 |  3
+  4 |  4
+  5 |  5
+  6 |  6
+  7 |  7
+  8 |  8
+  9 |  9
+ 10 | 10
 (10 rows)
 
 drop function forc01();
+ERROR:  unknown function: forc01()
 -- it's okay to re-use a cursor variable name, even when bound
 do $$
 declare cnt int := 0;
@@ -3642,7 +3923,24 @@
   end loop;
   raise notice 'cnt = %', cnt;
 end $$;
-NOTICE:  cnt = 100
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare cnt int := 0;
+  c1 cursor for select * from forc_test;
+begin
+  for r1 in c1 loop
+         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- fail because cursor has no query bound to it
 create or replace function forc_bad() returns void as $$
 declare
@@ -3653,9 +3951,24 @@
   end loop;
 end;
 $$ language plpgsql;
-ERROR:  cursor FOR loop must use a bound cursor variable
-LINE 5:   for r in c loop
-                   ^
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  c refcursor;
+begin
+  for r in c loop
+        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- test RETURN QUERY EXECUTE
 create or replace function return_dquery()
 returns setof int as $$
@@ -3664,16 +3977,13 @@
   return query execute 'select * from (values($1),($2)) f' using 40,50;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from return_dquery();
- return_dquery 
----------------
-            10
-            20
-            40
-            50
-(4 rows)
-
+ERROR:  unknown function: return_dquery()
 drop function return_dquery();
+ERROR:  unknown function: return_dquery()
 -- test RETURN QUERY with dropped columns
 create table tabwithcols(a int, b int, c int, d int);
 insert into tabwithcols values(10,20,30,40),(50,60,70,80);
@@ -3684,46 +3994,22 @@
   return query execute 'select * from tabwithcols';
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from returnqueryf();
- a  | b  | c  | d  
-----+----+----+----
- 10 | 20 | 30 | 40
- 50 | 60 | 70 | 80
- 10 | 20 | 30 | 40
- 50 | 60 | 70 | 80
-(4 rows)
-
+ERROR:  unknown function: returnqueryf()
 alter table tabwithcols drop column b;
 select * from returnqueryf();
- a  | c  | d  
-----+----+----
- 10 | 30 | 40
- 50 | 70 | 80
- 10 | 30 | 40
- 50 | 70 | 80
-(4 rows)
-
+ERROR:  unknown function: returnqueryf()
 alter table tabwithcols drop column d;
 select * from returnqueryf();
- a  | c  
-----+----
- 10 | 30
- 50 | 70
- 10 | 30
- 50 | 70
-(4 rows)
-
+ERROR:  unknown function: returnqueryf()
 alter table tabwithcols add column d int;
 select * from returnqueryf();
- a  | c  | d 
-----+----+---
- 10 | 30 |  
- 50 | 70 |  
- 10 | 30 |  
- 50 | 70 |  
-(4 rows)
-
+ERROR:  unknown function: returnqueryf()
 drop function returnqueryf();
+ERROR:  unknown function: returnqueryf()
 drop table tabwithcols;
 --
 -- Tests for composite-type results
@@ -3753,6 +4039,9 @@
   return v;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select compos();
   compos   
 -----------
@@ -3778,9 +4067,11 @@
 end;
 $$ language plpgsql;
 select compos();
-ERROR:  returned record type does not match expected record type
-DETAIL:  Returned type unknown does not match expected type character varying in column 2.
-CONTEXT:  PL/pgSQL function compos() while casting return value to function's return type
+  compos   
+-----------
+ (1,hello)
+(1 row)
+
 -- ... but this does
 create or replace function compos() returns compostype as $$
 begin
@@ -3803,12 +4094,11 @@
   return v;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: RECORD type for PL/pgSQL variables is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/114874/_version_
 select composrec();
- composrec 
------------
- (1,hello)
-(1 row)
-
+ERROR:  unknown function: composrec()
 -- test: return row expr in return statement.
 create or replace function composrec() returns record as $$
 begin
@@ -3833,26 +4123,22 @@
   return next (2, 'goodbye')::compostype;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from compos();
- x |    y    
----+---------
- 1 | hello
- 1 | hello
- 1 | hello
-   | 
- 2 | goodbye
-(5 rows)
-
+ERROR:  unknown function: compos()
 drop function compos();
+ERROR:  unknown function: compos()
 -- test: use invalid expr in return statement.
 create or replace function compos() returns compostype as $$
 begin
   return 1 + 1;
 end;
 $$ language plpgsql;
+ERROR:  unsupported binary operator: <int> + <int> (returning <tuple{int AS x, varchar AS y}>)
 select compos();
-ERROR:  cannot return non-composite value from function returning composite type
-CONTEXT:  PL/pgSQL function compos() line 3 at RETURN
+ERROR:  unknown function: compos()
 -- RETURN variable is a different code path ...
 create or replace function compos() returns compostype as $$
 declare x int := 42;
@@ -3861,8 +4147,7 @@
 end;
 $$ language plpgsql;
 select * from compos();
-ERROR:  cannot return non-composite value from function returning composite type
-CONTEXT:  PL/pgSQL function compos() line 4 at RETURN
+ERROR:  could not parse "42" as type tuple{int AS x, varchar AS y}: record must be enclosed in ( and )
 drop function compos();
 -- test: invalid use of composite variable in scalar-returning function
 create or replace function compos() returns int as $$
@@ -3874,8 +4159,7 @@
 end;
 $$ language plpgsql;
 select compos();
-ERROR:  invalid input syntax for type integer: "(1,hello)"
-CONTEXT:  PL/pgSQL function compos() while casting return value to function's return type
+ERROR:  could not parse "(1,hello)" as type int: strconv.ParseInt: parsing "(1,hello)": invalid syntax
 -- test: invalid use of composite expression in scalar-returning function
 create or replace function compos() returns int as $$
 begin
@@ -3883,8 +4167,7 @@
 end;
 $$ language plpgsql;
 select compos();
-ERROR:  invalid input syntax for type integer: "(1,hello)"
-CONTEXT:  PL/pgSQL function compos() while casting return value to function's return type
+ERROR:  could not parse "(1,hello)" as type int: strconv.ParseInt: parsing "(1,hello)": invalid syntax
 drop function compos();
 drop type compostype;
 --
@@ -3904,7 +4187,6 @@
 HINT:  some hint
 ERROR:  1 2 3
 DETAIL:  some detail info
-CONTEXT:  PL/pgSQL function raise_test() line 5 at RAISE
 -- Since we can't actually see the thrown SQLSTATE in default psql output,
 -- test it like this; this also tests re-RAISE
 create or replace function raise_test() returns void as $$
@@ -3917,11 +4199,33 @@
       raise;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  raise 'check me'
+     using errcode = 'division_by_zero', detail = 'some detail info';
+  exception
+    when others then
+      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
+      raise;
+           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-NOTICE:  SQLSTATE: 22012 SQLERRM: check me
-ERROR:  check me
+NOTICE:  1 2 3
+DETAIL:  some detail info
+HINT:  some hint
+ERROR:  1 2 3
 DETAIL:  some detail info
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise 'check me'
@@ -3932,11 +4236,33 @@
       raise;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  raise 'check me'
+     using errcode = '1234F', detail = 'some detail info';
+  exception
+    when others then
+      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
+      raise;
+           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-NOTICE:  SQLSTATE: 1234F SQLERRM: check me
-ERROR:  check me
+NOTICE:  1 2 3
+DETAIL:  some detail info
+HINT:  some hint
+ERROR:  1 2 3
 DETAIL:  some detail info
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 -- SQLSTATE specification in WHEN
 create or replace function raise_test() returns void as $$
 begin
@@ -3948,11 +4274,33 @@
       raise;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  raise 'check me'
+     using errcode = '1234F', detail = 'some detail info';
+  exception
+    when sqlstate '1234F' then
+      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
+      raise;
+           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-NOTICE:  SQLSTATE: 1234F SQLERRM: check me
-ERROR:  check me
+NOTICE:  1 2 3
+DETAIL:  some detail info
+HINT:  some hint
+ERROR:  1 2 3
 DETAIL:  some detail info
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise division_by_zero using detail = 'some detail info';
@@ -3962,11 +4310,32 @@
       raise;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  raise division_by_zero using detail = 'some detail info';
+  exception
+    when others then
+      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
+      raise;
+           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-NOTICE:  SQLSTATE: 22012 SQLERRM: division_by_zero
-ERROR:  division_by_zero
+NOTICE:  1 2 3
+DETAIL:  some detail info
+HINT:  some hint
+ERROR:  1 2 3
 DETAIL:  some detail info
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise division_by_zero;
@@ -3974,7 +4343,6 @@
 $$ language plpgsql;
 select raise_test();
 ERROR:  division_by_zero
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise sqlstate '1234F';
@@ -3982,7 +4350,6 @@
 $$ language plpgsql;
 select raise_test();
 ERROR:  1234F
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise division_by_zero using message = 'custom' || ' message';
@@ -3990,7 +4357,6 @@
 $$ language plpgsql;
 select raise_test();
 ERROR:  custom message
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise using message = 'custom' || ' message', errcode = '22012';
@@ -3998,34 +4364,48 @@
 $$ language plpgsql;
 select raise_test();
 ERROR:  custom message
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
 -- conflict on message
 create or replace function raise_test() returns void as $$
 begin
   raise notice 'some message' using message = 'custom' || ' message', errcode = '22012';
 end;
 $$ language plpgsql;
-select raise_test();
 ERROR:  RAISE option already specified: MESSAGE
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
+select raise_test();
+ERROR:  custom message
 -- conflict on errcode
 create or replace function raise_test() returns void as $$
 begin
   raise division_by_zero using message = 'custom' || ' message', errcode = '22012';
 end;
 $$ language plpgsql;
-select raise_test();
 ERROR:  RAISE option already specified: ERRCODE
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
+select raise_test();
+ERROR:  custom message
 -- nothing to re-RAISE
 create or replace function raise_test() returns void as $$
 begin
   raise;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  raise;
+       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-ERROR:  RAISE without parameters cannot be used outside an exception handler
-CONTEXT:  PL/pgSQL function raise_test() line 3 at RAISE
+ERROR:  custom message
 -- test access to exception data
 create function zero_divide() returns int as $$
 declare v int := 0;
@@ -4033,6 +4413,7 @@
   return 10 / v;
 end;
 $$ language plpgsql;
+ERROR:  unsupported binary operator: <int> / <int> (returning <int>)
 create or replace function raise_test() returns void as $$
 begin
   raise exception 'custom exception'
@@ -4055,13 +4436,27 @@
     _sqlstate, _message, replace(_context, E'\n', ' <- ');
 end;
 $$ language plpgsql;
-select stacked_diagnostics_test();
-NOTICE:  sqlstate: 22012, message: division by zero, context: [PL/pgSQL function zero_divide() line 4 at RETURN <- SQL statement "SELECT zero_divide()" <- PL/pgSQL function stacked_diagnostics_test() line 6 at PERFORM]
- stacked_diagnostics_test 
---------------------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare _sqlstate text;
+        _message text;
+        _context text;
+begin
+  perform zero_divide();
+                       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select stacked_diagnostics_test();
+ERROR:  unknown function: stacked_diagnostics_test()
 create or replace function stacked_diagnostics_test() returns void as $$
 declare _detail text;
         _hint text;
@@ -4076,13 +4471,27 @@
   raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;
 end;
 $$ language plpgsql;
-select stacked_diagnostics_test();
-NOTICE:  message: custom exception, detail: some detail of custom exception, hint: some hint related to custom exception
- stacked_diagnostics_test 
---------------------------
- 
-(1 row)
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare _detail text;
+        _hint text;
+        _message text;
+begin
+  perform raise_test();
+                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select stacked_diagnostics_test();
+ERROR:  unknown function: stacked_diagnostics_test()
 -- fail, cannot use stacked diagnostics statement outside handler
 create or replace function stacked_diagnostics_test() returns void as $$
 declare _detail text;
@@ -4096,11 +4505,25 @@
   raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_get_diag is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select stacked_diagnostics_test();
-ERROR:  GET STACKED DIAGNOSTICS cannot be used outside an exception handler
-CONTEXT:  PL/pgSQL function stacked_diagnostics_test() line 6 at GET STACKED DIAGNOSTICS
+ERROR:  unknown function: stacked_diagnostics_test()
 drop function zero_divide();
+ERROR:  unknown function: zero_divide()
 drop function stacked_diagnostics_test();
+ERROR:  unknown function: stacked_diagnostics_test()
 -- check cases where implicit SQLSTATE variable could be confused with
 -- SQLSTATE as a keyword, cf bug #5524
 create or replace function raise_test() returns void as $$
@@ -4112,10 +4535,26 @@
     raise sqlstate '22012' using message = 'substitute message';
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+begin
+  perform 1/0;
+             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 select raise_test();
-NOTICE:  22012
-ERROR:  substitute message
-CONTEXT:  PL/pgSQL function raise_test() line 7 at RAISE
+ERROR:  custom exception
+DETAIL:  some detail of custom exception
+HINT:  some hint related to custom exception
 drop function raise_test();
 -- test passing column_name, constraint_name, datatype_name, table_name
 -- and schema_name error fields
@@ -4143,14 +4582,23 @@
     _column_name, _constraint_name, _datatype_name, _table_name, _schema_name;
 end;
 $$ language plpgsql;
-select stacked_diagnostics_test();
-NOTICE:  column >>some column name<<, constraint >>some constraint name<<, type >>some datatype name<<, table >>some table name<<, schema >>some schema name<<
- stacked_diagnostics_test 
---------------------------
- 
-(1 row)
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_get_diag is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select stacked_diagnostics_test();
+ERROR:  unknown function: stacked_diagnostics_test()
 drop function stacked_diagnostics_test();
+ERROR:  unknown function: stacked_diagnostics_test()
 -- test variadic functions
 create or replace function vari(variadic int[])
 returns void as $$
@@ -4159,36 +4607,34 @@
     raise notice '%', $1[i];
   end loop; end;
 $$ language plpgsql;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create or replace function vari(variadic int[])
+                                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select vari(1,2,3,4,5);
-NOTICE:  1
-NOTICE:  2
-NOTICE:  3
-NOTICE:  4
-NOTICE:  5
- vari 
-------
- 
-(1 row)
-
+ERROR:  unknown function: vari()
 select vari(3,4,5);
-NOTICE:  3
-NOTICE:  4
-NOTICE:  5
- vari 
-------
- 
-(1 row)
-
+ERROR:  unknown function: vari()
 select vari(variadic array[5,6,7]);
-NOTICE:  5
-NOTICE:  6
-NOTICE:  7
- vari 
-------
- 
-(1 row)
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+select vari(variadic array[5,6,7])
+                                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
 drop function vari(int[]);
+ERROR:  unknown function: vari()
 -- coercion test
 create or replace function pleast(variadic numeric[])
 returns numeric as $$
@@ -4200,30 +4646,20 @@
   return aux;
 end;
 $$ language plpgsql immutable strict;
+ERROR:  at or near "variadic": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create or replace function pleast(variadic numeric[])
+                                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/88947/_version_
 select pleast(10,1,2,3,-16);
- pleast 
---------
-    -16
-(1 row)
-
+ERROR:  unknown function: pleast()
 select pleast(10.2,2.2,-1.1);
- pleast 
---------
-   -1.1
-(1 row)
-
+ERROR:  unknown function: pleast()
 select pleast(10.2,10, -20);
- pleast 
---------
-    -20
-(1 row)
-
+ERROR:  unknown function: pleast()
 select pleast(10,20, -1.0);
- pleast 
---------
-   -1.0
-(1 row)
-
+ERROR:  unknown function: pleast()
 -- in case of conflict, non-variadic version is preferred
 create or replace function pleast(numeric)
 returns numeric as $$
@@ -4232,31 +4668,24 @@
   return $1;
 end;
 $$ language plpgsql immutable strict;
+ERROR:  no value provided for placeholder: $1
 select pleast(10);
-NOTICE:  non-variadic function called
- pleast 
---------
-     10
-(1 row)
-
+ERROR:  unknown function: pleast()
 drop function pleast(numeric[]);
+ERROR:  unknown function: pleast()
 drop function pleast(numeric);
+ERROR:  unknown function: pleast()
 -- test table functions
 create function tftest(int) returns table(a int, b int) as $$
 begin
   return query select $1, $1+i from generate_series(1,5) g(i);
 end;
 $$ language plpgsql immutable strict;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from tftest(10);
- a  | b  
-----+----
- 10 | 11
- 10 | 12
- 10 | 13
- 10 | 14
- 10 | 15
-(5 rows)
-
+ERROR:  unknown function: tftest()
 create or replace function tftest(a1 int) returns table(a int, b int) as $$
 begin
   a := a1; b := a1 + 1;
@@ -4265,14 +4694,13 @@
   return next;
 end;
 $$ language plpgsql immutable strict;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from tftest(10);
-  a  |  b  
------+-----
-  10 |  11
- 100 | 101
-(2 rows)
-
+ERROR:  unknown function: tftest()
 drop function tftest(int);
+ERROR:  unknown function: tftest()
 create function rttest()
 returns setof int as $$
 declare rc int;
@@ -4291,19 +4719,11 @@
   raise notice '% %', found, rc;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from rttest();
-NOTICE:  t 2
-NOTICE:  f 0
-NOTICE:  t 2
-NOTICE:  f 0
- rttest 
---------
-     10
-     20
-     10
-     20
-(4 rows)
-
+ERROR:  unknown function: rttest()
 -- check some error cases, too
 create or replace function rttest()
 returns setof int as $$
@@ -4311,25 +4731,26 @@
   return query select 10 into no_such_table;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from rttest();
-ERROR:  SELECT INTO query does not return tuples
-CONTEXT:  SQL statement "select 10 into no_such_table"
-PL/pgSQL function rttest() line 3 at RETURN QUERY
+ERROR:  unknown function: rttest()
 create or replace function rttest()
 returns setof int as $$
 begin
   return query execute 'select 10 into no_such_table';
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from rttest();
-ERROR:  SELECT INTO query does not return tuples
-CONTEXT:  SQL statement "select 10 into no_such_table"
-PL/pgSQL function rttest() line 3 at RETURN QUERY
+ERROR:  unknown function: rttest()
 select * from no_such_table;
 ERROR:  relation "no_such_table" does not exist
-LINE 1: select * from no_such_table;
-                      ^
 drop function rttest();
+ERROR:  unknown function: rttest()
 -- Test for proper cleanup at subtransaction exit.  This example
 -- exposed a bug in PG 8.2.
 CREATE FUNCTION leaker_1(fail BOOL) RETURNS INTEGER AS $$
@@ -4344,6 +4765,7 @@
   RETURN 1;
 END;
 $$ LANGUAGE plpgsql;
+ERROR:  unknown function: leaker_2()
 CREATE FUNCTION leaker_2(fail BOOL, OUT error_code INTEGER, OUT new_id INTEGER)
   RETURNS RECORD AS $$
 BEGIN
@@ -4356,18 +4778,11 @@
 END;
 $$ LANGUAGE plpgsql;
 SELECT * FROM leaker_1(false);
- leaker_1 
-----------
-        1
-(1 row)
-
+ERROR:  unknown function: leaker_1()
 SELECT * FROM leaker_1(true);
- leaker_1 
-----------
-        0
-(1 row)
-
+ERROR:  unknown function: leaker_1()
 DROP FUNCTION leaker_1(bool);
+ERROR:  unknown function: leaker_1()
 DROP FUNCTION leaker_2(bool);
 -- Test for appropriate cleanup of non-simple expression evaluations
 -- (bug in all versions prior to August 2010)
@@ -4385,13 +4800,27 @@
   RETURN arr;
 END;
 $$ LANGUAGE plpgsql;
+ERROR:  at or near ";": at or near "arr": syntax error
+DETAIL:  source SQL:
+arr[(SELECT i)][(SELECT i+1)] := (SELECT lr)
+^
+--
+source SQL:
+DECLARE
+  arr text[];
+  lr text;
+  i integer;
+BEGIN
+  arr := array[array['foo','bar'], array['baz', 'quux']];
+  lr := 'fool';
+  i := 1;
+  -- use sub-SELECTs to make expressions non-simple
+  arr[(SELECT i)][(SELECT i+1)] := (SELECT lr);
+                                              ^
 SELECT nonsimple_expr_test();
-   nonsimple_expr_test   
--------------------------
- {{foo,fool},{baz,quux}}
-(1 row)
-
+ERROR:  unknown function: nonsimple_expr_test()
 DROP FUNCTION nonsimple_expr_test();
+ERROR:  unknown function: nonsimple_expr_test()
 CREATE FUNCTION nonsimple_expr_test() RETURNS integer AS $$
 declare
    i integer NOT NULL := 0;
@@ -4405,13 +4834,13 @@
   return i;
 end;
 $$ LANGUAGE plpgsql;
+ERROR:  unimplemented: not-null PL/pgSQL variables are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105243/_version_
 SELECT nonsimple_expr_test();
- nonsimple_expr_test 
----------------------
-                   1
-(1 row)
-
+ERROR:  unknown function: nonsimple_expr_test()
 DROP FUNCTION nonsimple_expr_test();
+ERROR:  unknown function: nonsimple_expr_test()
 --
 -- Test cases involving recursion and error recovery in simple expressions
 -- (bugs in all versions before October 2010).  The problems are most
@@ -4427,15 +4856,13 @@
   end if;
 end;
 $$ language plpgsql;
+ERROR:  unknown function: sql_recurse()
 -- "limit" is to prevent this from being inlined
 create function sql_recurse(float8) returns float8 as
 $$ select recurse($1) limit 1; $$ language sql;
+ERROR:  unknown function: recurse()
 select recurse(10);
- recurse 
----------
-       0
-(1 row)
-
+ERROR:  unknown function: recurse()
 create function error1(text) returns text language sql as
 $$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$;
 create function error2(p_name_table text) returns text language plpgsql as $$
@@ -4444,12 +4871,13 @@
 end$$;
 BEGIN;
 create table public.stuffs (stuff text);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 SAVEPOINT a;
+WARNING:  there is no transaction in progress
 select error2('nonexistent.stuffs');
-ERROR:  schema "nonexistent" does not exist
-CONTEXT:  SQL function "error1" statement 1
-PL/pgSQL function error2(text) line 3 at RETURN
+ERROR:  relation "nonexistent.stuffs" does not exist
 ROLLBACK TO a;
+ERROR:  savepoint "a" does not exist
 select error2('public.stuffs');
  error2 
 --------
@@ -4457,13 +4885,30 @@
 (1 row)
 
 rollback;
+WARNING:  there is no transaction in progress
 drop function error2(p_name_table text);
 drop function error1(text);
 -- Test for proper handling of cast-expression caching
 create function sql_to_date(integer) returns date as $$
 select $1::text::date
 $$ language sql immutable strict;
+ERROR:  stable statement not allowed in immutable function: SELECT $1::STRING::DATE
 create cast (integer as date) with function sql_to_date(integer) as assignment;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create cast (integer as date) with function sql_to_date(integer) as assignment
+            ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 create function cast_invoker(integer) returns date as $$
 begin
   return $1;
@@ -4471,56 +4916,67 @@
 select cast_invoker(20150717);
  cast_invoker 
 --------------
- 07-17-2015
+ 2015-07-17
 (1 row)
 
 select cast_invoker(20150718);  -- second call crashed in pre-release 9.5
  cast_invoker 
 --------------
- 07-18-2015
+ 2015-07-18
 (1 row)
 
 begin;
 select cast_invoker(20150717);
  cast_invoker 
 --------------
- 07-17-2015
+ 2015-07-17
 (1 row)
 
 select cast_invoker(20150718);
  cast_invoker 
 --------------
- 07-18-2015
+ 2015-07-18
 (1 row)
 
 savepoint s1;
 select cast_invoker(20150718);
  cast_invoker 
 --------------
- 07-18-2015
+ 2015-07-18
 (1 row)
 
 select cast_invoker(-1); -- fails
-ERROR:  invalid input syntax for type date: "-1"
-CONTEXT:  SQL function "sql_to_date" statement 1
-PL/pgSQL function cast_invoker(integer) while casting return value to function's return type
+ERROR:  parsing as type date: missing required date fields
+DETAIL:  Wanted: [ Year Day Era Hour Minute Second Nanos Meridian TZHour TZMinute TZSecond ]
+Already found in input: [ Month ]
 rollback to savepoint s1;
 select cast_invoker(20150719);
  cast_invoker 
 --------------
- 07-19-2015
+ 2015-07-19
 (1 row)
 
 select cast_invoker(20150720);
  cast_invoker 
 --------------
- 07-20-2015
+ 2015-07-20
 (1 row)
 
 commit;
 drop function cast_invoker(integer);
 drop function sql_to_date(integer) cascade;
-NOTICE:  drop cascades to cast from integer to date
+ERROR:  unimplemented: drop function cascade not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Test handling of cast cache inside DO blocks
 -- (to check the original crash case, this must be a cast not previously
 -- used in this session)
@@ -4534,45 +4990,29 @@
   return 1/0;
 end
 $$;
+ERROR:  unsupported binary operator: <int> / <int> (returning <int>)
 select fail();
-ERROR:  division by zero
-CONTEXT:  SQL expression "1/0"
-PL/pgSQL function fail() line 3 at RETURN
+ERROR:  unknown function: fail()
 select fail();
-ERROR:  division by zero
-CONTEXT:  SQL expression "1/0"
-PL/pgSQL function fail() line 3 at RETURN
+ERROR:  unknown function: fail()
 drop function fail();
+ERROR:  unknown function: fail()
 -- Test handling of string literals.
 set standard_conforming_strings = off;
+ERROR:  invalid value for parameter "standard_conforming_strings": "off"
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: on
 create or replace function strtest() returns text as $$
 begin
   raise notice 'foo\\bar\041baz';
   return 'foo\\bar\041baz';
 end
 $$ language plpgsql;
-WARNING:  nonstandard use of \\ in a string literal
-LINE 3:   raise notice 'foo\\bar\041baz';
-                       ^
-HINT:  Use the escape string syntax for backslashes, e.g., E'\\'.
-WARNING:  nonstandard use of \\ in a string literal
-LINE 4:   return 'foo\\bar\041baz';
-                 ^
-HINT:  Use the escape string syntax for backslashes, e.g., E'\\'.
-WARNING:  nonstandard use of \\ in a string literal
-LINE 4:   return 'foo\\bar\041baz';
-                 ^
-HINT:  Use the escape string syntax for backslashes, e.g., E'\\'.
 select strtest();
-NOTICE:  foo\bar!baz
-WARNING:  nonstandard use of \\ in a string literal
-LINE 1: 'foo\\bar\041baz'
-        ^
-HINT:  Use the escape string syntax for backslashes, e.g., E'\\'.
-QUERY:  'foo\\bar\041baz'
-   strtest   
--------------
- foo\bar!baz
+NOTICE:  foo\\bar\041baz
+     strtest     
+-----------------
+ foo\\bar\041baz
 (1 row)
 
 create or replace function strtest() returns text as $$
@@ -4625,21 +5065,26 @@
         RAISE NOTICE '%, %', r.roomno, r.comment;
     END LOOP;
 END$$;
-NOTICE:  001, Entrance
-NOTICE:  002, Office
-NOTICE:  003, Office
-NOTICE:  004, Technical
-NOTICE:  101, Office
-NOTICE:  102, Conference
-NOTICE:  103, Restroom
-NOTICE:  104, Technical
-NOTICE:  105, Office
-NOTICE:  106, Office
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DECLARE r record;
+BEGIN
+    FOR r IN SELECT rtrim(roomno) AS roomno, comment FROM Room ORDER BY roomno
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- these are to check syntax error reporting
 DO LANGUAGE plpgsql $$begin return 1; end$$;
-ERROR:  RETURN cannot have a parameter in function returning void
-LINE 1: DO LANGUAGE plpgsql $$begin return 1; end$$;
-                                           ^
+ERROR:  RETURN cannot have a parameter in a procedure
 DO $$
 DECLARE r record;
 BEGIN
@@ -4648,11 +5093,23 @@
         RAISE NOTICE '%, %', r.roomno, r.comment;
     END LOOP;
 END$$;
-ERROR:  column "foo" does not exist
-LINE 1: SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomn...
-                                        ^
-QUERY:  SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomno
-CONTEXT:  PL/pgSQL function inline_code_block line 4 at FOR over SELECT rows
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DECLARE r record;
+BEGIN
+    FOR r IN SELECT rtrim(roomno) AS roomno, foo FROM Room ORDER BY roomno
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Check handling of errors thrown from/into anonymous code blocks.
 do $outer$
 begin
@@ -4672,16 +5129,19 @@
   end loop;
 end;
 $outer$;
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
-NOTICE:  caught division by zero
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_dyn_exec is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Check variable scoping -- a var is not available in its own or prior
 -- default expressions, but it is available in later ones.
 do $$
@@ -4691,10 +5151,6 @@
 end;
 $$;
 ERROR:  column "x" does not exist
-LINE 1: x + 1
-        ^
-QUERY:  x + 1
-CONTEXT:  PL/pgSQL function inline_code_block line 2 during statement block local variable initialization
 do $$
 declare y int := x + 1;  -- error
         x int := 42;
@@ -4703,10 +5159,6 @@
 end;
 $$;
 ERROR:  column "x" does not exist
-LINE 1: x + 1
-        ^
-QUERY:  x + 1
-CONTEXT:  PL/pgSQL function inline_code_block line 2 during statement block local variable initialization
 do $$
 declare x int := 42;
         y int := x + 1;
@@ -4726,7 +5178,11 @@
   end;
 end;
 $$;
-NOTICE:  x = 44, y = 43, z = 440
+ERROR:  unimplemented: variable shadowing is not yet implemented
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/117508/_version_
+--
+variable "x" shadows a previously defined variable
 -- Check handling of conflicts between plpgsql vars and table columns.
 set plpgsql.variable_conflict = error;
 create function conflict_test() returns setof int8_tbl as $$
@@ -4738,13 +5194,11 @@
   end loop;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from conflict_test();
-ERROR:  column reference "q1" is ambiguous
-LINE 1: select q1,q2 from int8_tbl
-               ^
-DETAIL:  It could refer to either a PL/pgSQL variable or a table column.
-QUERY:  select q1,q2 from int8_tbl
-CONTEXT:  PL/pgSQL function conflict_test() line 5 at FOR over SELECT rows
+ERROR:  unknown function: conflict_test()
 create or replace function conflict_test() returns setof int8_tbl as $$
 #variable_conflict use_variable
 declare r record;
@@ -4755,16 +5209,11 @@
   end loop;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from conflict_test();
- q1 |        q2         
-----+-------------------
- 42 |               456
- 42 |  4567890123456789
- 42 |               123
- 42 |  4567890123456789
- 42 | -4567890123456789
-(5 rows)
-
+ERROR:  unknown function: conflict_test()
 create or replace function conflict_test() returns setof int8_tbl as $$
 #variable_conflict use_column
 declare r record;
@@ -4775,17 +5224,13 @@
   end loop;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: set-returning PL/pgSQL functions are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/105240/_version_
 select * from conflict_test();
-        q1        |        q2         
-------------------+-------------------
-              123 |               456
-              123 |  4567890123456789
- 4567890123456789 |               123
- 4567890123456789 |  4567890123456789
- 4567890123456789 | -4567890123456789
-(5 rows)
-
+ERROR:  unknown function: conflict_test()
 drop function conflict_test();
+ERROR:  unknown function: conflict_test()
 -- Check that an unreserved keyword can be used as a variable name
 create function unreserved_test() returns int as $$
 declare
@@ -4795,12 +5240,15 @@
   return forward;
 end
 $$ language plpgsql;
+ERROR:  at or near "forward": syntax error
+DETAIL:  source SQL:
+declare
+  forward int := 21;
+begin
+  forward := forward * 2;
+  ^
 select unreserved_test();
- unreserved_test 
------------------
-              42
-(1 row)
-
+ERROR:  unknown function: unreserved_test()
 create or replace function unreserved_test() returns int as $$
 declare
   return int := 42;
@@ -4809,12 +5257,20 @@
   return return;
 end
 $$ language plpgsql;
+ERROR:  at or near ";": at or near ":": syntax error
+DETAIL:  source SQL:
+SET ROW (:= return + 1)
+         ^
+--
+source SQL:
+declare
+  return int := 42;
+begin
+  return := return + 1;
+                      ^
+HINT:  try \h SET SESSION
 select unreserved_test();
- unreserved_test 
------------------
-              43
-(1 row)
-
+ERROR:  unknown function: unreserved_test()
 create or replace function unreserved_test() returns int as $$
 declare
   comment int := 21;
@@ -4824,19 +5280,26 @@
   return comment;
 end
 $$ language plpgsql;
+ERROR:  at or near ";": at or near "unreserved_test": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+comment on function unreserved_test() is 'this is a test'
+                    ^
+--
+source SQL:
+declare
+  comment int := 21;
+begin
+  comment := comment * 2;
+  comment on function unreserved_test() is 'this is a test';
+                                                           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/17511/_version_
 select unreserved_test();
- unreserved_test 
------------------
-              42
-(1 row)
-
+ERROR:  unknown function: unreserved_test()
 select obj_description('unreserved_test()'::regprocedure, 'pg_proc');
- obj_description 
------------------
- this is a test
-(1 row)
-
+ERROR:  unknown function: unreserved_test()
 drop function unreserved_test();
+ERROR:  unknown function: unreserved_test()
 --
 -- Test FOREACH over arrays
 --
@@ -4850,26 +5313,27 @@
   end loop;
   end;
 $$ language plpgsql;
-select foreach_test(ARRAY[1,2,3,4]);
-NOTICE:  1
-NOTICE:  2
-NOTICE:  3
-NOTICE:  4
- foreach_test 
---------------
- 
-(1 row)
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x int;
+begin
+  foreach x in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-select foreach_test(ARRAY[[1,2],[3,4]]);
-NOTICE:  1
-NOTICE:  2
-NOTICE:  3
-NOTICE:  4
- foreach_test 
---------------
- 
-(1 row)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select foreach_test(ARRAY[1,2,3,4]);
+ERROR:  unknown function: foreach_test()
+select foreach_test(ARRAY[[1,2],[3,4]]);
+ERROR:  unknown function: foreach_test()
 create or replace function foreach_test(anyarray)
 returns void as $$
 declare x int;
@@ -4880,13 +5344,28 @@
   end loop;
   end;
 $$ language plpgsql;
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x int;
+begin
+  foreach x slice 1 in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- should fail
 select foreach_test(ARRAY[1,2,3,4]);
-ERROR:  FOREACH ... SLICE loop variable must be of an array type
-CONTEXT:  PL/pgSQL function foreach_test(anyarray) line 4 at FOREACH over array
+ERROR:  unknown function: foreach_test()
 select foreach_test(ARRAY[[1,2],[3,4]]);
-ERROR:  FOREACH ... SLICE loop variable must be of an array type
-CONTEXT:  PL/pgSQL function foreach_test(anyarray) line 4 at FOREACH over array
+ERROR:  unknown function: foreach_test()
 create or replace function foreach_test(anyarray)
 returns void as $$
 declare x int[];
@@ -4897,21 +5376,27 @@
   end loop;
   end;
 $$ language plpgsql;
-select foreach_test(ARRAY[1,2,3,4]);
-NOTICE:  {1,2,3,4}
- foreach_test 
---------------
- 
-(1 row)
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x int[];
+begin
+  foreach x slice 1 in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-select foreach_test(ARRAY[[1,2],[3,4]]);
-NOTICE:  {1,2}
-NOTICE:  {3,4}
- foreach_test 
---------------
- 
-(1 row)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select foreach_test(ARRAY[1,2,3,4]);
+ERROR:  unknown function: foreach_test()
+select foreach_test(ARRAY[[1,2],[3,4]]);
+ERROR:  unknown function: foreach_test()
 -- higher level of slicing
 create or replace function foreach_test(anyarray)
 returns void as $$
@@ -4923,26 +5408,31 @@
   end loop;
   end;
 $$ language plpgsql;
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x int[];
+begin
+  foreach x slice 2 in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- should fail
 select foreach_test(ARRAY[1,2,3,4]);
-ERROR:  slice dimension (2) is out of the valid range 0..1
-CONTEXT:  PL/pgSQL function foreach_test(anyarray) line 4 at FOREACH over array
+ERROR:  unknown function: foreach_test()
 -- ok
 select foreach_test(ARRAY[[1,2],[3,4]]);
-NOTICE:  {{1,2},{3,4}}
- foreach_test 
---------------
- 
-(1 row)
-
+ERROR:  unknown function: foreach_test()
 select foreach_test(ARRAY[[[1,2]],[[3,4]]]);
-NOTICE:  {{1,2}}
-NOTICE:  {{3,4}}
- foreach_test 
---------------
- 
-(1 row)
-
+ERROR:  unknown function: foreach_test()
 create type xy_tuple AS (x int, y int);
 -- iteration over array of records
 create or replace function foreach_test(anyarray)
@@ -4955,25 +5445,27 @@
   end loop;
   end;
 $$ language plpgsql;
-select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
-NOTICE:  (10,20)
-NOTICE:  (40,69)
-NOTICE:  (35,78)
- foreach_test 
---------------
- 
-(1 row)
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare r record;
+begin
+  foreach r in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
-NOTICE:  (10,20)
-NOTICE:  (40,69)
-NOTICE:  (35,78)
-NOTICE:  (88,76)
- foreach_test 
---------------
- 
-(1 row)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
+select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
 create or replace function foreach_test(anyarray)
 returns void as $$
 declare x int; y int;
@@ -4984,25 +5476,27 @@
   end loop;
   end;
 $$ language plpgsql;
-select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
-NOTICE:  x = 10, y = 20
-NOTICE:  x = 40, y = 69
-NOTICE:  x = 35, y = 78
- foreach_test 
---------------
- 
-(1 row)
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x int; y int;
+begin
+  foreach x, y in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
-NOTICE:  x = 10, y = 20
-NOTICE:  x = 40, y = 69
-NOTICE:  x = 35, y = 78
-NOTICE:  x = 88, y = 76
- foreach_test 
---------------
- 
-(1 row)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
 
+select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
+select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
 -- slicing over array of composite types
 create or replace function foreach_test(anyarray)
 returns void as $$
@@ -5014,22 +5508,29 @@
   end loop;
   end;
 $$ language plpgsql;
-select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
-NOTICE:  {"(10,20)","(40,69)","(35,78)"}
- foreach_test 
---------------
- 
-(1 row)
+ERROR:  at or near "foreach": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare x xy_tuple[];
+begin
+  foreach x slice 1 in array $1
+  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
-NOTICE:  {"(10,20)","(40,69)"}
-NOTICE:  {"(35,78)","(88,76)"}
- foreach_test 
---------------
- 
-(1 row)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
 
+We appreciate your feedback.
+
+select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
+select foreach_test(ARRAY[[(10,20),(40,69)],[(35,78),(88,76)]]::xy_tuple[]);
+ERROR:  unknown function: foreach_test()
 drop function foreach_test(anyarray);
+ERROR:  unknown function: foreach_test()
 drop type xy_tuple;
 --
 -- Assorted tests for array subscript assignment
@@ -5043,28 +5544,30 @@
   r.ar[2] := 'replace';
   return r.ar;
 end$$;
+ERROR:  at or near "[": syntax error
+DETAIL:  source SQL:
+declare
+ r record;
+begin
+  r := row(12, '{foo,bar,baz}')::rtype;
+  r.ar[2] := 'replace';
+      ^
 select arrayassign1();
-   arrayassign1    
--------------------
- {foo,replace,baz}
-(1 row)
-
+ERROR:  unknown function: arrayassign1()
 select arrayassign1(); -- try again to exercise internal caching
-   arrayassign1    
--------------------
- {foo,replace,baz}
-(1 row)
-
+ERROR:  unknown function: arrayassign1()
 create domain orderedarray as int[2]
   constraint sorted check (value[1] < value[2]);
+ERROR:  at or near "as": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create domain orderedarray as int[2]
+                           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27796/_version_
 select '{1,2}'::orderedarray;
- orderedarray 
---------------
- {1,2}
-(1 row)
-
+ERROR:  type "orderedarray" does not exist
 select '{2,1}'::orderedarray;  -- fail
-ERROR:  value for domain orderedarray violates check constraint "sorted"
+ERROR:  type "orderedarray" does not exist
 create function testoa(x1 int, x2 int, x3 int) returns orderedarray
 language plpgsql as $$
 declare res orderedarray;
@@ -5073,26 +5576,19 @@
   res[2] := x3;
   return res;
 end$$;
+ERROR:  type "orderedarray" does not exist
 select testoa(1,2,3);
- testoa 
---------
- {1,3}
-(1 row)
-
+ERROR:  unknown function: testoa()
 select testoa(1,2,3); -- try again to exercise internal caching
- testoa 
---------
- {1,3}
-(1 row)
-
+ERROR:  unknown function: testoa()
 select testoa(2,1,3); -- fail at initial assign
-ERROR:  value for domain orderedarray violates check constraint "sorted"
-CONTEXT:  PL/pgSQL function testoa(integer,integer,integer) line 4 at assignment
+ERROR:  unknown function: testoa()
 select testoa(1,2,1); -- fail at update
-ERROR:  value for domain orderedarray violates check constraint "sorted"
-CONTEXT:  PL/pgSQL function testoa(integer,integer,integer) line 5 at assignment
+ERROR:  unknown function: testoa()
 drop function arrayassign1();
+ERROR:  unknown function: arrayassign1()
 drop function testoa(x1 int, x2 int, x3 int);
+ERROR:  unknown function: testoa()
 --
 -- Test handling of expanded arrays
 --
@@ -5116,17 +5612,11 @@
 select i, a from
   (select returns_rw_array(1) as a offset 0) ss,
   lateral consumes_rw_array(a) i;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Nested Loop
-   Output: i.i, (returns_rw_array(1))
-   ->  Result
-         Output: returns_rw_array(1)
-   ->  Function Scan on public.consumes_rw_array i
-         Output: i.i
-         Function Call: consumes_rw_array((returns_rw_array(1)))
-(7 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select i, a from
   (select returns_rw_array(1) as a offset 0) ss,
   lateral consumes_rw_array(a) i;
@@ -5137,13 +5627,11 @@
 
 explain (verbose, costs off)
 select consumes_rw_array(a), a from returns_rw_array(1) a;
-                 QUERY PLAN                 
---------------------------------------------
- Function Scan on public.returns_rw_array a
-   Output: consumes_rw_array(a), a
-   Function Call: returns_rw_array(1)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select consumes_rw_array(a), a from returns_rw_array(1) a;
  consumes_rw_array |   a   
 -------------------+-------
@@ -5153,12 +5641,11 @@
 explain (verbose, costs off)
 select consumes_rw_array(a), a from
   (values (returns_rw_array(1)), (returns_rw_array(2))) v(a);
-                             QUERY PLAN                              
----------------------------------------------------------------------
- Values Scan on "*VALUES*"
-   Output: consumes_rw_array("*VALUES*".column1), "*VALUES*".column1
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select consumes_rw_array(a), a from
   (values (returns_rw_array(1)), (returns_rw_array(2))) v(a);
  consumes_rw_array |   a   
@@ -5190,6 +5677,19 @@
   return 2 * $1;
 end;
 $$ language plpgsql;
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_get_diag is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 create or replace function outer_func(int)
 returns int as $$
 declare
@@ -5201,6 +5701,7 @@
   return myresult;
 end;
 $$ language plpgsql;
+ERROR:  unknown function: inner_func()
 create or replace function outer_outer_func(int)
 returns int as $$
 declare
@@ -5212,44 +5713,18 @@
   return myresult;
 end;
 $$ language plpgsql;
+ERROR:  unknown function: outer_func()
 select outer_outer_func(10);
-NOTICE:  calling down into outer_func()
-NOTICE:  calling down into inner_func()
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 4 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 7 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  lets make sure we didnt break anything
-NOTICE:  inner_func() done
-NOTICE:  outer_func() done
- outer_outer_func 
-------------------
-               20
-(1 row)
-
+ERROR:  unknown function: outer_outer_func()
 -- repeated call should work
 select outer_outer_func(20);
-NOTICE:  calling down into outer_func()
-NOTICE:  calling down into inner_func()
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 4 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 7 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  lets make sure we didnt break anything
-NOTICE:  inner_func() done
-NOTICE:  outer_func() done
- outer_outer_func 
-------------------
-               40
-(1 row)
-
+ERROR:  unknown function: outer_outer_func()
 drop function outer_outer_func(int);
+ERROR:  unknown function: outer_outer_func()
 drop function outer_func(int);
+ERROR:  unknown function: outer_func()
 drop function inner_func(int);
+ERROR:  unknown function: inner_func()
 -- access to call stack from exception
 create function inner_func(int)
 returns int as $$
@@ -5272,6 +5747,26 @@
   return 2 * $1;
 end;
 $$ language plpgsql;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+declare
+  _context text;
+  sx int := 5;
+begin
+  begin
+    perform sx / 0;
+                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 create or replace function outer_func(int)
 returns int as $$
 declare
@@ -5283,6 +5778,7 @@
   return myresult;
 end;
 $$ language plpgsql;
+ERROR:  unknown function: inner_func()
 create or replace function outer_outer_func(int)
 returns int as $$
 declare
@@ -5294,44 +5790,18 @@
   return myresult;
 end;
 $$ language plpgsql;
+ERROR:  unknown function: outer_func()
 select outer_outer_func(10);
-NOTICE:  calling down into outer_func()
-NOTICE:  calling down into inner_func()
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 10 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 15 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  lets make sure we didnt break anything
-NOTICE:  inner_func() done
-NOTICE:  outer_func() done
- outer_outer_func 
-------------------
-               20
-(1 row)
-
+ERROR:  unknown function: outer_outer_func()
 -- repeated call should work
 select outer_outer_func(20);
-NOTICE:  calling down into outer_func()
-NOTICE:  calling down into inner_func()
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 10 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  ***PL/pgSQL function inner_func(integer) line 15 at GET DIAGNOSTICS
-PL/pgSQL function outer_func(integer) line 6 at assignment
-PL/pgSQL function outer_outer_func(integer) line 6 at assignment***
-NOTICE:  lets make sure we didnt break anything
-NOTICE:  inner_func() done
-NOTICE:  outer_func() done
- outer_outer_func 
-------------------
-               40
-(1 row)
-
+ERROR:  unknown function: outer_outer_func()
 drop function outer_outer_func(int);
+ERROR:  unknown function: outer_outer_func()
 drop function outer_func(int);
+ERROR:  unknown function: outer_func()
 drop function inner_func(int);
+ERROR:  unknown function: inner_func()
 -- Test pg_routine_oid
 create function current_function(text)
 returns regprocedure as $$
@@ -5342,13 +5812,17 @@
   return fn_oid;
 end;
 $$ language plpgsql;
+ERROR:  at or near "pg_routine_oid": syntax error
+DETAIL:  source SQL:
+declare
+  fn_oid regprocedure;
+begin
+  get diagnostics fn_oid = pg_routine_oid;
+                           ^
 select current_function('foo');
-    current_function    
-------------------------
- current_function(text)
-(1 row)
-
+ERROR:  unknown function: current_function()
 drop function current_function(text);
+ERROR:  unknown function: current_function()
 -- shouldn't fail in DO, even though there's no useful data
 do $$
 declare
@@ -5358,7 +5832,13 @@
   raise notice 'pg_routine_oid = %', fn_oid;
 end;
 $$;
-NOTICE:  pg_routine_oid = 0
+ERROR:  at or near "pg_routine_oid": syntax error
+DETAIL:  source SQL:
+declare
+  fn_oid oid;
+begin
+  get diagnostics fn_oid = pg_routine_oid;
+                           ^
 --
 -- Test ASSERT
 --
@@ -5367,20 +5847,55 @@
   assert 1=1;  -- should succeed
 end;
 $$;
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 do $$
 begin
   assert 1=0;  -- should fail
 end;
 $$;
-ERROR:  assertion failed
-CONTEXT:  PL/pgSQL function inline_code_block line 3 at ASSERT
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 do $$
 begin
   assert NULL;  -- should fail
 end;
 $$;
-ERROR:  assertion failed
-CONTEXT:  PL/pgSQL function inline_code_block line 3 at ASSERT
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- check controlling GUC
 set plpgsql.check_asserts = off;
 do $$
@@ -5388,6 +5903,19 @@
   assert 1=0;  -- won't be tested
 end;
 $$;
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset plpgsql.check_asserts;
 -- test custom message
 do $$
@@ -5396,8 +5924,19 @@
   assert 1=0, format('assertion failed, var = "%s"', var);
 end;
 $$;
-ERROR:  assertion failed, var = "some value"
-CONTEXT:  PL/pgSQL function inline_code_block line 4 at ASSERT
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- ensure assertions are not trapped by 'others'
 do $$
 begin
@@ -5406,32 +5945,55 @@
   null; -- do nothing
 end;
 $$;
-ERROR:  unhandled assertion
-CONTEXT:  PL/pgSQL function inline_code_block line 3 at ASSERT
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_assert is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Test use of plpgsql in a domain check constraint (cf. bug #14414)
 create function plpgsql_domain_check(val int) returns boolean as $$
 begin return val > 0; end
 $$ language plpgsql immutable;
 create domain plpgsql_domain as integer check(plpgsql_domain_check(value));
+ERROR:  at or near "as": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create domain plpgsql_domain as integer check(plpgsql_domain_check(value))
+                             ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27796/_version_
 do $$
 declare v_test plpgsql_domain;
 begin
   v_test := 1;
 end;
 $$;
+ERROR:  type "plpgsql_domain" does not exist
 do $$
 declare v_test plpgsql_domain := 1;
 begin
   v_test := 0;  -- fail
 end;
 $$;
-ERROR:  value for domain plpgsql_domain violates check constraint "plpgsql_domain_check"
-CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
+ERROR:  type "plpgsql_domain" does not exist
 -- Test handling of expanded array passed to a domain constraint (bug #14472)
 create function plpgsql_arr_domain_check(val int[]) returns boolean as $$
 begin return val[1] > 0; end
 $$ language plpgsql immutable;
 create domain plpgsql_arr_domain as int[] check(plpgsql_arr_domain_check(value));
+ERROR:  at or near "as": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create domain plpgsql_arr_domain as int[] check(plpgsql_arr_domain_check(value))
+                                 ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27796/_version_
 do $$
 declare v_test plpgsql_arr_domain;
 begin
@@ -5439,14 +6001,14 @@
   v_test := v_test || 2;
 end;
 $$;
+ERROR:  type "plpgsql_arr_domain" does not exist
 do $$
 declare v_test plpgsql_arr_domain := array[1];
 begin
   v_test := 0 || v_test;  -- fail
 end;
 $$;
-ERROR:  value for domain plpgsql_arr_domain violates check constraint "plpgsql_arr_domain_check"
-CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment
+ERROR:  type "plpgsql_arr_domain" does not exist
 --
 -- test usage of transition tables in AFTER triggers
 --
@@ -5472,25 +6034,40 @@
   RETURN new;
 END;
 $$;
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DECLARE
+  t text;
+  l text;
+BEGIN
+  t = '';
+  FOR l IN EXECUTE
+        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE TRIGGER transition_table_base_ins_trig
   AFTER INSERT ON transition_table_base
   REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable
   FOR EACH STATEMENT
   EXECUTE PROCEDURE transition_table_base_ins_func();
-ERROR:  OLD TABLE can only be specified for a DELETE or UPDATE trigger
+ERROR:  unknown function: transition_table_base_ins_func()
 CREATE TRIGGER transition_table_base_ins_trig
   AFTER INSERT ON transition_table_base
   REFERENCING NEW TABLE AS newtable
   FOR EACH STATEMENT
   EXECUTE PROCEDURE transition_table_base_ins_func();
+ERROR:  unknown function: transition_table_base_ins_func()
 INSERT INTO transition_table_base VALUES (1, 'One'), (2, 'Two');
-INFO:  Named Tuplestore Scan
-  Output: id, val
-
 INSERT INTO transition_table_base VALUES (3, 'Three'), (4, 'Four');
-INFO:  Named Tuplestore Scan
-  Output: id, val
-
 CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
   RETURNS trigger
   LANGUAGE plpgsql
@@ -5512,30 +6089,42 @@
   RETURN new;
 END;
 $$;
+ERROR:  at or near "in": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DECLARE
+  t text;
+  l text;
+BEGIN
+  t = '';
+  FOR l IN EXECUTE
+        ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE TRIGGER transition_table_base_upd_trig
   AFTER UPDATE ON transition_table_base
   REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable
   FOR EACH STATEMENT
   EXECUTE PROCEDURE transition_table_base_upd_func();
+ERROR:  unknown function: transition_table_base_upd_func()
 UPDATE transition_table_base
   SET val = '*' || val || '*'
   WHERE id BETWEEN 2 AND 3;
-INFO:  Hash Full Join
-  Output: COALESCE(ot.id, nt.id), ot.val, nt.val
-  Hash Cond: (ot.id = nt.id)
-  ->  Named Tuplestore Scan
-        Output: ot.id, ot.val
-  ->  Hash
-        Output: nt.id, nt.val
-        ->  Named Tuplestore Scan
-              Output: nt.id, nt.val
-
 CREATE TABLE transition_table_level1
 (
       level1_no serial NOT NULL ,
       level1_node_name varchar(255),
        PRIMARY KEY (level1_no)
 ) WITHOUT OIDS;
+NOTICE:  using sequential values in a primary key does not perform as well as using random UUIDs. See https://www.cockroachlabs.com/docs/_version_/serial.html
 CREATE TABLE transition_table_level2
 (
       level2_no serial NOT NULL ,
@@ -5543,6 +6132,7 @@
       level1_node_name varchar(255),
        PRIMARY KEY (level2_no)
 ) WITHOUT OIDS;
+NOTICE:  using sequential values in a primary key does not perform as well as using random UUIDs. See https://www.cockroachlabs.com/docs/_version_/serial.html
 CREATE TABLE transition_table_status
 (
       level int NOT NULL,
@@ -5563,11 +6153,29 @@
     RETURN NULL;
   END;
 $$;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DECLARE n bigint;
+  BEGIN
+    PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no;
+                                                                              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE TRIGGER transition_table_level1_ri_parent_del_trigger
   AFTER DELETE ON transition_table_level1
   REFERENCING OLD TABLE AS p
   FOR EACH STATEMENT EXECUTE PROCEDURE
     transition_table_level1_ri_parent_del_func();
+ERROR:  unknown function: transition_table_level1_ri_parent_del_func()
 CREATE FUNCTION transition_table_level1_ri_parent_upd_func()
   RETURNS TRIGGER
   LANGUAGE plpgsql
@@ -5595,6 +6203,9 @@
   REFERENCING OLD TABLE AS d NEW TABLE AS i
   FOR EACH STATEMENT EXECUTE PROCEDURE
     transition_table_level1_ri_parent_upd_func();
+ERROR:  unimplemented: statement-level triggers are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/126362/_version_
 CREATE FUNCTION transition_table_level2_ri_child_insupd_func()
   RETURNS TRIGGER
   LANGUAGE plpgsql
@@ -5610,16 +6221,37 @@
     RETURN NULL;
   END;
 $$;
+ERROR:  at or near ";": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+BEGIN
+    PERFORM FROM i
+      LEFT JOIN transition_table_level1 p
+        ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no
+      WHERE p.level1_no IS NULL;
+                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE TRIGGER transition_table_level2_ri_child_ins_trigger
   AFTER INSERT ON transition_table_level2
   REFERENCING NEW TABLE AS i
   FOR EACH STATEMENT EXECUTE PROCEDURE
     transition_table_level2_ri_child_insupd_func();
+ERROR:  unknown function: transition_table_level2_ri_child_insupd_func()
 CREATE TRIGGER transition_table_level2_ri_child_upd_trigger
   AFTER UPDATE ON transition_table_level2
   REFERENCING NEW TABLE AS i
   FOR EACH STATEMENT EXECUTE PROCEDURE
     transition_table_level2_ri_child_insupd_func();
+ERROR:  unknown function: transition_table_level2_ri_child_insupd_func()
 -- create initial test data
 INSERT INTO transition_table_level1 (level1_no)
   SELECT generate_series(1,200);
@@ -5627,6 +6259,7 @@
 INSERT INTO transition_table_level2 (level2_no, parent_no)
   SELECT level2_no, level2_no / 50 + 1 AS parent_no
     FROM generate_series(1,9999) level2_no;
+ERROR:  unsupported binary operator: <decimal> + <int> (returning <int>)
 ANALYZE transition_table_level2;
 INSERT INTO transition_table_status (level, node_no, status)
   SELECT 1, level1_no, 0 FROM transition_table_level1;
@@ -5651,30 +6284,23 @@
   REFERENCING OLD TABLE AS dx
   FOR EACH STATEMENT EXECUTE PROCEDURE
     transition_table_level2_bad_usage_func();
+ERROR:  unimplemented: statement-level triggers are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/126362/_version_
 DELETE FROM transition_table_level2
   WHERE level2_no BETWEEN 301 AND 305;
-ERROR:  relation "dx" cannot be the target of a modifying statement
-CONTEXT:  SQL statement "INSERT INTO dx VALUES (1000000, 1000000, 'x')"
-PL/pgSQL function transition_table_level2_bad_usage_func() line 3 at SQL statement
 DROP TRIGGER transition_table_level2_bad_usage_trigger
   ON transition_table_level2;
+ERROR:  trigger "transition_table_level2_bad_usage_trigger" for table "transition_table_level2" does not exist
 -- attempt modifications which would break RI (should all fail)
 DELETE FROM transition_table_level1
   WHERE level1_no = 25;
-ERROR:  RI error
-CONTEXT:  PL/pgSQL function transition_table_level1_ri_parent_del_func() line 6 at RAISE
 UPDATE transition_table_level1 SET level1_no = -1
   WHERE level1_no = 30;
-ERROR:  RI error
-CONTEXT:  PL/pgSQL function transition_table_level1_ri_parent_upd_func() line 15 at RAISE
 INSERT INTO transition_table_level2 (level2_no, parent_no)
   VALUES (10000, 10000);
-ERROR:  RI error
-CONTEXT:  PL/pgSQL function transition_table_level2_ri_child_insupd_func() line 8 at RAISE
 UPDATE transition_table_level2 SET parent_no = 2000
   WHERE level2_no = 40;
-ERROR:  RI error
-CONTEXT:  PL/pgSQL function transition_table_level2_ri_child_insupd_func() line 8 at RAISE
 -- attempt modifications which would not break RI (should all succeed)
 DELETE FROM transition_table_level1
   WHERE level1_no BETWEEN 201 AND 1000;
@@ -5683,7 +6309,7 @@
 SELECT count(*) FROM transition_table_level1;
  count 
 -------
-   200
+   199
 (1 row)
 
 DELETE FROM transition_table_level2
@@ -5691,7 +6317,7 @@
 SELECT count(*) FROM transition_table_level2;
  count 
 -------
-  9989
+     1
 (1 row)
 
 CREATE TABLE alter_table_under_transition_tables
@@ -5717,36 +6343,30 @@
   REFERENCING OLD TABLE AS d NEW TABLE AS i
   FOR EACH STATEMENT EXECUTE PROCEDURE
     alter_table_under_transition_tables_upd_func();
-ERROR:  TRUNCATE triggers with transition tables are not supported
+ERROR:  TRUNCATE triggers cannot specify transition tables
 -- should work
 CREATE TRIGGER alter_table_under_transition_tables_upd_trigger
   AFTER UPDATE ON alter_table_under_transition_tables
   REFERENCING OLD TABLE AS d NEW TABLE AS i
   FOR EACH STATEMENT EXECUTE PROCEDURE
     alter_table_under_transition_tables_upd_func();
+ERROR:  unimplemented: statement-level triggers are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/126362/_version_
 INSERT INTO alter_table_under_transition_tables
   VALUES (1, '1'), (2, '2'), (3, '3');
 UPDATE alter_table_under_transition_tables
   SET name = name || name;
-WARNING:  old table = 1=1,2=2,3=3, new table = 1=11,2=22,3=33
-NOTICE:  one = 1
 -- now change 'name' to an integer to see what happens...
 ALTER TABLE alter_table_under_transition_tables
   ALTER COLUMN name TYPE int USING name::integer;
 UPDATE alter_table_under_transition_tables
   SET name = (name::text || name::text)::integer;
-WARNING:  old table = 1=11,2=22,3=33, new table = 1=1111,2=2222,3=3333
-NOTICE:  one = 1
 -- now drop column 'name'
 ALTER TABLE alter_table_under_transition_tables
   DROP column name;
 UPDATE alter_table_under_transition_tables
   SET id = id;
-ERROR:  column "name" does not exist
-LINE 1: (SELECT string_agg(id || '=' || name, ',') FROM d)
-                                        ^
-QUERY:  (SELECT string_agg(id || '=' || name, ',') FROM d)
-CONTEXT:  PL/pgSQL function alter_table_under_transition_tables_upd_func() line 3 at RAISE
 --
 -- Test multiple reference to a transition table
 --
@@ -5764,19 +6384,37 @@
 CREATE TRIGGER my_trigger AFTER UPDATE ON multi_test
   REFERENCING NEW TABLE AS new_test OLD TABLE as old_test
   FOR EACH STATEMENT EXECUTE PROCEDURE multi_test_trig();
+ERROR:  unimplemented: statement-level triggers are not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/126362/_version_
 UPDATE multi_test SET i = i;
-NOTICE:  count = 1
-NOTICE:  count union = 2
 DROP TABLE multi_test;
 DROP FUNCTION multi_test_trig();
 --
 -- Check type parsing and record fetching from partitioned tables
 --
 CREATE TABLE partitioned_table (a int, b text) PARTITION BY LIST (a);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE TABLE partitioned_table (a int, b text) PARTITION BY LIST (a)
+                                                                    ^
+HINT:  try \h CREATE TABLE
 CREATE TABLE pt_part1 PARTITION OF partitioned_table FOR VALUES IN (1);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE pt_part1 PARTITION OF partitioned_table FOR VALUES IN (1)
+                      ^
+HINT:  try \h CREATE TABLE
 CREATE TABLE pt_part2 PARTITION OF partitioned_table FOR VALUES IN (2);
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE pt_part2 PARTITION OF partitioned_table FOR VALUES IN (2)
+                      ^
+HINT:  try \h CREATE TABLE
 INSERT INTO partitioned_table VALUES (1, 'Row 1');
+ERROR:  relation "partitioned_table" does not exist
 INSERT INTO partitioned_table VALUES (2, 'Row 2');
+ERROR:  relation "partitioned_table" does not exist
 CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type)
 RETURNS partitioned_table AS $$
 DECLARE
@@ -5787,13 +6425,13 @@
     SELECT * INTO result FROM partitioned_table WHERE a = a_val;
     RETURN result;
 END; $$ LANGUAGE plpgsql;
-NOTICE:  type reference partitioned_table.a%TYPE converted to integer
+ERROR:  at or near "%": syntax error
+DETAIL:  source SQL:
+CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type)
+                                                                         ^
+HINT:  try \h CREATE FUNCTION
 SELECT * FROM get_from_partitioned_table(1) AS t;
- a |   b   
----+-------
- 1 | Row 1
-(1 row)
-
+ERROR:  unknown function: get_from_partitioned_table()
 CREATE OR REPLACE FUNCTION list_partitioned_table()
 RETURNS SETOF partitioned_table.a%TYPE AS $$
 DECLARE
@@ -5806,14 +6444,13 @@
     END LOOP;
     RETURN;
 END; $$ LANGUAGE plpgsql;
-NOTICE:  type reference partitioned_table.a%TYPE converted to integer
+ERROR:  at or near "%": syntax error
+DETAIL:  source SQL:
+CREATE OR REPLACE FUNCTION list_partitioned_table()
+RETURNS SETOF partitioned_table.a%TYPE AS $$
+                                 ^
 SELECT * FROM list_partitioned_table() AS t;
- t 
----
- 1
- 2
-(2 rows)
-
+ERROR:  unknown function: list_partitioned_table()
 --
 -- Check argument name is used instead of $n in error message
 --
@@ -5822,6 +6459,16 @@
   GET DIAGNOSTICS x = ROW_COUNT;
   RETURN;
 END; $$ LANGUAGE plpgsql;
-ERROR:  "x" is not a scalar variable
-LINE 3:   GET DIAGNOSTICS x = ROW_COUNT;
-                          ^
+ERROR:  unimplemented: attempted to use a PL/pgSQL statement that is not yet supported
+DETAIL:  stmt_get_diag is not yet supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
