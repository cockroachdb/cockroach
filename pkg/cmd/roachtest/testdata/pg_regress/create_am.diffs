diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/create_am.out --label=/mnt/data1/postgres/src/test/regress/results/create_am.out /mnt/data1/postgres/src/test/regress/expected/create_am.out /mnt/data1/postgres/src/test/regress/results/create_am.out
--- /mnt/data1/postgres/src/test/regress/expected/create_am.out
+++ /mnt/data1/postgres/src/test/regress/results/create_am.out
@@ -3,15 +3,60 @@
 --
 -- Make gist2 over gisthandler. In fact, it would be a synonym to gist.
 CREATE ACCESS METHOD gist2 TYPE INDEX HANDLER gisthandler;
+ERROR:  at or near "gist2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD gist2 TYPE INDEX HANDLER gisthandler
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Verify return type checks for handlers
 CREATE ACCESS METHOD bogus TYPE INDEX HANDLER int4in;
-ERROR:  function int4in(internal) does not exist
+ERROR:  at or near "bogus": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD bogus TYPE INDEX HANDLER int4in
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE ACCESS METHOD bogus TYPE INDEX HANDLER heap_tableam_handler;
-ERROR:  function heap_tableam_handler must return type index_am_handler
+ERROR:  at or near "bogus": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD bogus TYPE INDEX HANDLER heap_tableam_handler
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Try to create gist2 index on fast_emp4000: fail because opclass doesn't exist
 CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base);
-ERROR:  data type box has no default operator class for access method "gist2"
-HINT:  You must specify an operator class for the index or define a default operator class for the data type.
+ERROR:  at or near "gist2": syntax error: unrecognized access method: gist2
+DETAIL:  source SQL:
+CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base)
+                                              ^
 -- Make operator class for boxes using gist2
 CREATE OPERATOR CLASS box_ops DEFAULT
 	FOR TYPE box USING gist2 AS
@@ -33,79 +78,139 @@
 	FUNCTION 5	gist_box_penalty(internal, internal, internal),
 	FUNCTION 6	gist_box_picksplit(internal, internal),
 	FUNCTION 7	gist_box_same(box, box, internal);
+ERROR:  at or near "class": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE OPERATOR CLASS box_ops DEFAULT
+                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/65017/_version_
 -- Create gist2 index on fast_emp4000
 CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base);
+ERROR:  at or near "gist2": syntax error: unrecognized access method: gist2
+DETAIL:  source SQL:
+CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base)
+                                              ^
 -- Now check the results from plain indexscan; temporarily drop existing
 -- index grect2ind to ensure it doesn't capture the plan
 BEGIN;
 DROP INDEX grect2ind;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  index "grect2ind" does not exist
 SET enable_seqscan = OFF;
+WARNING:  setting session var "enable_seqscan" is a no-op
 SET enable_indexscan = ON;
+ERROR:  unimplemented: the configuration setting "enable_indexscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 SET enable_bitmapscan = OFF;
+ERROR:  unimplemented: the configuration setting "enable_bitmapscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 EXPLAIN (COSTS OFF)
 SELECT * FROM fast_emp4000
     WHERE home_base <@ '(200,200),(2000,1000)'::box
     ORDER BY (home_base[0])[0];
-                           QUERY PLAN                            
------------------------------------------------------------------
- Sort
-   Sort Key: ((home_base[0])[0])
-   ->  Index Only Scan using grect2ind2 on fast_emp4000
-         Index Cond: (home_base <@ '(2000,1000),(200,200)'::box)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT * FROM fast_emp4000
     WHERE home_base <@ '(200,200),(2000,1000)'::box
     ORDER BY (home_base[0])[0];
-       home_base       
------------------------
- (337,455),(240,359)
- (1444,403),(1346,344)
-(2 rows)
-
+ERROR:  at or near "order": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT * FROM fast_emp4000
+    WHERE home_base <@ '(200,200),(2000,1000)'::box
+    ORDER BY (home_base[0])[0]
+    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 EXPLAIN (COSTS OFF)
 SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box;
-                         QUERY PLAN                          
--------------------------------------------------------------
- Aggregate
-   ->  Index Only Scan using grect2ind2 on fast_emp4000
-         Index Cond: (home_base && '(1000,1000),(0,0)'::box)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box;
- count 
--------
-     2
-(1 row)
-
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box
+                                                                           ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 EXPLAIN (COSTS OFF)
 SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL;
-                       QUERY PLAN                       
---------------------------------------------------------
- Aggregate
-   ->  Index Only Scan using grect2ind2 on fast_emp4000
-         Index Cond: (home_base IS NULL)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL;
- count 
--------
-   278
-(1 row)
-
+ERROR:  relation "fast_emp4000" does not exist
 ROLLBACK;
+WARNING:  there is no transaction in progress
 -- Try to drop access method: fail because of dependent objects
 DROP ACCESS METHOD gist2;
-ERROR:  cannot drop access method gist2 because other objects depend on it
-DETAIL:  index grect2ind2 depends on operator class box_ops for access method gist2
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  at or near "gist2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DROP ACCESS METHOD gist2
+                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Drop access method cascade
 -- To prevent a (rare) deadlock against autovacuum,
 -- we must lock the table that owns the index that will be dropped
 BEGIN;
 LOCK TABLE fast_emp4000;
+ERROR:  at or near "lock": syntax error
+DETAIL:  source SQL:
+LOCK TABLE fast_emp4000
+^
 DROP ACCESS METHOD gist2 CASCADE;
-NOTICE:  drop cascades to index grect2ind2
+ERROR:  at or near "gist2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DROP ACCESS METHOD gist2 CASCADE
+                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 COMMIT;
 --
 -- Test table access methods
@@ -113,82 +218,166 @@
 -- prevent empty values
 SET default_table_access_method = '';
 ERROR:  invalid value for parameter "default_table_access_method": ""
-DETAIL:  default_table_access_method cannot be empty.
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: heap
 -- prevent nonexistent values
 SET default_table_access_method = 'I do not exist AM';
 ERROR:  invalid value for parameter "default_table_access_method": "I do not exist AM"
-DETAIL:  Table access method "I do not exist AM" does not exist.
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: heap
 -- prevent setting it to an index AM
 SET default_table_access_method = 'btree';
-ERROR:  access method "btree" is not of type TABLE
+ERROR:  invalid value for parameter "default_table_access_method": "btree"
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: heap
 -- Create a heap2 table am handler with heapam handler
 CREATE ACCESS METHOD heap2 TYPE TABLE HANDLER heap_tableam_handler;
+ERROR:  at or near "heap2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD heap2 TYPE TABLE HANDLER heap_tableam_handler
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Verify return type checks for handlers
 CREATE ACCESS METHOD bogus TYPE TABLE HANDLER int4in;
-ERROR:  function int4in(internal) does not exist
+ERROR:  at or near "bogus": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD bogus TYPE TABLE HANDLER int4in
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE ACCESS METHOD bogus TYPE TABLE HANDLER bthandler;
-ERROR:  function bthandler must return type table_am_handler
+ERROR:  at or near "bogus": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE ACCESS METHOD bogus TYPE TABLE HANDLER bthandler
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 SELECT amname, amhandler, amtype FROM pg_am where amtype = 't' ORDER BY 1, 2;
- amname |      amhandler       | amtype 
---------+----------------------+--------
- heap   | heap_tableam_handler | t
- heap2  | heap_tableam_handler | t
-(2 rows)
+ amname | amhandler | amtype 
+--------+-----------+--------
+(0 rows)
 
 -- First create tables employing the new AM using USING
 -- plain CREATE TABLE
 CREATE TABLE tableam_tbl_heap2(f1 int) USING heap2;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_tbl_heap2(f1 int) USING heap2
+                                       ^
 INSERT INTO tableam_tbl_heap2 VALUES(1);
+ERROR:  relation "tableam_tbl_heap2" does not exist
 SELECT f1 FROM tableam_tbl_heap2 ORDER BY f1;
- f1 
-----
-  1
-(1 row)
-
+ERROR:  relation "tableam_tbl_heap2" does not exist
 -- CREATE TABLE AS
 CREATE TABLE tableam_tblas_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_tblas_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2
+                                 ^
+HINT:  try \h CREATE TABLE
 SELECT f1 FROM tableam_tbl_heap2 ORDER BY f1;
- f1 
-----
-  1
-(1 row)
-
+ERROR:  relation "tableam_tbl_heap2" does not exist
 -- SELECT INTO doesn't support USING
 SELECT INTO tableam_tblselectinto_heap2 USING heap2 FROM tableam_tbl_heap2;
-ERROR:  syntax error at or near "USING"
-LINE 1: SELECT INTO tableam_tblselectinto_heap2 USING heap2 FROM tab...
-                                                ^
+ERROR:  at or near "into": syntax error
+DETAIL:  source SQL:
+SELECT INTO tableam_tblselectinto_heap2 USING heap2 FROM tableam_tbl_heap2
+       ^
 -- CREATE VIEW doesn't support USING
 CREATE VIEW tableam_view_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
-ERROR:  syntax error at or near "USING"
-LINE 1: CREATE VIEW tableam_view_heap2 USING heap2 AS SELECT * FROM ...
-                                       ^
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE VIEW tableam_view_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2
+                               ^
+HINT:  try \h CREATE VIEW
 -- CREATE SEQUENCE doesn't support USING
 CREATE SEQUENCE tableam_seq_heap2 USING heap2;
-ERROR:  syntax error at or near "USING"
-LINE 1: CREATE SEQUENCE tableam_seq_heap2 USING heap2;
-                                          ^
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE SEQUENCE tableam_seq_heap2 USING heap2
+                                  ^
 -- CREATE MATERIALIZED VIEW does support USING
 CREATE MATERIALIZED VIEW tableam_tblmv_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE MATERIALIZED VIEW tableam_tblmv_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2
+                                             ^
+HINT:  try \h CREATE
 SELECT f1 FROM tableam_tblmv_heap2 ORDER BY f1;
- f1 
-----
-  1
-(1 row)
-
+ERROR:  relation "tableam_tblmv_heap2" does not exist
 -- CREATE TABLE ..  PARTITION BY doesn't not support USING
 CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a) USING heap2;
-ERROR:  specifying a table access method is not supported on a partitioned table
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a) USING heap2
+                                                                        ^
+HINT:  try \h CREATE TABLE
 CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a)
+                                                                       ^
+HINT:  try \h CREATE TABLE
 -- new partitions will inherit from the current default, rather the partition root
 SET default_table_access_method = 'heap';
 CREATE TABLE tableam_parted_a_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('a');
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_a_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('a')
+                                    ^
+HINT:  try \h CREATE TABLE
 SET default_table_access_method = 'heap2';
+ERROR:  invalid value for parameter "default_table_access_method": "heap2"
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: heap
 CREATE TABLE tableam_parted_b_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('b');
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_b_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('b')
+                                    ^
+HINT:  try \h CREATE TABLE
 RESET default_table_access_method;
 -- but the method can be explicitly specified
 CREATE TABLE tableam_parted_c_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('c') USING heap;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_c_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('c') USING heap
+                                    ^
+HINT:  try \h CREATE TABLE
 CREATE TABLE tableam_parted_d_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('d') USING heap2;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_d_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('d') USING heap2
+                                    ^
+HINT:  try \h CREATE TABLE
 -- List all objects in AM
 SELECT
     pc.relkind,
@@ -203,16 +392,9 @@
 WHERE pa.oid = pc.relam
    AND pa.amname = 'heap2'
 ORDER BY 3, 1, 2;
- relkind | amname |             relname              
----------+--------+----------------------------------
- r       | heap2  | tableam_parted_b_heap2
- r       | heap2  | tableam_parted_d_heap2
- r       | heap2  | tableam_tbl_heap2
- r       | heap2  | tableam_tblas_heap2
- m       | heap2  | tableam_tblmv_heap2
- t       | heap2  | toast for tableam_parted_b_heap2
- t       | heap2  | toast for tableam_parted_d_heap2
-(7 rows)
+ relkind | amname | relname 
+---------+--------+---------
+(0 rows)
 
 -- Show dependencies onto AM - there shouldn't be any for toast
 SELECT pg_describe_object(classid,objid,objsubid) AS obj
@@ -221,27 +403,25 @@
     AND pg_am.oid = pg_depend.refobjid
     AND pg_am.amname = 'heap2'
 ORDER BY classid, objid, objsubid;
-                  obj                  
----------------------------------------
- table tableam_tbl_heap2
- table tableam_tblas_heap2
- materialized view tableam_tblmv_heap2
- table tableam_parted_b_heap2
- table tableam_parted_d_heap2
-(5 rows)
-
+ERROR:  unknown function: pg_describe_object()
 -- ALTER TABLE SET ACCESS METHOD
 CREATE TABLE heaptable USING heap AS
   SELECT a, repeat(a::text, 100) FROM generate_series(1,9) AS a;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE heaptable USING heap AS
+                       ^
+HINT:  try \h CREATE TABLE
 SELECT amname FROM pg_class c, pg_am am
   WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
- amname 
---------
- heap
-(1 row)
-
+ERROR:  relation "heaptable" does not exist
 -- Switching to heap2 adds new dependency entry to the AM.
 ALTER TABLE heaptable SET ACCESS METHOD heap2;
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER TABLE heaptable SET ACCESS METHOD heap2
+                          ^
+HINT:  try \h ALTER TABLE
 SELECT pg_describe_object(classid, objid, objsubid) as obj,
        pg_describe_object(refclassid, refobjid, refobjsubid) as objref,
        deptype
@@ -249,14 +429,14 @@
   WHERE classid = 'pg_class'::regclass AND
         objid = 'heaptable'::regclass
   ORDER BY 1, 2;
-       obj       |       objref        | deptype 
------------------+---------------------+---------
- table heaptable | access method heap2 | n
- table heaptable | schema public       | n
-(2 rows)
-
+ERROR:  unknown function: pg_describe_object()
 -- Switching to heap should not have a dependency entry to the AM.
 ALTER TABLE heaptable SET ACCESS METHOD heap;
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER TABLE heaptable SET ACCESS METHOD heap
+                          ^
+HINT:  try \h ALTER TABLE
 SELECT pg_describe_object(classid, objid, objsubid) as obj,
        pg_describe_object(refclassid, refobjid, refobjsubid) as objref,
        deptype
@@ -264,79 +444,167 @@
   WHERE classid = 'pg_class'::regclass AND
         objid = 'heaptable'::regclass
   ORDER BY 1, 2;
-       obj       |    objref     | deptype 
------------------+---------------+---------
- table heaptable | schema public | n
-(1 row)
-
+ERROR:  unknown function: pg_describe_object()
 ALTER TABLE heaptable SET ACCESS METHOD heap2;
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER TABLE heaptable SET ACCESS METHOD heap2
+                          ^
+HINT:  try \h ALTER TABLE
 SELECT amname FROM pg_class c, pg_am am
   WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
- amname 
---------
- heap2
-(1 row)
-
+ERROR:  relation "heaptable" does not exist
 SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heaptable;
- count | count 
--------+-------
-     9 |     1
-(1 row)
-
+ERROR:  relation "heaptable" does not exist
 -- ALTER MATERIALIZED VIEW SET ACCESS METHOD
 CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT * FROM heaptable;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT * FROM heaptable
+                                ^
+HINT:  try \h CREATE
 SELECT amname FROM pg_class c, pg_am am
   WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass;
- amname 
---------
- heap
-(1 row)
-
+ERROR:  relation "heapmv" does not exist
 ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap2;
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap2
+                                   ^
+HINT:  try \h ALTER
 SELECT amname FROM pg_class c, pg_am am
   WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass;
- amname 
---------
- heap2
-(1 row)
-
+ERROR:  relation "heapmv" does not exist
 SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heapmv;
- count | count 
--------+-------
-     9 |     1
-(1 row)
-
+ERROR:  relation "heapmv" does not exist
 -- No support for multiple subcommands
 ALTER TABLE heaptable SET ACCESS METHOD heap, SET ACCESS METHOD heap2;
-ERROR:  cannot have multiple SET ACCESS METHOD subcommands
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER TABLE heaptable SET ACCESS METHOD heap, SET ACCESS METHOD heap2
+                          ^
+HINT:  try \h ALTER TABLE
 ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap, SET ACCESS METHOD heap2;
-ERROR:  cannot have multiple SET ACCESS METHOD subcommands
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap, SET ACCESS METHOD heap2
+                                   ^
+HINT:  try \h ALTER
 DROP MATERIALIZED VIEW heapmv;
+ERROR:  relation "heapmv" does not exist
 DROP TABLE heaptable;
+ERROR:  relation "heaptable" does not exist
 -- No support for partitioned tables.
 CREATE TABLE am_partitioned(x INT, y INT)
   PARTITION BY hash (x);
+ERROR:  at or near "hash": syntax error
+DETAIL:  source SQL:
+CREATE TABLE am_partitioned(x INT, y INT)
+  PARTITION BY hash (x)
+               ^
+HINT:  try \h CREATE TABLE
 ALTER TABLE am_partitioned SET ACCESS METHOD heap2;
-ERROR:  cannot change access method of a partitioned table
+ERROR:  at or near "access": syntax error
+DETAIL:  source SQL:
+ALTER TABLE am_partitioned SET ACCESS METHOD heap2
+                               ^
+HINT:  try \h ALTER TABLE
 DROP TABLE am_partitioned;
+ERROR:  relation "am_partitioned" does not exist
 -- Second, create objects in the new AM by changing the default AM
 BEGIN;
 SET LOCAL default_table_access_method = 'heap2';
+ERROR:  invalid value for parameter "default_table_access_method": "heap2"
+DETAIL:  this parameter is currently recognized only for compatibility and has no effect in CockroachDB.
+HINT:  Available values: heap
 -- following tests should all respect the default AM
 CREATE TABLE tableam_tbl_heapx(f1 int);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 CREATE TABLE tableam_tblas_heapx AS SELECT * FROM tableam_tbl_heapx;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 SELECT INTO tableam_tblselectinto_heapx FROM tableam_tbl_heapx;
+ERROR:  at or near "into": syntax error
+DETAIL:  source SQL:
+SELECT INTO tableam_tblselectinto_heapx FROM tableam_tbl_heapx
+       ^
 CREATE MATERIALIZED VIEW tableam_tblmv_heapx USING heap2 AS SELECT * FROM tableam_tbl_heapx;
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE MATERIALIZED VIEW tableam_tblmv_heapx USING heap2 AS SELECT * FROM tableam_tbl_heapx
+                                             ^
+HINT:  try \h CREATE
 CREATE TABLE tableam_parted_heapx (a text, b int) PARTITION BY list (a);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_heapx (a text, b int) PARTITION BY list (a)
+                                                                       ^
+HINT:  try \h CREATE TABLE
 CREATE TABLE tableam_parted_1_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('a', 'b');
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_1_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('a', 'b')
+                                    ^
+HINT:  try \h CREATE TABLE
 -- but an explicitly set AM overrides it
 CREATE TABLE tableam_parted_2_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('c', 'd') USING heap;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+CREATE TABLE tableam_parted_2_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('c', 'd') USING heap
+                                    ^
+HINT:  try \h CREATE TABLE
 -- sequences, views and foreign servers shouldn't have an AM
 CREATE VIEW tableam_view_heapx AS SELECT * FROM tableam_tbl_heapx;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 CREATE SEQUENCE tableam_seq_heapx;
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 CREATE FOREIGN DATA WRAPPER fdw_heap2 VALIDATOR postgresql_fdw_validator;
+ERROR:  at or near "wrapper": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FOREIGN DATA WRAPPER fdw_heap2 VALIDATOR postgresql_fdw_validator
+                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE SERVER fs_heap2 FOREIGN DATA WRAPPER fdw_heap2 ;
+ERROR:  at or near "fs_heap2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE SERVER fs_heap2 FOREIGN DATA WRAPPER fdw_heap2 
+              ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 CREATE FOREIGN table tableam_fdw_heapx () SERVER fs_heap2;
+ERROR:  at or near "tableam_fdw_heapx": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE FOREIGN table tableam_fdw_heapx () SERVER fs_heap2
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Verify that new AM was used for tables, matviews, but not for sequences, views and fdws
 SELECT
     pc.relkind,
@@ -350,41 +618,46 @@
     LEFT JOIN pg_am AS pa ON (pa.oid = pc.relam)
 WHERE pc.relname LIKE 'tableam_%_heapx'
 ORDER BY 3, 1, 2;
- relkind | amname |           relname           
----------+--------+-----------------------------
- f       |        | tableam_fdw_heapx
- r       | heap2  | tableam_parted_1_heapx
- r       | heap   | tableam_parted_2_heapx
- p       |        | tableam_parted_heapx
- S       |        | tableam_seq_heapx
- r       | heap2  | tableam_tbl_heapx
- r       | heap2  | tableam_tblas_heapx
- m       | heap2  | tableam_tblmv_heapx
- r       | heap2  | tableam_tblselectinto_heapx
- v       |        | tableam_view_heapx
-(10 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 -- don't want to keep those tables, nor the default
 ROLLBACK;
 -- Third, check that we can neither create a table using a nonexistent
 -- AM, nor using an index AM
 CREATE TABLE i_am_a_failure() USING "";
-ERROR:  zero-length delimited identifier at or near """"
-LINE 1: CREATE TABLE i_am_a_failure() USING "";
-                                            ^
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE i_am_a_failure() USING ""
+                              ^
 CREATE TABLE i_am_a_failure() USING i_do_not_exist_am;
-ERROR:  access method "i_do_not_exist_am" does not exist
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE i_am_a_failure() USING i_do_not_exist_am
+                              ^
 CREATE TABLE i_am_a_failure() USING "I do not exist AM";
-ERROR:  access method "I do not exist AM" does not exist
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE i_am_a_failure() USING "I do not exist AM"
+                              ^
 CREATE TABLE i_am_a_failure() USING "btree";
-ERROR:  access method "btree" is not of type TABLE
+ERROR:  at or near "using": syntax error
+DETAIL:  source SQL:
+CREATE TABLE i_am_a_failure() USING "btree"
+                              ^
 -- Drop table access method, which fails as objects depends on it
 DROP ACCESS METHOD heap2;
-ERROR:  cannot drop access method heap2 because other objects depend on it
-DETAIL:  table tableam_tbl_heap2 depends on access method heap2
-table tableam_tblas_heap2 depends on access method heap2
-materialized view tableam_tblmv_heap2 depends on access method heap2
-table tableam_parted_b_heap2 depends on access method heap2
-table tableam_parted_d_heap2 depends on access method heap2
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  at or near "heap2": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+DROP ACCESS METHOD heap2
+                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- we intentionally leave the objects created above alive, to verify pg_dump support
