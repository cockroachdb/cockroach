diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/temp.out --label=/mnt/data1/postgres/src/test/regress/results/temp.out /mnt/data1/postgres/src/test/regress/expected/temp.out /mnt/data1/postgres/src/test/regress/results/temp.out
--- /mnt/data1/postgres/src/test/regress/expected/temp.out
+++ /mnt/data1/postgres/src/test/regress/results/temp.out
@@ -13,6 +13,8 @@
 (0 rows)
 
 DROP INDEX i_temptest;
+NOTICE:  the data for dropped indexes is reclaimed asynchronously
+HINT:  The reclamation delay can be customized in the zone configuration for the table.
 DROP TABLE temptest;
 SELECT * FROM temptest;
  col 
@@ -20,6 +22,7 @@
 (0 rows)
 
 DROP INDEX i_temptest;
+ERROR:  index "i_temptest" does not exist
 DROP TABLE temptest;
 -- test temp table selects
 CREATE TABLE temptest(col int);
@@ -45,87 +48,105 @@
 \c
 SELECT * FROM temptest;
 ERROR:  relation "temptest" does not exist
-LINE 1: SELECT * FROM temptest;
-                      ^
 -- Test ON COMMIT DELETE ROWS
 CREATE TEMP TABLE temptest(col int) ON COMMIT DELETE ROWS;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest(col int) ON COMMIT DELETE ROWS
+                                                         ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 -- while we're here, verify successful truncation of index with SQL function
 CREATE INDEX ON temptest(bit_length(''));
+ERROR:  relation "temptest" does not exist
 BEGIN;
 INSERT INTO temptest VALUES (1);
+ERROR:  relation "temptest" does not exist
 INSERT INTO temptest VALUES (2);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 SELECT * FROM temptest;
- col 
------
-   1
-   2
-(2 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 COMMIT;
 SELECT * FROM temptest;
- col 
------
-(0 rows)
-
+ERROR:  relation "temptest" does not exist
 DROP TABLE temptest;
+ERROR:  relation "temptest" does not exist
 BEGIN;
 CREATE TEMP TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1;
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1
+                                ^
+HINT:  try \h CREATE TABLE
 SELECT * FROM temptest;
- col 
------
-   1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 COMMIT;
 SELECT * FROM temptest;
- col 
------
-(0 rows)
-
+ERROR:  relation "temptest" does not exist
 DROP TABLE temptest;
+ERROR:  relation "temptest" does not exist
 -- Test ON COMMIT DROP
 BEGIN;
 CREATE TEMP TABLE temptest(col int) ON COMMIT DROP;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest(col int) ON COMMIT DROP
+                                                  ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 INSERT INTO temptest VALUES (1);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 INSERT INTO temptest VALUES (2);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 SELECT * FROM temptest;
- col 
------
-   1
-   2
-(2 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 COMMIT;
 SELECT * FROM temptest;
 ERROR:  relation "temptest" does not exist
-LINE 1: SELECT * FROM temptest;
-                      ^
 BEGIN;
 CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1;
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1
+                                ^
+HINT:  try \h CREATE TABLE
 SELECT * FROM temptest;
- col 
------
-   1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 COMMIT;
 SELECT * FROM temptest;
 ERROR:  relation "temptest" does not exist
-LINE 1: SELECT * FROM temptest;
-                      ^
 -- ON COMMIT is only allowed for TEMP
 CREATE TABLE temptest(col int) ON COMMIT DELETE ROWS;
-ERROR:  ON COMMIT can only be used on temporary tables
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TABLE temptest(col int) ON COMMIT DELETE ROWS
+                                                    ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 CREATE TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1;
-ERROR:  ON COMMIT can only be used on temporary tables
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+CREATE TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1
+                           ^
+HINT:  try \h CREATE TABLE
 -- Test foreign keys
 BEGIN;
 CREATE TEMP TABLE temptest1(col int PRIMARY KEY);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 CREATE TEMP TABLE temptest2(col int REFERENCES temptest1)
   ON COMMIT DELETE ROWS;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest2(col int REFERENCES temptest1)
+  ON COMMIT DELETE ROWS
+                       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 INSERT INTO temptest1 VALUES (1);
 INSERT INTO temptest2 VALUES (1);
+ERROR:  relation "temptest2" does not exist
 COMMIT;
+WARNING:  there is no transaction in progress
 SELECT * FROM temptest1;
  col 
 -----
@@ -133,16 +154,18 @@
 (1 row)
 
 SELECT * FROM temptest2;
- col 
------
-(0 rows)
-
+ERROR:  relation "temptest2" does not exist
 BEGIN;
 CREATE TEMP TABLE temptest3(col int PRIMARY KEY) ON COMMIT DELETE ROWS;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TEMP TABLE temptest3(col int PRIMARY KEY) ON COMMIT DELETE ROWS
+                                                                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 CREATE TEMP TABLE temptest4(col int REFERENCES temptest3);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 COMMIT;
-ERROR:  unsupported ON COMMIT and foreign key combination
-DETAIL:  Table "temptest4" references "temptest3", but they do not have the same ON COMMIT setting.
 -- Test manipulation of temp schema's placement in search path
 create table public.whereami (f1 text);
 insert into public.whereami values ('public');
@@ -152,6 +175,9 @@
   as $$select 'public'::text$$ language sql;
 create function pg_temp.whoami() returns text
   as $$select 'temp'::text$$ language sql;
+ERROR:  unimplemented: cannot create UDFs under a temporary schema
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/104687/_version_
 -- default should have pg_temp implicitly first, but only for tables
 select * from whereami;
   f1  
@@ -195,57 +221,86 @@
 
 -- you can invoke a temp function explicitly, though
 select pg_temp.whoami();
- whoami 
---------
- temp
-(1 row)
-
+ERROR:  unknown function: pg_temp.whoami()
 drop table public.whereami;
 -- types in temp schema
 set search_path = pg_temp, public;
 create domain pg_temp.nonempty as text check (value <> '');
+ERROR:  at or near "as": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create domain pg_temp.nonempty as text check (value <> '')
+                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27796/_version_
 -- function-syntax invocation of types matches rules for functions
 select nonempty('');
-ERROR:  function nonempty(unknown) does not exist
-LINE 1: select nonempty('');
-               ^
-HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
+ERROR:  unknown function: nonempty()
 select pg_temp.nonempty('');
-ERROR:  value for domain nonempty violates check constraint "nonempty_check"
+ERROR:  unknown function: pg_temp.nonempty()
 -- other syntax matches rules for tables
 select ''::nonempty;
-ERROR:  value for domain nonempty violates check constraint "nonempty_check"
+ERROR:  type "nonempty" does not exist
 reset search_path;
 -- For partitioned temp tables, ON COMMIT actions ignore storage-less
 -- partitioned tables.
 begin;
 create temp table temp_parted_oncommit (a int)
   partition by list (a) on commit delete rows;
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit (a int)
+  partition by list (a) on commit delete rows
+                        ^
+HINT:  try \h CREATE TABLE
 create temp table temp_parted_oncommit_1
   partition of temp_parted_oncommit
   for values in (1) on commit delete rows;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_1
+  partition of temp_parted_oncommit
+  ^
+HINT:  try \h CREATE TABLE
 insert into temp_parted_oncommit values (1);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- partitions are emptied by the previous commit
 select * from temp_parted_oncommit;
- a 
----
-(0 rows)
-
+ERROR:  relation "temp_parted_oncommit" does not exist
 drop table temp_parted_oncommit;
+ERROR:  relation "temp_parted_oncommit" does not exist
 -- Check dependencies between ON COMMIT actions with a partitioned
 -- table and its partitions.  Using ON COMMIT DROP on a parent removes
 -- the whole set.
 begin;
 create temp table temp_parted_oncommit_test (a int)
   partition by list (a) on commit drop;
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test (a int)
+  partition by list (a) on commit drop
+                        ^
+HINT:  try \h CREATE TABLE
 create temp table temp_parted_oncommit_test1
   partition of temp_parted_oncommit_test
   for values in (1) on commit delete rows;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test1
+  partition of temp_parted_oncommit_test
+  ^
+HINT:  try \h CREATE TABLE
 create temp table temp_parted_oncommit_test2
   partition of temp_parted_oncommit_test
   for values in (2) on commit drop;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test2
+  partition of temp_parted_oncommit_test
+  ^
+HINT:  try \h CREATE TABLE
 insert into temp_parted_oncommit_test values (1), (2);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- no relations remain in this case.
 select relname from pg_class where relname ~ '^temp_parted_oncommit_test';
@@ -258,39 +313,67 @@
 begin;
 create temp table temp_parted_oncommit_test (a int)
   partition by list (a) on commit delete rows;
+ERROR:  at or near "on": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test (a int)
+  partition by list (a) on commit delete rows
+                        ^
+HINT:  try \h CREATE TABLE
 create temp table temp_parted_oncommit_test1
   partition of temp_parted_oncommit_test
   for values in (1) on commit preserve rows;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test1
+  partition of temp_parted_oncommit_test
+  ^
+HINT:  try \h CREATE TABLE
 create temp table temp_parted_oncommit_test2
   partition of temp_parted_oncommit_test
   for values in (2) on commit drop;
+ERROR:  at or near "partition": syntax error
+DETAIL:  source SQL:
+create temp table temp_parted_oncommit_test2
+  partition of temp_parted_oncommit_test
+  ^
+HINT:  try \h CREATE TABLE
 insert into temp_parted_oncommit_test values (1), (2);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- Data from the remaining partition is still here as its rows are
 -- preserved.
 select * from temp_parted_oncommit_test;
- a 
----
- 1
-(1 row)
-
+ERROR:  relation "temp_parted_oncommit_test" does not exist
 -- two relations remain in this case.
 select relname from pg_class where relname ~ '^temp_parted_oncommit_test'
   order by relname;
-          relname           
-----------------------------
- temp_parted_oncommit_test
- temp_parted_oncommit_test1
-(2 rows)
+ relname 
+---------
+(0 rows)
 
 drop table temp_parted_oncommit_test;
+ERROR:  relation "temp_parted_oncommit_test" does not exist
 -- Check dependencies between ON COMMIT actions with inheritance trees.
 -- Using ON COMMIT DROP on a parent removes the whole set.
 begin;
 create temp table temp_inh_oncommit_test (a int) on commit drop;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create temp table temp_inh_oncommit_test (a int) on commit drop
+                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 create temp table temp_inh_oncommit_test1 ()
   inherits(temp_inh_oncommit_test) on commit delete rows;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create temp table temp_inh_oncommit_test1 ()
+  inherits(temp_inh_oncommit_test) on commit delete rows
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/22456/_version_
 insert into temp_inh_oncommit_test1 values (1);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 -- no relations remain in this case
 select relname from pg_class where relname ~ '^temp_inh_oncommit_test';
@@ -301,24 +384,36 @@
 -- Data on the parent is removed, and the child goes away.
 begin;
 create temp table temp_inh_oncommit_test (a int) on commit delete rows;
+ERROR:  at or near "EOF": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create temp table temp_inh_oncommit_test (a int) on commit delete rows
+                                                                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46556/_version_
 create temp table temp_inh_oncommit_test1 ()
   inherits(temp_inh_oncommit_test) on commit drop;
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create temp table temp_inh_oncommit_test1 ()
+  inherits(temp_inh_oncommit_test) on commit drop
+          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/22456/_version_
 insert into temp_inh_oncommit_test1 values (1);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 insert into temp_inh_oncommit_test values (1);
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 commit;
 select * from temp_inh_oncommit_test;
- a 
----
-(0 rows)
-
+ERROR:  relation "temp_inh_oncommit_test" does not exist
 -- one relation remains
 select relname from pg_class where relname ~ '^temp_inh_oncommit_test';
-        relname         
-------------------------
- temp_inh_oncommit_test
-(1 row)
+ relname 
+---------
+(0 rows)
 
 drop table temp_inh_oncommit_test;
+ERROR:  relation "temp_inh_oncommit_test" does not exist
 -- Tests with two-phase commit
 -- Transactions creating objects in a temporary namespace cannot be used
 -- with two-phase commit.
@@ -327,33 +422,144 @@
 begin;
 create function pg_temp.twophase_func() returns void as
   $$ select '2pc_func'::text $$ language sql;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  unimplemented: cannot create UDFs under a temporary schema
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/104687/_version_
 prepare transaction 'twophase_func';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 -- Function drop
 create function pg_temp.twophase_func() returns void as
   $$ select '2pc_func'::text $$ language sql;
+ERROR:  unimplemented: cannot create UDFs under a temporary schema
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/104687/_version_
 begin;
 drop function pg_temp.twophase_func();
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  unknown function: pg_temp.twophase_func()
 prepare transaction 'twophase_func';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 -- Operator creation
 begin;
 create operator pg_temp.@@ (leftarg = int4, rightarg = int4, procedure = int4mi);
+ERROR:  at or near "pg_temp": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+create operator pg_temp.@@ (leftarg = int4, rightarg = int4, procedure = int4mi)
+                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/65017/_version_
 prepare transaction 'twophase_operator';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
 -- These generate errors about temporary tables.
 begin;
 create type pg_temp.twophase_type as (a int);
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  internal error: invalid schema kind for getNonTemporarySchemaForCreate: 2
+DETAIL:  stack trace:
+pkg/sql/create_table.go:108: getNonTemporarySchemaForCreate()
+pkg/sql/create_type.go:145: getCreateTypeParams()
+pkg/sql/create_type.go:493: createCompositeWithID()
+pkg/sql/create_type.go:314: createUserDefinedType()
+pkg/sql/create_type.go:104: startExec()
+pkg/sql/plan.go:578: startExec()
+pkg/sql/plan_node_to_row_source.go:181: Start()
+pkg/sql/colexec/columnarizer.go:178: Init()
+pkg/sql/colflow/stats.go:96: init()
+pkg/sql/colexecerror/error.go:162: CatchVectorizedRuntimeError()
+pkg/sql/colflow/stats.go:105: Init()
+pkg/sql/colflow/flow_coordinator.go:236: func2()
+pkg/sql/colexecerror/error.go:162: CatchVectorizedRuntimeError()
+pkg/sql/colflow/flow_coordinator.go:235: init()
+pkg/sql/colflow/flow_coordinator.go:269: Run()
+pkg/sql/colflow/vectorized_flow.go:316: Run()
+pkg/sql/distsql_running.go:985: Run()
+pkg/sql/distsql_running.go:2088: PlanAndRun()
+pkg/sql/distsql_running.go:1792: func3()
+pkg/sql/distsql_running.go:1795: PlanAndRunAll()
+pkg/sql/conn_executor_exec.go:3449: execWithDistSQLEngine()
+pkg/sql/conn_executor_exec.go:2980: dispatchToExecutionEngine()
+pkg/sql/conn_executor_exec.go:1077: execStmtInOpenState()
+pkg/sql/conn_executor_exec.go:170: func2()
+pkg/sql/conn_executor_exec.go:4457: execWithProfiling()
+pkg/sql/conn_executor_exec.go:169: execStmt()
+pkg/sql/conn_executor.go:2438: func1()
+pkg/sql/conn_executor.go:2443: execCmd()
+pkg/sql/conn_executor.go:2360: run()
+pkg/sql/conn_executor.go:1026: ServeConn()
+pkg/sql/pgwire/conn.go:252: processCommands()
+pkg/sql/pgwire/server.go:1197: func4()
+
+HINT:  You have encountered an unexpected error.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 prepare transaction 'twophase_type';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 begin;
 create view pg_temp.twophase_view as select 1;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  internal error: invalid schema kind for getNonTemporarySchemaForCreate: 2
+DETAIL:  stack trace:
+pkg/sql/create_table.go:108: getNonTemporarySchemaForCreate()
+pkg/sql/create_table.go:159: getSchemaForCreateTable()
+pkg/sql/create_view.go:135: startExec()
+pkg/sql/plan.go:578: startExec()
+pkg/sql/plan_node_to_row_source.go:181: Start()
+pkg/sql/colexec/columnarizer.go:178: Init()
+pkg/sql/colflow/stats.go:96: init()
+pkg/sql/colexecerror/error.go:162: CatchVectorizedRuntimeError()
+pkg/sql/colflow/stats.go:105: Init()
+pkg/sql/colflow/flow_coordinator.go:236: func2()
+pkg/sql/colexecerror/error.go:162: CatchVectorizedRuntimeError()
+pkg/sql/colflow/flow_coordinator.go:235: init()
+pkg/sql/colflow/flow_coordinator.go:269: Run()
+pkg/sql/colflow/vectorized_flow.go:316: Run()
+pkg/sql/distsql_running.go:985: Run()
+pkg/sql/distsql_running.go:2088: PlanAndRun()
+pkg/sql/distsql_running.go:1792: func3()
+pkg/sql/distsql_running.go:1795: PlanAndRunAll()
+pkg/sql/conn_executor_exec.go:3449: execWithDistSQLEngine()
+pkg/sql/conn_executor_exec.go:2980: dispatchToExecutionEngine()
+pkg/sql/conn_executor_exec.go:1077: execStmtInOpenState()
+pkg/sql/conn_executor_exec.go:170: func2()
+pkg/sql/conn_executor_exec.go:4457: execWithProfiling()
+pkg/sql/conn_executor_exec.go:169: execStmt()
+pkg/sql/conn_executor.go:2438: func1()
+pkg/sql/conn_executor.go:2443: execCmd()
+pkg/sql/conn_executor.go:2360: run()
+pkg/sql/conn_executor.go:1026: ServeConn()
+pkg/sql/pgwire/conn.go:252: processCommands()
+pkg/sql/pgwire/server.go:1197: func4()
+src/runtime/asm_amd64.s:1700: goexit()
+
+HINT:  You have encountered an unexpected error.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 prepare transaction 'twophase_view';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 begin;
 create sequence pg_temp.twophase_seq;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  unimplemented: cannot create UDFs under a temporary schema
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/104687/_version_
 prepare transaction 'twophase_sequence';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 -- Temporary tables cannot be used with two-phase commit.
 create temp table twophase_tab (a int);
 begin;
@@ -363,19 +569,22 @@
 (0 rows)
 
 prepare transaction 'twophase_tab';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
 begin;
 insert into twophase_tab values (1);
 prepare transaction 'twophase_tab';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+ERROR:  transaction identifier "twophase_tab" is already in use
 begin;
 lock twophase_tab in access exclusive mode;
+ERROR:  at or near "lock": syntax error
+DETAIL:  source SQL:
+lock twophase_tab in access exclusive mode
+^
 prepare transaction 'twophase_tab';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
 begin;
 drop table twophase_tab;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 prepare transaction 'twophase_tab';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
+WARNING:  there is no transaction in progress
 -- Corner case: current_schema may create a temporary schema if namespace
 -- creation is pending, so check after that.  First reset the connection
 -- to remove the temporary namespace.
@@ -385,8 +594,7 @@
 SELECT current_schema() ~ 'pg_temp' AS is_temp_schema;
  is_temp_schema 
 ----------------
- t
+ 
 (1 row)
 
 PREPARE TRANSACTION 'twophase_search';
-ERROR:  cannot PREPARE a transaction that has operated on temporary objects
