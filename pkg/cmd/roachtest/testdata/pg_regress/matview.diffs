diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/matview.out --label=/mnt/data1/postgres/src/test/regress/results/matview.out /mnt/data1/postgres/src/test/regress/expected/matview.out /mnt/data1/postgres/src/test/regress/results/matview.out
--- /mnt/data1/postgres/src/test/regress/expected/matview.out
+++ /mnt/data1/postgres/src/test/regress/results/matview.out
@@ -19,28 +19,26 @@
 -- create a materialized view with no data, and confirm correct behavior
 EXPLAIN (costs off)
   CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA;
-         QUERY PLAN         
-----------------------------
- HashAggregate
-   Group Key: type
-   ->  Seq Scan on mvtest_t
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA;
 SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass;
  relispopulated 
 ----------------
- f
+ 
 (1 row)
 
 SELECT * FROM mvtest_tm ORDER BY type;
 ERROR:  materialized view "mvtest_tm" has not been populated
-HINT:  Use the REFRESH MATERIALIZED VIEW command.
+HINT:  use the REFRESH MATERIALIZED VIEW command.
 REFRESH MATERIALIZED VIEW mvtest_tm;
 SELECT relispopulated FROM pg_class WHERE oid = 'mvtest_tm'::regclass;
  relispopulated 
 ----------------
- t
+ 
 (1 row)
 
 CREATE UNIQUE INDEX mvtest_tm_type ON mvtest_tm (type);
@@ -55,15 +53,11 @@
 -- create various views
 EXPLAIN (costs off)
   CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type;
-            QUERY PLAN            
-----------------------------------
- Sort
-   Sort Key: mvtest_t.type
-   ->  HashAggregate
-         Group Key: mvtest_t.type
-         ->  Seq Scan on mvtest_t
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type;
 SELECT * FROM mvtest_tvm;
  type | totamt 
@@ -80,92 +74,92 @@
 CREATE VIEW mvtest_tvv AS SELECT sum(totamt) AS grandtot FROM mvtest_tv;
 EXPLAIN (costs off)
   CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv;
-            QUERY PLAN            
-----------------------------------
- Aggregate
-   ->  HashAggregate
-         Group Key: mvtest_t.type
-         ->  Seq Scan on mvtest_t
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv;
 CREATE VIEW mvtest_tvvmv AS SELECT * FROM mvtest_tvvm;
 CREATE MATERIALIZED VIEW mvtest_bb AS SELECT * FROM mvtest_tvvmv;
 CREATE INDEX mvtest_aa ON mvtest_bb (grandtot);
 -- check that plans seem reasonable
 \d+ mvtest_tvm
-                           Materialized view "public.mvtest_tvm"
- Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
---------+---------+-----------+----------+---------+----------+--------------+-------------
- type   | text    |           |          |         | extended |              | 
- totamt | numeric |           |          |         | main     |              | 
-View definition:
- SELECT type,
-    totamt
-   FROM mvtest_tv
-  ORDER BY type;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvm)$' COLLATE pg_catalog.default
+                                                                          ^
 \d+ mvtest_tvm
-                           Materialized view "public.mvtest_tvm"
- Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
---------+---------+-----------+----------+---------+----------+--------------+-------------
- type   | text    |           |          |         | extended |              | 
- totamt | numeric |           |          |         | main     |              | 
-View definition:
- SELECT type,
-    totamt
-   FROM mvtest_tv
-  ORDER BY type;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvm)$' COLLATE pg_catalog.default
+                                                                          ^
 \d+ mvtest_tvvm
-                           Materialized view "public.mvtest_tvvm"
-  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+--------------+-------------
- grandtot | numeric |           |          |         | main    |              | 
-View definition:
- SELECT grandtot
-   FROM mvtest_tvv;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvvm)$' COLLATE pg_catalog.default
+                                                                           ^
 \d+ mvtest_bb
-                            Materialized view "public.mvtest_bb"
-  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+--------------+-------------
- grandtot | numeric |           |          |         | main    |              | 
-Indexes:
-    "mvtest_aa" btree (grandtot)
-View definition:
- SELECT grandtot
-   FROM mvtest_tvvmv;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_bb)$' COLLATE pg_catalog.default
+                                                                         ^
 -- test schema behavior
 CREATE SCHEMA mvtest_mvschema;
 ALTER MATERIALIZED VIEW mvtest_tvm SET SCHEMA mvtest_mvschema;
+ERROR:  cannot set schema on relation "mvtest_tvm" because view "mvtest_tvmm" depends on it
+HINT:  consider dropping "mvtest_tvmm" first.
 \d+ mvtest_tvm
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvm)$' COLLATE pg_catalog.default
+                                                                          ^
 \d+ mvtest_tvmm
-                           Materialized view "public.mvtest_tvmm"
-  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+--------------+-------------
- grandtot | numeric |           |          |         | main    |              | 
-Indexes:
-    "mvtest_tvmm_expr" UNIQUE, btree ((grandtot > 0::numeric))
-    "mvtest_tvmm_pred" UNIQUE, btree (grandtot) WHERE grandtot < 0::numeric
-View definition:
- SELECT sum(totamt) AS grandtot
-   FROM mvtest_mvschema.mvtest_tvm;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvmm)$' COLLATE pg_catalog.default
+                                                                           ^
 SET search_path = mvtest_mvschema, public;
 \d+ mvtest_tvm
-                      Materialized view "mvtest_mvschema.mvtest_tvm"
- Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
---------+---------+-----------+----------+---------+----------+--------------+-------------
- type   | text    |           |          |         | extended |              | 
- totamt | numeric |           |          |         | main     |              | 
-View definition:
- SELECT type,
-    totamt
-   FROM mvtest_tv
-  ORDER BY type;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_tvm)$' COLLATE pg_catalog.default
+                                                                          ^
 -- modify the underlying table data
 INSERT INTO mvtest_t VALUES (6, 'z', 13);
 -- confirm pre- and post-refresh contents of fairly simple materialized views
@@ -186,6 +180,7 @@
 (3 rows)
 
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tm;
+NOTICE:  CONCURRENTLY is not required as views are refreshed concurrently
 REFRESH MATERIALIZED VIEW mvtest_tvm;
 SELECT * FROM mvtest_tm ORDER BY type;
  type | totamt 
@@ -207,25 +202,25 @@
 -- confirm pre- and post-refresh contents of nested materialized views
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tmm;
-       QUERY PLAN       
-------------------------
- Seq Scan on mvtest_tmm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tvmm;
-       QUERY PLAN        
--------------------------
- Seq Scan on mvtest_tvmm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tvvm;
-       QUERY PLAN        
--------------------------
- Seq Scan on mvtest_tvvm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT * FROM mvtest_tmm;
  grandtot 
 ----------
@@ -246,31 +241,30 @@
 
 REFRESH MATERIALIZED VIEW mvtest_tmm;
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tvmm;
-ERROR:  cannot refresh materialized view "public.mvtest_tvmm" concurrently
-HINT:  Create a unique index with no WHERE clause on one or more columns of the materialized view.
+NOTICE:  CONCURRENTLY is not required as views are refreshed concurrently
 REFRESH MATERIALIZED VIEW mvtest_tvmm;
 REFRESH MATERIALIZED VIEW mvtest_tvvm;
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tmm;
-       QUERY PLAN       
-------------------------
- Seq Scan on mvtest_tmm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tvmm;
-       QUERY PLAN        
--------------------------
- Seq Scan on mvtest_tvmm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (costs off)
   SELECT * FROM mvtest_tvvm;
-       QUERY PLAN        
--------------------------
- Seq Scan on mvtest_tvvm
-(1 row)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT * FROM mvtest_tmm;
  grandtot 
 ----------
@@ -291,13 +285,16 @@
 
 -- test diemv when the mv does not exist
 DROP MATERIALIZED VIEW IF EXISTS no_such_mv;
-NOTICE:  materialized view "no_such_mv" does not exist, skipping
 -- make sure invalid combination of options is prohibited
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_tvmm WITH NO DATA;
-ERROR:  CONCURRENTLY and WITH NO DATA options cannot be used together
+NOTICE:  CONCURRENTLY is not required as views are refreshed concurrently
 -- no tuple locks on materialized views
 SELECT * FROM mvtest_tvvm FOR SHARE;
-ERROR:  cannot lock rows in materialized view "mvtest_tvvm"
+ grandtot 
+----------
+       41
+(1 row)
+
 -- test join of mv and view
 SELECT type, m.totamt AS mtot, v.totamt AS vtot FROM mvtest_tm m LEFT JOIN mvtest_tv v USING (type) ORDER BY type;
  type | mtot | vtot 
@@ -309,94 +306,64 @@
 
 -- make sure that dependencies are reported properly when they block the drop
 DROP TABLE mvtest_t;
-ERROR:  cannot drop table mvtest_t because other objects depend on it
-DETAIL:  view mvtest_tv depends on table mvtest_t
-materialized view mvtest_mvschema.mvtest_tvm depends on view mvtest_tv
-materialized view mvtest_tvmm depends on materialized view mvtest_mvschema.mvtest_tvm
-view mvtest_tvv depends on view mvtest_tv
-materialized view mvtest_tvvm depends on view mvtest_tvv
-view mvtest_tvvmv depends on materialized view mvtest_tvvm
-materialized view mvtest_bb depends on view mvtest_tvvmv
-materialized view mvtest_tm depends on table mvtest_t
-materialized view mvtest_tmm depends on materialized view mvtest_tm
-HINT:  Use DROP ... CASCADE to drop the dependent objects too.
+ERROR:  cannot drop relation "mvtest_t" because view "mvtest_tv" depends on it
+HINT:  consider dropping "mvtest_tv" first.
 -- make sure dependencies are dropped and reported
 -- and make sure that transactional behavior is correct on rollback
 -- incidentally leaving some interesting materialized views for pg_dump testing
 BEGIN;
 DROP TABLE mvtest_t CASCADE;
-NOTICE:  drop cascades to 9 other objects
-DETAIL:  drop cascades to view mvtest_tv
-drop cascades to materialized view mvtest_mvschema.mvtest_tvm
-drop cascades to materialized view mvtest_tvmm
-drop cascades to view mvtest_tvv
-drop cascades to materialized view mvtest_tvvm
-drop cascades to view mvtest_tvvmv
-drop cascades to materialized view mvtest_bb
-drop cascades to materialized view mvtest_tm
-drop cascades to materialized view mvtest_tmm
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
 ROLLBACK;
+WARNING:  there is no transaction in progress
 -- some additional tests not using base tables
 CREATE VIEW mvtest_vt1 AS SELECT 1 moo;
 CREATE VIEW mvtest_vt2 AS SELECT moo, 2*moo FROM mvtest_vt1 UNION ALL SELECT moo, 3*moo FROM mvtest_vt1;
 \d+ mvtest_vt2
-                          View "public.mvtest_vt2"
-  Column  |  Type   | Collation | Nullable | Default | Storage | Description 
-----------+---------+-----------+----------+---------+---------+-------------
- moo      | integer |           |          |         | plain   | 
- ?column? | integer |           |          |         | plain   | 
-View definition:
- SELECT mvtest_vt1.moo,
-    2 * mvtest_vt1.moo AS "?column?"
-   FROM mvtest_vt1
-UNION ALL
- SELECT mvtest_vt1.moo,
-    3 * mvtest_vt1.moo
-   FROM mvtest_vt1;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mvtest_vt2)$' COLLATE pg_catalog.default
+                                                                          ^
 CREATE MATERIALIZED VIEW mv_test2 AS SELECT moo, 2*moo FROM mvtest_vt2 UNION ALL SELECT moo, 3*moo FROM mvtest_vt2;
 \d+ mv_test2
-                            Materialized view "public.mv_test2"
-  Column  |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
-----------+---------+-----------+----------+---------+---------+--------------+-------------
- moo      | integer |           |          |         | plain   |              | 
- ?column? | integer |           |          |         | plain   |              | 
-View definition:
- SELECT mvtest_vt2.moo,
-    2 * mvtest_vt2.moo AS "?column?"
-   FROM mvtest_vt2
-UNION ALL
- SELECT mvtest_vt2.moo,
-    3 * mvtest_vt2.moo
-   FROM mvtest_vt2;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mv_test2)$' COLLATE pg_catalog.default
+                                                                        ^
 CREATE MATERIALIZED VIEW mv_test3 AS SELECT * FROM mv_test2 WHERE moo = 12345;
 SELECT relispopulated FROM pg_class WHERE oid = 'mv_test3'::regclass;
  relispopulated 
 ----------------
- t
+ 
 (1 row)
 
 DROP VIEW mvtest_vt1 CASCADE;
-NOTICE:  drop cascades to 3 other objects
-DETAIL:  drop cascades to view mvtest_vt2
-drop cascades to materialized view mv_test2
-drop cascades to materialized view mv_test3
 -- test that duplicate values on unique index prevent refresh
 CREATE TABLE mvtest_foo(a, b) AS VALUES(1, 10);
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
 CREATE UNIQUE INDEX ON mvtest_mv(a);
 INSERT INTO mvtest_foo SELECT * FROM mvtest_foo;
 REFRESH MATERIALIZED VIEW mvtest_mv;
-ERROR:  could not create unique index "mvtest_mv_a_idx"
-DETAIL:  Key (a)=(1) is duplicated.
+ERROR:  duplicate key value violates unique constraint "mvtest_mv_a_key"
+DETAIL:  Key (a)=(1) already exists.
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv;
-ERROR:  new data for materialized view "mvtest_mv" contains duplicate rows without any null columns
-DETAIL:  Row: (1,10)
+ERROR:  duplicate key value violates unique constraint "mvtest_mv_a_key"
+DETAIL:  Key (a)=(1) already exists.
 DROP TABLE mvtest_foo CASCADE;
-NOTICE:  drop cascades to materialized view mvtest_mv
 -- make sure that all columns covered by unique indexes works
 CREATE TABLE mvtest_foo(a, b, c) AS VALUES(1, 2, 3);
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
 CREATE UNIQUE INDEX ON mvtest_mv (a);
 CREATE UNIQUE INDEX ON mvtest_mv (b);
@@ -405,116 +372,109 @@
 INSERT INTO mvtest_foo VALUES(3, 4, 5);
 REFRESH MATERIALIZED VIEW mvtest_mv;
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv;
+NOTICE:  CONCURRENTLY is not required as views are refreshed concurrently
 DROP TABLE mvtest_foo CASCADE;
-NOTICE:  drop cascades to materialized view mvtest_mv
 -- allow subquery to reference unpopulated matview if WITH NO DATA is specified
 CREATE MATERIALIZED VIEW mvtest_mv1 AS SELECT 1 AS col1 WITH NO DATA;
 CREATE MATERIALIZED VIEW mvtest_mv2 AS SELECT * FROM mvtest_mv1
   WHERE col1 = (SELECT LEAST(col1) FROM mvtest_mv1) WITH NO DATA;
+ERROR:  materialized view "mvtest_mv1" has not been populated
+HINT:  use the REFRESH MATERIALIZED VIEW command.
 DROP MATERIALIZED VIEW mvtest_mv1 CASCADE;
-NOTICE:  drop cascades to materialized view mvtest_mv2
 -- make sure that types with unusual equality tests work
 CREATE TABLE mvtest_boxes (id serial primary key, b box);
+ERROR:  at or near ")": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TABLE mvtest_boxes (id serial primary key, b box)
+                                                       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/21286/_version_
 INSERT INTO mvtest_boxes (b) VALUES
   ('(32,32),(31,31)'),
   ('(2.0000004,2.0000004),(1,1)'),
   ('(1.9999996,1.9999996),(1,1)');
+ERROR:  relation "mvtest_boxes" does not exist
 CREATE MATERIALIZED VIEW mvtest_boxmv AS SELECT * FROM mvtest_boxes;
+ERROR:  relation "mvtest_boxes" does not exist
 CREATE UNIQUE INDEX mvtest_boxmv_id ON mvtest_boxmv (id);
+ERROR:  relation "mvtest_boxmv" does not exist
 UPDATE mvtest_boxes SET b = '(2,2),(1,1)' WHERE id = 2;
+ERROR:  relation "mvtest_boxes" does not exist
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_boxmv;
+ERROR:  relation "mvtest_boxmv" does not exist
 SELECT * FROM mvtest_boxmv ORDER BY id;
- id |              b              
-----+-----------------------------
-  1 | (32,32),(31,31)
-  2 | (2,2),(1,1)
-  3 | (1.9999996,1.9999996),(1,1)
-(3 rows)
-
+ERROR:  relation "mvtest_boxmv" does not exist
 DROP TABLE mvtest_boxes CASCADE;
-NOTICE:  drop cascades to materialized view mvtest_boxmv
+ERROR:  relation "mvtest_boxes" does not exist
 -- make sure that column names are handled correctly
 CREATE TABLE mvtest_v (i int, j int);
 CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj, kk) AS SELECT i, j FROM mvtest_v; -- error
-ERROR:  too many column names were specified
+ERROR:  CREATE VIEW specifies 3 column names, but data source has 2 columns
 CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj) AS SELECT i, j FROM mvtest_v; -- ok
 CREATE MATERIALIZED VIEW mvtest_mv_v_2 (ii) AS SELECT i, j FROM mvtest_v; -- ok
+ERROR:  CREATE VIEW specifies 1 column name, but data source has 2 columns
 CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj, kk) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- error
-ERROR:  too many column names were specified
+ERROR:  CREATE VIEW specifies 3 column names, but data source has 2 columns
 CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
 CREATE MATERIALIZED VIEW mvtest_mv_v_4 (ii) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
+ERROR:  CREATE VIEW specifies 1 column name, but data source has 2 columns
 ALTER TABLE mvtest_v RENAME COLUMN i TO x;
+ERROR:  cannot rename column "i" because view "mvtest_mv_v" depends on it
+HINT:  consider dropping "mvtest_mv_v" first.
 INSERT INTO mvtest_v values (1, 2);
 CREATE UNIQUE INDEX mvtest_mv_v_ii ON mvtest_mv_v (ii);
 REFRESH MATERIALIZED VIEW mvtest_mv_v;
 UPDATE mvtest_v SET j = 3 WHERE x = 1;
+ERROR:  column "x" does not exist
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv_v;
+NOTICE:  CONCURRENTLY is not required as views are refreshed concurrently
 REFRESH MATERIALIZED VIEW mvtest_mv_v_2;
+ERROR:  relation "mvtest_mv_v_2" does not exist
 REFRESH MATERIALIZED VIEW mvtest_mv_v_3;
 REFRESH MATERIALIZED VIEW mvtest_mv_v_4;
+ERROR:  relation "mvtest_mv_v_4" does not exist
 SELECT * FROM mvtest_v;
- x | j 
+ i | j 
 ---+---
- 1 | 3
+ 1 | 2
 (1 row)
 
 SELECT * FROM mvtest_mv_v;
  ii | jj 
 ----+----
-  1 |  3
+  1 |  2
 (1 row)
 
 SELECT * FROM mvtest_mv_v_2;
- ii | j 
-----+---
-  1 | 3
-(1 row)
-
+ERROR:  relation "mvtest_mv_v_2" does not exist
 SELECT * FROM mvtest_mv_v_3;
  ii | jj 
 ----+----
-  1 |  3
+  1 |  2
 (1 row)
 
 SELECT * FROM mvtest_mv_v_4;
- ii | j 
-----+---
-  1 | 3
-(1 row)
-
+ERROR:  relation "mvtest_mv_v_4" does not exist
 DROP TABLE mvtest_v CASCADE;
-NOTICE:  drop cascades to 4 other objects
-DETAIL:  drop cascades to materialized view mvtest_mv_v
-drop cascades to materialized view mvtest_mv_v_2
-drop cascades to materialized view mvtest_mv_v_3
-drop cascades to materialized view mvtest_mv_v_4
 -- Check that unknown literals are converted to "text" in CREATE MATVIEW,
 -- so that we don't end up with unknown-type columns.
 CREATE MATERIALIZED VIEW mv_unspecified_types AS
   SELECT 42 as i, 42.5 as num, 'foo' as u, 'foo'::unknown as u2, null as n;
+ERROR:  invalid cast: string -> unknown
 \d+ mv_unspecified_types
-                      Materialized view "public.mv_unspecified_types"
- Column |  Type   | Collation | Nullable | Default | Storage  | Stats target | Description 
---------+---------+-----------+----------+---------+----------+--------------+-------------
- i      | integer |           |          |         | plain    |              | 
- num    | numeric |           |          |         | main     |              | 
- u      | text    |           |          |         | extended |              | 
- u2     | text    |           |          |         | extended |              | 
- n      | text    |           |          |         | extended |              | 
-View definition:
- SELECT 42 AS i,
-    42.5 AS num,
-    'foo'::text AS u,
-    'foo'::text AS u2,
-    NULL::text AS n;
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(mv_unspecified_types)$' COLLATE pg_catalog.default
+                                                                                    ^
 SELECT * FROM mv_unspecified_types;
- i  | num  |  u  | u2  | n 
-----+------+-----+-----+---
- 42 | 42.5 | foo | foo | 
-(1 row)
-
+ERROR:  relation "mv_unspecified_types" does not exist
 DROP MATERIALIZED VIEW mv_unspecified_types;
+ERROR:  relation "mv_unspecified_types" does not exist
 -- make sure that create WITH NO DATA does not plan the query (bug #13907)
 create materialized view mvtest_error as select 1/0 as x;  -- fail
 ERROR:  division by zero
@@ -524,6 +484,7 @@
 drop materialized view mvtest_error;
 -- make sure that matview rows can be referenced as source rows (bug #9398)
 CREATE TABLE mvtest_v AS SELECT generate_series(1,10) AS a;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 CREATE MATERIALIZED VIEW mvtest_mv_v AS SELECT a FROM mvtest_v WHERE a <= 5;
 DELETE FROM mvtest_v WHERE EXISTS ( SELECT * FROM mvtest_mv_v WHERE mvtest_mv_v.a = mvtest_v.a );
 SELECT * FROM mvtest_v;
@@ -547,7 +508,6 @@
 (5 rows)
 
 DROP TABLE mvtest_v CASCADE;
-NOTICE:  drop cascades to materialized view mvtest_mv_v
 -- make sure running as superuser works when MV owned by another role (bug #11208)
 CREATE ROLE regress_user_mvtest;
 SET ROLE regress_user_mvtest;
@@ -561,15 +521,20 @@
   fipshash(random()::text) AS newdata2,
   fipshash(random()::text) AS diff
   FROM generate_series(1, 10) i;
+ERROR:  unknown function: fipshash()
 CREATE MATERIALIZED VIEW mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
+ERROR:  relation "mvtest_foo_data" does not exist
 CREATE MATERIALIZED VIEW mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
-ERROR:  relation "mvtest_mv_foo" already exists
+ERROR:  relation "mvtest_foo_data" does not exist
 CREATE MATERIALIZED VIEW IF NOT EXISTS mvtest_mv_foo AS SELECT * FROM mvtest_foo_data;
-NOTICE:  relation "mvtest_mv_foo" already exists, skipping
+ERROR:  relation "mvtest_foo_data" does not exist
 CREATE UNIQUE INDEX ON mvtest_mv_foo (i);
+ERROR:  relation "mvtest_mv_foo" does not exist
 RESET ROLE;
 REFRESH MATERIALIZED VIEW mvtest_mv_foo;
+ERROR:  relation "mvtest_mv_foo" does not exist
 REFRESH MATERIALIZED VIEW CONCURRENTLY mvtest_mv_foo;
+ERROR:  relation "mvtest_mv_foo" does not exist
 DROP OWNED BY regress_user_mvtest CASCADE;
 DROP ROLE regress_user_mvtest;
 -- make sure that create WITH NO DATA works via SPI
@@ -581,22 +546,18 @@
   CREATE MATERIALIZED VIEW mvtest2 AS SELECT 1 AS x WITH NO DATA;
 END;
 $$ LANGUAGE plpgsql;
+NOTICE:  auto-committing transaction before processing DDL due to autocommit_before_ddl setting
+ERROR:  unimplemented: CREATE VIEW usage inside a function definition is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/110080/_version_
 SELECT mvtest_func();
- mvtest_func 
--------------
- 
-(1 row)
-
+ERROR:  unknown function: mvtest_func()
 SELECT * FROM mvtest1;
- x 
----
- 1
-(1 row)
-
+ERROR:  relation "mvtest1" does not exist
 SELECT * FROM mvtest2;
-ERROR:  materialized view "mvtest2" has not been populated
-HINT:  Use the REFRESH MATERIALIZED VIEW command.
+ERROR:  relation "mvtest2" does not exist
 ROLLBACK;
+WARNING:  there is no transaction in progress
 -- INSERT privileges if relation owner is not allowed to insert.
 CREATE SCHEMA matview_schema;
 CREATE USER regress_matview_user;
@@ -604,75 +565,87 @@
   REVOKE INSERT ON TABLES FROM regress_matview_user;
 GRANT ALL ON SCHEMA matview_schema TO public;
 SET SESSION AUTHORIZATION regress_matview_user;
+ERROR:  at or near "regress_matview_user": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SET SESSION AUTHORIZATION regress_matview_user
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/40283/_version_
 CREATE MATERIALIZED VIEW matview_schema.mv_withdata1 (a) AS
   SELECT generate_series(1, 10) WITH DATA;
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW matview_schema.mv_withdata2 (a) AS
   SELECT generate_series(1, 10) WITH DATA;
-              QUERY PLAN              
---------------------------------------
- ProjectSet (actual rows=10 loops=1)
-   ->  Result (actual rows=1 loops=1)
-(2 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 REFRESH MATERIALIZED VIEW matview_schema.mv_withdata2;
+ERROR:  relation "matview_schema.mv_withdata2" does not exist
 CREATE MATERIALIZED VIEW matview_schema.mv_nodata1 (a) AS
   SELECT generate_series(1, 10) WITH NO DATA;
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW matview_schema.mv_nodata2 (a) AS
   SELECT generate_series(1, 10) WITH NO DATA;
-          QUERY PLAN           
--------------------------------
- ProjectSet (never executed)
-   ->  Result (never executed)
-(2 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 REFRESH MATERIALIZED VIEW matview_schema.mv_nodata2;
+ERROR:  relation "matview_schema.mv_nodata2" does not exist
 RESET SESSION AUTHORIZATION;
+ERROR:  at or near "authorization": syntax error
+DETAIL:  source SQL:
+RESET SESSION AUTHORIZATION
+              ^
+HINT:  try \h RESET
 ALTER DEFAULT PRIVILEGES FOR ROLE regress_matview_user
   GRANT INSERT ON TABLES TO regress_matview_user;
 DROP SCHEMA matview_schema CASCADE;
-NOTICE:  drop cascades to 4 other objects
-DETAIL:  drop cascades to materialized view matview_schema.mv_withdata1
-drop cascades to materialized view matview_schema.mv_withdata2
-drop cascades to materialized view matview_schema.mv_nodata1
-drop cascades to materialized view matview_schema.mv_nodata2
 DROP USER regress_matview_user;
 -- CREATE MATERIALIZED VIEW ... IF NOT EXISTS
 CREATE MATERIALIZED VIEW matview_ine_tab AS SELECT 1;
 CREATE MATERIALIZED VIEW matview_ine_tab AS SELECT 1 / 0; -- error
-ERROR:  relation "matview_ine_tab" already exists
+ERROR:  relation "root.public.matview_ine_tab" already exists
 CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS
   SELECT 1 / 0; -- ok
-NOTICE:  relation "matview_ine_tab" already exists, skipping
 CREATE MATERIALIZED VIEW matview_ine_tab AS
   SELECT 1 / 0 WITH NO DATA; -- error
-ERROR:  relation "matview_ine_tab" already exists
+ERROR:  relation "root.public.matview_ine_tab" already exists
 CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS
   SELECT 1 / 0 WITH NO DATA; -- ok
-NOTICE:  relation "matview_ine_tab" already exists, skipping
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW matview_ine_tab AS
     SELECT 1 / 0; -- error
-ERROR:  relation "matview_ine_tab" already exists
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS
     SELECT 1 / 0; -- ok
-NOTICE:  relation "matview_ine_tab" already exists, skipping
- QUERY PLAN 
-------------
-(0 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW matview_ine_tab AS
     SELECT 1 / 0 WITH NO DATA; -- error
-ERROR:  relation "matview_ine_tab" already exists
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
   CREATE MATERIALIZED VIEW IF NOT EXISTS matview_ine_tab AS
     SELECT 1 / 0 WITH NO DATA; -- ok
-NOTICE:  relation "matview_ine_tab" already exists, skipping
- QUERY PLAN 
-------------
-(0 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 DROP MATERIALIZED VIEW matview_ine_tab;
