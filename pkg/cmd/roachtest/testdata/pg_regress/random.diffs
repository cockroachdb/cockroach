diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/random.out --label=/mnt/data1/postgres/src/test/regress/results/random.out /mnt/data1/postgres/src/test/regress/expected/random.out /mnt/data1/postgres/src/test/regress/results/random.out
--- /mnt/data1/postgres/src/test/regress/expected/random.out
+++ /mnt/data1/postgres/src/test/regress/results/random.out
@@ -50,44 +50,30 @@
 END
 $$
 LANGUAGE plpgsql;
+ERROR:  max(): abs(): unsupported binary operator: <decimal> - <float>
 -- As written, ks_test_uniform_random() returns true about 99.9%
 -- of the time.  To get down to a roughly 1e-9 test failure rate,
 -- just run it 3 times and accept if any one of them passes.
 SELECT ks_test_uniform_random() OR
        ks_test_uniform_random() OR
        ks_test_uniform_random() AS uniform;
- uniform 
----------
- t
-(1 row)
-
+ERROR:  unknown function: ks_test_uniform_random()
 -- now test random_normal()
 -- As above, there should be no duplicates in 1000 random_normal() values.
 SELECT r, count(*)
 FROM (SELECT random_normal() r FROM generate_series(1, 1000)) ss
 GROUP BY r HAVING count(*) > 1;
- r | count 
----+-------
-(0 rows)
-
+ERROR:  unknown function: random_normal()
 -- ... unless we force the range (standard deviation) to zero.
 -- This is a good place to check that the mean input does something, too.
 SELECT r, count(*)
 FROM (SELECT random_normal(10, 0) r FROM generate_series(1, 100)) ss
 GROUP BY r;
- r  | count 
-----+-------
- 10 |   100
-(1 row)
-
+ERROR:  unknown function: random_normal()
 SELECT r, count(*)
 FROM (SELECT random_normal(-10, 0) r FROM generate_series(1, 100)) ss
 GROUP BY r;
-  r  | count 
------+-------
- -10 |   100
-(1 row)
-
+ERROR:  unknown function: random_normal()
 -- Check standard normal distribution using the Kolmogorov-Smirnov test.
 CREATE FUNCTION ks_test_normal_random()
 RETURNS boolean AS
@@ -110,16 +96,13 @@
 END
 $$
 LANGUAGE plpgsql;
+ERROR:  unknown function: random_normal()
 -- As above, ks_test_normal_random() returns true about 99.9%
 -- of the time, so try it 3 times and accept if any test passes.
 SELECT ks_test_normal_random() OR
        ks_test_normal_random() OR
        ks_test_normal_random() AS standard_normal;
- standard_normal 
------------------
- t
-(1 row)
-
+ERROR:  unknown function: ks_test_normal_random()
 -- setseed() should produce a reproducible series of random() values.
 SELECT setseed(0.5);
  setseed 
@@ -128,18 +111,18 @@
 (1 row)
 
 SELECT random() FROM generate_series(1, 10);
-       random        
----------------------
-  0.9851677175347999
-   0.825301858027981
- 0.12974610012450416
- 0.16356291958601088
-     0.6476186144084
-  0.8822771983038762
-  0.1404566845227775
- 0.15619865764623442
-  0.5145227426983392
-  0.7712969548127826
+        random        
+----------------------
+   0.7405729739069671
+   0.6429242270300878
+    0.923317837547811
+   0.8302176110799103
+   0.8678019690626849
+   0.8833009280307493
+ 0.051161651361675116
+   0.7939582879726885
+   0.2115527649597802
+    0.968607990391967
 (10 rows)
 
 -- Likewise for random_normal(); however, since its implementation relies
@@ -147,32 +130,9 @@
 -- machines, we have to round off the results a bit to get consistent output.
 SET extra_float_digits = -1;
 SELECT random_normal() FROM generate_series(1, 10);
-   random_normal   
--------------------
-  0.20853464493838
-  0.26453024054096
- -0.60675246790043
-  0.82579942785265
-   1.7011161173536
- -0.22344546371619
-    0.249712419191
-  -1.2494722990669
-  0.12562715204368
-  0.47539161454401
-(10 rows)
-
+ERROR:  unknown function: random_normal()
 SELECT random_normal(mean => 1, stddev => 0.1) r FROM generate_series(1, 10);
-        r         
-------------------
-  1.0060597281173
-    1.09685453015
-  1.0286920613201
- 0.90947567671234
- 0.98372476313426
- 0.93934454957762
-  1.1871350020636
- 0.96225768429293
- 0.91444120680041
- 0.96403105557543
-(10 rows)
-
+ERROR:  at or near ">": syntax error
+DETAIL:  source SQL:
+SELECT random_normal(mean => 1, stddev => 0.1) r FROM generate_series(1, 10)
+                           ^
