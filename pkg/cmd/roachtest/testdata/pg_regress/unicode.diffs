diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/unicode_1.out --label=/mnt/data1/postgres/src/test/regress/results/unicode.out /mnt/data1/postgres/src/test/regress/expected/unicode_1.out /mnt/data1/postgres/src/test/regress/results/unicode.out
--- /mnt/data1/postgres/src/test/regress/expected/unicode_1.out
+++ /mnt/data1/postgres/src/test/regress/results/unicode.out
@@ -1,3 +1,51 @@
 SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
 \if :skip_test
 \quit
+\endif
+SELECT U&'\0061\0308bc' <> U&'\00E4bc' COLLATE "C" AS sanity_check;
+ERROR:  column "u" does not exist
+SELECT normalize('');
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\0061\0308\24D1c') = U&'\00E4\24D1c' COLLATE "C" AS test_default;
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\0061\0308\24D1c', NFC) = U&'\00E4\24D1c' COLLATE "C" AS test_nfc;
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\00E4bc', NFC) = U&'\00E4bc' COLLATE "C" AS test_nfc_idem;
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\00E4\24D1c', NFD) = U&'\0061\0308\24D1c' COLLATE "C" AS test_nfd;
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\0061\0308\24D1c', NFKC) = U&'\00E4bc' COLLATE "C" AS test_nfkc;
+ERROR:  unknown function: normalize()
+SELECT normalize(U&'\00E4\24D1c', NFKD) = U&'\0061\0308bc' COLLATE "C" AS test_nfkd;
+ERROR:  unknown function: normalize()
+SELECT "normalize"('abc', 'def');  -- run-time error
+ERROR:  unknown function: normalize()
+SELECT U&'\00E4\24D1c' IS NORMALIZED AS test_default;
+ERROR:  at or near "normalized": syntax error
+DETAIL:  source SQL:
+SELECT U&'\00E4\24D1c' IS NORMALIZED AS test_default
+                          ^
+SELECT U&'\00E4\24D1c' IS NFC NORMALIZED AS test_nfc;
+ERROR:  at or near "nfc": syntax error
+DETAIL:  source SQL:
+SELECT U&'\00E4\24D1c' IS NFC NORMALIZED AS test_nfc
+                          ^
+SELECT num, val,
+    val IS NFC NORMALIZED AS NFC,
+    val IS NFD NORMALIZED AS NFD,
+    val IS NFKC NORMALIZED AS NFKC,
+    val IS NFKD NORMALIZED AS NFKD
+FROM
+  (VALUES (1, U&'\00E4bc'),
+          (2, U&'\0061\0308bc'),
+          (3, U&'\00E4\24D1c'),
+          (4, U&'\0061\0308\24D1c'),
+          (5, '')) vals (num, val)
+ORDER BY num;
+ERROR:  at or near "nfc": syntax error
+DETAIL:  source SQL:
+SELECT num, val,
+    val IS NFC NORMALIZED AS NFC,
+           ^
+SELECT is_normalized('abc', 'def');  -- run-time error
+ERROR:  unknown function: is_normalized()
