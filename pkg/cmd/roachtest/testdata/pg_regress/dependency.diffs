diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/dependency.out --label=/mnt/data1/postgres/src/test/regress/results/dependency.out /mnt/data1/postgres/src/test/regress/expected/dependency.out /mnt/data1/postgres/src/test/regress/results/dependency.out
--- /mnt/data1/postgres/src/test/regress/expected/dependency.out
+++ /mnt/data1/postgres/src/test/regress/results/dependency.out
@@ -6,26 +6,40 @@
 CREATE USER regress_dep_user3;
 CREATE GROUP regress_dep_group;
 CREATE TABLE deptest (f1 serial primary key, f2 text);
+NOTICE:  using sequential values in a primary key does not perform as well as using random UUIDs. See https://www.cockroachlabs.com/docs/_version_/serial.html
 GRANT SELECT ON TABLE deptest TO GROUP regress_dep_group;
+ERROR:  at or near "group": syntax error
+DETAIL:  source SQL:
+GRANT SELECT ON TABLE deptest TO GROUP regress_dep_group
+                                 ^
+HINT:  try \h GRANT
 GRANT ALL ON TABLE deptest TO regress_dep_user, regress_dep_user2;
 -- can't drop neither because they have privileges somewhere
 DROP USER regress_dep_user;
-ERROR:  role "regress_dep_user" cannot be dropped because some objects depend on it
-DETAIL:  privileges for table deptest
+ERROR:  cannot drop role/user regress_dep_user: grants still exist on root.public.deptest
 DROP GROUP regress_dep_group;
-ERROR:  role "regress_dep_group" cannot be dropped because some objects depend on it
-DETAIL:  privileges for table deptest
 -- if we revoke the privileges we can drop the group
 REVOKE SELECT ON deptest FROM GROUP regress_dep_group;
+ERROR:  at or near "group": syntax error
+DETAIL:  source SQL:
+REVOKE SELECT ON deptest FROM GROUP regress_dep_group
+                              ^
+HINT:  try \h REVOKE
 DROP GROUP regress_dep_group;
+ERROR:  role/user "regress_dep_group" does not exist
 -- can't drop the user if we revoke the privileges partially
 REVOKE SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES ON deptest FROM regress_dep_user;
+ERROR:  at or near "references": syntax error
+DETAIL:  source SQL:
+REVOKE SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES ON deptest FROM regress_dep_user
+                                                 ^
+HINT:  try \h REVOKE
 DROP USER regress_dep_user;
-ERROR:  role "regress_dep_user" cannot be dropped because some objects depend on it
-DETAIL:  privileges for table deptest
+ERROR:  cannot drop role/user regress_dep_user: grants still exist on root.public.deptest
 -- now we are OK to drop him
 REVOKE TRIGGER ON deptest FROM regress_dep_user;
 DROP USER regress_dep_user;
+ERROR:  cannot drop role/user regress_dep_user: grants still exist on root.public.deptest
 -- we are OK too if we drop the privileges all at once
 REVOKE ALL ON deptest FROM regress_dep_user2;
 DROP USER regress_dep_user2;
@@ -35,7 +49,8 @@
 \set VERBOSITY terse
 ALTER TABLE deptest OWNER TO regress_dep_user3;
 DROP USER regress_dep_user3;
-ERROR:  role "regress_dep_user3" cannot be dropped because some objects depend on it
+ERROR:  role regress_dep_user3 cannot be dropped because some objects depend on it
+owner of table root.public.deptest
 \set VERBOSITY default
 -- if we drop the object, we can drop the user too
 DROP TABLE deptest;
@@ -45,59 +60,168 @@
 CREATE USER regress_dep_user1;
 CREATE USER regress_dep_user2;
 SET SESSION AUTHORIZATION regress_dep_user0;
+ERROR:  at or near "regress_dep_user0": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SET SESSION AUTHORIZATION regress_dep_user0
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/40283/_version_
 -- permission denied
 DROP OWNED BY regress_dep_user1;
-ERROR:  permission denied to drop objects
-DETAIL:  Only roles with privileges of role "regress_dep_user1" may drop objects owned by it.
 DROP OWNED BY regress_dep_user0, regress_dep_user2;
-ERROR:  permission denied to drop objects
-DETAIL:  Only roles with privileges of role "regress_dep_user2" may drop objects owned by it.
 REASSIGN OWNED BY regress_dep_user0 TO regress_dep_user1;
-ERROR:  permission denied to reassign objects
-DETAIL:  Only roles with privileges of role "regress_dep_user1" may reassign objects to it.
 REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user0;
-ERROR:  permission denied to reassign objects
-DETAIL:  Only roles with privileges of role "regress_dep_user1" may reassign objects owned by it.
 -- this one is allowed
 DROP OWNED BY regress_dep_user0;
 CREATE TABLE deptest1 (f1 int unique);
 GRANT ALL ON deptest1 TO regress_dep_user1 WITH GRANT OPTION;
 SET SESSION AUTHORIZATION regress_dep_user1;
+ERROR:  at or near "regress_dep_user1": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SET SESSION AUTHORIZATION regress_dep_user1
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/40283/_version_
 CREATE TABLE deptest (a serial primary key, b text);
+NOTICE:  using sequential values in a primary key does not perform as well as using random UUIDs. See https://www.cockroachlabs.com/docs/_version_/serial.html
 GRANT ALL ON deptest1 TO regress_dep_user2;
 RESET SESSION AUTHORIZATION;
+ERROR:  at or near "authorization": syntax error
+DETAIL:  source SQL:
+RESET SESSION AUTHORIZATION
+              ^
+HINT:  try \h RESET
 \z deptest1
-                                               Access privileges
- Schema |   Name   | Type  |                 Access privileges                  | Column privileges | Policies 
---------+----------+-------+----------------------------------------------------+-------------------+----------
- public | deptest1 | table | regress_dep_user0=arwdDxt/regress_dep_user0       +|                   | 
-        |          |       | regress_dep_user1=a*r*w*d*D*x*t*/regress_dep_user0+|                   | 
-        |          |       | regress_dep_user2=arwdDxt/regress_dep_user1        |                   | 
-(1 row)
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT n.nspname as "Schema",
+  c.relname as "Name",
+  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'S' THEN 'sequence' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' END as "Type",
+  pg_catalog.array_to_string(c.relacl, E'\n') AS "Access privileges",
+  pg_catalog.array_to_string(ARRAY(
+    SELECT attname || E':\n  ' || pg_catalog.array_to_string(attacl, E'\n  ')
+    FROM pg_catalog.pg_attribute a
+    WHERE attrelid = c.oid AND NOT attisdropped AND attacl IS NOT NULL
+  ), E'\n') AS "Column privileges",
+  pg_catalog.array_to_string(ARRAY(
+    SELECT polname
+    || CASE WHEN NOT polpermissive THEN
+       E' (RESTRICTIVE)'
+       ELSE '' END
+    || CASE WHEN polcmd != '*' THEN
+           E' (' || polcmd || E'):'
+       ELSE E':'
+       END
+    || CASE WHEN polqual IS NOT NULL THEN
+           E'\n  (u): ' || pg_catalog.pg_get_expr(polqual, polrelid)
+       ELSE E''
+       END
+    || CASE WHEN polwithcheck IS NOT NULL THEN
+           E'\n  (c): ' || pg_catalog.pg_get_expr(polwithcheck, polrelid)
+       ELSE E''
+       END    || CASE WHEN polroles <> '{0}' THEN
+           E'\n  to: ' || pg_catalog.array_to_string(
+               ARRAY(
+                   SELECT rolname
+                   FROM pg_catalog.pg_roles
+                   WHERE oid = ANY (polroles)
+                   ORDER BY 1
+               ), E', ')
+       ELSE E''
+       END
+    FROM pg_catalog.pg_policy pol
+    WHERE polrelid = c.oid), E'\n')
+    AS "Policies"
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relkind IN ('r','v','m','S','f','p')
+  AND c.relname OPERATOR(pg_catalog.~) '^(deptest1)$' COLLATE pg_catalog.default
+                                                                        ^
 DROP OWNED BY regress_dep_user1;
 -- all grants revoked
 \z deptest1
-                                           Access privileges
- Schema |   Name   | Type  |              Access privileges              | Column privileges | Policies 
---------+----------+-------+---------------------------------------------+-------------------+----------
- public | deptest1 | table | regress_dep_user0=arwdDxt/regress_dep_user0 |                   | 
-(1 row)
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT n.nspname as "Schema",
+  c.relname as "Name",
+  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'S' THEN 'sequence' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' END as "Type",
+  pg_catalog.array_to_string(c.relacl, E'\n') AS "Access privileges",
+  pg_catalog.array_to_string(ARRAY(
+    SELECT attname || E':\n  ' || pg_catalog.array_to_string(attacl, E'\n  ')
+    FROM pg_catalog.pg_attribute a
+    WHERE attrelid = c.oid AND NOT attisdropped AND attacl IS NOT NULL
+  ), E'\n') AS "Column privileges",
+  pg_catalog.array_to_string(ARRAY(
+    SELECT polname
+    || CASE WHEN NOT polpermissive THEN
+       E' (RESTRICTIVE)'
+       ELSE '' END
+    || CASE WHEN polcmd != '*' THEN
+           E' (' || polcmd || E'):'
+       ELSE E':'
+       END
+    || CASE WHEN polqual IS NOT NULL THEN
+           E'\n  (u): ' || pg_catalog.pg_get_expr(polqual, polrelid)
+       ELSE E''
+       END
+    || CASE WHEN polwithcheck IS NOT NULL THEN
+           E'\n  (c): ' || pg_catalog.pg_get_expr(polwithcheck, polrelid)
+       ELSE E''
+       END    || CASE WHEN polroles <> '{0}' THEN
+           E'\n  to: ' || pg_catalog.array_to_string(
+               ARRAY(
+                   SELECT rolname
+                   FROM pg_catalog.pg_roles
+                   WHERE oid = ANY (polroles)
+                   ORDER BY 1
+               ), E', ')
+       ELSE E''
+       END
+    FROM pg_catalog.pg_policy pol
+    WHERE polrelid = c.oid), E'\n')
+    AS "Policies"
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relkind IN ('r','v','m','S','f','p')
+  AND c.relname OPERATOR(pg_catalog.~) '^(deptest1)$' COLLATE pg_catalog.default
+                                                                        ^
 -- table was dropped
 \d deptest
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT c.oid,
+  n.nspname,
+  c.relname
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relname OPERATOR(pg_catalog.~) '^(deptest)$' COLLATE pg_catalog.default
+                                                                       ^
 -- Test REASSIGN OWNED
 GRANT ALL ON deptest1 TO regress_dep_user1;
 GRANT CREATE ON DATABASE regression TO regress_dep_user1;
+ERROR:  database "regression" does not exist
 SET SESSION AUTHORIZATION regress_dep_user1;
+ERROR:  at or near "regress_dep_user1": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SET SESSION AUTHORIZATION regress_dep_user1
+                          ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/40283/_version_
 CREATE SCHEMA deptest;
 CREATE TABLE deptest (a serial primary key, b text);
+ERROR:  relation "root.public.deptest" already exists
 ALTER DEFAULT PRIVILEGES FOR ROLE regress_dep_user1 IN SCHEMA deptest
   GRANT ALL ON TABLES TO regress_dep_user2;
 CREATE FUNCTION deptest_func() RETURNS void LANGUAGE plpgsql
   AS $$ BEGIN END; $$;
 CREATE TYPE deptest_enum AS ENUM ('red');
 CREATE TYPE deptest_range AS RANGE (SUBTYPE = int4);
+ERROR:  at or near "(": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE TYPE deptest_range AS RANGE (SUBTYPE = int4)
+                                   ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/27791/_version_
 CREATE TABLE deptest2 (f1 int);
 -- make a serial column the hard way
 CREATE SEQUENCE ss1;
@@ -114,14 +238,24 @@
 (1 row)
 
 RESET SESSION AUTHORIZATION;
+ERROR:  at or near "authorization": syntax error
+DETAIL:  source SQL:
+RESET SESSION AUTHORIZATION
+              ^
+HINT:  try \h RESET
 REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user2;
 \dt deptest
-              List of relations
- Schema |  Name   | Type  |       Owner       
---------+---------+-------+-------------------
- public | deptest | table | regress_dep_user2
-(1 row)
-
+ERROR:  at or near ".": syntax error
+DETAIL:  source SQL:
+SELECT n.nspname as "Schema",
+  c.relname as "Name",
+  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 't' THEN 'TOAST table' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
+  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
+FROM pg_catalog.pg_class c
+     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
+WHERE c.relkind IN ('r','p','t','s','')
+  AND c.relname OPERATOR(pg_catalog.~) '^(deptest)$' COLLATE pg_catalog.default
+                                                                       ^
 SELECT typowner = relowner
 FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t';
  ?column? 
@@ -131,24 +265,17 @@
 
 -- doesn't work: grant still exists
 DROP USER regress_dep_user1;
-ERROR:  role "regress_dep_user1" cannot be dropped because some objects depend on it
-DETAIL:  privileges for database regression
-privileges for table deptest1
-owner of default privileges on new relations belonging to role regress_dep_user1 in schema deptest
+ERROR:  cannot drop role/user regress_dep_user1: grants still exist on root.public.deptest1
 DROP OWNED BY regress_dep_user1;
 DROP USER regress_dep_user1;
+ERROR:  role regress_dep_user1 cannot be dropped because some objects depend on it
+owner of default privileges on new relations belonging to role regress_dep_user1 in database root in schema deptest
+HINT:  USE root; ALTER DEFAULT PRIVILEGES FOR ROLE regress_dep_user1 IN SCHEMA DEPTEST REVOKE ALL ON TABLES FROM regress_dep_user2;
 DROP USER regress_dep_user2;
-ERROR:  role "regress_dep_user2" cannot be dropped because some objects depend on it
-DETAIL:  owner of schema deptest
-owner of sequence deptest_a_seq
-owner of table deptest
-owner of function deptest_func()
-owner of type deptest_enum
-owner of type deptest_multirange
-owner of type deptest_range
-owner of table deptest2
-owner of sequence ss1
-owner of type deptest_t
+ERROR:  cannot drop role/user regress_dep_user2: grants still exist on root.public.deptest1
 DROP OWNED BY regress_dep_user2, regress_dep_user0;
 DROP USER regress_dep_user2;
+ERROR:  role regress_dep_user2 cannot be dropped because some objects depend on it
+privileges for default privileges on new relations belonging to role regress_dep_user1 in database root in schema deptest
+HINT:  USE root; ALTER DEFAULT PRIVILEGES FOR ROLE regress_dep_user1 IN SCHEMA DEPTEST REVOKE ALL ON TABLES FROM regress_dep_user2;
 DROP USER regress_dep_user0;
