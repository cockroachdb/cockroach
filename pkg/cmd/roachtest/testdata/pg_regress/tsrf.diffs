diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/tsrf.out --label=/mnt/data1/postgres/src/test/regress/results/tsrf.out /mnt/data1/postgres/src/test/regress/expected/tsrf.out /mnt/data1/postgres/src/test/regress/results/tsrf.out
--- /mnt/data1/postgres/src/test/regress/expected/tsrf.out
+++ /mnt/data1/postgres/src/test/regress/results/tsrf.out
@@ -31,69 +31,39 @@
 
 -- srf, with SRF argument
 SELECT generate_series(1, generate_series(1, 3));
- generate_series 
------------------
-               1
-               1
-               2
-               1
-               2
-               3
-(6 rows)
-
+ERROR:  generate_series(): unimplemented: nested set-returning functions
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/26234/_version_
 -- but we've traditionally rejected the same in FROM
 SELECT * FROM generate_series(1, generate_series(1, 3));
-ERROR:  set-returning functions must appear at top level of FROM
-LINE 1: SELECT * FROM generate_series(1, generate_series(1, 3));
-                                         ^
+ERROR:  generate_series(): generate_series(): set-returning functions must appear at the top level of FROM
 -- srf, with two SRF arguments
 SELECT generate_series(generate_series(1,3), generate_series(2, 4));
- generate_series 
------------------
-               1
-               2
-               2
-               3
-               3
-               4
-(6 rows)
-
+ERROR:  generate_series(): unimplemented: nested set-returning functions
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/26234/_version_
 -- check proper nesting of SRFs in different expressions
 explain (verbose, costs off)
 SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
-                                   QUERY PLAN                                   
---------------------------------------------------------------------------------
- ProjectSet
-   Output: generate_series(1, (generate_series(1, 3))), (generate_series(2, 4))
-   ->  ProjectSet
-         Output: generate_series(1, 3), generate_series(2, 4)
-         ->  Result
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
- generate_series | generate_series 
------------------+-----------------
-               1 |               2
-               1 |               3
-               2 |               3
-               1 |               4
-               2 |               4
-               3 |               4
-(6 rows)
-
+ERROR:  generate_series(): unimplemented: nested set-returning functions
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/26234/_version_
 CREATE TABLE few(id int, dataa text, datab text);
 INSERT INTO few VALUES(1, 'a', 'foo'),(2, 'a', 'bar'),(3, 'b', 'bar');
 -- SRF with a provably-dummy relation
 explain (verbose, costs off)
 SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
-              QUERY PLAN              
---------------------------------------
- ProjectSet
-   Output: unnest('{1,2}'::integer[])
-   ->  Result
-         One-Time Filter: false
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
  unnest 
 --------
@@ -103,13 +73,11 @@
 explain (verbose, costs off)
 SELECT * FROM few f1,
   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
-                   QUERY PLAN                   
-------------------------------------------------
- Result
-   Output: f1.id, f1.dataa, f1.datab, ss.unnest
-   One-Time Filter: false
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT * FROM few f1,
   (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
  id | dataa | datab | unnest 
@@ -147,73 +115,49 @@
 (9 rows)
 
 SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, generate_series(1,3) DESC;
- id | g 
-----+---
-  1 | 3
-  1 | 2
-  1 | 1
-  2 | 3
-  2 | 2
-  2 | 1
-  3 | 3
-  3 | 2
-  3 | 1
-(9 rows)
-
+ERROR:  generate_series(): set-returning functions are not allowed in ORDER BY
 -- it's weird to have ORDER BYs that increase the number of results
 SELECT few.id FROM few ORDER BY id, generate_series(1,3) DESC;
- id 
-----
-  1
-  1
-  1
-  2
-  2
-  2
-  3
-  3
-  3
-(9 rows)
-
+ERROR:  generate_series(): set-returning functions are not allowed in ORDER BY
 -- SRFs are computed after aggregation
 SET enable_hashagg TO 0; -- stable output order
-SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa;
- dataa | count | min | max | unnest 
--------+-------+-----+-----+--------
- a     |     1 |   1 |   1 |      1
- a     |     1 |   1 |   1 |      1
- a     |     1 |   1 |   1 |      3
-(3 rows)
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
 
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
+SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa;
+ERROR:  column "unnest" must appear in the GROUP BY clause or be used in an aggregate function
 -- unless referenced in GROUP BY clause
 SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, unnest('{1,1,3}'::int[]);
- dataa | count | min | max | unnest 
--------+-------+-----+-----+--------
- a     |     2 |   1 |   1 |      1
- a     |     1 |   1 |   1 |      3
-(2 rows)
-
+ERROR:  unnest(): set-returning functions are not allowed in GROUP BY
 SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, 5;
- dataa | count | min | max | unnest 
--------+-------+-----+-----+--------
- a     |     2 |   1 |   1 |      1
- a     |     1 |   1 |   1 |      3
-(2 rows)
-
+ERROR:  unnest(): set-returning functions are not allowed in GROUP BY
 RESET enable_hashagg;
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- check HAVING works when GROUP BY does [not] reference SRF output
 SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1;
- dataa | generate_series | count 
--------+-----------------+-------
- a     |               1 |     2
-(1 row)
-
+ERROR:  column "generate_series" must appear in the GROUP BY clause or be used in an aggregate function
 SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1, 2 HAVING count(*) > 1;
- dataa | generate_series | count 
--------+-----------------+-------
- a     |               1 |     2
-(1 row)
-
+ERROR:  generate_series(): set-returning functions are not allowed in GROUP BY
 -- it's weird to have GROUP BYs that increase the number of results
 SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2;
  dataa | count 
@@ -222,29 +166,15 @@
 (1 row)
 
 SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2;
- dataa | count 
--------+-------
- a     |     2
- a     |     4
-(2 rows)
-
+ERROR:  unnest(): set-returning functions are not allowed in GROUP BY
 -- SRFs are not allowed if they'd need to be conditionally executed
 SELECT q1, case when q1 > 0 then generate_series(1,3) else 0 end FROM int8_tbl;
-ERROR:  set-returning functions are not allowed in CASE
-LINE 1: SELECT q1, case when q1 > 0 then generate_series(1,3) else 0...
-                                         ^
-HINT:  You might be able to move the set-returning function into a LATERAL FROM item.
+ERROR:  set-returning functions are not allowed in conditional expressions
 SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl;
-ERROR:  set-returning functions are not allowed in COALESCE
-LINE 1: SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl;
-                            ^
-HINT:  You might be able to move the set-returning function into a LATERAL FROM item.
+ERROR:  set-returning functions are not allowed in conditional expressions
 -- SRFs are not allowed in aggregate arguments
 SELECT min(generate_series(1, 3)) FROM few;
-ERROR:  aggregate function calls cannot contain set-returning function calls
-LINE 1: SELECT min(generate_series(1, 3)) FROM few;
-                   ^
-HINT:  You might be able to move the set-returning function into a LATERAL FROM item.
+ERROR:  min(): set-returning functions are not allowed in aggregate
 -- ... unless they're within a sub-select
 SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int);
  sum 
@@ -261,210 +191,117 @@
 
 -- SRFs are not allowed in window function arguments, either
 SELECT min(generate_series(1, 3)) OVER() FROM few;
-ERROR:  window function calls cannot contain set-returning function calls
-LINE 1: SELECT min(generate_series(1, 3)) OVER() FROM few;
-                   ^
-HINT:  You might be able to move the set-returning function into a LATERAL FROM item.
+ min 
+-----
+   1
+   1
+   1
+   1
+   1
+   1
+   1
+   1
+   1
+(9 rows)
+
 -- SRFs are normally computed after window functions
 SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few;
  id | lag | count | generate_series 
 ----+-----+-------+-----------------
-  1 |     |     3 |               1
-  1 |     |     3 |               2
-  1 |     |     3 |               3
-  2 |   1 |     3 |               1
-  2 |   1 |     3 |               2
-  2 |   1 |     3 |               3
-  3 |   2 |     3 |               1
-  3 |   2 |     3 |               2
-  3 |   2 |     3 |               3
+  1 |     |     9 |               1
+  1 |   1 |     9 |               2
+  1 |   1 |     9 |               3
+  2 |   1 |     9 |               1
+  2 |   2 |     9 |               2
+  2 |   2 |     9 |               3
+  3 |   2 |     9 |               1
+  3 |   3 |     9 |               2
+  3 |   3 |     9 |               3
 (9 rows)
 
 -- unless referencing SRFs
 SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g;
- sum | g 
------+---
-   3 | 1
-   3 | 2
-   3 | 3
-(3 rows)
-
+ERROR:  set-returning functions are not allowed in GROUP BY
 -- sorting + grouping
 SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1;
- dataa | count | min | max | generate_series 
--------+-------+-----+-----+-----------------
- a     |     2 |   1 |   2 |               1
- b     |     1 |   3 |   3 |               1
- a     |     2 |   1 |   2 |               2
- b     |     1 |   3 |   3 |               2
- a     |     2 |   1 |   2 |               3
- b     |     1 |   3 |   3 |               3
-(6 rows)
-
+ERROR:  column "generate_series" must appear in the GROUP BY clause or be used in an aggregate function
 -- grouping sets are a bit special, they produce NULLs in columns not actually NULL
 set enable_hashagg = false;
-SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab);
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | bar | 1 |     1
- a     | bar | 2 |     1
- a     | foo | 1 |     1
- a     | foo | 2 |     1
- a     |     | 1 |     2
- a     |     | 2 |     2
- b     | bar | 1 |     1
- b     | bar | 2 |     1
- b     |     | 1 |     1
- b     |     | 2 |     1
-       |     | 1 |     3
-       |     | 2 |     3
-       | bar | 1 |     2
-       | bar | 2 |     2
-       | foo | 1 |     1
-       | foo | 2 |     1
-(16 rows)
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
 
-SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa;
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | bar | 1 |     1
- a     | bar | 2 |     1
- a     | foo | 1 |     1
- a     | foo | 2 |     1
- a     |     | 1 |     2
- a     |     | 2 |     2
- b     | bar | 1 |     1
- b     | bar | 2 |     1
- b     |     | 1 |     1
- b     |     | 2 |     1
-       |     | 1 |     3
-       |     | 2 |     3
-       | bar | 1 |     2
-       | bar | 2 |     2
-       | foo | 1 |     1
-       | foo | 2 |     1
-(16 rows)
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
 
-SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g;
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | bar | 1 |     1
- a     | foo | 1 |     1
- a     |     | 1 |     2
- b     | bar | 1 |     1
- b     |     | 1 |     1
-       |     | 1 |     3
-       | bar | 1 |     2
-       | foo | 1 |     1
-       | foo | 2 |     1
- a     | bar | 2 |     1
- b     |     | 2 |     1
- a     | foo | 2 |     1
-       | bar | 2 |     2
- a     |     | 2 |     2
-       |     | 2 |     3
- b     | bar | 2 |     1
-(16 rows)
+If you would rather not post publicly, please contact us directly
+using the support form.
 
-SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g);
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | bar | 1 |     1
- a     | bar | 2 |     1
- a     | bar |   |     2
- a     | foo | 1 |     1
- a     | foo | 2 |     1
- a     | foo |   |     2
- a     |     |   |     4
- b     | bar | 1 |     1
- b     | bar | 2 |     1
- b     | bar |   |     2
- b     |     |   |     2
-       |     |   |     6
-       | bar | 1 |     2
-       | bar | 2 |     2
-       | bar |   |     4
-       | foo | 1 |     1
-       | foo | 2 |     1
-       | foo |   |     2
- a     |     | 1 |     2
- b     |     | 1 |     1
-       |     | 1 |     3
- a     |     | 2 |     2
- b     |     | 2 |     1
-       |     | 2 |     3
-(24 rows)
+We appreciate your feedback.
 
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab);
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab)
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa;
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g;
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g);
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g)
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
 SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa;
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | foo |   |     2
- a     |     |   |     4
- a     |     | 2 |     2
- a     | bar | 1 |     1
- a     | bar | 2 |     1
- a     | bar |   |     2
- a     | foo | 1 |     1
- a     | foo | 2 |     1
- a     |     | 1 |     2
- b     | bar | 1 |     1
- b     |     |   |     2
- b     |     | 1 |     1
- b     | bar | 2 |     1
- b     | bar |   |     2
- b     |     | 2 |     1
-       |     | 2 |     3
-       |     |   |     6
-       | bar | 1 |     2
-       | bar | 2 |     2
-       | bar |   |     4
-       | foo | 1 |     1
-       | foo | 2 |     1
-       | foo |   |     2
-       |     | 1 |     3
-(24 rows)
-
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
 SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g;
- dataa |  b  | g | count 
--------+-----+---+-------
- a     | bar | 1 |     1
- a     | foo | 1 |     1
- b     | bar | 1 |     1
-       | bar | 1 |     2
-       | foo | 1 |     1
- a     |     | 1 |     2
- b     |     | 1 |     1
-       |     | 1 |     3
- a     |     | 2 |     2
- b     |     | 2 |     1
-       | bar | 2 |     2
-       |     | 2 |     3
-       | foo | 2 |     1
- a     | bar | 2 |     1
- a     | foo | 2 |     1
- b     | bar | 2 |     1
- a     |     |   |     4
- b     | bar |   |     2
- b     |     |   |     2
-       |     |   |     6
- a     | foo |   |     2
- a     | bar |   |     2
-       | bar |   |     4
-       | foo |   |     2
-(24 rows)
-
+ERROR:  at or near "dataa": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g
+                                                                               ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/46280/_version_
 reset enable_hashagg;
+ERROR:  unimplemented: the configuration setting "enable_hashagg" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- case with degenerate ORDER BY
 explain (verbose, costs off)
 select 'foo' as f, generate_series(1,2) as g from few order by 1;
-                  QUERY PLAN                  
-----------------------------------------------
- ProjectSet
-   Output: 'foo'::text, generate_series(1, 2)
-   ->  Seq Scan on public.few
-         Output: id, dataa, datab
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select 'foo' as f, generate_series(1,2) as g from few order by 1;
   f  | g 
 -----+---
@@ -478,40 +315,29 @@
 
 -- data modification
 CREATE TABLE fewmore AS SELECT generate_series(1,3) AS data;
+NOTICE:  CREATE TABLE ... AS does not copy over indexes, default expressions, or constraints; the new table has a hidden rowid primary key column
 INSERT INTO fewmore VALUES(generate_series(4,5));
+ERROR:  generate_series(): set-returning functions are not allowed in VALUES
 SELECT * FROM fewmore;
  data 
 ------
     1
     2
     3
-    4
-    5
-(5 rows)
+(3 rows)
 
 -- SRFs are not allowed in UPDATE (they once were, but it was nonsense)
 UPDATE fewmore SET data = generate_series(4,9);
-ERROR:  set-returning functions are not allowed in UPDATE
-LINE 1: UPDATE fewmore SET data = generate_series(4,9);
-                                  ^
+ERROR:  generate_series(): set-returning functions are not allowed in UPDATE SET
 -- SRFs are not allowed in RETURNING
 INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3);
-ERROR:  set-returning functions are not allowed in RETURNING
-LINE 1: INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3)...
-                                                ^
+ERROR:  generate_series(): set-returning functions are not allowed in RETURNING
 -- nor standalone VALUES (but surely this is a bug?)
 VALUES(1, generate_series(1,2));
-ERROR:  set-returning functions are not allowed in VALUES
-LINE 1: VALUES(1, generate_series(1,2));
-                  ^
+ERROR:  generate_series(): set-returning functions are not allowed in VALUES
 -- We allow tSRFs that are not at top level
 SELECT int4mul(generate_series(1,2), 10);
- int4mul 
----------
-      10
-      20
-(2 rows)
-
+ERROR:  unknown function: int4mul()
 SELECT generate_series(1,3) IS DISTINCT FROM 2;
  ?column? 
 ----------
@@ -522,9 +348,7 @@
 
 -- but SRFs in function RTEs must be at top level (annoying restriction)
 SELECT * FROM int4mul(generate_series(1,2), 10);
-ERROR:  set-returning functions must appear at top level of FROM
-LINE 1: SELECT * FROM int4mul(generate_series(1,2), 10);
-                              ^
+ERROR:  unknown function: int4mul()
 -- DISTINCT ON is evaluated before tSRF evaluation if SRF is not
 -- referenced either in ORDER BY or in the DISTINCT ON list. The ORDER
 -- BY reference can be implicitly generated, if there's no other ORDER BY.
@@ -533,8 +357,8 @@
 FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b);
  a | b | g 
 ---+---+---
- 1 | 1 | 1
  3 | 2 | 1
+ 1 | 1 | 1
  5 | 3 | 1
 (3 rows)
 
@@ -544,16 +368,10 @@
 ORDER BY a, b DESC;
  a | b | g 
 ---+---+---
- 1 | 4 | 1
- 1 | 4 | 2
  1 | 4 | 3
  3 | 2 | 1
- 3 | 2 | 2
- 3 | 2 | 3
  5 | 3 | 1
- 5 | 3 | 2
- 5 | 3 | 3
-(9 rows)
+(3 rows)
 
 -- referenced in ORDER BY
 SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
@@ -598,8 +416,8 @@
  a | b | g 
 ---+---+---
  3 | 2 | 1
- 5 | 1 | 2
- 3 | 1 | 3
+ 3 | 2 | 2
+ 3 | 2 | 3
 (3 rows)
 
 -- LIMIT / OFFSET is evaluated after SRF evaluation
@@ -612,9 +430,7 @@
 
 -- SRFs are not allowed in LIMIT.
 SELECT 1 LIMIT generate_series(1,3);
-ERROR:  set-returning functions are not allowed in LIMIT
-LINE 1: SELECT 1 LIMIT generate_series(1,3);
-                       ^
+ERROR:  generate_series(): set-returning functions are not allowed in LIMIT
 -- tSRF in correlated subquery, referencing table outside
 SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few;
  generate_series 
@@ -636,26 +452,25 @@
 
 -- Operators can return sets too
 CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY);
+ERROR:  at or near "|": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY)
+                ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+See: https://go.crdb.dev/issue-v/65017/_version_
 SELECT |@|ARRAY[1,2,3];
- ?column? 
-----------
-        1
-        2
-        3
-(3 rows)
-
+ERROR:  at or near "|": syntax error
+DETAIL:  source SQL:
+SELECT |@|ARRAY[1,2,3]
+       ^
 -- Some fun cases involving duplicate SRF calls
 explain (verbose, costs off)
 select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
-                            QUERY PLAN                            
-------------------------------------------------------------------
- Result
-   Output: (generate_series(1, 3)), ((generate_series(1, 3)) + 1)
-   ->  ProjectSet
-         Output: generate_series(1, 3)
-         ->  Result
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
  x | xp1 
 ---+-----
@@ -666,38 +481,21 @@
 
 explain (verbose, costs off)
 select generate_series(1,3)+1 order by generate_series(1,3);
-                               QUERY PLAN                               
-------------------------------------------------------------------------
- Sort
-   Output: (((generate_series(1, 3)) + 1)), (generate_series(1, 3))
-   Sort Key: (generate_series(1, 3))
-   ->  Result
-         Output: ((generate_series(1, 3)) + 1), (generate_series(1, 3))
-         ->  ProjectSet
-               Output: generate_series(1, 3)
-               ->  Result
-(8 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select generate_series(1,3)+1 order by generate_series(1,3);
- ?column? 
-----------
-        2
-        3
-        4
-(3 rows)
-
+ERROR:  generate_series(): set-returning functions are not allowed in ORDER BY
 -- Check that SRFs of same nesting level run in lockstep
 explain (verbose, costs off)
 select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
-                            QUERY PLAN                            
-------------------------------------------------------------------
- Result
-   Output: (generate_series(1, 3)), ((generate_series(3, 6)) + 1)
-   ->  ProjectSet
-         Output: generate_series(1, 3), generate_series(3, 6)
-         ->  Result
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (verbose, costs off)
+                        ^
+HINT:  try \h <SELECTCLAUSE>
 select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
  x | y 
 ---+---
