diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/btree_index.out --label=/mnt/data1/postgres/src/test/regress/results/btree_index.out /mnt/data1/postgres/src/test/regress/expected/btree_index.out /mnt/data1/postgres/src/test/regress/results/btree_index.out
--- /mnt/data1/postgres/src/test/regress/expected/btree_index.out
+++ /mnt/data1/postgres/src/test/regress/results/btree_index.out
@@ -3,6 +3,7 @@
 --
 -- directory paths are passed to us in environment variables
 \getenv abs_srcdir PG_ABS_SRCDIR
+invalid command \getenv
 CREATE TABLE bt_i4_heap (
 	seqno 		int4,
 	random 		int4
@@ -21,12 +22,72 @@
 );
 \set filename :abs_srcdir '/data/desc.data'
 COPY bt_i4_heap FROM :'filename';
+ERROR:  at or near ":abs_srcdir/data/desc.data": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COPY bt_i4_heap FROM ':abs_srcdir/data/desc.data'
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 \set filename :abs_srcdir '/data/hash.data'
 COPY bt_name_heap FROM :'filename';
+ERROR:  at or near ":abs_srcdir/data/hash.data": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COPY bt_name_heap FROM ':abs_srcdir/data/hash.data'
+                       ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 \set filename :abs_srcdir '/data/desc.data'
 COPY bt_txt_heap FROM :'filename';
+ERROR:  at or near ":abs_srcdir/data/desc.data": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COPY bt_txt_heap FROM ':abs_srcdir/data/desc.data'
+                      ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 \set filename :abs_srcdir '/data/hash.data'
 COPY bt_f8_heap FROM :'filename';
+ERROR:  at or near ":abs_srcdir/data/hash.data": syntax error: unimplemented: this syntax
+DETAIL:  source SQL:
+COPY bt_f8_heap FROM ':abs_srcdir/data/hash.data'
+                     ^
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 ANALYZE bt_i4_heap;
 ANALYZE bt_name_heap;
 ANALYZE bt_txt_heap;
@@ -40,143 +101,151 @@
 -- "lost".
 --
 CREATE INDEX bt_i4_index ON bt_i4_heap USING btree (seqno int4_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 CREATE INDEX bt_name_index ON bt_name_heap USING btree (seqno name_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 CREATE INDEX bt_txt_index ON bt_txt_heap USING btree (seqno text_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 CREATE INDEX bt_f8_index ON bt_f8_heap USING btree (seqno float8_ops);
+ERROR:  operator classes are only allowed for the last column of an inverted index
 --
 -- test retrieval of min/max keys for each index
 --
 SELECT b.*
    FROM bt_i4_heap b
    WHERE b.seqno < 1;
- seqno |   random   
--------+------------
-     0 | 1935401906
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_i4_heap b
    WHERE b.seqno >= 9999;
- seqno |   random   
--------+------------
-  9999 | 1227676208
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_i4_heap b
    WHERE b.seqno = 4500;
- seqno |   random   
--------+------------
-  4500 | 2080851358
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_name_heap b
    WHERE b.seqno < '1'::name;
- seqno |   random   
--------+------------
- 0     | 1935401906
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_name_heap b
    WHERE b.seqno >= '9999'::name;
- seqno |   random   
--------+------------
- 9999  | 1227676208
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_name_heap b
    WHERE b.seqno = '4500'::name;
- seqno |   random   
--------+------------
- 4500  | 2080851358
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_txt_heap b
    WHERE b.seqno < '1'::text;
- seqno |   random   
--------+------------
- 0     | 1935401906
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_txt_heap b
    WHERE b.seqno >= '9999'::text;
- seqno |   random   
--------+------------
- 9999  | 1227676208
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_txt_heap b
    WHERE b.seqno = '4500'::text;
- seqno |   random   
--------+------------
- 4500  | 2080851358
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_f8_heap b
    WHERE b.seqno < '1'::float8;
- seqno |   random   
--------+------------
-     0 | 1935401906
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_f8_heap b
    WHERE b.seqno >= '9999'::float8;
- seqno |   random   
--------+------------
-  9999 | 1227676208
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 SELECT b.*
    FROM bt_f8_heap b
    WHERE b.seqno = '4500'::float8;
- seqno |   random   
--------+------------
-  4500 | 2080851358
-(1 row)
+ seqno | random 
+-------+--------
+(0 rows)
 
 --
 -- Check correct optimization of LIKE (special index operator support)
 -- for both indexscan and bitmapscan cases
 --
 set enable_seqscan to false;
+WARNING:  setting session var "enable_seqscan" is a no-op
 set enable_indexscan to true;
+ERROR:  unimplemented: the configuration setting "enable_indexscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_bitmapscan to false;
+ERROR:  unimplemented: the configuration setting "enable_bitmapscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 explain (costs off)
 select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
-                                  QUERY PLAN                                  
-------------------------------------------------------------------------------
- Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
-   Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))
-   Filter: (proname ~~ 'RI\_FKey%del'::text)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
-        proname         
-------------------------
- RI_FKey_cascade_del
- RI_FKey_noaction_del
- RI_FKey_restrict_del
- RI_FKey_setdefault_del
- RI_FKey_setnull_del
-(5 rows)
+ proname 
+---------
+(0 rows)
 
 explain (costs off)
 select proname from pg_proc where proname ilike '00%foo' order by 1;
-                             QUERY PLAN                             
---------------------------------------------------------------------
- Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
-   Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))
-   Filter: (proname ~~* '00%foo'::text)
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select proname from pg_proc where proname ilike '00%foo' order by 1;
  proname 
 ---------
@@ -184,48 +253,56 @@
 
 explain (costs off)
 select proname from pg_proc where proname ilike 'ri%foo' order by 1;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
-   Filter: (proname ~~* 'ri%foo'::text)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 set enable_indexscan to false;
+ERROR:  unimplemented: the configuration setting "enable_indexscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 set enable_bitmapscan to true;
+ERROR:  unimplemented: the configuration setting "enable_bitmapscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 explain (costs off)
 select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
-                                        QUERY PLAN                                        
-------------------------------------------------------------------------------------------
- Sort
-   Sort Key: proname
-   ->  Bitmap Heap Scan on pg_proc
-         Filter: (proname ~~ 'RI\_FKey%del'::text)
-         ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index
-               Index Cond: ((proname >= 'RI_FKey'::text) AND (proname < 'RI_FKez'::text))
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select proname from pg_proc where proname like E'RI\\_FKey%del' order by 1;
-        proname         
-------------------------
- RI_FKey_cascade_del
- RI_FKey_noaction_del
- RI_FKey_restrict_del
- RI_FKey_setdefault_del
- RI_FKey_setnull_del
-(5 rows)
+ proname 
+---------
+(0 rows)
 
 explain (costs off)
 select proname from pg_proc where proname ilike '00%foo' order by 1;
-                                   QUERY PLAN                                   
---------------------------------------------------------------------------------
- Sort
-   Sort Key: proname
-   ->  Bitmap Heap Scan on pg_proc
-         Filter: (proname ~~* '00%foo'::text)
-         ->  Bitmap Index Scan on pg_proc_proname_args_nsp_index
-               Index Cond: ((proname >= '00'::text) AND (proname < '01'::text))
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select proname from pg_proc where proname ilike '00%foo' order by 1;
  proname 
 ---------
@@ -233,91 +310,99 @@
 
 explain (costs off)
 select proname from pg_proc where proname ilike 'ri%foo' order by 1;
-                           QUERY PLAN                            
------------------------------------------------------------------
- Index Only Scan using pg_proc_proname_args_nsp_index on pg_proc
-   Filter: (proname ~~* 'ri%foo'::text)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 reset enable_seqscan;
+WARNING:  setting session var "enable_seqscan" is a no-op
 reset enable_indexscan;
+ERROR:  unimplemented: the configuration setting "enable_indexscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 reset enable_bitmapscan;
+ERROR:  unimplemented: the configuration setting "enable_bitmapscan" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- Also check LIKE optimization with binary-compatible cases
 create temp table btree_bpchar (f1 text collate "C");
+ERROR:  at or near ")": syntax error: invalid locale C: language: tag is not well-formed
+DETAIL:  source SQL:
+create temp table btree_bpchar (f1 text collate "C")
+                                                   ^
 create index on btree_bpchar(f1 bpchar_ops) WITH (deduplicate_items=on);
+ERROR:  relation "btree_bpchar" does not exist
 insert into btree_bpchar values ('foo'), ('fool'), ('bar'), ('quux');
+ERROR:  relation "btree_bpchar" does not exist
 -- doesn't match index:
 explain (costs off)
 select * from btree_bpchar where f1 like 'foo';
-          QUERY PLAN           
--------------------------------
- Seq Scan on btree_bpchar
-   Filter: (f1 ~~ 'foo'::text)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from btree_bpchar where f1 like 'foo';
- f1  
------
- foo
-(1 row)
-
+ERROR:  relation "btree_bpchar" does not exist
 explain (costs off)
 select * from btree_bpchar where f1 like 'foo%';
-           QUERY PLAN           
---------------------------------
- Seq Scan on btree_bpchar
-   Filter: (f1 ~~ 'foo%'::text)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from btree_bpchar where f1 like 'foo%';
-  f1  
-------
- foo
- fool
-(2 rows)
-
+ERROR:  relation "btree_bpchar" does not exist
 -- these do match the index:
 explain (costs off)
 select * from btree_bpchar where f1::bpchar like 'foo';
-                     QUERY PLAN                     
-----------------------------------------------------
- Bitmap Heap Scan on btree_bpchar
-   Filter: ((f1)::bpchar ~~ 'foo'::text)
-   ->  Bitmap Index Scan on btree_bpchar_f1_idx
-         Index Cond: ((f1)::bpchar = 'foo'::bpchar)
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from btree_bpchar where f1::bpchar like 'foo';
- f1  
------
- foo
-(1 row)
-
+ERROR:  relation "btree_bpchar" does not exist
 explain (costs off)
 select * from btree_bpchar where f1::bpchar like 'foo%';
-                                        QUERY PLAN                                        
-------------------------------------------------------------------------------------------
- Bitmap Heap Scan on btree_bpchar
-   Filter: ((f1)::bpchar ~~ 'foo%'::text)
-   ->  Bitmap Index Scan on btree_bpchar_f1_idx
-         Index Cond: (((f1)::bpchar >= 'foo'::bpchar) AND ((f1)::bpchar < 'fop'::bpchar))
-(4 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+explain (costs off)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 select * from btree_bpchar where f1::bpchar like 'foo%';
-  f1  
-------
- foo
- fool
-(2 rows)
-
+ERROR:  relation "btree_bpchar" does not exist
 -- get test coverage for "single value" deduplication strategy:
 insert into btree_bpchar select 'foo' from generate_series(1,1500);
+ERROR:  relation "btree_bpchar" does not exist
 --
 -- Perform unique checking, with and without the use of deduplication
 --
 CREATE TABLE dedup_unique_test_table (a int) WITH (autovacuum_enabled=false);
+NOTICE:  storage parameter "autovacuum_enabled = false" is ignored
 CREATE UNIQUE INDEX dedup_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=on);
+ERROR:  invalid storage parameter "deduplicate_items"
 CREATE UNIQUE INDEX plain_unique ON dedup_unique_test_table (a) WITH (deduplicate_items=off);
+ERROR:  invalid storage parameter "deduplicate_items"
 -- Generate enough garbage tuples in index to ensure that even the unique index
 -- with deduplication enabled has to check multiple leaf pages during unique
 -- checking (at least with a BLCKSZ of 8192 or less)
@@ -333,6 +418,7 @@
 -- tuples into a posting list, so we need an explicit test to make sure we get
 -- coverage (note that this test also assumes BLCKSZ is 8192 or less):
 DROP INDEX plain_unique;
+ERROR:  index "plain_unique" does not exist
 DELETE FROM dedup_unique_test_table WHERE a = 1;
 INSERT INTO dedup_unique_test_table SELECT i FROM generate_series(0,450) i;
 --
@@ -349,7 +435,13 @@
 -- with a short tree.
 create table btree_tall_tbl(id int4, t text);
 alter table btree_tall_tbl alter COLUMN t set storage plain;
+ERROR:  at or near "storage": syntax error
+DETAIL:  source SQL:
+alter table btree_tall_tbl alter COLUMN t set storage plain
+                                              ^
+HINT:  try \h ALTER TABLE
 create index btree_tall_idx on btree_tall_tbl (t, id) with (fillfactor = 10);
+NOTICE:  storage parameter "fillfactor" is ignored
 insert into btree_tall_tbl select g, repeat('x', 250)
 from generate_series(1, 130) g;
 --
@@ -358,10 +450,15 @@
 CREATE TABLE delete_test_table (a bigint, b bigint, c bigint, d bigint);
 INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,80000) i;
 ALTER TABLE delete_test_table ADD PRIMARY KEY (a,b,c,d);
+ERROR:  cannot use nullable column "a" in primary key
 -- Delete most entries, and vacuum, deleting internal pages and creating "fast
 -- root"
 DELETE FROM delete_test_table WHERE a < 79990;
 VACUUM delete_test_table;
+ERROR:  at or near "vacuum": syntax error
+DETAIL:  source SQL:
+VACUUM delete_test_table
+^
 --
 -- Test B-tree insertion with a metapage update (XLOG_BTREE_INSERT_META
 -- WAL record type). This happens when a "fast root" page is split.  This
@@ -372,18 +469,37 @@
 INSERT INTO delete_test_table SELECT i, 1, 2, 3 FROM generate_series(1,1000) i;
 -- Test unsupported btree opclass parameters
 create index on btree_tall_tbl (id int4_ops(foo=1));
-ERROR:  operator class int4_ops has no options
+ERROR:  at or near "(": syntax error
+DETAIL:  source SQL:
+create index on btree_tall_tbl (id int4_ops(foo=1))
+                                           ^
+HINT:  try \h CREATE INDEX
 -- Test case of ALTER INDEX with abuse of column names for indexes.
 -- This grammar is not officially supported, but the parser allows it.
 CREATE INDEX btree_tall_idx2 ON btree_tall_tbl (id);
 ALTER INDEX btree_tall_idx2 ALTER COLUMN id SET (n_distinct=100);
-ERROR:  ALTER action ALTER COLUMN ... SET cannot be performed on relation "btree_tall_idx2"
-DETAIL:  This operation is not supported for indexes.
+ERROR:  at or near "alter": syntax error
+DETAIL:  source SQL:
+ALTER INDEX btree_tall_idx2 ALTER COLUMN id SET (n_distinct=100)
+                            ^
+HINT:  try \h ALTER INDEX
 DROP INDEX btree_tall_idx2;
+NOTICE:  the data for dropped indexes is reclaimed asynchronously
+HINT:  The reclamation delay can be customized in the zone configuration for the table.
 -- Partitioned index
 CREATE TABLE btree_part (id int4) PARTITION BY RANGE (id);
+ERROR:  at or near "EOF": syntax error
+DETAIL:  source SQL:
+CREATE TABLE btree_part (id int4) PARTITION BY RANGE (id)
+                                                         ^
+HINT:  try \h CREATE TABLE
 CREATE INDEX btree_part_idx ON btree_part(id);
+ERROR:  relation "btree_part" does not exist
 ALTER INDEX btree_part_idx ALTER COLUMN id SET (n_distinct=100);
-ERROR:  ALTER action ALTER COLUMN ... SET cannot be performed on relation "btree_part_idx"
-DETAIL:  This operation is not supported for partitioned indexes.
+ERROR:  at or near "alter": syntax error
+DETAIL:  source SQL:
+ALTER INDEX btree_part_idx ALTER COLUMN id SET (n_distinct=100)
+                           ^
+HINT:  try \h ALTER INDEX
 DROP TABLE btree_part;
+ERROR:  relation "btree_part" does not exist
