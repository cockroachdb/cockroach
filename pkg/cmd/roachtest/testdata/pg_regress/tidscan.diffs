diff -U3 --label=/mnt/data1/postgres/src/test/regress/expected/tidscan.out --label=/mnt/data1/postgres/src/test/regress/results/tidscan.out /mnt/data1/postgres/src/test/regress/expected/tidscan.out /mnt/data1/postgres/src/test/regress/results/tidscan.out
--- /mnt/data1/postgres/src/test/regress/expected/tidscan.out
+++ /mnt/data1/postgres/src/test/regress/results/tidscan.out
@@ -4,293 +4,222 @@
 INSERT INTO tidscan VALUES (1), (2), (3);
 -- show ctids
 SELECT ctid, * FROM tidscan;
- ctid  | id 
--------+----
- (0,1) |  1
- (0,2) |  2
- (0,3) |  3
-(3 rows)
-
+ERROR:  column "ctid" does not exist
 -- ctid equality - implemented as tidscan
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)';
-            QUERY PLAN             
------------------------------------
- Tid Scan on tidscan
-   TID Cond: (ctid = '(0,1)'::tid)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan WHERE ctid = '(0,1)';
- ctid  | id 
--------+----
- (0,1) |  1
-(1 row)
-
+ERROR:  column "ctid" does not exist
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid;
-            QUERY PLAN             
------------------------------------
- Tid Scan on tidscan
-   TID Cond: ('(0,1)'::tid = ctid)
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan WHERE '(0,1)' = ctid;
- ctid  | id 
--------+----
- (0,1) |  1
-(1 row)
-
+ERROR:  column "ctid" does not exist
 -- OR'd clauses
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan WHERE ctid = '(0,2)' OR '(0,1)' = ctid;
-                          QUERY PLAN                          
---------------------------------------------------------------
- Tid Scan on tidscan
-   TID Cond: ((ctid = '(0,2)'::tid) OR ('(0,1)'::tid = ctid))
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan WHERE ctid = '(0,2)' OR '(0,1)' = ctid;
- ctid  | id 
--------+----
- (0,1) |  1
- (0,2) |  2
-(2 rows)
-
+ERROR:  column "ctid" does not exist
 -- ctid = ScalarArrayOp - implemented as tidscan
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
-                      QUERY PLAN                       
--------------------------------------------------------
- Tid Scan on tidscan
-   TID Cond: (ctid = ANY ('{"(0,1)","(0,2)"}'::tid[]))
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
- ctid  | id 
--------+----
- (0,1) |  1
- (0,2) |  2
-(2 rows)
-
+ERROR:  column "ctid" does not exist
 -- ctid != ScalarArrayOp - can't be implemented as tidscan
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
-                      QUERY PLAN                      
-------------------------------------------------------
- Seq Scan on tidscan
-   Filter: (ctid <> ANY ('{"(0,1)","(0,2)"}'::tid[]))
-(2 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan WHERE ctid != ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
- ctid  | id 
--------+----
- (0,1) |  1
- (0,2) |  2
- (0,3) |  3
-(3 rows)
-
+ERROR:  column "ctid" does not exist
 -- tid equality extracted from sub-AND clauses
 EXPLAIN (COSTS OFF)
 SELECT ctid, * FROM tidscan
 WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1);
-                                                  QUERY PLAN                                                  
---------------------------------------------------------------------------------------------------------------
- Tid Scan on tidscan
-   TID Cond: ((ctid = ANY ('{"(0,2)","(0,3)"}'::tid[])) OR (ctid = '(0,1)'::tid))
-   Filter: (((id = 3) AND (ctid = ANY ('{"(0,2)","(0,3)"}'::tid[]))) OR ((ctid = '(0,1)'::tid) AND (id = 1)))
-(3 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT ctid, * FROM tidscan
 WHERE (id = 3 AND ctid IN ('(0,2)', '(0,3)')) OR (ctid = '(0,1)' AND id = 1);
- ctid  | id 
--------+----
- (0,1) |  1
- (0,3) |  3
-(2 rows)
-
+ERROR:  column "ctid" does not exist
 -- nestloop-with-inner-tidscan joins on tid
 SET enable_hashjoin TO off;  -- otherwise hash join might win
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 EXPLAIN (COSTS OFF)
 SELECT t1.ctid, t1.*, t2.ctid, t2.*
 FROM tidscan t1 JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1;
-             QUERY PLAN             
-------------------------------------
- Nested Loop
-   ->  Seq Scan on tidscan t1
-         Filter: (id = 1)
-   ->  Tid Scan on tidscan t2
-         TID Cond: (t1.ctid = ctid)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT t1.ctid, t1.*, t2.ctid, t2.*
 FROM tidscan t1 JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1;
- ctid  | id | ctid  | id 
--------+----+-------+----
- (0,1) |  1 | (0,1) |  1
-(1 row)
-
+ERROR:  column "t1.ctid" does not exist
 EXPLAIN (COSTS OFF)
 SELECT t1.ctid, t1.*, t2.ctid, t2.*
 FROM tidscan t1 LEFT JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1;
-             QUERY PLAN             
-------------------------------------
- Nested Loop Left Join
-   ->  Seq Scan on tidscan t1
-         Filter: (id = 1)
-   ->  Tid Scan on tidscan t2
-         TID Cond: (t1.ctid = ctid)
-(5 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT t1.ctid, t1.*, t2.ctid, t2.*
 FROM tidscan t1 LEFT JOIN tidscan t2 ON t1.ctid = t2.ctid WHERE t1.id = 1;
- ctid  | id | ctid  | id 
--------+----+-------+----
- (0,1) |  1 | (0,1) |  1
-(1 row)
-
+ERROR:  column "t1.ctid" does not exist
 RESET enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- exercise backward scan and rewind
 BEGIN;
 DECLARE c CURSOR FOR
 SELECT ctid, * FROM tidscan WHERE ctid = ANY(ARRAY['(0,1)', '(0,2)']::tid[]);
+ERROR:  column "ctid" does not exist
 FETCH ALL FROM c;
- ctid  | id 
--------+----
- (0,1) |  1
- (0,2) |  2
-(2 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 FETCH BACKWARD 1 FROM c;
- ctid  | id 
--------+----
- (0,2) |  2
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 FETCH FIRST FROM c;
- ctid  | id 
--------+----
- (0,1) |  1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 ROLLBACK;
 -- tidscan via CURRENT OF
 BEGIN;
 DECLARE c CURSOR FOR SELECT ctid, * FROM tidscan;
+ERROR:  column "ctid" does not exist
 FETCH NEXT FROM c; -- skip one row
- ctid  | id 
--------+----
- (0,1) |  1
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 FETCH NEXT FROM c;
- ctid  | id 
--------+----
- (0,2) |  2
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 -- perform update
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
-                    QUERY PLAN                     
----------------------------------------------------
- Update on tidscan (actual rows=1 loops=1)
-   ->  Tid Scan on tidscan (actual rows=1 loops=1)
-         TID Cond: CURRENT OF c
-(3 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 FETCH NEXT FROM c;
- ctid  | id 
--------+----
- (0,3) |  3
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 -- perform update
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
-                    QUERY PLAN                     
----------------------------------------------------
- Update on tidscan (actual rows=1 loops=1)
-   ->  Tid Scan on tidscan (actual rows=1 loops=1)
-         TID Cond: CURRENT OF c
-(3 rows)
-
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT * FROM tidscan;
- id 
-----
-  1
- -2
- -3
-(3 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 -- position cursor past any rows
 FETCH NEXT FROM c;
- ctid | id 
-------+----
-(0 rows)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 -- should error out
 EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
 UPDATE tidscan SET id = -id WHERE CURRENT OF c RETURNING *;
-ERROR:  cursor "c" is not positioned on a row
+ERROR:  at or near "analyze": syntax error
+DETAIL:  source SQL:
+EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
+         ^
+HINT:  try \h <SELECTCLAUSE>
 ROLLBACK;
 -- bulk joins on CTID
 -- (these plans don't use TID scans, but this still seems like an
 -- appropriate place for these tests)
 EXPLAIN (COSTS OFF)
 SELECT count(*) FROM tenk1 t1 JOIN tenk1 t2 ON t1.ctid = t2.ctid;
-               QUERY PLAN               
-----------------------------------------
- Aggregate
-   ->  Hash Join
-         Hash Cond: (t1.ctid = t2.ctid)
-         ->  Seq Scan on tenk1 t1
-         ->  Hash
-               ->  Seq Scan on tenk1 t2
-(6 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT count(*) FROM tenk1 t1 JOIN tenk1 t2 ON t1.ctid = t2.ctid;
- count 
--------
- 10000
-(1 row)
-
+ERROR:  column "t1.ctid" does not exist
 SET enable_hashjoin TO off;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 EXPLAIN (COSTS OFF)
 SELECT count(*) FROM tenk1 t1 JOIN tenk1 t2 ON t1.ctid = t2.ctid;
-               QUERY PLAN                
------------------------------------------
- Aggregate
-   ->  Merge Join
-         Merge Cond: (t1.ctid = t2.ctid)
-         ->  Sort
-               Sort Key: t1.ctid
-               ->  Seq Scan on tenk1 t1
-         ->  Sort
-               Sort Key: t2.ctid
-               ->  Seq Scan on tenk1 t2
-(9 rows)
-
+ERROR:  at or near "off": syntax error
+DETAIL:  source SQL:
+EXPLAIN (COSTS OFF)
+               ^
+HINT:  try \h <SELECTCLAUSE>
 SELECT count(*) FROM tenk1 t1 JOIN tenk1 t2 ON t1.ctid = t2.ctid;
- count 
--------
- 10000
-(1 row)
-
+ERROR:  column "t1.ctid" does not exist
 RESET enable_hashjoin;
+ERROR:  unimplemented: the configuration setting "enable_hashjoin" is not supported
+HINT:  You have attempted to use a feature that is not yet implemented.
+
+Please check the public issue tracker to check whether this problem is
+already tracked. If you cannot find it there, please report the error
+with details by creating a new issue.
+
+If you would rather not post publicly, please contact us directly
+using the support form.
+
+We appreciate your feedback.
+
 -- check predicate lock on CTID
 BEGIN ISOLATION LEVEL SERIALIZABLE;
 SELECT * FROM tidscan WHERE ctid = '(0,1)';
- id 
-----
-  1
-(1 row)
-
+ERROR:  column "ctid" does not exist
 -- locktype should be 'tuple'
 SELECT locktype, mode FROM pg_locks WHERE pid = pg_backend_pid() AND mode = 'SIReadLock';
- locktype |    mode    
-----------+------------
- tuple    | SIReadLock
-(1 row)
-
+ERROR:  current transaction is aborted, commands ignored until end of transaction block
 ROLLBACK;
 DROP TABLE tidscan;
