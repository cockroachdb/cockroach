// Code generated by MockGen. DO NOT EDIT.
// Source: drt.go

// Package tests is a generated GoMock package.
package tests

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
)

// MockpromClient is a mock of promClient interface.
type MockpromClient struct {
	ctrl     *gomock.Controller
	recorder *MockpromClientMockRecorder
}

// MockpromClientMockRecorder is the mock recorder for MockpromClient.
type MockpromClientMockRecorder struct {
	mock *MockpromClient
}

// NewMockpromClient creates a new mock instance.
func NewMockpromClient(ctrl *gomock.Controller) *MockpromClient {
	mock := &MockpromClient{ctrl: ctrl}
	mock.recorder = &MockpromClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpromClient) EXPECT() *MockpromClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockpromClient) Query(ctx context.Context, query string, ts time.Time) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query, ts)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockpromClientMockRecorder) Query(ctx, query, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockpromClient)(nil).Query), ctx, query, ts)
}
