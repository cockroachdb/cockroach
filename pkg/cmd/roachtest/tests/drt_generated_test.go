// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/cmd/roachtest/tests (interfaces: PromClient)

// Package tests is a generated GoMock package.
package tests

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
)

// MockPromClient is a mock of PromClient interface.
type MockPromClient struct {
	ctrl     *gomock.Controller
	recorder *MockPromClientMockRecorder
}

// MockPromClientMockRecorder is the mock recorder for MockPromClient.
type MockPromClientMockRecorder struct {
	mock *MockPromClient
}

// NewMockPromClient creates a new mock instance.
func NewMockPromClient(ctrl *gomock.Controller) *MockPromClient {
	mock := &MockPromClient{ctrl: ctrl}
	mock.recorder = &MockPromClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromClient) EXPECT() *MockPromClientMockRecorder {
	return m.recorder
}

// Query mocks base method.
func (m *MockPromClient) Query(arg0 context.Context, arg1 string, arg2 time.Time) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query.
func (mr *MockPromClientMockRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPromClient)(nil).Query), arg0, arg1, arg2)
}
