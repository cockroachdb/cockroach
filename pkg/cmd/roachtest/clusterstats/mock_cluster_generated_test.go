// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/cmd/roachtest/cluster (interfaces: Cluster)

// Package clusterstats is a generated GoMock package.
package clusterstats

import (
	context "context"
	sql "database/sql"
	fs "io/fs"
	reflect "reflect"

	grafana "github.com/cockroachdb/cockroach/pkg/cmd/roachprod/grafana"
	cluster "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/cluster"
	option "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/option"
	spec "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/spec"
	roachprod "github.com/cockroachdb/cockroach/pkg/roachprod"
	install "github.com/cockroachdb/cockroach/pkg/roachprod/install"
	logger "github.com/cockroachdb/cockroach/pkg/roachprod/logger"
	prometheus "github.com/cockroachdb/cockroach/pkg/roachprod/prometheus"
	vm "github.com/cockroachdb/cockroach/pkg/roachprod/vm"
	gomock "github.com/golang/mock/gomock"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// AddGrafanaAnnotation mocks base method.
func (m *MockCluster) AddGrafanaAnnotation(arg0 context.Context, arg1 *logger.Logger, arg2 grafana.AddAnnotationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGrafanaAnnotation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGrafanaAnnotation indicates an expected call of AddGrafanaAnnotation.
func (mr *MockClusterMockRecorder) AddGrafanaAnnotation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGrafanaAnnotation", reflect.TypeOf((*MockCluster)(nil).AddGrafanaAnnotation), arg0, arg1, arg2)
}

// AddInternalGrafanaAnnotation mocks base method.
func (m *MockCluster) AddInternalGrafanaAnnotation(arg0 context.Context, arg1 *logger.Logger, arg2 grafana.AddAnnotationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInternalGrafanaAnnotation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInternalGrafanaAnnotation indicates an expected call of AddInternalGrafanaAnnotation.
func (mr *MockClusterMockRecorder) AddInternalGrafanaAnnotation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInternalGrafanaAnnotation", reflect.TypeOf((*MockCluster)(nil).AddInternalGrafanaAnnotation), arg0, arg1, arg2)
}

// AdminUIPorts mocks base method.
func (m *MockCluster) AdminUIPorts(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 string, arg4 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUIPorts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUIPorts indicates an expected call of AdminUIPorts.
func (mr *MockClusterMockRecorder) AdminUIPorts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUIPorts", reflect.TypeOf((*MockCluster)(nil).AdminUIPorts), arg0, arg1, arg2, arg3, arg4)
}

// All mocks base method.
func (m *MockCluster) All() option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockClusterMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockCluster)(nil).All))
}

// ApplySnapshots mocks base method.
func (m *MockCluster) ApplySnapshots(arg0 context.Context, arg1 []vm.VolumeSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshots", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshots indicates an expected call of ApplySnapshots.
func (mr *MockClusterMockRecorder) ApplySnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshots", reflect.TypeOf((*MockCluster)(nil).ApplySnapshots), arg0, arg1)
}

// Architecture mocks base method.
func (m *MockCluster) Architecture() vm.CPUArch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Architecture")
	ret0, _ := ret[0].(vm.CPUArch)
	return ret0
}

// Architecture indicates an expected call of Architecture.
func (mr *MockClusterMockRecorder) Architecture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Architecture", reflect.TypeOf((*MockCluster)(nil).Architecture))
}

// CRDBNodes mocks base method.
func (m *MockCluster) CRDBNodes() option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CRDBNodes")
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// CRDBNodes indicates an expected call of CRDBNodes.
func (mr *MockClusterMockRecorder) CRDBNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CRDBNodes", reflect.TypeOf((*MockCluster)(nil).CRDBNodes))
}

// CaptureSideEyeSnapshot mocks base method.
func (m *MockCluster) CaptureSideEyeSnapshot(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureSideEyeSnapshot", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CaptureSideEyeSnapshot indicates an expected call of CaptureSideEyeSnapshot.
func (mr *MockClusterMockRecorder) CaptureSideEyeSnapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureSideEyeSnapshot", reflect.TypeOf((*MockCluster)(nil).CaptureSideEyeSnapshot), arg0)
}

// Cloud mocks base method.
func (m *MockCluster) Cloud() spec.Cloud {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(spec.Cloud)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockClusterMockRecorder) Cloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockCluster)(nil).Cloud))
}

// Conn mocks base method.
func (m *MockCluster) Conn(arg0 context.Context, arg1 *logger.Logger, arg2 int, arg3 ...option.OptionFunc) *sql.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Conn", varargs...)
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockClusterMockRecorder) Conn(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockCluster)(nil).Conn), varargs...)
}

// ConnE mocks base method.
func (m *MockCluster) ConnE(arg0 context.Context, arg1 *logger.Logger, arg2 int, arg3 ...option.OptionFunc) (*sql.DB, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnE", varargs...)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnE indicates an expected call of ConnE.
func (mr *MockClusterMockRecorder) ConnE(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnE", reflect.TypeOf((*MockCluster)(nil).ConnE), varargs...)
}

// CreateSnapshot mocks base method.
func (m *MockCluster) CreateSnapshot(arg0 context.Context, arg1 string) ([]vm.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", arg0, arg1)
	ret0, _ := ret[0].([]vm.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockClusterMockRecorder) CreateSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockCluster)(nil).CreateSnapshot), arg0, arg1)
}

// DeleteSnapshots mocks base method.
func (m *MockCluster) DeleteSnapshots(arg0 context.Context, arg1 ...vm.VolumeSnapshot) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSnapshots", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshots indicates an expected call of DeleteSnapshots.
func (mr *MockClusterMockRecorder) DeleteSnapshots(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshots", reflect.TypeOf((*MockCluster)(nil).DeleteSnapshots), varargs...)
}

// DestroyDNS mocks base method.
func (m *MockCluster) DestroyDNS(arg0 context.Context, arg1 *logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDNS", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDNS indicates an expected call of DestroyDNS.
func (mr *MockClusterMockRecorder) DestroyDNS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDNS", reflect.TypeOf((*MockCluster)(nil).DestroyDNS), arg0, arg1)
}

// ExternalAddr mocks base method.
func (m *MockCluster) ExternalAddr(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalAddr", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalAddr indicates an expected call of ExternalAddr.
func (mr *MockClusterMockRecorder) ExternalAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalAddr", reflect.TypeOf((*MockCluster)(nil).ExternalAddr), arg0, arg1, arg2)
}

// ExternalAdminUIAddr mocks base method.
func (m *MockCluster) ExternalAdminUIAddr(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 ...option.OptionFunc) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExternalAdminUIAddr", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalAdminUIAddr indicates an expected call of ExternalAdminUIAddr.
func (mr *MockClusterMockRecorder) ExternalAdminUIAddr(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalAdminUIAddr", reflect.TypeOf((*MockCluster)(nil).ExternalAdminUIAddr), varargs...)
}

// ExternalIP mocks base method.
func (m *MockCluster) ExternalIP(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalIP", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalIP indicates an expected call of ExternalIP.
func (mr *MockClusterMockRecorder) ExternalIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalIP", reflect.TypeOf((*MockCluster)(nil).ExternalIP), arg0, arg1, arg2)
}

// ExternalPGUrl mocks base method.
func (m *MockCluster) ExternalPGUrl(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 roachprod.PGURLOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalPGUrl", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalPGUrl indicates an expected call of ExternalPGUrl.
func (mr *MockClusterMockRecorder) ExternalPGUrl(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalPGUrl", reflect.TypeOf((*MockCluster)(nil).ExternalPGUrl), arg0, arg1, arg2, arg3)
}

// FetchDebugZip mocks base method.
func (m *MockCluster) FetchDebugZip(arg0 context.Context, arg1 *logger.Logger, arg2 string, arg3 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchDebugZip", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchDebugZip indicates an expected call of FetchDebugZip.
func (mr *MockClusterMockRecorder) FetchDebugZip(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDebugZip", reflect.TypeOf((*MockCluster)(nil).FetchDebugZip), varargs...)
}

// FetchTimeseriesData mocks base method.
func (m *MockCluster) FetchTimeseriesData(arg0 context.Context, arg1 *logger.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTimeseriesData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchTimeseriesData indicates an expected call of FetchTimeseriesData.
func (mr *MockClusterMockRecorder) FetchTimeseriesData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTimeseriesData", reflect.TypeOf((*MockCluster)(nil).FetchTimeseriesData), arg0, arg1)
}

// Get mocks base method.
func (m *MockCluster) Get(arg0 context.Context, arg1 *logger.Logger, arg2, arg3 string, arg4 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClusterMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCluster)(nil).Get), varargs...)
}

// GetPreemptedVMs mocks base method.
func (m *MockCluster) GetPreemptedVMs(arg0 context.Context, arg1 *logger.Logger) ([]vm.PreemptedVM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreemptedVMs", arg0, arg1)
	ret0, _ := ret[0].([]vm.PreemptedVM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreemptedVMs indicates an expected call of GetPreemptedVMs.
func (mr *MockClusterMockRecorder) GetPreemptedVMs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreemptedVMs", reflect.TypeOf((*MockCluster)(nil).GetPreemptedVMs), arg0, arg1)
}

// GitClone mocks base method.
func (m *MockCluster) GitClone(arg0 context.Context, arg1 *logger.Logger, arg2, arg3, arg4 string, arg5 option.NodeListOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitClone", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitClone indicates an expected call of GitClone.
func (mr *MockClusterMockRecorder) GitClone(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitClone", reflect.TypeOf((*MockCluster)(nil).GitClone), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Install mocks base method.
func (m *MockCluster) Install(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Install", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockClusterMockRecorder) Install(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockCluster)(nil).Install), varargs...)
}

// InternalAddr mocks base method.
func (m *MockCluster) InternalAddr(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalAddr", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalAddr indicates an expected call of InternalAddr.
func (mr *MockClusterMockRecorder) InternalAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalAddr", reflect.TypeOf((*MockCluster)(nil).InternalAddr), arg0, arg1, arg2)
}

// InternalAdminUIAddr mocks base method.
func (m *MockCluster) InternalAdminUIAddr(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 ...option.OptionFunc) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InternalAdminUIAddr", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalAdminUIAddr indicates an expected call of InternalAdminUIAddr.
func (mr *MockClusterMockRecorder) InternalAdminUIAddr(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalAdminUIAddr", reflect.TypeOf((*MockCluster)(nil).InternalAdminUIAddr), varargs...)
}

// InternalIP mocks base method.
func (m *MockCluster) InternalIP(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalIP", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalIP indicates an expected call of InternalIP.
func (mr *MockClusterMockRecorder) InternalIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalIP", reflect.TypeOf((*MockCluster)(nil).InternalIP), arg0, arg1, arg2)
}

// InternalPGUrl mocks base method.
func (m *MockCluster) InternalPGUrl(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 roachprod.PGURLOptions) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalPGUrl", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InternalPGUrl indicates an expected call of InternalPGUrl.
func (mr *MockClusterMockRecorder) InternalPGUrl(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalPGUrl", reflect.TypeOf((*MockCluster)(nil).InternalPGUrl), arg0, arg1, arg2, arg3)
}

// IsLocal mocks base method.
func (m *MockCluster) IsLocal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLocal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLocal indicates an expected call of IsLocal.
func (mr *MockClusterMockRecorder) IsLocal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLocal", reflect.TypeOf((*MockCluster)(nil).IsLocal))
}

// IsSecure mocks base method.
func (m *MockCluster) IsSecure() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSecure")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSecure indicates an expected call of IsSecure.
func (mr *MockClusterMockRecorder) IsSecure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSecure", reflect.TypeOf((*MockCluster)(nil).IsSecure))
}

// ListSnapshots mocks base method.
func (m *MockCluster) ListSnapshots(arg0 context.Context, arg1 vm.VolumeSnapshotListOpts) ([]vm.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0, arg1)
	ret0, _ := ret[0].([]vm.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockClusterMockRecorder) ListSnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockCluster)(nil).ListSnapshots), arg0, arg1)
}

// MakeNodes mocks base method.
func (m *MockCluster) MakeNodes(arg0 ...option.Option) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeNodes", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// MakeNodes indicates an expected call of MakeNodes.
func (mr *MockClusterMockRecorder) MakeNodes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeNodes", reflect.TypeOf((*MockCluster)(nil).MakeNodes), arg0...)
}

// Name mocks base method.
func (m *MockCluster) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockClusterMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCluster)(nil).Name))
}

// NewMonitor mocks base method.
func (m *MockCluster) NewMonitor(arg0 context.Context, arg1 ...option.Option) cluster.Monitor {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewMonitor", varargs...)
	ret0, _ := ret[0].(cluster.Monitor)
	return ret0
}

// NewMonitor indicates an expected call of NewMonitor.
func (mr *MockClusterMockRecorder) NewMonitor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMonitor", reflect.TypeOf((*MockCluster)(nil).NewMonitor), varargs...)
}

// Node mocks base method.
func (m *MockCluster) Node(arg0 int) option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node", arg0)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockClusterMockRecorder) Node(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockCluster)(nil).Node), arg0)
}

// Nodes mocks base method.
func (m *MockCluster) Nodes(arg0 ...int) option.NodeListOption {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Nodes", varargs...)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockClusterMockRecorder) Nodes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockCluster)(nil).Nodes), arg0...)
}

// Put mocks base method.
func (m *MockCluster) Put(arg0 context.Context, arg1, arg2 string, arg3 ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Put", varargs...)
}

// Put indicates an expected call of Put.
func (mr *MockClusterMockRecorder) Put(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCluster)(nil).Put), varargs...)
}

// PutE mocks base method.
func (m *MockCluster) PutE(arg0 context.Context, arg1 *logger.Logger, arg2, arg3 string, arg4 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutE indicates an expected call of PutE.
func (mr *MockClusterMockRecorder) PutE(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutE", reflect.TypeOf((*MockCluster)(nil).PutE), varargs...)
}

// PutLibraries mocks base method.
func (m *MockCluster) PutLibraries(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLibraries", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLibraries indicates an expected call of PutLibraries.
func (mr *MockClusterMockRecorder) PutLibraries(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLibraries", reflect.TypeOf((*MockCluster)(nil).PutLibraries), arg0, arg1, arg2)
}

// PutString mocks base method.
func (m *MockCluster) PutString(arg0 context.Context, arg1, arg2 string, arg3 fs.FileMode, arg4 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutString", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutString indicates an expected call of PutString.
func (mr *MockClusterMockRecorder) PutString(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutString", reflect.TypeOf((*MockCluster)(nil).PutString), varargs...)
}

// Range mocks base method.
func (m *MockCluster) Range(arg0, arg1 int) option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range", arg0, arg1)
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockClusterMockRecorder) Range(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockCluster)(nil).Range), arg0, arg1)
}

// RefetchCertsFromNode mocks base method.
func (m *MockCluster) RefetchCertsFromNode(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefetchCertsFromNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefetchCertsFromNode indicates an expected call of RefetchCertsFromNode.
func (mr *MockClusterMockRecorder) RefetchCertsFromNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefetchCertsFromNode", reflect.TypeOf((*MockCluster)(nil).RefetchCertsFromNode), arg0, arg1)
}

// Reformat mocks base method.
func (m *MockCluster) Reformat(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reformat", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reformat indicates an expected call of Reformat.
func (mr *MockClusterMockRecorder) Reformat(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reformat", reflect.TypeOf((*MockCluster)(nil).Reformat), arg0, arg1, arg2, arg3)
}

// Run mocks base method.
func (m *MockCluster) Run(arg0 context.Context, arg1 install.RunOptions, arg2 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Run", varargs...)
}

// Run indicates an expected call of Run.
func (mr *MockClusterMockRecorder) Run(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCluster)(nil).Run), varargs...)
}

// RunE mocks base method.
func (m *MockCluster) RunE(arg0 context.Context, arg1 install.RunOptions, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockClusterMockRecorder) RunE(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*MockCluster)(nil).RunE), varargs...)
}

// RunWithDetails mocks base method.
func (m *MockCluster) RunWithDetails(arg0 context.Context, arg1 *logger.Logger, arg2 install.RunOptions, arg3 ...string) ([]install.RunResultDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithDetails", varargs...)
	ret0, _ := ret[0].([]install.RunResultDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithDetails indicates an expected call of RunWithDetails.
func (mr *MockClusterMockRecorder) RunWithDetails(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithDetails", reflect.TypeOf((*MockCluster)(nil).RunWithDetails), varargs...)
}

// RunWithDetailsSingleNode mocks base method.
func (m *MockCluster) RunWithDetailsSingleNode(arg0 context.Context, arg1 *logger.Logger, arg2 install.RunOptions, arg3 ...string) (install.RunResultDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunWithDetailsSingleNode", varargs...)
	ret0, _ := ret[0].(install.RunResultDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunWithDetailsSingleNode indicates an expected call of RunWithDetailsSingleNode.
func (mr *MockClusterMockRecorder) RunWithDetailsSingleNode(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithDetailsSingleNode", reflect.TypeOf((*MockCluster)(nil).RunWithDetailsSingleNode), varargs...)
}

// SQLPorts mocks base method.
func (m *MockCluster) SQLPorts(arg0 context.Context, arg1 *logger.Logger, arg2 option.NodeListOption, arg3 string, arg4 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLPorts", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SQLPorts indicates an expected call of SQLPorts.
func (mr *MockClusterMockRecorder) SQLPorts(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLPorts", reflect.TypeOf((*MockCluster)(nil).SQLPorts), arg0, arg1, arg2, arg3, arg4)
}

// SetDefaultVirtualCluster mocks base method.
func (m *MockCluster) SetDefaultVirtualCluster(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultVirtualCluster", arg0)
}

// SetDefaultVirtualCluster indicates an expected call of SetDefaultVirtualCluster.
func (mr *MockClusterMockRecorder) SetDefaultVirtualCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultVirtualCluster", reflect.TypeOf((*MockCluster)(nil).SetDefaultVirtualCluster), arg0)
}

// SetRandomSeed mocks base method.
func (m *MockCluster) SetRandomSeed(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRandomSeed", arg0)
}

// SetRandomSeed indicates an expected call of SetRandomSeed.
func (mr *MockClusterMockRecorder) SetRandomSeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRandomSeed", reflect.TypeOf((*MockCluster)(nil).SetRandomSeed), arg0)
}

// Signal mocks base method.
func (m *MockCluster) Signal(arg0 context.Context, arg1 *logger.Logger, arg2 int, arg3 ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Signal", varargs...)
}

// Signal indicates an expected call of Signal.
func (mr *MockClusterMockRecorder) Signal(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockCluster)(nil).Signal), varargs...)
}

// SignalE mocks base method.
func (m *MockCluster) SignalE(arg0 context.Context, arg1 *logger.Logger, arg2 int, arg3 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignalE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalE indicates an expected call of SignalE.
func (mr *MockClusterMockRecorder) SignalE(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalE", reflect.TypeOf((*MockCluster)(nil).SignalE), varargs...)
}

// Spec mocks base method.
func (m *MockCluster) Spec() spec.ClusterSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec")
	ret0, _ := ret[0].(spec.ClusterSpec)
	return ret0
}

// Spec indicates an expected call of Spec.
func (mr *MockClusterMockRecorder) Spec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockCluster)(nil).Spec))
}

// Stage mocks base method.
func (m *MockCluster) Stage(arg0 context.Context, arg1 *logger.Logger, arg2, arg3, arg4 string, arg5 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stage indicates an expected call of Stage.
func (mr *MockClusterMockRecorder) Stage(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stage", reflect.TypeOf((*MockCluster)(nil).Stage), varargs...)
}

// Start mocks base method.
func (m *MockCluster) Start(arg0 context.Context, arg1 *logger.Logger, arg2 option.StartOpts, arg3 install.ClusterSettings, arg4 ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Start", varargs...)
}

// Start indicates an expected call of Start.
func (mr *MockClusterMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCluster)(nil).Start), varargs...)
}

// StartE mocks base method.
func (m *MockCluster) StartE(arg0 context.Context, arg1 *logger.Logger, arg2 option.StartOpts, arg3 install.ClusterSettings, arg4 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartE indicates an expected call of StartE.
func (mr *MockClusterMockRecorder) StartE(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartE", reflect.TypeOf((*MockCluster)(nil).StartE), varargs...)
}

// StartGrafana mocks base method.
func (m *MockCluster) StartGrafana(arg0 context.Context, arg1 *logger.Logger, arg2 *prometheus.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartGrafana", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartGrafana indicates an expected call of StartGrafana.
func (mr *MockClusterMockRecorder) StartGrafana(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartGrafana", reflect.TypeOf((*MockCluster)(nil).StartGrafana), arg0, arg1, arg2)
}

// StartServiceForVirtualCluster mocks base method.
func (m *MockCluster) StartServiceForVirtualCluster(arg0 context.Context, arg1 *logger.Logger, arg2 option.StartOpts, arg3 install.ClusterSettings) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartServiceForVirtualCluster", arg0, arg1, arg2, arg3)
}

// StartServiceForVirtualCluster indicates an expected call of StartServiceForVirtualCluster.
func (mr *MockClusterMockRecorder) StartServiceForVirtualCluster(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceForVirtualCluster", reflect.TypeOf((*MockCluster)(nil).StartServiceForVirtualCluster), arg0, arg1, arg2, arg3)
}

// StartServiceForVirtualClusterE mocks base method.
func (m *MockCluster) StartServiceForVirtualClusterE(arg0 context.Context, arg1 *logger.Logger, arg2 option.StartOpts, arg3 install.ClusterSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServiceForVirtualClusterE", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServiceForVirtualClusterE indicates an expected call of StartServiceForVirtualClusterE.
func (mr *MockClusterMockRecorder) StartServiceForVirtualClusterE(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServiceForVirtualClusterE", reflect.TypeOf((*MockCluster)(nil).StartServiceForVirtualClusterE), arg0, arg1, arg2, arg3)
}

// Stop mocks base method.
func (m *MockCluster) Stop(arg0 context.Context, arg1 *logger.Logger, arg2 option.StopOpts, arg3 ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Stop", varargs...)
}

// Stop indicates an expected call of Stop.
func (mr *MockClusterMockRecorder) Stop(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCluster)(nil).Stop), varargs...)
}

// StopE mocks base method.
func (m *MockCluster) StopE(arg0 context.Context, arg1 *logger.Logger, arg2 option.StopOpts, arg3 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopE indicates an expected call of StopE.
func (mr *MockClusterMockRecorder) StopE(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopE", reflect.TypeOf((*MockCluster)(nil).StopE), varargs...)
}

// StopGrafana mocks base method.
func (m *MockCluster) StopGrafana(arg0 context.Context, arg1 *logger.Logger, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopGrafana", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopGrafana indicates an expected call of StopGrafana.
func (mr *MockClusterMockRecorder) StopGrafana(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopGrafana", reflect.TypeOf((*MockCluster)(nil).StopGrafana), arg0, arg1, arg2)
}

// StopServiceForVirtualCluster mocks base method.
func (m *MockCluster) StopServiceForVirtualCluster(arg0 context.Context, arg1 *logger.Logger, arg2 option.StopOpts) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopServiceForVirtualCluster", arg0, arg1, arg2)
}

// StopServiceForVirtualCluster indicates an expected call of StopServiceForVirtualCluster.
func (mr *MockClusterMockRecorder) StopServiceForVirtualCluster(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServiceForVirtualCluster", reflect.TypeOf((*MockCluster)(nil).StopServiceForVirtualCluster), arg0, arg1, arg2)
}

// StopServiceForVirtualClusterE mocks base method.
func (m *MockCluster) StopServiceForVirtualClusterE(arg0 context.Context, arg1 *logger.Logger, arg2 option.StopOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServiceForVirtualClusterE", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopServiceForVirtualClusterE indicates an expected call of StopServiceForVirtualClusterE.
func (mr *MockClusterMockRecorder) StopServiceForVirtualClusterE(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServiceForVirtualClusterE", reflect.TypeOf((*MockCluster)(nil).StopServiceForVirtualClusterE), arg0, arg1, arg2)
}

// Wipe mocks base method.
func (m *MockCluster) Wipe(arg0 context.Context, arg1 ...option.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Wipe", varargs...)
}

// Wipe indicates an expected call of Wipe.
func (mr *MockClusterMockRecorder) Wipe(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipe", reflect.TypeOf((*MockCluster)(nil).Wipe), varargs...)
}

// WipeE mocks base method.
func (m *MockCluster) WipeE(arg0 context.Context, arg1 *logger.Logger, arg2 ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WipeE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WipeE indicates an expected call of WipeE.
func (mr *MockClusterMockRecorder) WipeE(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WipeE", reflect.TypeOf((*MockCluster)(nil).WipeE), varargs...)
}

// WorkloadNode mocks base method.
func (m *MockCluster) WorkloadNode() option.NodeListOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkloadNode")
	ret0, _ := ret[0].(option.NodeListOption)
	return ret0
}

// WorkloadNode indicates an expected call of WorkloadNode.
func (mr *MockClusterMockRecorder) WorkloadNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkloadNode", reflect.TypeOf((*MockCluster)(nil).WorkloadNode))
}
