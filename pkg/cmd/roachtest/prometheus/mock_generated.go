// Code generated by MockGen. DO NOT EDIT.
// Source: prometheus.go

// Package prometheus is a generated GoMock package.
package prometheus

import (
	context "context"
	os "os"
	reflect "reflect"

	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/logger"
	option "github.com/cockroachdb/cockroach/pkg/cmd/roachtest/option"
	gomock "github.com/golang/mock/gomock"
)

// Mockcluster is a mock of cluster interface.
type Mockcluster struct {
	ctrl     *gomock.Controller
	recorder *MockclusterMockRecorder
}

// MockclusterMockRecorder is the mock recorder for Mockcluster.
type MockclusterMockRecorder struct {
	mock *Mockcluster
}

// NewMockcluster creates a new mock instance.
func NewMockcluster(ctrl *gomock.Controller) *Mockcluster {
	mock := &Mockcluster{ctrl: ctrl}
	mock.recorder = &MockclusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcluster) EXPECT() *MockclusterMockRecorder {
	return m.recorder
}

// ExternalIP mocks base method.
func (m *Mockcluster) ExternalIP(arg0 context.Context, arg1 option.NodeListOption) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalIP", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalIP indicates an expected call of ExternalIP.
func (mr *MockclusterMockRecorder) ExternalIP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalIP", reflect.TypeOf((*Mockcluster)(nil).ExternalIP), arg0, arg1)
}

// Get mocks base method.
func (m *Mockcluster) Get(ctx context.Context, l *logger.Logger, src, dest string, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, l, src, dest}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockclusterMockRecorder) Get(ctx, l, src, dest interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, l, src, dest}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcluster)(nil).Get), varargs...)
}

// PutString mocks base method.
func (m *Mockcluster) PutString(ctx context.Context, content, dest string, mode os.FileMode, opts ...option.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, content, dest, mode}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutString", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutString indicates an expected call of PutString.
func (mr *MockclusterMockRecorder) PutString(ctx, content, dest, mode interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, content, dest, mode}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutString", reflect.TypeOf((*Mockcluster)(nil).PutString), varargs...)
}

// RunE mocks base method.
func (m *Mockcluster) RunE(ctx context.Context, node option.NodeListOption, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, node}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunE", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockclusterMockRecorder) RunE(ctx, node interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, node}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*Mockcluster)(nil).RunE), varargs...)
}
