// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package tasksmock

import (
	context "context"
	time "time"

	tasks "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/models/tasks"
	types "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/services/tasks/types"
	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/logger"
	uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) CreateTask(
	_a0 context.Context, _a1 *logger.Logger, _a2 tasks.ITask,
) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask) (tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask) tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, tasks.ITask) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaskIfNotAlreadyPlanned provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) CreateTaskIfNotAlreadyPlanned(
	_a0 context.Context, _a1 *logger.Logger, _a2 tasks.ITask,
) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskIfNotAlreadyPlanned")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask) (tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask) tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, tasks.ITask) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaskIfNotRecentlyScheduled provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) CreateTaskIfNotRecentlyScheduled(
	_a0 context.Context, _a1 *logger.Logger, _a2 tasks.ITask, _a3 time.Duration,
) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskIfNotRecentlyScheduled")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask, time.Duration) (tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, tasks.ITask, time.Duration) tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, tasks.ITask, time.Duration) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMostRecentCompletedTaskOfType provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetMostRecentCompletedTaskOfType(
	_a0 context.Context, _a1 *logger.Logger, _a2 string,
) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentCompletedTaskOfType")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetTask(
	_a0 context.Context, _a1 *logger.Logger, _a2 types.InputGetTaskDTO,
) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.InputGetTaskDTO) (tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.InputGetTaskDTO) tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, types.InputGetTaskDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: _a0, _a1, _a2
func (_m *IService) GetTasks(
	_a0 context.Context, _a1 *logger.Logger, _a2 types.InputGetAllTasksDTO,
) ([]tasks.ITask, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.InputGetAllTasksDTO) ([]tasks.ITask, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.InputGetAllTasksDTO) []tasks.ITask); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, types.InputGetAllTasksDTO) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTasksService provides a mock function with given fields: _a0
func (_m *IService) RegisterTasksService(_a0 types.ITasksService) {
	_m.Called(_a0)
}

// WaitForTaskCompletion provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *IService) WaitForTaskCompletion(
	_a0 context.Context, _a1 *logger.Logger, _a2 uuid.UUID, _a3 time.Duration,
) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for WaitForTaskCompletion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, uuid.UUID, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
