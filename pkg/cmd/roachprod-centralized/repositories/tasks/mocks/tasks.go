// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

//
// Code generated by mockery v2.51.0. DO NOT EDIT.

package tasksrepomock

import (
	context "context"
	time "time"

	tasks "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/models/tasks"
	repositoriestasks "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/repositories/tasks"
	uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	mock "github.com/stretchr/testify/mock"
)

// ITasksRepository is an autogenerated mock type for the ITasksRepository type
type ITasksRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *ITasksRepository) CreateTask(_a0 context.Context, _a1 tasks.ITask) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tasks.ITask) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStatistics provides a mock function with given fields: _a0
func (_m *ITasksRepository) GetStatistics(
	_a0 context.Context,
) (repositoriestasks.Statistics, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 repositoriestasks.Statistics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (repositoriestasks.Statistics, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) repositoriestasks.Statistics); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositoriestasks.Statistics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *ITasksRepository) GetTask(_a0 context.Context, _a1 uuid.UUID) (tasks.ITask, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (tasks.ITask, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) tasks.ITask); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: _a0, _a1
func (_m *ITasksRepository) GetTasks(
	_a0 context.Context, _a1 repositoriestasks.InputGetTasksFilters,
) ([]tasks.ITask, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []tasks.ITask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositoriestasks.InputGetTasksFilters) ([]tasks.ITask, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositoriestasks.InputGetTasksFilters) []tasks.ITask); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tasks.ITask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositoriestasks.InputGetTasksFilters) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksForProcessing provides a mock function with given fields: _a0, _a1, _a2
func (_m *ITasksRepository) GetTasksForProcessing(
	_a0 context.Context, _a1 chan<- tasks.ITask, _a2 uuid.UUID,
) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksForProcessing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- tasks.ITask, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PurgeTasks provides a mock function with given fields: _a0, _a1, _a2
func (_m *ITasksRepository) PurgeTasks(
	_a0 context.Context, _a1 time.Duration, _a2 tasks.TaskState,
) (int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PurgeTasks")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, tasks.TaskState) (int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, tasks.TaskState) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, tasks.TaskState) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: _a0, _a1, _a2
func (_m *ITasksRepository) UpdateState(
	_a0 context.Context, _a1 uuid.UUID, _a2 tasks.TaskState,
) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, tasks.TaskState) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITasksRepository creates a new instance of ITasksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITasksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITasksRepository {
	mock := &ITasksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
