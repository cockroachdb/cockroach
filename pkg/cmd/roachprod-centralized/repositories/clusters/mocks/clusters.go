// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by mockery v2.53.4. DO NOT EDIT.

package clustersrepmock

import (
	context "context"
	time "time"

	clusters "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/repositories/clusters"
	filterstypes "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/filters/types"
	logger "github.com/cockroachdb/cockroach/pkg/cmd/roachprod-centralized/utils/logger"
	types "github.com/cockroachdb/cockroach/pkg/roachprod/cloud/types"
	mock "github.com/stretchr/testify/mock"
)

// IClustersRepository is an autogenerated mock type for the IClustersRepository type
type IClustersRepository struct {
	mock.Mock
}

// AcquireSyncLock provides a mock function with given fields: ctx, l, instanceID
func (_m *IClustersRepository) AcquireSyncLock(
	ctx context.Context, l *logger.Logger, instanceID string,
) (bool, error) {
	ret := _m.Called(ctx, l, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for AcquireSyncLock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (bool, error)); ok {
		return rf(ctx, l, instanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) bool); ok {
		r0 = rf(ctx, l, instanceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(ctx, l, instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcquireSyncLockWithHealthCheck provides a mock function with given fields: ctx, l, instanceID, healthTimeout
func (_m *IClustersRepository) AcquireSyncLockWithHealthCheck(
	ctx context.Context, l *logger.Logger, instanceID string, healthTimeout time.Duration,
) (bool, error) {
	ret := _m.Called(ctx, l, instanceID, healthTimeout)

	if len(ret) == 0 {
		panic("no return value specified for AcquireSyncLockWithHealthCheck")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Duration) (bool, error)); ok {
		return rf(ctx, l, instanceID, healthTimeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string, time.Duration) bool); ok {
		r0 = rf(ctx, l, instanceID, healthTimeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string, time.Duration) error); ok {
		r1 = rf(ctx, l, instanceID, healthTimeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearPendingOperations provides a mock function with given fields: ctx, l
func (_m *IClustersRepository) ClearPendingOperations(
	ctx context.Context, l *logger.Logger,
) (int64, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for ClearPendingOperations")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) (int64, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) int64); ok {
		r0 = rf(ctx, l)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearPendingOperationsBefore provides a mock function with given fields: ctx, l, timestamp
func (_m *IClustersRepository) ClearPendingOperationsBefore(
	ctx context.Context, l *logger.Logger, timestamp time.Time,
) (int64, error) {
	ret := _m.Called(ctx, l, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for ClearPendingOperationsBefore")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Time) (int64, error)); ok {
		return rf(ctx, l, timestamp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, time.Time) int64); ok {
		r0 = rf(ctx, l, timestamp)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, time.Time) error); ok {
		r1 = rf(ctx, l, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConditionalEnqueueOperation provides a mock function with given fields: ctx, l, operation, healthTimeout
func (_m *IClustersRepository) ConditionalEnqueueOperation(
	ctx context.Context,
	l *logger.Logger,
	operation clusters.OperationData,
	healthTimeout time.Duration,
) (bool, error) {
	ret := _m.Called(ctx, l, operation, healthTimeout)

	if len(ret) == 0 {
		panic("no return value specified for ConditionalEnqueueOperation")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, clusters.OperationData, time.Duration) (bool, error)); ok {
		return rf(ctx, l, operation, healthTimeout)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, clusters.OperationData, time.Duration) bool); ok {
		r0 = rf(ctx, l, operation, healthTimeout)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, clusters.OperationData, time.Duration) error); ok {
		r1 = rf(ctx, l, operation, healthTimeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, l, cluster
func (_m *IClustersRepository) DeleteCluster(
	ctx context.Context, l *logger.Logger, cluster types.Cluster,
) error {
	ret := _m.Called(ctx, l, cluster)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.Cluster) error); ok {
		r0 = rf(ctx, l, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnqueueOperation provides a mock function with given fields: ctx, l, operation
func (_m *IClustersRepository) EnqueueOperation(
	ctx context.Context, l *logger.Logger, operation clusters.OperationData,
) error {
	ret := _m.Called(ctx, l, operation)

	if len(ret) == 0 {
		panic("no return value specified for EnqueueOperation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, clusters.OperationData) error); ok {
		r0 = rf(ctx, l, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCluster provides a mock function with given fields: ctx, l, name
func (_m *IClustersRepository) GetCluster(
	ctx context.Context, l *logger.Logger, name string,
) (types.Cluster, error) {
	ret := _m.Called(ctx, l, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 types.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) (types.Cluster, error)); ok {
		return rf(ctx, l, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) types.Cluster); ok {
		r0 = rf(ctx, l, name)
	} else {
		r0 = ret.Get(0).(types.Cluster)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, string) error); ok {
		r1 = rf(ctx, l, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusters provides a mock function with given fields: ctx, l, filters
func (_m *IClustersRepository) GetClusters(
	ctx context.Context, l *logger.Logger, filters filterstypes.FilterSet,
) (types.Clusters, error) {
	ret := _m.Called(ctx, l, filters)

	if len(ret) == 0 {
		panic("no return value specified for GetClusters")
	}

	var r0 types.Clusters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, filterstypes.FilterSet) (types.Clusters, error)); ok {
		return rf(ctx, l, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, filterstypes.FilterSet) types.Clusters); ok {
		r0 = rf(ctx, l, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Clusters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger, filterstypes.FilterSet) error); ok {
		r1 = rf(ctx, l, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingOperations provides a mock function with given fields: ctx, l
func (_m *IClustersRepository) GetPendingOperations(
	ctx context.Context, l *logger.Logger,
) ([]clusters.OperationData, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingOperations")
	}

	var r0 []clusters.OperationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) ([]clusters.OperationData, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) []clusters.OperationData); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clusters.OperationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingOperationsWithTimestamp provides a mock function with given fields: ctx, l
func (_m *IClustersRepository) GetPendingOperationsWithTimestamp(
	ctx context.Context, l *logger.Logger,
) ([]clusters.OperationData, time.Time, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingOperationsWithTimestamp")
	}

	var r0 []clusters.OperationData
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) ([]clusters.OperationData, time.Time, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) []clusters.OperationData); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clusters.OperationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) time.Time); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *logger.Logger) error); ok {
		r2 = rf(ctx, l)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSyncStatus provides a mock function with given fields: ctx, l
func (_m *IClustersRepository) GetSyncStatus(
	ctx context.Context, l *logger.Logger,
) (*clusters.SyncStatus, error) {
	ret := _m.Called(ctx, l)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncStatus")
	}

	var r0 *clusters.SyncStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) (*clusters.SyncStatus, error)); ok {
		return rf(ctx, l)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger) *clusters.SyncStatus); ok {
		r0 = rf(ctx, l)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clusters.SyncStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logger.Logger) error); ok {
		r1 = rf(ctx, l)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseSyncLock provides a mock function with given fields: ctx, l, instanceID
func (_m *IClustersRepository) ReleaseSyncLock(
	ctx context.Context, l *logger.Logger, instanceID string,
) error {
	ret := _m.Called(ctx, l, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseSyncLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, string) error); ok {
		r0 = rf(ctx, l, instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreCluster provides a mock function with given fields: ctx, l, cluster
func (_m *IClustersRepository) StoreCluster(
	ctx context.Context, l *logger.Logger, cluster types.Cluster,
) error {
	ret := _m.Called(ctx, l, cluster)

	if len(ret) == 0 {
		panic("no return value specified for StoreCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.Cluster) error); ok {
		r0 = rf(ctx, l, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreClusters provides a mock function with given fields: ctx, l, _a2
func (_m *IClustersRepository) StoreClusters(
	ctx context.Context, l *logger.Logger, _a2 types.Clusters,
) error {
	ret := _m.Called(ctx, l, _a2)

	if len(ret) == 0 {
		panic("no return value specified for StoreClusters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.Clusters) error); ok {
		r0 = rf(ctx, l, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreClustersAndReleaseSyncLock provides a mock function with given fields: ctx, l, _a2, instanceID
func (_m *IClustersRepository) StoreClustersAndReleaseSyncLock(
	ctx context.Context, l *logger.Logger, _a2 types.Clusters, instanceID string,
) error {
	ret := _m.Called(ctx, l, _a2, instanceID)

	if len(ret) == 0 {
		panic("no return value specified for StoreClustersAndReleaseSyncLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *logger.Logger, types.Clusters, string) error); ok {
		r0 = rf(ctx, l, _a2, instanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIClustersRepository creates a new instance of IClustersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClustersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClustersRepository {
	mock := &IClustersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
