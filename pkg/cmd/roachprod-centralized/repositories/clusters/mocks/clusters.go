// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

//
// Code generated by mockery v2.51.0. DO NOT EDIT.

package clustersrepomock

import (
	context "context"

	cloud "github.com/cockroachdb/cockroach/pkg/roachprod/cloud"
	mock "github.com/stretchr/testify/mock"
)

// IClustersRepository is an autogenerated mock type for the IClustersRepository type
type IClustersRepository struct {
	mock.Mock
}

// DeleteCluster provides a mock function with given fields: ctx, cluster
func (_m *IClustersRepository) DeleteCluster(ctx context.Context, cluster cloud.Cluster) error {
	ret := _m.Called(ctx, cluster)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cloud.Cluster) error); ok {
		r0 = rf(ctx, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCluster provides a mock function with given fields: ctx, name
func (_m *IClustersRepository) GetCluster(ctx context.Context, name string) (cloud.Cluster, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 cloud.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (cloud.Cluster, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) cloud.Cluster); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(cloud.Cluster)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusters provides a mock function with given fields: ctx
func (_m *IClustersRepository) GetClusters(ctx context.Context) (cloud.Clusters, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClusters")
	}

	var r0 cloud.Clusters
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (cloud.Clusters, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) cloud.Clusters); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.Clusters)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCluster provides a mock function with given fields: ctx, cluster
func (_m *IClustersRepository) StoreCluster(ctx context.Context, cluster cloud.Cluster) error {
	ret := _m.Called(ctx, cluster)

	if len(ret) == 0 {
		panic("no return value specified for StoreCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cloud.Cluster) error); ok {
		r0 = rf(ctx, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreClusters provides a mock function with given fields: ctx, _a1
func (_m *IClustersRepository) StoreClusters(ctx context.Context, _a1 cloud.Clusters) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StoreClusters")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cloud.Clusters) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIClustersRepository creates a new instance of IClustersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClustersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClustersRepository {
	mock := &IClustersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
