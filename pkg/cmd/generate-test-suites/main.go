// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"sort"
	"strings"

	"github.com/alessio/shellescape"
)

func runBuildozer(args []string) {
	const buildozer = "_bazel/bin/external/com_github_bazelbuild_buildtools/buildozer/buildozer_/buildozer"
	cmd := exec.Command(buildozer, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		var cmderr *exec.ExitError
		// NB: buildozer returns an exit status of 3 if the command was successful
		// but no files were changed.
		if !errors.As(err, &cmderr) || cmderr.ProcessState.ExitCode() != 3 {
			fmt.Printf("failed to run buildozer, got output: %s", string(output))
			panic(err)
		}
	}
}

func main() {
	// First list all test and binary targets.
	infos, err := ioutil.ReadDir("pkg")
	if err != nil {
		panic(err)
	}
	var packagesToQuery []string
	for _, info := range infos {
		// We don't want to query into pkg/ui because it never contains any Go tests and
		// because doing so causes a pull from `npm`.
		if !info.IsDir() || info.Name() == "ui" {
			continue
		}
		packagesToQuery = append(packagesToQuery, fmt.Sprintf("//pkg/%s/...", info.Name()))
	}
	allPackages := strings.Join(packagesToQuery, "+")
	cmd := exec.Command(
		"bazel", "query",
		fmt.Sprintf(`kind("(_get_x_data|(go|sh)_(binary|library|test|transition_binary|transition_test))", %s)`, allPackages),
		"--output=label_kind",
	)
	buf, err := cmd.Output()
	if err != nil {
		log.Printf("Could not query Bazel tests: got error %v", err)
		var cmderr *exec.ExitError
		if errors.As(err, &cmderr) {
			log.Printf("Got error output: %s", string(cmderr.Stderr))
		} else {
			log.Printf("Run `%s` to reproduce the failure", shellescape.QuoteCommand(cmd.Args))
		}
		os.Exit(1)
	}
	var getXDataLabels, goLabels, testLabels []string
	for _, line := range strings.Split(string(buf[:]), "\n") {
		fields := strings.Fields(line)
		if len(fields) != 3 {
			continue
		}
		kind := fields[0]
		label := fields[2]
		if kind == "go_library" && !strings.Contains(label, "TxnStateTransition") {
			goLabels = append(goLabels, label)
		} else if kind == "go_test" {
			testLabels = append(testLabels, label)
			goLabels = append(goLabels, label)
		} else if kind == "go_transition_test" {
			goLabels = append(goLabels, label)
		} else if kind == "sh_test" {
			testLabels = append(testLabels, label)
		} else if (kind == "go_binary" || kind == "go_transition_binary") && !strings.HasSuffix(label, "_gomock_prog_bin") && !strings.Contains(label, "TxnStateTransitions") {
			goLabels = append(goLabels, label)
		} else if kind == "_get_x_data" {
			getXDataLabels = append(getXDataLabels, label)
		}
	}
	sort.Strings(getXDataLabels)
	sort.Strings(goLabels)
	sort.Strings(testLabels)

	fixupForGetXDataMap := make(map[string]struct{})
	for _, label := range goLabels {
		dir := strings.Split(strings.TrimPrefix(label, "//"), ":")[0]
		fixupForGetXDataMap[dir] = struct{}{}
	}
	// The list of directories for which we need to add a get_x_data target.
	// This may be different from getXDataLabels, which is the list of
	// existing get_x_data targets *at the time this process started*.
	var fixupForGetXData []string
	for dir := range fixupForGetXDataMap {
		fixupForGetXData = append(fixupForGetXData, dir)
	}
	sort.Strings(fixupForGetXData)

	fmt.Println(`# Code generated by generate-test-suites, DO NOT EDIT.
# gazelle:proto_strip_import_prefix /pkg

load("//build/bazelutil/unused_checker:unused.bzl", "unused_checker")

ALL_TESTS = [`)
	for _, label := range testLabels {
		fmt.Printf("    %q,\n", label)
	}
	fmt.Println(`]

GO_TARGETS = [`)
	for _, label := range goLabels {
		fmt.Printf("    %q,\n", label)
	}
	fmt.Println(`]

GET_X_DATA_TARGETS = [`)
	for _, dir := range fixupForGetXData {
		fmt.Printf(`    "//%s:get_x_data",
`, dir)
	}
	fmt.Println(`]

# These suites run only the tests with the appropriate "size" (excepting those
# tagged "broken_in_bazel", "flaky", or "integration") [1]. Note that tests have
# a default timeout depending on the size [2].

# [1] https://docs.bazel.build/versions/master/be/general.html#test_suite
# [2] https://docs.bazel.build/versions/master/be/common-definitions.html#common-attributes-tests`)

	fmt.Println(`
test_suite(
    name = "all_tests",
    tags = [
        "-broken_in_bazel",
        "-integration",
    ],
    tests = ALL_TESTS,
)`)

	for _, size := range []string{"small", "medium", "large", "enormous"} {
		fmt.Printf(`
test_suite(
    name = "%[1]s_tests",
    tags = [
        "-broken_in_bazel",
        "-flaky",
        "-integration",
        "%[1]s",
    ],
    tests = ALL_TESTS,
)
`, size)
	}

	fmt.Println(`
unused_checker(srcs = GET_X_DATA_TARGETS)`)

	// Use buildozer to add the get_x_data target wherever it is relevant.
	// NB: We expect buildozer to have been built by build/bazelutil/bazel-generate.sh.

	// First, remove any existing get_x_data targets.
	// The get_x_data macro is order-dependent meaning it must be defined
	// *AT THE BOTTOM* of BUILD files. New targets can undermine this by
	// being added under get_x_data. We'll fix by deleting the target then
	// adding it back in.
	args := []string{"delete"}
	args = append(args, getXDataLabels...)
	runBuildozer(args)

	// Add the appropriate load. The buildozer docs advise us to run
	// `fix movePackageToTop` first.
	args = []string{"fix movePackageToTop"}
	for _, dir := range fixupForGetXData {
		args = append(args, fmt.Sprintf("//%s:__pkg__", dir))
	}
	runBuildozer(args)
	args[0] = "new_load //build/bazelutil/unused_checker:unused.bzl get_x_data"
	runBuildozer(args)

	// Now create the new target.
	args[0] = "new get_x_data get_x_data"
	runBuildozer(args)
}
