// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"sort"
	"strings"

	"github.com/alessio/shellescape"
)

func main() {
	// First list all tests.
	infos, err := ioutil.ReadDir("pkg")
	if err != nil {
		panic(err)
	}
	var packagesToQuery []string
	for _, info := range infos {
		// We don't want to query into pkg/ui because it never contains any Go tests and
		// because doing so causes a pull from `npm`.
		if !info.IsDir() || info.Name() == "ui" {
			continue
		}
		packagesToQuery = append(packagesToQuery, fmt.Sprintf("//pkg/%s/...", info.Name()))
	}
	allPackages := strings.Join(packagesToQuery, "+")
	cmd := exec.Command(
		"bazel", "query",
		fmt.Sprintf(`kind("(go|sh)_test", %s)`, allPackages),
		"--output=label",
	)
	buf, err := cmd.Output()
	if err != nil {
		log.Printf("Could not query Bazel tests: got error %v", err)
		var cmderr *exec.ExitError
		if errors.As(err, &cmderr) {
			log.Printf("Got error output: %s", string(cmderr.Stderr))
		} else {
			log.Printf("Run `%s` to reproduce the failure", shellescape.QuoteCommand(cmd.Args))
		}
		os.Exit(1)
	}
	labels := strings.Split(string(buf[:]), "\n")
	sort.Slice(labels, func(i, j int) bool { return labels[i] < labels[j] })

	// Write the output to stdout
	fmt.Println(`# Code generated by generate-test-suites, DO NOT EDIT.
# gazelle:proto_strip_import_prefix /pkg

ALL_TESTS = [`)
	for _, label := range labels {
		if len(label) > 0 {
			fmt.Printf("    %q,\n", label)
		}
	}
	fmt.Println(`]

# These suites run only the tests with the appropriate "size" (excepting those
# tagged "broken_in_bazel", "flaky", or "integration") [1]. Note that tests have
# a default timeout depending on the size [2].

# [1] https://docs.bazel.build/versions/master/be/general.html#test_suite
# [2] https://docs.bazel.build/versions/master/be/common-definitions.html#common-attributes-tests`)

	fmt.Println(`
test_suite(
    name = "all_tests",
    tags = [
        "-broken_in_bazel",
        "-integration",
    ],
    tests = ALL_TESTS,
)`)

	for _, size := range []string{"small", "medium", "large", "enormous"} {
		fmt.Printf(`
test_suite(
    name = "%[1]s_tests",
    tags = [
        "-broken_in_bazel",
        "-flaky",
        "-integration",
        "%[1]s",
    ],
    tests = ALL_TESTS,
)
`, size)
	}
}
