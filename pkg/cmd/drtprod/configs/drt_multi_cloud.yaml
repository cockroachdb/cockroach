# Yaml for creating and configuring the drt-multi-cloud and workload-multi-cloud clusters. This also configures the datadog.
environment:
  ROACHPROD_GCE_DEFAULT_SERVICE_ACCOUNT: 622274581499-compute@developer.gserviceaccount.com
  ROACHPROD_DNS: drt.crdb.io
  ROACHPROD_GCE_DNS_DOMAIN: drt.crdb.io
  ROACHPROD_GCE_DNS_ZONE: drt
  ROACHPROD_GCE_DEFAULT_PROJECT: cockroach-drt
  CLUSTER: drt-multi-cloud
  CLUSTER_NODES: 6
  WORKLOAD_CLUSTER: workload-multi-cloud
  WORKLOAD_NODES: 1

targets:
  - target_name: $CLUSTER
    steps:
      - command: create
        args:
          - $CLUSTER
        flags:
          clouds: gce,aws
          nodes: $CLUSTER_NODES
          local-ssd: false
          username: drt
          lifetime: 8760h
          # gcp flags
          gce-enable-multiple-stores: true
          gce-zones: "us-east4-a,us-east4-b,us-east4-c"
          gce-machine-type: n2-standard-8
          gce-pd-volume-size: 375
          gce-pd-volume-type: pd-ssd
          gce-pd-volume-count: 4
          gce-image: "ubuntu-2204-jammy-v20240319"
          # aws flags
          aws-machine-type: m6i.2xlarge
          aws-enable-multiple-stores: true
          # if this flag is not provided a empty string, a default ebs volume of size 500GB is created
          aws-ebs-volume-type: ""
          aws-zones: "us-east-1a,us-east-1b,us-east-1c"
          aws-ebs-volume:
            - >-
              {"VolumeType":"gp3","VolumeSize":375}
            - >-
              {"VolumeType":"gp3","VolumeSize":375}
            - >-
              {"VolumeType":"gp3","VolumeSize":375}
            - >-
              {"VolumeType":"gp3","VolumeSize":375}
        on_rollback:
          - command: destroy
            args:
              - $CLUSTER
      - command: stage
        args:
          - $CLUSTER
          - cockroach
      - script: "pkg/cmd/drtprod/scripts/setup_datadog_cluster"
      - command: start
        args:
          - $CLUSTER
          - "--binary"
          - "./cockroach"
        flags:
          enable-fluent-sink: true
          store-count: 4
          args: --wal-failover=among-stores
          restart: false
          sql-port: 26257
        on_rollback:
          - command: stop
            args:
              - $CLUSTER
      - command: run
        args:
          - $CLUSTER
          - --
          - "sudo systemctl unmask cron.service ; sudo systemctl enable cron.service ; echo \"crontab -l ; echo '@reboot sleep 100 && ~/cockroach.sh' | crontab -\" > t.sh ; sh t.sh ; rm t.sh"
  - target_name: $WORKLOAD_CLUSTER
    steps:
      - command: create
        args:
          - $WORKLOAD_CLUSTER
        flags:
          clouds: gce
          gce-zones: "us-east4-a"
          nodes: $WORKLOAD_NODES
          gce-machine-type: n2-standard-2
          os-volume-size: 100
          username: workload
          lifetime: 8760h
        on_rollback:
          - command: destroy
            args:
              - $WORKLOAD_CLUSTER
      - command: stage
        args:
          - $WORKLOAD_CLUSTER
          - cockroach
      - command: stage
        args:
          - $WORKLOAD_CLUSTER
          - workload
      - script: "pkg/cmd/drtprod/scripts/setup_datadog_workload"
  - target_name: post_tasks
    dependent_targets:
      - $WORKLOAD_CLUSTER
      - $CLUSTER
    steps:
      - script: rm
        args:
          - -rf
          - certs-$CLUSTER
      - command: get
        args:
          - $CLUSTER:1
          - certs
          - certs-$CLUSTER
      - command: ssh
        args:
          - $WORKLOAD_CLUSTER
          - --
          - sudo
          - rm
          - -rf
          - certs
      - command: put
        args:
          - $WORKLOAD_CLUSTER
          - certs-$CLUSTER
          - certs
      - command: put
        args:
          - $WORKLOAD_CLUSTER
          - artifacts/roachprod
          - roachprod
      - command: ssh
        args:
          - $WORKLOAD_CLUSTER
          - --
          - chmod
          - 600
          - './certs/*'
      - script: "pkg/cmd/drtprod/scripts/tpcc_init.sh"
        args:
          - cct_tpcc # suffix added to script name tpcc_init_cct_tpcc.sh
          - false # determines whether to execute the script immediately on workload node
        flags:
          warehouses: 12000
          db: cct_tpcc
      - script: "pkg/cmd/drtprod/scripts/generate_tpcc_run.sh"
        args:
          - cct_tpcc # suffix added to script name tpcc_run.sh
          - false # determines whether to execute the script immediately on workload node
        flags:
          db: cct_tpcc
          warehouses: 12000
          max-rate: 500
          workers: 50
          conns: 50
          duration: 12h
          ramp: 10m
          wait: 0
