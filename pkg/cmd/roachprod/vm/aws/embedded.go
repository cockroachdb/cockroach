// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config.json (6.603kB)
// old.json (1.165kB)

package aws

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xdb\x6e\x23\x47\x0e\x86\xef\xf3\x14\x86\xaf\x63\x80\xac\x03\x59\xcc\xab\x2c\x16\x01\xc9\x22\x27\x06\x26\x33\x03\xcb\xce\x22\x08\xe6\xdd\x17\xb2\xb3\x5a\xd5\x4c\x6b\x24\x79\xb5\xbe\xeb\xb6\x7e\x56\x75\x7d\x3c\xfc\xdd\x7f\xfd\x74\x77\x77\x77\x77\xff\x14\x1f\x1e\x3f\x7f\xda\xdd\xff\x72\xf7\x76\xe3\xf5\xe6\x2e\x3e\xed\x1e\x9f\x1f\xff\x88\xfb\x5f\xee\x52\x3f\xee\xe2\xe7\xff\xfe\xef\xf9\xcf\x2f\xfb\xdb\xf7\x1f\x1f\x77\xcf\xf7\x47\xf7\xff\xd0\x8f\x2f\xfb\x7f\xfc\xe3\x70\x6b\xff\xf7\xd7\x72\xf5\xfa\x43\xfd\xfd\xf1\xd7\xc7\xb9\x0f\xa1\xbf\x3f\x3e\x80\x64\x16\xa3\x48\x00\x75\xf7\x12\x47\x31\x0f\x92\xb7\x4d\xbe\x4a\xbe\x3c\x7c\xfa\xfc\xf4\xfc\x5b\xe8\xee\xf9\x01\xb7\x7e\xbb\x0b\x7f\x79\x7a\x7c\xfe\xf3\xd7\x0f\x4f\x9f\x5f\xbe\xec\x35\xbb\x0f\x0f\x00\x40\xd1\x06\x4c\x66\x45\x40\x68\x9b\xca\x17\xfb\x14\xcf\xeb\x51\xac\x3b\x5f\x16\xd7\xd7\xd8\xaf\x9a\x07\x98\xd8\xda\xb4\xea\x12\x8d\x63\x66\xdf\x88\xbf\x11\xc2\x8f\x43\x94\x74\x55\xa5\x82\x25\xbd\x3a\xea\x65\x21\xe6\x71\x88\x90\xfd\x73\xe6\xb0\x6a\x91\x84\x79\xff\x5d\x84\xaf\xcb\x9d\xaf\x3f\x5f\x09\xcb\x6a\x91\x34\x4c\xe4\xde\x07\xb7\xcd\x63\x3c\x01\xab\x5c\x0e\x2b\x00\xbc\xe4\xc8\xc2\x4d\x21\x63\xeb\x24\xae\x84\x55\x56\x58\xa5\xb5\x06\x56\x44\x99\x8c\xcb\xd6\x53\x6c\x84\xb0\xe3\x10\x06\x4d\xb4\xf6\x4a\xcd\x5d\x66\x19\x97\x85\x58\x79\x13\xf6\xda\xc7\xeb\x16\x88\x06\x5c\x16\x62\xe1\xdd\x24\xc3\x3d\xc5\x5d\x86\xf4\xc4\x9b\xf3\x46\xe9\xec\x4c\xee\xd1\xfa\x8c\xba\xf5\x98\x2b\xef\xdd\xe7\x97\xe7\xdf\xae\x29\xcc\xaa\x34\xcc\x60\x32\x75\xc7\xda\x37\xcb\xff\x12\xd6\x7f\x2f\xbc\x70\x2e\x83\x66\x55\x47\x90\x9e\x4e\xb9\xb5\xab\x6f\xe4\x0b\x63\x2c\x44\x24\x00\x5a\xa9\x30\x8c\x1f\x31\xfe\x5b\xbe\xf0\xc5\x36\xba\x8c\xd2\x0c\x0d\x2b\xf5\x79\x73\x38\x6d\x58\x33\x9c\x33\x32\x88\xbb\xe4\x65\x70\xae\xed\x9c\x43\xda\x68\xe9\x5d\x3a\x77\xf4\xe4\xff\x09\xd0\x46\xe7\x1c\xa3\x0f\x21\xc5\x8a\xd0\xb1\x42\x3d\x77\xca\x6f\x21\x16\x50\x00\xa6\xd6\x71\x5a\xb6\x18\x88\x3f\xaa\xa4\xa3\x10\x0b\x2c\x22\x67\x65\x99\x91\x2d\x44\x7b\xdc\x1c\x56\x2f\x5a\x3a\x3a\xbb\xf6\x5a\xbd\xd0\x15\xb0\xae\xe8\x9c\x60\x16\xdc\x70\xca\x04\xc8\x59\xdf\xdd\x39\x8f\x16\x5f\x2b\x4a\x99\x49\xd3\xc5\x89\x3d\xe3\x6c\x49\x6c\x74\x4e\xe5\x96\x41\x9d\x50\xeb\x1c\x4c\x97\xf1\x5e\x3b\xa7\x3a\xd0\xa0\xca\x91\xb3\x62\x28\xdf\x1c\x96\xf4\x0e\x62\x59\x69\x42\xd1\x11\x5b\x09\x75\x04\xcb\xf5\xc1\xe3\xd3\xf3\x93\x7e\xbc\xa6\xae\xa6\x70\x72\x78\x8d\xe9\x23\xd9\xb7\x95\xe7\x50\x1d\x2f\xbd\x82\x8a\x1c\x23\x6b\x18\x03\x15\xc6\xad\xb6\xfa\x5d\x80\x05\x13\x17\x0b\x82\x89\x45\x4d\xdc\xc9\x2f\x09\x30\x57\xce\x3d\xab\xb0\xf7\x14\xf0\x26\x70\x73\x48\xb3\x0a\xf4\x02\x55\xa1\x4a\x54\x3b\x03\x29\x5e\xde\x03\xa9\x0b\x8b\xe3\x88\x59\x50\x89\xfb\xfb\x9a\xdf\xf1\xd2\xab\x0f\x19\x3e\x05\xc1\x28\x27\xd5\xaa\x27\x21\x1d\x07\x58\x20\x51\xd6\x2c\x84\xac\xd9\xea\x94\x38\x69\x64\x8e\x03\x2c\x95\x94\x69\xdd\x70\x16\x88\xec\x53\xf8\xf6\x06\xc2\x38\x27\xdb\xbe\x5f\xa4\xa1\xf3\x19\x03\x11\x2f\x0f\xff\x8a\xeb\xc6\x53\xad\x61\x8d\x86\x25\x47\x75\xb2\x2d\xe3\x7d\x11\xa1\xb7\x75\x17\x3c\x52\x74\x86\x69\x95\x41\x0a\x05\x4f\x36\xbb\x83\x7a\x61\x33\xa1\xf3\x40\x1d\xae\x8d\x8d\xfb\xc9\x02\x3a\xa8\xd7\x79\x54\x4d\x5b\x9b\xda\x8b\x76\x69\xfd\xf6\x60\x4a\xe8\xa4\x70\x9b\x52\x68\xb2\x6c\xce\x98\xef\xc1\x5c\x31\x8a\xdc\x3a\x61\x12\xed\x9b\xa9\x16\xd9\x7a\xfe\xcb\xc1\xac\x53\xa8\x55\x9a\xdd\xc6\xc0\xb4\x2a\xdd\xcf\x1e\xed\x3a\x80\x32\x86\x74\x0e\x21\x52\xe8\x1a\x3f\xaa\xba\x37\xf5\x02\xa6\x0d\x2c\xe2\x84\x13\x67\x30\x42\xb9\x7d\x5b\x63\xe3\x3a\x74\x86\x54\x88\xd2\x36\x47\xf8\xf7\x60\xb6\xc6\xe8\xa9\x8a\x29\xe6\xca\x00\x43\x6a\x8b\xe2\xef\x73\xdc\x87\x75\xd7\xa9\xe3\x89\x38\x90\x10\x53\x1c\x68\xcb\xe4\xac\x6a\x5b\xd5\x3e\x66\xcb\x3a\x08\x88\x1d\xe7\x59\xf5\x02\xc6\x7b\x46\x17\xb7\x32\x23\xa9\x8f\xdb\x9b\x82\x9a\xa5\x0e\xf1\xd2\x0b\x05\xb1\x6d\x6d\xef\x08\xcc\x4e\x1f\xae\x75\xda\xc1\x39\x53\x8a\x57\xc3\x69\x13\xdf\xe7\x08\x0e\xeb\xea\xb7\x59\x6b\xbd\x1a\x82\x45\xc4\xd8\x7a\x55\x58\xd5\x0b\x18\x71\x1f\xe9\x3e\x47\xeb\x9c\xa3\x9f\xfc\x32\x71\x50\xaf\xad\xac\x54\x49\xd7\x6a\xa1\xad\x27\xdc\x1e\x4c\x73\x2f\x06\x3a\x25\x2a\xa8\xf8\x99\x19\xf3\xb2\xbb\x1a\x8c\x70\x05\xed\xe6\xdc\x6a\x51\x8b\xf7\xb9\x80\xc3\xba\x0b\x98\x6c\xe6\x63\xc4\x94\x54\x1f\xb3\x9c\x74\xc3\x07\xf5\x6a\xd2\x40\x00\x8b\x88\x0f\x00\xc7\x76\xb2\x62\x0e\xea\xd5\x46\x47\xd5\x5e\x82\x6a\x30\xa3\xe5\xc9\xa4\x38\xa8\x17\x7f\x97\x88\xd0\xd3\x3a\xa7\x74\x48\x3a\x99\x14\x07\x75\x2c\xb5\xce\xee\xee\xc5\xdd\x8d\xe7\xdc\x74\xd8\xab\x3a\x97\x57\x6b\xe9\x36\x0b\x8c\x8a\xe0\xb3\xc2\xff\x61\x3a\xa6\x13\xf4\x82\xd0\x74\xce\xbe\xe9\xcc\x36\x52\xea\x8a\xe9\x58\x51\xf6\x6f\x51\xd2\x45\x94\xb0\xbd\xcf\xb6\x1c\xd6\x5d\x52\x0a\x9a\x93\x4e\xc6\x82\x3a\x66\xd7\xad\x6c\x5d\xd5\x6b\x4a\x71\xb7\x50\x2d\xd9\x9c\x5b\xe2\xc9\xd9\x7a\x50\x2f\x29\x25\x40\x7d\xff\xba\x61\x32\x01\x5b\xbb\xfd\x37\x0f\xb6\x68\xd0\x6a\x05\xc0\x59\x5a\xdd\x1c\x7b\x0b\x98\x6b\xfd\xe4\x44\x8d\xa6\x75\x7a\x9f\x04\x0d\xde\x37\x1d\x0f\xeb\xae\xb5\xae\x63\x28\x95\xd2\x84\x47\xf4\xb2\x95\x2d\xab\x7a\xad\xd6\xa1\x13\x62\x5a\x8e\xa8\xcd\xf3\xf6\x47\xab\x54\x94\x87\x67\x4c\x07\x99\x7c\xe6\x0b\xc5\x7f\x36\x79\x45\xce\xd3\xfe\x3d\x25\x07\x0f\x95\x2c\x1c\xdb\x96\xe5\xd2\xa3\xfd\xc6\x11\x26\x1b\x3a\xb9\xf5\x1c\x83\x4f\x1b\x8f\x83\x7a\xc9\x79\x57\xf6\x62\x52\xb5\x91\x68\xe1\x1f\x35\xc2\x0d\x47\x98\x24\x2a\xa5\x90\x77\xaa\x5a\xea\x59\xac\xeb\x27\x5c\x34\x2e\x8d\x59\x2a\x9b\x73\x91\x7a\x16\xeb\xe1\xea\x9f\x3f\xbd\x5d\x7f\xfd\xe9\xdf\x01\x00\x00\xff\xff\xf7\x53\x90\xed\xcb\x19\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 6603, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x9e, 0xdb, 0x1d, 0x45, 0x96, 0xe3, 0xbb, 0x34, 0x91, 0x1f, 0x22, 0x1a, 0x2a, 0x11, 0xd1, 0x92, 0x75, 0xde, 0xb1, 0x4a, 0x1b, 0xa6, 0xfa, 0xf9, 0x15, 0x2c, 0xd8, 0xd1, 0x5e, 0x84, 0x55}}
	return a, nil
}

var _oldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xdd\xea\xa3\x30\x10\xc5\xef\xfb\x14\xe2\xf5\x5f\x98\x7c\x27\x7d\x95\x65\x29\x71\x32\x29\x81\x7e\xd1\x68\x97\x52\xfa\xee\x8b\x0a\xd6\xb0\xb2\xdd\x2e\x7f\xef\xe6\xe4\x9c\x99\xf8\x73\x7c\x6c\xaa\xaa\xaa\xea\x2b\xed\xd3\xf9\x94\xeb\x6d\x35\x09\xa3\x98\xe9\x94\x53\x97\x6e\x54\x6f\xab\xe8\x0f\x99\xbe\x5e\x67\xdd\xfd\x32\xc8\xf5\x21\xe5\xae\x5e\xe8\x37\x7f\xe8\x87\x83\x1f\xb3\x34\x3c\x8f\xa2\x1a\x8d\xfe\x98\x76\x29\x0c\x2d\xfc\x31\x35\x4e\x2b\xd2\x6d\x14\x8b\x56\xb3\x73\xba\xdb\xe0\xec\x73\x43\x3e\x77\x0d\x5f\xb3\x65\xc2\xfe\x9a\xba\xfb\x6e\x7f\x3d\xf7\x97\xc1\x9e\xf7\x0d\x68\x2f\xd1\x82\xd3\x52\x92\xe0\x8e\xc3\x6a\xb2\x6f\x4f\xd4\x95\x2f\x5f\x18\xe6\xb9\xed\xd8\x76\xb4\x37\xd2\x31\x03\x42\xb0\x95\x8e\x65\x08\x97\x21\x8d\x26\x72\xc0\xfa\x8f\xcc\xb3\x50\x9e\x5f\x9f\xf1\x33\xce\x1a\xe1\x60\xed\x32\x25\xbf\x5f\xf4\x19\x3f\xa1\xa4\xf5\x80\x88\xc6\x1a\xd0\xeb\x03\xfe\x85\xdf\x34\xd7\x2f\x50\x40\x8c\x81\x21\xf7\x42\xa2\xe3\x82\xa1\xff\x0b\xc8\x29\xbd\xa4\x0f\xa4\x51\xa0\x93\x32\x68\x89\x01\x7d\xfc\x6e\xa2\x4e\x32\x02\x19\x57\x17\xe6\x45\x94\xfa\x8f\x89\x52\xdb\x72\x16\x34\xb3\x52\x84\x60\x79\xfc\x2f\xa2\xf3\xdc\x82\xa8\xd2\xad\x08\x16\x39\x43\x45\x5e\xb9\xb5\xbf\xa9\x4c\x17\x44\x99\x8d\x1e\x3c\x31\xab\x40\x49\x90\xf6\x6d\x7a\xb9\xd8\xa0\x8d\x65\xc6\x12\x33\x41\xe8\xa8\x94\x7e\xfb\x3d\xe6\xea\xe7\x66\xaa\x9f\x9b\xdf\x01\x00\x00\xff\xff\xfa\xb5\x44\x02\x8d\x04\x00\x00")

func oldJsonBytes() ([]byte, error) {
	return bindataRead(
		_oldJson,
		"old.json",
	)
}

func oldJson() (*asset, error) {
	bytes, err := oldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "old.json", size: 1165, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xdf, 0xa4, 0x96, 0xe4, 0x56, 0xfa, 0x6a, 0x9c, 0x6f, 0x4e, 0xe8, 0x59, 0x2f, 0xa6, 0xce, 0xb8, 0xbd, 0x71, 0x68, 0x9b, 0x55, 0x84, 0xd1, 0x57, 0xf3, 0x4a, 0xf5, 0x17, 0x72, 0x3, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,

	"old.json": oldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": {configJson, map[string]*bintree{}},
	"old.json":    {oldJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
