// Code generated by go-bindata. DO NOT EDIT.
// sources:
// config.json (6.468kB)
// old.json (1.165kB)

package aws

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xdb\x6e\x23\x47\x0e\x86\xef\xe7\x29\x0c\x5f\xc7\x40\xb1\x0e\x64\x31\xaf\xb2\x58\x04\x24\x8b\x9c\x08\x98\xd8\x03\x4b\xca\x22\x08\xe6\xdd\x17\xb2\x93\x8e\x6a\xa6\x65\x1d\x22\xdd\x75\xa9\x7f\xb2\xba\x3e\x9e\xba\xff\xfc\xf4\xf0\xf0\xf0\xf0\xf8\xea\x9f\x37\x2f\xcf\xdb\xc7\x9f\x1f\xde\x17\xde\x16\xb7\xfe\xbc\xdd\xec\x36\xbf\xfb\xe3\xcf\x0f\x21\x5f\xb6\xfe\xd3\x3f\xff\xed\xfe\xf8\x7a\x58\x7e\xfc\xb2\xd9\xee\x1e\x8f\xd6\x7f\x97\x2f\xfb\xc3\x1f\xff\x59\x96\x0e\xbf\x3f\xa7\xab\xb7\x1b\xe5\xb7\xcd\x2f\x9b\x71\x30\x21\xbf\x6d\x9e\x6a\xc7\x92\x2c\xfb\x91\xa9\xe5\xce\xf7\xbd\xbd\xdd\xf9\xf5\xe9\xf9\xe5\x75\xf7\xab\xcb\x76\xf7\x04\x6b\xf7\x6e\xdd\xf6\xaf\x9b\xdd\x1f\xbf\x7c\x7e\x7d\xd9\x7f\x3d\x68\xb6\x9f\x9f\x52\x4a\xe8\xb5\xa7\x41\x24\x90\x20\xd5\x55\xe5\x5e\x9f\x7d\x37\x9f\xc0\xbc\xe1\xc9\xb9\xbc\xd9\x7e\xd3\x3c\xa5\x01\xb5\x0e\x2d\xc6\x5e\xc9\x47\xb4\x15\xfb\x2b\x26\xec\xd8\x44\x0e\x13\x11\xcc\x90\xc3\x8a\x81\x5c\x66\x62\x1c\x9b\x70\x3e\x3c\x67\x74\x2d\xea\x81\x10\x8f\x3f\x58\xf8\x36\xad\x7c\xfb\xe9\x3a\x46\xa2\x44\xa3\xda\xda\xd3\x9d\x62\x94\x2f\x67\xe4\x29\x59\x8e\x1e\x99\xaa\xa4\xf0\xb5\x03\xb8\x92\x51\x9e\x19\xe5\x5a\x6b\xd2\xcc\x42\xa8\x94\xd7\x62\x60\xc5\x84\x1e\x9b\xd0\x54\x59\x4a\x2b\x58\xcd\x78\xe4\x7e\x99\x89\x19\x33\x42\x2b\xad\xbf\x6d\x01\xb1\xa7\xcb\x4c\x4c\x98\x2b\x87\x9b\x05\x9b\x71\xe7\x16\x70\x6f\xcc\xbd\x7a\xd1\xec\x7a\x16\xf3\xf6\x65\xbf\xfb\xf5\x9a\x34\x2c\x82\x5d\x35\x0d\xc2\x66\x50\xda\x6a\xb2\x5f\x82\xf8\x2f\xc7\x13\xde\xdc\x71\x14\x31\x48\xdc\xc2\x30\xd6\x76\xf5\x9d\x7c\x42\x0b\x19\x11\x39\x25\x29\x98\x29\xf5\x8f\xd0\xfe\x25\x9f\xb0\x42\xed\x8d\x7b\xae\x0a\x0a\x05\xdb\xb8\x37\x13\xa5\x28\xbd\xdb\x85\x4c\xae\x2d\x8f\x9d\x6b\xaf\x61\x8d\x1b\x35\xb0\xa0\x7f\xc5\x65\xa5\x3c\xf6\xde\x3a\xa3\x40\x81\xd4\xa0\xa4\x72\xee\x70\xdf\x4d\x4c\x7c\x52\x52\xd1\x06\x43\xa3\x7a\x07\xf8\x28\x6f\x8e\x4c\x4c\x8c\x10\x8d\x84\x78\x78\x54\x67\x69\x7e\x6f\x46\xa5\x88\xb6\xdc\x56\xcf\xfd\x04\xa3\x2b\xca\x63\x52\x75\xaa\x30\x78\xa4\x14\xa3\xdc\x5c\x1e\x8f\x9c\xcf\xf9\x23\x44\x28\x61\x6c\x48\x16\x7e\x36\x01\x56\xca\xa3\x50\x0d\xc7\x86\x20\x65\x74\xc2\xcb\x30\xcf\xe5\x51\x2c\x61\xc7\x42\x1e\xa3\x80\x0b\xdd\x9b\x11\x50\x19\xda\x69\x6d\x6b\x47\x8c\x4c\x9e\xcc\x9f\x77\xaf\xf2\xe5\x9a\x2c\x1a\x4c\x41\x6e\xc5\x87\xf5\x20\x5b\x57\x9e\x23\x74\xec\x7a\xe6\xe3\xd1\x7b\x14\x57\x4a\x98\x09\xd6\x6a\xe7\x0f\x06\x26\x3a\x94\xd5\x31\x0d\xc8\xa2\x6c\x86\x76\x89\x81\x31\xe3\x6d\x51\x98\xac\x05\x27\xab\x9c\xee\xcd\xa6\xa5\xd6\x6c\x94\xf8\x98\x8d\xef\x6f\x61\xd3\x98\xd8\xa0\xfb\xc8\x20\x48\xed\xb6\x0a\x77\xec\x7a\x1e\x2d\xba\x0d\x86\xa4\x18\x03\x4b\x91\x93\x6c\x8e\x0d\x4c\x6c\x30\x4a\x64\x04\x92\xa8\x65\xb0\x9f\x9c\x4d\x8e\x0d\x4c\x79\x13\xa1\x4d\x61\xe4\xe4\xd1\x06\xd3\xdd\x67\x02\x50\x62\xe8\xb8\x5a\xaf\x26\x36\xff\xf3\xeb\x5a\x4f\x29\xae\x15\xbb\x06\x79\x31\xd4\xd5\xd9\xf2\x12\x30\xef\x7e\x27\x2a\x9c\x65\xb8\x4a\xe1\x8e\x92\x32\x9c\xac\x68\x8b\x7a\x42\x32\x52\xa3\x0e\xd2\x4d\x2a\x29\xb5\x93\xe9\xb2\xa8\xe7\x5e\x53\x54\x6a\x1d\xd2\xb2\x34\xae\xed\xee\x3c\xb8\x82\xa7\x1a\x6b\x6d\x70\x85\xc7\x15\x6d\xc6\xb4\x21\x04\x62\xe2\xd6\x24\xf3\xda\x63\x5f\xce\x63\xee\x30\xb5\xe0\x68\xda\x3b\x84\x16\x6e\x76\xf6\x44\xe7\xe6\x12\xde\xb9\x91\x33\xa2\xa4\x26\xfe\x51\x8e\xbd\xab\x27\x1e\xb5\x43\x66\x43\x18\x30\x9c\x20\xe5\x7b\xf3\xb0\xc3\xd8\xc4\xba\x7a\x5c\x3f\xf2\x58\x6d\x3f\x27\xf2\x23\xab\x09\xa5\xd4\xb9\x54\xcf\x76\xdb\xc8\xbc\xf8\x9d\x3b\x8a\x05\x40\x07\x04\x08\xb6\x84\x78\xee\x44\x8b\xce\x6a\xeb\xa3\x46\xe9\x98\x90\x0c\xc6\x59\xf5\xc4\xc3\x5a\x78\x63\xd3\x3c\x3c\xb0\xf5\xbb\xf7\x79\x55\xd6\x41\x63\xb5\xce\xff\xc3\x63\x2b\x4f\xd7\x8e\xca\x4e\x31\x82\xb3\x15\x85\xa1\x03\x6e\x6b\xf2\x8b\x5f\xf9\x3e\x46\xb5\x15\x85\xa4\xee\xde\xd7\xfa\xe0\xac\x9e\x78\xb0\x59\x0f\xb3\xd1\x6b\xa3\xe8\xed\xe4\xf7\x83\x45\x3d\xd7\xab\x5c\x38\x4c\x8a\xba\xd4\x16\xe9\xee\x3c\x10\x5b\x42\x83\x33\xf9\xb1\xdf\x5e\xcd\x83\xa9\x24\x69\x6a\x54\x4b\x16\xf5\xdb\x1a\xfb\xe2\x77\xe2\x11\x55\xad\x77\x1f\x1c\x62\x7d\xe4\x93\xe3\xec\xa2\x9e\xc7\xad\xc4\x09\x32\xb3\xf5\x94\x0c\xea\xc9\xfc\x58\xd4\xf3\x1c\xec\x45\x5a\x76\x2c\x4e\x04\x1a\x27\x63\x61\x51\x4f\x93\x5a\x00\xa4\x16\xda\x28\xb8\xa5\xc0\x93\xb1\xb0\xa8\x7d\xca\x6c\x32\x33\xcb\x66\xa6\x34\x86\x9f\x7c\xd5\x5a\xd4\x31\xbd\x09\x73\xd3\x91\x53\x2f\x90\x6c\x94\x74\xff\xce\x87\xcd\x51\xe3\xcc\x04\xff\xf7\xde\xae\xe8\x7c\x05\xf8\xf0\xf6\xc3\x8d\x59\x10\xea\x6d\x93\xc8\xe2\x77\x8a\xa4\x54\x0d\x65\x10\x64\x90\x3e\x9a\xac\x05\xe9\xac\x9e\x23\x89\x9a\xba\x48\x8e\x6a\x54\x63\x35\x87\x66\xf5\x14\x49\x9c\xb0\x1d\xde\x17\x94\x47\x82\x5a\xef\xfe\x65\x22\x51\xeb\xad\xe2\x99\x4a\xbb\xdf\x5e\x3d\x19\x0e\x10\xaf\x52\x86\xb5\x81\xa9\xa6\xdb\x3a\xdf\xe2\x77\xce\x6c\xe9\x5d\x30\xe7\xca\xd4\xbd\xe5\xb5\x20\x99\xd5\x73\x6e\x76\x19\xc9\x87\x46\xf7\x52\x2d\xee\x7e\xa2\xc4\x9d\x0a\xa7\x33\xdf\x11\xfe\xde\xdb\x15\x11\x8e\x87\xf7\x8b\xe8\xd4\x85\x23\x93\xaf\x4f\x21\x97\x9e\xe8\x77\xb3\x5d\x90\x82\xa1\x69\x8b\xde\xe9\xf4\x2c\xb1\xa8\xa7\x08\x37\x21\xcb\xca\x45\x2a\xb2\x64\xfa\xa8\xda\xad\xcc\x76\x81\x2c\x9c\x33\x5a\xc3\x22\xb9\x9c\xa5\x39\x7f\x4d\x05\xa5\x5c\x89\xb8\x90\x1a\x65\x2e\x67\x69\x2e\x57\xff\xfd\xf4\x7e\xfd\xed\xd3\xff\x03\x00\x00\xff\xff\x33\x56\x51\xb9\x44\x19\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 6468, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xd6, 0x51, 0x56, 0xf4, 0x2, 0x38, 0x5d, 0xd5, 0x18, 0xa7, 0x2a, 0xdd, 0xb7, 0xde, 0x79, 0x33, 0x77, 0xc8, 0xae, 0xcd, 0xa3, 0xcd, 0x56, 0x33, 0xbe, 0x6c, 0xa7, 0x3a, 0x18, 0x39, 0x88}}
	return a, nil
}

var _oldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xdd\xea\xa3\x30\x10\xc5\xef\xfb\x14\xe2\xf5\x5f\x98\x7c\x27\x7d\x95\x65\x29\x71\x32\x29\x81\x7e\xd1\x68\x97\x52\xfa\xee\x8b\x0a\xd6\xb0\xb2\xdd\x2e\x7f\xef\xe6\xe4\x9c\x99\xf8\x73\x7c\x6c\xaa\xaa\xaa\xea\x2b\xed\xd3\xf9\x94\xeb\x6d\x35\x09\xa3\x98\xe9\x94\x53\x97\x6e\x54\x6f\xab\xe8\x0f\x99\xbe\x5e\x67\xdd\xfd\x32\xc8\xf5\x21\xe5\xae\x5e\xe8\x37\x7f\xe8\x87\x83\x1f\xb3\x34\x3c\x8f\xa2\x1a\x8d\xfe\x98\x76\x29\x0c\x2d\xfc\x31\x35\x4e\x2b\xd2\x6d\x14\x8b\x56\xb3\x73\xba\xdb\xe0\xec\x73\x43\x3e\x77\x0d\x5f\xb3\x65\xc2\xfe\x9a\xba\xfb\x6e\x7f\x3d\xf7\x97\xc1\x9e\xf7\x0d\x68\x2f\xd1\x82\xd3\x52\x92\xe0\x8e\xc3\x6a\xb2\x6f\x4f\xd4\x95\x2f\x5f\x18\xe6\xb9\xed\xd8\x76\xb4\x37\xd2\x31\x03\x42\xb0\x95\x8e\x65\x08\x97\x21\x8d\x26\x72\xc0\xfa\x8f\xcc\xb3\x50\x9e\x5f\x9f\xf1\x33\xce\x1a\xe1\x60\xed\x32\x25\xbf\x5f\xf4\x19\x3f\xa1\xa4\xf5\x80\x88\xc6\x1a\xd0\xeb\x03\xfe\x85\xdf\x34\xd7\x2f\x50\x40\x8c\x81\x21\xf7\x42\xa2\xe3\x82\xa1\xff\x0b\xc8\x29\xbd\xa4\x0f\xa4\x51\xa0\x93\x32\x68\x89\x01\x7d\xfc\x6e\xa2\x4e\x32\x02\x19\x57\x17\xe6\x45\x94\xfa\x8f\x89\x52\xdb\x72\x16\x34\xb3\x52\x84\x60\x79\xfc\x2f\xa2\xf3\xdc\x82\xa8\xd2\xad\x08\x16\x39\x43\x45\x5e\xb9\xb5\xbf\xa9\x4c\x17\x44\x99\x8d\x1e\x3c\x31\xab\x40\x49\x90\xf6\x6d\x7a\xb9\xd8\xa0\x8d\x65\xc6\x12\x33\x41\xe8\xa8\x94\x7e\xfb\x3d\xe6\xea\xe7\x66\xaa\x9f\x9b\xdf\x01\x00\x00\xff\xff\xfa\xb5\x44\x02\x8d\x04\x00\x00")

func oldJsonBytes() ([]byte, error) {
	return bindataRead(
		_oldJson,
		"old.json",
	)
}

func oldJson() (*asset, error) {
	bytes, err := oldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "old.json", size: 1165, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xdf, 0xa4, 0x96, 0xe4, 0x56, 0xfa, 0x6a, 0x9c, 0x6f, 0x4e, 0xe8, 0x59, 0x2f, 0xa6, 0xce, 0xb8, 0xbd, 0x71, 0x68, 0x9b, 0x55, 0x84, 0xd1, 0x57, 0xf3, 0x4a, 0xf5, 0x17, 0x72, 0x3, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,

	"old.json": oldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": {configJson, map[string]*bintree{}},
	"old.json":    {oldJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
