// Copyright 2018 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

package main

import (
	"bytes"
	"os"
	"path/filepath"
	"testing"
)

var expectedA = `# Code generated by prereqs. DO NOT EDIT!

bin/a: a/a.go a/ignore.go a/invalid.go a/cgo.go a/a.c a/a.f a b/b.go b vendor/foo.com/foo/foo.go vendor/foo.com/foo

a/a.go:
a/ignore.go:
a/invalid.go:
a/cgo.go:
a/a.c:
a/a.f:
a:
b/b.go:
b:
vendor/foo.com/foo/foo.go:
vendor/foo.com/foo:
`

var expectedB = `# Code generated by prereqs. DO NOT EDIT!

bin/b: b/b.go b vendor/foo.com/foo/foo.go vendor/foo.com/foo

b/b.go:
b:
vendor/foo.com/foo/foo.go:
vendor/foo.com/foo:
`

var expectedFoo = `# Code generated by prereqs. DO NOT EDIT!

bin/foo: vendor/foo.com/foo/foo.go vendor/foo.com/foo

vendor/foo.com/foo/foo.go:
vendor/foo.com/foo:
`

func TestPrereqs(t *testing.T) {
	gopath, err := filepath.Abs("testdata")
	if err != nil {
		t.Fatal(err)
	}
	buildCtx.GOPATH = gopath

	if err := os.Chdir("testdata/src/example.com"); err != nil {
		t.Fatal(err)
	}

	for _, tc := range []struct {
		path     string
		expected string
	}{
		{"example.com/a", expectedA},
		{"./b", expectedB},
		{"./a/../b", expectedB},
		{"example.com/a/../b", expectedB},
		{"example.com/b", expectedB},
		{"foo.com/foo", expectedFoo},
		{"./vendor/foo.com/foo", expectedFoo},
		{"example.com/vendor/foo.com/foo", expectedFoo},
	} {
		t.Run(tc.path, func(t *testing.T) {
			var buf bytes.Buffer
			if err := run(&buf, tc.path); err != nil {
				t.Fatal(err)
			}
			if e, a := tc.expected, buf.String(); e != a {
				t.Fatalf("expected:\n%s\nactual:\n%s\n", e, a)
			}
		})
	}
}
