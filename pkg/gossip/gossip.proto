// Copyright 2015 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.gossip;
option go_package = "gossip";

import "roachpb/data.proto";
import "util/hlc/timestamp.proto";
import "util/unresolved_addr.proto";
import "gogoproto/gogo.proto";

// BootstrapInfo contains information necessary to bootstrap the
// gossip network from a cold start.
message BootstrapInfo {
  // Addresses of other nodes in the cluster.
  repeated util.UnresolvedAddr addresses = 1 [(gogoproto.nullable) = false];
  // Timestamp at which the bootstrap info was written.
  util.hlc.Timestamp timestamp = 2 [(gogoproto.nullable) = false];
}

// Request is the request struct passed with the Gossip RPC.
message Request {
  // Requesting node's ID.
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Address of the requesting client.
  util.UnresolvedAddr addr = 2 [(gogoproto.nullable) = false];
  // Map of high water timestamps from infos originating at other
  // nodes, as seen by the requester.
  map<int32, int64> high_water_stamps = 3 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID", (gogoproto.nullable) = false];
  // Delta of Infos originating at sender.
  map<string, Info> delta = 4;
  // Cluster ID to prevent illegal connections.
  bytes cluster_id = 5 [(gogoproto.nullable) = false,
                        (gogoproto.customname) = "ClusterID",
                        (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID"];
}

// Response is returned from the Gossip.Gossip RPC.
// Delta will be nil in the event that Alternate is set.
message Response {
  // Responding Node's ID.
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Address of the responding client.
  util.UnresolvedAddr addr = 2 [(gogoproto.nullable) = false];
  // Non-nil means client should retry with this address.
  util.UnresolvedAddr alternate_addr = 3;
  // Node ID of the alternate address, if alternate_addr is not nil.
  int32 alternate_node_id = 4 [(gogoproto.customname) = "AlternateNodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Delta of Infos which are fresh according to the map of Node info messages
  // passed with the request.
  map<string, Info> delta = 5;
  // Map of high water timestamps from infos originating at other
  // nodes, as seen by the responder.
  map<int32, int64> high_water_stamps = 6 [(gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID", (gogoproto.nullable) = false];
}

message ConnStatus {
  option (gogoproto.goproto_stringer) = false;

  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  string address = 2;
  int64 age_nanos = 3;
}

message MetricSnap {
  option (gogoproto.goproto_stringer) = false;

  int64 bytes_received = 2;
  int64 bytes_sent = 3;
  int64 infos_received = 4;
  int64 infos_sent = 5;
  int64 conns_refused = 6;
}

message OutgoingConnStatus {
  option (gogoproto.goproto_stringer) = false;

  ConnStatus conn_status = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
  MetricSnap metrics = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false];
}

message ClientStatus {
  option (gogoproto.goproto_stringer) = false;

  repeated OutgoingConnStatus conn_status = 1 [(gogoproto.nullable) = false];
  int32 max_conns = 2;
}

message ServerStatus {
  // TODO(peter): Report per connection sent/received statistics. The
  // structure of server.Gossip and server.gossipReceiver makes this
  // irritating to track.

  option (gogoproto.goproto_stringer) = false;

  repeated ConnStatus conn_status = 1 [(gogoproto.nullable) = false];
  int32 max_conns = 2;
  MetricSnap metrics = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message Connectivity {
  option (gogoproto.goproto_stringer) = false;

  message Conn {
    int32 source_id = 1 [(gogoproto.customname) = "SourceID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
    int32 target_id = 2 [(gogoproto.customname) = "TargetID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  }

  int32 sentinel_node_id = 1 [(gogoproto.customname) = "SentinelNodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  repeated Conn client_conns = 2 [(gogoproto.nullable) = false];
}

// InfoStatus contains information about the current status of the infoStore.
message InfoStatus {
  map<string, Info> infos = 1 [(gogoproto.nullable) = false];
  ClientStatus client = 2 [(gogoproto.nullable) = false];
  ServerStatus server = 3 [(gogoproto.nullable) = false];
  Connectivity connectivity = 4 [(gogoproto.nullable) = false];
}

// Info is the basic unit of information traded over the
// gossip network.
message Info {
  roachpb.Value value = 1 [(gogoproto.nullable) = false];
  // Wall time of info when generated by originating node (Unix-nanos).
  int64 orig_stamp = 2;
  // Wall time when info is to be discarded (Unix-nanos).
  int64 ttl_stamp = 3 [(gogoproto.customname) = "TTLStamp"];
  // Number of hops from originator.
  uint32 hops = 4;
  // Originating node's ID.
  int32 node_id = 5 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Peer node ID which passed this info.
  int32 peer_id = 6 [(gogoproto.customname) = "PeerID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
}

service Gossip {
  rpc Gossip (stream Request) returns (stream Response) {}
}
