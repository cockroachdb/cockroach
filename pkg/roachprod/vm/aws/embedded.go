// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/roachprod/vm/aws/config.json (7.081kB)
// pkg/roachprod/vm/aws/old.json (1.165kB)

package aws

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x98\xdb\x6e\x1c\xb7\xb2\x86\xef\xfd\x14\x03\x5d\x47\x00\x8b\x87\x3a\xe4\x55\x36\x82\xa0\x58\x07\x47\x1b\xb6\x6c\x68\xa4\x2c\x04\x0b\x79\xf7\x05\x1d\x2c\x0f\xa5\x69\xcd\x78\xae\xa4\xee\xe6\x4f\x4e\xd7\xd7\x55\xf5\x93\xff\xfd\xb4\xdb\x5d\xdd\xc5\xe7\x9b\x6f\xb7\xfb\xab\xdf\x77\x8f\x97\xbb\xdd\xd5\x3e\x6e\xf7\x37\xf7\x37\x7f\xc7\xd5\xef\xbb\xd4\x2f\xfb\xf8\xed\xf9\xfe\xfd\x3f\xdf\x1f\x6f\xfd\xdf\xd3\xd5\x6e\x77\xf5\xe5\x66\x7f\x7f\xf5\xdb\xcb\xd5\x8f\xbb\xbb\xdd\xd5\xb7\xf9\xff\x61\x3f\x9f\xec\x5e\xe6\x7d\x79\xaa\x5f\x6f\xfe\xbc\xf1\xab\xdf\x77\x57\xfb\xfb\xbb\x9b\xdb\xcf\x07\xe3\x5e\x9f\xfe\xa9\x77\x5f\xb1\x9f\x18\x93\x37\xdf\xf7\x5b\x43\x9e\xdf\x69\xeb\xe9\x3e\xec\xe1\xee\xe6\xfe\x9f\x3f\x3f\xdf\x7d\x7b\xf8\xbe\x39\xea\x61\xde\xc6\xfd\xfe\xe0\x8d\x5f\x1e\x7c\xd5\xef\xcb\xc8\xdd\xab\xfe\xe0\xe6\x1f\xaf\xff\xff\xfb\xe9\xf0\xce\x1f\x2f\xc1\xfc\x5b\xbf\x3c\x1c\x46\xf3\x67\x8c\x0e\x22\xa4\x5f\x6f\xae\xcb\x54\x18\xa0\xce\x60\xee\x42\x33\x0e\xd6\x7e\x17\xae\x27\x01\xa1\x78\x15\x2e\xc8\x01\xa2\xd9\x8e\x08\x7e\xc4\xee\x69\xbc\xcc\xf4\x56\xc8\x1a\x44\x47\x14\x3b\x1c\xff\x33\x90\xfa\xfd\xfa\xf6\xdb\xdd\xfd\x5f\xa1\xfb\xfb\x6b\x38\x1c\x73\x24\x9c\x9f\xaf\x4b\x29\x18\x9d\x8b\x13\x29\x14\x28\x7d\x51\xbc\x86\x76\xfd\x34\x96\x25\xf4\x69\xa6\xa7\x91\xd7\xc5\xa1\x77\x9f\xcd\x24\x3a\x85\xe7\x78\xf3\x45\x2c\x42\x3b\x14\xd6\x34\x55\xc5\x0a\x35\xad\x19\xe8\x47\x42\x3f\x14\x86\x3c\xbe\x41\xf2\x6c\x33\x12\x21\xaf\xde\x01\xfd\xf7\xb7\x93\xec\x84\x8a\xd9\xe8\xda\x54\x89\x3a\xe2\x69\x76\xec\x6a\xb3\x08\xd7\xa9\xa0\xe6\xa7\xd8\xb9\x4b\x0b\x51\xaf\xdd\x0b\x24\xd6\x33\xd8\xd5\xd3\xec\xa2\x14\xab\xc9\x59\xa9\x6b\xc9\xd0\x5f\x65\x57\x57\x76\xb5\xf7\x5e\x66\x15\x25\x9c\x54\xfb\x07\x08\xea\x3c\x14\xce\xd2\x45\xdb\x68\xd8\xcd\xc4\x2b\x7f\x24\x5c\xa1\x23\x8c\x36\xf8\x69\x39\x44\x2e\x1f\x09\x17\xe8\x5d\x32\xcc\x52\xcc\x84\x65\x24\x5c\x04\x1d\xa2\x37\x9c\x38\x1c\x3b\x74\xe2\x63\x0c\x57\xe8\x92\x34\x5c\xd8\xd1\xa4\xcd\xba\xfc\xdc\xa3\xd0\x7b\x28\x11\x47\xb8\x66\x53\xf6\xdc\x84\xbe\xff\xf6\x70\xff\xd7\x39\xc9\xda\x14\x79\xce\xe2\x84\xc3\xa0\x8d\x38\x0f\xf8\xcb\xf4\x0b\xec\xca\xe8\x4d\x0d\x8a\x8c\x34\x4c\x78\x17\xfa\x17\xd1\x02\x1a\x2a\x22\x4a\x29\xda\xb0\x52\xe1\xf7\xa0\x5f\x44\x0b\x64\xe8\x3c\x84\x6b\x9f\x30\xa1\xe1\xf0\x8b\x58\x15\x8f\x14\x1f\x8e\xdc\x86\xf4\xd1\x4f\xb2\x52\x97\x31\x12\x20\x12\x50\xcb\x84\x53\xac\xa0\x0f\xd5\xea\x0c\xcc\xb5\x96\xb9\x5d\x5c\x9f\x5e\xf1\xdc\xe2\xca\xd2\xb9\xa7\x0d\x19\x34\xc0\x92\x7e\x81\xd7\x91\xe2\xca\x3c\x58\x50\xa1\x41\x19\xd0\x4a\x3b\x1e\xfe\x67\xe1\xc2\xad\x94\xa9\x73\x80\xcf\xec\xc1\x00\xef\xf3\xec\x40\xb8\xb0\x43\x34\x52\x12\x8f\xec\x21\x3a\xe2\x22\x76\xd3\xb9\x76\x70\xf1\xde\xdd\x64\xe4\x49\x76\x2c\xbd\x99\xd7\x16\xd9\x4a\x46\x91\x53\xec\x10\x53\xa6\x13\x06\x8d\x02\xb0\x76\xde\x0d\x76\x67\x14\xd7\x32\x67\xd0\xd3\xef\x2e\x25\xbd\x9d\x59\x5c\x0f\x96\x58\xf3\x4d\x89\x50\xd3\xc4\x90\x2c\x63\x23\x75\x8e\x14\x57\xa5\x9e\x81\x03\x41\x9b\x33\xe1\x47\xd0\xd7\xe2\xaa\x56\x90\xb1\x51\xa4\x37\x08\xa5\x8b\xd8\x59\x89\xec\x3d\x86\xd9\xf4\x42\x67\xb0\xab\x03\xaa\xb6\x82\x59\x87\x35\x49\x3d\xc5\x8e\xa0\xa5\x73\x6b\x13\x9b\xc0\x88\x76\x9c\x9d\xe9\xb5\xc5\xed\xfd\x9d\x7e\x39\x27\xeb\x5c\x28\x29\xac\x85\x1b\x27\x19\x9c\x41\xee\x70\x81\x95\x5b\x24\x73\xb6\x98\x54\xb0\x12\xc4\x1a\xfe\x43\xd9\x42\x8d\xea\x0c\x2c\x0e\x55\xa7\x98\xa1\x6d\xcb\x7c\x85\x3d\xb2\x09\xd9\x48\x29\xd6\xa5\x5c\xc4\x6c\xa4\xf5\x39\xb8\x02\x71\x69\x36\xe9\x24\xb3\x1c\xda\x0b\x0c\x01\x23\x84\x12\x27\x8d\x68\x35\xeb\x00\x3d\xc0\x0a\xd4\xdc\x32\xa2\xf1\xf0\x2b\xcc\x86\x90\x18\x70\x78\x05\x45\x1a\xe7\x54\xca\xc3\x05\x56\x23\xc3\xe6\x02\x65\x62\x3a\xb6\xa6\x6f\x98\x1d\xca\x16\x66\x98\x2d\x2b\x02\x69\xf6\xe6\x12\x7d\x5b\xb6\xe4\x59\xe6\x1c\x13\xbc\x96\xc8\xe1\x42\x97\x79\x91\x91\x90\xe1\xce\x95\xc9\x22\xcb\x3c\xc9\x6c\x3a\x32\x46\x08\x15\xcf\x5a\xe6\x49\x2f\x02\x1d\x4b\x2b\x83\x52\x5c\xc9\x47\xd9\x64\xf6\x9f\x38\xaf\xb5\xb5\x16\xb3\x23\xcf\xa4\x68\x86\x73\x9c\x07\xec\x79\xf6\x85\x96\x54\xf5\x98\xda\x84\x51\x4b\x05\x7e\x17\xf6\x67\xcd\x82\xca\xcb\x20\x06\x65\xd3\x4e\x93\x86\x6d\x68\xd6\x5e\xd6\xa6\xf6\xee\x3a\xaa\x3e\x5a\x88\x0b\x3d\xe3\x60\x81\x86\xc8\x38\x42\x87\x1d\x2b\x6f\x2b\xa7\x47\xbb\x02\xb3\x26\x4f\x81\x31\xe3\x58\x32\x2e\x9c\xd2\xb2\x24\xcb\x18\xe2\x24\xc1\x27\x38\x9d\xd1\xc6\x6c\x0e\x84\x44\x2c\x32\x86\xd6\x35\x59\x4f\x70\x5a\x3b\x58\x6f\xe8\x63\x32\x43\xce\x26\xc3\x36\x62\xbe\x36\xaf\x0c\x96\x41\x21\x88\x5a\x86\xc6\xfb\x4c\x7c\xd6\x2c\x9c\x3a\x43\x15\x43\x70\xf0\x20\x28\xf5\xb2\x7c\xaa\x58\xb5\x4f\x0b\xc5\x94\xd4\x7a\xda\x73\x78\x27\x35\x6c\x66\x69\x81\x4b\x7f\x3e\xca\xa9\x85\x65\x19\xcc\x66\x30\xbd\x64\xff\x98\x53\x3b\x23\x9f\xea\x34\xa5\x52\x58\x5a\x8f\x6a\xe7\x58\xfb\xd7\xd9\xd7\x8e\x65\x09\xc0\x80\x00\x29\x56\x96\xbd\xec\xa1\x66\xae\x1a\x63\xef\xd9\x18\x0b\x92\x81\x6f\x68\x16\x4e\x36\x32\x86\xd8\xac\x1e\x89\x83\x2f\xf3\x17\x6a\x38\xa5\x55\xe8\xd2\x5a\xed\x71\xfa\xd0\x84\xab\x53\xcc\xa4\x5e\x85\xfb\xf0\x63\x3b\xf5\xf5\xd0\x84\xc8\x55\x9a\x69\x72\x23\x91\x0d\x6f\xb8\xd7\xeb\x73\x2d\x7d\x50\x7a\x4a\xb5\x36\xc1\xa7\xc3\x39\xe6\xe2\x75\x76\x7d\xfb\x9d\xcf\xd1\x26\x94\x19\x11\x9c\x6f\x4e\xb5\x7e\x68\x16\x4e\x62\xc6\x69\xe6\xdc\x07\x25\x0f\xdd\xd0\xac\x75\xaf\x36\x49\xd3\x36\x43\xfb\xc8\x72\x19\xa7\xce\x10\x3c\x95\xb2\x33\x4e\x97\x63\x96\xfc\xcd\x01\x89\x79\x83\x56\xe4\x71\xcb\x51\x6b\x9e\xf4\xf0\xcd\x92\xdc\xbd\x75\x6c\x50\xe6\xd8\xd8\x2b\x3f\xec\xcf\xe6\x24\xd4\x8a\x8e\x69\xd4\x5b\xd5\x37\x85\x77\x83\xd3\xeb\xec\x0b\xa7\xec\xd3\x98\xc3\x25\xd5\xd8\xeb\x1b\x03\xfe\xaa\x59\xed\x5f\x91\x02\x55\xc4\xb8\x14\x83\xee\x1b\x9a\xd5\xaf\x47\xd3\x51\x03\x5b\x10\xc1\xcc\xdc\xd0\x2c\x7e\x31\x01\xca\xc8\xf9\xd8\xd6\x47\x49\xd4\x0d\x4d\x2c\xb9\x4e\x66\x66\xd5\xcc\x26\xb9\x47\xd9\xd0\xe4\xb2\x87\x97\x31\xbd\x16\x6e\x50\xcc\x5b\xb9\xac\x77\x2a\x74\x9f\x1d\x2b\x57\xea\x4d\xcf\x38\x64\x53\xa9\xa2\x6e\x34\xa7\x99\xfb\xe9\xbd\x04\xa3\x54\x2a\xe4\x69\x98\x3c\x71\xa3\x26\xff\x78\xc3\x33\x7a\x67\x03\x79\xdc\xb1\xc9\x10\x51\x84\x7e\x8e\xc7\x79\x9d\x7d\xf9\x86\x4a\x37\x54\x27\xa8\xa0\xec\x43\xe9\x78\xcc\xd7\xde\x49\x34\x66\xa8\xd6\xec\x46\x3d\xc1\x36\x34\xcb\x37\x24\x05\xc7\xe3\x2e\x65\x8a\x17\xe8\xfd\xb2\xb3\x16\xed\x40\x2a\x29\x40\xc0\x8d\xe1\xd8\xd1\xc9\xca\xc9\x5d\xb8\x9b\x74\xa8\x54\xb8\xe6\x49\x2f\x5a\xd1\x9a\xe5\x80\xc6\xcc\x5c\xd6\x1a\xbe\x70\x3a\xd7\x8b\x3a\x68\x74\x6d\x6e\xc3\xb1\xf4\x72\x4e\xef\x7c\x9d\x7d\xcd\x75\x65\x56\xac\xb5\x0b\x71\x8c\x5a\xdf\xc5\xfc\x88\xaf\x54\x56\x2f\xe1\x33\x39\x5a\xb7\xbc\x2c\xe6\xcc\xb3\xd4\x9e\xa6\x00\x9d\xc7\x38\x7d\x16\x09\xc3\x07\x97\x3e\x27\x92\x61\x1e\x15\xac\x07\xd0\x06\xd5\x4d\x55\xc5\x2d\x45\xfc\xe3\x98\x9f\x91\x1b\xf8\xb8\x4f\x4a\x26\x56\xc9\x4a\xeb\xa6\xf1\x44\xcc\xdf\xf8\xca\xa4\x09\x86\x36\x47\x32\xd3\x5b\xbf\xf2\xaa\x59\x72\xc3\x94\xac\x4e\x69\xda\x51\xb4\xd2\xfb\x5a\x79\xc4\x57\x26\x8a\x4a\xad\x68\x03\x9b\xd6\xb6\xc1\x76\x3d\x67\x86\x49\xb5\x13\x49\xa3\x69\x54\xa5\x1d\x61\xfb\xf4\xf7\x8f\x4f\x8f\xff\xfd\xfb\xe9\x7f\x01\x00\x00\xff\xff\xe2\x95\x51\xef\xa9\x1b\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 7081, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf3, 0xf6, 0x67, 0x97, 0x5f, 0x5a, 0x37, 0x86, 0xdb, 0x51, 0x4a, 0x3f, 0xf5, 0x5a, 0x9d, 0x49, 0x4d, 0x40, 0xdc, 0x6a, 0x21, 0x17, 0xdd, 0xce, 0xd9, 0xca, 0x2f, 0x3c, 0x40, 0xc7, 0x54, 0x36}}
	return a, nil
}

var _oldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xdd\xea\xa3\x30\x10\xc5\xef\xfb\x14\xe2\xf5\x5f\x98\x7c\x27\x7d\x95\x65\x29\x71\x32\x29\x81\x7e\xd1\x68\x97\x52\xfa\xee\x8b\x0a\xd6\xb0\xb2\xdd\x2e\x7f\xef\xe6\xe4\x9c\x99\xf8\x73\x7c\x6c\xaa\xaa\xaa\xea\x2b\xed\xd3\xf9\x94\xeb\x6d\x35\x09\xa3\x98\xe9\x94\x53\x97\x6e\x54\x6f\xab\xe8\x0f\x99\xbe\x5e\x67\xdd\xfd\x32\xc8\xf5\x21\xe5\xae\x5e\xe8\x37\x7f\xe8\x87\x83\x1f\xb3\x34\x3c\x8f\xa2\x1a\x8d\xfe\x98\x76\x29\x0c\x2d\xfc\x31\x35\x4e\x2b\xd2\x6d\x14\x8b\x56\xb3\x73\xba\xdb\xe0\xec\x73\x43\x3e\x77\x0d\x5f\xb3\x65\xc2\xfe\x9a\xba\xfb\x6e\x7f\x3d\xf7\x97\xc1\x9e\xf7\x0d\x68\x2f\xd1\x82\xd3\x52\x92\xe0\x8e\xc3\x6a\xb2\x6f\x4f\xd4\x95\x2f\x5f\x18\xe6\xb9\xed\xd8\x76\xb4\x37\xd2\x31\x03\x42\xb0\x95\x8e\x65\x08\x97\x21\x8d\x26\x72\xc0\xfa\x8f\xcc\xb3\x50\x9e\x5f\x9f\xf1\x33\xce\x1a\xe1\x60\xed\x32\x25\xbf\x5f\xf4\x19\x3f\xa1\xa4\xf5\x80\x88\xc6\x1a\xd0\xeb\x03\xfe\x85\xdf\x34\xd7\x2f\x50\x40\x8c\x81\x21\xf7\x42\xa2\xe3\x82\xa1\xff\x0b\xc8\x29\xbd\xa4\x0f\xa4\x51\xa0\x93\x32\x68\x89\x01\x7d\xfc\x6e\xa2\x4e\x32\x02\x19\x57\x17\xe6\x45\x94\xfa\x8f\x89\x52\xdb\x72\x16\x34\xb3\x52\x84\x60\x79\xfc\x2f\xa2\xf3\xdc\x82\xa8\xd2\xad\x08\x16\x39\x43\x45\x5e\xb9\xb5\xbf\xa9\x4c\x17\x44\x99\x8d\x1e\x3c\x31\xab\x40\x49\x90\xf6\x6d\x7a\xb9\xd8\xa0\x8d\x65\xc6\x12\x33\x41\xe8\xa8\x94\x7e\xfb\x3d\xe6\xea\xe7\x66\xaa\x9f\x9b\xdf\x01\x00\x00\xff\xff\xfa\xb5\x44\x02\x8d\x04\x00\x00")

func oldJsonBytes() ([]byte, error) {
	return bindataRead(
		_oldJson,
		"old.json",
	)
}

func oldJson() (*asset, error) {
	bytes, err := oldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "old.json", size: 1165, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xdf, 0xa4, 0x96, 0xe4, 0x56, 0xfa, 0x6a, 0x9c, 0x6f, 0x4e, 0xe8, 0x59, 0x2f, 0xa6, 0xce, 0xb8, 0xbd, 0x71, 0x68, 0x9b, 0x55, 0x84, 0xd1, 0x57, 0xf3, 0x4a, 0xf5, 0x17, 0x72, 0x3, 0xba}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,

	"old.json": oldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"old.json":    &bintree{oldJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
