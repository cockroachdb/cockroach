// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/roachprod/failureinjection/failures/failure.go

// Package failures is a generated GoMock package.
package failures

import (
	context "context"
	reflect "reflect"

	logger "github.com/cockroachdb/cockroach/pkg/roachprod/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockFailureArgs is a mock of FailureArgs interface.
type MockFailureArgs struct {
	ctrl     *gomock.Controller
	recorder *MockFailureArgsMockRecorder
}

// MockFailureArgsMockRecorder is the mock recorder for MockFailureArgs.
type MockFailureArgsMockRecorder struct {
	mock *MockFailureArgs
}

// NewMockFailureArgs creates a new mock instance.
func NewMockFailureArgs(ctrl *gomock.Controller) *MockFailureArgs {
	mock := &MockFailureArgs{ctrl: ctrl}
	mock.recorder = &MockFailureArgsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailureArgs) EXPECT() *MockFailureArgsMockRecorder {
	return m.recorder
}

// MockFailureMode is a mock of FailureMode interface.
type MockFailureMode struct {
	ctrl     *gomock.Controller
	recorder *MockFailureModeMockRecorder
}

// MockFailureModeMockRecorder is the mock recorder for MockFailureMode.
type MockFailureModeMockRecorder struct {
	mock *MockFailureMode
}

// NewMockFailureMode creates a new mock instance.
func NewMockFailureMode(ctrl *gomock.Controller) *MockFailureMode {
	mock := &MockFailureMode{ctrl: ctrl}
	mock.recorder = &MockFailureModeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFailureMode) EXPECT() *MockFailureModeMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockFailureMode) Cleanup(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockFailureModeMockRecorder) Cleanup(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockFailureMode)(nil).Cleanup), ctx, l, args)
}

// Description mocks base method.
func (m *MockFailureMode) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockFailureModeMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockFailureMode)(nil).Description))
}

// Inject mocks base method.
func (m *MockFailureMode) Inject(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockFailureModeMockRecorder) Inject(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockFailureMode)(nil).Inject), ctx, l, args)
}

// Recover mocks base method.
func (m *MockFailureMode) Recover(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover.
func (mr *MockFailureModeMockRecorder) Recover(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockFailureMode)(nil).Recover), ctx, l, args)
}

// Setup mocks base method.
func (m *MockFailureMode) Setup(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockFailureModeMockRecorder) Setup(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockFailureMode)(nil).Setup), ctx, l, args)
}

// WaitForFailureToPropagate mocks base method.
func (m *MockFailureMode) WaitForFailureToPropagate(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFailureToPropagate", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForFailureToPropagate indicates an expected call of WaitForFailureToPropagate.
func (mr *MockFailureModeMockRecorder) WaitForFailureToPropagate(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFailureToPropagate", reflect.TypeOf((*MockFailureMode)(nil).WaitForFailureToPropagate), ctx, l, args)
}

// WaitForFailureToRecover mocks base method.
func (m *MockFailureMode) WaitForFailureToRecover(ctx context.Context, l *logger.Logger, args FailureArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForFailureToRecover", ctx, l, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForFailureToRecover indicates an expected call of WaitForFailureToRecover.
func (mr *MockFailureModeMockRecorder) WaitForFailureToRecover(ctx, l, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForFailureToRecover", reflect.TypeOf((*MockFailureMode)(nil).WaitForFailureToRecover), ctx, l, args)
}
