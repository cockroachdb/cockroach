// Copyright 2024 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// consumer is responsible for reading the csv files containing the test details generated by testselector

package sfselector

import (
	"bytes"
	"context"
	"encoding/csv"
	"fmt"
	"io"
	"os"

	"cloud.google.com/go/storage"
	"github.com/cockroachdb/cockroach/pkg/cmd/roachtest/registry"
	"google.golang.org/api/option"
)

// ReadTestsToRun reads the tests to run based on certain criteria:
// 1. the number of time a test has been successfully running
// 2. the test is new
// 3. the test has not been run for a while
// 4. a subset of the successful tests
func ReadTestsToRun(
	ctx context.Context, tests []registry.TestSpec, cloud, suite string,
) ([]registry.TestSpec, int) {
	options := []option.ClientOption{option.WithScopes(storage.ScopeReadOnly)}
	cj := os.Getenv("GOOGLE_EPHEMERAL_CREDENTIALS")
	if len(cj) != 0 {
		options = append(options, option.WithCredentialsJSON([]byte(cj)))
	} else {
		fmt.Printf("GOOGLE_EPHEMERAL_CREDENTIALS env is not set.\n")
	}
	client, err := storage.NewClient(ctx, options...)
	if err != nil {
		fmt.Printf("connection to GCS failed: %v", err)
		return tests, len(tests)
	}
	defer func() { _ = client.Close() }()

	object := fmt.Sprintf("%s-%s-%s.%s", testsFileLocation, suite, cloud, testsCsvExtension)
	r, err := client.Bucket(bucket).Object(object).NewReader(ctx)
	if err != nil {
		fmt.Printf("failed to get the object %s in bucket %s : %v\n", object, bucket, err)
		return tests, len(tests)
	}
	defer func() { _ = r.Close() }()
	body, err := io.ReadAll(r)
	if err != nil {
		fmt.Printf("failed to read CSV from GCS: %v", err)
		return tests, len(tests)
	}
	cr := csv.NewReader(bytes.NewReader(body))
	data, err := cr.ReadAll()
	if err != nil {
		fmt.Printf("failed to read CSV data: %v", err)
		return tests, len(tests)
	}
	testNamesToRun := make(map[string]string)
	if len(data) <= 1 {
		// the file has just the header
		return tests, len(tests)
	}
	// csv columns:
	// 0. TEST_NAME
	// 1. SELECTED (yes/no)
	// 2. AVG_DURATION
	// 3. TOTAL_RUNS
	for _, d := range data[1:] {
		testNamesToRun[d[0]] = d[1]
	}
	selectedTestsCount := 0
	for i := range tests {
		if testShouldBeSkipped(testNamesToRun, tests[i]) {
			tests[i].Skip = "stable test"
			tests[i].SkipDetails = "test skipped because it is stable and predictive-tests is set."
		} else {
			selectedTestsCount++
		}
	}
	return tests, selectedTestsCount
}

// testShouldBeSkipped decides whether a test should be skipped based on testNamesToRun
func testShouldBeSkipped(testNamesToRun map[string]string, test registry.TestSpec) bool {
	toRun, ok := testNamesToRun[test.Name]
	return ok && test.Skip == "" && toRun == "no"
}
