// Code generated by typegen; DO NOT EDIT.
// Generated from: cluster_settings.go

package install

import "github.com/cockroachdb/cockroach/pkg/roachprod/roachprodutil/codec"

func init() {
	codec.Register(new(BinaryOption))
	codec.Register(new(ClusterSettingsOption))
	codec.Register(new(ComplexSecureOption))
	codec.Register(new(DebugDirOption))
	codec.Register(new(EnvOption))
	codec.Register(new(NumRacksOption))
	codec.Register(new(PGUrlCertsDirOption))
	codec.Register(new(SimpleSecureOption))
	codec.Register(new(TagOption))
	codec.Register(new(UseTreeDistOption))
}

func (t BinaryOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t ClusterSettingsOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t ComplexSecureOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t DebugDirOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t EnvOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t NumRacksOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t PGUrlCertsDirOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t SimpleSecureOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t TagOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}

func (t UseTreeDistOption) GetTypeName() codec.TypeName {
	return codec.ResolveTypeName(t)
}
