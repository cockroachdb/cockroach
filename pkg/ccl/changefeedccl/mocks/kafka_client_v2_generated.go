// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/ccl/changefeedccl (interfaces: KafkaClientV2)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kgo "github.com/twmb/franz-go/pkg/kgo"
)

// MockKafkaClientV2 is a mock of KafkaClientV2 interface.
type MockKafkaClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaClientV2MockRecorder
}

// MockKafkaClientV2MockRecorder is the mock recorder for MockKafkaClientV2.
type MockKafkaClientV2MockRecorder struct {
	mock *MockKafkaClientV2
}

// NewMockKafkaClientV2 creates a new mock instance.
func NewMockKafkaClientV2(ctrl *gomock.Controller) *MockKafkaClientV2 {
	mock := &MockKafkaClientV2{ctrl: ctrl}
	mock.recorder = &MockKafkaClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaClientV2) EXPECT() *MockKafkaClientV2MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaClientV2) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKafkaClientV2MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaClientV2)(nil).Close))
}

// ProduceSync mocks base method.
func (m *MockKafkaClientV2) ProduceSync(arg0 context.Context, arg1 ...*kgo.Record) kgo.ProduceResults {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceSync", varargs...)
	ret0, _ := ret[0].(kgo.ProduceResults)
	return ret0
}

// ProduceSync indicates an expected call of ProduceSync.
func (mr *MockKafkaClientV2MockRecorder) ProduceSync(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceSync", reflect.TypeOf((*MockKafkaClientV2)(nil).ProduceSync), varargs...)
}
