// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/ccl/changefeedccl (interfaces: KafkaAdminClientV2)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kadm "github.com/twmb/franz-go/pkg/kadm"
)

// MockKafkaAdminClientV2 is a mock of KafkaAdminClientV2 interface.
type MockKafkaAdminClientV2 struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaAdminClientV2MockRecorder
}

// MockKafkaAdminClientV2MockRecorder is the mock recorder for MockKafkaAdminClientV2.
type MockKafkaAdminClientV2MockRecorder struct {
	mock *MockKafkaAdminClientV2
}

// NewMockKafkaAdminClientV2 creates a new mock instance.
func NewMockKafkaAdminClientV2(ctrl *gomock.Controller) *MockKafkaAdminClientV2 {
	mock := &MockKafkaAdminClientV2{ctrl: ctrl}
	mock.recorder = &MockKafkaAdminClientV2MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaAdminClientV2) EXPECT() *MockKafkaAdminClientV2MockRecorder {
	return m.recorder
}

// ListTopics mocks base method.
func (m *MockKafkaAdminClientV2) ListTopics(arg0 context.Context, arg1 ...string) (kadm.TopicDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTopics", varargs...)
	ret0, _ := ret[0].(kadm.TopicDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics.
func (mr *MockKafkaAdminClientV2MockRecorder) ListTopics(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockKafkaAdminClientV2)(nil).ListTopics), varargs...)
}
