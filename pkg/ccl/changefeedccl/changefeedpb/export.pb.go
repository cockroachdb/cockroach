// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/changefeedccl/changefeedpb/export.proto

package changefeedpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ScheduledExportExecutionArgs is the arguments to the scheduled backup executor.
type ScheduledExportExecutionArgs struct {
	ExportStatement string `protobuf:"bytes,1,opt,name=export_statement,json=exportStatement,proto3" json:"export_statement,omitempty"`
}

func (m *ScheduledExportExecutionArgs) Reset()         { *m = ScheduledExportExecutionArgs{} }
func (m *ScheduledExportExecutionArgs) String() string { return proto.CompactTextString(m) }
func (*ScheduledExportExecutionArgs) ProtoMessage()    {}
func (*ScheduledExportExecutionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fd5f18c85bfe8ab, []int{0}
}
func (m *ScheduledExportExecutionArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledExportExecutionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScheduledExportExecutionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledExportExecutionArgs.Merge(m, src)
}
func (m *ScheduledExportExecutionArgs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledExportExecutionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledExportExecutionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledExportExecutionArgs proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ScheduledExportExecutionArgs)(nil), "cockroach.ccl.changefeedccl.ScheduledExportExecutionArgs")
}

func init() {
	proto.RegisterFile("ccl/changefeedccl/changefeedpb/export.proto", fileDescriptor_1fd5f18c85bfe8ab)
}

var fileDescriptor_1fd5f18c85bfe8ab = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x4e, 0xce, 0xd1,
	0x4f, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0x4d, 0x4b, 0x4d, 0x4d, 0x41, 0xe5, 0x15, 0x24, 0xe9, 0xa7,
	0x56, 0x14, 0xe4, 0x17, 0x95, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x49, 0x27, 0xe7, 0x27,
	0x67, 0x17, 0xe5, 0x27, 0x26, 0x67, 0xe8, 0x25, 0x27, 0xe7, 0xe8, 0xa1, 0x68, 0x53, 0xf2, 0xe4,
	0x92, 0x09, 0x4e, 0xce, 0x48, 0x4d, 0x29, 0xcd, 0x49, 0x4d, 0x71, 0x05, 0xeb, 0x72, 0xad, 0x48,
	0x4d, 0x2e, 0x2d, 0xc9, 0xcc, 0xcf, 0x73, 0x2c, 0x4a, 0x2f, 0x16, 0xd2, 0xe4, 0x12, 0x80, 0x18,
	0x16, 0x5f, 0x5c, 0x92, 0x58, 0x92, 0x9a, 0x9b, 0x9a, 0x57, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0xc4, 0x0f, 0x11, 0x0f, 0x86, 0x09, 0x3b, 0xe9, 0x9d, 0x78, 0x28, 0xc7, 0x70, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x37, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1,
	0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xf1, 0x20, 0x3b, 0x32,
	0x89, 0x0d, 0xec, 0x3c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x09, 0x0d, 0x4b, 0xcd,
	0x00, 0x00, 0x00,
}

func (m *ScheduledExportExecutionArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledExportExecutionArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledExportExecutionArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExportStatement) > 0 {
		i -= len(m.ExportStatement)
		copy(dAtA[i:], m.ExportStatement)
		i = encodeVarintExport(dAtA, i, uint64(len(m.ExportStatement)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExport(dAtA []byte, offset int, v uint64) int {
	offset -= sovExport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScheduledExportExecutionArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExportStatement)
	if l > 0 {
		n += 1 + l + sovExport(uint64(l))
	}
	return n
}

func sovExport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExport(x uint64) (n int) {
	return sovExport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScheduledExportExecutionArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledExportExecutionArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledExportExecutionArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportStatement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExportStatement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExport = fmt.Errorf("proto: unexpected end of group")
)
