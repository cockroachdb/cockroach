// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

package main

var test_restore_memory_monitoring_template = `// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by pkg/ccl/backupccl/testgen, DO NOT EDIT.

package backupccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

{{- $tests := .Tests -}}
{{- range $tests }}

func TestRestoreMemoryMonitoring_splits_{{.NumSplits}}_inc_{{.NumInc}}_procMaxFiles_{{.RestoreProcessorMaxFiles}}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	skip.UnderRace(t, "the largest tests are too slow to run under race")
	skip.UnderStress(t, "the largest tests are too slow to run under stress")

	runTestRestoreMemoryMonitoring(t, {{.NumSplits}}, {{.NumInc}}, {{.RestoreProcessorMaxFiles}})
}
{{- end }}
`

var test_data_driven_template = `// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by pkg/ccl/backupccl/testgen, DO NOT EDIT.

package backupccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

{{- $tests := .TestCases -}}
{{- range $tests }}

func TestDataDriven_{{.TestName}}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	skip.UnderRace(t, "takes ~3mins to run")

	runTestDataDriven(t, "{{.TestFilePath}}")
}
{{- end }}
`

var test_restore_entry_cover_template = `// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by pkg/ccl/backupccl/testgen, DO NOT EDIT.

package backupccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
)

{{- $tests := .Tests -}}
{{- range $tests }}

func TestRestoreEntryCover_numBackups_{{.NumBackups}}_simple_{{.SimpleImportSpans}}(t *testing.T) {
	defer leaktest.AfterTest(t)()

	runTestRestoreEntryCover(t, {{.NumBackups}}, {{.SimpleImportSpans}})
}
{{- end }}
`

var test_restore_mid_schema_change_template = `// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by pkg/ccl/backupccl/testgen, DO NOT EDIT.

package backupccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

{{- $tests := .Tests -}}
{{- range $tests }}

func TestRestoreMidSchemaChange_schemaOnly_{{.SchemaOnly}}_clusterRestore_{{.ClusterRestore}}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	skip.UnderRaceWithIssue(t, 56584)

	runTestRestoreMidSchemaChange(t, {{.SchemaOnly}}, {{.ClusterRestore}})
}
{{- end }}
`
