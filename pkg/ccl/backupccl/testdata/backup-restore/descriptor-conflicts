new-server name=s1
----

exec-sql
CREATE DATABASE foo;
CREATE SCHEMA foo.bar;
CREATE TYPE foo.bar.baz AS ENUM('a', 'b', 'c');
CREATE TABLE foo.bar.bat (pk int primary key, b foo.bar.baz);
INSERT INTO foo.bar.bat VALUES (1, 'a'),(2, 'b'),(3, 'c');
ALTER TABLE foo.bar.bat CONFIGURE ZONE USING gc.ttlseconds=999;
COMMENT ON TABLE foo.bar.bat IS 'should survive';
CREATE ROLE hamburger;
ALTER ROLE hamburger IN DATABASE foo SET application_name='helper';
----

exec-sql
BACKUP INTO 'nodelocal://0/conflicting-descriptors';
----

new-server name=s2 share-io-dir=s1
----

# Create 4 dummy system tables that will conflict
# with the database, schema, table, and type created
# in s1.

create-dummy-system-table
----

create-dummy-system-table
----

create-dummy-system-table
----

create-dummy-system-table
----

exec-sql
RESTORE FROM LATEST IN 'nodelocal://0/conflicting-descriptors';
----

query-sql
SELECT * FROM foo.bar.bat;
----
1 a
2 b
3 c

query-sql
SELECT count(1) FROM [SHOW TABLES FROM system] WHERE table_name LIKE 'dummy_test_table_%';
----
4

query-sql
SHOW ZONE CONFIGURATION FROM TABLE foo.bar.bat;
----
TABLE foo.bar.bat ALTER TABLE foo.bar.bat CONFIGURE ZONE USING
	range_min_bytes = 134217728,
	range_max_bytes = 536870912,
	gc.ttlseconds = 999,
	num_replicas = 3,
	constraints = '[]',
	lease_preferences = '[]'

query-sql
SELECT comment FROM [SHOW TABLES FROM foo WITH COMMENT] WHERE table_name = 'bat';
----
should survive

query-sql
select role_name, settings FROM system.database_role_settings AS drs JOIN system.namespace AS ns ON ns.id = drs.database_id WHERE ns.name = 'foo';
----
hamburger {application_name=helper}

