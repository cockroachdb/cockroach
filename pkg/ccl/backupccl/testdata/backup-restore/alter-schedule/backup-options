new-server name=s1 allow-implicit-access
----

# Create test schedules.

exec-sql
create schedule datatest for backup into 'nodelocal://1/example-schedule' recurring '@daily' full backup '@weekly';
----

let $fullID $incID
with schedules as (show schedules) select id from schedules where label='datatest' order by command->>'backup_type' asc;
----

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH detached"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH detached"

# Can't use the same command twice.

exec-sql expect-error-ignore
alter backup schedule $fullID set recurring '0 0 1 * *', set recurring '@weekly';
----
ignoring expected error

exec-sql expect-error-ignore
alter backup schedule $fullID set full backup '0 0 1 * *', set recurring '0 0 1 * *', set full backup '@weekly';
----
ignoring expected error

# Set an option

exec-sql
alter backup schedule $incID set with revision_history = false;
----

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH revision_history = false, detached"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH revision_history = false, detached"

# Change an option and set another.

exec-sql
alter backup schedule $incID set with revision_history = true, set with encryption_passphrase = 'abc';
----

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH revision_history = true, encryption_passphrase = '*****', detached"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH revision_history = true, encryption_passphrase = '*****', detached"

# Add a list-option

exec-sql
alter backup schedule $incID set with kms = ('aws:///key1?region=r1', 'aws:///key2?region=r2'), set with incremental_location = 'inc';
----

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH revision_history = true, encryption_passphrase = '*****', detached, kms = ('aws:///redacted?region=r1', 'aws:///redacted?region=r2'), incremental_location = 'inc'"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH revision_history = true, encryption_passphrase = '*****', detached, kms = ('aws:///redacted?region=r1', 'aws:///redacted?region=r2'), incremental_location = 'inc'"

# Set options to empty (unset).

exec-sql
alter backup schedule $incID set with kms = '', set with incremental_location = (''), set with encryption_passphrase = '';
----

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH revision_history = true, detached"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH revision_history = true, detached"

# Setting DETACHED throws an error.

exec-sql expect-error-ignore
alter backup schedule $incID set with detached = true;
----
ignoring expected error

exec-sql expect-error-ignore
alter backup schedule $incID set with detached = false;
----
ignoring expected error

query-sql
with schedules as (show schedules) select id, command->'backup_statement' from schedules where label='datatest' order by command->>'backup_type' asc;
----
$fullID "BACKUP INTO 'nodelocal://1/example-schedule' WITH revision_history = true, detached"
$incID "BACKUP INTO LATEST IN 'nodelocal://1/example-schedule' WITH revision_history = true, detached"
