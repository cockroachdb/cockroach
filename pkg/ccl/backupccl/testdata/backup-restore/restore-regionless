# disabled to run within tenant because multiregion primitives are not supported within tenant
subtest mrbackup
new-cluster name=s1 allow-implicit-access disable-tenant localities=us-east-1,us-west-1,eu-central-1
----

exec-sql
CREATE DATABASE d PRIMARY REGION "us-east-1" REGIONS "us-west-1", "eu-central-1";
CREATE TABLE d.t (x INT);
INSERT INTO d.t VALUES (1), (2), (3);
----

query-sql
SELECT region FROM [SHOW REGIONS FROM DATABASE d] ORDER BY 1;
----
eu-central-1
us-east-1
us-west-1

# backup a MR database and table
exec-sql
BACKUP DATABASE d INTO 'nodelocal://1/database_backup/';
----

exec-sql
BACKUP TABLE d.t INTO 'nodelocal://1/table_backup/';
----

subtest end

# create regionless cluster
subtest restore_regionless_on_regionless
new-cluster name=s2 share-io-dir=s1 allow-implicit-access disable-tenant
----

exec-sql
RESTORE DATABASE d FROM LATEST IN 'nodelocal://1/database_backup/' WITH strip_localities;
----

# check to see if restored database, d, shows up
query-sql
SHOW DATABASES;
----
d root <nil> <nil> {} <nil>
defaultdb root <nil> <nil> {} <nil>
postgres root <nil> <nil> {} <nil>
system node <nil> <nil> {} <nil>

# ensure that database d is regionless
query-sql
SELECT region FROM [SHOW REGIONS FROM DATABASE d] ORDER BY 1;
----

# show tables - make sure these are regionless as well
query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (4), (5);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5

# backup up the restored, regionless db and table
exec-sql
BACKUP DATABASE d INTO 'nodelocal://1/regionless_database_backup/';
----

exec-sql
BACKUP TABLE d.t INTO 'nodelocal://1/regionless_table_backup/';
----

exec-sql
DROP TABLE d.t;
----

# ensure that restoring just the table itself works
exec-sql
RESTORE TABLE d.t FROM LATEST IN 'nodelocal://1/table_backup/' WITH strip_localities;
----

query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (4), (5);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5

exec-sql
DROP DATABASE d;
----

# restore the stripped database
exec-sql
RESTORE DATABASE d FROM LATEST IN 'nodelocal://1/regionless_database_backup/';
----

# check to see if restored database, d, shows up
query-sql
SHOW DATABASES;
----
d root <nil> <nil> {} <nil>
defaultdb root <nil> <nil> {} <nil>
postgres root <nil> <nil> {} <nil>
system node <nil> <nil> {} <nil>

# ensure that database d is regionless
query-sql
SELECT region FROM [SHOW REGIONS FROM DATABASE d] ORDER BY 1;
----

# show tables - make sure these are regionless as well
query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (6), (7);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5
6
7

exec-sql
DROP TABLE d.t;
----

# ensure that restoring just the table itself works
exec-sql
RESTORE TABLE d.t FROM LATEST IN 'nodelocal://1/regionless_table_backup/';
----

query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (6), (7);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5
6
7

subtest end

# create a non-MR cluster with a region
subtest restore_regionless_on_single_region
new-cluster name=s3 share-io-dir=s1 allow-implicit-access localities=us-east-1
----

exec-sql
RESTORE DATABASE d FROM LATEST IN 'nodelocal://1/database_backup/' WITH strip_localities;
----

# check to see if restored database, d, shows up
query-sql
SHOW DATABASES;
----
d root <nil> <nil> {} <nil>
defaultdb root <nil> <nil> {} <nil>
postgres root <nil> <nil> {} <nil>
system node <nil> <nil> {} <nil>

# ensure that database d is regionless
query-sql
SELECT region FROM [SHOW REGIONS FROM DATABASE d] ORDER BY 1;
----

# show tables - make sure these are regionless as well
query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (4), (5);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5

exec-sql
DROP TABLE d.t;
----

# ensure that restoring just the table itself works
exec-sql
RESTORE TABLE d.t FROM LATEST IN 'nodelocal://1/table_backup/' WITH strip_localities;
----

query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (4), (5);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5

subtest end

# now we ensure that we can restore regionless db & table to a multi-region cluster
subtest restore_regionless_on_mr
new-cluster name=s4 share-io-dir=s1 allow-implicit-access disable-tenant localities=us-east-1,us-west-1,eu-central-1
----

exec-sql
RESTORE DATABASE d FROM LATEST IN 'nodelocal://1/regionless_database_backup/';
----

query-sql
SHOW DATABASES;
----
d root <nil> <nil> {} <nil>
defaultdb root <nil> <nil> {} <nil>
postgres root <nil> <nil> {} <nil>
system node <nil> <nil> {} <nil>

# ensure that database d is regionless
query-sql
SELECT region FROM [SHOW REGIONS FROM DATABASE d] ORDER BY 1;
----

# show tables - make sure these are regionless as well
query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (6), (7);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5
6
7

exec-sql
DROP TABLE d.t;
----

# ensure that restoring just the table itself works
exec-sql
RESTORE TABLE d.t FROM LATEST IN 'nodelocal://1/regionless_table_backup/';
----

query-sql
SHOW TABLES FROM d;
----
public t table root <nil> <nil>

# ensure that tables belonging to d can be modified & have the correct values
exec-sql
INSERT INTO d.t VALUES (6), (7);
----

query-sql
SELECT * FROM d.t;
----
1
2
3
4
5
6
7

subtest end
