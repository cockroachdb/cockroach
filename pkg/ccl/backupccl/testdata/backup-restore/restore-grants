# Ensure that non-cluster restores appropriately wipes the grants on the
# restored descriptors. Since we're not restoring the users, the users that
# the restoring descriptors reference may not be the same users as they
# referenced in the backed up cluster.

# We allow implicit access to non-admin users so that we can test
# with nodelocal.
new-server name=s1 allow-implicit-access
----

# First, let's create some users, a database, a couple of types, some tables,
# and a schema.
exec-sql
CREATE USER user1;
CREATE USER testuser;
ALTER USER testuser CREATEDB;
CREATE DATABASE testdb; USE testdb;
CREATE TYPE testdb.greeting_usage AS ENUM ('howdy');
CREATE TABLE testdb.testtable_simple (a int);
CREATE TABLE testdb.testtable_greeting_usage (a greeting_usage);
CREATE SCHEMA sc;
CREATE TABLE testdb.sc.othertable (a INT);
----

# Give some grants to user1.
# User1 has access to testdb.sc.othertable.
exec-sql
GRANT ALL ON DATABASE testdb TO user1 WITH GRANT OPTION;
GRANT ALL ON SCHEMA public TO user1 WITH GRANT OPTION;
GRANT ALL ON SCHEMA public TO testuser WITH GRANT OPTION;
GRANT USAGE ON SCHEMA sc TO user1;
GRANT SELECT ON testdb.sc.othertable TO user1;
----

# Grant privs to testuser.
# Test user has access to testdb.testtable_greeting_usage and testtable_greeting_owner.
exec-sql
GRANT ALL ON DATABASE testdb TO testuser WITH GRANT OPTION;
GRANT USAGE ON TYPE testdb.greeting_usage TO testuser;
GRANT UPDATE ON testdb.testtable_greeting_usage TO testuser;
----

exec-sql user=testuser
CREATE TYPE testdb.greeting_owner AS ENUM ('howdy');
CREATE TABLE testdb.testtable_greeting_owner (a testdb.greeting_owner);
----

# Nobody has access to testtable_simple.

# Check that the expected grants were given to user1.
query-sql
SHOW GRANTS ON DATABASE testdb FOR user1;
----
testdb user1 ALL true

query-sql
SHOW GRANTS ON SCHEMA public FOR user1;
----
testdb public user1 ALL true

query-sql
SHOW GRANTS ON SCHEMA sc FOR user1;
----
testdb sc user1 USAGE false

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR user1;
----
testdb sc othertable user1 SELECT false

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR user1;
----

# Check that the expected grants were given to testuser.
query-sql
SHOW GRANTS ON DATABASE testdb FOR testuser;
----
testdb testuser ALL true

query-sql
SHOW GRANTS ON SCHEMA public FOR testuser;
----
testdb public testuser ALL true

query-sql
SHOW GRANTS ON SCHEMA sc FOR testuser;
----

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR testuser;
----
testdb public testtable_greeting_usage testuser UPDATE false

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR testuser;
----
testdb public testtable_greeting_owner testuser ALL true

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR testuser;
----

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR testuser;
----

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR admin;
----
testdb public testtable_simple admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR admin;
----
testdb public testtable_greeting_owner admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR admin;
----
testdb public testtable_greeting_usage admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR admin;
----
testdb sc othertable admin ALL true


exec-sql
BACKUP INTO 'nodelocal://0/test/'
----

# Ensure that testuser is indeed the owner of the type, but dropping it.
# TODO: Replace this with SHOW GRANTS ON TYPE when supported.
exec-sql user=testuser
DROP TABLE testdb.testtable_greeting_owner;
DROP TYPE testdb.greeting_owner;
----


# Let's restore a table as a non-admin and ensure that we're still the owner.
exec-sql
CREATE DATABASE testuser_db;
GRANT CREATE ON DATABASE testuser_db TO testuser;
----

exec-sql user=testuser
RESTORE testdb.sc.othertable, testdb.testtable_greeting_usage FROM LATEST IN 'nodelocal://1/test' WITH into_db='testuser_db';
----

# Check that user1 doesn't have any privs, but testuser should be the owner.
query-sql
SHOW GRANTS ON DATABASE testuser_db;
----
testuser_db admin ALL true
testuser_db public CONNECT false
testuser_db root ALL true
testuser_db testuser CREATE false

query-sql
SHOW GRANTS ON SCHEMA public;
----
testdb public admin ALL true
testdb public public CREATE false
testdb public public USAGE false
testdb public root ALL true
testdb public testuser ALL true
testdb public user1 ALL true

query-sql
SHOW GRANTS ON SCHEMA sc;
----
testdb sc admin ALL true
testdb sc root ALL true
testdb sc user1 USAGE false

query-sql
SHOW GRANTS ON testuser_db.sc.othertable
----
testuser_db sc othertable admin ALL true
testuser_db sc othertable root ALL true
testuser_db sc othertable testuser ALL false

query-sql
SHOW GRANTS ON testuser_db.testtable_greeting_usage
----
testuser_db public testtable_greeting_usage admin ALL true
testuser_db public testtable_greeting_usage root ALL true
testuser_db public testtable_greeting_usage testuser ALL false

# testuser should be owner, and therefore have SELECT privs too.
exec-sql user=testuser
SELECT * FROM testuser_db.testtable_greeting_usage;
----

exec-sql user=testuser
SELECT * FROM testuser_db.sc.othertable;
----

# Let's restore tables as admin and ensure that the table's privs are the same
# as the db it restores into.
exec-sql
CREATE DATABASE restoredb
----

exec-sql
GRANT CREATE ON DATABASE restoredb TO user1;
----

exec-sql
RESTORE testdb.sc.othertable, testdb.testtable_greeting_usage, testdb.testtable_greeting_owner FROM LATEST IN 'nodelocal://1/test' WITH into_db='restoredb';
----

query-sql
SHOW GRANTS ON restoredb.sc.othertable FOR user1;
----
restoredb sc othertable user1 CREATE false

query-sql
SHOW GRANTS ON restoredb.sc.othertable FOR testuser;
----

query-sql
SHOW GRANTS ON restoredb.sc.othertable FOR admin;
----
restoredb sc othertable admin ALL true

query-sql
SHOW GRANTS ON restoredb.testtable_greeting_usage FOR user1;
----
restoredb public testtable_greeting_usage user1 CREATE false

# testuser should not be the owner in this case, so won't have SELECT privs.
query-sql user=testuser
SELECT * FROM restoredb.testtable_greeting_usage
----
pq: user testuser does not have SELECT privilege on relation testtable_greeting_usage


query-sql
SHOW GRANTS ON restoredb.testtable_greeting_usage FOR testuser;
----

query-sql
SHOW GRANTS ON restoredb.testtable_greeting_usage FOR admin;
----
restoredb public testtable_greeting_usage admin ALL true

# Testuser is no longer the owner of restoredb.greeting_owner.
exec-sql user=testuser
ALTER TYPE restoredb.greeting_owner ADD VALUE 'new' BEFORE 'howdy';
----
pq: must be owner of type greeting_owner

exec-sql
ALTER TYPE restoredb.greeting_owner ADD VALUE 'new' BEFORE 'howdy';
----



# Now let's try a database restore.
exec-sql
USE defaultdb;
DROP DATABASE testdb CASCADE;
----

exec-sql
RESTORE DATABASE testdb FROM LATEST IN 'nodelocal://0/test/';
----


# Check that user1 and testuser don't have any grants anymore.
query-sql
SHOW GRANTS ON DATABASE testdb FOR user1;
----

query-sql
SHOW GRANTS ON testdb.testtable_simple FOR user1;
----

query-sql
SHOW GRANTS ON testdb.sc.othertable FOR user1;
----

query-sql
SHOW GRANTS ON DATABASE testdb FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.testtable_greeting_usage FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.testtable_greeting_owner FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.sc.othertable FOR testuser;
----

# Check that admin still has all the privs.
query-sql
SHOW GRANTS ON DATABASE testdb FOR admin;
----
testdb admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.public FOR admin;
----
testdb public admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.sc FOR admin;
----
testdb sc admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR admin;
----
testdb public testtable_simple admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR admin;
----
testdb public testtable_greeting_owner admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR admin;
----
testdb public testtable_greeting_usage admin ALL true


query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR admin;
----
testdb sc othertable admin ALL true


# First drop the existing database as admin.
exec-sql
USE defaultdb;
DROP DATABASE testdb CASCADE;
----


# Now, let's restore a single database as a non-admin (testuser).
exec-sql user=testuser
RESTORE DATABASE testdb FROM LATEST IN 'nodelocal://0/test/';
----

# Check that user1 doesn't have any privs.
query-sql
SHOW GRANTS ON DATABASE testdb FOR user1;
----


query-sql
SHOW GRANTS ON testdb.testtable_simple FOR user1;
----


query-sql
SHOW GRANTS ON testdb.sc.othertable FOR user1;
----

# Note, that even though testuser is the owner, SHOW GRANTS doesn't show
# implicit privileges.
# TODO: Update this once SHOW GRANTS shows implicit privs.
query-sql
SHOW GRANTS ON DATABASE testdb FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.testtable_greeting_usage FOR testuser;
----


query-sql
SHOW GRANTS ON testdb.testtable_greeting_owner FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.testtable_greeting_usage FOR testuser;
----

query-sql
SHOW GRANTS ON testdb.sc.othertable FOR testuser;
----

# Admin should still have all privs.
query-sql
SHOW GRANTS ON DATABASE testdb FOR admin;
----
testdb admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.public FOR admin;
----
testdb public admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.sc FOR admin;
----
testdb sc admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR admin;
----
testdb public testtable_simple admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR admin;
----
testdb public testtable_greeting_usage admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR admin;
----
testdb public testtable_greeting_owner admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR admin;
----
testdb sc othertable admin ALL true


# Now let's try a cluster restore and expect all of the same privileges tha
# we originally had.
new-server name=s2 share-io-dir=s1 allow-implicit-access
----

exec-sql
RESTORE FROM LATEST IN 'nodelocal://0/test/';
----

# Check user1.
query-sql
SHOW GRANTS ON DATABASE testdb FOR user1;
----
testdb user1 ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.public FOR user1;
----
testdb public user1 ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.sc FOR user1;
----
testdb sc user1 USAGE false

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR user1;
----
testdb sc othertable user1 SELECT false

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR user1;
----

# Check testuser.
query-sql
SHOW GRANTS ON DATABASE testdb FOR testuser;
----
testdb testuser ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.public FOR testuser;
----
testdb public testuser ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.sc FOR testuser;
----

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR testuser;
----
testdb public testtable_greeting_usage testuser UPDATE false

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR testuser;
----
testdb public testtable_greeting_owner testuser ALL true

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR testuser;
----

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR testuser;
----

# testuser should be the owner of greeting_owner.
exec-sql user=testuser
ALTER TYPE testdb.greeting_owner ADD VALUE 'new' BEFORE 'howdy';
----

# Check admin.
query-sql
SHOW GRANTS ON DATABASE testdb FOR admin;
----
testdb admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.public FOR admin;
----
testdb public admin ALL true

query-sql
SHOW GRANTS ON SCHEMA testdb.sc FOR admin;
----
testdb sc admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_simple FOR admin;
----
testdb public testtable_simple admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_owner FOR admin;
----
testdb public testtable_greeting_owner admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.testtable_greeting_usage FOR admin;
----
testdb public testtable_greeting_usage admin ALL true

query-sql
SHOW GRANTS ON TABLE testdb.sc.othertable FOR admin;
----
testdb sc othertable admin ALL true
