# This test ensures that database and cluster backups properly
# backup and restore an in progress RESTORE
#
new-server name=s1
----

exec-sql
CREATE DATABASE b;
USE b;
CREATE TABLE baz (i INT PRIMARY KEY, s STRING);
INSERT INTO baz VALUES (1, 'x'),(2,'y'),(3,'z');
CREATE DATABASE d;
USE d;
----


# Ensure Database, and cluster full backups capture restoring rows.
exec-sql
BACKUP INTO 'nodelocal://0/cluster/' WITH revision_history;
----


exec-sql
SET CLUSTER SETTING jobs.debug.pausepoints = restore.before_publishing_descriptors;
----


# Pause the restore job, in order to back up the restoring data.
restore expect-pausepoint tag=a
RESTORE DATABASE b FROM LATEST IN 'nodelocal://0/cluster/' with new_db_name=b2;
----
job paused at pausepoint



# Ensure incremental backups capture the offline restoring database
exec-sql
BACKUP INTO LATEST IN 'nodelocal://0/cluster/' WITH revision_history;
----


exec-sql
SET CLUSTER SETTING jobs.debug.pausepoints = '';
----


save-cluster-ts tag=t0
----


exec-sql
SET CLUSTER SETTING jobs.debug.pausepoints = '';
----


# Resume the job so the next set of incremental backups observes that the database is back online
job resume=a
----


job tag=a wait-for-state=succeeded
----


# NOTE: currently the backup below re-capture the _1_ version of each restored key:
#  1. when the restore job resumes, the data is re-ingested, hence a second version of the restored
#     data gets ingested into the backing up cluster, and consequently, the incremental backup.
#
# TODO (msbutler): add test coverage for a case when incremental backup only captures when the
# descriptor goes back online.

# This set of incremental backups captures the online restored database
exec-sql
BACKUP INTO LATEST IN 'nodelocal://0/cluster/' WITH revision_history;
----


query-sql
SELECT
  database_name, object_name, object_type, rows, backup_type
FROM
  [SHOW BACKUP FROM LATEST IN 'nodelocal://0/cluster/']
WHERE
  object_name = 'baz';
----
b baz table 3 full
b baz table 0 incremental
b2 baz table 3 incremental
b baz table 0 incremental
b2 baz table 3 incremental


# Ensure the restored cluster contains nothing from the in-progress restoring database as of system
# time t0
new-server name=s2 share-io-dir=s1 allow-implicit-access
----


restore aost=t0
RESTORE FROM LATEST IN 'nodelocal://0/cluster/' AS OF SYSTEM TIME t0;
----


query-sql
SELECT database_name FROM [SHOW DATABASES] WHERE database_name = 'b2';
----


# Ensure restored cluster contains the restored database as of latest time
new-server name=s3 share-io-dir=s1 allow-implicit-access
----


exec-sql
RESTORE FROM LATEST IN 'nodelocal://0/cluster/';
----


query-sql
SELECT database_name FROM [SHOW DATABASES] WHERE database_name = 'b2';
----
b2


query-sql
SELECT * FROM b2.baz;
----
1 x
2 y
3 z
