# backup-dropped-desctiprors tests backup and restore interaction with database, schema
# and type descriptors in the DROP state.
subtest dropped-database-descriptors

new-server name=s1
----

exec-sql
SET use_declarative_schema_changer = 'on';
----

exec-sql
SET CLUSTER SETTING jobs.debug.pausepoints = 'newschemachanger.before.exec';
----

exec-sql
CREATE DATABASE dd;
CREATE TABLE dd.foo (id INT);
CREATE SCHEMA dd.s;
----

new-schema-change expect-pausepoint
DROP DATABASE dd CASCADE;
----
job paused at pausepoint

# At this point, we have a descriptor entry for `dd` in an OFFLINE state.
query-sql
WITH tbls AS (
	SELECT id, crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor) AS orig FROM system.descriptor
)
SELECT orig->'database'->'name', orig->'database'->'state' FROM tbls WHERE id = 107;
----
"dd" "OFFLINE"

# A database backup should fail since we are explicitly targeting an offline
# object.
exec-sql
BACKUP DATABASE dd INTO 'nodelocal://0/dropped-database';
----
pq: failed to resolve targets specified in the BACKUP stmt: database "dd" does not exist

# A cluster backup should succeed.
exec-sql
BACKUP INTO 'nodelocal://0/cluster/dropped-database';
----

# The offline descriptors should end up in the cluster backup.
query-sql
SELECT count(*)
  FROM [SHOW BACKUP LATEST IN 'nodelocal://0/cluster/dropped-database']
  WHERE object_name IN ('dd', 'foo', 's');
----
3

subtest end

# Test backup/restore interaction with dropped schema and type in a database.
subtest dropped-schema-descriptors

new-server name=s2
----

exec-sql
CREATE DATABASE d2;
----

exec-sql
CREATE TABLE d2.t2 (id INT);
----

exec-sql
CREATE TYPE d2.typ AS ENUM ('hello');
CREATE SCHEMA d2.s;
CREATE TABLE d2.s.t (id INT);
----

exec-sql
SET use_declarative_schema_changer = 'on';
----

exec-sql
SET CLUSTER SETTING jobs.debug.pausepoints = 'newschemachanger.before.exec';
----

new-schema-change expect-pausepoint
DROP SCHEMA d2.s CASCADE;
----
job paused at pausepoint

new-schema-change expect-pausepoint
DROP TYPE d2.typ;
----
job paused at pausepoint

query-sql
WITH tbls AS (
	SELECT id, crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor) AS orig FROM system.descriptor
)
SELECT orig->'schema'->'name', orig->'schema'->'state' FROM tbls WHERE id = 112;
----
"s" "OFFLINE"

query-sql
WITH tbls AS (
	SELECT id, crdb_internal.pb_to_json('cockroach.sql.sqlbase.Descriptor', descriptor) AS orig FROM system.descriptor
)
SELECT orig->'type'->'name', orig->'type'->'state' FROM tbls WHERE id = 110 OR id = 111;
----
"typ" "OFFLINE"
"_typ" "OFFLINE"

# A database backup should succeed and should include the offline schema,
# type, and table.
exec-sql
BACKUP DATABASE d2 INTO 'nodelocal://0/dropped-schema-in-database';
----

query-sql
SELECT count(*)
  FROM [SHOW BACKUP LATEST IN 'nodelocal://0/dropped-schema-in-database']
  WHERE object_name IN ('s', 't', 'typ', '_typ');
----
4

# A cluster backup should succeed but should include the offline schema,
# type, and table.
exec-sql
BACKUP INTO 'nodelocal://0/cluster/dropped-schema-in-database';
----

query-sql
SELECT count(*)
  FROM [SHOW BACKUP LATEST IN 'nodelocal://0/cluster/dropped-schema-in-database']
  WHERE object_name IN ('s', 't', 'typ', '_typ');
----
4

# Restore the backups to check they are valid.
exec-sql
RESTORE DATABASE d2 FROM LATEST IN 'nodelocal://0/dropped-schema-in-database' WITH new_db_name = 'd3';
----

exec-sql
USE d3;
----

# We expect to see the offline schema 's'.
query-sql
SELECT schema_name FROM [SHOW SCHEMAS];
----
public
s
crdb_internal
information_schema
pg_catalog
pg_extension


query-sql
SELECT schema_name, table_name FROM [SHOW TABLES];
----
public t2
s t

exec-sql
RESTORE DATABASE d2 FROM LATEST IN 'nodelocal://0/cluster/dropped-schema-in-database' WITH new_db_name ='d4';
----

exec-sql
USE d4;
----

query-sql
SELECT schema_name FROM [SHOW SCHEMAS];
----
public
s
crdb_internal
information_schema
pg_catalog
pg_extension

query-sql
SELECT schema_name, table_name FROM [SHOW TABLES];
----
public t2
s t

subtest end
