// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/backupccl/backup.proto

package backupccl

import (
	fmt "fmt"
	build "github.com/cockroachdb/cockroach/pkg/build"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	github_com_cockroachdb_cockroach_pkg_sql_sem_tree "github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	stats "github.com/cockroachdb/cockroach/pkg/sql/stats"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MVCCFilter int32

const (
	MVCCFilter_Latest MVCCFilter = 0
	MVCCFilter_All    MVCCFilter = 1
)

var MVCCFilter_name = map[int32]string{
	0: "Latest",
	1: "All",
}

var MVCCFilter_value = map[string]int32{
	"Latest": 0,
	"All":    1,
}

func (x MVCCFilter) String() string {
	return proto.EnumName(MVCCFilter_name, int32(x))
}

func (MVCCFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{0}
}

type ScheduledBackupExecutionArgs_BackupType int32

const (
	ScheduledBackupExecutionArgs_FULL        ScheduledBackupExecutionArgs_BackupType = 0
	ScheduledBackupExecutionArgs_INCREMENTAL ScheduledBackupExecutionArgs_BackupType = 1
)

var ScheduledBackupExecutionArgs_BackupType_name = map[int32]string{
	0: "FULL",
	1: "INCREMENTAL",
}

var ScheduledBackupExecutionArgs_BackupType_value = map[string]int32{
	"FULL":        0,
	"INCREMENTAL": 1,
}

func (x ScheduledBackupExecutionArgs_BackupType) String() string {
	return proto.EnumName(ScheduledBackupExecutionArgs_BackupType_name, int32(x))
}

func (ScheduledBackupExecutionArgs_BackupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{4, 0}
}

// RowCount tracks the size and row/index entry counts.
type RowCount struct {
	DataSize     int64 `protobuf:"varint,1,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	Rows         int64 `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	IndexEntries int64 `protobuf:"varint,3,opt,name=index_entries,json=indexEntries,proto3" json:"index_entries,omitempty"`
}

func (m *RowCount) Reset()         { *m = RowCount{} }
func (m *RowCount) String() string { return proto.CompactTextString(m) }
func (*RowCount) ProtoMessage()    {}
func (*RowCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{0}
}
func (m *RowCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RowCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RowCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowCount.Merge(m, src)
}
func (m *RowCount) XXX_Size() int {
	return m.Size()
}
func (m *RowCount) XXX_DiscardUnknown() {
	xxx_messageInfo_RowCount.DiscardUnknown(m)
}

var xxx_messageInfo_RowCount proto.InternalMessageInfo

// BackupManifest represents a consistent snapshot of ranges.
//
// Each range snapshot includes a path to data that is a diff of the data in
// that key range between a start and end timestamp. The end timestamp of all
// ranges in a backup is the same, but the start may vary (to allow individual
// tables to be backed up on different schedules).
type BackupManifest struct {
	StartTime  hlc.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime    hlc.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	MVCCFilter MVCCFilter    `protobuf:"varint,13,opt,name=mvcc_filter,json=mvccFilter,proto3,enum=cockroach.ccl.backupccl.MVCCFilter" json:"mvcc_filter,omitempty"`
	// Even if StartTime is zero, we only get revisions since gc threshold, so
	// do not allow AS OF SYSTEM TIME before revision_start_time.
	RevisionStartTime hlc.Timestamp `protobuf:"bytes,17,opt,name=revision_start_time,json=revisionStartTime,proto3" json:"revision_start_time"`
	// Spans contains the spans requested for backup. The keyranges covered by
	// `files` may be a subset of this if there were ranges with no changes since
	// the last backup. For all tables in the backup descriptor, these spans must
	// completely cover each table's span. For example, if a table with ID 51 were
	// being backed up, then the span `/Table/5{1-2}` must be completely covered.
	Spans []roachpb.Span `protobuf:"bytes,3,rep,name=spans,proto3" json:"spans"`
	// IntroducedSpans are a subset of spans, set only when creating incremental
	// backups that cover spans not included in a previous backup. Spans contained
	// here are covered in the interval (0, startTime], which, in conjunction with
	// the coverage from (startTime, endTime] implied for all spans in Spans,
	// results in coverage from [0, endTime] for these spans.
	IntroducedSpans   []roachpb.Span                      `protobuf:"bytes,15,rep,name=introduced_spans,json=introducedSpans,proto3" json:"introduced_spans"`
	DescriptorChanges []BackupManifest_DescriptorRevision `protobuf:"bytes,16,rep,name=descriptor_changes,json=descriptorChanges,proto3" json:"descriptor_changes"`
	Files             []BackupManifest_File               `protobuf:"bytes,4,rep,name=files,proto3" json:"files"`
	Descriptors       []descpb.Descriptor                 `protobuf:"bytes,5,rep,name=descriptors,proto3" json:"descriptors"`
	Tenants           []descpb.TenantInfo                 `protobuf:"bytes,24,rep,name=tenants,proto3" json:"tenants"`
	// databases in descriptors that have all tables also in descriptors.
	CompleteDbs   []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,14,rep,packed,name=complete_dbs,json=completeDbs,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"complete_dbs,omitempty"`
	EntryCounts   RowCount                                                     `protobuf:"bytes,12,opt,name=entry_counts,json=entryCounts,proto3" json:"entry_counts"`
	Dir           roachpb.ExternalStorage                                      `protobuf:"bytes,7,opt,name=dir,proto3" json:"dir"`
	FormatVersion uint32                                                       `protobuf:"varint,8,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	ClusterID     github_com_cockroachdb_cockroach_pkg_util_uuid.UUID          `protobuf:"bytes,9,opt,name=cluster_id,json=clusterId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"cluster_id"`
	// node_id and build_info of the gateway node (which writes the descriptor).
	NodeID                       github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,10,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	BuildInfo                    build.Info                                          `protobuf:"bytes,11,opt,name=build_info,json=buildInfo,proto3" json:"build_info"`
	ClusterVersion               roachpb.Version                                     `protobuf:"bytes,25,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version"`
	ID                           github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,18,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"id"`
	PartitionDescriptorFilenames []string                                            `protobuf:"bytes,19,rep,name=partition_descriptor_filenames,json=partitionDescriptorFilenames,proto3" json:"partition_descriptor_filenames,omitempty"`
	LocalityKVs                  []string                                            `protobuf:"bytes,20,rep,name=locality_kvs,json=localityKvs,proto3" json:"locality_kvs,omitempty"`
	// This field is used by backups in 19.2 and 20.1 where a backup manifest stores all the table
	// statistics in the field, the later versions all write the statistics to a separate file
	// indicated in the table_statistic_files field.
	DeprecatedStatistics []*stats.TableStatisticProto                                          `protobuf:"bytes,21,rep,name=deprecated_statistics,json=deprecatedStatistics,proto3" json:"deprecated_statistics,omitempty"`
	StatisticsFilenames  map[github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID]string `protobuf:"bytes,23,rep,name=statistics_filenames,json=statisticsFilenames,proto3,castkey=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"statistics_filenames,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DescriptorCoverage   github_com_cockroachdb_cockroach_pkg_sql_sem_tree.DescriptorCoverage  `protobuf:"varint,22,opt,name=descriptor_coverage,json=descriptorCoverage,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/sem/tree.DescriptorCoverage" json:"descriptor_coverage,omitempty"`
}

func (m *BackupManifest) Reset()         { *m = BackupManifest{} }
func (m *BackupManifest) String() string { return proto.CompactTextString(m) }
func (*BackupManifest) ProtoMessage()    {}
func (*BackupManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{1}
}
func (m *BackupManifest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupManifest.Merge(m, src)
}
func (m *BackupManifest) XXX_Size() int {
	return m.Size()
}
func (m *BackupManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupManifest.DiscardUnknown(m)
}

var xxx_messageInfo_BackupManifest proto.InternalMessageInfo

// BackupManifest_File represents a file that contains the diff for a key
// range between two timestamps.
type BackupManifest_File struct {
	Span        roachpb.Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
	Path        string       `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	EntryCounts RowCount     `protobuf:"bytes,6,opt,name=entry_counts,json=entryCounts,proto3" json:"entry_counts"`
	// StartTime 0 is sometimes legitimately used, so it is only meaningful if
	// EndTime is non-zero, otherwise both just inherit from containing backup.
	StartTime  hlc.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime    hlc.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	LocalityKV string        `protobuf:"bytes,9,opt,name=locality_kv,json=localityKv,proto3" json:"locality_kv,omitempty"`
}

func (m *BackupManifest_File) Reset()         { *m = BackupManifest_File{} }
func (m *BackupManifest_File) String() string { return proto.CompactTextString(m) }
func (*BackupManifest_File) ProtoMessage()    {}
func (*BackupManifest_File) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{1, 0}
}
func (m *BackupManifest_File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupManifest_File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupManifest_File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupManifest_File.Merge(m, src)
}
func (m *BackupManifest_File) XXX_Size() int {
	return m.Size()
}
func (m *BackupManifest_File) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupManifest_File.DiscardUnknown(m)
}

var xxx_messageInfo_BackupManifest_File proto.InternalMessageInfo

type BackupManifest_DescriptorRevision struct {
	Time hlc.Timestamp                                              `protobuf:"bytes,1,opt,name=time,proto3" json:"time"`
	ID   github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,2,opt,name=ID,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"ID,omitempty"`
	Desc *descpb.Descriptor                                         `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *BackupManifest_DescriptorRevision) Reset()         { *m = BackupManifest_DescriptorRevision{} }
func (m *BackupManifest_DescriptorRevision) String() string { return proto.CompactTextString(m) }
func (*BackupManifest_DescriptorRevision) ProtoMessage()    {}
func (*BackupManifest_DescriptorRevision) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{1, 1}
}
func (m *BackupManifest_DescriptorRevision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupManifest_DescriptorRevision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupManifest_DescriptorRevision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupManifest_DescriptorRevision.Merge(m, src)
}
func (m *BackupManifest_DescriptorRevision) XXX_Size() int {
	return m.Size()
}
func (m *BackupManifest_DescriptorRevision) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupManifest_DescriptorRevision.DiscardUnknown(m)
}

var xxx_messageInfo_BackupManifest_DescriptorRevision proto.InternalMessageInfo

type BackupManifest_Progress struct {
	Files          []BackupManifest_File `protobuf:"bytes,1,rep,name=files,proto3" json:"files"`
	RevStartTime   hlc.Timestamp         `protobuf:"bytes,2,opt,name=rev_start_time,json=revStartTime,proto3" json:"rev_start_time"`
	CompletedSpans int32                 `protobuf:"varint,3,opt,name=completed_spans,json=completedSpans,proto3" json:"completed_spans,omitempty"`
}

func (m *BackupManifest_Progress) Reset()         { *m = BackupManifest_Progress{} }
func (m *BackupManifest_Progress) String() string { return proto.CompactTextString(m) }
func (*BackupManifest_Progress) ProtoMessage()    {}
func (*BackupManifest_Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{1, 2}
}
func (m *BackupManifest_Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupManifest_Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupManifest_Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupManifest_Progress.Merge(m, src)
}
func (m *BackupManifest_Progress) XXX_Size() int {
	return m.Size()
}
func (m *BackupManifest_Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupManifest_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_BackupManifest_Progress proto.InternalMessageInfo

type BackupPartitionDescriptor struct {
	LocalityKV string                                              `protobuf:"bytes,1,opt,name=locality_kv,json=localityKv,proto3" json:"locality_kv,omitempty"`
	Files      []BackupManifest_File                               `protobuf:"bytes,2,rep,name=files,proto3" json:"files"`
	BackupID   github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,3,opt,name=backup_id,json=backupId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"backup_id"`
}

func (m *BackupPartitionDescriptor) Reset()         { *m = BackupPartitionDescriptor{} }
func (m *BackupPartitionDescriptor) String() string { return proto.CompactTextString(m) }
func (*BackupPartitionDescriptor) ProtoMessage()    {}
func (*BackupPartitionDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{2}
}
func (m *BackupPartitionDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupPartitionDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupPartitionDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupPartitionDescriptor.Merge(m, src)
}
func (m *BackupPartitionDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *BackupPartitionDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupPartitionDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_BackupPartitionDescriptor proto.InternalMessageInfo

// In 20.2 and later, the Statistics object is stored separately from the backup manifest.
// StatsTables is a struct containing an array of sql.stats.TableStatisticProto object so
// that it can be easily marshaled into or unmarshaled from a file.
type StatsTable struct {
	Statistics []*stats.TableStatisticProto `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *StatsTable) Reset()         { *m = StatsTable{} }
func (m *StatsTable) String() string { return proto.CompactTextString(m) }
func (*StatsTable) ProtoMessage()    {}
func (*StatsTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{3}
}
func (m *StatsTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StatsTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsTable.Merge(m, src)
}
func (m *StatsTable) XXX_Size() int {
	return m.Size()
}
func (m *StatsTable) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsTable.DiscardUnknown(m)
}

var xxx_messageInfo_StatsTable proto.InternalMessageInfo

// ScheduledBackupExecutionArgs is the arguments to the scheduled backup executor.
type ScheduledBackupExecutionArgs struct {
	BackupType              ScheduledBackupExecutionArgs_BackupType `protobuf:"varint,1,opt,name=backup_type,json=backupType,proto3,enum=cockroach.ccl.backupccl.ScheduledBackupExecutionArgs_BackupType" json:"backup_type,omitempty"`
	BackupStatement         string                                  `protobuf:"bytes,2,opt,name=backup_statement,json=backupStatement,proto3" json:"backup_statement,omitempty"`
	UnpauseOnSuccess        int64                                   `protobuf:"varint,3,opt,name=unpause_on_success,json=unpauseOnSuccess,proto3" json:"unpause_on_success,omitempty"`
	UpdatesLastBackupMetric bool                                    `protobuf:"varint,4,opt,name=updates_last_backup_metric,json=updatesLastBackupMetric,proto3" json:"updates_last_backup_metric,omitempty"`
}

func (m *ScheduledBackupExecutionArgs) Reset()         { *m = ScheduledBackupExecutionArgs{} }
func (m *ScheduledBackupExecutionArgs) String() string { return proto.CompactTextString(m) }
func (*ScheduledBackupExecutionArgs) ProtoMessage()    {}
func (*ScheduledBackupExecutionArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{4}
}
func (m *ScheduledBackupExecutionArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduledBackupExecutionArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ScheduledBackupExecutionArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduledBackupExecutionArgs.Merge(m, src)
}
func (m *ScheduledBackupExecutionArgs) XXX_Size() int {
	return m.Size()
}
func (m *ScheduledBackupExecutionArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduledBackupExecutionArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduledBackupExecutionArgs proto.InternalMessageInfo

// RestoreProgress is the information that the RestoreData processor sends back
// to the restore coordinator to update the job progress.
type RestoreProgress struct {
	Summary     RowCount     `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary"`
	ProgressIdx int64        `protobuf:"varint,2,opt,name=progressIdx,proto3" json:"progressIdx,omitempty"`
	DataSpan    roachpb.Span `protobuf:"bytes,3,opt,name=dataSpan,proto3" json:"dataSpan"`
}

func (m *RestoreProgress) Reset()         { *m = RestoreProgress{} }
func (m *RestoreProgress) String() string { return proto.CompactTextString(m) }
func (*RestoreProgress) ProtoMessage()    {}
func (*RestoreProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{5}
}
func (m *RestoreProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestoreProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RestoreProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreProgress.Merge(m, src)
}
func (m *RestoreProgress) XXX_Size() int {
	return m.Size()
}
func (m *RestoreProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreProgress.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreProgress proto.InternalMessageInfo

type BackupProcessorPlanningTraceEvent struct {
	NodeToNumSpans map[int32]int64 `protobuf:"bytes,1,rep,name=node_to_num_spans,json=nodeToNumSpans,proto3" json:"node_to_num_spans" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNumSpans  int64           `protobuf:"varint,2,opt,name=total_num_spans,json=totalNumSpans,proto3" json:"total_num_spans,omitempty"`
}

func (m *BackupProcessorPlanningTraceEvent) Reset()         { *m = BackupProcessorPlanningTraceEvent{} }
func (m *BackupProcessorPlanningTraceEvent) String() string { return proto.CompactTextString(m) }
func (*BackupProcessorPlanningTraceEvent) ProtoMessage()    {}
func (*BackupProcessorPlanningTraceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{6}
}
func (m *BackupProcessorPlanningTraceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupProcessorPlanningTraceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupProcessorPlanningTraceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupProcessorPlanningTraceEvent.Merge(m, src)
}
func (m *BackupProcessorPlanningTraceEvent) XXX_Size() int {
	return m.Size()
}
func (m *BackupProcessorPlanningTraceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupProcessorPlanningTraceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BackupProcessorPlanningTraceEvent proto.InternalMessageInfo

type BackupProgressTraceEvent struct {
	TotalNumFiles     int64         `protobuf:"varint,1,opt,name=total_num_files,json=totalNumFiles,proto3" json:"total_num_files,omitempty"`
	TotalEntryCounts  RowCount      `protobuf:"bytes,2,opt,name=total_entry_counts,json=totalEntryCounts,proto3" json:"total_entry_counts"`
	RevisionStartTime hlc.Timestamp `protobuf:"bytes,3,opt,name=revision_start_time,json=revisionStartTime,proto3" json:"revision_start_time"`
}

func (m *BackupProgressTraceEvent) Reset()         { *m = BackupProgressTraceEvent{} }
func (m *BackupProgressTraceEvent) String() string { return proto.CompactTextString(m) }
func (*BackupProgressTraceEvent) ProtoMessage()    {}
func (*BackupProgressTraceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{7}
}
func (m *BackupProgressTraceEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupProgressTraceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupProgressTraceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupProgressTraceEvent.Merge(m, src)
}
func (m *BackupProgressTraceEvent) XXX_Size() int {
	return m.Size()
}
func (m *BackupProgressTraceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupProgressTraceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BackupProgressTraceEvent proto.InternalMessageInfo

// BackupExportTraceRequestEvent is the trace event recorded when an
// ExportRequest has been sent.
type BackupExportTraceRequestEvent struct {
	Span        string `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
	Attempt     int32  `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	Priority    string `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ReqSentTime string `protobuf:"bytes,4,opt,name=req_sent_time,json=reqSentTime,proto3" json:"req_sent_time,omitempty"`
}

func (m *BackupExportTraceRequestEvent) Reset()         { *m = BackupExportTraceRequestEvent{} }
func (m *BackupExportTraceRequestEvent) String() string { return proto.CompactTextString(m) }
func (*BackupExportTraceRequestEvent) ProtoMessage()    {}
func (*BackupExportTraceRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{8}
}
func (m *BackupExportTraceRequestEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupExportTraceRequestEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupExportTraceRequestEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupExportTraceRequestEvent.Merge(m, src)
}
func (m *BackupExportTraceRequestEvent) XXX_Size() int {
	return m.Size()
}
func (m *BackupExportTraceRequestEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupExportTraceRequestEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BackupExportTraceRequestEvent proto.InternalMessageInfo

// BackupExportTraceResponseEvent is the trace event recorded when we receive a
// response from the ExportRequest.
type BackupExportTraceResponseEvent struct {
	Duration        string     `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	NumFiles        int32      `protobuf:"varint,2,opt,name=num_files,json=numFiles,proto3" json:"num_files,omitempty"`
	FileSummaries   []RowCount `protobuf:"bytes,3,rep,name=file_summaries,json=fileSummaries,proto3" json:"file_summaries"`
	HasReturnedSSTs bool       `protobuf:"varint,4,opt,name=has_returned_ssts,json=hasReturnedSsts,proto3" json:"has_returned_ssts,omitempty"`
	RetryableError  string     `protobuf:"bytes,5,opt,name=retryable_error,json=retryableError,proto3" json:"retryable_error,omitempty"`
}

func (m *BackupExportTraceResponseEvent) Reset()         { *m = BackupExportTraceResponseEvent{} }
func (m *BackupExportTraceResponseEvent) String() string { return proto.CompactTextString(m) }
func (*BackupExportTraceResponseEvent) ProtoMessage()    {}
func (*BackupExportTraceResponseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a83e09f0e5986cc, []int{9}
}
func (m *BackupExportTraceResponseEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackupExportTraceResponseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackupExportTraceResponseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackupExportTraceResponseEvent.Merge(m, src)
}
func (m *BackupExportTraceResponseEvent) XXX_Size() int {
	return m.Size()
}
func (m *BackupExportTraceResponseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BackupExportTraceResponseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BackupExportTraceResponseEvent proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.ccl.backupccl.MVCCFilter", MVCCFilter_name, MVCCFilter_value)
	proto.RegisterEnum("cockroach.ccl.backupccl.ScheduledBackupExecutionArgs_BackupType", ScheduledBackupExecutionArgs_BackupType_name, ScheduledBackupExecutionArgs_BackupType_value)
	proto.RegisterType((*RowCount)(nil), "cockroach.ccl.backupccl.RowCount")
	proto.RegisterType((*BackupManifest)(nil), "cockroach.ccl.backupccl.BackupManifest")
	proto.RegisterMapType((map[github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID]string)(nil), "cockroach.ccl.backupccl.BackupManifest.StatisticsFilenamesEntry")
	proto.RegisterType((*BackupManifest_File)(nil), "cockroach.ccl.backupccl.BackupManifest.File")
	proto.RegisterType((*BackupManifest_DescriptorRevision)(nil), "cockroach.ccl.backupccl.BackupManifest.DescriptorRevision")
	proto.RegisterType((*BackupManifest_Progress)(nil), "cockroach.ccl.backupccl.BackupManifest.Progress")
	proto.RegisterType((*BackupPartitionDescriptor)(nil), "cockroach.ccl.backupccl.BackupPartitionDescriptor")
	proto.RegisterType((*StatsTable)(nil), "cockroach.ccl.backupccl.StatsTable")
	proto.RegisterType((*ScheduledBackupExecutionArgs)(nil), "cockroach.ccl.backupccl.ScheduledBackupExecutionArgs")
	proto.RegisterType((*RestoreProgress)(nil), "cockroach.ccl.backupccl.RestoreProgress")
	proto.RegisterType((*BackupProcessorPlanningTraceEvent)(nil), "cockroach.ccl.backupccl.BackupProcessorPlanningTraceEvent")
	proto.RegisterMapType((map[int32]int64)(nil), "cockroach.ccl.backupccl.BackupProcessorPlanningTraceEvent.NodeToNumSpansEntry")
	proto.RegisterType((*BackupProgressTraceEvent)(nil), "cockroach.ccl.backupccl.BackupProgressTraceEvent")
	proto.RegisterType((*BackupExportTraceRequestEvent)(nil), "cockroach.ccl.backupccl.BackupExportTraceRequestEvent")
	proto.RegisterType((*BackupExportTraceResponseEvent)(nil), "cockroach.ccl.backupccl.BackupExportTraceResponseEvent")
}

func init() { proto.RegisterFile("ccl/backupccl/backup.proto", fileDescriptor_0a83e09f0e5986cc) }

var fileDescriptor_0a83e09f0e5986cc = []byte{
	// 1910 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xcf, 0x6f, 0xdb, 0xc8,
	0xf5, 0x37, 0xf5, 0xc3, 0x96, 0x9e, 0x6c, 0x49, 0x1e, 0x3b, 0x09, 0x57, 0xbb, 0x2b, 0x39, 0x0a,
	0xbe, 0xdf, 0x55, 0xdb, 0x85, 0x84, 0x26, 0x28, 0xda, 0xba, 0x40, 0x5a, 0xcb, 0xb2, 0x6b, 0x79,
	0x1d, 0x37, 0xa5, 0x9c, 0x1c, 0x16, 0x28, 0x88, 0x11, 0x39, 0x96, 0x09, 0x53, 0x24, 0x3d, 0x33,
	0xd4, 0x46, 0x7b, 0x29, 0xd0, 0x7b, 0xd1, 0x02, 0x45, 0xff, 0x90, 0xa2, 0xff, 0x40, 0x8f, 0x39,
	0xee, 0xa1, 0x87, 0x45, 0x0f, 0xee, 0x56, 0xb9, 0xf7, 0x0f, 0x08, 0x7a, 0x28, 0x66, 0x38, 0x94,
	0xe8, 0xd8, 0x4e, 0xe4, 0xea, 0x20, 0x60, 0xf8, 0xe6, 0xbd, 0xcf, 0xbc, 0xf7, 0xe6, 0xfd, 0x1a,
	0x41, 0xc5, 0xb2, 0xdc, 0x56, 0x1f, 0x5b, 0xe7, 0x61, 0x30, 0x5b, 0x35, 0x03, 0xea, 0x73, 0x1f,
	0x3d, 0xb0, 0x7c, 0xeb, 0x9c, 0xfa, 0xd8, 0x3a, 0x6b, 0x5a, 0x96, 0xdb, 0x9c, 0x72, 0x55, 0xca,
	0xfd, 0xd0, 0x71, 0xed, 0x96, 0xe3, 0x9d, 0xfa, 0x11, 0x6b, 0x65, 0x5d, 0xb2, 0x05, 0xfd, 0x16,
	0x0e, 0x1c, 0x45, 0x42, 0x31, 0xc9, 0xc6, 0x1c, 0x2b, 0xda, 0xfd, 0x98, 0x36, 0x24, 0x1c, 0x27,
	0xe8, 0x35, 0x76, 0xe1, 0xb6, 0x18, 0xc7, 0x9c, 0xb5, 0x38, 0xee, 0xbb, 0xc4, 0x14, 0x6b, 0x87,
	0x71, 0xc7, 0x52, 0x0c, 0x8f, 0x04, 0x83, 0x85, 0x39, 0x76, 0xfd, 0x41, 0xcb, 0x26, 0xcc, 0x0a,
	0xfa, 0x2d, 0xc6, 0x69, 0x68, 0xf1, 0x90, 0x12, 0x3b, 0x89, 0xf2, 0x0e, 0x13, 0x27, 0x1e, 0xf6,
	0xb8, 0x62, 0xd0, 0x43, 0xee, 0xb8, 0xad, 0x33, 0xd7, 0x6a, 0x71, 0x67, 0x48, 0x18, 0xc7, 0x43,
	0x65, 0x6a, 0x65, 0x73, 0xe0, 0x0f, 0x7c, 0xb9, 0x6c, 0x89, 0x55, 0x44, 0xad, 0x9f, 0x42, 0xce,
	0xf0, 0xbf, 0xda, 0xf5, 0x43, 0x8f, 0xa3, 0x8f, 0x21, 0x2f, 0x14, 0x36, 0x99, 0xf3, 0x35, 0xd1,
	0xb5, 0x2d, 0xad, 0x91, 0x36, 0x72, 0x82, 0xd0, 0x73, 0xbe, 0x26, 0x08, 0x41, 0x86, 0xfa, 0x5f,
	0x31, 0x3d, 0x25, 0xe9, 0x72, 0x8d, 0x1e, 0xc1, 0x9a, 0xe3, 0xd9, 0xe4, 0x95, 0x49, 0x3c, 0x4e,
	0x1d, 0xc2, 0xf4, 0xb4, 0xdc, 0x5c, 0x95, 0xc4, 0xbd, 0x88, 0x76, 0x98, 0xc9, 0x65, 0xca, 0xd9,
	0xfa, 0x9f, 0xef, 0x43, 0xb1, 0x2d, 0xbd, 0xfb, 0x0c, 0x7b, 0xce, 0x29, 0x61, 0x1c, 0xb5, 0x01,
	0x18, 0xc7, 0x94, 0x9b, 0x42, 0x53, 0x79, 0x5e, 0xe1, 0xf1, 0xa7, 0xcd, 0xd9, 0x85, 0x08, 0x4b,
	0x9a, 0x67, 0xae, 0xd5, 0x3c, 0x89, 0x2d, 0x69, 0x67, 0x5e, 0x5f, 0xd6, 0x96, 0x8c, 0xbc, 0x14,
	0x13, 0x54, 0xf4, 0x14, 0x72, 0xc4, 0xb3, 0x23, 0x84, 0xd4, 0xfc, 0x08, 0x2b, 0xc4, 0xb3, 0xa5,
	0xfc, 0x09, 0x14, 0x86, 0x23, 0xcb, 0x32, 0x4f, 0x1d, 0x97, 0x13, 0xaa, 0xaf, 0x6d, 0x69, 0x8d,
	0xe2, 0xe3, 0x47, 0xcd, 0x5b, 0xa2, 0xa2, 0xf9, 0xec, 0xe5, 0xee, 0xee, 0xbe, 0x64, 0x6d, 0x17,
	0x27, 0x97, 0x35, 0x98, 0x7d, 0x1b, 0x20, 0x70, 0xa2, 0x35, 0xea, 0xc1, 0x06, 0x25, 0x23, 0x87,
	0x39, 0xbe, 0x67, 0x26, 0x4c, 0x5c, 0x9f, 0x5f, 0xc1, 0xf5, 0x58, 0xbe, 0x37, 0x35, 0xf5, 0x09,
	0x64, 0x59, 0x80, 0x3d, 0xe1, 0xe4, 0x74, 0xa3, 0xf0, 0xf8, 0x41, 0x02, 0x46, 0x85, 0x5c, 0xb3,
	0x17, 0x60, 0x4f, 0x01, 0x44, 0xbc, 0xe8, 0x00, 0xca, 0x8e, 0xc7, 0xa9, 0x6f, 0x87, 0x16, 0xb1,
	0xcd, 0x48, 0xbe, 0x34, 0x8f, 0x7c, 0x69, 0x26, 0xd6, 0x93, 0x48, 0x3e, 0x20, 0x11, 0x6f, 0xd4,
	0x09, 0xb8, 0x4f, 0x4d, 0xeb, 0x0c, 0x7b, 0x03, 0xc2, 0xf4, 0xb2, 0xc4, 0xda, 0xbe, 0xd5, 0x61,
	0x57, 0xaf, 0xbc, 0xd9, 0x99, 0x22, 0x18, 0xca, 0xbe, 0xd8, 0xde, 0x19, 0xf6, 0x6e, 0x04, 0x8d,
	0x0e, 0x20, 0x7b, 0xea, 0xb8, 0x84, 0xe9, 0x19, 0x79, 0xc6, 0xe7, 0xf3, 0x9e, 0xb1, 0xef, 0xb8,
	0x24, 0x76, 0x82, 0x04, 0x40, 0x5d, 0x28, 0xcc, 0xe0, 0x99, 0x9e, 0x95, 0x78, 0x0f, 0x13, 0x78,
	0xec, 0xc2, 0x15, 0xbf, 0x3e, 0x66, 0x24, 0xa1, 0xa2, 0x02, 0x49, 0xca, 0xa2, 0x1d, 0x58, 0x89,
	0xd2, 0x8d, 0xe9, 0xfa, 0x7b, 0x61, 0x4e, 0x24, 0x57, 0xd7, 0x3b, 0xf5, 0xe3, 0x90, 0x53, 0x72,
	0x08, 0xc3, 0xaa, 0xe5, 0x0f, 0x03, 0x97, 0x70, 0x62, 0xda, 0x7d, 0xa6, 0x17, 0xb7, 0xd2, 0x8d,
	0xb5, 0xf6, 0xd3, 0xb7, 0x97, 0xb5, 0xed, 0x81, 0xc3, 0xcf, 0xc2, 0x7e, 0xd3, 0xf2, 0x87, 0xad,
	0x29, 0xaa, 0xdd, 0x9f, 0xad, 0x5b, 0xc1, 0xf9, 0xa0, 0x75, 0xbd, 0x02, 0x34, 0xbb, 0x1d, 0xa3,
	0x10, 0x63, 0x76, 0xfa, 0x0c, 0x1d, 0xc2, 0xaa, 0xc8, 0xc8, 0xb1, 0x69, 0x89, 0xbc, 0x66, 0xfa,
	0xaa, 0x0c, 0xbc, 0x87, 0xb7, 0x7a, 0x30, 0xae, 0x00, 0xb1, 0xc5, 0x52, 0x58, 0x52, 0x18, 0xda,
	0x86, 0xb4, 0xed, 0x50, 0x7d, 0x45, 0x42, 0xd4, 0x6f, 0x08, 0x9a, 0xbd, 0x57, 0x9c, 0x50, 0x0f,
	0xbb, 0x3d, 0xee, 0x53, 0x3c, 0x88, 0x5d, 0x2f, 0x84, 0xd0, 0xff, 0x41, 0xf1, 0xd4, 0xa7, 0x43,
	0xcc, 0xcd, 0x11, 0xa1, 0xe2, 0xb6, 0xf5, 0xdc, 0x96, 0xd6, 0x58, 0x33, 0xd6, 0x22, 0xea, 0xcb,
	0x88, 0x88, 0x06, 0x00, 0x96, 0x1b, 0x32, 0x4e, 0xa8, 0xe9, 0xd8, 0x7a, 0x7e, 0x4b, 0x6b, 0xac,
	0xb6, 0x0f, 0x04, 0xca, 0x3f, 0x2e, 0x6b, 0x4f, 0xe6, 0xf2, 0x89, 0x2c, 0x7a, 0x61, 0xe8, 0xd8,
	0xcd, 0x17, 0x2f, 0xba, 0x9d, 0xc9, 0x65, 0x2d, 0xbf, 0x1b, 0x01, 0x76, 0x3b, 0x46, 0x5e, 0x61,
	0x77, 0x6d, 0xf4, 0x25, 0xac, 0x78, 0xbe, 0x4d, 0xc4, 0x29, 0xb0, 0xa5, 0x35, 0xb2, 0xed, 0x9d,
	0xc9, 0x65, 0x6d, 0xf9, 0xd8, 0xb7, 0x49, 0xb7, 0xf3, 0x76, 0xde, 0xb3, 0x62, 0xbb, 0x23, 0x31,
	0x63, 0x59, 0x20, 0x76, 0x6d, 0xb4, 0x0d, 0x20, 0x5b, 0x86, 0x29, 0x5a, 0x86, 0x5e, 0x90, 0xee,
	0xba, 0x97, 0x70, 0x97, 0xdc, 0x6c, 0x26, 0x02, 0x22, 0x2f, 0x29, 0x82, 0x80, 0xba, 0x50, 0x8a,
	0x1d, 0x10, 0x3b, 0xea, 0x23, 0x09, 0x50, 0xb9, 0xc1, 0xdf, 0xca, 0x6b, 0x0a, 0xa5, 0xa8, 0x04,
	0x63, 0x5f, 0xfe, 0x1a, 0x52, 0x8e, 0xad, 0x23, 0xe9, 0xc3, 0x9d, 0xc5, 0x7c, 0x98, 0xea, 0x76,
	0x8c, 0x94, 0x63, 0xa3, 0x0e, 0x54, 0x03, 0x4c, 0xb9, 0xc3, 0x45, 0x39, 0x4b, 0xd4, 0x00, 0x91,
	0x5c, 0x1e, 0x1e, 0x12, 0xa6, 0x6f, 0x6c, 0xa5, 0x1b, 0x79, 0xe3, 0x93, 0x29, 0xd7, 0x2c, 0x87,
	0xf6, 0x63, 0x1e, 0xf4, 0x18, 0x56, 0x5d, 0xdf, 0xc2, 0xae, 0xc3, 0xc7, 0xe6, 0xf9, 0x88, 0xe9,
	0x9b, 0x42, 0xa6, 0x5d, 0x9a, 0x5c, 0xd6, 0x0a, 0x47, 0x8a, 0xfe, 0xc5, 0x4b, 0x66, 0x14, 0x62,
	0xa6, 0x2f, 0x46, 0x0c, 0xfd, 0x06, 0xee, 0xd9, 0x24, 0xa0, 0xc4, 0xc2, 0x5c, 0x54, 0xaf, 0xb8,
	0x61, 0x32, 0xfd, 0x9e, 0xcc, 0xbd, 0xc6, 0xbb, 0xb9, 0x27, 0xba, 0x6b, 0xf3, 0x44, 0x74, 0xd7,
	0x5e, 0xcc, 0xfb, 0x5c, 0x74, 0x39, 0x63, 0x73, 0x06, 0x33, 0xdd, 0x61, 0xe8, 0xaf, 0x1a, 0x6c,
	0xce, 0x40, 0x13, 0xf6, 0x3c, 0x90, 0xf0, 0xbf, 0x98, 0xb7, 0xe2, 0xcc, 0x20, 0xa7, 0xe6, 0x8a,
	0xe6, 0x37, 0x6e, 0x3f, 0xfd, 0xdd, 0x3f, 0x17, 0x4a, 0xea, 0x0d, 0x76, 0x1d, 0x19, 0x8d, 0x61,
	0x23, 0x59, 0x88, 0xfd, 0x11, 0x11, 0x69, 0xa7, 0xdf, 0x97, 0x01, 0x7d, 0xf0, 0xf6, 0xb2, 0xd6,
	0x99, 0xfb, 0x44, 0x46, 0x86, 0x2d, 0x4e, 0x49, 0xb2, 0xe8, 0xed, 0x2a, 0x3c, 0x23, 0x51, 0xed,
	0x63, 0x5a, 0xe5, 0xbb, 0x14, 0x64, 0x84, 0x22, 0xe8, 0x87, 0x90, 0x11, 0xbd, 0x44, 0x35, 0xed,
	0x0f, 0xb4, 0x12, 0xc9, 0x2a, 0xe6, 0x87, 0x00, 0xf3, 0x33, 0xd9, 0xa5, 0xf3, 0x86, 0x5c, 0x5f,
	0xab, 0x53, 0xcb, 0x0b, 0xd4, 0xa9, 0xab, 0xd3, 0xc4, 0xca, 0xc2, 0xd3, 0x44, 0xee, 0x7f, 0x98,
	0x26, 0x5a, 0x50, 0x48, 0xc4, 0xb8, 0xac, 0x64, 0xf9, 0x68, 0x50, 0x98, 0x85, 0xb8, 0x01, 0xb3,
	0x08, 0x3f, 0xcc, 0xe4, 0xd2, 0xe5, 0x4c, 0x34, 0x21, 0x1d, 0x66, 0x72, 0xd9, 0xf2, 0x72, 0xe5,
	0xef, 0x1a, 0xa0, 0xeb, 0x5d, 0x12, 0xfd, 0x18, 0x32, 0x77, 0x9d, 0x92, 0xa4, 0x00, 0x3a, 0x86,
	0x54, 0xb7, 0x23, 0x9d, 0xbe, 0x78, 0x8f, 0x49, 0x75, 0x3b, 0xe8, 0x47, 0x90, 0x11, 0x04, 0x39,
	0xe9, 0xcd, 0xd3, 0x44, 0x0d, 0xc9, 0x5e, 0x79, 0xad, 0x41, 0xee, 0x39, 0xf5, 0x07, 0x94, 0xb0,
	0x44, 0x67, 0xd7, 0x16, 0xef, 0xec, 0x45, 0x4a, 0x46, 0xc9, 0x19, 0xeb, 0x0e, 0x43, 0xe0, 0x2a,
	0x25, 0xa3, 0xd9, 0x78, 0xf5, 0x19, 0x94, 0xe2, 0x16, 0x1a, 0x0f, 0x4a, 0xc2, 0xc6, 0xac, 0x51,
	0x9c, 0x92, 0xe5, 0x20, 0x54, 0xd9, 0x07, 0xfd, 0xb6, 0x84, 0x47, 0x65, 0x48, 0x9f, 0x93, 0xb1,
	0xbc, 0xa5, 0x35, 0x43, 0x2c, 0xd1, 0x26, 0x64, 0x47, 0xd8, 0x0d, 0x89, 0x8a, 0xfb, 0xe8, 0x63,
	0x3b, 0xf5, 0x13, 0xed, 0x30, 0x93, 0x5b, 0x2e, 0xaf, 0xd4, 0xff, 0xa3, 0xc1, 0x47, 0x91, 0x99,
	0xcf, 0xaf, 0x57, 0xcf, 0x77, 0x03, 0x4a, 0xfb, 0x50, 0x40, 0xcd, 0x5c, 0x9b, 0x5a, 0xd4, 0xb5,
	0x36, 0xe4, 0x23, 0x6e, 0xd1, 0x2d, 0xd3, 0xb2, 0x9f, 0xfc, 0x72, 0xb1, 0x7e, 0x92, 0x8b, 0xce,
	0xec, 0x76, 0x8c, 0x5c, 0x84, 0xdc, 0xb5, 0xeb, 0x2f, 0x01, 0x84, 0x33, 0x99, 0x2c, 0xda, 0xe8,
	0x40, 0xe6, 0x70, 0x5c, 0xe4, 0xb5, 0x3b, 0x16, 0xf9, 0x84, 0x6c, 0xfd, 0x6f, 0x29, 0xf8, 0xa4,
	0x67, 0x9d, 0x11, 0x3b, 0x74, 0x89, 0x1d, 0x9d, 0xbb, 0xf7, 0x8a, 0x58, 0xa1, 0xf0, 0xef, 0x0e,
	0x1d, 0x88, 0x29, 0xac, 0xa0, 0xcc, 0xe3, 0xe3, 0x20, 0xca, 0xab, 0xe2, 0x7b, 0x2a, 0xfe, 0xfb,
	0xb0, 0x94, 0x2f, 0x4f, 0xc6, 0x01, 0x31, 0xa0, 0x3f, 0x5d, 0xa3, 0xef, 0x41, 0x59, 0x1d, 0x21,
	0x14, 0x23, 0x43, 0xe2, 0x71, 0x15, 0x05, 0xa5, 0x88, 0xde, 0x8b, 0xc9, 0xe8, 0x73, 0x40, 0xa1,
	0x17, 0xe0, 0x90, 0x11, 0x53, 0x3c, 0x19, 0x42, 0xcb, 0x22, 0x2c, 0x7e, 0x4d, 0x95, 0xd5, 0xce,
	0xaf, 0xbc, 0x5e, 0x44, 0x47, 0x3f, 0x83, 0x4a, 0x18, 0xd8, 0x98, 0x13, 0x66, 0xba, 0x98, 0x71,
	0x53, 0x9d, 0x32, 0x24, 0x9c, 0x3a, 0x96, 0x9e, 0xd9, 0xd2, 0x1a, 0x39, 0xe3, 0x81, 0xe2, 0x38,
	0xc2, 0x8c, 0xab, 0xbb, 0x96, 0xdb, 0xf5, 0xcf, 0x00, 0x66, 0xfa, 0xa2, 0x1c, 0x64, 0xf6, 0x5f,
	0x1c, 0x1d, 0x95, 0x97, 0x50, 0x09, 0x0a, 0xdd, 0xe3, 0x5d, 0x63, 0xef, 0xd9, 0xde, 0xf1, 0xc9,
	0xce, 0x51, 0x59, 0xab, 0xff, 0x45, 0x83, 0x92, 0x41, 0x18, 0xf7, 0x29, 0x99, 0x66, 0xee, 0x0e,
	0xac, 0xb0, 0x70, 0x38, 0xc4, 0x74, 0xac, 0x2a, 0xd1, 0xdc, 0xb5, 0x3a, 0x96, 0x43, 0x5b, 0x50,
	0x08, 0x14, 0x5c, 0xd7, 0x7e, 0xa5, 0x9e, 0x93, 0x49, 0x12, 0xfa, 0x29, 0x44, 0xaf, 0x4e, 0xd1,
	0x60, 0xd2, 0xf3, 0x34, 0x98, 0x29, 0x7b, 0xfd, 0x0f, 0x29, 0x78, 0xa8, 0xb2, 0x89, 0xfa, 0xc2,
	0x57, 0x3e, 0x7d, 0xee, 0x62, 0xcf, 0x73, 0xbc, 0xc1, 0x09, 0xc5, 0x16, 0xd9, 0x1b, 0x09, 0x6f,
	0xff, 0x16, 0xd6, 0xe5, 0x18, 0xc8, 0x7d, 0xd3, 0x0b, 0x87, 0x2a, 0xd9, 0xa3, 0x68, 0x3b, 0xfe,
	0x40, 0xc2, 0xbc, 0x07, 0x56, 0x0e, 0x84, 0x27, 0xfe, 0x71, 0x38, 0x94, 0x75, 0x22, 0x9a, 0x00,
	0xd4, 0x90, 0xe6, 0x5d, 0xd9, 0x42, 0xff, 0x0f, 0x25, 0xee, 0x73, 0xec, 0x26, 0x8e, 0x8f, 0xfc,
	0xb0, 0x26, 0xc9, 0x31, 0x5f, 0x65, 0x07, 0x36, 0x6e, 0x00, 0x4d, 0x56, 0x99, 0xec, 0x0d, 0x55,
	0x26, 0x9d, 0xa8, 0x32, 0xf5, 0x7f, 0x6b, 0xa0, 0x4f, 0x55, 0x97, 0x2e, 0x4e, 0x38, 0xe2, 0x8a,
	0x1e, 0x71, 0x49, 0xbe, 0xa2, 0xc7, 0xbe, 0xac, 0x05, 0x2f, 0x00, 0x45, 0x7c, 0x57, 0xba, 0x75,
	0xea, 0x6e, 0x11, 0x50, 0x96, 0x10, 0x7b, 0x89, 0x96, 0x7d, 0xcb, 0x33, 0x39, 0xbd, 0xc8, 0x33,
	0xb9, 0xfe, 0x7b, 0x0d, 0x3e, 0x8d, 0x93, 0x34, 0xf0, 0x29, 0x97, 0xe6, 0x1a, 0xe4, 0x22, 0x24,
	0x8c, 0x47, 0x56, 0xa3, 0xc4, 0xf0, 0x92, 0x57, 0xd3, 0x89, 0x0e, 0x2b, 0x98, 0x73, 0x32, 0x0c,
	0xa2, 0x14, 0xcd, 0x1a, 0xf1, 0x27, 0xaa, 0x40, 0x2e, 0xa0, 0x8e, 0x4f, 0x1d, 0x3e, 0x96, 0x9a,
	0xe5, 0x8d, 0xe9, 0x37, 0xaa, 0xc3, 0x1a, 0x25, 0x17, 0x26, 0x23, 0x9e, 0x52, 0x3d, 0x23, 0x19,
	0x0a, 0x94, 0x5c, 0xf4, 0x88, 0x17, 0xe9, 0xf3, 0xa7, 0x14, 0x54, 0x6f, 0xd0, 0x87, 0x05, 0xbe,
	0xc7, 0xd4, 0x35, 0x54, 0x20, 0x67, 0x87, 0x14, 0x8b, 0x7a, 0xa2, 0x94, 0x9a, 0x7e, 0xa3, 0x8f,
	0x21, 0x3f, 0xbb, 0x9c, 0x48, 0xb5, 0x9c, 0x17, 0xdf, 0xcb, 0x31, 0x14, 0xc5, 0x86, 0x19, 0xe5,
	0x56, 0xf4, 0x07, 0x4c, 0xfa, 0x2e, 0x77, 0xb2, 0x26, 0xc4, 0x7b, 0xb1, 0x34, 0xfa, 0x39, 0xac,
	0x9f, 0x61, 0x66, 0x52, 0xc2, 0x43, 0xea, 0x89, 0x36, 0xc8, 0x38, 0x8b, 0xea, 0x49, 0x7b, 0x63,
	0x72, 0x59, 0x2b, 0x1d, 0x60, 0x66, 0xa8, 0xbd, 0x5e, 0xef, 0x84, 0x19, 0xa5, 0xb3, 0x04, 0x81,
	0x71, 0x26, 0x9a, 0x28, 0x25, 0x9c, 0x8e, 0xe5, 0x1f, 0x5c, 0x84, 0x52, 0x9f, 0xea, 0x59, 0x69,
	0x50, 0x71, 0x4a, 0xde, 0x13, 0xd4, 0xef, 0x3f, 0x84, 0xc4, 0x7f, 0x27, 0x08, 0x60, 0xf9, 0x48,
	0x14, 0x2b, 0x5e, 0x5e, 0x42, 0x2b, 0x90, 0xde, 0x71, 0xdd, 0xb2, 0xd6, 0xfe, 0xc1, 0xeb, 0x7f,
	0x55, 0x97, 0x5e, 0x4f, 0xaa, 0xda, 0x37, 0x93, 0xaa, 0xf6, 0xed, 0xa4, 0xaa, 0x7d, 0x37, 0xa9,
	0x6a, 0x7f, 0x7c, 0x53, 0x5d, 0xfa, 0xe6, 0x4d, 0x75, 0xe9, 0xdb, 0x37, 0xd5, 0xa5, 0x2f, 0xf3,
	0x53, 0xbb, 0xfa, 0xcb, 0xf2, 0xdf, 0xac, 0x27, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x56, 0x93,
	0x76, 0x6e, 0xec, 0x13, 0x00, 0x00,
}

func (m *RowCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RowCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexEntries != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.IndexEntries))
		i--
		dAtA[i] = 0x18
	}
	if m.Rows != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x10
	}
	if m.DataSize != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.DataSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupManifest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupManifest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClusterVersion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	if len(m.Tenants) > 0 {
		for iNdEx := len(m.Tenants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.StatisticsFilenames) > 0 {
		keysForStatisticsFilenames := make([]uint32, 0, len(m.StatisticsFilenames))
		for k := range m.StatisticsFilenames {
			keysForStatisticsFilenames = append(keysForStatisticsFilenames, uint32(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint32s(keysForStatisticsFilenames)
		for iNdEx := len(keysForStatisticsFilenames) - 1; iNdEx >= 0; iNdEx-- {
			v := m.StatisticsFilenames[github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(keysForStatisticsFilenames[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintBackup(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintBackup(dAtA, i, uint64(keysForStatisticsFilenames[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBackup(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.DescriptorCoverage != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.DescriptorCoverage))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.DeprecatedStatistics) > 0 {
		for iNdEx := len(m.DeprecatedStatistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeprecatedStatistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.LocalityKVs) > 0 {
		for iNdEx := len(m.LocalityKVs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LocalityKVs[iNdEx])
			copy(dAtA[i:], m.LocalityKVs[iNdEx])
			i = encodeVarintBackup(dAtA, i, uint64(len(m.LocalityKVs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.PartitionDescriptorFilenames) > 0 {
		for iNdEx := len(m.PartitionDescriptorFilenames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PartitionDescriptorFilenames[iNdEx])
			copy(dAtA[i:], m.PartitionDescriptorFilenames[iNdEx])
			i = encodeVarintBackup(dAtA, i, uint64(len(m.PartitionDescriptorFilenames[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size, err := m.RevisionStartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if len(m.DescriptorChanges) > 0 {
		for iNdEx := len(m.DescriptorChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DescriptorChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.IntroducedSpans) > 0 {
		for iNdEx := len(m.IntroducedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IntroducedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.CompleteDbs) > 0 {
		dAtA4 := make([]byte, len(m.CompleteDbs)*10)
		var j3 int
		for _, num := range m.CompleteDbs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBackup(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x72
	}
	if m.MVCCFilter != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.MVCCFilter))
		i--
		dAtA[i] = 0x68
	}
	{
		size, err := m.EntryCounts.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.BuildInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.NodeID != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.ClusterID.Size()
		i -= size
		if _, err := m.ClusterID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.FormatVersion != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.FormatVersion))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Dir.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Descriptors) > 0 {
		for iNdEx := len(m.Descriptors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Descriptors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BackupManifest_File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupManifest_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupManifest_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalityKV) > 0 {
		i -= len(m.LocalityKV)
		copy(dAtA[i:], m.LocalityKV)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.LocalityKV)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.EntryCounts.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BackupManifest_DescriptorRevision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupManifest_DescriptorRevision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupManifest_DescriptorRevision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Desc != nil {
		{
			size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBackup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BackupManifest_Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupManifest_Progress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupManifest_Progress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletedSpans != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.CompletedSpans))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.RevStartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupPartitionDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupPartitionDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupPartitionDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BackupID.Size()
		i -= size
		if _, err := m.BackupID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Files[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LocalityKV) > 0 {
		i -= len(m.LocalityKV)
		copy(dAtA[i:], m.LocalityKV)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.LocalityKV)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ScheduledBackupExecutionArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduledBackupExecutionArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduledBackupExecutionArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatesLastBackupMetric {
		i--
		if m.UpdatesLastBackupMetric {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.UnpauseOnSuccess != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.UnpauseOnSuccess))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BackupStatement) > 0 {
		i -= len(m.BackupStatement)
		copy(dAtA[i:], m.BackupStatement)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.BackupStatement)))
		i--
		dAtA[i] = 0x12
	}
	if m.BackupType != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.BackupType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestoreProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestoreProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestoreProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataSpan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ProgressIdx != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.ProgressIdx))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Summary.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BackupProcessorPlanningTraceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupProcessorPlanningTraceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupProcessorPlanningTraceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalNumSpans != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.TotalNumSpans))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeToNumSpans) > 0 {
		keysForNodeToNumSpans := make([]int32, 0, len(m.NodeToNumSpans))
		for k := range m.NodeToNumSpans {
			keysForNodeToNumSpans = append(keysForNodeToNumSpans, int32(k))
		}
		github_com_gogo_protobuf_sortkeys.Int32s(keysForNodeToNumSpans)
		for iNdEx := len(keysForNodeToNumSpans) - 1; iNdEx >= 0; iNdEx-- {
			v := m.NodeToNumSpans[int32(keysForNodeToNumSpans[iNdEx])]
			baseI := i
			i = encodeVarintBackup(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintBackup(dAtA, i, uint64(keysForNodeToNumSpans[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBackup(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BackupProgressTraceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupProgressTraceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupProgressTraceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RevisionStartTime.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.TotalEntryCounts.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBackup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TotalNumFiles != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.TotalNumFiles))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BackupExportTraceRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupExportTraceRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupExportTraceRequestEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReqSentTime) > 0 {
		i -= len(m.ReqSentTime)
		copy(dAtA[i:], m.ReqSentTime)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.ReqSentTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Priority) > 0 {
		i -= len(m.Priority)
		copy(dAtA[i:], m.Priority)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.Priority)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Attempt != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Span) > 0 {
		i -= len(m.Span)
		copy(dAtA[i:], m.Span)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.Span)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BackupExportTraceResponseEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupExportTraceResponseEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackupExportTraceResponseEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RetryableError) > 0 {
		i -= len(m.RetryableError)
		copy(dAtA[i:], m.RetryableError)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.RetryableError)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HasReturnedSSTs {
		i--
		if m.HasReturnedSSTs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.FileSummaries) > 0 {
		for iNdEx := len(m.FileSummaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileSummaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBackup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NumFiles != 0 {
		i = encodeVarintBackup(dAtA, i, uint64(m.NumFiles))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintBackup(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBackup(dAtA []byte, offset int, v uint64) int {
	offset -= sovBackup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RowCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataSize != 0 {
		n += 1 + sovBackup(uint64(m.DataSize))
	}
	if m.Rows != 0 {
		n += 1 + sovBackup(uint64(m.Rows))
	}
	if m.IndexEntries != 0 {
		n += 1 + sovBackup(uint64(m.IndexEntries))
	}
	return n
}

func (m *BackupManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StartTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = m.EndTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if len(m.Descriptors) > 0 {
		for _, e := range m.Descriptors {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	l = m.Dir.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.FormatVersion != 0 {
		n += 1 + sovBackup(uint64(m.FormatVersion))
	}
	l = m.ClusterID.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovBackup(uint64(m.NodeID))
	}
	l = m.BuildInfo.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = m.EntryCounts.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.MVCCFilter != 0 {
		n += 1 + sovBackup(uint64(m.MVCCFilter))
	}
	if len(m.CompleteDbs) > 0 {
		l = 0
		for _, e := range m.CompleteDbs {
			l += sovBackup(uint64(e))
		}
		n += 1 + sovBackup(uint64(l)) + l
	}
	if len(m.IntroducedSpans) > 0 {
		for _, e := range m.IntroducedSpans {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if len(m.DescriptorChanges) > 0 {
		for _, e := range m.DescriptorChanges {
			l = e.Size()
			n += 2 + l + sovBackup(uint64(l))
		}
	}
	l = m.RevisionStartTime.Size()
	n += 2 + l + sovBackup(uint64(l))
	l = m.ID.Size()
	n += 2 + l + sovBackup(uint64(l))
	if len(m.PartitionDescriptorFilenames) > 0 {
		for _, s := range m.PartitionDescriptorFilenames {
			l = len(s)
			n += 2 + l + sovBackup(uint64(l))
		}
	}
	if len(m.LocalityKVs) > 0 {
		for _, s := range m.LocalityKVs {
			l = len(s)
			n += 2 + l + sovBackup(uint64(l))
		}
	}
	if len(m.DeprecatedStatistics) > 0 {
		for _, e := range m.DeprecatedStatistics {
			l = e.Size()
			n += 2 + l + sovBackup(uint64(l))
		}
	}
	if m.DescriptorCoverage != 0 {
		n += 2 + sovBackup(uint64(m.DescriptorCoverage))
	}
	if len(m.StatisticsFilenames) > 0 {
		for k, v := range m.StatisticsFilenames {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBackup(uint64(k)) + 1 + len(v) + sovBackup(uint64(len(v)))
			n += mapEntrySize + 2 + sovBackup(uint64(mapEntrySize))
		}
	}
	if len(m.Tenants) > 0 {
		for _, e := range m.Tenants {
			l = e.Size()
			n += 2 + l + sovBackup(uint64(l))
		}
	}
	l = m.ClusterVersion.Size()
	n += 2 + l + sovBackup(uint64(l))
	return n
}

func (m *BackupManifest_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	l = m.EntryCounts.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = m.StartTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = m.EndTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = len(m.LocalityKV)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	return n
}

func (m *BackupManifest_DescriptorRevision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Time.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.ID != 0 {
		n += 1 + sovBackup(uint64(m.ID))
	}
	if m.Desc != nil {
		l = m.Desc.Size()
		n += 1 + l + sovBackup(uint64(l))
	}
	return n
}

func (m *BackupManifest_Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	l = m.RevStartTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.CompletedSpans != 0 {
		n += 1 + sovBackup(uint64(m.CompletedSpans))
	}
	return n
}

func (m *BackupPartitionDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocalityKV)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	l = m.BackupID.Size()
	n += 1 + l + sovBackup(uint64(l))
	return n
}

func (m *StatsTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	return n
}

func (m *ScheduledBackupExecutionArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackupType != 0 {
		n += 1 + sovBackup(uint64(m.BackupType))
	}
	l = len(m.BackupStatement)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	if m.UnpauseOnSuccess != 0 {
		n += 1 + sovBackup(uint64(m.UnpauseOnSuccess))
	}
	if m.UpdatesLastBackupMetric {
		n += 2
	}
	return n
}

func (m *RestoreProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Summary.Size()
	n += 1 + l + sovBackup(uint64(l))
	if m.ProgressIdx != 0 {
		n += 1 + sovBackup(uint64(m.ProgressIdx))
	}
	l = m.DataSpan.Size()
	n += 1 + l + sovBackup(uint64(l))
	return n
}

func (m *BackupProcessorPlanningTraceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeToNumSpans) > 0 {
		for k, v := range m.NodeToNumSpans {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBackup(uint64(k)) + 1 + sovBackup(uint64(v))
			n += mapEntrySize + 1 + sovBackup(uint64(mapEntrySize))
		}
	}
	if m.TotalNumSpans != 0 {
		n += 1 + sovBackup(uint64(m.TotalNumSpans))
	}
	return n
}

func (m *BackupProgressTraceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalNumFiles != 0 {
		n += 1 + sovBackup(uint64(m.TotalNumFiles))
	}
	l = m.TotalEntryCounts.Size()
	n += 1 + l + sovBackup(uint64(l))
	l = m.RevisionStartTime.Size()
	n += 1 + l + sovBackup(uint64(l))
	return n
}

func (m *BackupExportTraceRequestEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Span)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovBackup(uint64(m.Attempt))
	}
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	l = len(m.ReqSentTime)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	return n
}

func (m *BackupExportTraceResponseEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	if m.NumFiles != 0 {
		n += 1 + sovBackup(uint64(m.NumFiles))
	}
	if len(m.FileSummaries) > 0 {
		for _, e := range m.FileSummaries {
			l = e.Size()
			n += 1 + l + sovBackup(uint64(l))
		}
	}
	if m.HasReturnedSSTs {
		n += 2
	}
	l = len(m.RetryableError)
	if l > 0 {
		n += 1 + l + sovBackup(uint64(l))
	}
	return n
}

func sovBackup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBackup(x uint64) (n int) {
	return sovBackup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RowCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSize", wireType)
			}
			m.DataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexEntries", wireType)
			}
			m.IndexEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupManifest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, BackupManifest_File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descriptors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Descriptors = append(m.Descriptors, descpb.Descriptor{})
			if err := m.Descriptors[len(m.Descriptors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dir.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatVersion", wireType)
			}
			m.FormatVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FormatVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MVCCFilter", wireType)
			}
			m.MVCCFilter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MVCCFilter |= MVCCFilter(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CompleteDbs = append(m.CompleteDbs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBackup
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBackup
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CompleteDbs) == 0 {
					m.CompleteDbs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CompleteDbs = append(m.CompleteDbs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteDbs", wireType)
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntroducedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntroducedSpans = append(m.IntroducedSpans, roachpb.Span{})
			if err := m.IntroducedSpans[len(m.IntroducedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptorChanges = append(m.DescriptorChanges, BackupManifest_DescriptorRevision{})
			if err := m.DescriptorChanges[len(m.DescriptorChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevisionStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionDescriptorFilenames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionDescriptorFilenames = append(m.PartitionDescriptorFilenames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityKVs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityKVs = append(m.LocalityKVs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedStatistics = append(m.DeprecatedStatistics, &stats.TableStatisticProto{})
			if err := m.DeprecatedStatistics[len(m.DeprecatedStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorCoverage", wireType)
			}
			m.DescriptorCoverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorCoverage |= github_com_cockroachdb_cockroach_pkg_sql_sem_tree.DescriptorCoverage(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatisticsFilenames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatisticsFilenames == nil {
				m.StatisticsFilenames = make(map[github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBackup
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBackup
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBackup(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBackup
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatisticsFilenames[github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenants = append(m.Tenants, descpb.TenantInfo{})
			if err := m.Tenants[len(m.Tenants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupManifest_File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityKV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityKV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupManifest_DescriptorRevision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescriptorRevision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescriptorRevision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = &descpb.Descriptor{}
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupManifest_Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, BackupManifest_File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedSpans", wireType)
			}
			m.CompletedSpans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedSpans |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupPartitionDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupPartitionDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupPartitionDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalityKV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalityKV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, BackupManifest_File{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackupID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, &stats.TableStatisticProto{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduledBackupExecutionArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduledBackupExecutionArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduledBackupExecutionArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupType", wireType)
			}
			m.BackupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupType |= ScheduledBackupExecutionArgs_BackupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupStatement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupStatement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpauseOnSuccess", wireType)
			}
			m.UnpauseOnSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnpauseOnSuccess |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatesLastBackupMetric", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatesLastBackupMetric = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestoreProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestoreProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestoreProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressIdx", wireType)
			}
			m.ProgressIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgressIdx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSpan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataSpan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupProcessorPlanningTraceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupProcessorPlanningTraceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupProcessorPlanningTraceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeToNumSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeToNumSpans == nil {
				m.NodeToNumSpans = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBackup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBackup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBackup(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBackup
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeToNumSpans[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNumSpans", wireType)
			}
			m.TotalNumSpans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNumSpans |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupProgressTraceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupProgressTraceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupProgressTraceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNumFiles", wireType)
			}
			m.TotalNumFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNumFiles |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEntryCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEntryCounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RevisionStartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupExportTraceRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupExportTraceRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupExportTraceRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Span = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqSentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqSentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupExportTraceResponseEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupExportTraceResponseEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupExportTraceResponseEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFiles", wireType)
			}
			m.NumFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFiles |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSummaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSummaries = append(m.FileSummaries, RowCount{})
			if err := m.FileSummaries[len(m.FileSummaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReturnedSSTs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasReturnedSSTs = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryableError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBackup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBackup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryableError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBackup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBackup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBackup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBackup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBackup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBackup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBackup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBackup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBackup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBackup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBackup = fmt.Errorf("proto: unexpected end of group")
)
