// Copyright 2022 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by sctestgen, DO NOT EDIT.

package schemachangerccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/sql/schemachanger/sctest"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

func TestBackup_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.Backup(t, path, MultiRegionTestClusterFactory{})
}

func TestBackup_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.Backup(t, path, MultiRegionTestClusterFactory{})
}

func TestBackup_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.Backup(t, path, MultiRegionTestClusterFactory{})
}

func TestBackup_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.Backup(t, path, MultiRegionTestClusterFactory{})
}

func TestBackupMixedVersion_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.BackupMixedVersion(t, path, MultiRegionTestClusterFactory{})
}

func TestBackupMixedVersion_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.BackupMixedVersion(t, path, MultiRegionTestClusterFactory{})
}

func TestBackupMixedVersion_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.BackupMixedVersion(t, path, MultiRegionTestClusterFactory{})
}

func TestBackupMixedVersion_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.BackupMixedVersion(t, path, MultiRegionTestClusterFactory{})
}

func TestEndToEndSideEffects_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.EndToEndSideEffects(t, path, MultiRegionTestClusterFactory{})
}

func TestEndToEndSideEffects_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.EndToEndSideEffects(t, path, MultiRegionTestClusterFactory{})
}

func TestEndToEndSideEffects_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.EndToEndSideEffects(t, path, MultiRegionTestClusterFactory{})
}

func TestEndToEndSideEffects_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.EndToEndSideEffects(t, path, MultiRegionTestClusterFactory{})
}

func TestExecuteWithDMLInjection_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.ExecuteWithDMLInjection(t, path, MultiRegionTestClusterFactory{})
}

func TestExecuteWithDMLInjection_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.ExecuteWithDMLInjection(t, path, MultiRegionTestClusterFactory{})
}

func TestExecuteWithDMLInjection_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.ExecuteWithDMLInjection(t, path, MultiRegionTestClusterFactory{})
}

func TestExecuteWithDMLInjection_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.ExecuteWithDMLInjection(t, path, MultiRegionTestClusterFactory{})
}

func TestGenerateSchemaChangeCorpus_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.GenerateSchemaChangeCorpus(t, path, MultiRegionTestClusterFactory{})
}

func TestGenerateSchemaChangeCorpus_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.GenerateSchemaChangeCorpus(t, path, MultiRegionTestClusterFactory{})
}

func TestGenerateSchemaChangeCorpus_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.GenerateSchemaChangeCorpus(t, path, MultiRegionTestClusterFactory{})
}

func TestGenerateSchemaChangeCorpus_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.GenerateSchemaChangeCorpus(t, path, MultiRegionTestClusterFactory{})
}

func TestPause_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.Pause(t, path, MultiRegionTestClusterFactory{})
}

func TestPause_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.Pause(t, path, MultiRegionTestClusterFactory{})
}

func TestPause_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.Pause(t, path, MultiRegionTestClusterFactory{})
}

func TestPause_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.Pause(t, path, MultiRegionTestClusterFactory{})
}

func TestRollback_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.Rollback(t, path, MultiRegionTestClusterFactory{})
}

func TestRollback_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.Rollback(t, path, MultiRegionTestClusterFactory{})
}

func TestRollback_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.Rollback(t, path, MultiRegionTestClusterFactory{})
}

func TestRollback_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.Rollback(t, path, MultiRegionTestClusterFactory{})
}

func TestValidateMixedVersionElements_ccl_create_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/create_index"
	sctest.ValidateMixedVersionElements(t, path, MultiRegionTestClusterFactory{})
}

func TestValidateMixedVersionElements_ccl_drop_database_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_database_multiregion_primary_region"
	sctest.ValidateMixedVersionElements(t, path, MultiRegionTestClusterFactory{})
}

func TestValidateMixedVersionElements_ccl_drop_table_multiregion(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion"
	sctest.ValidateMixedVersionElements(t, path, MultiRegionTestClusterFactory{})
}

func TestValidateMixedVersionElements_ccl_drop_table_multiregion_primary_region(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	const path = "pkg/ccl/schemachangerccl/testdata/end_to_end/drop_table_multiregion_primary_region"
	sctest.ValidateMixedVersionElements(t, path, MultiRegionTestClusterFactory{})
}
