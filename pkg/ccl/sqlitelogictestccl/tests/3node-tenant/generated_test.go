// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// Code generated by generate-logictest, DO NOT EDIT.

package test3node_tenant

import (
	"flag"
	"os"
	"path/filepath"
	"testing"

	"github.com/cockroachdb/cockroach/pkg/base"
	"github.com/cockroachdb/cockroach/pkg/build/bazel"
	"github.com/cockroachdb/cockroach/pkg/ccl"
	"github.com/cockroachdb/cockroach/pkg/security/securityassets"
	"github.com/cockroachdb/cockroach/pkg/security/securitytest"
	"github.com/cockroachdb/cockroach/pkg/server"
	"github.com/cockroachdb/cockroach/pkg/sql/logictest"
	"github.com/cockroachdb/cockroach/pkg/sql/sqlitelogictest"
	"github.com/cockroachdb/cockroach/pkg/testutils/serverutils"
	"github.com/cockroachdb/cockroach/pkg/testutils/skip"
	"github.com/cockroachdb/cockroach/pkg/testutils/testcluster"
	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/randutil"
)

const configIdx = 10

var sqliteLogicTestDir string

func init() {
}

func TestMain(m *testing.M) {
	flag.Parse()
	if *logictest.Bigtest {
		if bazel.BuiltWithBazel() {
			var err error
			sqliteLogicTestDir, err = bazel.Runfile("external/com_github_cockroachdb_sqllogictest")
			if err != nil {
				panic(err)
			}
		} else {
			var err error
			sqliteLogicTestDir, err = sqlitelogictest.FindLocalLogicTestClone()
			if err != nil {
				panic(err)
			}
		}
	}
	defer ccl.TestingEnableEnterprise()()
	securityassets.SetLoader(securitytest.EmbeddedAssets)
	randutil.SeedForTests()
	serverutils.InitTestServerFactory(server.TestServerFactory)
	serverutils.InitTestClusterFactory(testcluster.TestClusterFactory)

	defer serverutils.TestingSetDefaultTenantSelectionOverride(
		base.TestIsForStuffThatShouldWorkWithSecondaryTenantsButDoesntYet(76378),
	)()

	os.Exit(m.Run())
}

func runSqliteLogicTest(t *testing.T, file string) {
	skip.UnderDeadlock(t, "times out and/or hangs")
	if !*logictest.Bigtest {
		skip.IgnoreLint(t, "-bigtest flag must be specified to run this test")
	}
	// SQLLite logic tests can be very memory intensive, so we give them larger
	// limit than other logic tests get. Also some of the 'delete' files become
	// extremely slow when MVCC range tombstones are enabled for point deletes,
	// so we disable that.
	serverArgs := logictest.TestServerArgs{
		MaxSQLMemoryLimit: 512 << 20, // 512 MiB
		DisableUseMVCCRangeTombstonesForPointDeletes: true,
		// Some sqlite tests with very low bytes limit value are too slow, so
		// ensure 3 KiB lower bound.
		BatchBytesLimitLowerBound: 3 << 10, // 3 KiB
	}
	logictest.RunLogicTest(t, serverArgs, configIdx, filepath.Join(sqliteLogicTestDir, file))
}

func TestTenantSQLLiteLogic_testindexdelete1slt_good_0_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/1/slt_good_0.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_0_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_0.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_1_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_1.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_2_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_2.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_3_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_3.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_4_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_4.test")
}

func TestTenantSQLLiteLogic_testindexdelete10slt_good_5_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10/slt_good_5.test")
}

func TestTenantSQLLiteLogic_testindexdelete100slt_good_0_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/100/slt_good_0.test")
}

func TestTenantSQLLiteLogic_testindexdelete100slt_good_1_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/100/slt_good_1.test")
}

func TestTenantSQLLiteLogic_testindexdelete100slt_good_2_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/100/slt_good_2.test")
}

func TestTenantSQLLiteLogic_testindexdelete100slt_good_3_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/100/slt_good_3.test")
}

func TestTenantSQLLiteLogic_testindexdelete1000slt_good_0_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/1000/slt_good_0.test")
}

func TestTenantSQLLiteLogic_testindexdelete1000slt_good_1_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/1000/slt_good_1.test")
}

func TestTenantSQLLiteLogic_testindexdelete10000slt_good_0_test(
	t *testing.T,
) {
	defer leaktest.AfterTest(t)()
	runSqliteLogicTest(t, "/test/index/delete/10000/slt_good_0.test")
}
