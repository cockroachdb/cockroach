# LogicTest: multiregion-9node-3region-3azs
# TODO(#69265): enable multiregion-9node-3region-3azs-tenant.

# Set the closed timestamp interval to be short to shorten the amount of time
# we need to wait for the system config to propagate.
statement ok
SET CLUSTER SETTING kv.closed_timestamp.side_transport_interval = '10ms';
SET CLUSTER SETTING kv.closed_timestamp.target_duration = '10ms';

statement ok
CREATE DATABASE multi_region_test_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1";
USE multi_region_test_db

# NB: This doesn't include the foreign key reference to warehouse since we
# don't need the warehouse table for this test.
statement ok
CREATE TABLE district (
        d_id INT8 NOT NULL,
        d_w_id INT8 NOT NULL,
        d_name VARCHAR(10) NOT NULL,
        d_street_1 VARCHAR(20) NOT NULL,
        d_street_2 VARCHAR(20) NOT NULL,
        d_city VARCHAR(20) NOT NULL,
        d_state CHAR(2) NOT NULL,
        d_zip CHAR(9) NOT NULL,
        d_tax DECIMAL(4,4) NOT NULL,
        d_ytd DECIMAL(12,2) NOT NULL,
        d_next_o_id INT8 NOT NULL,
        crdb_region crdb_internal_region NOT VISIBLE NOT NULL AS (CASE WHEN d_w_id BETWEEN 0:::INT8 AND 1665:::INT8 THEN 'ap-southeast-2':::crdb_internal_region WHEN d_w_id BETWEEN 1666:::INT8 AND 3332:::INT8 THEN 'us-east-1':::crdb_internal_region WHEN d_w_id BETWEEN 3333:::INT8 AND 4999:::INT8 THEN 'ca-central-1':::crdb_internal_region END) STORED,
        CONSTRAINT "primary" PRIMARY KEY (d_w_id ASC, d_id ASC),
        FAMILY "primary" (d_id, d_w_id, d_name, d_street_1, d_street_2, d_city, d_state, d_zip, d_tax, d_ytd, d_next_o_id, crdb_region)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE customer (
        c_id INT8 NOT NULL,
        c_d_id INT8 NOT NULL,
        c_w_id INT8 NOT NULL,
        c_first VARCHAR(16) NOT NULL,
        c_middle CHAR(2) NOT NULL,
        c_last VARCHAR(16) NOT NULL,
        c_street_1 VARCHAR(20) NOT NULL,
        c_street_2 VARCHAR(20) NOT NULL,
        c_city VARCHAR(20) NOT NULL,
        c_state CHAR(2) NOT NULL,
        c_zip CHAR(9) NOT NULL,
        c_phone CHAR(16) NOT NULL,
        c_since TIMESTAMP NOT NULL,
        c_credit CHAR(2) NOT NULL,
        c_credit_lim DECIMAL(12,2) NOT NULL,
        c_discount DECIMAL(4,4) NOT NULL,
        c_balance DECIMAL(12,2) NOT NULL,
        c_ytd_payment DECIMAL(12,2) NOT NULL,
        c_payment_cnt INT8 NOT NULL,
        c_delivery_cnt INT8 NOT NULL,
        c_data VARCHAR(500) NOT NULL,
        crdb_region crdb_internal_region NOT VISIBLE NOT NULL AS (CASE WHEN c_w_id BETWEEN 0:::INT8 AND 1665:::INT8 THEN 'ap-southeast-2':::crdb_internal_region WHEN c_w_id BETWEEN 1666:::INT8 AND 3332:::INT8 THEN 'us-east-1':::crdb_internal_region WHEN c_w_id BETWEEN 3333:::INT8 AND 4999:::INT8 THEN 'ca-central-1':::crdb_internal_region END) STORED,
        CONSTRAINT "primary" PRIMARY KEY (c_w_id ASC, c_d_id ASC, c_id ASC),
        CONSTRAINT fk_c_w_id_ref_district FOREIGN KEY (c_w_id, c_d_id) REFERENCES district(d_w_id, d_id) NOT VALID,
        INDEX customer_idx (c_w_id ASC, c_d_id ASC, c_last ASC, c_first ASC),
        FAMILY "primary" (c_id, c_d_id, c_w_id, c_first, c_middle, c_last, c_street_1, c_street_2, c_city, c_state, c_zip, c_phone, c_since, c_credit, c_credit_lim, c_discount, c_balance, c_ytd_payment, c_payment_cnt, c_delivery_cnt, c_data, crdb_region)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE history (
        rowid UUID NOT NULL DEFAULT gen_random_uuid(),
        h_c_id INT8 NOT NULL,
        h_c_d_id INT8 NOT NULL,
        h_c_w_id INT8 NOT NULL,
        h_d_id INT8 NOT NULL,
        h_w_id INT8 NOT NULL,
        h_date TIMESTAMP NULL,
        h_amount DECIMAL(6,2) NULL,
        h_data VARCHAR(24) NULL,
        crdb_region crdb_internal_region NOT VISIBLE NOT NULL AS (CASE WHEN h_w_id BETWEEN 0:::INT8 AND 1665:::INT8 THEN 'ap-southeast-2':::crdb_internal_region WHEN h_w_id BETWEEN 1666:::INT8 AND 3332:::INT8 THEN 'us-east-1':::crdb_internal_region WHEN h_w_id BETWEEN 3333:::INT8 AND 4999:::INT8 THEN 'ca-central-1':::crdb_internal_region END) STORED,
        CONSTRAINT "primary" PRIMARY KEY (h_w_id ASC, rowid ASC),
        CONSTRAINT fk_h_c_w_id_ref_customer FOREIGN KEY (h_c_w_id, h_c_d_id, h_c_id) REFERENCES customer(c_w_id, c_d_id, c_id) NOT VALID,
        CONSTRAINT fk_h_w_id_ref_district FOREIGN KEY (h_w_id, h_d_id) REFERENCES district(d_w_id, d_id) NOT VALID,
        FAMILY "primary" (rowid, h_c_id, h_c_d_id, h_c_w_id, h_d_id, h_w_id, h_date, h_amount, h_data, crdb_region)
) LOCALITY REGIONAL BY ROW

statement ok
ALTER TABLE district INJECT STATISTICS '[
    {
        "columns": [
            "d_w_id"
        ],
        "created_at": "2021-04-13 19:54:56.008454",
        "distinct_count": 5004,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 50000
    },
    {
        "columns": [
            "d_id"
        ],
        "created_at": "2021-04-13 19:54:56.008454",
        "distinct_count": 10,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 50000
    }
]'

statement ok
ALTER TABLE customer INJECT STATISTICS '[
    {
        "columns": [
            "c_d_id"
        ],
        "created_at": "2021-04-13 20:35:46.476858",
        "distinct_count": 10,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "c_w_id"
        ],
        "created_at": "2021-04-13 20:35:46.476858",
        "distinct_count": 4998,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "c_id"
        ],
        "created_at": "2021-04-13 20:35:46.476858",
        "distinct_count": 2999,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    }
]'

statement ok
ALTER TABLE history INJECT STATISTICS '[
    {
        "columns": [
            "h_w_id"
        ],
        "created_at": "2021-04-13 20:58:06.757925",
        "distinct_count": 4998,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "h_c_id"
        ],
        "created_at": "2021-04-13 20:58:06.757925",
        "distinct_count": 2999,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "h_c_d_id"
        ],
        "created_at": "2021-04-13 20:58:06.757925",
        "distinct_count": 10,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "h_c_w_id"
        ],
        "created_at": "2021-04-13 20:58:06.757925",
        "distinct_count": 4998,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    },
    {
        "columns": [
            "h_d_id"
        ],
        "created_at": "2021-04-13 20:58:06.757925",
        "distinct_count": 10,
        "name": "__auto__",
        "null_count": 0,
        "row_count": 150000000
    }
]'

# Regression test for #63735. Ensure that we choose locality optimized anti
# joins for the foreign key checks.
query T retry
EXPLAIN INSERT
INTO
  history (h_c_id, h_c_d_id, h_c_w_id, h_d_id, h_w_id, h_amount, h_date, h_data)
VALUES
  (2057, 4, 3, 4, 3, 2100.9, '2021-04-15 15:22:14', '9    zmssaF9m')
----
distribution: local
vectorized: true
·
• root
│
├── • insert
│   │ into: history(rowid, h_c_id, h_c_d_id, h_c_w_id, h_d_id, h_w_id, h_date, h_amount, h_data, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 11 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (anti)
│           │ estimated row count: 0
│           │ table: customer@primary
│           │ equality cols are key
│           │ lookup condition: (((column3 = c_w_id) AND (column2 = c_d_id)) AND (column1 = c_id)) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │
│           └── • lookup join (anti)
│               │ estimated row count: 1
│               │ table: customer@primary
│               │ equality cols are key
│               │ lookup condition: (((column3 = c_w_id) AND (column2 = c_d_id)) AND (column1 = c_id)) AND (crdb_region = 'ap-southeast-2')
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ estimated row count: 0
            │ table: district@primary
            │ equality cols are key
            │ lookup condition: ((column5 = d_w_id) AND (column4 = d_id)) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │
            └── • lookup join (anti)
                │ estimated row count: 1
                │ table: district@primary
                │ equality cols are key
                │ lookup condition: ((column5 = d_w_id) AND (column4 = d_id)) AND (crdb_region = 'ap-southeast-2')
                │
                └── • scan buffer
                      label: buffer 1

# Regression test for #62269. Ensure that locality optimized search results in
# a local plan, even when there is a lookup join or an inverted join.
statement ok
CREATE TABLE promos (
  promo_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  discount DECIMAL NOT NULL,
  info JSON,
  INVERTED INDEX (info),
  FAMILY (promo_id, discount, info)
) LOCALITY GLOBAL;
CREATE TABLE orders (
  order_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  price    DECIMAL NOT NULL,
  promo_id UUID REFERENCES promos,
  info JSON,
  FAMILY (order_id, price, promo_id, info)
) LOCALITY REGIONAL BY ROW

statement ok
INSERT INTO promos VALUES ('7fe2dce4-ecac-4d12-87b6-e1c1f837d835', 50, '{"some": "info"}');
INSERT INTO orders
  VALUES ('94e4b847-8f2f-4ac5-83f1-641d6e3df727', 100, '7fe2dce4-ecac-4d12-87b6-e1c1f837d835', '{"some": "info"}')

query T nodeidx=3
USE multi_region_test_db; EXPLAIN (DISTSQL) SELECT
    order_id, promo_id, price AS price_without_promo, price * discount AS price_with_promo
FROM
    orders JOIN promos USING (promo_id)
WHERE
    order_id = '94e4b847-8f2f-4ac5-83f1-641d6e3df727'
----
distribution: local
vectorized: true
·
• render
│
└── • lookup join
    │ table: promos@promos_pkey
    │ equality: (promo_id) = (promo_id)
    │ equality cols are key
    │
    └── • union all
        │ limit: 1
        │
        ├── • scan
        │     missing stats
        │     table: orders@orders_pkey
        │     spans: [/'ca-central-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'ca-central-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727']
        │
        └── • scan
              missing stats
              table: orders@orders_pkey
              spans: [/'ap-southeast-2'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'ap-southeast-2'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727'] [/'us-east-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'us-east-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727']
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyskttO20AQhu_7FKO54aCNEh8gwRKSEU1pUBpoQtVK3QgZ7wS2dXbd3bXqCuWqz9b3qmxDwVGDBO2FrT3MP_N_v_YW7bcMIxx-Oh8fjSaw_Xo0u5i9H-_AbDgeHl-ANoLMpRQMcqOX-m4lU4KjWbO4_C7djS7cZV1wf7sLQtpUF8q1C5sqeDM9e9f0tnB6Npo03S18mI0mJ7B9P2sHPr4dTod_XMAhbB2EFF4Nwn5nsPAXnTBJ9zqDYOF19kNP7FMgFn2_v4UMlRY0SZZkMfqMIc4Z5kanZK021dFtXTASJUY9hlLlhauO5wxTbQijW3TSZYQRXiRXGU0pEWS6PWQoyCUyq9s2BHFu5DIxP5Dhsc6KpbJRKzeZ0kN8yHCWJ1VJl2PMscuR8_Ig5Lyk6nc1OOG8HCy6p79-cl4uPMF56Ql1WG36Wxy7PUiUAA-0uyGD8xVDXbgH-9Yl14SRt2IvQ_T-L2IF03sR5kY0fyPaA5ElI5MMClW7JNGCmq_-ksFEd3Te9dv0Y7mUDryNVnrPSflUS3UXctAe07z-RyGPtf5a5PBFSwVaRRBXgikpQSaC2GMQBwxiv_p2472N9oLn2JuSzbWytBbVJvA5QxLX1MRudWFSOjc6rcc027NaVx8Isq659ZvNSNVX9St9LPb-Rew_KQ5a4t66OHhSHK6J56tXvwMAAP__m3W5aQ==

query T nodeidx=3
USE multi_region_test_db; EXPLAIN (DISTSQL) SELECT
    order_id, promos.promo_id, price AS price_without_promo, price * discount AS price_with_promo
FROM
    orders JOIN promos ON promos.info @> orders.info
WHERE
    order_id = '94e4b847-8f2f-4ac5-83f1-641d6e3df727'
----
distribution: local
vectorized: true
·
• render
│
└── • lookup join
    │ table: promos@promos_pkey
    │ equality: (promo_id) = (promo_id)
    │ equality cols are key
    │ pred: info @> info
    │
    └── • inverted join
        │ table: promos@promos_info_idx
        │
        └── • union all
            │ limit: 1
            │
            ├── • scan
            │     missing stats
            │     table: orders@orders_pkey
            │     spans: [/'ca-central-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'ca-central-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727']
            │
            └── • scan
                  missing stats
                  table: orders@orders_pkey
                  spans: [/'ap-southeast-2'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'ap-southeast-2'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727'] [/'us-east-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727' - /'us-east-1'/'94e4b847-8f2f-4ac5-83f1-641d6e3df727']
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk9tu2zgQhu_3KYi5yW5AxzrFdgQEYJD1bh24dmoHaIHSMBRxnLC1SZWkWhWBr_psfa9CkpNUQWUgaS9skTPzc76fhzuwn9YQw_Dd5fhsNCF__zuaX83fjP8h8-F4eH5FtBFollJQkhm90fao-uwCMkVyNq8Hyy_S3ercLauC--whEdKmOleuWVhXkf9m09d1C0supqPJrgmZ3o-OpFppwnjueSHuKuvY21fD2fABj5ySg5MIo-tB1O8MVsGqEyXpcWcQrvxOL_JFD0Ox6gf9A6CgtMBJskEL8XuIYEEhMzpFa7UpQ3dVwUgUEHsUpMpyV4YXFFJtEOI7cNKtEWK4Sq7XOMNEoOl6QEGgS-S6WrYmZZmRm8R8BQrnep1vlI0bGypTpKR0AxTmWVKmuxwYhy4HzouTiPMCy7_rwf-cF4NV9-L7N86LlS84L3yhTstJ_4BD1yOJEsQn2t2igcWWgs7dI7p1yQ1C7G_py-z5f85eacR7kcVWW0GrrUc3Fo1M1iRXFSGKhqHF9hf-J7qjs27QdD6WG-mI34riPWeHR-ozGofiQkuFphs2W9UvgNWfZbmPSykKoA-yYZEZwnoPz4OVC0xzFxPmUxZQFlIWtZKGzyEtCXdXIWqhvL8KY60_5hn5oKUiWsWElYLphLB-E3SGSqCpWAk7poQF5e-Q9VqJo-cQz9BmWll8cs5tp7aggOIG6ztjdW5SvDQ6rdrU02mlqwICrauzQT0ZqSpVPa-fxf7viIO94rAh9p6Kw73iaL842is-fiJebP_6EQAA__9lwQ-e

# Regression test for #74890. Code should not panic due to distribution already
# provided by input.
statement ok nodeidx=3
USE multi_region_test_db; CREATE TABLE t74890 AS
SELECT generate_series(1, 5) AS g

query I nodeidx=3
USE multi_region_test_db; SELECT g FROM t74890 ORDER BY g
----
1
2
3
4
5
