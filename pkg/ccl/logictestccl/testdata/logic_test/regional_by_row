# LogicTest: multiregion-9node-3region-3azs

statement ok
CREATE DATABASE multi_region_test_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1" SURVIVE REGION FAILURE

statement error REGIONAL BY ROW is currently experimental
CREATE TABLE regional_by_row_table (pk int) LOCALITY REGIONAL BY ROW

statement ok
SET experimental_enable_implicit_column_partitioning = true

statement error cannot set LOCALITY on a database that is not multi-region enabled
CREATE TABLE regional_by_row_table (pk int) LOCALITY REGIONAL BY ROW

statement ok
USE multi_region_test_db

statement error REGIONAL BY ROW on a TABLE containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int
)
PARTITION BY LIST (pk) (PARTITION one VALUES IN ((1)))
LOCALITY REGIONAL BY ROW

statement error cannot specify crdb_region column in REGIONAL BY ROW table as the column is implicitly created by the system
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  crdb_region crdb_internal_region
)
LOCALITY REGIONAL BY ROW

statement error REGIONAL BY ROW on a TABLE containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int
)
PARTITION BY NOTHING
LOCALITY REGIONAL BY ROW

statement error REGIONAL BY ROW on a table with an INDEX containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  INDEX (a) PARTITION BY LIST (a) (PARTITION one VALUES IN ((1)))
)
LOCALITY REGIONAL BY ROW

statement error REGIONAL BY ROW on a table with an INDEX containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  INDEX (a) PARTITION BY NOTHING
)
LOCALITY REGIONAL BY ROW

statement error REGIONAL BY ROW on a table with an UNIQUE constraint containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  UNIQUE (a) PARTITION BY LIST (a) (PARTITION one VALUES IN ((1)))
)
LOCALITY REGIONAL BY ROW

statement error REGIONAL BY ROW on a table with an UNIQUE constraint containing PARTITION BY is not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  UNIQUE (a) PARTITION BY NOTHING
)
LOCALITY REGIONAL BY ROW


statement ok
CREATE TABLE regional_by_row_table (
  pk int PRIMARY KEY,
  pk2 int NOT NULL,
  a int NOT NULL,
  b int NOT NULL,
  INDEX (a),
  UNIQUE (b),
  FAMILY (pk, pk2, a, b)
) LOCALITY REGIONAL BY ROW

# TODO(#multiregion): determine how we should display the presence of a crdb_region column
# to the user.
# TODO(#59362): ensure this CREATE TABLE statement round trips.
query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  crdb_region public.crdb_internal_region NOT NULL DEFAULT gateway_region()::public.crdb_internal_region,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  FAMILY fam_0_pk_pk2_a_b_crdb_region (pk, pk2, a, b, crdb_region)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]'

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
primary                      crdb_region  true
primary                      pk           false
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true

query TTTTIT colnames
SHOW TABLES
----
schema_name  table_name             type   owner  estimated_row_count  locality
public       regional_by_row_table  table  root   0                    REGIONAL BY ROW

query TI
INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES
(1, 1, 2, 3), (4, 4, 5, 6)
RETURNING crdb_region, pk
----
ap-southeast-2  1
ap-southeast-2  4

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
('ca-central-1', 7, 7, 8, 9)
RETURNING crdb_region, pk
----
ca-central-1  7

query TI nodeidx=3
INSERT INTO multi_region_test_db.regional_by_row_table (pk, pk2, a, b) VALUES
(10, 10, 11, 12)
RETURNING crdb_region, pk
----
ca-central-1  10

query TI nodeidx=6
INSERT INTO multi_region_test_db.regional_by_row_table (pk, pk2, a, b) VALUES
(20, 20, 21, 22)
RETURNING crdb_region, pk
----
us-east-1  20

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
(gateway_region()::crdb_internal_region, 23, 23, 24, 25)
RETURNING crdb_region, pk
----
ap-southeast-2  23

query TIIII
SELECT crdb_region, pk, pk2, a, b FROM regional_by_row_table
ORDER BY pk
----
ap-southeast-2  1   1   2   3
ap-southeast-2  4   4   5   6
ca-central-1    7   7   8   9
ca-central-1    10  10  11  12
us-east-1       20  20  21  22
ap-southeast-2  23  23  24  25

# Tests creating a index and a unique constraint on a REGIONAL BY ROW table.
statement ok
CREATE INDEX new_idx ON regional_by_row_table(a, b)

statement ok
ALTER TABLE regional_by_row_table ADD CONSTRAINT unique_b_a UNIQUE(b, a)

# We should plan uniqueness checks for all unique indexes in
# REGIONAL BY ROW tables.
query T
EXPLAIN INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES (1, 1, 1, 1)
----
distribution: local
vectorized: true
·
• root
│
├── • insert
│   │ into: regional_by_row_table(pk, pk2, a, b, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 6 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@primary
│           │ equality: (lookup_join_const_col_@20, column1) = (crdb_region,pk)
│           │ equality cols are key
│           │ pred: column12 != crdb_region
│           │
│           └── • cross join
│               │
│               ├── • values
│               │     size: 1 column, 3 rows
│               │
│               └── • scan buffer
│                     label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ equality: (lookup_join_const_col_@30, column4) = (crdb_region,b)
│           │ equality cols are key
│           │ pred: (column1 != pk) OR (column12 != crdb_region)
│           │
│           └── • cross join
│               │
│               ├── • values
│               │     size: 1 column, 3 rows
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ equality: (lookup_join_const_col_@41, column3, column4) = (crdb_region,a,b)
            │ equality cols are key
            │ pred: (column1 != pk) OR (column12 != crdb_region)
            │
            └── • cross join
                │
                ├── • values
                │     size: 1 column, 3 rows
                │
                └── • scan buffer
                      label: buffer 1

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_b_key"\nDETAIL: Key \(b\)=\(3\) already exists\.
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('us-east-1', 2, 3, 2, 3)

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  crdb_region public.crdb_internal_region NOT NULL DEFAULT gateway_region()::public.crdb_internal_region,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  INDEX new_idx (a ASC, b ASC),
  UNIQUE INDEX unique_b_a (b ASC, a ASC),
  FAMILY fam_0_pk_pk2_a_b_crdb_region (pk, pk2, a, b, crdb_region)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@new_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@new_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@new_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table@unique_b_a CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table@unique_b_a CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@unique_b_a CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]'

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
new_idx                      a            false
new_idx                      b            false
new_idx                      crdb_region  true
primary                      crdb_region  true
primary                      pk           false
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true
unique_b_a                   a            false
unique_b_a                   b            false
unique_b_a                   crdb_region  true

# Tests changing the PK of a regional by row table.

# Insert a row with a conflicting pk2, and check ALTER PRIMARY KEY fails.
statement ok
INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES (1000, 1, 1000, 2000)

# TODO(#59504): we should hide crdb_region.
statement error Key \(crdb_region,pk2\)=\('ap-southeast-2',1\) already exists.
ALTER TABLE regional_by_row_table ALTER PRIMARY KEY USING COLUMNS (pk2)

statement ok
DELETE FROM regional_by_row_table WHERE pk = 1000

statement ok
ALTER TABLE regional_by_row_table ALTER PRIMARY KEY USING COLUMNS (pk2)

# ALTER PRIMARY KEY can change the order of ALTER PARTITION, so we need to sort them.
query T
SELECT
  split_part(create_statement, ';', 1)
FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
                            pk INT8 NOT NULL,
                            pk2 INT8 NOT NULL,
                            a INT8 NOT NULL,
                            b INT8 NOT NULL,
                            crdb_region public.crdb_internal_region NOT NULL DEFAULT gateway_region()::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk2 ASC),
                            UNIQUE INDEX regional_by_row_table_pk_key (pk ASC),
                            INDEX regional_by_row_table_a_idx (a ASC),
                            UNIQUE INDEX regional_by_row_table_b_key (b ASC),
                            INDEX new_idx (a ASC, b ASC),
                            UNIQUE INDEX unique_b_a (b ASC, a ASC),
                            FAMILY fam_0_pk_pk2_a_b_crdb_region (pk, pk2, a, b, crdb_region)
) LOCALITY REGIONAL BY ROW

query TT
SHOW ZONE CONFIGURATION FOR PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary
----
PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary  ALTER PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary CONFIGURE ZONE USING
                                                                   range_min_bytes = 134217728,
                                                                   range_max_bytes = 536870912,
                                                                   gc.ttlseconds = 90000,
                                                                   num_replicas = 5,
                                                                   num_voters = 5,
                                                                   constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                                   voter_constraints = '{+region=ap-southeast-2: 2}',
                                                                   lease_preferences = '[[+region=ap-southeast-2]]'

query TT
SHOW ZONE CONFIGURATION FOR PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a
----
PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a  ALTER PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a CONFIGURE ZONE USING
                                                                      range_min_bytes = 134217728,
                                                                      range_max_bytes = 536870912,
                                                                      gc.ttlseconds = 90000,
                                                                      num_replicas = 5,
                                                                      num_voters = 5,
                                                                      constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                                      voter_constraints = '{+region=ap-southeast-2: 2}',
                                                                      lease_preferences = '[[+region=ap-southeast-2]]'

# Tests for REGIONAL BY TABLE AS
statement error  cannot use column crdb_region_col which has type INT8 in REGIONAL BY ROW AS\nDETAIL:\s+REGIONAL BY ROW AS must reference a column of type crdb_internal_region.
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY,
  crdb_region_col int
) LOCALITY REGIONAL BY ROW AS crdb_region_col

statement error column no_exist_col in REGIONAL BY ROW AS does not exist
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY
) LOCALITY REGIONAL BY ROW AS no_exist_col

statement ok
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY,
  a int,
  b int,
  crdb_region_col crdb_internal_region AS (
    CASE
      WHEN pk <= 10 THEN 'us-east-1'
      ELSE 'ap-southeast-2'
    END
  ) STORED,
  INDEX (a),
  UNIQUE (b),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW AS crdb_region_col

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table_as]
----
CREATE TABLE public.regional_by_row_table_as (
  pk INT8 NOT NULL,
  a INT8 NULL,
  b INT8 NULL,
  crdb_region_col public.crdb_internal_region NULL AS (CASE WHEN pk <= 10:::INT8 THEN 'us-east-1':::public.crdb_internal_region ELSE 'ap-southeast-2':::public.crdb_internal_region END) STORED,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_as_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_as_b_key (b ASC),
  FAMILY fam_0_pk_a_b_crdb_region_col (pk, a, b, crdb_region_col)
) LOCALITY REGIONAL BY ROW AS crdb_region_col;
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table_as@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ap-southeast-2" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ap-southeast-2: 2}',
  lease_preferences = '[[+region=ap-southeast-2]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "ca-central-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=ca-central-1: 2}',
  lease_preferences = '[[+region=ca-central-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@primary CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_a_idx CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]';
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table_as@regional_by_row_table_as_b_key CONFIGURE ZONE USING
  num_voters = 5,
  voter_constraints = '{+region=us-east-1: 2}',
  lease_preferences = '[[+region=us-east-1]]'

query TI
INSERT INTO regional_by_row_table_as (pk) VALUES (1), (10), (20)
RETURNING crdb_region_col, pk
----
us-east-1       1
us-east-1       10
ap-southeast-2  20

# Tests for altering the survivability of a REGIONAL BY ROW table.
statement ok
CREATE DATABASE alter_survive_db PRIMARY REGION "us-east-1" REGIONS "ca-central-1", "ap-southeast-2" SURVIVE REGION FAILURE

statement ok
USE alter_survive_db

# Create some tables to validate that their zone configurations are adjusted appropriately.
statement ok
CREATE TABLE t_regional_by_row () LOCALITY REGIONAL BY ROW

query TT
SHOW ZONE CONFIGURATION FOR TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 90000,
                                                  num_replicas = 5,
                                                  num_voters = 5,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '{+region=us-east-1: 2}',
                                                  lease_preferences = '[[+region=us-east-1]]'

query TT
SHOW ZONE CONFIGURATION FOR TABLE t_regional_by_row
----
DATABASE alter_survive_db  ALTER DATABASE alter_survive_db CONFIGURE ZONE USING
                           range_min_bytes = 134217728,
                           range_max_bytes = 536870912,
                           gc.ttlseconds = 90000,
                           num_replicas = 5,
                           num_voters = 5,
                           constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                           voter_constraints = '{+region=us-east-1: 2}',
                           lease_preferences = '[[+region=us-east-1]]'

statement ok
ALTER DATABASE alter_survive_db SURVIVE ZONE FAILURE

query TT
SHOW ZONE CONFIGURATION FOR TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 90000,
                                                  num_replicas = 5,
                                                  num_voters = 3,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '[+region=us-east-1]',
                                                  lease_preferences = '[[+region=us-east-1]]'

# Test setting non-multi-region fields on tables behaves as appropriate.
statement ok
ALTER TABLE t_regional_by_row CONFIGURE ZONE USING gc.ttlseconds = 999

query TT
SHOW ZONE CONFIGURATION FOR TABLE t_regional_by_row
----
TABLE t_regional_by_row  ALTER TABLE t_regional_by_row CONFIGURE ZONE USING
                         range_min_bytes = 134217728,
                         range_max_bytes = 536870912,
                         gc.ttlseconds = 999,
                         num_replicas = 5,
                         num_voters = 3,
                         constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                         voter_constraints = '[+region=us-east-1]',
                         lease_preferences = '[[+region=us-east-1]]'

query TT
SHOW ZONE CONFIGURATION FOR TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 999,
                                                  num_replicas = 5,
                                                  num_voters = 3,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '[+region=us-east-1]',
                                                  lease_preferences = '[[+region=us-east-1]]'
