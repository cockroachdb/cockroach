# LogicTest: multiregion-9node-3region-3azs

statement ok
CREATE DATABASE multi_region_test_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1" SURVIVE REGION FAILURE

statement error cannot set LOCALITY on a table in a database that is not multi-region enabled
CREATE TABLE regional_by_row_table (pk int) LOCALITY REGIONAL BY ROW

statement ok
USE multi_region_test_db

statement error multi-region tables containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int
)
PARTITION BY LIST (pk) (PARTITION one VALUES IN ((1)))
LOCALITY REGIONAL BY ROW

statement error multi-region tables containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int
)
PARTITION BY NOTHING
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an INDEX containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  INDEX idx(id) PARTITION BY LIST (id) (
    PARTITION "pk" VALUES IN (1)
  )
)
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an UNIQUE constraint containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  UNIQUE INDEX idx(id) PARTITION BY LIST (id) (
    PARTITION "pk" VALUES IN (1)
  )
)
LOCALITY REGIONAL BY ROW

statement ok
SET experimental_enable_hash_sharded_indexes = true

statement error hash sharded indexes are not compatible with REGIONAL BY ROW tables
CREATE TABLE regional_by_row_table (
  pk INT PRIMARY KEY USING HASH WITH BUCKET_COUNT = 8
) LOCALITY REGIONAL BY ROW

statement error hash sharded indexes are not compatible with REGIONAL BY ROW tables
CREATE TABLE regional_by_row_table (
  pk INT NOT NULL,
  a INT,
  PRIMARY KEY(pk) USING HASH WITH BUCKET_COUNT = 8
) LOCALITY REGIONAL BY ROW

statement error hash sharded indexes are not compatible with REGIONAL BY ROW tables
CREATE TABLE regional_by_row_table (
  pk INT NOT NULL,
  a INT,
  INDEX(a) USING HASH WITH BUCKET_COUNT = 8
) LOCALITY REGIONAL BY ROW

statement error multi-region tables with an INDEX containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  INDEX (a) PARTITION BY LIST (a) (PARTITION one VALUES IN ((1)))
)
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an INDEX containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  INDEX (a) PARTITION BY NOTHING
)
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an INDEX containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  j JSON,
  INVERTED INDEX (a, j) PARTITION BY LIST (a) (PARTITION one VALUES IN ((1)))
)
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an UNIQUE constraint containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  UNIQUE (a) PARTITION BY LIST (a) (PARTITION one VALUES IN ((1)))
)
LOCALITY REGIONAL BY ROW

statement error multi-region tables with an UNIQUE constraint containing PARTITION BY are not supported
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  UNIQUE (a) PARTITION BY NOTHING
)
LOCALITY REGIONAL BY ROW

statement error cannot use column crdb_region which has type INT8 in REGIONAL BY ROW\nDETAIL: Column crdb_internal_region must be of type crdb_internal_region
CREATE TABLE regional_by_row_table (
  pk int,
  a int,
  crdb_region int
)
LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE parent_table (pk INT PRIMARY KEY)

statement error interleaved tables are not compatible with REGIONAL BY ROW tables
CREATE TABLE regional_by_row_table (
  pk INT NOT NULL PRIMARY KEY
)
INTERLEAVE IN PARENT parent_table(pk)
LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE regional_by_row_table_explicit_crdb_region_column (
  pk int PRIMARY KEY,
  a int,
  crdb_region crdb_internal_region,
  FAMILY (pk, a, crdb_region)
)
LOCALITY REGIONAL BY ROW

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table_explicit_crdb_region_column]
----
CREATE TABLE public.regional_by_row_table_explicit_crdb_region_column (
                            pk INT8 NOT NULL,
                            a INT8 NULL,
                            crdb_region public.crdb_internal_region NOT NULL,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            FAMILY fam_0_pk_a_crdb_region (pk, a, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_table_explicit_crdb_region_column]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table_explicit_crdb_region_column@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table_explicit_crdb_region_column@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table_explicit_crdb_region_column@primary  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_table_explicit_crdb_region_column
----
DATABASE multi_region_test_db  ALTER DATABASE multi_region_test_db CONFIGURE ZONE USING
                               range_min_bytes = 134217728,
                               range_max_bytes = 536870912,
                               gc.ttlseconds = 90000,
                               num_replicas = 5,
                               num_voters = 5,
                               constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                               voter_constraints = '{+region=ca-central-1: 2}',
                               lease_preferences = '[[+region=ca-central-1]]'

statement ok
CREATE TABLE regional_by_row_table (
  pk int PRIMARY KEY,
  pk2 int NOT NULL,
  a int NOT NULL,
  b int NOT NULL,
  j JSON,
  INDEX (a),
  UNIQUE (b),
  INVERTED INDEX (j),
  FAMILY (pk, pk2, a, b)
) LOCALITY REGIONAL BY ROW

query TTB
SELECT index_name, column_name, implicit FROM [SHOW INDEXES FROM regional_by_row_table]
ORDER BY index_name, seq_in_index
----
primary                      crdb_region  true
primary                      pk           false
primary                      pk2          false
primary                      a            false
primary                      b            false
primary                      j            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  pk           true
regional_by_row_table_b_key  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  pk           true
regional_by_row_table_j_idx  crdb_region  true
regional_by_row_table_j_idx  j            false
regional_by_row_table_j_idx  pk           true

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
                            pk INT8 NOT NULL,
                            pk2 INT8 NOT NULL,
                            a INT8 NOT NULL,
                            b INT8 NOT NULL,
                            j JSONB NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_table_a_idx (a ASC),
                            UNIQUE INDEX regional_by_row_table_b_key (b ASC),
                            INVERTED INDEX regional_by_row_table_j_idx (j),
                            FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_table]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_a_idx  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_b_key  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_j_idx  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_a_idx  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_b_key  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_j_idx  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@primary  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_a_idx  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_b_key  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_j_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_table
----
DATABASE multi_region_test_db  ALTER DATABASE multi_region_test_db CONFIGURE ZONE USING
                               range_min_bytes = 134217728,
                               range_max_bytes = 536870912,
                               gc.ttlseconds = 90000,
                               num_replicas = 5,
                               num_voters = 5,
                               constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                               voter_constraints = '{+region=ca-central-1: 2}',
                               lease_preferences = '[[+region=ca-central-1]]'

query T
EXPLAIN (OPT, CATALOG) SELECT * FROM regional_by_row_table
----
TABLE regional_by_row_table
 ├── pk int not null
 ├── pk2 int not null
 ├── a int not null
 ├── b int not null
 ├── j jsonb
 ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@100054) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── j_inverted_key bytes not null [inverted]
 ├── FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
 ├── CHECK (crdb_region IN (x'40':::@100054, x'80':::@100054, x'c0':::@100054))
 ├── PRIMARY INDEX primary
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@100054) [hidden] (implicit)
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    ├── 1 replicas: [+region=us-east-1]
 │    │    │    └── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    ├── 1 replicas: [+region=us-east-1]
 │                   │    └── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── INDEX regional_by_row_table_a_idx
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@100054) [hidden] (implicit)
 │    ├── a int not null
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    ├── 1 replicas: [+region=us-east-1]
 │    │    │    └── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    ├── 1 replicas: [+region=us-east-1]
 │                   │    └── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── UNIQUE INDEX regional_by_row_table_b_key
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@100054) [hidden] (implicit)
 │    ├── b int not null
 │    ├── pk int not null (storing)
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    ├── 1 replicas: [+region=us-east-1]
 │    │    │    └── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    ├── 1 replicas: [+region=us-east-1]
 │                   │    └── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── INVERTED INDEX regional_by_row_table_j_idx
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@100054) [hidden] (implicit)
 │    ├── j_inverted_key bytes not null [inverted]
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    ├── 1 replicas: [+region=us-east-1]
 │    │    │    └── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    ├── 1 replicas: [+region=us-east-1]
 │         │         │    └── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    ├── 1 replicas: [+region=us-east-1]
 │                   │    └── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── UNIQUE WITHOUT INDEX (pk)
 └── UNIQUE WITHOUT INDEX (b)
scan regional_by_row_table
 └── check constraint expressions
      └── crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
primary                      crdb_region  true
primary                      pk           false
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true
regional_by_row_table_j_idx  crdb_region  true
regional_by_row_table_j_idx  j            false

query TTTTIT colnames
SHOW TABLES
----
schema_name  table_name                                         type   owner  estimated_row_count  locality
public       parent_table                                       table  root   0                    REGIONAL BY TABLE IN PRIMARY REGION
public       regional_by_row_table                              table  root   0                    REGIONAL BY ROW
public       regional_by_row_table_explicit_crdb_region_column  table  root   0                    REGIONAL BY ROW

# Add a gc.ttlseconds to a partition and ensure it displays.
statement ok
ALTER PARTITION "us-east-1" OF INDEX public.regional_by_row_table@regional_by_row_table_a_idx
CONFIGURE ZONE USING gc.ttlseconds = 10

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  j JSONB NULL,
  crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  INVERTED INDEX regional_by_row_table_j_idx (j),
  FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING "gc.ttlseconds" = 10

# Prohibit certain actions on a REGIONAL BY ROW table.

statement error cannot set PARTITION BY on a table in a multi-region enabled database
ALTER TABLE regional_by_row_table PARTITION BY LIST (pk) (
  PARTITION "one" VALUES IN (1)
)

statement error cannot change the partitioning of an index if the table is part of a multi-region database
ALTER INDEX regional_by_row_table@regional_by_row_table_a_idx PARTITION BY LIST (pk2) (
  PARTITION one VALUES IN (1)
)

statement error cannot define PARTITION BY on a new INDEX in a multi-region database
CREATE INDEX bad_idx ON regional_by_row_table(a) PARTITION BY LIST (a) (
  PARTITION one VALUES IN (1)
)

statement error hash sharded indexes are not compatible with REGIONAL BY ROW tables
CREATE INDEX bad_idx ON regional_by_row_table(a) USING HASH WITH BUCKET_COUNT = 8

statement error hash sharded indexes are not compatible with REGIONAL BY ROW tables
ALTER TABLE regional_by_row_table ALTER PRIMARY KEY USING COLUMNS(pk2) USING HASH WITH BUCKET_COUNT = 8

statement error interleaved tables are not compatible with REGIONAL BY ROW tables
CREATE INDEX bad_idx ON regional_by_row_table(pk) INTERLEAVE IN PARENT parent_table(pk)

# Try add a new unique column.
statement ok
ALTER TABLE regional_by_row_table ADD COLUMN unique_col INT8 NOT NULL UNIQUE

statement ok
SELECT crdb_internal.validate_multi_region_zone_configs()

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  j JSONB NULL,
  crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
  unique_col INT8 NOT NULL,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  INVERTED INDEX regional_by_row_table_j_idx (j),
  UNIQUE INDEX regional_by_row_table_unique_col_key (unique_col ASC),
  FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region, unique_col)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING "gc.ttlseconds" = 10

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_table]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_a_idx  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_b_key  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_j_idx  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table@regional_by_row_table_unique_col_key  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_a_idx  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_b_key  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_j_idx  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table@regional_by_row_table_unique_col_key  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@primary  us-east-1
gc.ttlseconds = 10,
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_a_idx  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_b_key  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_j_idx  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table@regional_by_row_table_unique_col_key  us-east-1

statement ok
ALTER TABLE regional_by_row_table DROP COLUMN unique_col

# Insert some rows into the regional_by_row_table.
query TI
INSERT INTO regional_by_row_table (pk, pk2, a, b, j) VALUES
(1, 1, 2, 3, '{"a": "b"}'), (4, 4, 5, 6, '{"c": "d"}')
RETURNING crdb_region, pk
----
ap-southeast-2  1
ap-southeast-2  4

# Insert duplicate row for column a.
statement ok
INSERT INTO multi_region_test_db.regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('ca-central-1', 5, 5, 5, 5)

statement error could not create unique constraint "uniq_idx"\nDETAIL: Key \(a\)=\(5\) is duplicated
CREATE UNIQUE INDEX uniq_idx ON regional_by_row_table(a)

statement ok
DELETE FROM regional_by_row_table WHERE pk = 5;
CREATE UNIQUE INDEX uniq_idx ON regional_by_row_table(a)

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
primary                      crdb_region  true
primary                      pk           false
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true
regional_by_row_table_j_idx  crdb_region  true
regional_by_row_table_j_idx  j            false
uniq_idx                     a            false
uniq_idx                     crdb_region  true

statement ok
DROP INDEX uniq_idx

statement ok
INSERT INTO multi_region_test_db.regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
  ('ca-central-1', 5, 5, 5, 5),
  ('ca-central-1', 6, 6, 5, -5)

statement error could not create unique constraint "uniq_idx"\nDETAIL: Key \(a\)=\(5\) is duplicated
CREATE UNIQUE INDEX uniq_idx ON regional_by_row_table(a) WHERE b > 0

statement ok
DELETE FROM regional_by_row_table WHERE pk = 5;
CREATE UNIQUE INDEX uniq_idx ON regional_by_row_table(a) WHERE b > 0

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
('ca-central-1', 7, 7, 8, 9)
RETURNING crdb_region, pk
----
ca-central-1  7

query TI nodeidx=3
USE multi_region_test_db; INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES
(10, 10, 11, 12)
RETURNING crdb_region, pk
----
ca-central-1  10

query TI nodeidx=6
USE multi_region_test_db; INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES
(20, 20, 21, 22)
RETURNING crdb_region, pk
----
us-east-1  20

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
(gateway_region()::crdb_internal_region, 23, 23, 24, 25)
RETURNING crdb_region, pk
----
ap-southeast-2  23

query TT
SELECT start_key, end_key FROM [SHOW RANGE FROM TABLE regional_by_row_table FOR ROW ('ap-southeast-2', 1)]
----
NULL  NULL

query TIIII
SELECT crdb_region, pk, pk2, a, b FROM regional_by_row_table
ORDER BY pk
----
ap-southeast-2  1   1   2   3
ap-southeast-2  4   4   5   6
ca-central-1    6   6   5   -5
ca-central-1    7   7   8   9
ca-central-1    10  10  11  12
us-east-1       20  20  21  22
ap-southeast-2  23  23  24  25

query IIIIT colnames
SELECT * FROM regional_by_row_table ORDER BY pk
----
pk  pk2  a   b   j
1   1    2   3   {"a": "b"}
4   4    5   6   {"c": "d"}
6   6    5   -5  NULL
7   7    8   9   NULL
10  10   11  12  NULL
20  20   21  22  NULL
23  23   24  25  NULL

# Tests dropping a referenced column in REGIONAL BY ROW does not succeed.
statement error cannot drop column crdb_region as it is used to store the region in a REGIONAL BY ROW table\nHINT: You must change the table locality before dropping this table
ALTER TABLE regional_by_row_table DROP COLUMN crdb_region

# Test that a limited, ordered scan is efficient.
query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT * FROM regional_by_row_table
ORDER BY pk LIMIT 5] OFFSET 2
----
·
• limit
│ columns: (pk, pk2, a, b, j)
│ estimated row count: 5 (missing stats)
│ count: 5
│
└── • union all
    │ columns: (pk, pk2, a, b, j)
    │ ordering: +pk
    │ estimated row count: 15 (missing stats)
    │
    ├── • union all
    │   │ columns: (pk, pk2, a, b, j)
    │   │ ordering: +pk
    │   │ estimated row count: 10 (missing stats)
    │   │
    │   ├── • scan
    │   │     columns: (pk, pk2, a, b, j)
    │   │     ordering: +pk
    │   │     estimated row count: 5 (missing stats)
    │   │     table: regional_by_row_table@primary
    │   │     spans: /"@"-/"@"/PrefixEnd
    │   │     limit: 5
    │   │
    │   └── • scan
    │         columns: (pk, pk2, a, b, j)
    │         ordering: +pk
    │         estimated row count: 5 (missing stats)
    │         table: regional_by_row_table@primary
    │         spans: /"\x80"-/"\x80"/PrefixEnd
    │         limit: 5
    │
    └── • scan
          columns: (pk, pk2, a, b, j)
          ordering: +pk
          estimated row count: 5 (missing stats)
          table: regional_by_row_table@primary
          spans: /"\xc0"-/"\xc0"/PrefixEnd
          limit: 5

# Tests for locality optimized search.

# Split the table into 3 regions and change the leaseholders to be "local"
# according to the crdb_region column.
statement ok
ALTER TABLE regional_by_row_table SPLIT AT VALUES ('ca-central-1', 0), ('us-east-1', 0);
ALTER TABLE regional_by_row_table EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 'ap-southeast-2', 0), (ARRAY[4], 'ca-central-1', 0), (ARRAY[7], 'us-east-1', 0);

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE regional_by_row_table]
----
start_key  end_key    replicas  lease_holder
NULL       /"\x80"/0  {1}       1
/"\x80"/0  /"\xc0"/0  {4}       4
/"\xc0"/0  NULL       {7}       7

statement ok
SET locality_optimized_partitioned_index_scan = false

# Query with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• scan
  missing stats
  table: regional_by_row_table@primary
  spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1] [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8kN2q00AQgO99imWuVFbyV0EWhIimGKhNTQIKTSjb7FCCaTbubrCl5N0lm4taKYdz2sO5nJ9v5ps5gf7dAIMsWkSfc_KWzNPkG1lHP1eLT_GSvP4SZ3n2ffGGXDYo3NWy5c1me9wo-Wdj-LZB8uNrlEak-0U-Eq8kyXyeRTnxgUIrBS75HjWwNXhQUuiUrFBrqcbUyTbE4gDMpVC3XW_GdEmhkgqBncDUpkFgkI97UuQCleMCBYGG140de1Up7FS95-oIFLKOt5oRp4CwAMezeNIbRkKPhj4NAxrOaPgeyoGC7M3ZQRu-Q2DeQG_z9G71LIrDB_dlXf07XKvndj0r9q1UAhWKC71yuHLNUr6TnRP813h9tf-UN6WoO9lqfNRkd1RDscPpDi17VeFKycqumcLEcjYhUJupGkxB3NqS_c2_sHcP7N8DBw_CswvYHcrh1d8AAAD__97CZ-c=

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM regional_by_row_table WHERE pk = 1
----
│
└ Node 1
  └ *colexec.ParallelUnorderedSynchronizer
    ├ *colfetcher.ColBatchScan
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 1; SET tracing = off

# All rows are scanned at once without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/73/1/"\xc0"/1/0
Scan /Table/73/1/"@"/1/0
Scan /Table/73/1/"\x80"/1/0
fetched: /regional_by_row_table/primary/'ap-southeast-2'/1/pk2/a/b/j -> /1/2/3/'{"a": "b"}'
output row: [1 1 2 3 '{"a": "b"}']

statement ok
SET locality_optimized_partitioned_index_scan = true

# Same query with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• union all
│ limit: 1
│
├── • scan
│     missing stats
│     table: regional_by_row_table@primary
│     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│
└── • scan
      missing stats
      table: regional_by_row_table@primary
      spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysklFr2zAQx9_3KcQ9bUMjlpPCEAw8NocFsqSzDRvUJqjWEcQcy5Nk1hL83Yflh84jC43TR53up_vd3z6C_VUBhzRex58y8pYsk-1Xchf_uF1_XG3I68-rNEu_rd-QcYPBvdK1qHb3jzujf--cuK-QfP8SJzFpfpIPhBVku1ymcUZCoFBriRtxQAv8DhgUFBqjS7RWm7509A0r-QA8oKDqpnV9uaBQaoPAj-CUqxA4ZP2cBIVEMwuAgkQnVOWfPakUNUYdhHkECmkjasvJLIc8f3gf5DBj_olt6ziJGI1CGs1ptKDRDRQdBd26Jw_rxB6Bs45Oc2VXuJYv7fqk2NbaSDQoR3pFd2KbjX6nm1n4T-Pp0eHUmOZTY4omRTR_RkQWjRIVuTipxXiVtTooR9h_VYJLIkvQNrq2-KyPEfSOKPc47GV1a0q8Nbr0Y4bj1nO-ING64TYcDqvaX_nf6W-YXQOHZ-HFeXh-Dbw4C9-M4KAruld_AgAA__9L0Kp2

query T
EXPLAIN (VEC) SELECT * FROM regional_by_row_table WHERE pk = 1
----
│
└ Node 1
  └ *colexec.limitOp
    └ *colexec.SerialUnorderedSynchronizer
      ├ *colfetcher.ColBatchScan
      └ *colexec.ParallelUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykkXFr1EAQxf_3UwwDpa2sJJsqSEBIsRGD8a5eDhR64djeDudisrvubrDlyHeXS4Qa6Qm9_jnvzZv8XnaH_meDKVZ5mb9fwkv4sJh_hpv823V5Wczg7KqoltWX8hymC462ymjRrG_v1878Wgdx2xB8_ZgvcrA_4B3wGi4rCNRaOBPnfxwBZfEph9OTKyW2TrQnp8hQG0kz0ZLH9AY51gytMxvy3ri9tBsWCnmHacxQaduFvVwz3BhHmO4wqNAQprjcMyxISHJRjAwlBaGa4eyjuJl1qhXuHhlWVmifQrTC1erubbzCiEcxCC2BgwnfySHDeRdSyDjLEpZdsOw1y95g3TM0XXhg8kFsCVPes-O4-bHc2cj8RM7kIOcDnienRAOdNk6SIzkhrPtHCs3MK2OjZFqlVK0KwA-ixE_5ZQvy1mhP_7AculwzJLmlsZc3ndvQtTOb4TPjOB9ygyDJh9FNxqHQgzW86d9h_pxw8t_wxSQc93X_4ncAAAD___VzLXM=

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 1; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/73/1/"@"/1/0
fetched: /regional_by_row_table/primary/'ap-southeast-2'/1/pk2/a/b/j -> /1/2/3/'{"a": "b"}'
output row: [1 1 2 3 '{"a": "b"}']

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 10; SET tracing = off

# If the row is not found in the local region, the other regions are searched
# in parallel.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/73/1/"@"/10/0
Scan /Table/73/1/"\xc0"/10/0
Scan /Table/73/1/"\x80"/10/0
fetched: /regional_by_row_table/primary/'ca-central-1'/10/pk2/a/b -> /10/11/12
output row: [10 10 11 12 NULL]

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 10; SET tracing = off

# If the row is not found in the local region, the other regions are searched
# in parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/73/1/"@"/10/0
Scan /Table/73/1/"\x80"/10/0, /Table/73/1/"\xc0"/10/0
fetched: /regional_by_row_table/primary/'ca-central-1'/10/pk2/a/b -> /10/11/12
output row: [10 10 11 12 NULL]

statement ok
RESET vectorize

# The local region for this query is ca-central-1, so that span should be
# scanned in the first child of the limited union all.
query T nodeidx=3
USE multi_region_test_db; SET locality_optimized_partitioned_index_scan = true;
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• union all
│ limit: 1
│
├── • scan
│     missing stats
│     table: regional_by_row_table@primary
│     spans: [/'ca-central-1'/1 - /'ca-central-1'/1]
│
└── • scan
      missing stats
      table: regional_by_row_table@primary
      spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1] [/'us-east-1'/1 - /'us-east-1'/1]

# Tests using locality optimized search for lookup joins (including foreign
# key checks).
statement ok
CREATE TABLE parent (
  p_id INT PRIMARY KEY,
  FAMILY (p_id)
) LOCALITY REGIONAL BY ROW;

statement ok
CREATE TABLE child (
  c_id INT PRIMARY KEY,
  c_p_id INT REFERENCES parent (p_id),
  INDEX (c_p_id),
  FAMILY (c_id, c_p_id)
) LOCALITY REGIONAL BY ROW;

statement ok
INSERT INTO parent (crdb_region, p_id)
VALUES ('ap-southeast-2', 10), ('ca-central-1', 20), ('us-east-1', 30)

statement ok
INSERT INTO child (crdb_region, c_id, c_p_id)
VALUES ('ap-southeast-2', 10, 10), ('ca-central-1', 20, 20), ('us-east-1', 30, 30)

# Split the child table into 3 regions and change the leaseholders to be "local"
# according to the crdb_region column.
statement ok
ALTER TABLE child SPLIT AT VALUES ('ca-central-1', 0), ('us-east-1', 0);
ALTER TABLE child EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 'ap-southeast-2', 0), (ARRAY[4], 'ca-central-1', 0), (ARRAY[7], 'us-east-1', 0);

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE child]
----
start_key  end_key    replicas  lease_holder
NULL       /"\x80"/0  {1}       1
/"\x80"/0  /"\xc0"/0  {4}       4
/"\xc0"/0  NULL       {7}       7

statement ok
SET locality_optimized_partitioned_index_scan = false

# Anti join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (anti)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1'))
│
└── • scan
      missing stats
      table: child@primary
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
Scan /Table/75/1/"\x80"/10/0
Scan /Table/75/1/"\xc0"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0, /Table/74/1/"\x80"/10/0, /Table/74/1/"\xc0"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL

# Semi join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (semi)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1'))
│
└── • scan
      missing stats
      table: child@primary
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"\xc0"/10/0
Scan /Table/75/1/"@"/10/0
Scan /Table/75/1/"\x80"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0, /Table/74/1/"\x80"/10/0, /Table/74/1/"\xc0"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10]

# Inner join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1'))
│
└── • scan
      missing stats
      table: child@primary
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
Scan /Table/75/1/"\x80"/10/0
Scan /Table/75/1/"\xc0"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0, /Table/74/1/"\x80"/10/0, /Table/74/1/"\xc0"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10 10]

# Left join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join (left outer)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1'))
│
└── • scan
      missing stats
      table: child@primary
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"\xc0"/10/0
Scan /Table/75/1/"@"/10/0
Scan /Table/75/1/"\x80"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0, /Table/74/1/"\x80"/10/0, /Table/74/1/"\xc0"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10 10]

statement ok
SET locality_optimized_partitioned_index_scan = true

# Anti join with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (anti)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│
└── • lookup join (anti)
    │ table: parent@primary
    │ equality cols are key
    │ lookup condition: (p_id = c_p_id) AND (crdb_region = 'ap-southeast-2')
    │
    └── • union all
        │ limit: 1
        │
        ├── • scan
        │     missing stats
        │     table: child@primary
        │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
        │
        └── • scan
              missing stats
              table: child@primary
              spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0lNFr2zAQxt_3Vxz3kmRoRHacrggKLqvDXDy7SwwrNKZ4tui0OZYn2ZAS8r8P24HGoTNJur1Fp_vlvu9D5w3q3xkyXDie8ymE9zCbB1_gwbm_865dH4Y37iJcfPVG0G1IfogshW-fnbkDQz8IwbmvG2HYbStixfNy11c8ihSuIHmsf4xGcO3fwDBpiwYdRRDMZgsnBBMJ5jLlfrziGtkDGhgRLJRMuNZS1aVN0-Cma2SUoMiLqqzLEcFEKo5sg6UoM44Mw_h7xuc8TrkaUySY8jIWWfO3jQe7UGIVq2ckuCjiXDMYL3G5XF_SJY4N2jBBVTKwDWKbGG0Jyqp8mafL-IkjM7bkPE3GCZqSf6XpRUqVS5VyxdOOjGj7impffpDF2DxofH20eW4ck2PjsE-KYnJEFJorEWdwciJWV7InVqIE469S6CnR3EqR75KZdseEzwVn4DmzEK790IXbwPWRYLtwe4l5Uv6qCvgpRQ4yZzC0J3AFtrlbP9uCK1gPLDpgjNkGpXRqjY7L1DrTyMX_MlJ_rtaDy30rBNaDpOPtSHPTU8zNuS5krvlRq0Hrl8TTJ96-Pi0rlfA7JZNmTHsMGq4ppFyX7a3ZHty8uWqWex823gKbvbDVD0_eAlu98LQD00N42gtf9MMXvfDHAzjavvsTAAD__1G8QgQ=

query T
EXPLAIN (VEC) SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *rowexec.joinReader
      └ *colexec.limitOp
        └ *colexec.SerialUnorderedSynchronizer
          ├ *colfetcher.ColBatchScan
          └ *colexec.ParallelUnorderedSynchronizer
            ├ *colfetcher.ColBatchScan
            └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy0k2Fr2z4Qxt__P8VxUGz_0YjsuFAEBYfVZe48p0sMKzSmaLZotTmWJ8uQUvLdR-xA47CEtGPvotPzyz3P-fSCza8SGc7DOPyYwv9wPZt-gfvw7jaeRAnYV9E8nX-NHRgK8idZFvDtUzgLwU6mKYR3GyHYQ1nNtajMVlc_yAIuIX_Y_HAcmCRXYOd90aVOBpM5GLGswebOFuEQR59DsM6uJH_UfHlmIcFKFSLhS9Egu0cXM4K1VrloGqU3pZdOEBUrZJSgrOrWbMoZwVxpgewFjTSlQIYp_16KmeCF0COKBAthuCy7v-3yBbWWS66fkeC85lXDYLTAxWJ1QRc4cumIAq8KcEGZJ6GR4LQ1DAKXBB5ma4KqNa-9G8MfBTJ3Td7nzz3VX7D1dpof76CfVxuN0JKX0FZKF0KLYuAkW__BeKI-qHrkDS3HcikNuAet0LeM5kbJajuZ8bBN-lwLBnF4ncIkSSO4mUYJEuw3cWdisVI_2xp-KFmBqhjYwRguIfC2exn4cAkry6cWYyxwKaXnvnPaTMfvDOL_qyCbd7yyLnajEFhZ-SDbieH8t4SbiaZWVSP2NubQ988IiuJR9NvXqFbn4larvGvTH6cd1xUK0Zj-1usPUdVddS9sF3b_BvaOwuMBTPfh8VHYPw77R-HzPThb__c7AAD__2PDzTk=

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\xc0"/20/0
Scan /Table/75/1/"\x80"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\x80"/20/0, /Table/75/1/"\xc0"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL

statement ok
RESET vectorize

# Semi join with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (semi)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region = 'ap-southeast-2')
│ remote lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@primary
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@primary
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyslNFr2zAQxt_3Vxz3kmRoRHacUQQBl9VhLm7SxYYVGlM8--i8OZYny5AS8r8P24HGocuStm_R6fvpPr7LeYPlnwwF-o7nfAngI0wX8xu4d-5uvUt3Bv0r1w_8b94AuoL4Z5ol8P2rs3DAuas10O8qikhRrneS4iFNYALxQ_1jAJezK-jHbc3ggxDm06nvBGAiw1wmNItWVKK4RwNDhoWSMZWlVHVp0wjcZI2CM0zzotJ1OWQYS0UoNqhTnREKDKIfGS0oSkgNOTJMSEdp1jzbuLcLla4i9YQM_SLKSwHDJS6X6wu-xKHBG2ZeaQG2wWwTwy1DWennfqWOHgmFsWWv82Sc4Sl-L0_PVqpcqoQUJR0b4fYF1zP5SRZD80D4cmvztXGMTo3DPiuK0QlRlKTSKIOzE7G6lr10lWow_mmFnxPNtUzzXTLjbpvgqSABnjMNwHduXLieuzNk2O7bXmKelL-rAn7JNAeZC-jbI5iAbe7Wz7ZgAuuexXtCCNvgnI-tATJc0Epqguy_dP11WPcu9nkG617ceXBw2pSsc6JZUFnIvKST_o-8Hh8lj9SOvJSViulWybhp0x7nDdcUEip1e2u2BzdvrpqN2oeNt8DmUdg6Do_eAltH4XEH5ofw-Cj8-QAOtx_-BgAA__9j5gBo

query T
EXPLAIN (VEC) SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colexec.ParallelUnorderedSynchronizer
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykk-Fq2zAQgP_vKY6D4nhoRHYyKIKCy-oyd27SxYEVGlM0-2i12ZYny5BS8u4jdqB1Wbp0-xed7tN9uTs_YvOrQIFJGIeflvAezhfzS7gJr6_i02gGo7MoWSZfYxeGCdm9KnL49jlchBBeb3NgNMyopaHK7lLqW5XDCWS32x8unM7OYJT1MY-7KZwmYKmsYSTdHSEhjr6E4BydKXlnZHnkIMNK5zSTJTUobtDDlGFtdEZNo8029NglRPkaBWeoqrq123DKMNOGUDyiVbYgFLiU3wtakMzJjDkyzMlKVXTPdv8sqI0qpXlAhkktq0bAeIWr1fqYr3Ds8TEHWeXggbb3ZJDhvLUCAo8FPqYbhrq1T7UbK-8Ihbdh_-bnHeoX7NwO8_H3-jxpNGSULKCttMnJUD4wSTd_EJ_pD7oe-0PlWJXKgrdXhb-lNRdaVbvOTIZllg81CYjD8yUk4WUEF_Nohgz7RXzWsVjrn20NP7SqQFcCRsEETiDwd3sZTOEE1s6UO0KIwOOcf5y6yHBBpbYExV_p7Wezdo6f8wzWTjZ40D1sSpO3tGZBTa2rhl6MaV_TU4aU31E_8ka3JqMro7OuTH-cd1wXyKmx_a3fH6Kqu-rW-jns_Q_svwpPBjB_CU9ehacv4HTz7ncAAAD__9WDi6Q=

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10]

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\xc0"/20/0
Scan /Table/75/1/"\x80"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20]

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\x80"/20/0, /Table/75/1/"\xc0"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20]

statement ok
RESET vectorize

# Inner join with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region = 'ap-southeast-2')
│ remote lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@primary
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@primary
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk1Fr2zAQx9_3KY57STM0IjvOKIKCy-oyl8zunMAGjSmefXTaHMuTZMgI-e4j9qBxaLOk3Zt10k_35yffGs2vEgXOgmnwYQ5v4TqJP8Fd8PV2ehlGcHYVzuazz9Mh9A_k32VZQBhFQQI3cRhBnWmqLMQR1PeygAvI79uPLx-DJIC8qzk8hfj6ehbMwUWGlSooypZkUNyhgynDWqucjFF6W1q3B8JihYIzlFXd2G05ZZgrTSjWaKUtCQXOs28lJZQVpEccGRZkM1m217ZB_VrLZaZ_I8NZnVVGwGiBi8XqnC9w5PCWiRsrwHeY72K6Yaga-9jP2OyBUDgb9rJMzgmZ8v-V6TFKUyldkKaiFyPdPJE6Uu9UPXL3Dj7d2n2pjvGxOvyTVIyPUGFIy6yEk414_chTuZQWnGej8FPU3ChZ_TUz6bfphmpHzVSpn00NP5SsQFUCzvwxXIDvDuEyuoIz34MLWA08PhBC-A7nfOINkWFCS2UJyn_S24lfDc53eQarQd67cNh7DuaPn9XgnaIhIVOrytBR_x7fPhUVD9Q9r1GNzulWq7xt0y3jlmsLBRnb7brdIqzarXZ6dmHnNbB7EPYOw-PXwN5BeNKD-T48OQi_34PTzZs_AQAA___5TfW-

query T
EXPLAIN (VEC) SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colexec.ParallelUnorderedSynchronizer
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykk2Fr2zAQhr_vVxwHxcnQiGxnUAQFl9Vj7jyncwobNKZo9tFqsy1PliGj5L-P2IHGYena7Vt00qN78p78gO3PEgUuwzh8dw2v4X26-AQ34der-DxKYHIRLa-Xn-MpjA_k96osIEqSMIXLRZRAIw3VFhYJNLeqgDPIb_sfXz6EaQj5UHN5BudLsFQ1MJHT3aaEOPoYgnNyoeSdkdWJgwxrXVAiK2pR3KCLGcPG6JzaVptt6aE_EBVrFJyhqpvObssZw1wbQvGAVtmSUOC1_FZSSrIgM-PIsCArVdlf2_-JoDGqkuYXMlw2sm4FzFa4Wq1P-QpnLp9xkHUBLmh7TwYZLjorIHBZ4GG2Yag7-9i7tfKOULgb9m9-7nP9gp3b83y8oz6PGi0ZJUvoam0KMlSMTLLNH8QT_UY3M2-sHKtKWXCPqvCXRHOpVb1Lxh-3GV7bXjSx1j-6Br5rVYOuBUwCH84g8KZwnlzAJJjDGaydOXeEEIHLOX87nyLDlCptCcq_0ttPYe2c7vMM1k4-unA6GgcL_KMx-C-JIaW20XVLByM5FnDGkIo7Gsbb6s7kdGV03rcZloue6wsFtXbY9YZFVPdb_RPeh93_gb0nYX8E80PYfxKeH8DZ5tXvAAAA___ix4EJ

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10 10]

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\xc0"/20/0
Scan /Table/75/1/"\x80"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20 20]

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\x80"/20/0, /Table/75/1/"\xc0"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20 20]

statement ok
RESET vectorize

# Left join with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join (left outer)
│ table: parent@primary
│ equality cols are key
│ lookup condition: (p_id = c_p_id) AND (crdb_region = 'ap-southeast-2')
│ remote lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@primary
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@primary
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJyslFFr2zAQx9_3KY57STM0IjvOKIKCy-qwFM_uHI8NGlM8--i8OZYny5AS8t1H5EHj0GZJuzfrdL-7P__zaY3N7xIFzj3f-xDDW5hG4Se49b7d-JezAM6uZvN4_tkfQj8h-1GUOfjeNIbrcBZAnSqqNIQB1HdFDheQ3ZmPrx-9yIOsi1k8gXA6nXsx2MiwkjkF6ZIaFLdoYcKwVjKjppFqG1qbhFm-QsEZFlXd6m04YZhJRSjWqAtdEgqM0-8lRZTmpEYcGeak06I0ZY1Ot1bFMlUPyHBep1UjYLTAxWJ1zhc4srhhwlYLcC3m2phsGMpWP_ZrdHpPKKwNe5km6wRN2f_S9CilraTKSVHek5FsnlAdyHeyHtl7iU-3tl9qx_hYO9yTrBgfYUVDqkhLONkRpy_ZL5aFButZKfwUa65lUf11ZtJvEz_UJLolC7_EXmRWDRl2y7ZjmS_lr7aGn7KoQFYCztwxXIBrD-EyuIIz14ELWA0cPhBCuBbnfOIMkWFES6kJyn_S24dgNTjf5RmsBlmv4LA3JuaOn7XHOcWeiJpaVg0d9U_y7Qgpv6du7I1sVUY3SmamTXcMDWcCOTW6u7W7w6wyV2ardmHrNbB9EHYOw-PXwM5BeNKD-T48OQi_34OTzZs_AQAA__-3xvwD

query T
EXPLAIN (VEC) SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colexec.ParallelUnorderedSynchronizer
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJykk2FrnEwQx98_n2IYCHf3sOVWvUJYCBgaQ02tpp6lhZyErQ7JturadYUL4b57iQYSQy9N2nfuzP5nfv5n9ha7nxUKXAdR8C6D_-E0TT7CRfD1PDoOY5ifhOts_SlawPRCca2qEqLgNIOzJIyhlYYaC0kM7aUq4QiKy-Hjy_sgDaAYYw7P4XgNluoW5nJxn5QQhR8CmB2cKHllZH0wQ4aNLimWNXUoLtDBnGFrdEFdp81d6Ha4EJZbFJyhatre3oVzhoU2hOIWrbIVocBMfqsoJVmSWXJkWJKVqhrKDv_gt0bV0twgw3Urm07AcoObzfaQb3Dp8CUH2ZTggLbXZJBh0lsBvsN8F_MdQ93bh96dlVeEwtmxv-NzXsrn37O9jMfdy_OA0ZFRsoK-0aYkQ-WEJN_9BjzWb3S7dKfIkaqVBWcvCn-NNWdaNffOeNM22U1LYty-5HMWpMMOIsNxCx9ZFmn9o2_hu1YN6EbA3PfgCHx3AcfxCcz9FRzBdrbiMyGE73DO364WyDClWluC6o_quxeynR0-1jPYzopJwcVkTMz39trjvcaelLpWNx09GdU-43OGVF7ROPZO96agc6OLoc14TAbdECips2PWHQ9hM6SG1X4sdv5F7D4r9iZi_lTsPStePRHnu_9-BQAA___eN4dO

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/10/0
fetched: /child/primary/'ap-southeast-2'/10/c_p_id -> /10
Scan /Table/74/1/"@"/10/0
fetched: /parent/primary/'ap-southeast-2'/10 -> NULL
output row: [10 10 10]

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\xc0"/20/0
Scan /Table/75/1/"\x80"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20 20]

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/75/1/"@"/20/0
Scan /Table/75/1/"\x80"/20/0, /Table/75/1/"\xc0"/20/0
fetched: /child/primary/'ca-central-1'/20/c_p_id -> /20
Scan /Table/74/1/"@"/20/0
Scan /Table/74/1/"\x80"/20/0, /Table/74/1/"\xc0"/20/0
fetched: /parent/primary/'ca-central-1'/20 -> NULL
output row: [20 20 20]

statement ok
RESET vectorize

query T
SELECT * FROM [EXPLAIN INSERT INTO child VALUES (1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: child(c_id, c_p_id, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 4 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: child@primary
│           │ lookup condition: (column1 = c_id) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column1 = c_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: crdb_region_default != crdb_region
│           │
│           └── • scan buffer
│                 label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ table: parent@primary
            │ equality cols are key
            │ lookup condition: (column2 = p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │
            └── • lookup join (anti)
                │ table: parent@primary
                │ equality cols are key
                │ lookup condition: (column2 = p_id) AND (crdb_region = 'ap-southeast-2')
                │
                └── • scan buffer
                      label: buffer 1

query T
SELECT * FROM [EXPLAIN UPSERT INTO child VALUES (1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: child(c_id, c_p_id, crdb_region)
│   │ arbiter constraints: primary
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • cross join (left outer)
│               │
│               ├── • values
│               │     size: 3 columns, 1 row
│               │
│               └── • union all
│                   │ limit: 1
│                   │
│                   ├── • scan
│                   │     missing stats
│                   │     table: child@primary
│                   │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                   │
│                   └── • scan
│                         missing stats
│                         table: child@primary
│                         spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ table: parent@primary
            │ equality cols are key
            │ lookup condition: (column2 = p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │
            └── • lookup join (anti)
                │ table: parent@primary
                │ equality cols are key
                │ lookup condition: (column2 = p_id) AND (crdb_region = 'ap-southeast-2')
                │
                └── • scan buffer
                      label: buffer 1

query T
SELECT * FROM [EXPLAIN DELETE FROM parent WHERE p_id = 1] OFFSET 2
----
·
• root
│
├── • delete
│   │ from: parent
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • union all
│           │ limit: 1
│           │
│           ├── • scan
│           │     missing stats
│           │     table: parent@primary
│           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│           │
│           └── • scan
│                 missing stats
│                 table: parent@primary
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: child@child_c_p_id_idx
            │ lookup condition: (p_id = c_p_id) AND (crdb_region = 'ap-southeast-2')
            │ remote lookup condition: (p_id = c_p_id) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │
            └── • scan buffer
                  label: buffer 1

# Tests creating a index and a unique constraint on a REGIONAL BY ROW table.
statement ok
CREATE INDEX new_idx ON regional_by_row_table(a, b)

# The validation query to create the unique constraint should be efficient (see
# #56201).
statement ok
CREATE TABLE t56201 (a INT, b STRING, c STRING NOT NULL) LOCALITY REGIONAL BY ROW;
ALTER TABLE t56201 INJECT STATISTICS '[
  {
    "columns": ["a"],
    "distinct_count": 3,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  },
  {
    "columns": ["b"],
    "distinct_count": 999900,
    "null_count": 5,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  },
  {
    "columns": ["c"],
    "distinct_count": 999999,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  }
]';
ALTER TABLE t56201 ADD CONSTRAINT key_a_b UNIQUE (a, b);

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT a, b
FROM t56201
WHERE a IS NOT NULL AND b IS NOT NULL
GROUP BY a, b
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (a, b)
│ estimated row count: 1
│
└── • limit
    │ columns: (a, b, count_rows)
    │ estimated row count: 1
    │ count: 1
    │
    └── • filter
        │ columns: (a, b, count_rows)
        │ estimated row count: 333,300
        │ filter: count_rows > 1
        │
        └── • group
            │ columns: (a, b, count_rows)
            │ estimated row count: 999,900
            │ aggregate 0: count_rows()
            │ group by: a, b
            │ ordered: +a,+b
            │
            └── • union all
                │ columns: (a, b)
                │ ordering: +a,+b
                │ estimated row count: 999,995
                │
                ├── • union all
                │   │ columns: (a, b)
                │   │ ordering: +a,+b
                │   │ estimated row count: 666,663
                │   │
                │   ├── • filter
                │   │   │ columns: (a, b)
                │   │   │ ordering: +a,+b
                │   │   │ estimated row count: 333,332
                │   │   │ filter: b IS NOT NULL
                │   │   │
                │   │   └── • scan
                │   │         columns: (a, b)
                │   │         ordering: +a,+b
                │   │         estimated row count: 333,333 (33% of the table; stats collected <hidden> ago)
                │   │         table: t56201@key_a_b
                │   │         spans: /"@"/!NULL-/"@"/PrefixEnd
                │   │
                │   └── • filter
                │       │ columns: (a, b)
                │       │ ordering: +a,+b
                │       │ estimated row count: 333,332
                │       │ filter: b IS NOT NULL
                │       │
                │       └── • scan
                │             columns: (a, b)
                │             ordering: +a,+b
                │             estimated row count: 333,333 (33% of the table; stats collected <hidden> ago)
                │             table: t56201@key_a_b
                │             spans: /"\x80"/!NULL-/"\x80"/PrefixEnd
                │
                └── • filter
                    │ columns: (a, b)
                    │ ordering: +a,+b
                    │ estimated row count: 333,332
                    │ filter: b IS NOT NULL
                    │
                    └── • scan
                          columns: (a, b)
                          ordering: +a,+b
                          estimated row count: 333,333 (33% of the table; stats collected <hidden> ago)
                          table: t56201@key_a_b
                          spans: /"\xc0"/!NULL-/"\xc0"/PrefixEnd

statement ok
CREATE UNIQUE INDEX key_b_partial ON t56201 (b) WHERE a > 0;

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT b
FROM t56201@key_b_partial
WHERE b IS NOT NULL AND a > 0
GROUP BY b
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (b)
│ estimated row count: 1
│
└── • limit
    │ columns: (b, count_rows)
    │ estimated row count: 1
    │ count: 1
    │
    └── • filter
        │ columns: (b, count_rows)
        │ estimated row count: 111,111
        │ filter: count_rows > 1
        │
        └── • group
            │ columns: (b, count_rows)
            │ estimated row count: 333,333
            │ aggregate 0: count_rows()
            │ group by: b
            │ ordered: +b
            │
            └── • project
                │ columns: (b)
                │ ordering: +b
                │
                └── • union all
                    │ columns: (b, crdb_region, rowid)
                    │ ordering: +b
                    │ estimated row count: 333,333
                    │
                    ├── • union all
                    │   │ columns: (b, crdb_region, rowid)
                    │   │ ordering: +b
                    │   │ estimated row count: 222,222
                    │   │
                    │   ├── • scan
                    │   │     columns: (b, crdb_region, rowid)
                    │   │     ordering: +b
                    │   │     estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                    │   │     table: t56201@key_b_partial (partial index)
                    │   │     spans: /"@"/!NULL-/"@"/PrefixEnd
                    │   │
                    │   └── • scan
                    │         columns: (b, crdb_region, rowid)
                    │         ordering: +b
                    │         estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                    │         table: t56201@key_b_partial (partial index)
                    │         spans: /"\x80"/!NULL-/"\x80"/PrefixEnd
                    │
                    └── • scan
                          columns: (b, crdb_region, rowid)
                          ordering: +b
                          estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                          table: t56201@key_b_partial (partial index)
                          spans: /"\xc0"/!NULL-/"\xc0"/PrefixEnd

statement ok
CREATE UNIQUE INDEX key_c_partial ON t56201 (c) WHERE a = 1;

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT c
FROM t56201
WHERE c IS NOT NULL AND a = 1
GROUP BY c
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (c)
│ estimated row count: 1
│
└── • limit
    │ columns: (c, count_rows)
    │ estimated row count: 1
    │ count: 1
    │
    └── • filter
        │ columns: (c, count_rows)
        │ estimated row count: 111,111
        │ filter: count_rows > 1
        │
        └── • group
            │ columns: (c, count_rows)
            │ estimated row count: 333,333
            │ aggregate 0: count_rows()
            │ group by: c
            │ ordered: +c
            │
            └── • union all
                │ columns: (c)
                │ ordering: +c
                │ estimated row count: 333,333
                │
                ├── • union all
                │   │ columns: (c)
                │   │ ordering: +c
                │   │ estimated row count: 222,222
                │   │
                │   ├── • scan
                │   │     columns: (c)
                │   │     ordering: +c
                │   │     estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                │   │     table: t56201@key_c_partial (partial index)
                │   │     spans: /"@"-/"@"/PrefixEnd
                │   │
                │   └── • scan
                │         columns: (c)
                │         ordering: +c
                │         estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                │         table: t56201@key_c_partial (partial index)
                │         spans: /"\x80"-/"\x80"/PrefixEnd
                │
                └── • scan
                      columns: (c)
                      ordering: +c
                      estimated row count: 111,111 (11% of the table; stats collected <hidden> ago)
                      table: t56201@key_c_partial (partial index)
                      spans: /"\xc0"-/"\xc0"/PrefixEnd

statement ok
ALTER TABLE regional_by_row_table ADD CONSTRAINT unique_b_a UNIQUE(b, a)

# We should plan uniqueness checks for all unique indexes in
# REGIONAL BY ROW tables.
# TODO(treilly): The constraint check for uniq_idx should use uniq_idx but due
# to stats issues w/ empty stats, partial indexes and multicol stats its not.
# Hopefully fixing #67583 (and possibly #67479) will resolve this.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES (1, 1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 8 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@primary
│           │ lookup condition: (column1 = pk) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column1 = pk) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: crdb_region_default != crdb_region
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ lookup condition: (column4 = b) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column4 = b) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@new_idx
│           │ lookup condition: ((column3 = a) AND (crdb_region = 'ap-southeast-2')) AND (b > 0)
│           │ remote lookup condition: ((column3 = a) AND (crdb_region IN ('ca-central-1', 'us-east-1'))) AND (b > 0)
│           │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
│           │
│           └── • filter
│               │ estimated row count: 1
│               │ filter: column4 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ lookup condition: ((column3 = a) AND (column4 = b)) AND (crdb_region = 'ap-southeast-2')
            │ remote lookup condition: ((column3 = a) AND (column4 = b)) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_b_key"\nDETAIL: Key \(b\)=\(3\) already exists\.
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('us-east-1', 2, 3, 2, 3)

# The conflict columns in an upsert should only include the primary key,
# not the region column.
# TODO(treilly): The constraint check for uniq_idx should use uniq_idx but due
# to stats issues w/ empty stats, partial indexes and multicol stats its not.
# Hopefully fixing #67583 (and possibly #67479) will resolve this.
query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('us-east-1', 2, 3, 2, 3)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │ arbiter constraints: primary
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • cross join (left outer)
│               │
│               ├── • values
│               │     size: 6 columns, 1 row
│               │
│               └── • union all
│                   │ limit: 1
│                   │
│                   ├── • scan
│                   │     missing stats
│                   │     table: regional_by_row_table@primary
│                   │     spans: [/'ap-southeast-2'/2 - /'ap-southeast-2'/2]
│                   │
│                   └── • scan
│                         missing stats
│                         table: regional_by_row_table@primary
│                         spans: [/'ca-central-1'/2 - /'ca-central-1'/2] [/'us-east-1'/2 - /'us-east-1'/2]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ lookup condition: (column5 = b) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column5 = b) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@new_idx
│           │ lookup condition: ((column4 = a) AND (crdb_region = 'ap-southeast-2')) AND (b > 0)
│           │ remote lookup condition: ((column4 = a) AND (crdb_region IN ('ca-central-1', 'us-east-1'))) AND (b > 0)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • filter
│               │ filter: column5 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ lookup condition: ((column4 = a) AND (column5 = b)) AND (crdb_region = 'ap-southeast-2')
            │ remote lookup condition: ((column4 = a) AND (column5 = b)) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

# TODO(treilly): The constraint check for uniq_idx should use uniq_idx but due
# to stats issues w/ empty stats, partial indexes and multicol stats its not.
# Hopefully fixing #67583 (and possibly #67479) will resolve this.
query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b)
VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │ arbiter constraints: primary
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • lookup join (left outer)
│               │ table: regional_by_row_table@primary
│               │ equality cols are key
│               │ lookup condition: (column2 = pk) AND (crdb_region = 'ap-southeast-2')
│               │ remote lookup condition: (column2 = pk) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│               │ locking strength: for update
│               │
│               └── • render
│                   │ estimated row count: 2
│                   │
│                   └── • values
│                         size: 5 columns, 2 rows
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ lookup condition: (column5 = b) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column5 = b) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@new_idx
│           │ lookup condition: ((column4 = a) AND (crdb_region = 'ap-southeast-2')) AND (b > 0)
│           │ remote lookup condition: ((column4 = a) AND (crdb_region IN ('ca-central-1', 'us-east-1'))) AND (b > 0)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • filter
│               │ filter: column5 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ lookup condition: ((column4 = a) AND (column5 = b)) AND (crdb_region = 'ap-southeast-2')
            │ remote lookup condition: ((column4 = a) AND (column5 = b)) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
            │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

query TIIIIIIIIT colnames
SELECT * FROM (VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)) AS v(crdb_region, pk, pk2, a, b)
LEFT JOIN regional_by_row_table t ON v.pk = t.pk;
----
crdb_region   pk  pk2  a   b   pk    pk2   a     b     j
us-east-1     23  24   25  26  23    23    24    25    NULL
ca-central-1  30  30   31  32  NULL  NULL  NULL  NULL  NULL

# One row already exists, one row is new.
statement ok
UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b)
VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)

query TIIII colnames
SELECT crdb_region, pk, pk2, a, b FROM regional_by_row_table
ORDER BY pk
----
crdb_region     pk  pk2  a   b
ap-southeast-2  1   1    2   3
ap-southeast-2  4   4    5   6
ca-central-1    6   6    5   -5
ca-central-1    7   7    8   9
ca-central-1    10  10   11  12
us-east-1       20  20   21  22
us-east-1       23  24   25  26
ca-central-1    30  30   31  32

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  j JSONB NULL,
  crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  INVERTED INDEX regional_by_row_table_j_idx (j),
  UNIQUE INDEX uniq_idx (a ASC) WHERE b > 0:::INT8,
  INDEX new_idx (a ASC, b ASC),
  UNIQUE INDEX unique_b_a (b ASC, a ASC),
  FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING "gc.ttlseconds" = 10

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
new_idx                      a            false
new_idx                      b            false
new_idx                      crdb_region  true
primary                      crdb_region  true
primary                      pk           false
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true
regional_by_row_table_j_idx  crdb_region  true
regional_by_row_table_j_idx  j            false
uniq_idx                     a            false
uniq_idx                     crdb_region  true
unique_b_a                   a            false
unique_b_a                   b            false
unique_b_a                   crdb_region  true

# Tests changing the PK of a regional by row table.

# Insert a row with a conflicting pk2, and check ALTER PRIMARY KEY fails.
statement ok
INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES (1000, 1, 1000, 2000)

statement error Key \(pk2\)=\(1\) already exists\.
ALTER TABLE regional_by_row_table ALTER PRIMARY KEY USING COLUMNS (pk2)

statement ok
DELETE FROM regional_by_row_table WHERE pk = 1000

statement ok
ALTER TABLE regional_by_row_table ALTER PRIMARY KEY USING COLUMNS (pk2)

query T
SELECT
  create_statement
FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
  pk INT8 NOT NULL,
  pk2 INT8 NOT NULL,
  a INT8 NOT NULL,
  b INT8 NOT NULL,
  j JSONB NULL,
  crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
  CONSTRAINT "primary" PRIMARY KEY (pk2 ASC),
  UNIQUE INDEX regional_by_row_table_pk_key (pk ASC),
  INDEX regional_by_row_table_a_idx (a ASC),
  UNIQUE INDEX regional_by_row_table_b_key (b ASC),
  INVERTED INDEX regional_by_row_table_j_idx (j),
  UNIQUE INDEX uniq_idx (a ASC) WHERE b > 0:::INT8,
  INDEX new_idx (a ASC, b ASC),
  UNIQUE INDEX unique_b_a (b ASC, a ASC),
  FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
) LOCALITY REGIONAL BY ROW;
ALTER PARTITION "us-east-1" OF INDEX multi_region_test_db.public.regional_by_row_table@regional_by_row_table_a_idx CONFIGURE ZONE USING "gc.ttlseconds" = 10

query TT
SHOW ZONE CONFIGURATION FOR PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary
----
PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary  ALTER PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@primary CONFIGURE ZONE USING
                                                                   range_min_bytes = 134217728,
                                                                   range_max_bytes = 536870912,
                                                                   gc.ttlseconds = 90000,
                                                                   num_replicas = 5,
                                                                   num_voters = 5,
                                                                   constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                                   voter_constraints = '{+region=ap-southeast-2: 2}',
                                                                   lease_preferences = '[[+region=ap-southeast-2]]'

query TT
SHOW ZONE CONFIGURATION FOR PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a
----
PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a  ALTER PARTITION "ap-southeast-2" OF INDEX regional_by_row_table@unique_b_a CONFIGURE ZONE USING
                                                                      range_min_bytes = 134217728,
                                                                      range_max_bytes = 536870912,
                                                                      gc.ttlseconds = 90000,
                                                                      num_replicas = 5,
                                                                      num_voters = 5,
                                                                      constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                                      voter_constraints = '{+region=ap-southeast-2: 2}',
                                                                      lease_preferences = '[[+region=ap-southeast-2]]'

statement ok
CREATE TABLE regional_by_row_table_pk_defined_separately (
  pk int,
  CONSTRAINT "primary" PRIMARY KEY (pk ASC)
) LOCALITY REGIONAL BY ROW

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table_pk_defined_separately]
----
CREATE TABLE public.regional_by_row_table_pk_defined_separately (
                            pk INT8 NOT NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            FAMILY "primary" (pk, crdb_region)
) LOCALITY REGIONAL BY ROW

# Tests for REGIONAL BY TABLE AS
statement error cannot use column crdb_region_col which has type INT8 in REGIONAL BY ROW\nDETAIL: REGIONAL BY ROW AS must reference a column of type crdb_internal_region
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY,
  crdb_region_col int
) LOCALITY REGIONAL BY ROW AS crdb_region_col

statement error column no_exist_col in REGIONAL BY ROW AS does not exist
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY
) LOCALITY REGIONAL BY ROW AS no_exist_col

statement ok
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY,
  a int,
  b int,
  crdb_region_col crdb_internal_region AS (
    CASE
      WHEN pk <= 10 THEN 'us-east-1'
      ELSE 'ap-southeast-2'
    END
  ) STORED,
  INDEX (a),
  UNIQUE (b),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW AS crdb_region_col

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table_as]
----
CREATE TABLE public.regional_by_row_table_as (
                                               pk INT8 NOT NULL,
                                               a INT8 NULL,
                                               b INT8 NULL,
                                               crdb_region_col public.crdb_internal_region NOT NULL AS (CASE WHEN pk <= 10:::INT8 THEN 'us-east-1':::public.crdb_internal_region ELSE 'ap-southeast-2':::public.crdb_internal_region END) STORED,
                                               CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                               INDEX regional_by_row_table_as_a_idx (a ASC),
                                               UNIQUE INDEX regional_by_row_table_as_b_key (b ASC),
                                               FAMILY fam_0_pk_a_b_crdb_region_col (pk, a, b, crdb_region_col)
) LOCALITY REGIONAL BY ROW AS crdb_region_col

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_table_as]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table_as@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table_as@regional_by_row_table_as_a_idx  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_table_as@regional_by_row_table_as_b_key  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table_as@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table_as@regional_by_row_table_as_a_idx  ca-central-1
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_table_as@regional_by_row_table_as_b_key  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table_as@primary  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table_as@regional_by_row_table_as_a_idx  us-east-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_table_as@regional_by_row_table_as_b_key  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_table_as
----
DATABASE multi_region_test_db  ALTER DATABASE multi_region_test_db CONFIGURE ZONE USING
                               range_min_bytes = 134217728,
                               range_max_bytes = 536870912,
                               gc.ttlseconds = 90000,
                               num_replicas = 5,
                               num_voters = 5,
                               constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                               voter_constraints = '{+region=ca-central-1: 2}',
                               lease_preferences = '[[+region=ca-central-1]]'

query TI
INSERT INTO regional_by_row_table_as (pk) VALUES (1), (10), (20)
RETURNING crdb_region_col, pk
----
us-east-1       1
us-east-1       10
ap-southeast-2  20

query IIIT colnames
SELECT * FROM regional_by_row_table_as ORDER BY pk
----
pk  a     b     crdb_region_col
1   NULL  NULL  us-east-1
10  NULL  NULL  us-east-1
20  NULL  NULL  ap-southeast-2

# Tests dropping a referenced column in REGIONAL BY ROW does not succeed.
statement error cannot drop column crdb_region_col as it is used to store the region in a REGIONAL BY ROW table\nHINT: You must change the table locality before dropping this table
ALTER TABLE regional_by_row_table_as DROP COLUMN crdb_region_col

# We do not need uniqueness checks on pk since uniqueness can be inferred
# through the functional dependency between pk and the computed region column.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_as(pk, a, b, crdb_region_col)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 5 columns, 1 row
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table_as@regional_by_row_table_as_b_key
            │ lookup condition: (column3 = b) AND (crdb_region_col = 'ap-southeast-2')
            │ remote lookup condition: (column3 = b) AND (crdb_region_col IN ('ca-central-1', 'us-east-1'))
            │ pred: (column1 != pk) OR (crdb_region_col_comp != crdb_region_col)
            │
            └── • scan buffer
                  label: buffer 1

statement error pq: duplicate key value violates unique constraint "primary"\nDETAIL: Key \(pk\)=\(1\) already exists\.
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (1, 1, 1)

statement ok
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (30, 1, 1)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_as_b_key"\nDETAIL: Key \(b\)=\(1\) already exists\.
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (2, 1, 1)

# Verify that we plan single-region scans for REGIONAL BY ROW tables with a computed region.
query T
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table_as WHERE pk = 10] OFFSET 2
----
·
• scan
  missing stats
  table: regional_by_row_table_as@primary
  spans: [/'us-east-1'/10 - /'us-east-1'/10]

# Tests for altering the survivability of a REGIONAL BY ROW table.
statement ok
CREATE DATABASE alter_survive_db PRIMARY REGION "us-east-1" REGIONS "ca-central-1", "ap-southeast-2" SURVIVE REGION FAILURE

statement ok
USE alter_survive_db

# Create some tables to validate that their zone configurations are adjusted appropriately.
statement ok
CREATE TABLE t_regional_by_row () LOCALITY REGIONAL BY ROW

query TT
SHOW ZONE CONFIGURATION FROM TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 90000,
                                                  num_replicas = 5,
                                                  num_voters = 5,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '{+region=us-east-1: 2}',
                                                  lease_preferences = '[[+region=us-east-1]]'

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE t_regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  t_regional_by_row@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  t_regional_by_row@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  t_regional_by_row@primary  us-east-1

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE t_regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 5,
voter_constraints = '{+region=ap-southeast-2: 2}',
lease_preferences = '[[+region=ap-southeast-2]]'  t_regional_by_row@primary  ap-southeast-2
num_voters = 5,
voter_constraints = '{+region=ca-central-1: 2}',
lease_preferences = '[[+region=ca-central-1]]'  t_regional_by_row@primary  ca-central-1
num_voters = 5,
voter_constraints = '{+region=us-east-1: 2}',
lease_preferences = '[[+region=us-east-1]]'  t_regional_by_row@primary  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE t_regional_by_row
----
DATABASE alter_survive_db  ALTER DATABASE alter_survive_db CONFIGURE ZONE USING
                           range_min_bytes = 134217728,
                           range_max_bytes = 536870912,
                           gc.ttlseconds = 90000,
                           num_replicas = 5,
                           num_voters = 5,
                           constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                           voter_constraints = '{+region=us-east-1: 2}',
                           lease_preferences = '[[+region=us-east-1]]'

statement ok
ALTER DATABASE alter_survive_db SURVIVE ZONE FAILURE

query TT
SHOW ZONE CONFIGURATION FROM TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 90000,
                                                  num_replicas = 5,
                                                  num_voters = 3,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '[+region=us-east-1]',
                                                  lease_preferences = '[[+region=us-east-1]]'

# Test setting non-multi-region fields on tables behaves as appropriate.
statement ok
ALTER TABLE t_regional_by_row CONFIGURE ZONE USING gc.ttlseconds = 999

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE t_regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  t_regional_by_row@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  t_regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  t_regional_by_row@primary  us-east-1

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE t_regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  t_regional_by_row@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  t_regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  t_regional_by_row@primary  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE t_regional_by_row
----
TABLE t_regional_by_row  ALTER TABLE t_regional_by_row CONFIGURE ZONE USING
                         range_min_bytes = 134217728,
                         range_max_bytes = 536870912,
                         gc.ttlseconds = 999,
                         num_replicas = 5,
                         num_voters = 3,
                         constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                         voter_constraints = '[+region=us-east-1]',
                         lease_preferences = '[[+region=us-east-1]]'

query TT
SHOW ZONE CONFIGURATION FROM TABLE t_regional_by_row PARTITION "us-east-1"
----
PARTITION "us-east-1" OF TABLE t_regional_by_row  ALTER PARTITION "us-east-1" OF TABLE t_regional_by_row CONFIGURE ZONE USING
                                                  range_min_bytes = 134217728,
                                                  range_max_bytes = 536870912,
                                                  gc.ttlseconds = 999,
                                                  num_replicas = 5,
                                                  num_voters = 3,
                                                  constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                                  voter_constraints = '[+region=us-east-1]',
                                                  lease_preferences = '[[+region=us-east-1]]'


statement ok
CREATE DATABASE two_region_test_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2";
USE two_region_test_db

statement ok
CREATE TABLE t (pk INT PRIMARY KEY) LOCALITY REGIONAL BY ROW

query T
INSERT INTO t VALUES (1) RETURNING (crdb_region)
----
ap-southeast-2

query T nodeidx=3
USE two_region_test_db; INSERT INTO t VALUES (3) RETURNING (crdb_region)
----
ca-central-1

query T nodeidx=6
USE two_region_test_db; INSERT INTO t VALUES (6) RETURNING (crdb_region)
----
ca-central-1

query TI colnames
SELECT crdb_region, pk FROM t ORDER BY pk
----
crdb_region     pk
ap-southeast-2  1
ca-central-1    3
ca-central-1    6

statement ok
CREATE DATABASE add_regions WITH PRIMARY REGION "ca-central-1";
USE add_regions

statement ok
CREATE TABLE regional_by_row (
  pk INT PRIMARY KEY,
  i INT,
  INDEX(i),
  FAMILY (pk, i)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE regional_by_row_as (
  pk INT PRIMARY KEY,
  i INT,
  cr crdb_internal_region NOT NULL DEFAULT 'ca-central-1',
  INDEX(i),
  FAMILY (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS "cr";

query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 3,
                      num_voters = 3,
                      constraints = '{+region=ca-central-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 3,
                      num_voters = 3,
                      constraints = '{+region=ca-central-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

# Next, add a region. We expect this thing to succeed and add a partition +
# zone config corresponding to the regions to both the regional by row tables.
statement ok
ALTER DATABASE add_regions ADD REGION "us-east-1"

statement ok
SELECT crdb_internal.validate_multi_region_zone_configs()

query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@regional_by_row_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 4,
                      num_voters = 3,
                      constraints = '{+region=ca-central-1: 1, +region=us-east-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr


query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@regional_by_row_as_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 4,
                      num_voters = 3,
                      constraints = '{+region=ca-central-1: 1, +region=us-east-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

# Do the same thing as above, except with a different region.
statement ok
ALTER DATABASE add_regions ADD REGION "ap-southeast-2"

query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW


query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@regional_by_row_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@regional_by_row_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 5,
                      num_voters = 3,
                      constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@regional_by_row_as_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@regional_by_row_as_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE add_regions  ALTER DATABASE add_regions CONFIGURE ZONE USING
                      range_min_bytes = 134217728,
                      range_max_bytes = 536870912,
                      gc.ttlseconds = 90000,
                      num_replicas = 5,
                      num_voters = 3,
                      constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                      voter_constraints = '[+region=ca-central-1]',
                      lease_preferences = '[[+region=ca-central-1]]'

statement ok
CREATE DATABASE add_regions_in_txn WITH PRIMARY REGION "ca-central-1";
USE add_regions_in_txn

statement ok
CREATE TABLE regional_by_row (
  pk INT PRIMARY KEY,
  i INT,
  INDEX(i),
  FAMILY (pk, i)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE regional_by_row_as (
  pk INT PRIMARY KEY,
  i INT,
  cr crdb_internal_region NOT NULL DEFAULT 'ca-central-1',
  INDEX(i),
  FAMILY (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS "cr";

statement ok
BEGIN;
ALTER DATABASE add_regions_in_txn ADD REGION "us-east-1";
ALTER DATABASE add_regions_in_txn ADD REGION "ap-southeast-2";
COMMIT;


query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@regional_by_row_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@regional_by_row_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE add_regions_in_txn  ALTER DATABASE add_regions_in_txn CONFIGURE ZONE USING
                             range_min_bytes = 134217728,
                             range_max_bytes = 536870912,
                             gc.ttlseconds = 90000,
                             num_replicas = 5,
                             num_voters = 3,
                             constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                             voter_constraints = '[+region=ca-central-1]',
                             lease_preferences = '[[+region=ca-central-1]]'

statement ok
CREATE TABLE regional_by_row_like (LIKE regional_by_row)

query TT
SHOW CREATE TABLE regional_by_row_like
----
regional_by_row_like                            CREATE TABLE public.regional_by_row_like (
                                                pk INT8 NOT NULL,
                                                i INT8 NULL,
                                                crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL,
                                                rowid INT8 NOT VISIBLE NOT NULL DEFAULT unique_rowid(),
                                                CONSTRAINT "primary" PRIMARY KEY (rowid ASC),
                                                FAMILY "primary" (pk, i, crdb_region, rowid)
) LOCALITY REGIONAL BY TABLE IN PRIMARY REGION

statement ok
DROP TABLE regional_by_row_like;
CREATE TABLE regional_by_row_like (LIKE regional_by_row INCLUDING INDEXES)

query TT
SHOW CREATE TABLE regional_by_row_like
----
regional_by_row_like                            CREATE TABLE public.regional_by_row_like (
                                                pk INT8 NOT NULL,
                                                i INT8 NULL,
                                                crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                                                CONSTRAINT "primary" PRIMARY KEY (crdb_region ASC, pk ASC),
                                                INDEX regional_by_row_i_idx (crdb_region ASC, i ASC),
                                                FAMILY "primary" (pk, i, crdb_region)
) LOCALITY REGIONAL BY TABLE IN PRIMARY REGION


statement ok
DROP TABLE regional_by_row_like;
CREATE TABLE regional_by_row_like (LIKE regional_by_row INCLUDING ALL)

query TT
SHOW CREATE TABLE regional_by_row_like
----
regional_by_row_like                            CREATE TABLE public.regional_by_row_like (
                                                pk INT8 NOT NULL,
                                                i INT8 NULL,
                                                crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                                                CONSTRAINT "primary" PRIMARY KEY (crdb_region ASC, pk ASC),
                                                INDEX regional_by_row_i_idx (crdb_region ASC, i ASC),
                                                FAMILY "primary" (pk, i, crdb_region)
) LOCALITY REGIONAL BY TABLE IN PRIMARY REGION

statement ok
DROP TABLE regional_by_row_like

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@regional_by_row_as_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@regional_by_row_as_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE add_regions_in_txn  ALTER DATABASE add_regions_in_txn CONFIGURE ZONE USING
                             range_min_bytes = 134217728,
                             range_max_bytes = 536870912,
                             gc.ttlseconds = 90000,
                             num_replicas = 5,
                             num_voters = 3,
                             constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1, +region=us-east-1: 1}',
                             voter_constraints = '[+region=ca-central-1]',
                             lease_preferences = '[[+region=ca-central-1]]'

statement ok
CREATE TABLE regional_by_row_unique_in_column (
  a INT PRIMARY KEY,
  b INT UNIQUE,
  c INT,
  d INT,
  e INT,
  UNIQUE (d, e),
  FAMILY (a, b, c, d, e)
) LOCALITY REGIONAL BY ROW

query TT
SHOW CREATE TABLE regional_by_row_unique_in_column
----
regional_by_row_unique_in_column  CREATE TABLE public.regional_by_row_unique_in_column (
                                  a INT8 NOT NULL,
                                  b INT8 NULL,
                                  c INT8 NULL,
                                  d INT8 NULL,
                                  e INT8 NULL,
                                  crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (a ASC),
                                  UNIQUE INDEX regional_by_row_unique_in_column_b_key (b ASC),
                                  UNIQUE INDEX regional_by_row_unique_in_column_d_e_key (d ASC, e ASC),
                                  FAMILY fam_0_a_b_c_d_e_crdb_region (a, b, c, d, e, crdb_region)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE TABLE regional_by_row_fk (
  f INT PRIMARY KEY,
  g INT UNIQUE REFERENCES regional_by_row_unique_in_column(a),
  h INT UNIQUE REFERENCES regional_by_row_unique_in_column(b),
  i INT,
  j INT,
  CONSTRAINT ij_fk FOREIGN KEY (i, j) REFERENCES regional_by_row_unique_in_column(e, d),
  FAMILY (f, g, h, i, j)
) LOCALITY REGIONAL BY ROW

query TT
SHOW CREATE TABLE regional_by_row_fk
----
regional_by_row_fk          CREATE TABLE public.regional_by_row_fk (
                            f INT8 NOT NULL,
                            g INT8 NULL,
                            h INT8 NULL,
                            i INT8 NULL,
                            j INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (f ASC),
                            CONSTRAINT ij_fk FOREIGN KEY (i, j) REFERENCES public.regional_by_row_unique_in_column(e, d),
                            CONSTRAINT fk_g_ref_regional_by_row_unique_in_column FOREIGN KEY (g) REFERENCES public.regional_by_row_unique_in_column(a),
                            CONSTRAINT fk_h_ref_regional_by_row_unique_in_column FOREIGN KEY (h) REFERENCES public.regional_by_row_unique_in_column(b),
                            UNIQUE INDEX regional_by_row_fk_g_key (g ASC),
                            UNIQUE INDEX regional_by_row_fk_h_key (h ASC),
                            FAMILY fam_0_f_g_h_i_j_crdb_region (f, g, h, i, j, crdb_region)
) LOCALITY REGIONAL BY ROW

statement ok
CREATE DATABASE drop_regions PRIMARY REGION "ca-central-1" REGIONS "us-east-1", "ap-southeast-2";
USE drop_regions;
CREATE TABLE regional_by_row (
  pk INT PRIMARY KEY,
  i INT,
  INDEX(i),
  FAMILY (pk, i)
) LOCALITY REGIONAL BY ROW;
CREATE TABLE regional_by_row_as (
  pk INT PRIMARY KEY,
  i INT,
  cr crdb_internal_region NOT NULL DEFAULT 'ca-central-1',
  INDEX(i),
  FAMILY (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS "cr";

statement ok
ALTER DATABASE drop_regions DROP REGION "us-east-1"

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row@regional_by_row_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 4,
                       num_voters = 3,
                       constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@primary  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ap-southeast-2]',
lease_preferences = '[[+region=ap-southeast-2]]'  regional_by_row_as@regional_by_row_as_i_idx  ap-southeast-2
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 4,
                       num_voters = 3,
                       constraints = '{+region=ap-southeast-2: 1, +region=ca-central-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr


statement ok
BEGIN;
ALTER DATABASE drop_regions ADD REGION "us-east-1";
ALTER DATABASE drop_regions DROP REGION "ap-southeast-2";
COMMIT;

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row@regional_by_row_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 4,
                       num_voters = 3,
                       constraints = '{+region=ca-central-1: 1, +region=us-east-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row
----
regional_by_row             CREATE TABLE public.regional_by_row (
                            pk INT8 NOT NULL,
                            i INT8 NULL,
                            crdb_region public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::public.crdb_internal_region,
                            CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_i_idx (i ASC),
                            FAMILY fam_0_pk_i_crdb_region (pk, i, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@primary  us-east-1
num_voters = 3,
voter_constraints = '[+region=us-east-1]',
lease_preferences = '[[+region=us-east-1]]'  regional_by_row_as@regional_by_row_as_i_idx  us-east-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 4,
                       num_voters = 3,
                       constraints = '{+region=ca-central-1: 1, +region=us-east-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW CREATE TABLE regional_by_row_as
----
regional_by_row_as                CREATE TABLE public.regional_by_row_as (
                                  pk INT8 NOT NULL,
                                  i INT8 NULL,
                                  cr public.crdb_internal_region NOT NULL DEFAULT 'ca-central-1':::public.crdb_internal_region,
                                  CONSTRAINT "primary" PRIMARY KEY (pk ASC),
                                  INDEX regional_by_row_as_i_idx (i ASC),
                                  FAMILY fam_0_cr_pk_i (cr, pk, i)
) LOCALITY REGIONAL BY ROW AS cr

# Drop us-east-1 so that only the primary region remains.
statement ok
ALTER DATABASE drop_regions DROP REGION "us-east-1";

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row@regional_by_row_i_idx  ca-central-1

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 3,
                       num_voters = 3,
                       constraints = '{+region=ca-central-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TT
SHOW ZONE CONFIGURATION FROM TABLE regional_by_row_as
----
DATABASE drop_regions  ALTER DATABASE drop_regions CONFIGURE ZONE USING
                       range_min_bytes = 134217728,
                       range_max_bytes = 536870912,
                       gc.ttlseconds = 90000,
                       num_replicas = 3,
                       num_voters = 3,
                       constraints = '{+region=ca-central-1: 1}',
                       voter_constraints = '[+region=ca-central-1]',
                       lease_preferences = '[[+region=ca-central-1]]'

query TTT
SELECT zone_config, index_name, partition_name FROM [SHOW PARTITIONS FROM TABLE regional_by_row_as]
ORDER BY partition_name, index_name
----
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@primary  ca-central-1
num_voters = 3,
voter_constraints = '[+region=ca-central-1]',
lease_preferences = '[[+region=ca-central-1]]'  regional_by_row_as@regional_by_row_as_i_idx  ca-central-1

# Can't drop the primary region while regional by row tables still exist in the database.
statement error removing primary region from database drop_regions: cannot drop type "crdb_internal_region" because other objects \(\[drop_regions.public.regional_by_row drop_regions.public.regional_by_row_as\]\) still depend on it
ALTER DATABASE drop_regions DROP REGION "ca-central-1";

# Drop the two regional by row tables and now the primary region can be removed.
statement ok
DROP TABLE regional_by_row;
DROP TABLE regional_by_row_as;
ALTER DATABASE drop_regions DROP REGION "ca-central-1";

subtest virtual_columns

statement ok
USE multi_region_test_db

statement ok
CREATE TABLE regional_by_row_table_virt (
  pk int PRIMARY KEY,
  a int NOT NULL,
  b int NOT NULL,
  v INT AS (a + b) VIRTUAL,
  UNIQUE (v),
  UNIQUE INDEX ((a + 10)),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW

# Uniqueness checks for virtual columns should be efficient.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_virt(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 7 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table_virt@primary
│           │ lookup condition: (column1 = pk) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column1 = pk) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: crdb_region_default != crdb_region
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt@regional_by_row_table_virt_v_key
│               │ equality: (lookup_join_const_col_@34, v_comp) = (crdb_region,v)
│               │ equality cols are key
│               │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
│               │
│               └── • cross join
│                   │ estimated row count: 3
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • scan buffer
│                         label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • limit
            │ count: 1
            │
            └── • lookup join
                │ table: regional_by_row_table_virt@regional_by_row_table_virt_expr_key
                │ equality: (lookup_join_const_col_@48, crdb_internal_idx_expr_comp) = (crdb_region,crdb_internal_idx_expr)
                │ equality cols are key
                │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
                │
                └── • cross join
                    │ estimated row count: 3
                    │
                    ├── • values
                    │     size: 1 column, 3 rows
                    │
                    └── • scan buffer
                          label: buffer 1

query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table_virt(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │ arbiter constraints: primary
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • render
│               │
│               └── • cross join (left outer)
│                   │
│                   ├── • values
│                   │     size: 6 columns, 1 row
│                   │
│                   └── • render
│                       │
│                       └── • union all
│                           │ limit: 1
│                           │
│                           ├── • scan
│                           │     missing stats
│                           │     table: regional_by_row_table_virt@primary
│                           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                           │
│                           └── • scan
│                                 missing stats
│                                 table: regional_by_row_table_virt@primary
│                                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt@regional_by_row_table_virt_v_key
│               │ equality: (lookup_join_const_col_@30, v_comp) = (crdb_region,v)
│               │ equality cols are key
│               │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│               │
│               └── • cross join
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • scan buffer
│                         label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • limit
            │ count: 1
            │
            └── • lookup join
                │ table: regional_by_row_table_virt@regional_by_row_table_virt_expr_key
                │ equality: (lookup_join_const_col_@44, crdb_internal_idx_expr_comp) = (crdb_region,crdb_internal_idx_expr)
                │ equality cols are key
                │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
                │
                └── • cross join
                    │
                    ├── • values
                    │     size: 1 column, 3 rows
                    │
                    └── • scan buffer
                          label: buffer 1

statement ok
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_v_key"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 2, 0)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_v_key"\nDETAIL: Key \(v\)=\(2\) already exists\.
UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 2, 0)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_expr_key"\nDETAIL: Key \(a \+ 10:::INT8\)=\(11\) already exists\.
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 1, 3)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_expr_key"\nDETAIL: Key \(a \+ 10:::INT8\)=\(11\) already exists\.
UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 1, 3)

statement ok
CREATE TABLE regional_by_row_table_virt_partial (
  pk int PRIMARY KEY,
  a int NOT NULL,
  b int NOT NULL,
  v INT AS (a + b) VIRTUAL,
  UNIQUE INDEX v_a_gt_0 (v) WHERE a > 0,
  UNIQUE INDEX v_v_gt_0 (v) WHERE v > 0,
  UNIQUE INDEX a_plus_10_v_gt_0 ((a + 10)) WHERE v > 0,
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW

# Uniqueness checks for virtual columns should be efficient.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_virt_partial(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 9 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table_virt_partial@primary
│           │ lookup condition: (column1 = pk) AND (crdb_region = 'ap-southeast-2')
│           │ remote lookup condition: (column1 = pk) AND (crdb_region IN ('ca-central-1', 'us-east-1'))
│           │ pred: crdb_region_default != crdb_region
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt_partial@v_a_gt_0 (partial index)
│               │ equality: (lookup_join_const_col_@36, v_comp) = (crdb_region,v)
│               │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
│               │
│               └── • cross join
│                   │ estimated row count: 3
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • filter
│                       │ estimated row count: 1
│                       │ filter: column2 > 0
│                       │
│                       └── • scan buffer
│                             label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt_partial@v_v_gt_0 (partial index)
│               │ equality: (lookup_join_const_col_@50, v_comp) = (crdb_region,v)
│               │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
│               │
│               └── • cross join
│                   │ estimated row count: 3
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • filter
│                       │ estimated row count: 1
│                       │ filter: v_comp > 0
│                       │
│                       └── • scan buffer
│                             label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • limit
            │ count: 1
            │
            └── • lookup join
                │ table: regional_by_row_table_virt_partial@a_plus_10_v_gt_0 (partial index)
                │ equality: (lookup_join_const_col_@64, crdb_internal_idx_expr_comp) = (crdb_region,crdb_internal_idx_expr)
                │ pred: (column1 != pk) OR (crdb_region_default != crdb_region)
                │
                └── • cross join
                    │ estimated row count: 3
                    │
                    ├── • values
                    │     size: 1 column, 3 rows
                    │
                    └── • filter
                        │ estimated row count: 1
                        │ filter: v_comp > 0
                        │
                        └── • scan buffer
                              label: buffer 1

query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table_virt_partial(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │ arbiter constraints: primary
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • render
│               │
│               └── • cross join (left outer)
│                   │
│                   ├── • values
│                   │     size: 6 columns, 1 row
│                   │
│                   └── • render
│                       │
│                       └── • union all
│                           │ limit: 1
│                           │
│                           ├── • scan
│                           │     missing stats
│                           │     table: regional_by_row_table_virt_partial@primary
│                           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                           │
│                           └── • scan
│                                 missing stats
│                                 table: regional_by_row_table_virt_partial@primary
│                                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt_partial@v_a_gt_0 (partial index)
│               │ equality: (lookup_join_const_col_@34, v_comp) = (crdb_region,v)
│               │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│               │
│               └── • cross join
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • filter
│                       │ filter: column2 > 0
│                       │
│                       └── • scan buffer
│                             label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • limit
│           │ count: 1
│           │
│           └── • lookup join
│               │ table: regional_by_row_table_virt_partial@v_v_gt_0 (partial index)
│               │ equality: (lookup_join_const_col_@48, v_comp) = (crdb_region,v)
│               │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│               │
│               └── • cross join
│                   │
│                   ├── • values
│                   │     size: 1 column, 3 rows
│                   │
│                   └── • filter
│                       │ filter: v_comp > 0
│                       │
│                       └── • scan buffer
│                             label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • limit
            │ count: 1
            │
            └── • lookup join
                │ table: regional_by_row_table_virt_partial@a_plus_10_v_gt_0 (partial index)
                │ equality: (lookup_join_const_col_@62, crdb_internal_idx_expr_comp) = (crdb_region,crdb_internal_idx_expr)
                │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
                │
                └── • cross join
                    │
                    ├── • values
                    │     size: 1 column, 3 rows
                    │
                    └── • filter
                        │ filter: v_comp > 0
                        │
                        └── • scan buffer
                              label: buffer 1

statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)

statement error pq: duplicate key value violates unique constraint "v_a_gt_0"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (2, 3, -1)

statement error pq: duplicate key value violates unique constraint "v_v_gt_0"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (2, -1, 3)

statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (3, -2, -2)

# No conflict because a <= 0 and v <= 0.
statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (4, -3, -1)

subtest regressions

# Regression test for #63109. UPSERT should not cause the error
# ERROR: missing "crdb_region" primary key column.
statement ok
CREATE DATABASE single_region_test_db PRIMARY REGION "ap-southeast-2";
USE single_region_test_db;
CREATE TABLE t63109 (a INT, b STRING);
ALTER TABLE t63109 SET LOCALITY REGIONAL BY ROW;
INSERT INTO t63109 VALUES (1, 'one');
UPSERT INTO t63109 VALUES (1, 'two');
UPSERT INTO t63109 (crdb_region, a, b) VALUES ('ap-southeast-2', 1, 'three');
UPSERT INTO t63109 (a, b) VALUES (1, 'four');

# Regression test for #65064. We should always choose locality optimized scan
# even if the stats show zero rows.
statement ok
CREATE DATABASE db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1";
USE db;
CREATE TABLE t65064 (username STRING NOT NULL UNIQUE) LOCALITY REGIONAL BY ROW;
ALTER TABLE t65064 INJECT STATISTICS '[
  {
    "columns": ["username"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 0,
    "distinct_count": 0
  }
]';

query T
SELECT * FROM [EXPLAIN SELECT * FROM t65064 WHERE username = 'kharris'] OFFSET 2
----
·
• union all
│ estimated row count: 1
│ limit: 1
│
├── • scan
│     estimated row count: 1 (100% of the table; stats collected <hidden> ago)
│     table: t65064@t65064_username_key
│     spans: [/'ap-southeast-2'/'kharris' - /'ap-southeast-2'/'kharris']
│
└── • scan
      estimated row count: 1 (100% of the table; stats collected <hidden> ago)
      table: t65064@t65064_username_key
      spans: [/'ca-central-1'/'kharris' - /'ca-central-1'/'kharris'] [/'us-east-1'/'kharris' - /'us-east-1'/'kharris']
