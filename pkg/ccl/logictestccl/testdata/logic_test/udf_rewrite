# LogicTest: !local-mixed-23.1

statement ok
CREATE SEQUENCE seq;

statement ok
CREATE TYPE weekday AS ENUM ('monday', 'tuesday', 'wednesday', 'thursday', 'friday');

statement ok
CREATE TABLE t_rewrite (
  v INT DEFAULT 0,
  w weekday DEFAULT 'monday'::weekday
);

# Need to turn declarative schema changer off because function `get_body_str`
# created below would resolve a descriptorless public schema "system.public"
# which is not supported in declarative schema changer. Declarative schema
# changer falls back to legacy schema changer, and the descriptor id counter is
# increased twice. It cause the test to fail due to id inconsistency.
skipif config local-legacy-schema-changer
statement ok
SET use_declarative_schema_changer = 'off'

statement ok
CREATE FUNCTION get_body_str(fn_name STRING) RETURNS STRING
LANGUAGE SQL
AS $$
  SELECT crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor', descriptor, false
  )->'function'->'functionBody'
  FROM system.descriptor WHERE id = fn_name::regproc::int - 100000;
$$;

skipif config local-legacy-schema-changer
statement ok
SET use_declarative_schema_changer = 'on'

subtest rewrite_plpgsql

statement ok
CREATE OR REPLACE FUNCTION f_rewrite() RETURNS INT AS
$$
  DECLARE
    i INT := nextval('seq');
    curs REFCURSOR := nextval('seq')::STRING;
    curs2 CURSOR FOR SELECT nextval('seq');
  BEGIN
    RAISE NOTICE USING MESSAGE = format('next val: %d',nextval('seq'));
    RAISE NOTICE 'val1: %, val2: %', nextval('seq'), nextval('seq');
    WHILE nextval('seq') < 10 LOOP
      i = nextval('seq');
      SELECT nextval('seq');
      IF nextval('seq') = 1 THEN
        CONTINUE;
      ELSIF nextval('seq') = 2 THEN
        SELECT v INTO i FROM nextval('seq') AS v(INT);
      END IF;
    END LOOP;
    OPEN curs FOR SELECT nextval('seq');
    RETURN nextval('seq');
  EXCEPTION
    WHEN division_by_zero THEN
      RAISE NOTICE USING MESSAGE = format('next val: %d',nextval('seq'));
  END
$$ LANGUAGE PLPGSQL;

query T
SELECT get_body_str('f_rewrite');
----
"DECLARE\ni INT8 := nextval(106:::REGCLASS);\ncurs REFCURSOR := nextval(106:::REGCLASS)::STRING;\ncurs2 CURSOR FOR SELECT nextval(106:::REGCLASS);\nBEGIN\nRAISE notice\nUSING MESSAGE = format('next val: %d':::STRING, nextval(106:::REGCLASS));\nRAISE notice 'val1: %, val2: %', nextval(106:::REGCLASS), nextval(106:::REGCLASS);\nWHILE nextval(106:::REGCLASS) < 10:::INT8 LOOP\ni := nextval(106:::REGCLASS);\nSELECT nextval(106:::REGCLASS);\nIF nextval(106:::REGCLASS) = 1:::INT8 THEN\n\tCONTINUE;\nELSIF nextval(106:::REGCLASS) = 2:::INT8 THEN\n\tSELECT v FROM ROWS FROM (nextval(106:::REGCLASS)) AS v (\"int\") INTO i;\nEND IF;\nEND LOOP;\nOPEN curs FOR SELECT nextval(106:::REGCLASS);\nRETURN nextval(106:::REGCLASS);\nEXCEPTION\nWHEN division_by_zero THEN\nRAISE notice\nUSING MESSAGE = format('next val: %d':::STRING, nextval(106:::REGCLASS));\nEND\n;"

query TT
SHOW CREATE FUNCTION f_rewrite;
----
                f_rewrite  CREATE FUNCTION public.f_rewrite()
                             RETURNS INT8
                             VOLATILE
                             NOT LEAKPROOF
                             CALLED ON NULL INPUT
                             LANGUAGE plpgsql
                             AS $$
                             DECLARE
                             i INT8 := nextval('public.seq'::REGCLASS);
                             curs REFCURSOR := nextval('public.seq'::REGCLASS)::STRING;
                             curs2 CURSOR FOR SELECT nextval('public.seq'::REGCLASS);
                             BEGIN
                             RAISE notice
                             USING MESSAGE = format('next val: %d':::STRING, nextval('public.seq'::REGCLASS));
                             RAISE notice 'val1: %, val2: %', nextval('public.seq'::REGCLASS), nextval('public.seq'::REGCLASS);
                             WHILE nextval('public.seq'::REGCLASS) < 10:::INT8 LOOP
                             i := nextval('public.seq'::REGCLASS);
                             SELECT nextval('public.seq'::REGCLASS);
                             IF nextval('public.seq'::REGCLASS) = 1:::INT8 THEN
                               CONTINUE;
                             ELSIF nextval('public.seq'::REGCLASS) = 2:::INT8 THEN
                               SELECT v FROM ROWS FROM (nextval('public.seq'::REGCLASS)) AS v ("int") INTO i;
                             END IF;
                             END LOOP;
                             OPEN curs FOR SELECT nextval('public.seq'::REGCLASS);
                             RETURN nextval('public.seq'::REGCLASS);
                             EXCEPTION
                             WHEN division_by_zero THEN
                             RAISE notice
                             USING MESSAGE = format('next val: %d':::STRING, nextval('public.seq'::REGCLASS));
                             END
                             ;
                           $$

statement ok
DROP FUNCTION f_rewrite();

statement ok
CREATE OR REPLACE FUNCTION f_rewrite() RETURNS weekday AS
$$
  DECLARE
    day weekday := 'wednesday'::weekday;
    curs REFCURSOR := 'monday'::weekday::STRING;
    curs2 CURSOR FOR SELECT 'tuesday'::weekday;
  BEGIN
    RAISE NOTICE USING MESSAGE = format('val: %d','wednesday'::weekday);
    RAISE NOTICE 'val1: %, val2: %', 'wednesday'::weekday, 'thursday'::weekday;
    WHILE day != 'wednesday'::weekday LOOP
      day = 'friday'::weekday;
      SELECT 'wednesday'::weekday;
      IF day = 'wednesday'::weekday THEN
        CONTINUE;
      ELSIF day = 'monday'::weekday THEN
        SELECT 'tuesday'::weekday INTO day;
      END IF;
    END LOOP;
    OPEN curs FOR SELECT 'wednesday'::weekday;
    RETURN 'wednesday'::weekday;
  EXCEPTION
    WHEN division_by_zero THEN
      RAISE NOTICE USING MESSAGE = format('val: %d','wednesday'::weekday);
  END
$$ LANGUAGE PLPGSQL;

query T
SELECT get_body_str('f_rewrite');
----
"DECLARE\nday @100107 := b'\\x80':::@100107;\ncurs REFCURSOR := b' ':::@100107::STRING;\ncurs2 CURSOR FOR SELECT b'@':::@100107;\nBEGIN\nRAISE notice\nUSING MESSAGE = format('val: %d':::STRING, b'\\x80':::@100107);\nRAISE notice 'val1: %, val2: %', b'\\x80':::@100107, b'\\xa0':::@100107;\nWHILE day != b'\\x80':::@100107 LOOP\nday := b'\\xc0':::@100107;\nSELECT b'\\x80':::@100107;\nIF day = b'\\x80':::@100107 THEN\n\tCONTINUE;\nELSIF day = b' ':::@100107 THEN\n\tSELECT b'@':::@100107 INTO day;\nEND IF;\nEND LOOP;\nOPEN curs FOR SELECT b'\\x80':::@100107;\nRETURN b'\\x80':::@100107;\nEXCEPTION\nWHEN division_by_zero THEN\nRAISE notice\nUSING MESSAGE = format('val: %d':::STRING, b'\\x80':::@100107);\nEND\n;"

query TT
SHOW CREATE FUNCTION f_rewrite;
----
f_rewrite  CREATE FUNCTION public.f_rewrite()
                             RETURNS test.public.weekday
                             VOLATILE
                             NOT LEAKPROOF
                             CALLED ON NULL INPUT
                             LANGUAGE plpgsql
                             AS $$
                             DECLARE
                             day weekday := 'wednesday':::test.public.weekday;
                             curs REFCURSOR := 'monday':::test.public.weekday::STRING;
                             curs2 CURSOR FOR SELECT 'tuesday':::test.public.weekday;
                             BEGIN
                             RAISE notice
                             USING MESSAGE = format('val: %d':::STRING, 'wednesday':::test.public.weekday);
                             RAISE notice 'val1: %, val2: %', 'wednesday':::test.public.weekday, 'thursday':::test.public.weekday;
                             WHILE day != 'wednesday':::test.public.weekday LOOP
                             day := 'friday':::test.public.weekday;
                             SELECT 'wednesday':::test.public.weekday;
                             IF day = 'wednesday':::test.public.weekday THEN
                               CONTINUE;
                             ELSIF day = 'monday':::test.public.weekday THEN
                               SELECT 'tuesday':::test.public.weekday INTO day;
                             END IF;
                             END LOOP;
                             OPEN curs FOR SELECT 'wednesday':::test.public.weekday;
                             RETURN 'wednesday':::test.public.weekday;
                             EXCEPTION
                             WHEN division_by_zero THEN
                             RAISE notice
                             USING MESSAGE = format('val: %d':::STRING, 'wednesday':::test.public.weekday);
                             END
                             ;
                           $$

statement ok
DROP FUNCTION f_rewrite();

subtest end

subtest rewrite_proc

statement ok
CREATE OR REPLACE PROCEDURE p_rewrite() AS
$$
  BEGIN
    INSERT INTO t_rewrite(v) VALUES (nextval('seq')) RETURNING v;
  END
$$ LANGUAGE PLPGSQL

query T
SELECT get_body_str('p_rewrite');
----
"BEGIN\nINSERT INTO test.public.t_rewrite(v) VALUES (nextval(106:::REGCLASS)) RETURNING v;\nEND\n;"

statement ok
DROP PROCEDURE p_rewrite();

statement ok
CREATE OR REPLACE PROCEDURE p_rewrite() AS
$$
  BEGIN
    UPDATE t_rewrite SET w = 'thursday'::weekday WHERE w = 'wednesday'::weekday RETURNING w;
  END
$$ LANGUAGE PLPGSQL

query T
SELECT get_body_str('p_rewrite');
----
"BEGIN\nUPDATE test.public.t_rewrite SET w = b'\\xa0':::@100107 WHERE w = b'\\x80':::@100107 RETURNING w;\nEND\n;"

subtest end
