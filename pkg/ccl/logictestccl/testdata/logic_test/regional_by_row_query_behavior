# tenant-cluster-setting-override-opt: allow-multi-region-abstractions-for-secondary-tenants
# LogicTest: multiregion-9node-3region-3azs !metamorphic
# TODO(#75864): enable multiregion-9node-3region-3azs-tenant and/or revert
# the commit that split these changes out.

# Set the closed timestamp interval to be short to shorten the amount of time
# we need to wait for the system config to propagate.
statement ok
SET CLUSTER SETTING kv.closed_timestamp.side_transport_interval = '10ms';

statement ok
SET CLUSTER SETTING kv.closed_timestamp.target_duration = '10ms';

statement ok
CREATE DATABASE multi_region_test_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1" SURVIVE REGION FAILURE;

statement ok
USE multi_region_test_db

statement ok
CREATE TABLE regional_by_row_table (
  pk int PRIMARY KEY,
  pk2 int NOT NULL,
  a int NOT NULL,
  b int NOT NULL,
  j JSON,
  INDEX (a),
  UNIQUE (b),
  INVERTED INDEX (j),
  FAMILY (pk, pk2, a, b)
) LOCALITY REGIONAL BY ROW

# Do a REGEXP replace of the enums as these may not be static.
query T retry
SELECT regexp_replace(info, '@\d+', '@<enum_val>', 'g') FROM
[EXPLAIN (OPT, CATALOG) SELECT * FROM regional_by_row_table]
----
TABLE regional_by_row_table
 ├── pk int not null
 ├── pk2 int not null
 ├── a int not null
 ├── b int not null
 ├── j jsonb
 ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@<enum_val>) [hidden]
 ├── crdb_internal_mvcc_timestamp decimal [hidden] [system]
 ├── tableoid oid [hidden] [system]
 ├── j_inverted_key encodedkey not null [inverted]
 ├── FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
 ├── CHECK (crdb_region IN (x'40':::@<enum_val>, x'80':::@<enum_val>, x'c0':::@<enum_val>))
 ├── PRIMARY INDEX regional_by_row_table_pkey
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@<enum_val>) [hidden] (implicit)
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    └── 1 replicas: [+region=us-east-1]
 │    │    ├── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    └── 1 replicas: [+region=us-east-1]
 │                   ├── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── INDEX regional_by_row_table_a_idx
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@<enum_val>) [hidden] (implicit)
 │    ├── a int not null
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    └── 1 replicas: [+region=us-east-1]
 │    │    ├── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    └── 1 replicas: [+region=us-east-1]
 │                   ├── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── UNIQUE INDEX regional_by_row_table_b_key
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@<enum_val>) [hidden] (implicit)
 │    ├── b int not null
 │    ├── pk int not null (storing)
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    └── 1 replicas: [+region=us-east-1]
 │    │    ├── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    └── 1 replicas: [+region=us-east-1]
 │                   ├── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── INVERTED INDEX regional_by_row_table_j_idx
 │    ├── crdb_region crdb_internal_region not null default (default_to_database_primary_region(gateway_region())::@<enum_val>) [hidden] (implicit)
 │    ├── j_inverted_key encodedkey not null [inverted]
 │    ├── pk int not null
 │    ├── ZONE
 │    │    ├── replica constraints
 │    │    │    ├── 1 replicas: [+region=ap-southeast-2]
 │    │    │    ├── 1 replicas: [+region=ca-central-1]
 │    │    │    └── 1 replicas: [+region=us-east-1]
 │    │    ├── voter constraints: [+region=ca-central-1]
 │    │    └── lease preference: [+region=ca-central-1]
 │    └── partitions
 │         ├── ap-southeast-2
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ap-southeast-2')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ap-southeast-2]
 │         │         └── lease preference: [+region=ap-southeast-2]
 │         ├── ca-central-1
 │         │    ├── partition by list prefixes
 │         │    │    └── ('ca-central-1')
 │         │    └── ZONE
 │         │         ├── replica constraints
 │         │         │    ├── 1 replicas: [+region=ap-southeast-2]
 │         │         │    ├── 1 replicas: [+region=ca-central-1]
 │         │         │    └── 1 replicas: [+region=us-east-1]
 │         │         ├── voter constraints: [+region=ca-central-1]
 │         │         └── lease preference: [+region=ca-central-1]
 │         └── us-east-1
 │              ├── partition by list prefixes
 │              │    └── ('us-east-1')
 │              └── ZONE
 │                   ├── replica constraints
 │                   │    ├── 1 replicas: [+region=ap-southeast-2]
 │                   │    ├── 1 replicas: [+region=ca-central-1]
 │                   │    └── 1 replicas: [+region=us-east-1]
 │                   ├── voter constraints: [+region=us-east-1]
 │                   └── lease preference: [+region=us-east-1]
 ├── UNIQUE WITHOUT INDEX (pk)
 └── UNIQUE WITHOUT INDEX (b)
scan regional_by_row_table
 └── check constraint expressions
      └── crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')


statement ok
INSERT INTO regional_by_row_table (pk, pk2, a, b, j) VALUES
  (1, 1, 2, 3, '{"a": "b"}'),
  (4, 4, 5, 6, '{"c": "d"}');
INSERT INTO multi_region_test_db.regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
  ('ca-central-1', 6, 6, 5, -5)

statement ok
CREATE UNIQUE INDEX uniq_idx ON regional_by_row_table(a) WHERE b > 0

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
('ca-central-1', 7, 7, 8, 9)
RETURNING crdb_region, pk
----
ca-central-1  7

query TI nodeidx=3
USE multi_region_test_db; INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES
(10, 10, 11, 12)
RETURNING crdb_region, pk
----
ca-central-1  10

query TI nodeidx=6
USE multi_region_test_db; INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES
(20, 20, 21, 22)
RETURNING crdb_region, pk
----
us-east-1  20

query TI
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES
(gateway_region()::crdb_internal_region, 23, 23, 24, 25)
RETURNING crdb_region, pk
----
ap-southeast-2  23

query TT
SELECT start_key, end_key FROM [SHOW RANGE FROM TABLE regional_by_row_table FOR ROW ('ap-southeast-2', 1)]
----
NULL  NULL

query TIIII
SELECT crdb_region, pk, pk2, a, b FROM regional_by_row_table
ORDER BY pk
----
ap-southeast-2  1   1   2   3
ap-southeast-2  4   4   5   6
ca-central-1    6   6   5   -5
ca-central-1    7   7   8   9
ca-central-1    10  10  11  12
us-east-1       20  20  21  22
ap-southeast-2  23  23  24  25

query IIIIT colnames
SELECT * FROM regional_by_row_table ORDER BY pk
----
pk  pk2  a   b   j
1   1    2   3   {"a": "b"}
4   4    5   6   {"c": "d"}
6   6    5   -5  NULL
7   7    8   9   NULL
10  10   11  12  NULL
20  20   21  22  NULL
23  23   24  25  NULL


# Test that a limited, ordered scan is efficient.
query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT * FROM regional_by_row_table
ORDER BY pk LIMIT 5] OFFSET 2
----
·
• limit
│ columns: (pk, pk2, a, b, j)
│ count: 5
│
└── • union all
    │ columns: (pk, pk2, a, b, j)
    │ ordering: +pk
    │ estimated row count: 15 (missing stats)
    │
    ├── • union all
    │   │ columns: (pk, pk2, a, b, j)
    │   │ ordering: +pk
    │   │ estimated row count: 10 (missing stats)
    │   │
    │   ├── • scan
    │   │     columns: (pk, pk2, a, b, j)
    │   │     ordering: +pk
    │   │     estimated row count: 5 (missing stats)
    │   │     table: regional_by_row_table@regional_by_row_table_pkey
    │   │     spans: /"@"-/"@"/PrefixEnd
    │   │     limit: 5
    │   │
    │   └── • scan
    │         columns: (pk, pk2, a, b, j)
    │         ordering: +pk
    │         estimated row count: 5 (missing stats)
    │         table: regional_by_row_table@regional_by_row_table_pkey
    │         spans: /"\x80"-/"\x80"/PrefixEnd
    │         limit: 5
    │
    └── • scan
          columns: (pk, pk2, a, b, j)
          ordering: +pk
          estimated row count: 5 (missing stats)
          table: regional_by_row_table@regional_by_row_table_pkey
          spans: /"\xc0"-/"\xc0"/PrefixEnd
          limit: 5

# Test that the synthesized UNIQUE WITHOUT INDEX constraints do not cause
# lookups into redundant arbiters.
query T
SELECT * FROM [
  EXPLAIN INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b)
  VALUES ('ca-central-1', 7, 7, 8, 9) ON CONFLICT DO NOTHING
] OFFSET 2
----
·
• insert
│ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│ auto commit
│ arbiter constraints: regional_by_row_table_pkey, regional_by_row_table_b_key, uniq_idx
│
└── • render
    │
    └── • distinct
        │ distinct on: arbiter_uniq_idx_distinct
        │ nulls are distinct
        │
        └── • render
            │
            └── • lookup join (anti)
                │ table: regional_by_row_table@uniq_idx (partial index)
                │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column4 = a)
                │ pred: column5 > 0
                │
                └── • lookup join (anti)
                    │ table: regional_by_row_table@regional_by_row_table_b_key
                    │ equality cols are key
                    │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column5 = b)
                    │
                    └── • cross join (anti)
                        │
                        ├── • values
                        │     size: 6 columns, 1 row
                        │
                        └── • union all
                            │ limit: 1
                            │
                            ├── • scan
                            │     missing stats
                            │     table: regional_by_row_table@regional_by_row_table_pkey
                            │     spans: [/'ap-southeast-2'/7 - /'ap-southeast-2'/7]
                            │
                            └── • scan
                                  missing stats
                                  table: regional_by_row_table@regional_by_row_table_pkey
                                  spans: [/'ca-central-1'/7 - /'ca-central-1'/7] [/'us-east-1'/7 - /'us-east-1'/7]

# Tests for locality optimized search.

# Split the table into 3 regions and change the leaseholders to be "local"
# according to the crdb_region column.
statement ok
ALTER TABLE regional_by_row_table SPLIT AT VALUES ('ca-central-1', 0), ('us-east-1', 0);
ALTER TABLE regional_by_row_table EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 'ap-southeast-2', 0), (ARRAY[4], 'ca-central-1', 0), (ARRAY[7], 'us-east-1', 0);

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE regional_by_row_table]
----
start_key  end_key    replicas  lease_holder
NULL       /"\x80"/0  {1}       1
/"\x80"/0  /"\xc0"/0  {4}       4
/"\xc0"/0  NULL       {7}       7

statement ok
SET locality_optimized_partitioned_index_scan = false

# Query with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• scan
  missing stats
  table: regional_by_row_table@regional_by_row_table_pkey
  spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1] [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8kF-r00AQxd_9FMM8qazkT32QgHDlmmKgttckoHATwjY7lJjc7Lq7wZaS7y5JHmoliLbcPs6ZOTPnN0c0PxoMMAlX4X0Kr2EZbz7DY_jtYfUhWsPLj1GSJl9Wr-B8QNOuki1viu2h0PJnYfm2Ifj6KYxDUDW8By-HzXKZhCn4yLCVgtb8iQwGj-hhzlBpWZIxUg_ScRyIxB4Dl2HVqs4Ocs6wlJowOKKtbEMYYDrciYkL0o6LDAVZXjXj2tlId7NqoWo6IMN72XRPrQlA1QxU7TPgDLYMviPDRPGh42R4l6HjOS7mPUPZ2VM4Y_mOMPB6dhmAdyOALNu_c58Lwr8dRHk5xCl710otSJM4y533M5hr-UYqZ_HH4Pxp_3_-F5NRsjX0T5vdIRqJHU0cRna6pActy_HMVG5G3ygIMnbqLqYiasfW-Jvfzd41Zv8a8-Kv5rdnZrfP-xe_AgAA__9014gb

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM regional_by_row_table WHERE pk = 1
----
│
└ Node 1
  └ *colexec.ParallelUnorderedSynchronizer
    ├ *colfetcher.ColBatchScan
    ├ *colfetcher.ColBatchScan
    └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 1; SET tracing = off

# All rows are scanned at once without the optimization.
query T rowsort
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/110/1/"@"/1/0
Scan /Table/110/1/"\x80"/1/0
Scan /Table/110/1/"\xc0"/1/0
fetched: /regional_by_row_table/regional_by_row_table_pkey/?/1/pk2/a/b/j -> /1/2/3/'{"a": "b"}'
output row: [1 1 2 3 '{"a": "b"}']

statement ok
SET locality_optimized_partitioned_index_scan = true

# Same query with locality optimized search enabled.

# First check the plan with the vectorized engine.
statement ok
SET vectorize=on

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• union all
│ limit: 1
│
├── • scan
│     missing stats
│     table: regional_by_row_table@regional_by_row_table_pkey
│     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│
└── • scan
      missing stats
      table: regional_by_row_table@regional_by_row_table_pkey
      spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8kl-L00AUxd_9FJf7pDKSP60gAWFlTbFQ27UJKGxCmGYuJSbNjDMT3KXku0uShzUSu7td6OP988s952SOaH5VGGAUrsLrGN7CYrv5Crfhj5vVp-UaXn9eRnH0bfUGxgua9oWseZXt7jMtf2eW7yqC71_CbQiqhI_gpbBZLKIwBh8Z1lLQmh_IYHCLHqYMlZY5GSN11zr2C0txh4HLsKhVY7t2yjCXmjA4oi1sRRhg3N3ZEhekHRcZCrK8qPrPTkq6muxmqqR7ZHgtq-ZQmwBUyUCVPgPOYMfgJzKMFO8mToJJcvfBTdDxHBfTlqFs7INAY_meMPBadp4J73Im8vNNPGhvaqkFaRIj3Wk7YXMt30nl-P8sTp_2z81vdqH8rh7JbvaE7Azpglfw7AjnY4-r4lBY8P4rxX1OllsyStaGnvSX3E4jiT0NvoxsdE43Wub9maHc9FzfEGTsMPWHYln3o_6d_Q17L4H9k_D8NDx7CTw_Cb8fwW6btq_-BAAA___NQ8qq

query T
EXPLAIN (VEC) SELECT * FROM regional_by_row_table WHERE pk = 1
----
│
└ Node 1
  └ *colexec.limitOp
    └ *colexec.SerialUnorderedSynchronizer
      ├ *colfetcher.ColBatchScan
      └ *colexec.ParallelUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colfetcher.ColBatchScan

# Now check the physical plan for the row-by-row engine.
statement ok
SET vectorize=off

query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM regional_by_row_table WHERE pk = 1] AS temp(a) WHERE a LIKE '%Diagram%'
----
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJy8keFr1EAQxb_7VwwDpa2sJBu_SEBoaSMG47VeDhR64di7Hc71kt11d4MtR_53uUQ4IxdBBT_Oe_Mm75fdo_9aY4plVmQ3C3gOb-Z37-Eh-3RfXOczuLjNy0X5obiE8YKjrTJa1Kv108qZb6sg1jXBx7fZPAO7g9fAK7guIVBj4UJc_nAEFPm7DM7PbpXYOtGcnSNDbSTNREMe0wfkWDG0zmzIe-MO0r5fyOUjpjFDpW0bDnLFcGMcYbrHoEJNmOLi0GFOQpKLYmQoKQhV92dP1r06qa7sjp6Q4Y2p20b7FOyOgd0lDASDNYMvyLC04uBES1wuH1_FS4x4FIPQEjiY8JkcVh1D04ZjWR_EljDlHfs7IP6fgK4GmEmAZBLg2NuTU6KGVhsnyZEcVa-6E6Qz88LYKBkzFqpRAfhklfhP_uWcvDXa0y9dpi5XDEluaeDypnUbundm039mGO_6XC9I8mFwk2HIdW_1j_1zmP9LOPlt-OUoHHdV9-x7AAAA__-eCkLr

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 1; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/110/1/"@"/1/0
fetched: /regional_by_row_table/regional_by_row_table_pkey/?/1/pk2/a/b/j -> /1/2/3/'{"a": "b"}'
output row: [1 1 2 3 '{"a": "b"}']

statement ok
SET vectorize=on

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 10; SET tracing = off

# If the row is not found in the local region, the other regions are searched
# in parallel. Note that if the row is quickly found in one remote region, the
# other remote region might not be read from at all.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%' AND message NOT LIKE 'Scan%"\\xc0"%'
 ORDER BY ordinality ASC
----
Scan /Table/110/1/"@"/10/0
Scan /Table/110/1/"\x80"/10/0
fetched: /regional_by_row_table/regional_by_row_table_pkey/?/10/pk2/a/b -> /10/11/12
output row: [10 10 11 12 NULL]

statement ok
SET vectorize=off

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk = 10; SET tracing = off

# If the row is not found in the local region, the other regions are searched
# in parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/110/1/"@"/10/0
Scan /Table/110/1/"\x80"/10/0, /Table/110/1/"\xc0"/10/0
fetched: /regional_by_row_table/regional_by_row_table_pkey/'ca-central-1'/10/pk2/a/b -> /10/11/12
output row: [10 10 11 12 NULL]

statement ok
RESET vectorize

# The local region for this query is ca-central-1, so that span should be
# scanned in the first child of the limited union all.
query T nodeidx=3
USE multi_region_test_db; SET locality_optimized_partitioned_index_scan = true;
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table WHERE pk = 1] OFFSET 2
----
·
• union all
│ limit: 1
│
├── • scan
│     missing stats
│     table: regional_by_row_table@regional_by_row_table_pkey
│     spans: [/'ca-central-1'/1 - /'ca-central-1'/1]
│
└── • scan
      missing stats
      table: regional_by_row_table@regional_by_row_table_pkey
      spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1] [/'us-east-1'/1 - /'us-east-1'/1]


# Query with more than one key.
query T
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table WHERE pk IN (1, 4)] OFFSET 2
----
·
• union all
│ limit: 2
│
├── • scan
│     missing stats
│     table: regional_by_row_table@regional_by_row_table_pkey
│     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1] [/'ap-southeast-2'/4 - /'ap-southeast-2'/4]
│
└── • scan
      missing stats
      table: regional_by_row_table@regional_by_row_table_pkey
      spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'ca-central-1'/4 - /'ca-central-1'/4] [/'us-east-1'/1 - /'us-east-1'/1] [/'us-east-1'/4 - /'us-east-1'/4]

statement ok
SET tracing = on,kv,results; SELECT * FROM regional_by_row_table WHERE pk IN (1, 4); SET tracing = off

# Both rows are found in the local region, so the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/110/1/"@"/1/0, /Table/110/1/"@"/4/0
fetched: /regional_by_row_table/regional_by_row_table_pkey/?/1/pk2/a/b/j -> /1/2/3/'{"a": "b"}'
output row: [1 1 2 3 '{"a": "b"}']
fetched: /regional_by_row_table/regional_by_row_table_pkey/?/4/pk2/a/b/j -> /4/5/6/'{"c": "d"}'
output row: [4 4 5 6 '{"c": "d"}']

# Tests using locality optimized search for lookup joins (including foreign
# key checks).
statement ok
CREATE TABLE parent (
  p_id INT PRIMARY KEY,
  FAMILY (p_id)
) LOCALITY REGIONAL BY ROW;

statement ok
CREATE TABLE child (
  c_id INT PRIMARY KEY,
  c_p_id INT REFERENCES parent (p_id),
  INDEX (c_p_id),
  FAMILY (c_id, c_p_id)
) LOCALITY REGIONAL BY ROW;

statement ok
INSERT INTO parent (crdb_region, p_id)
VALUES ('ap-southeast-2', 10), ('ca-central-1', 20), ('us-east-1', 30)

statement ok
INSERT INTO child (crdb_region, c_id, c_p_id)
VALUES ('ap-southeast-2', 10, 10), ('ca-central-1', 20, 20), ('us-east-1', 30, 30)

# Split the child table into 3 regions and change the leaseholders to be "local"
# according to the crdb_region column.
statement ok
ALTER TABLE child SPLIT AT VALUES ('ca-central-1', 0), ('us-east-1', 0);
ALTER TABLE child EXPERIMENTAL_RELOCATE VALUES (ARRAY[1], 'ap-southeast-2', 0), (ARRAY[4], 'ca-central-1', 0), (ARRAY[7], 'us-east-1', 0);

query TTTI colnames,rowsort
SELECT start_key, end_key, replicas, lease_holder FROM [SHOW RANGES FROM TABLE child]
----
start_key  end_key    replicas  lease_holder
NULL       /"\x80"/0  {1}       1
/"\x80"/0  /"\xc0"/0  {4}       4
/"\xc0"/0  NULL       {7}       7

statement ok
SET locality_optimized_partitioned_index_scan = false

# Anti join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (anti)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • scan
      missing stats
      table: child@child_pkey
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0, /Table/112/1/"\x80"/10/0, /Table/112/1/"\xc0"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0, /Table/111/1/"\x80"/10/0, /Table/111/1/"\xc0"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>

# Semi join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (semi)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • scan
      missing stats
      table: child@child_pkey
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0, /Table/112/1/"\x80"/10/0, /Table/112/1/"\xc0"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0, /Table/111/1/"\x80"/10/0, /Table/111/1/"\xc0"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10]

# Inner join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • scan
      missing stats
      table: child@child_pkey
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0, /Table/112/1/"\x80"/10/0, /Table/112/1/"\xc0"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0, /Table/111/1/"\x80"/10/0, /Table/111/1/"\xc0"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10 10]

# Left join with locality optimized search disabled.
query T
SELECT * FROM [EXPLAIN SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join (left outer)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • scan
      missing stats
      table: child@child_pkey
      spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10] [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# All regions are scanned without the optimization.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0, /Table/112/1/"\x80"/10/0, /Table/112/1/"\xc0"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0, /Table/111/1/"\x80"/10/0, /Table/111/1/"\xc0"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10 10]

statement ok
SET locality_optimized_partitioned_index_scan = true

# Anti join with locality optimized search enabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (anti)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • lookup join (anti)
    │ table: parent@parent_pkey
    │ equality cols are key
    │ lookup condition: (crdb_region = 'ap-southeast-2') AND (c_p_id = p_id)
    │
    └── • union all
        │ limit: 1
        │
        ├── • scan
        │     missing stats
        │     table: child@child_pkey
        │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
        │
        └── • scan
              missing stats
              table: child@child_pkey
              spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk2Fro04Qxt__P8Uwb5L82SOr8biyULC0hrN4ppcIV2gkWHdovdpdb1VIKfnuh5qjMVwC7eWNurPzuL9nePYVy185Clx4gXcZwf8wnc--wZ13exNc-CEMr_xFtPgejKDfkD5muYQfX725B8NwFoF32zTCsN9WJIZUte0rVpmEc0hXzcdoBBfhFQzTrmjxUQyz6XThRWAjQ6UlhckzlSju0MKYYWF0SmWpTVN6bRt8uUbBGWaqqKumHDNMtSEUr1hlVU4oMEruc5pTIsmMOTKUVCVZ3v629eC2z1XxRC_I8FLn9bMqBTRYbIuKDBdF0lTHS1wu12d8iWOLjzkkSoIFunokg_GGoa6rN5KySh4IhbVhH6O1TkDrbkkP0tkH6d6gSjJZkkOttJFkSPa44s1fbIT6ky7Gdt9AkD1nFVgHUfh7BnWtM7Wd06R_TPRSkIDAm0ZwEUY-XM_8EBl2SXS7158BBlo_1QX81JkCrQQMXQfOYT1w-EAI4VqcW_zLNqiuDefgTka7cy-6uRt5vzL0kGl10Nzkg-ac05prbvR6cLZrj8F6kPb8nsSw8x7DcyoLrUraS9ahnMQMST5Ql9JS1yalG6PT9phuOWt1bUFSWXW7drfwVbvV3stdsfUvYvuoeNIT833x5KjYOS52joo_74njzX-_AwAA__-DDeJX

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *rowexec.joinReader
      └ *colexec.limitOp
        └ *colexec.SerialUnorderedSynchronizer
          ├ *colfetcher.ColBatchScan
          └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE NOT EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/20/0
Scan /Table/112/1/"\x80"/20/0, /Table/112/1/"\xc0"/20/0
fetched: /child/child_pkey/?/20/c_p_id -> /20
Scan /Table/111/1/"@"/20/0
Scan /Table/111/1/"\x80"/20/0, /Table/111/1/"\xc0"/20/0
fetched: /parent/parent_pkey/'ca-central-1'/20 -> <undecoded>

# Semi join with locality optimized search enabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10] OFFSET 2
----
·
• lookup join (semi)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region = 'ap-southeast-2') AND (c_p_id = p_id)
│ remote lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@child_pkey
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@child_pkey
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk1Fr2zAQx9_3KY57STI0IjuBFUHApXWYi5t0sWGFxgTXOlKvjuTJNqSEfPdhO1vrrCl024ttne5_-ul_5x0WPzIUGLi-exHCR5gu5tdw597e-OfeDPqXXhAGX_0BdBOShzST8O2Lu3DBva1zoN_NyGNDqjyk5KtUwgSSVf0xgPPZJfSTNmbxQQTz6TRwQ7CRodKSZvGGChR3aGHEMDc6oaLQpg7tmgRPblFwhqnKq7IORwwTbQjFDsu0zAgFhvF9RguKJZkhR4aSyjjNmrINvdM8V_kjPSHDC51VG1UIqLHYgRQZBnlcR4dLXC63Z3yJQ4sPOcRKggW6fCCD0Z6hrspnkqKM14TC2rO_o7X-A61zID1JZ5-ke4YqyKRxBpXSRpIh2eGK9q9cY6Y_6Xxody_gp5u0BOskCn-PUVc6VQefRt1jwqecBPjuNITAvfbgau7NkGE7iE77-mWgr_VjlcN3nSrQSkDfGcMEtr0x7wkhHItzi38-DKpjwwSc0QAZLmijS4LsFXX9s2x7Zy_1DLa9pFPwz4q_O5m3nTTyfmVonWp10q7Re-xaUJFrVdBR6041ImJIck3tGBS6MgndGJ00x7TLeaNrApKKst2124Wnmq1m8F-KrX8R22-KRx0xPxaP3hSPj8TR_sPPAAAA__9GoJgk

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child WHERE EXISTS (SELECT * FROM parent WHERE p_id = c_p_id) AND c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/20/0
Scan /Table/112/1/"\x80"/20/0, /Table/112/1/"\xc0"/20/0
fetched: /child/child_pkey/?/20/c_p_id -> /20
Scan /Table/111/1/"@"/20/0
Scan /Table/111/1/"\x80"/20/0, /Table/111/1/"\xc0"/20/0
fetched: /parent/parent_pkey/'ca-central-1'/20 -> <undecoded>
output row: [20 20]

# Inner join with locality optimized search enabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region = 'ap-southeast-2') AND (c_p_id = p_id)
│ remote lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@child_pkey
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@child_pkey
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk2Fr2zwQgL-_v-K4L2lfNCLbgRVBwKV1mEtmd05gg8YE1zpSr47kyTJkhPz3ETtb66wpdNsX2zrpOT26k7dYfytR4CyYBldz-B8mSfwR7oIvt9PLMIKz63A2n32ankN_Qf5QlBLCKAoSuInDCKrMkLIQR1AtCwljyJftx-cPQRJA3sUcnkI8mcyCObjIUGlJUbamGsUdOpgyrIzOqa612Ye27YJQblBwhoWqGrsPpwxzbQjFFm1hS0KB8-y-pIQySWbIkaEkmxVlm7YV9dvnsnqk78jwSpfNWtWitWIHUWQ4q7J9dLjAxWJzwRc4dPiQQ6YkOKDtAxlMdwx1Y59MaputCIWzY39m6_wDW_9getLOPWn3JFWTKbISGqWNJEOy55XuXjhGpN_pauj2DzAt1oUF56QKf0uhbnShDnXy-tt0t83vXj8rNdX6sangqy4UaCXgzB_BGDaDER8IIXyHc4e_P4fL6BrOfBfG4HvnyDChtbYE5Qv0_gfYDC6e8ww2g7yX8PeMv1pWdS0z8n5paFVohQzjxgrwHea7zPdO1sl7S50Sqiutajrq2akOpAxJrqjrf60bk9Ot0Xm7TTeMW64NSKptN-t2g1C1U-2Nfw47fwO7r8JeD-bHsPcqPDqC091_PwIAAP__n0qQmg==

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10 10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child INNER JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/20/0
Scan /Table/112/1/"\x80"/20/0, /Table/112/1/"\xc0"/20/0
fetched: /child/child_pkey/?/20/c_p_id -> /20
Scan /Table/111/1/"@"/20/0
Scan /Table/111/1/"\x80"/20/0, /Table/111/1/"\xc0"/20/0
fetched: /parent/parent_pkey/'ca-central-1'/20 -> <undecoded>
output row: [20 20 20]

# Left join with locality optimized search enabled.
query T
SELECT * FROM [EXPLAIN (DISTSQL) SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10] OFFSET 2
----
·
• lookup join (left outer)
│ table: parent@parent_pkey
│ equality cols are key
│ lookup condition: (crdb_region = 'ap-southeast-2') AND (c_p_id = p_id)
│ remote lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (c_p_id = p_id)
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: child@child_pkey
    │     spans: [/'ap-southeast-2'/10 - /'ap-southeast-2'/10]
    │
    └── • scan
          missing stats
          table: child@child_pkey
          spans: [/'ca-central-1'/10 - /'ca-central-1'/10] [/'us-east-1'/10 - /'us-east-1'/10]
·
Diagram: https://cockroachdb.github.io/distsqlplan/decode.html#eJysk2Fr2zwQx98_n-K4N2kfNCI7hRVBwaV1WIpnd47HBo0JrnW0Xh3Jk2VIKfnuI3K31llT6LY3tnTS__TT_04P2H6vUeA8jMKzDP6HaZp8hKvw62V0Oovh4Hw2z-afokMYbihvq1pCFE4zuEhmMTSFIWUhiaFZVhJOoFy6wZcPYRpC2cc8nkMync7DDHxkqLSkuFhRi-IKPcwZNkaX1LbabEMPbsNMrlFwhpVqOrsN5wxLbQjFA9rK1oQCs-K6ppQKSWbMkaEkW1S1S-s4A_ddNnd0jwzPdN2tVCscFXsERYbzpthGxwtcLNbHfIFjj485FEqCB9reksF8w1B39omktcUNofA27M9ovX9AGzyS7qXz99I9QbVkqqKGTmkjyZAccOWbF64R63e6GfvDC0TVqrLg7UXhbzHqQlfq0afJ8JjsviHRd1_yOQtT14PIsO_CoP_9dDDS-q5r4JuuFGgl4CA4ghNYj474SAgReJx7_P0hnMbncBD4cALB5BAZprTSlqB-Qb19F-vR8XM9g_WoHCT8PeOvUjZ9KY28Xhq6qbRChklnBQQeC3wWTPb6N3mLfym1jVYt7dRyX2VyhiRvqO-LVnempEujS3dMP02czgUktbZf9fvJTLkl9xKei72_EfuviicDMd8VT14VH-2I881_PwIAAP__xyaW3w==

statement ok
SET vectorize=on

query T
EXPLAIN (VEC) SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10
----
│
└ Node 1
  └ *rowexec.joinReader
    └ *colexec.limitOp
      └ *colexec.SerialUnorderedSynchronizer
        ├ *colfetcher.ColBatchScan
        └ *colfetcher.ColBatchScan

statement ok
RESET vectorize

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 10; SET tracing = off

# If the row is found in the local region, the other regions are not searched.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/10/0
fetched: /child/child_pkey/?/10/c_p_id -> /10
Scan /Table/111/1/"@"/10/0
fetched: /parent/parent_pkey/'ap-southeast-2'/10 -> <undecoded>
output row: [10 10 10]

statement ok
SET tracing = on,kv,results; SELECT * FROM child LEFT JOIN parent ON p_id = c_p_id WHERE c_id = 20; SET tracing = off

# If the row is not found in the local region, the other regions are searched in
# parallel.
query T
SELECT message FROM [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
 WHERE message LIKE 'fetched:%' OR message LIKE 'output row%'
 OR message LIKE 'Scan%'
 ORDER BY ordinality ASC
----
Scan /Table/112/1/"@"/20/0
Scan /Table/112/1/"\x80"/20/0, /Table/112/1/"\xc0"/20/0
fetched: /child/child_pkey/?/20/c_p_id -> /20
Scan /Table/111/1/"@"/20/0
Scan /Table/111/1/"\x80"/20/0, /Table/111/1/"\xc0"/20/0
fetched: /parent/parent_pkey/'ca-central-1'/20 -> <undecoded>
output row: [20 20 20]

query T
SELECT * FROM [EXPLAIN INSERT INTO child VALUES (1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: child(c_id, c_p_id, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 4 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • scan
│                 missing stats
│                 table: child@child_pkey
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│                 limit: 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ table: parent@parent_pkey
            │ equality cols are key
            │ lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (column2 = p_id)
            │
            └── • lookup join (anti)
                │ table: parent@parent_pkey
                │ equality cols are key
                │ lookup condition: (crdb_region = 'ap-southeast-2') AND (column2 = p_id)
                │
                └── • scan buffer
                      estimated row count: 1
                      label: buffer 1

# Non-constant insert values cannot be inlined in uniqueness check, and all
# regions must be searched for duplicates.
query T
SELECT * FROM [EXPLAIN INSERT INTO child VALUES (1, 1), (2, 2)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: child(c_id, c_p_id, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • values
│                 size: 2 columns, 2 rows
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: child@child_pkey
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column1 = c_id)
│           │ pred: crdb_region_default != crdb_region
│           │
│           └── • scan buffer
│                 estimated row count: 2
│                 label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ table: parent@parent_pkey
            │ equality cols are key
            │ lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (column2 = p_id)
            │
            └── • lookup join (anti)
                │ table: parent@parent_pkey
                │ equality cols are key
                │ lookup condition: (crdb_region = 'ap-southeast-2') AND (column2 = p_id)
                │
                └── • scan buffer
                      estimated row count: 2
                      label: buffer 1

query T
SELECT * FROM [EXPLAIN UPSERT INTO child VALUES (1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: child(c_id, c_p_id, crdb_region)
│   │ arbiter constraints: child_pkey
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • cross join (left outer)
│               │
│               ├── • values
│               │     size: 3 columns, 1 row
│               │
│               └── • union all
│                   │ limit: 1
│                   │
│                   ├── • scan
│                   │     missing stats
│                   │     table: child@child_pkey
│                   │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                   │
│                   └── • scan
│                         missing stats
│                         table: child@child_pkey
│                         spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (anti)
            │ table: parent@parent_pkey
            │ equality cols are key
            │ lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (column2 = p_id)
            │
            └── • lookup join (anti)
                │ table: parent@parent_pkey
                │ equality cols are key
                │ lookup condition: (crdb_region = 'ap-southeast-2') AND (column2 = p_id)
                │
                └── • scan buffer
                      label: buffer 1

query T
SELECT * FROM [EXPLAIN DELETE FROM parent WHERE p_id = 1] OFFSET 2
----
·
• root
│
├── • delete
│   │ from: parent
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • union all
│           │ limit: 1
│           │
│           ├── • scan
│           │     missing stats
│           │     table: parent@parent_pkey
│           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│           │
│           └── • scan
│                 missing stats
│                 table: parent@parent_pkey
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: child@child_c_p_id_idx
            │ lookup condition: (crdb_region = 'ap-southeast-2') AND (p_id = c_p_id)
            │ remote lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (p_id = c_p_id)
            │
            └── • scan buffer
                  label: buffer 1

# Tests creating a index and a unique constraint on a REGIONAL BY ROW table.
statement ok
CREATE INDEX new_idx ON regional_by_row_table(a, b)

# The validation query to create the unique constraint should be efficient (see
# #56201).
statement ok
CREATE TABLE t56201 (a INT, b STRING, c STRING NOT NULL) LOCALITY REGIONAL BY ROW;

statement ok
ALTER TABLE t56201 INJECT STATISTICS '[
  {
    "columns": ["a"],
    "distinct_count": 3,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  },
  {
    "columns": ["b"],
    "distinct_count": 999900,
    "null_count": 5,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  },
  {
    "columns": ["c"],
    "distinct_count": 999999,
    "row_count": 1000000,
    "created_at": "2018-01-01 1:00:00.00000+00:00"
  }
]';

statement ok
ALTER TABLE t56201 ADD CONSTRAINT key_a_b UNIQUE (a, b);

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT a, b
FROM t56201
WHERE a IS NOT NULL AND b IS NOT NULL
GROUP BY a, b
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (a, b)
│
└── • limit
    │ columns: (a, b, count_rows)
    │ count: 1
    │
    └── • filter
        │ columns: (a, b, count_rows)
        │ estimated row count: 333,300
        │ filter: count_rows > 1
        │
        └── • group (streaming)
            │ columns: (a, b, count_rows)
            │ estimated row count: 999,900
            │ aggregate 0: count_rows()
            │ group by: a, b
            │ ordered: +a,+b
            │
            └── • union all
                │ columns: (a, b)
                │ ordering: +a,+b
                │ estimated row count: 999,995
                │
                ├── • union all
                │   │ columns: (a, b)
                │   │ ordering: +a,+b
                │   │ estimated row count: 666,663
                │   │
                │   ├── • filter
                │   │   │ columns: (a, b)
                │   │   │ ordering: +a,+b
                │   │   │ estimated row count: 333,332
                │   │   │ filter: b IS NOT NULL
                │   │   │
                │   │   └── • scan
                │   │         columns: (a, b)
                │   │         ordering: +a,+b
                │   │         estimated row count: 4 - 333,334 (33% of the table; stats collected <hidden> ago)
                │   │         table: t56201@key_a_b
                │   │         spans: /"@"/!NULL-/"@"/PrefixEnd
                │   │
                │   └── • filter
                │       │ columns: (a, b)
                │       │ ordering: +a,+b
                │       │ estimated row count: 333,332
                │       │ filter: b IS NOT NULL
                │       │
                │       └── • scan
                │             columns: (a, b)
                │             ordering: +a,+b
                │             estimated row count: 4 - 333,334 (33% of the table; stats collected <hidden> ago)
                │             table: t56201@key_a_b
                │             spans: /"\x80"/!NULL-/"\x80"/PrefixEnd
                │
                └── • filter
                    │ columns: (a, b)
                    │ ordering: +a,+b
                    │ estimated row count: 333,332
                    │ filter: b IS NOT NULL
                    │
                    └── • scan
                          columns: (a, b)
                          ordering: +a,+b
                          estimated row count: 4 - 333,334 (33% of the table; stats collected <hidden> ago)
                          table: t56201@key_a_b
                          spans: /"\xc0"/!NULL-/"\xc0"/PrefixEnd

statement ok
CREATE UNIQUE INDEX key_b_partial ON t56201 (b) WHERE a > 0;

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT b
FROM t56201@key_b_partial
WHERE b IS NOT NULL AND a > 0
GROUP BY b
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (b)
│
└── • limit
    │ columns: (b, count_rows)
    │ count: 1
    │
    └── • filter
        │ columns: (b, count_rows)
        │ estimated row count: 111,111
        │ filter: count_rows > 1
        │
        └── • group (streaming)
            │ columns: (b, count_rows)
            │ estimated row count: 333,333
            │ aggregate 0: count_rows()
            │ group by: b
            │ ordered: +b
            │
            └── • project
                │ columns: (b)
                │ ordering: +b
                │
                └── • union all
                    │ columns: (b, crdb_region, rowid)
                    │ ordering: +b
                    │ estimated row count: 333,332
                    │
                    ├── • union all
                    │   │ columns: (b, crdb_region, rowid)
                    │   │ ordering: +b
                    │   │ estimated row count: 222,221
                    │   │
                    │   ├── • scan
                    │   │     columns: (b, crdb_region, rowid)
                    │   │     ordering: +b
                    │   │     estimated row count: 3 - 111,111 (11% of the table; stats collected <hidden> ago)
                    │   │     table: t56201@key_b_partial (partial index)
                    │   │     spans: /"@"/!NULL-/"@"/PrefixEnd
                    │   │
                    │   └── • scan
                    │         columns: (b, crdb_region, rowid)
                    │         ordering: +b
                    │         estimated row count: 3 - 111,111 (11% of the table; stats collected <hidden> ago)
                    │         table: t56201@key_b_partial (partial index)
                    │         spans: /"\x80"/!NULL-/"\x80"/PrefixEnd
                    │
                    └── • scan
                          columns: (b, crdb_region, rowid)
                          ordering: +b
                          estimated row count: 3 - 111,111 (11% of the table; stats collected <hidden> ago)
                          table: t56201@key_b_partial (partial index)
                          spans: /"\xc0"/!NULL-/"\xc0"/PrefixEnd

statement ok
CREATE UNIQUE INDEX key_c_partial ON t56201 (c) WHERE a = 1;

query T
SELECT * FROM [EXPLAIN (VERBOSE) SELECT c
FROM t56201
WHERE c IS NOT NULL AND a = 1
GROUP BY c
HAVING count(*) > 1
LIMIT 1] OFFSET 2
----
·
• project
│ columns: (c)
│
└── • limit
    │ columns: (c, count_rows)
    │ count: 1
    │
    └── • filter
        │ columns: (c, count_rows)
        │ estimated row count: 111,111
        │ filter: count_rows > 1
        │
        └── • group (streaming)
            │ columns: (c, count_rows)
            │ estimated row count: 333,333
            │ aggregate 0: count_rows()
            │ group by: c
            │ ordered: +c
            │
            └── • union all
                │ columns: (c)
                │ ordering: +c
                │ estimated row count: 333,333
                │
                ├── • union all
                │   │ columns: (c)
                │   │ ordering: +c
                │   │ estimated row count: 222,222
                │   │
                │   ├── • scan
                │   │     columns: (c)
                │   │     ordering: +c
                │   │     estimated row count: 4 - 111,112 (11% of the table; stats collected <hidden> ago)
                │   │     table: t56201@key_c_partial (partial index)
                │   │     spans: /"@"-/"@"/PrefixEnd
                │   │
                │   └── • scan
                │         columns: (c)
                │         ordering: +c
                │         estimated row count: 4 - 111,112 (11% of the table; stats collected <hidden> ago)
                │         table: t56201@key_c_partial (partial index)
                │         spans: /"\x80"-/"\x80"/PrefixEnd
                │
                └── • scan
                      columns: (c)
                      ordering: +c
                      estimated row count: 4 - 111,112 (11% of the table; stats collected <hidden> ago)
                      table: t56201@key_c_partial (partial index)
                      spans: /"\xc0"-/"\xc0"/PrefixEnd

statement ok
ALTER TABLE regional_by_row_table ADD CONSTRAINT unique_b_a UNIQUE(b, a)

# We should plan uniqueness checks for all unique indexes in
# REGIONAL BY ROW tables.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table (pk, pk2, a, b) VALUES (1, 1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │
│   └── • values
│         size: 8 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • scan
│                 missing stats
│                 table: regional_by_row_table@regional_by_row_table_pkey
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│                 limit: 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • limit
│               │ count: 1
│               │
│               └── • filter
│                   │ filter: (pk != 1) OR (crdb_region != 'ap-southeast-2')
│                   │
│                   └── • union all
│                       │ limit: 3
│                       │
│                       ├── • scan
│                       │     missing stats
│                       │     table: regional_by_row_table@regional_by_row_table_b_key
│                       │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                       │
│                       └── • scan
│                             missing stats
│                             table: regional_by_row_table@regional_by_row_table_b_key
│                             spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join
│           │ table: regional_by_row_table@regional_by_row_table_pkey
│           │ equality: (crdb_region, pk) = (crdb_region,pk)
│           │ equality cols are key
│           │
│           └── • render
│               │
│               └── • limit
│                   │ count: 1
│                   │
│                   └── • filter
│                       │ filter: (pk != 1) OR (crdb_region != 'ap-southeast-2')
│                       │
│                       └── • union all
│                           │ limit: 3
│                           │
│                           ├── • scan
│                           │     missing stats
│                           │     table: regional_by_row_table@uniq_idx (partial index)
│                           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                           │
│                           └── • scan
│                                 missing stats
│                                 table: regional_by_row_table@uniq_idx (partial index)
│                                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • cross join (semi)
            │
            ├── • values
            │     size: 2 columns, 1 row
            │
            └── • filter
                │ filter: (pk != 1) OR (crdb_region != 'ap-southeast-2')
                │
                └── • union all
                    │ limit: 3
                    │
                    ├── • scan
                    │     missing stats
                    │     table: regional_by_row_table@new_idx
                    │     spans: [/'ap-southeast-2'/1/1 - /'ap-southeast-2'/1/1]
                    │
                    └── • scan
                          missing stats
                          table: regional_by_row_table@new_idx
                          spans: [/'ca-central-1'/1/1 - /'ca-central-1'/1/1] [/'us-east-1'/1/1 - /'us-east-1'/1/1]

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_b_key"\nDETAIL: Key \(b\)=\(3\) already exists\.
INSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('us-east-1', 2, 3, 2, 3)

# The conflict columns in an upsert should only include the primary key,
# not the region column.
# TODO(treilly): The constraint check for uniq_idx should use uniq_idx but due
# to stats issues w/ empty stats, partial indexes and multicol stats its not.
# Hopefully fixing #67583 (and possibly #67479) will resolve this.
query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b) VALUES ('us-east-1', 2, 3, 2, 3)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │ arbiter constraints: regional_by_row_table_pkey
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • cross join (left outer)
│               │
│               ├── • values
│               │     size: 6 columns, 1 row
│               │
│               └── • union all
│                   │ limit: 1
│                   │
│                   ├── • scan
│                   │     missing stats
│                   │     table: regional_by_row_table@regional_by_row_table_pkey
│                   │     spans: [/'ap-southeast-2'/2 - /'ap-southeast-2'/2]
│                   │
│                   └── • scan
│                         missing stats
│                         table: regional_by_row_table@regional_by_row_table_pkey
│                         spans: [/'ca-central-1'/2 - /'ca-central-1'/2] [/'us-east-1'/2 - /'us-east-1'/2]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column5 = b)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@new_idx
│           │ lookup condition: ((crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column4 = a)) AND (b > 0)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • filter
│               │ filter: column5 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ lookup condition: ((crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column4 = a)) AND (column5 = b)
            │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

# TODO(treilly): The constraint check for uniq_idx should use uniq_idx but due
# to stats issues w/ empty stats, partial indexes and multicol stats its not.
# Hopefully fixing #67583 (and possibly #67479) will resolve this.
query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b)
VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table(pk, pk2, a, b, j, crdb_region)
│   │ arbiter constraints: regional_by_row_table_pkey
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • lookup join (left outer)
│               │ table: regional_by_row_table@regional_by_row_table_pkey
│               │ equality cols are key
│               │ lookup condition: (crdb_region = 'ap-southeast-2') AND (column2 = pk)
│               │ remote lookup condition: (crdb_region IN ('ca-central-1', 'us-east-1')) AND (column2 = pk)
│               │ locking strength: for update
│               │
│               └── • render
│                   │
│                   └── • values
│                         size: 5 columns, 2 rows
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@regional_by_row_table_b_key
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column5 = b)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table@new_idx
│           │ lookup condition: ((crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column4 = a)) AND (b > 0)
│           │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
│           │
│           └── • filter
│               │ filter: column5 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table@new_idx
            │ lookup condition: ((crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column4 = a)) AND (column5 = b)
            │ pred: (upsert_pk != pk) OR (column1 != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

query TIIIIIIIIT colnames
SELECT * FROM (VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)) AS v(crdb_region, pk, pk2, a, b)
LEFT JOIN regional_by_row_table t ON v.pk = t.pk;
----
crdb_region   pk  pk2  a   b   pk    pk2   a     b     j
us-east-1     23  24   25  26  23    23    24    25    NULL
ca-central-1  30  30   31  32  NULL  NULL  NULL  NULL  NULL

# One row already exists, one row is new.
statement ok
UPSERT INTO regional_by_row_table (crdb_region, pk, pk2, a, b)
VALUES ('us-east-1', 23, 24, 25, 26), ('ca-central-1', 30, 30, 31, 32)

query TIIII colnames
SELECT crdb_region, pk, pk2, a, b FROM regional_by_row_table
ORDER BY pk
----
crdb_region     pk  pk2  a   b
ap-southeast-2  1   1    2   3
ap-southeast-2  4   4    5   6
ca-central-1    6   6    5   -5
ca-central-1    7   7    8   9
ca-central-1    10  10   11  12
us-east-1       20  20   21  22
us-east-1       23  24   25  26
ca-central-1    30  30   31  32

query T
SELECT create_statement FROM [SHOW CREATE TABLE regional_by_row_table]
----
CREATE TABLE public.regional_by_row_table (
                            pk INT8 NOT NULL,
                            pk2 INT8 NOT NULL,
                            a INT8 NOT NULL,
                            b INT8 NOT NULL,
                            j JSONB NULL,
                            crdb_region multi_region_test_db.public.crdb_internal_region NOT VISIBLE NOT NULL DEFAULT default_to_database_primary_region(gateway_region())::multi_region_test_db.public.crdb_internal_region,
                            CONSTRAINT regional_by_row_table_pkey PRIMARY KEY (pk ASC),
                            INDEX regional_by_row_table_a_idx (a ASC),
                            UNIQUE INDEX regional_by_row_table_b_key (b ASC),
                            INVERTED INDEX regional_by_row_table_j_idx (j),
                            UNIQUE INDEX uniq_idx (a ASC) WHERE b > 0:::INT8,
                            INDEX new_idx (a ASC, b ASC),
                            UNIQUE INDEX unique_b_a (b ASC, a ASC),
                            FAMILY fam_0_pk_pk2_a_b_j_crdb_region (pk, pk2, a, b, j, crdb_region)
) LOCALITY REGIONAL BY ROW

query TTB colnames
SELECT index_name, column_name, implicit FROM crdb_internal.index_columns
WHERE descriptor_name = 'regional_by_row_table' AND column_type = 'key'
ORDER BY 1, 2
----
index_name                   column_name  implicit
new_idx                      a            false
new_idx                      b            false
new_idx                      crdb_region  true
regional_by_row_table_a_idx  a            false
regional_by_row_table_a_idx  crdb_region  true
regional_by_row_table_b_key  b            false
regional_by_row_table_b_key  crdb_region  true
regional_by_row_table_j_idx  crdb_region  true
regional_by_row_table_j_idx  j            false
regional_by_row_table_pkey   crdb_region  true
regional_by_row_table_pkey   pk           false
uniq_idx                     a            false
uniq_idx                     crdb_region  true
unique_b_a                   a            false
unique_b_a                   b            false
unique_b_a                   crdb_region  true

# REGIONAL BY ROW AS

statement ok
CREATE TABLE regional_by_row_table_as (
  pk int PRIMARY KEY,
  a int,
  b int,
  crdb_region_col crdb_internal_region AS (
    CASE
      WHEN pk <= 10 THEN 'us-east-1'
      ELSE 'ap-southeast-2'
    END
  ) STORED,
  INDEX (a),
  UNIQUE (b),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW AS crdb_region_col

query TI
INSERT INTO regional_by_row_table_as (pk) VALUES (1), (10), (20)
RETURNING crdb_region_col, pk
----
us-east-1       1
us-east-1       10
ap-southeast-2  20

query IIIT colnames
SELECT * FROM regional_by_row_table_as ORDER BY pk
----
pk  a     b     crdb_region_col
1   NULL  NULL  us-east-1
10  NULL  NULL  us-east-1
20  NULL  NULL  ap-southeast-2


# We do not need uniqueness checks on pk since uniqueness can be inferred
# through the functional dependency between pk and the computed region column.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_as(pk, a, b, crdb_region_col)
│   │
│   └── • values
│         size: 5 columns, 1 row
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • cross join
            │
            ├── • values
            │     size: 1 column, 1 row
            │
            └── • limit
                │ count: 1
                │
                └── • filter
                    │ filter: (pk != 1) OR (crdb_region_col != 'us-east-1')
                    │
                    └── • union all
                        │ limit: 3
                        │
                        ├── • scan
                        │     missing stats
                        │     table: regional_by_row_table_as@regional_by_row_table_as_b_key
                        │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
                        │
                        └── • scan
                              missing stats
                              table: regional_by_row_table_as@regional_by_row_table_as_b_key
                              spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_as_pkey"\nDETAIL: Key \(pk\)=\(1\) already exists\.
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (1, 1, 1)

statement ok
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (30, 1, 1)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_as_b_key"\nDETAIL: Key \(b\)=\(1\) already exists\.
INSERT INTO regional_by_row_table_as (pk, a, b) VALUES (2, 1, 1)

# Verify that we plan single-region scans for REGIONAL BY ROW tables with a computed region.
query T
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table_as WHERE pk = 10] OFFSET 2
----
·
• scan
  missing stats
  table: regional_by_row_table_as@regional_by_row_table_as_pkey
  spans: [/'us-east-1'/10 - /'us-east-1'/10]

subtest virtual_columns

statement ok
CREATE TABLE regional_by_row_table_virt (
  pk int PRIMARY KEY,
  a int NOT NULL,
  b int NOT NULL,
  v INT AS (a + b) VIRTUAL,
  UNIQUE (v),
  UNIQUE INDEX ((a + 10)),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW

# Uniqueness checks for virtual columns should be efficient.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_virt(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │
│   └── • values
│         size: 7 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • scan
│                 missing stats
│                 table: regional_by_row_table_virt@regional_by_row_table_virt_pkey
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│                 limit: 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • limit
│               │ count: 1
│               │
│               └── • filter
│                   │ filter: ((a + b) = 2) AND ((pk != 1) OR (crdb_region != 'ap-southeast-2'))
│                   │
│                   └── • scan
│                         missing stats
│                         table: regional_by_row_table_virt@regional_by_row_table_virt_pkey
│                         spans: [/'ap-southeast-2' - /'ap-southeast-2'] [/'ca-central-1' - /'us-east-1']
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • cross join
            │
            ├── • values
            │     size: 1 column, 1 row
            │
            └── • limit
                │ count: 1
                │
                └── • filter
                    │ filter: a = 1
                    │
                    └── • index join
                        │ table: regional_by_row_table_virt@regional_by_row_table_virt_pkey
                        │
                        └── • filter
                            │ filter: (pk != 1) OR (crdb_region != 'ap-southeast-2')
                            │
                            └── • scan
                                  missing stats
                                  table: regional_by_row_table_virt@regional_by_row_table_virt_expr_key
                                  spans: [/'ap-southeast-2'/11 - /'ap-southeast-2'/11] [/'ca-central-1'/11 - /'ca-central-1'/11] [/'us-east-1'/11 - /'us-east-1'/11]

query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table_virt(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │ arbiter constraints: regional_by_row_table_virt_pkey
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • render
│               │
│               └── • cross join (left outer)
│                   │
│                   ├── • values
│                   │     size: 6 columns, 1 row
│                   │
│                   └── • render
│                       │
│                       └── • union all
│                           │ limit: 1
│                           │
│                           ├── • scan
│                           │     missing stats
│                           │     table: regional_by_row_table_virt@regional_by_row_table_virt_pkey
│                           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                           │
│                           └── • scan
│                                 missing stats
│                                 table: regional_by_row_table_virt@regional_by_row_table_virt_pkey
│                                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table_virt@regional_by_row_table_virt_v_key
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (v_comp = v)
│           │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│           │
│           └── • scan buffer
│                 label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table_virt@regional_by_row_table_virt_expr_key
            │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (crdb_internal_idx_expr_comp = crdb_internal_idx_expr)
            │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
            │
            └── • scan buffer
                  label: buffer 1

statement ok
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (1, 1, 1)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_v_key"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 2, 0)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_v_key"\nDETAIL: Key \(v\)=\(2\) already exists\.
UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 2, 0)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_expr_key"\nDETAIL: Key \(a \+ 10:::INT8\)=\(11\) already exists\.
INSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 1, 3)

statement error pq: duplicate key value violates unique constraint "regional_by_row_table_virt_expr_key"\nDETAIL: Key \(a \+ 10:::INT8\)=\(11\) already exists\.
UPSERT INTO regional_by_row_table_virt (pk, a, b) VALUES (2, 1, 3)

statement ok
CREATE TABLE regional_by_row_table_virt_partial (
  pk int PRIMARY KEY,
  a int NOT NULL,
  b int NOT NULL,
  v INT AS (a + b) VIRTUAL,
  UNIQUE INDEX v_a_gt_0 (v) WHERE a > 0,
  UNIQUE INDEX v_v_gt_0 (v) WHERE v > 0,
  UNIQUE INDEX a_plus_10_v_gt_0 ((a + 10)) WHERE v > 0,
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW

# Uniqueness checks for virtual columns should be efficient.
query T
SELECT * FROM [EXPLAIN INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • insert
│   │ into: regional_by_row_table_virt_partial(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │
│   └── • values
│         size: 9 columns, 1 row
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • scan
│                 missing stats
│                 table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
│                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│                 limit: 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join
│           │ table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
│           │ equality: (crdb_region, pk) = (crdb_region,pk)
│           │ equality cols are key
│           │
│           └── • render
│               │
│               └── • limit
│                   │ count: 1
│                   │
│                   └── • filter
│                       │ filter: (pk != 1) OR (crdb_region != 'ap-southeast-2')
│                       │
│                       └── • scan
│                             missing stats
│                             table: regional_by_row_table_virt_partial@v_a_gt_0 (partial index)
│                             spans: [/'ap-southeast-2'/2 - /'ap-southeast-2'/2] [/'ca-central-1'/2 - /'ca-central-1'/2] [/'us-east-1'/2 - /'us-east-1'/2]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • cross join
│           │
│           ├── • values
│           │     size: 1 column, 1 row
│           │
│           └── • limit
│               │ count: 1
│               │
│               └── • filter
│                   │ filter: ((a + b) = 2) AND ((pk != 1) OR (crdb_region != 'ap-southeast-2'))
│                   │
│                   └── • scan
│                         missing stats
│                         table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
│                         spans: [/'ap-southeast-2' - /'ap-southeast-2'] [/'ca-central-1' - /'us-east-1']
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • cross join
            │
            ├── • values
            │     size: 1 column, 1 row
            │
            └── • limit
                │ count: 1
                │
                └── • filter
                    │ filter: ((a = 1) AND (b > -1)) AND ((pk != 1) OR (crdb_region != 'ap-southeast-2'))
                    │
                    └── • scan
                          missing stats
                          table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
                          spans: [/'ap-southeast-2' - /'ap-southeast-2'] [/'ca-central-1' - /'us-east-1']

query T
SELECT * FROM [EXPLAIN UPSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)] OFFSET 2
----
·
• root
│
├── • upsert
│   │ into: regional_by_row_table_virt_partial(pk, a, b, v, crdb_region, crdb_internal_idx_expr)
│   │ arbiter constraints: regional_by_row_table_virt_partial_pkey
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • render
│           │
│           └── • render
│               │
│               └── • cross join (left outer)
│                   │
│                   ├── • values
│                   │     size: 6 columns, 1 row
│                   │
│                   └── • render
│                       │
│                       └── • union all
│                           │ limit: 1
│                           │
│                           ├── • scan
│                           │     missing stats
│                           │     table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
│                           │     spans: [/'ap-southeast-2'/1 - /'ap-southeast-2'/1]
│                           │
│                           └── • scan
│                                 missing stats
│                                 table: regional_by_row_table_virt_partial@regional_by_row_table_virt_partial_pkey
│                                 spans: [/'ca-central-1'/1 - /'ca-central-1'/1] [/'us-east-1'/1 - /'us-east-1'/1]
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table_virt_partial@v_a_gt_0 (partial index)
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (v_comp = v)
│           │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│           │
│           └── • filter
│               │ filter: column2 > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
├── • constraint-check
│   │
│   └── • error if rows
│       │
│       └── • lookup join (semi)
│           │ table: regional_by_row_table_virt_partial@v_v_gt_0 (partial index)
│           │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (v_comp = v)
│           │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
│           │
│           └── • filter
│               │ filter: v_comp > 0
│               │
│               └── • scan buffer
│                     label: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: regional_by_row_table_virt_partial@a_plus_10_v_gt_0 (partial index)
            │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (crdb_internal_idx_expr_comp = crdb_internal_idx_expr)
            │ pred: (upsert_pk != pk) OR (upsert_crdb_region != crdb_region)
            │
            └── • filter
                │ filter: v_comp > 0
                │
                └── • scan buffer
                      label: buffer 1

statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (1, 1, 1)

statement error pq: duplicate key value violates unique constraint "v_a_gt_0"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (2, 3, -1)

statement error pq: duplicate key value violates unique constraint "v_v_gt_0"\nDETAIL: Key \(v\)=\(2\) already exists\.
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (2, -1, 3)

statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (3, -2, -2)

# No conflict because a <= 0 and v <= 0.
statement ok
INSERT INTO regional_by_row_table_virt_partial (pk, a, b) VALUES (4, -3, -1)

subtest regressions

# Regression test for #63109. UPSERT should not cause the error
# ERROR: missing "crdb_region" primary key column.
statement ok
CREATE DATABASE single_region_test_db PRIMARY REGION "ap-southeast-2";

statement ok
USE single_region_test_db;

statement ok
CREATE TABLE t63109 (a INT, b STRING);

statement ok
ALTER TABLE t63109 SET LOCALITY REGIONAL BY ROW;

statement ok
INSERT INTO t63109 VALUES (1, 'one');

statement ok
UPSERT INTO t63109 VALUES (1, 'two');
UPSERT INTO t63109 (crdb_region, a, b) VALUES ('ap-southeast-2', 1, 'three');
UPSERT INTO t63109 (a, b) VALUES (1, 'four');

# Regression test for #65064. We should always choose locality optimized scan
# even if the stats show zero rows.
statement ok
CREATE DATABASE db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1";

statement ok
USE db;

statement ok
CREATE TABLE t65064 (username STRING NOT NULL UNIQUE) LOCALITY REGIONAL BY ROW;

statement ok
ALTER TABLE t65064 INJECT STATISTICS '[
  {
    "columns": ["username"],
    "created_at": "2018-01-01 1:00:00.00000+00:00",
    "row_count": 0,
    "distinct_count": 0
  }
]';

query T retry
SELECT * FROM [EXPLAIN SELECT * FROM t65064 WHERE username = 'kharris'] OFFSET 2
----
·
• union all
│ estimated row count: 1
│ limit: 1
│
├── • scan
│     estimated row count: 1 (100% of the table; stats collected <hidden> ago)
│     table: t65064@t65064_username_key
│     spans: [/'ap-southeast-2'/'kharris' - /'ap-southeast-2'/'kharris']
│
└── • scan
      estimated row count: 1 (100% of the table; stats collected <hidden> ago)
      table: t65064@t65064_username_key
      spans: [/'ca-central-1'/'kharris' - /'ca-central-1'/'kharris'] [/'us-east-1'/'kharris' - /'us-east-1'/'kharris']

# Regression test for #73024. Ensure that uniqueness checks actually check all
# regions.
statement ok
CREATE TABLE t73024 (p INT PRIMARY KEY) LOCALITY REGIONAL BY ROW;
INSERT INTO t73024 (crdb_region, p) VALUES ('us-east-1', 100);

query error duplicate key value violates unique constraint
INSERT INTO t73024 VALUES (100);

query I
SELECT * FROM t73024
----
100

##############################################
# Locality optimized scans with LIMIT clause #
##############################################
# In this section we are checking explains and tracing results of queries
# similar to those in pkg/sql/opt/xform/testdata/rules/scan and
# pkg/ccl/logictestccl/testdata/logic_test/regional_by_row, where rule firing
# and query results are checked.

statement ok
SET database = multi_region_test_db

# LIMIT clause enables locality optimized scan on a REGIONAL BY ROW table
query T
SELECT * FROM [
EXPLAIN SELECT
    pk, pk2, a, b, crdb_region
FROM
    regional_by_row_table
LIMIT
    1]
----
distribution: local
vectorized: true
·
• union all
│ limit: 1
│
├── • scan
│     missing stats
│     table: regional_by_row_table@regional_by_row_table_pkey
│     spans: [/'ap-southeast-2' - /'ap-southeast-2']
│     limit: 1
│
└── • scan
      missing stats
      table: regional_by_row_table@regional_by_row_table_pkey
      spans: [/'ca-central-1' - /'us-east-1']
      limit: 1

# Test partitioning on an index column
statement ok
CREATE TABLE regional_by_row_table_as4 (
    pk
        INT8 PRIMARY KEY,
    a
        INT8,
    crdb_region_col
        crdb_internal_region
        AS (
            CASE
            WHEN (a % 3) = 0 THEN 'ap-southeast-2'
            WHEN (a % 3) = 1 THEN 'ca-central-1'
            ELSE 'us-east-1'
            END
        ) VIRTUAL
        NOT NULL,
    INDEX a_idx (a),
    FAMILY (pk, a)
)
    LOCALITY REGIONAL BY ROW AS crdb_region_col

statement ok
INSERT
INTO
    regional_by_row_table_as4
SELECT
    g, g
FROM
    ROWS FROM (generate_series(1, 1000)) AS g (g)

statement ok
SET vectorize = "on"

statement ok nodeidx=0
SET database = multi_region_test_db;
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a BETWEEN 1 AND 100
        LIMIT
            10
    );
SET TRACING = off

# If the rows are found in the local region, the other regions are not
# searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/?/3/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/6/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/9/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/12/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/15/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/18/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/21/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/24/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/27/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/30/? -> <undecoded>
output row: [10]

statement ok
SET vectorize = off

statement ok
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a BETWEEN 1 AND 100
        LIMIT
            10
    );
SET TRACING = off

statement ok
RESET vectorize

# If the rows are found in the local region, the other regions are not searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/3/3 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/6/6 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/9/9 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/12/12 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/15/15 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/18/18 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/21/21 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/24/24 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/27/27 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/30/30 -> <undecoded>
output row: [10]

statement ok
SET vectorize = "on"

# Locality optimized scan with an IN list
query T
SELECT
    *
FROM
    [
        EXPLAIN (OPT)
            SELECT
                count(*)
            FROM
                (
                    SELECT
                        *
                    FROM
                        regional_by_row_table_as4@a_idx
                    WHERE
                        a
                        IN (1, 2, 4, 5, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18,
                            18, 19, 22, 23, 24, 25, 28, 30, 33, 34, 39, 40)
                    LIMIT
                        5
                )
    ]
OFFSET
    2
----
 │    ├── scan regional_by_row_table_as4@a_idx
 │    │    ├── constraint: /11/10/9
 │    │    │    ├── [/'ap-southeast-2'/1 - /'ap-southeast-2'/2]
 │    │    │    ├── [/'ap-southeast-2'/4 - /'ap-southeast-2'/6]
 │    │    │    ├── [/'ap-southeast-2'/8 - /'ap-southeast-2'/8]
 │    │    │    ├── [/'ap-southeast-2'/10 - /'ap-southeast-2'/12]
 │    │    │    ├── [/'ap-southeast-2'/14 - /'ap-southeast-2'/19]
 │    │    │    ├── [/'ap-southeast-2'/22 - /'ap-southeast-2'/25]
 │    │    │    ├── [/'ap-southeast-2'/28 - /'ap-southeast-2'/28]
 │    │    │    ├── [/'ap-southeast-2'/30 - /'ap-southeast-2'/30]
 │    │    │    ├── [/'ap-southeast-2'/33 - /'ap-southeast-2'/34]
 │    │    │    └── [/'ap-southeast-2'/39 - /'ap-southeast-2'/40]
 │    │    ├── limit: 5
 │    │    └── flags: force-index=a_idx
 │    └── scan regional_by_row_table_as4@a_idx
 │         ├── constraint: /16/15/14
 │         │    ├── [/'ca-central-1'/1 - /'ca-central-1'/2]
 │         │    ├── [/'ca-central-1'/4 - /'ca-central-1'/6]
 │         │    ├── [/'ca-central-1'/8 - /'ca-central-1'/8]
 │         │    ├── [/'ca-central-1'/10 - /'ca-central-1'/12]
 │         │    ├── [/'ca-central-1'/14 - /'ca-central-1'/19]
 │         │    ├── [/'ca-central-1'/22 - /'ca-central-1'/25]
 │         │    ├── [/'ca-central-1'/28 - /'ca-central-1'/28]
 │         │    ├── [/'ca-central-1'/30 - /'ca-central-1'/30]
 │         │    ├── [/'ca-central-1'/33 - /'ca-central-1'/34]
 │         │    ├── [/'ca-central-1'/39 - /'ca-central-1'/40]
 │         │    ├── [/'us-east-1'/1 - /'us-east-1'/2]
 │         │    ├── [/'us-east-1'/4 - /'us-east-1'/6]
 │         │    ├── [/'us-east-1'/8 - /'us-east-1'/8]
 │         │    ├── [/'us-east-1'/10 - /'us-east-1'/12]
 │         │    ├── [/'us-east-1'/14 - /'us-east-1'/19]
 │         │    ├── [/'us-east-1'/22 - /'us-east-1'/25]
 │         │    ├── [/'us-east-1'/28 - /'us-east-1'/28]
 │         │    ├── [/'us-east-1'/30 - /'us-east-1'/30]
 │         │    ├── [/'us-east-1'/33 - /'us-east-1'/34]
 │         │    └── [/'us-east-1'/39 - /'us-east-1'/40]
 │         ├── limit: 5
 │         └── flags: force-index=a_idx
 └── aggregations
      └── count-rows

statement ok
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a
            IN (1, 2, 4, 5, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18,
                18, 19, 22, 23, 24, 25, 28, 30, 33, 34, 39, 40)
        LIMIT
            5
    );
SET TRACING = off

statement ok
RESET vectorize

# If the rows are found in the local region, the other regions are not searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/?/6/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/12/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/15/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/18/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/24/? -> <undecoded>
output row: [5]

statement ok
SET vectorize = off

statement ok
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a
            IN (1, 2, 4, 5, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18,
                18, 19, 22, 23, 24, 25, 28, 30, 33, 34, 39, 40)
        LIMIT
            5
    );
SET TRACING = off

statement ok
RESET vectorize

# If the rows are found in the local region, the other regions are not searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/6/6 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/12/12 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/15/15 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/18/18 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/24/24 -> <undecoded>
output row: [5]

statement ok
SET vectorize = "on"

# Locality optimized scan with multiple range predicates
query T
SELECT
    *
FROM
    [
        EXPLAIN (OPT)
            SELECT
                count(*)
            FROM
                (
                    SELECT
                        *
                    FROM
                        regional_by_row_table_as4@a_idx
                    WHERE
                        a BETWEEN -1 AND 10
                        OR a BETWEEN 100 AND 110
                        OR a BETWEEN 990 AND 1010
                    LIMIT
                        9
                )
    ]
OFFSET
    2
----
 │    ├── scan regional_by_row_table_as4@a_idx
 │    │    ├── constraint: /11/10/9
 │    │    │    ├── [/'ap-southeast-2'/-1 - /'ap-southeast-2'/10]
 │    │    │    ├── [/'ap-southeast-2'/100 - /'ap-southeast-2'/110]
 │    │    │    └── [/'ap-southeast-2'/990 - /'ap-southeast-2'/1010]
 │    │    ├── limit: 9
 │    │    └── flags: force-index=a_idx
 │    └── scan regional_by_row_table_as4@a_idx
 │         ├── constraint: /16/15/14
 │         │    ├── [/'ca-central-1'/-1 - /'ca-central-1'/10]
 │         │    ├── [/'ca-central-1'/100 - /'ca-central-1'/110]
 │         │    ├── [/'ca-central-1'/990 - /'ca-central-1'/1010]
 │         │    ├── [/'us-east-1'/-1 - /'us-east-1'/10]
 │         │    ├── [/'us-east-1'/100 - /'us-east-1'/110]
 │         │    └── [/'us-east-1'/990 - /'us-east-1'/1010]
 │         ├── limit: 9
 │         └── flags: force-index=a_idx
 └── aggregations
      └── count-rows

statement ok
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a BETWEEN -1 AND 10
            OR a BETWEEN 100 AND 110
            OR a BETWEEN 990 AND 1010
        LIMIT
            9
    );
SET TRACING = off

statement ok
RESET vectorize

# If the rows are found in the local region, the other regions are not searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/?/3/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/6/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/9/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/102/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/105/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/108/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/990/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/993/? -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/?/996/? -> <undecoded>
output row: [9]

statement ok
SET vectorize = off

statement ok
SET TRACING = "on", kv, results;
SELECT
    count(*)
FROM
    (
        SELECT
            *
        FROM
            regional_by_row_table_as4@a_idx
        WHERE
            a BETWEEN -1 AND 10
            OR a BETWEEN 100 AND 110
            OR a BETWEEN 990 AND 1010
        LIMIT
            9
    );
SET TRACING = off

statement ok
RESET vectorize

# If the rows are found in the local region, the other regions are not searched.
query T
SELECT
    message
FROM
    [SHOW KV TRACE FOR SESSION] WITH ORDINALITY
WHERE
    message LIKE 'fetched:%' OR message LIKE 'output row%'
ORDER BY
    "ordinality" ASC
----
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/3/3 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/6/6 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/9/9 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/102/102 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/105/105 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/108/108 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/990/990 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/993/993 -> <undecoded>
fetched: /regional_by_row_table_as4/a_idx/'ap-southeast-2'/996/996 -> <undecoded>
output row: [9]

statement ok
RESET vectorize

# REGIONAL BY ROW AS table with an explicit crdb_internal_region check
# constraint.
statement ok
CREATE TABLE regional_by_row_table_as1 (
  pk int PRIMARY KEY,
  a int,
  b int,
  crdb_region_col1 crdb_internal_region NOT NULL AS (
    CASE
      WHEN pk <= 10 THEN 'ca-central-1'
      ELSE 'us-east-1'
    END
  ) VIRTUAL CHECK(crdb_region_col1 BETWEEN 'ap-southeast-2' AND 'us-east-1'),
  crdb_region_col crdb_internal_region NOT NULL AS (
    CASE
      WHEN pk <= 1 THEN 'ca-central-1'
      ELSE 'us-east-1'
    END
  ) VIRTUAL,
  INDEX (a),
  UNIQUE (b),
  FAMILY (pk, a, b)
) LOCALITY REGIONAL BY ROW AS crdb_region_col1

statement ok
INSERT INTO regional_by_row_table_as1 (pk) VALUES (1), (2), (3), (10), (20)

# An extra crdb_region check constraint should still allow locality optimized scan.
query T
SELECT * FROM [EXPLAIN SELECT * FROM regional_by_row_table_as1 LIMIT 3] OFFSET 2
----
·
• render
│
└── • union all
    │ limit: 3
    │
    ├── • scan
    │     missing stats
    │     table: regional_by_row_table_as1@regional_by_row_table_as1_pkey
    │     spans: [/'ap-southeast-2' - /'ap-southeast-2']
    │     limit: 3
    │
    └── • scan
          missing stats
          table: regional_by_row_table_as1@regional_by_row_table_as1_pkey
          spans: [/'ca-central-1' - /'us-east-1']
          limit: 3

subtest index_recommendations

# Enable vectorize so we get consistent EXPLAIN output. We cannot use the
# OFFSET 2 strategy for these tests because that disables the index
# recommendation (index recommendations are only used when EXPLAIN is the
# root of the query tree).
statement ok
SET index_recommendations_enabled = true;
SET vectorize=on

statement ok
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name STRING NOT NULL,
  email STRING NOT NULL UNIQUE,
  INDEX (name)
) LOCALITY REGIONAL BY ROW

# Check that we don't recommend indexes that already exist.
query T
EXPLAIN INSERT INTO users (name, email)
VALUES ('Craig Roacher', 'craig@cockroachlabs.com')
----
distribution: local
vectorized: true
·
• root
│
├── • insert
│   │ into: users(id, name, email, crdb_region)
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • values
│             size: 5 columns, 1 row
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: users@users_email_key
            │ lookup condition: (crdb_region IN ('ap-southeast-2', 'ca-central-1', 'us-east-1')) AND (column2 = email)
            │ pred: (id_default != id) OR (crdb_region_default != crdb_region)
            │
            └── • scan buffer
                  estimated row count: 1
                  label: buffer 1

statement ok
SET index_recommendations_enabled = false;
RESET vectorize

subtest foreign_keys

statement ok
DROP TABLE users;
CREATE TABLE users (
    id         UUID   PRIMARY KEY DEFAULT gen_random_uuid(),
    username   STRING NOT NULL
) LOCALITY REGIONAL BY ROW;

statement ok
CREATE TABLE user_settings (
    id      UUID   PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID   NOT NULL,
    value   STRING NOT NULL,
    INDEX(user_id),
    FOREIGN KEY (user_id, crdb_region) REFERENCES users (id, crdb_region)
) LOCALITY REGIONAL BY ROW;

statement ok
CREATE TABLE user_settings_cascades (
    id      UUID   PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID   NOT NULL,
    value   STRING NOT NULL,
    INDEX(user_id),
    FOREIGN KEY (user_id, crdb_region) REFERENCES users (id, crdb_region) ON DELETE CASCADE ON UPDATE CASCADE
) LOCALITY REGIONAL BY ROW;

# TODO(rytaft): The following query should be able to infer that the join
# condition
#   users.id = user_settings.user_id
# is equivalent to
#   users.id = user_settings.user_id AND users.crdb_region = user_settings.crdb_region
# This would allow the optimizer to plan a lookup join between users and user_settings
# and avoid visiting all regions. See #69617.
query T
EXPLAIN SELECT users.crdb_region AS user_region, user_settings.crdb_region AS user_settings_region, *
  FROM users JOIN user_settings ON users.id = user_settings.user_id AND users.id = '5ebfedee-0dcf-41e6-a315-5fa0b51b9882';
----
distribution: local
vectorized: true
·
• merge join
│ equality: (user_id) = (id)
│ right cols are key
│
├── • index join
│   │ table: user_settings@user_settings_pkey
│   │
│   └── • scan
│         missing stats
│         table: user_settings@user_settings_user_id_idx
│         spans: [/'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882'] [/'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882'] [/'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882']
│
└── • union all
    │ limit: 1
    │
    ├── • scan
    │     missing stats
    │     table: users@users_pkey
    │     spans: [/'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882']
    │
    └── • scan
          missing stats
          table: users@users_pkey
          spans: [/'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882'] [/'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882']

# Ensure that the FK checks and cascades are efficient.
query T
EXPLAIN INSERT INTO user_settings (user_id, value) VALUES ('5ebfedee-0dcf-41e6-a315-5fa0b51b9882', 'foo')
----
distribution: local
vectorized: true
·
• insert fast path
  into: user_settings(id, user_id, value, crdb_region)
  auto commit
  FK check: users@users_pkey
  size: 5 columns, 1 row

query T
EXPLAIN INSERT INTO user_settings_cascades (user_id, value) VALUES ('5ebfedee-0dcf-41e6-a315-5fa0b51b9882', 'foo')
----
distribution: local
vectorized: true
·
• insert fast path
  into: user_settings_cascades(id, user_id, value, crdb_region)
  auto commit
  FK check: users@users_pkey
  size: 5 columns, 1 row

query T
EXPLAIN DELETE FROM users WHERE id = '5ebfedee-0dcf-41e6-a315-5fa0b51b9882'
----
distribution: local
vectorized: true
·
• root
│
├── • delete
│   │ from: users
│   │
│   └── • buffer
│       │ label: buffer 1
│       │
│       └── • union all
│           │ limit: 1
│           │
│           ├── • scan
│           │     missing stats
│           │     table: users@users_pkey
│           │     spans: [/'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ap-southeast-2'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882']
│           │
│           └── • scan
│                 missing stats
│                 table: users@users_pkey
│                 spans: [/'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'ca-central-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882'] [/'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882' - /'us-east-1'/'5ebfedee-0dcf-41e6-a315-5fa0b51b9882']
│
├── • fk-cascade
│     fk: user_settings_cascades_user_id_crdb_region_fkey
│     input: buffer 1
│
└── • constraint-check
    │
    └── • error if rows
        │
        └── • lookup join (semi)
            │ table: user_settings@user_settings_user_id_idx
            │ equality: (crdb_region, id) = (crdb_region,user_id)
            │
            └── • scan buffer
                  label: buffer 1

# Regression test for #88047
statement ok
CREATE TABLE t88047 (
  json_col JSONB NULL,
  notes STRING,
  region public.crdb_internal_region NOT NULL AS
  (CASE WHEN ((json_col->'loc':::STRING)->>'state':::STRING) IN ('AZ':::STRING, 'CA':::STRING, 'NV':::STRING) THEN 'ap-southeast-2':::public.crdb_internal_region
        WHEN ((json_col->'loc':::STRING)->>'state':::STRING) IN ('MI':::STRING, 'MN':::STRING, 'MO':::STRING) THEN 'ca-central-1':::public.crdb_internal_region
        WHEN ((json_col->'loc':::STRING)->>'state':::STRING) IN ('PA':::STRING, 'VT':::STRING, 'NY':::STRING) THEN 'us-east-1':::public.crdb_internal_region END) STORED,
  INVERTED INDEX t88047_inv_idx (json_col)
) LOCALITY REGIONAL BY ROW AS region

statement ok
INSERT INTO t88047(json_col, notes)
  VALUES ('{"loc": {"state": "PA"}}':::JSONB, 'Liberty Bell'),
         ('{"loc": {"state": "PA"}}':::JSONB, 'Rocky Balboa'),
         ('{"loc": {"state": "VT"}}':::JSONB, 'Maple Syrup'),
         ('{"loc": {"state": "NY"}}':::JSONB, 'Big Apple'),
         ('{"loc": {"state": "NY"}}':::JSONB, 'Statue of Liberty'),
         ('{"loc": {"state": "CA"}}':::JSONB, 'Golden Gate Bridge'),
         ('{"loc": {"state": "CA"}}':::JSONB, 'Yosemite'),
         ('{"loc": {"state": "MI"}}':::JSONB, 'Go Blue!');

# Expect to pick locality-optimized search from the inverted RBR index.
query T
EXPLAIN(OPT)
  SELECT * FROM t88047
WHERE json_col->'loc' @> '{"state":"NY"}'
  LIMIT 2
----
index-join t88047
 └── locality-optimized-search
      ├── scan t88047@t88047_inv_idx
      │    ├── constraint: /11: [/'ap-southeast-2' - /'ap-southeast-2']
      │    ├── inverted constraint: /15/12
      │    │    └── spans: ["7loc\x00\x02state\x00\x01\x12NY\x00\x01", "7loc\x00\x02state\x00\x01\x12NY\x00\x01"]
      │    └── limit: 2
      └── scan t88047@t88047_inv_idx
           ├── constraint: /18
           │    ├── [/'ca-central-1' - /'ca-central-1']
           │    └── [/'us-east-1' - /'us-east-1']
           ├── inverted constraint: /22/19
           │    └── spans: ["7loc\x00\x02state\x00\x01\x12NY\x00\x01", "7loc\x00\x02state\x00\x01\x12NY\x00\x01"]
           └── limit: 2

# Expect to see only rows from "state":"NY".
query TTT
SELECT * FROM t88047
WHERE json_col->'loc' @> '{"state":"NY"}'
  LIMIT 2
----
{"loc": {"state": "NY"}}  Big Apple          us-east-1
{"loc": {"state": "NY"}}  Statue of Liberty  us-east-1

statement ok
DROP INDEX t88047_inv_idx

# Expect to see only rows from "state":"NY" after inverted index is dropped.
query TTT
SELECT * FROM t88047
WHERE json_col->'loc' @> '{"state":"NY"}'
  LIMIT 2
----
{"loc": {"state": "NY"}}  Big Apple          us-east-1
{"loc": {"state": "NY"}}  Statue of Liberty  us-east-1
