# knob-opt: sync-event-log
# LogicTest: multiregion-9node-3region-3azs-tenant

# Only the root user can modify the system database's regions.
user root

statement ok
CREATE FUNCTION get_db_survival_goal() RETURNS SETOF RECORD
LANGUAGE SQL
AS $$
 SELECT
 name,
 survival_goal
 FROM crdb_internal.databases
 WHERE name IN ('system', 'alter_survive_db', 'create_survive_db', 'survive_zone_db')
 ORDER BY name;
$$;

query T
SELECT get_db_survival_goal()
----
(system,)

statement ok
CREATE DATABASE alter_survive_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1";
CREATE DATABASE survive_zone_db PRIMARY REGION "ca-central-1" REGIONS "ap-southeast-2", "us-east-1";

# Make sure that system db survival goal is not affected when it's not multi-regional.
statement ok
ALTER DATABASE alter_survive_db SURVIVE REGION FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,region)
(survive_zone_db,zone)
(system,)

statement ok
create table alter_survive_db.t();

# When SURVIVE REGION FAILURE is set with 3 regions we must set 5 constraints for 5 replicas.
# This query shows 5 total constraints, where 1 voter constraint is also a normal constraint.
query TT nosort,colnames
show zone configuration for table alter_survive_db.t
----
target                           raw_config_sql
TABLE alter_survive_db.public.t  ALTER TABLE alter_survive_db.public.t CONFIGURE ZONE USING
                                   range_min_bytes = 134217728,
                                   range_max_bytes = 536870912,
                                   gc.ttlseconds = 14400,
                                   num_replicas = 5,
                                   num_voters = 5,
                                   constraints = '{+region=ap-southeast-2: 2, +region=ca-central-1: 1, +region=us-east-1: 1}',
                                   voter_constraints = '{+region=ca-central-1: 2}',
                                   lease_preferences = '[[+region=ca-central-1]]'

statement ok
drop table alter_survive_db.t;

statement ok
ALTER DATABASE alter_survive_db SURVIVE ZONE FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,)

# Make system db multi-regional
statement ok
ALTER DATABASE system PRIMARY REGION "ca-central-1";
ALTER DATABASE system ADD REGION "ap-southeast-2";
ALTER DATABASE system ADD REGION "us-east-1";

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,region)

# Make sure system db survival goal is upgraded.
statement ok
ALTER DATABASE alter_survive_db SURVIVE REGION FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,region)
(survive_zone_db,zone)
(system,region)

# Make sure system db survival goal is downgraded.
statement ok
ALTER DATABASE alter_survive_db SURVIVE ZONE FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,region)

# Make sure a database created with a surival goal upgrades the systemdb.
statement ok
CREATE DATABASE create_survive_db PRIMARY REGION "us-east-1" REGIONS "ap-southeast-2", "ca-central-1" SURVIVE REGION FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(create_survive_db,region)
(survive_zone_db,zone)
(system,region)

# Make sure dropping the database downgrades the survival goal.
statement ok
DROP DATABASE create_survive_db;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,region)

statement ok
ALTER DATABASE system SURVIVE REGION FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,region)

statement ok
ALTER DATABASE system SURVIVE ZONE FAILURE;

query T nosort
SELECT get_db_survival_goal()
----
(alter_survive_db,zone)
(survive_zone_db,zone)
(system,zone)
