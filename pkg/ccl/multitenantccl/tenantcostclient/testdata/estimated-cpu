# Test that estimated CPU metrics and tokens are recorded and reported.

# Switch to use the estimated CPU model rather than the RU model.
estimated-nodes count=3
----

# When throttle = -1, the provider will refuse to grant any tokens, either
# directly or via a trickle.
configure
throttle: -1
----

token-bucket
----
5000.00 tokens filling @ 0.00 tokens/s

# Ensure that estimated CPU metrics change, but not RU metrics.
write repeat=100 count=6 bytes=2048 networkCost=1
----

# Expect 288 tokens to be consumed.
token-bucket
----
4712.00 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 100
tenant.sql_usage.write_requests: 600
tenant.sql_usage.write_bytes: 204800
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 0.29
tenant.sql_usage.estimated_cpu_seconds: 0.29
tenant.sql_usage.replicated_bytes: 819200
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 409600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 204800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 204800

# Wait for the token bucket response triggered by low tokens. Not doing this
# causes a race condition, since in some cases this response arrives after the
# configure command below, and the write batch rate is not set correctly.
wait-for-event
token-bucket-response
----

# Wait until the next tick, at which point background CPU usage will be added.
advance wait=true
1s
----
00:00:01.000

# ~31 tokens removed from bucket to account for background CPU.
token-bucket
----
4680.81 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 100
tenant.sql_usage.write_requests: 600
tenant.sql_usage.write_bytes: 204800
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 0.29
tenant.sql_usage.estimated_cpu_seconds: 0.32
tenant.sql_usage.replicated_bytes: 819200
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 409600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 204800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 204800

# Do same writes, but with a different write batch rate. This time, the
# estimated CPU consumption should be less.

configure
write_batch_rate: 1000
throttle: -1
----

advance
40s
----
00:00:41.000

# Wait for the token bucket request to ensure that new batch rate is known by
# the client.
wait-for-event
token-bucket-response
----

write repeat=100 count=6 bytes=2048 networkCost=1
----

# Wait until the next tick, at which point background CPU usage will be added.
advance wait=true
1s
----
00:00:42.000

# Expect ~263 tokens to be removed, as compared to ~319 above (288 + 32).
token-bucket
----
4418.29 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 200
tenant.sql_usage.write_requests: 1200
tenant.sql_usage.write_bytes: 409600
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 0.52
tenant.sql_usage.estimated_cpu_seconds: 0.58
tenant.sql_usage.replicated_bytes: 1638400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 819200
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 409600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 409600

# Advance time to next period and do same writes, with the same write batch
# rate, but with a global estimated CPU rate. The estimated CPU rate should not
# change, since this SQL node will only subtract its own portion of the global
# background CPU usage.

configure
write_batch_rate: 1000
estimated_cpu_rate: 6
throttle: -1
----

advance
10s
----
00:00:52.000

wait-for-event
token-bucket-response
----

write repeat=100 count=6 bytes=2048 networkCost=1
----

advance wait=true
1s
----
00:00:53.000

# Expect ~263 tokens to be consumed, like above.
token-bucket
----
4155.77 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 300
tenant.sql_usage.write_requests: 1800
tenant.sql_usage.write_bytes: 614400
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 0.76
tenant.sql_usage.estimated_cpu_seconds: 0.84
tenant.sql_usage.replicated_bytes: 2457600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 1228800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 614400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 614400

# Now perform some read operations.

read repeat=1000 count=20 bytes=10000
----

advance wait=true
1s
----
00:00:54.000

token-bucket
----
2739.53 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 300
tenant.sql_usage.write_requests: 1800
tenant.sql_usage.write_bytes: 614400
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.04
tenant.sql_usage.estimated_cpu_seconds: 2.26
tenant.sql_usage.replicated_bytes: 2457600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 1228800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 614400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 614400

# KV CPU seconds should not change, only total CPU seconds. Background CPU usage
# should be accounted for.
cpu
1s
----

advance wait=true
1s
----
00:00:55.000

token-bucket
----
1642.28 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 300
tenant.sql_usage.write_requests: 1800
tenant.sql_usage.write_bytes: 614400
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.04
tenant.sql_usage.estimated_cpu_seconds: 3.36
tenant.sql_usage.replicated_bytes: 2457600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 1228800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 614400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 614400

# External I/O should not block or consume tokens.
external-egress bytes=1024000
----

external-ingress bytes=1024000
----

advance wait=true
1s
----
00:00:56.000

token-bucket
----
1642.28 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 300
tenant.sql_usage.write_requests: 1800
tenant.sql_usage.write_bytes: 614400
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 1024000
tenant.sql_usage.external_io_egress_bytes: 1024000
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.04
tenant.sql_usage.estimated_cpu_seconds: 3.36
tenant.sql_usage.replicated_bytes: 2457600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 1228800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 614400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 614400

# PGWire egress should not block or consume tokens.
pgwire-egress
12345
----

advance wait=true
1s
----
00:00:57.000

token-bucket
----
1642.28 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 300
tenant.sql_usage.write_requests: 1800
tenant.sql_usage.write_bytes: 614400
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 12345
tenant.sql_usage.external_io_ingress_bytes: 1024000
tenant.sql_usage.external_io_egress_bytes: 1024000
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.04
tenant.sql_usage.estimated_cpu_seconds: 3.36
tenant.sql_usage.replicated_bytes: 2457600
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="",to_region="europe-west1",to_zone=""}: 1228800
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az1"}: 614400
tenant.sql_usage.replicated_bytes{from_region="us-central1",from_zone="az1",to_region="us-central1",to_zone="az2"}: 614400

# Ensure that token bucket request is made after 10 seconds (though it returns
# no tokens).
advance
10s
----
00:01:07.000

wait-for-event
token-bucket-response
----

token-bucket
----
1642.28 tokens filling @ 0.00 tokens/s

# Allow the provider to grant tokens again.
configure
throttle: 0
----

# Advance another 10 seconds, but this time expect no token bucket request,
# since there's been no consumption.
advance wait=true
10s
----
00:01:17.000

token-bucket
----
1642.28 tokens filling @ 0.00 tokens/s
