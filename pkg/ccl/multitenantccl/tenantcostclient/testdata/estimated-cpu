# Test that estimated CPU metrics and tokens are recorded and reported.

# Switch to use the estimated CPU model rather than the RU model.
estimated-nodes count=3
----

# When throttle = -1, the provider will refuse to grant any tokens, either
# directly or via a trickle.
configure
throttle: -1
----

token-bucket
----
5000.00 tokens filling @ 0.00 tokens/s

# Ensure that estimated CPU metrics change, but not RU metrics.
write repeat=250 count=6 bytes=2048 networkCost=1
----

token-bucket
----
4280.01 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 250
tenant.sql_usage.write_requests: 1500
tenant.sql_usage.write_bytes: 512000
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 0.72
tenant.sql_usage.estimated_cpu_seconds: 0.72

# Advance time to next period and do same writes, but with a different write
# batch rate. This time, the estimated CPU consumption should be less.

configure
write_batch_rate: 1000
throttle: -1
----

advance
10s
----
00:00:10.000

wait-for-event
token-bucket-response
----

write repeat=250 count=6 bytes=2048 networkCost=1
----

token-bucket
----
3687.87 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 0
tenant.sql_usage.read_requests: 0
tenant.sql_usage.read_bytes: 0
tenant.sql_usage.write_batches: 500
tenant.sql_usage.write_requests: 3000
tenant.sql_usage.write_bytes: 1024000
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 1.31
tenant.sql_usage.estimated_cpu_seconds: 1.31

# Perform some reads.

read repeat=1000 count=20 bytes=10000
----

token-bucket
----
2410.05 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 500
tenant.sql_usage.write_requests: 3000
tenant.sql_usage.write_bytes: 1024000
tenant.sql_usage.sql_pods_cpu_seconds: 0.00
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.59
tenant.sql_usage.estimated_cpu_seconds: 2.59

# KV CPU seconds should not change, only total CPU seconds.
cpu
1s
----

advance wait=true
1s
----
00:00:11.000

token-bucket
----
1420.05 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 500
tenant.sql_usage.write_requests: 3000
tenant.sql_usage.write_bytes: 1024000
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 0
tenant.sql_usage.external_io_egress_bytes: 0
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.59
tenant.sql_usage.estimated_cpu_seconds: 3.58

# External I/O should not block or consume tokens.
external-egress bytes=1024000
----

external-ingress bytes=1024000
----

token-bucket
----
1420.05 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 500
tenant.sql_usage.write_requests: 3000
tenant.sql_usage.write_bytes: 1024000
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 0
tenant.sql_usage.external_io_ingress_bytes: 1024000
tenant.sql_usage.external_io_egress_bytes: 1024000
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.59
tenant.sql_usage.estimated_cpu_seconds: 3.58

# PGWire egress should not block or consume tokens.
pgwire-egress
12345
----

advance wait=true
1s
----
00:00:12.000

token-bucket
----
1420.05 tokens filling @ 0.00 tokens/s

metrics
----
tenant.sql_usage.request_units: 0.00
tenant.sql_usage.kv_request_units: 0.00
tenant.sql_usage.read_batches: 1000
tenant.sql_usage.read_requests: 20000
tenant.sql_usage.read_bytes: 10000000
tenant.sql_usage.write_batches: 500
tenant.sql_usage.write_requests: 3000
tenant.sql_usage.write_bytes: 1024000
tenant.sql_usage.sql_pods_cpu_seconds: 0.99
tenant.sql_usage.pgwire_egress_bytes: 12345
tenant.sql_usage.external_io_ingress_bytes: 1024000
tenant.sql_usage.external_io_egress_bytes: 1024000
tenant.sql_usage.cross_region_network_ru: 0.00
tenant.sql_usage.estimated_kv_cpu_seconds: 2.59
tenant.sql_usage.estimated_cpu_seconds: 3.58

# Ensure that token bucket request is made after 10 seconds (though it returns
# no tokens).
advance
10s
----
00:00:22.000

wait-for-event
token-bucket-response
----

token-bucket
----
1420.05 tokens filling @ 0.00 tokens/s

# Allow the provider to grant tokens again.
configure
throttle: 0
----

# Advance another 10 seconds, but this time expect no token bucket request,
# since there's been no consumption.
advance wait=true
10s
----
00:00:32.000

token-bucket
----
1420.05 tokens filling @ 0.00 tokens/s
