feature-list
sql.multiregion.*
----

exec
CREATE DATABASE d PRIMARY REGION "us-east-1" REGION "ca-central-1"
----

exec
SET enable_multiregion_placement_policy = true;
USE d;
ALTER DATABASE d ADD REGION "ap-southeast-2"
----

#####################################################################
# CREATE TABLE: Test each locality type once
#####################################################################

feature-usage
CREATE TABLE t_global () WITH (schema_locked=false) LOCALITY GLOBAL
----
sql.multiregion.create_table.locality.global

feature-usage
CREATE TABLE t_row () WITH (schema_locked=false) LOCALITY REGIONAL BY ROW
----
sql.multiregion.create_table.locality.regional_by_row

feature-usage
CREATE TABLE t_row_as (cr crdb_internal_region) WITH (schema_locked=false) LOCALITY REGIONAL BY ROW AS cr
----
sql.multiregion.create_table.locality.regional_by_row_as

#####################################################################
# ALTER TABLE: Test representative transitions (not exhaustive)
#####################################################################

# Test GLOBAL -> REGIONAL BY ROW transition
feature-usage
ALTER TABLE t_global SET LOCALITY REGIONAL BY ROW
----
sql.multiregion.alter_table.locality.from.global.to.regional_by_row

exec
ALTER TABLE t_global SET LOCALITY GLOBAL
----

# Test REGIONAL BY ROW -> GLOBAL transition
feature-usage
ALTER TABLE t_row SET LOCALITY GLOBAL
----
sql.multiregion.alter_table.locality.from.regional_by_row.to.global

exec
ALTER TABLE t_row SET LOCALITY REGIONAL BY ROW
----

# Test REGIONAL BY ROW AS -> REGIONAL BY TABLE transition
feature-usage
ALTER TABLE t_row_as SET LOCALITY REGIONAL BY TABLE
----
sql.multiregion.alter_table.locality.from.regional_by_row_as.to.regional_by_table

exec
ALTER TABLE t_row_as SET LOCALITY REGIONAL BY ROW AS "cr"
----

# Test a self-transition case
feature-usage
ALTER TABLE t_row SET LOCALITY REGIONAL BY ROW
----
sql.multiregion.alter_table.locality.from.regional_by_row.to.regional_by_row