feature-list
sql.multiregion.*
----

exec
CREATE DATABASE d PRIMARY REGION "us-east-1" REGION "ca-central-1"
----

exec
SET enable_multiregion_placement_policy = true;
USE d;
ALTER DATABASE d ADD REGION "ap-southeast-2"
----

#####################################################################
# CREATE TABLE: Test each locality type once
#####################################################################

feature-usage
CREATE TABLE t_unspecified ()
----
sql.multiregion.create_table.locality.unspecified

feature-usage
CREATE TABLE t_regional () LOCALITY REGIONAL BY TABLE
----
sql.multiregion.create_table.locality.regional_by_table

feature-usage
CREATE TABLE t_regional_in () LOCALITY REGIONAL BY TABLE IN "ap-southeast-2"
----
sql.multiregion.create_table.locality.regional_by_table_in

feature-usage
CREATE TABLE t_global () LOCALITY GLOBAL
----
sql.multiregion.create_table.locality.global

#####################################################################
# ALTER TABLE: Test representative transitions (not exhaustive)
#####################################################################

exec
CREATE TABLE t_alter1 () WITH (schema_locked=false) LOCALITY REGIONAL BY TABLE;
CREATE TABLE t_alter2 () WITH (schema_locked=false) LOCALITY REGIONAL BY TABLE IN "ap-southeast-2";
CREATE TABLE t_alter3 () WITH (schema_locked=false) LOCALITY GLOBAL;
CREATE TABLE t_alter4 () WITH (schema_locked=false) LOCALITY REGIONAL BY TABLE;
ALTER TABLE t_alter4 ADD COLUMN cr crdb_internal_region NOT NULL;
----

# Test REGIONAL BY TABLE -> REGIONAL BY ROW
feature-usage
ALTER TABLE t_alter1 SET LOCALITY REGIONAL BY ROW
----
sql.multiregion.alter_table.locality.from.regional_by_table.to.regional_by_row

# Test REGIONAL BY TABLE IN -> GLOBAL
feature-usage
ALTER TABLE t_alter2 SET LOCALITY GLOBAL
----
sql.multiregion.alter_table.locality.from.regional_by_table_in.to.global

# Test GLOBAL -> REGIONAL BY TABLE IN
feature-usage
ALTER TABLE t_alter3 SET LOCALITY REGIONAL BY TABLE IN "ap-southeast-2"
----
sql.multiregion.alter_table.locality.from.global.to.regional_by_table_in

# Test REGIONAL BY TABLE -> REGIONAL BY ROW AS
feature-usage
ALTER TABLE t_alter4 SET LOCALITY REGIONAL BY ROW AS "cr"
----
sql.multiregion.alter_table.locality.from.regional_by_table.to.regional_by_row_as