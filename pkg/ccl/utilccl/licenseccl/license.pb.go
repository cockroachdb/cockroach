// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/utilccl/licenseccl/license.proto

package licenseccl

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type License_Type int32

const (
	License_NonCommercial License_Type = 0
	License_Enterprise    License_Type = 1
	License_Evaluation    License_Type = 2
)

var License_Type_name = map[int32]string{
	0: "NonCommercial",
	1: "Enterprise",
	2: "Evaluation",
}
var License_Type_value = map[string]int32{
	"NonCommercial": 0,
	"Enterprise":    1,
	"Evaluation":    2,
}

func (x License_Type) String() string {
	return proto.EnumName(License_Type_name, int32(x))
}
func (License_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_license_639c1f7b9a22805c, []int{0, 0}
}

type License struct {
	ClusterID            []github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,rep,name=cluster_id,json=clusterId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"cluster_id"`
	ValidUntilUnixSec    int64                                                 `protobuf:"varint,2,opt,name=valid_until_unix_sec,json=validUntilUnixSec,proto3" json:"valid_until_unix_sec,omitempty"`
	Type                 License_Type                                          `protobuf:"varint,3,opt,name=type,proto3,enum=cockroach.ccl.utilccl.licenseccl.License_Type" json:"type,omitempty"`
	OrganizationName     string                                                `protobuf:"bytes,4,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
}

func (m *License) Reset()         { *m = License{} }
func (m *License) String() string { return proto.CompactTextString(m) }
func (*License) ProtoMessage()    {}
func (*License) Descriptor() ([]byte, []int) {
	return fileDescriptor_license_639c1f7b9a22805c, []int{0}
}
func (m *License) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_License.Merge(dst, src)
}
func (m *License) XXX_Size() int {
	return m.Size()
}
func (m *License) XXX_DiscardUnknown() {
	xxx_messageInfo_License.DiscardUnknown(m)
}

var xxx_messageInfo_License proto.InternalMessageInfo

func init() {
	proto.RegisterType((*License)(nil), "cockroach.ccl.utilccl.licenseccl.License")
	proto.RegisterEnum("cockroach.ccl.utilccl.licenseccl.License_Type", License_Type_name, License_Type_value)
}
func (m *License) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *License) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		for _, msg := range m.ClusterID {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLicense(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ValidUntilUnixSec != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.ValidUntilUnixSec))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLicense(dAtA, i, uint64(m.Type))
	}
	if len(m.OrganizationName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLicense(dAtA, i, uint64(len(m.OrganizationName)))
		i += copy(dAtA[i:], m.OrganizationName)
	}
	return i, nil
}

func encodeVarintLicense(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *License) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		for _, e := range m.ClusterID {
			l = e.Size()
			n += 1 + l + sovLicense(uint64(l))
		}
	}
	if m.ValidUntilUnixSec != 0 {
		n += 1 + sovLicense(uint64(m.ValidUntilUnixSec))
	}
	if m.Type != 0 {
		n += 1 + sovLicense(uint64(m.Type))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovLicense(uint64(l))
	}
	return n
}

func sovLicense(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLicense(x uint64) (n int) {
	return sovLicense(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *License) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: License: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: License: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cockroachdb_cockroach_pkg_util_uuid.UUID
			m.ClusterID = append(m.ClusterID, v)
			if err := m.ClusterID[len(m.ClusterID)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntilUnixSec", wireType)
			}
			m.ValidUntilUnixSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidUntilUnixSec |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (License_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLicense
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLicense(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLicense
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLicense(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLicense
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLicense
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLicense
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLicense
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLicense(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLicense = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLicense   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ccl/utilccl/licenseccl/license.proto", fileDescriptor_license_639c1f7b9a22805c)
}

var fileDescriptor_license_639c1f7b9a22805c = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x6b, 0xf2, 0x30,
	0x1c, 0xc6, 0x1b, 0x95, 0xf7, 0xc5, 0xf0, 0xbe, 0x52, 0x8b, 0x87, 0xf2, 0x1e, 0x6a, 0x91, 0xf7,
	0x50, 0x18, 0xa4, 0x30, 0x4f, 0xbb, 0xaa, 0x83, 0x09, 0xc3, 0x43, 0xb7, 0x5e, 0x76, 0x29, 0x31,
	0x0d, 0x35, 0x98, 0x26, 0xa5, 0x4d, 0x44, 0xf7, 0x29, 0xf6, 0xb1, 0xbc, 0xcd, 0xe3, 0xd8, 0x41,
	0xb6, 0xfa, 0x45, 0x46, 0xab, 0x4c, 0x6f, 0x3b, 0xe5, 0x09, 0xcf, 0xf3, 0xfb, 0xe7, 0xff, 0x10,
	0xf8, 0x9f, 0x10, 0xee, 0x6b, 0xc5, 0x78, 0x75, 0x72, 0x46, 0xa8, 0x28, 0xe8, 0x85, 0x44, 0x59,
	0x2e, 0x95, 0xb4, 0x5c, 0x22, 0xc9, 0x32, 0x97, 0x98, 0x2c, 0x10, 0x21, 0x1c, 0x9d, 0xf2, 0xe8,
	0x9c, 0xff, 0xd7, 0x4b, 0x64, 0x22, 0xeb, 0xb0, 0x5f, 0xa9, 0x23, 0x37, 0x78, 0x6d, 0xc0, 0xdf,
	0xf7, 0xc7, 0x90, 0x95, 0x40, 0x48, 0xb8, 0x2e, 0x14, 0xcd, 0x23, 0x16, 0xdb, 0xc0, 0x6d, 0x7a,
	0x7f, 0x46, 0x77, 0xdb, 0x7d, 0xdf, 0x78, 0xdf, 0xf7, 0x87, 0x09, 0x53, 0x0b, 0x3d, 0x47, 0x44,
	0xa6, 0xfe, 0xf7, 0x53, 0xf1, 0xfc, 0xac, 0xfd, 0x6c, 0x99, 0xd4, 0x6b, 0xfa, 0x5a, 0xb3, 0x18,
	0x85, 0xe1, 0x74, 0x52, 0xee, 0xfb, 0xed, 0xf1, 0x71, 0xe0, 0x74, 0x12, 0xb4, 0x4f, 0xb3, 0xa7,
	0xb1, 0xe5, 0xc3, 0xde, 0x0a, 0x73, 0x16, 0x47, 0x5a, 0x28, 0xc6, 0x23, 0x2d, 0xd8, 0x3a, 0x2a,
	0x28, 0xb1, 0x1b, 0x2e, 0xf0, 0x9a, 0x41, 0xb7, 0xf6, 0xc2, 0xca, 0x0a, 0x05, 0x5b, 0x3f, 0x50,
	0x62, 0x8d, 0x60, 0x4b, 0x6d, 0x32, 0x6a, 0x37, 0x5d, 0xe0, 0x75, 0xae, 0x11, 0xfa, 0xa9, 0x2c,
	0x3a, 0x55, 0x42, 0x8f, 0x9b, 0x8c, 0x06, 0x35, 0x6b, 0x5d, 0xc1, 0xae, 0xcc, 0x13, 0x2c, 0xd8,
	0x33, 0x56, 0x4c, 0x8a, 0x48, 0xe0, 0x94, 0xda, 0x2d, 0x17, 0x78, 0xed, 0xc0, 0xbc, 0x34, 0x66,
	0x38, 0xa5, 0x83, 0x1b, 0xd8, 0xaa, 0x50, 0xab, 0x0b, 0xff, 0xce, 0xa4, 0x18, 0xcb, 0x34, 0xa5,
	0x39, 0x61, 0x98, 0x9b, 0x86, 0xd5, 0x81, 0xf0, 0x56, 0x28, 0x9a, 0x67, 0x39, 0x2b, 0xa8, 0x09,
	0xea, 0xfb, 0x0a, 0x73, 0x5d, 0xc3, 0x66, 0x63, 0xe4, 0x6d, 0x3f, 0x1d, 0x63, 0x5b, 0x3a, 0x60,
	0x57, 0x3a, 0xe0, 0xad, 0x74, 0xc0, 0x47, 0xe9, 0x80, 0x97, 0x83, 0x63, 0xec, 0x0e, 0x8e, 0xf1,
	0x04, 0xcf, 0x4b, 0xce, 0x7f, 0xd5, 0x5f, 0x30, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x52,
	0x20, 0xa0, 0xe2, 0x01, 0x00, 0x00,
}
