// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by partition_test_generator.go. DO NOT EDIT.

package partitionccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)

func TestInitialPartitioning_all_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "all_indexes")
}

func TestInitialPartitioning_all_indexes_shuffled(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "all_indexes_shuffled")
}

func TestInitialPartitioning_some_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "some_indexes")
}

func TestInitialPartitioning_single_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "single_col_list_partitioning")
}

func TestInitialPartitioning_single_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "single_col_list_partitioning_default")
}

func TestInitialPartitioning_multi_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_list_partitioning")
}

func TestInitialPartitioning_multi_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_list_partitioning_default")
}

func TestInitialPartitioning_multi_col_list_partitioning_default_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_list_partitioning_default_default")
}

func TestInitialPartitioning_multi_col_list_partitioning_default_default_subpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_list_partitioning_default_default_subpartitioned")
}

func TestInitialPartitioning_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "single_col_range_partitioning")
}

func TestInitialPartitioning_single_col_range_partitioning_descending(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "single_col_range_partitioning_descending")
}

func TestInitialPartitioning_sparse_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "sparse_single_col_range_partitioning")
}

func TestInitialPartitioning_single_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "single_col_range_partitioning_maxvalue")
}

func TestInitialPartitioning_multi_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_range_partitioning")
}

func TestInitialPartitioning_multi_col_range_partitioning_descending(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_range_partitioning_descending")
}

func TestInitialPartitioning_sparse_multi_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "sparse_multi_col_range_partitioning")
}

func TestInitialPartitioning_multi_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_range_partitioning_maxvalue")
}

func TestInitialPartitioning_multi_col_range_partitioning_maxvalue_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "multi_col_range_partitioning_maxvalue_maxvalue")
}

func TestInitialPartitioning_list_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "list_list_partitioning")
}

func TestInitialPartitioning_list_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "list_range_partitioning")
}

func TestInitialPartitioning_secondary_index_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "secondary_index_list_partitioning")
}

func TestInitialPartitioning_secondary_index_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "secondary_index_list_partitioning_default")
}

func TestInitialPartitioning_secondary_index_null(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "secondary_index_null")
}

func TestInitialPartitioning_scans(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "scans")
}

func TestRepartitioning_unpartitioned_to_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "unpartitioned_to_unpartitioned")
}

func TestRepartitioning_unpartitioned_to_single_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "unpartitioned_to_single_col_list_partitioning")
}

func TestRepartitioning_unpartitioned_to_single_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "unpartitioned_to_single_col_list_partitioning_default")
}

func TestRepartitioning_unpartitioned_to_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "unpartitioned_to_single_col_range_partitioning")
}

func TestRepartitioning_unpartitioned_to_single_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "unpartitioned_to_single_col_range_partitioning_maxvalue")
}

func TestRepartitioning_single_col_list_partitioning_to_single_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_list_partitioning_to_single_col_list_partitioning_default")
}

func TestRepartitioning_single_col_list_partitioning_default_to_single_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_list_partitioning_default_to_single_col_list_partitioning")
}

func TestRepartitioning_multi_col_list_partitioning_to_multi_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_list_partitioning_to_multi_col_list_partitioning_default")
}

func TestRepartitioning_multi_col_list_partitioning_default_to_multi_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_list_partitioning_default_to_multi_col_list_partitioning")
}

func TestRepartitioning_multi_col_list_partitioning_default_to_multi_col_list_partitioning_default_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_list_partitioning_default_to_multi_col_list_partitioning_default_default")
}

func TestRepartitioning_multi_col_list_partitioning_default_default_to_multi_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_list_partitioning_default_default_to_multi_col_list_partitioning_default")
}

func TestRepartitioning_single_col_range_partitioning_to_single_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_range_partitioning_to_single_col_range_partitioning_maxvalue")
}

func TestRepartitioning_single_col_range_partitioning_maxvalue_to_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_range_partitioning_maxvalue_to_single_col_range_partitioning")
}

func TestRepartitioning_multi_col_range_partitioning_to_multi_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_range_partitioning_to_multi_col_range_partitioning_maxvalue")
}

func TestRepartitioning_multi_col_range_partitioning_maxvalue_to_multi_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_range_partitioning_maxvalue_to_multi_col_range_partitioning")
}

func TestRepartitioning_multi_col_range_partitioning_maxvalue_to_multi_col_range_partitioning_maxvalue_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_range_partitioning_maxvalue_to_multi_col_range_partitioning_maxvalue_maxvalue")
}

func TestRepartitioning_multi_col_range_partitioning_maxvalue_maxvalue_to_multi_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "multi_col_range_partitioning_maxvalue_maxvalue_to_multi_col_range_partitioning_maxvalue")
}

func TestRepartitioning_single_col_list_partitioning_to_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_list_partitioning_to_single_col_range_partitioning")
}

func TestRepartitioning_single_col_range_partitioning_to_single_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_range_partitioning_to_single_col_list_partitioning")
}

func TestRepartitioning_single_col_list_partitioning_to_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_list_partitioning_to_unpartitioned")
}

func TestRepartitioning_single_col_list_partitioning_default_to_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_list_partitioning_default_to_unpartitioned")
}

func TestRepartitioning_single_col_range_partitioning_to_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_range_partitioning_to_unpartitioned")
}

func TestRepartitioning_single_col_range_partitioning_maxvalue_to_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "single_col_range_partitioning_maxvalue_to_unpartitioned")
}

func TestRepartitioning_secondary_index_unpartitioned_to_secondary_index_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "secondary_index_unpartitioned_to_secondary_index_list_partitioning")
}

func TestRepartitioning_secondary_index_list_partitioning_to_secondary_index_unpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "secondary_index_list_partitioning_to_secondary_index_unpartitioned")
}

func TestRepartitioning_secondary_index_list_partitioning_to_secondary_index_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "secondary_index_list_partitioning_to_secondary_index_list_partitioning_default")
}

func TestRepartitioning_secondary_index_list_partitioning_default_to_secondary_index_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "secondary_index_list_partitioning_default_to_secondary_index_list_partitioning")
}

func TestGenerateSubzoneSpans_all_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "all_indexes")
}

func TestGenerateSubzoneSpans_all_indexes_shuffled(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "all_indexes_shuffled")
}

func TestGenerateSubzoneSpans_some_indexes(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "some_indexes")
}

func TestGenerateSubzoneSpans_single_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "single_col_list_partitioning")
}

func TestGenerateSubzoneSpans_single_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "single_col_list_partitioning_default")
}

func TestGenerateSubzoneSpans_multi_col_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_list_partitioning")
}

func TestGenerateSubzoneSpans_multi_col_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_list_partitioning_default")
}

func TestGenerateSubzoneSpans_multi_col_list_partitioning_default_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_list_partitioning_default_default")
}

func TestGenerateSubzoneSpans_multi_col_list_partitioning_default_default_subpartitioned(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_list_partitioning_default_default_subpartitioned")
}

func TestGenerateSubzoneSpans_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "single_col_range_partitioning")
}

func TestGenerateSubzoneSpans_single_col_range_partitioning_descending(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "single_col_range_partitioning_descending")
}

func TestGenerateSubzoneSpans_sparse_single_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "sparse_single_col_range_partitioning")
}

func TestGenerateSubzoneSpans_single_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "single_col_range_partitioning_maxvalue")
}

func TestGenerateSubzoneSpans_multi_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_range_partitioning")
}

func TestGenerateSubzoneSpans_multi_col_range_partitioning_descending(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_range_partitioning_descending")
}

func TestGenerateSubzoneSpans_sparse_multi_col_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "sparse_multi_col_range_partitioning")
}

func TestGenerateSubzoneSpans_multi_col_range_partitioning_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_range_partitioning_maxvalue")
}

func TestGenerateSubzoneSpans_multi_col_range_partitioning_maxvalue_maxvalue(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "multi_col_range_partitioning_maxvalue_maxvalue")
}

func TestGenerateSubzoneSpans_list_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "list_list_partitioning")
}

func TestGenerateSubzoneSpans_list_range_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "list_range_partitioning")
}

func TestGenerateSubzoneSpans_inheritance_index(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "inheritance_index")
}

func TestGenerateSubzoneSpans_inheritance_single_col_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "inheritance_single_col_default")
}

func TestGenerateSubzoneSpans_inheritance_multi_col_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "inheritance_multi_col_default")
}

func TestGenerateSubzoneSpans_inheritance_subpartitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "inheritance_subpartitioning")
}

func TestGenerateSubzoneSpans_secondary_index_list_partitioning(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "secondary_index_list_partitioning")
}

func TestGenerateSubzoneSpans_secondary_index_list_partitioning_default(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "secondary_index_list_partitioning_default")
}

func TestGenerateSubzoneSpans_secondary_index_null(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "secondary_index_null")
}

func TestGenerateSubzoneSpans_scans(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "scans")
}
