// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

//go:build generator
// +build generator

package main

import (
	"bytes"
	"flag"
	"fmt"
	"html/template"
	"os"

	"github.com/cockroachdb/cockroach/pkg/ccl/partitionccl/partitionccltestcases"
	"github.com/cockroachdb/cockroach/pkg/cli/exit"
)

var out = flag.String("out", "", "output file for generated go code")

func main() {
	flag.Parse()
	if err := run(*out); err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		exit.WithCode(exit.FatalError())
	}
}

type TestCaseNames struct {
	InitialPartitioning  []string
	Repartitioning       []string
	GenerateSubzoneSpans []string
}

func run(out string) error {
	if out == "" {
		return fmt.Errorf("output required")
	}
	var testCaseNames TestCaseNames
	for _, spec := range partitionccltestcases.DeterministicPartitioningTestSpecs() {
		if spec.HasScans() {
			testCaseNames.InitialPartitioning = append(testCaseNames.InitialPartitioning, spec.Name)
		}
		if spec.HasGeneratedSpans() {
			testCaseNames.GenerateSubzoneSpans = append(testCaseNames.GenerateSubzoneSpans, spec.Name)
		}
	}
	for _, spec := range partitionccltestcases.AllRepartitioningTestSpecs() {
		testCaseNames.Repartitioning = append(testCaseNames.Repartitioning, spec.Name)
	}
	var buf bytes.Buffer
	if err := template.Must(template.New("templ").Parse(`{{- /**/ -}}
// Copyright 2023 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

// Code generated by partition_test_generator.go. DO NOT EDIT.

package partitionccl

import (
	"testing"

	"github.com/cockroachdb/cockroach/pkg/util/leaktest"
	"github.com/cockroachdb/cockroach/pkg/util/log"
)
{{ range .InitialPartitioning }}
func TestInitialPartitioning_{{ . }}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunInitialPartitioningTest(t, "{{ . }}")
}
{{ end -}}
{{ range .Repartitioning }}
func TestRepartitioning_{{ . }}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunRepartitioningTest(t, "{{ . }}")
}
{{ end -}}
{{ range .GenerateSubzoneSpans }}
func TestGenerateSubzoneSpans_{{ . }}(t *testing.T) {
	defer leaktest.AfterTest(t)()
	defer log.Scope(t).Close(t)
	RunGenerateSubzoneSpansTest(t, "{{ . }}")
}
{{ end -}}`)).Execute(&buf, testCaseNames); err != nil {
		return err
	}
	return os.WriteFile(out, buf.Bytes(), 0777)
}
