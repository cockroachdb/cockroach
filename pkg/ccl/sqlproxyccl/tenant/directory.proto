// Copyright 2021 The Cockroach Authors.
//
// Licensed as a CockroachDB Enterprise file under the Cockroach Community
// License (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
//     https://github.com/cockroachdb/cockroach/blob/master/licenses/CCL.txt

syntax = "proto3";
package cockroach.ccl.sqlproxyccl.tenant;
option go_package="tenant";

import "gogoproto/gogo.proto";

// WatchPodsRequest is empty as we want to get all notifications.
message WatchPodsRequest {}

// EventType shows the event type of the notifications that the server streams
// to its clients.
enum EventType {
  option (gogoproto.goproto_enum_prefix) = false;

  ADDED = 0;
  MODIFIED = 1;
  DELETED = 2;
}

// WatchPodsResponse represents the notifications that the server sends to
// its clients when clients want to monitor the directory server activity.
message WatchPodsResponse {
  // EventType is the type of the notifications - added, modified, deleted.
  EventType typ = 1;
  // Addr is the address of the pod that this notification applies to.
  string addr = 2;
  // TenantID is the tenant that owns the pod.
  uint64 tenant_id = 3[(gogoproto.customname) = "TenantID"];
  // Load is a number in the range [0, 1) indicating the current amount of load
  // experienced by this tenant pod.
  float Load = 4;
}

// ListPodsRequest is used to query the server for the list of current
// pods of a given tenant.
message ListPodsRequest {
  // TenantID identifies the tenant for which the client is requesting a list of
  // the pods.
  uint64 tenant_id = 1[(gogoproto.customname) = "TenantID"];
}

// EnsurePodRequest is used to ensure that a tenant's backend is active. If
// there is an active backend then the server doesn't have to do anything. If
// there isn't an active backend, then the server has to bring a new one up.
message EnsurePodRequest {
  // TenantID is the id of the tenant for which an active backend is requested.
  uint64 tenant_id = 1[(gogoproto.customname) = "TenantID"];
}

// EnsurePodResponse is empty and indicates that the server processed the
// request.
message EnsurePodResponse {
}

// Pod contains the information about a tenant pod. Most often it is a
// combination of an ip address and port, e.g. 132.130.1.11:34576.
message Pod {
  // Addr is the ip and port combo identifying the tenant pod.
  string Addr = 1;
  // Load is a number in the range [0, 1) indicating the current amount of load
  // experienced by this tenant pod.
  float Load = 2;
}

// ListPodsResponse is sent back as a result of requesting the list of
// pods for a given tenant.
message ListPodsResponse {
  // Pods is the list of pods currently active for the requested
  // tenant.
  repeated Pod pods = 1;
}

// GetTenantRequest is used by a client to request from the sever metadata
// related to a given tenant.
message GetTenantRequest {
  // TenantID identifies the tenant for which the metadata is being requested.
  uint64 tenant_id = 1[(gogoproto.customname) = "TenantID"];
}

// GetTenantResponse is sent back when a client requests metadata for a tenant.
message GetTenantResponse {
  // ClusterName is the name of the tenant's cluster.
  string cluster_name = 1; // add more metadata if needed
}

// Directory specifies a service that keeps track and manages tenant backends,
// related metadata and their pods.
service Directory {
  // ListPods is used to query the server for the list of current pods
  // of a given tenant.
  rpc ListPods(ListPodsRequest) returns (ListPodsResponse);
  // WatchPods is used to get a stream, that is used to receive notifications
  // about changes in tenant backend's state - added, modified and deleted.
  rpc WatchPods(WatchPodsRequest) returns (stream WatchPodsResponse);
  // EnsurePod is used to ensure that a tenant's backend is active. If
  // there is an active backend then the server doesn't have to do anything. If
  // there isn't an active backend, then the server has to bring a new one up.
  // If the requested tenant does not exist, EnsurePod returns a GRPC
  // NotFound error.
  rpc EnsurePod(EnsurePodRequest) returns (EnsurePodResponse);
  // GetTenant is used to fetch the metadata of a specific tenant. If the tenant
  // does not exist, GetTenant returns a GRPC NotFound error.
  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse);
}
