// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/ccl/sqlproxyccl/tenant (interfaces: DirectoryClient,Directory_WatchEndpointsClient)

// Package tenant is a generated GoMock package.
package tenant

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockDirectoryClient is a mock of DirectoryClient interface.
type MockDirectoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryClientMockRecorder
}

// MockDirectoryClientMockRecorder is the mock recorder for MockDirectoryClient.
type MockDirectoryClientMockRecorder struct {
	mock *MockDirectoryClient
}

// NewMockDirectoryClient creates a new mock instance.
func NewMockDirectoryClient(ctrl *gomock.Controller) *MockDirectoryClient {
	mock := &MockDirectoryClient{ctrl: ctrl}
	mock.recorder = &MockDirectoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryClient) EXPECT() *MockDirectoryClientMockRecorder {
	return m.recorder
}

// EnsureEndpoint mocks base method.
func (m *MockDirectoryClient) EnsureEndpoint(arg0 context.Context, arg1 *EnsureEndpointRequest, arg2 ...grpc.CallOption) (*EnsureEndpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnsureEndpoint", varargs...)
	ret0, _ := ret[0].(*EnsureEndpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureEndpoint indicates an expected call of EnsureEndpoint.
func (mr *MockDirectoryClientMockRecorder) EnsureEndpoint(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureEndpoint", reflect.TypeOf((*MockDirectoryClient)(nil).EnsureEndpoint), varargs...)
}

// GetTenant mocks base method.
func (m *MockDirectoryClient) GetTenant(arg0 context.Context, arg1 *GetTenantRequest, arg2 ...grpc.CallOption) (*GetTenantResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTenant", varargs...)
	ret0, _ := ret[0].(*GetTenantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockDirectoryClientMockRecorder) GetTenant(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockDirectoryClient)(nil).GetTenant), varargs...)
}

// ListEndpoints mocks base method.
func (m *MockDirectoryClient) ListEndpoints(arg0 context.Context, arg1 *ListEndpointsRequest, arg2 ...grpc.CallOption) (*ListEndpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEndpoints", varargs...)
	ret0, _ := ret[0].(*ListEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockDirectoryClientMockRecorder) ListEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockDirectoryClient)(nil).ListEndpoints), varargs...)
}

// WatchEndpoints mocks base method.
func (m *MockDirectoryClient) WatchEndpoints(arg0 context.Context, arg1 *WatchEndpointsRequest, arg2 ...grpc.CallOption) (Directory_WatchEndpointsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchEndpoints", varargs...)
	ret0, _ := ret[0].(Directory_WatchEndpointsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEndpoints indicates an expected call of WatchEndpoints.
func (mr *MockDirectoryClientMockRecorder) WatchEndpoints(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEndpoints", reflect.TypeOf((*MockDirectoryClient)(nil).WatchEndpoints), varargs...)
}

// MockDirectory_WatchEndpointsClient is a mock of Directory_WatchEndpointsClient interface.
type MockDirectory_WatchEndpointsClient struct {
	ctrl     *gomock.Controller
	recorder *MockDirectory_WatchEndpointsClientMockRecorder
}

// MockDirectory_WatchEndpointsClientMockRecorder is the mock recorder for MockDirectory_WatchEndpointsClient.
type MockDirectory_WatchEndpointsClientMockRecorder struct {
	mock *MockDirectory_WatchEndpointsClient
}

// NewMockDirectory_WatchEndpointsClient creates a new mock instance.
func NewMockDirectory_WatchEndpointsClient(ctrl *gomock.Controller) *MockDirectory_WatchEndpointsClient {
	mock := &MockDirectory_WatchEndpointsClient{ctrl: ctrl}
	mock.recorder = &MockDirectory_WatchEndpointsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectory_WatchEndpointsClient) EXPECT() *MockDirectory_WatchEndpointsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockDirectory_WatchEndpointsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockDirectory_WatchEndpointsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockDirectory_WatchEndpointsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockDirectory_WatchEndpointsClient) Recv() (*WatchEndpointsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WatchEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockDirectory_WatchEndpointsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method.
func (m *MockDirectory_WatchEndpointsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockDirectory_WatchEndpointsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockDirectory_WatchEndpointsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockDirectory_WatchEndpointsClient)(nil).Trailer))
}
