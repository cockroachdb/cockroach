// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/sqlproxyccl/tenant/directory.proto

package tenant

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PodState gives the current state of a tenant pod, so that the proxy knows
// how/where to route traffic.
// NOTE: This is not the same as the Kubernetes Pod Status.
type PodState int32

const (
	// RUNNING indicates the pod may have active SQL connections and is ready to
	// accept new SQL connections.
	// NOTE: The proxy must still be prepared to retry connections against a
	// running pod in case of transient failures.
	RUNNING PodState = 0
	// DRAINING indicates that the pod may still have active SQL connections to
	// it, but is in the process of shedding those connections so that it can be
	// terminated. No new connections should be routed to the pod. In addition,
	// the proxy will begin terminating existing, less-active connections to the
	// pod.
	DRAINING PodState = 1
	// DELETING indicates that the pod is being terminated. This state is only
	// used by WatchPods.
	DELETING PodState = 2
	// UNKNOWN indicates that the pod values being reported are from a
	// potentially out of date source. UNKNOWN may be used to notify updates to
	// pod values when the pod's state may be out of date by the time the update
	// is processed.
	UNKNOWN PodState = 3
)

var PodState_name = map[int32]string{
	0: "RUNNING",
	1: "DRAINING",
	2: "DELETING",
	3: "UNKNOWN",
}

var PodState_value = map[string]int32{
	"RUNNING":  0,
	"DRAINING": 1,
	"DELETING": 2,
	"UNKNOWN":  3,
}

func (x PodState) String() string {
	return proto.EnumName(PodState_name, int32(x))
}

func (PodState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{0}
}

// WatchPodsRequest is empty as we want to get all notifications.
type WatchPodsRequest struct {
}

func (m *WatchPodsRequest) Reset()         { *m = WatchPodsRequest{} }
func (m *WatchPodsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchPodsRequest) ProtoMessage()    {}
func (*WatchPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{0}
}
func (m *WatchPodsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WatchPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPodsRequest.Merge(m, src)
}
func (m *WatchPodsRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPodsRequest proto.InternalMessageInfo

// Pod contains information about a tenant pod, such as its tenant owner,
// location, and state.
type Pod struct {
	// TenantID is the tenant that owns the pod.
	TenantID uint64 `protobuf:"varint,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Addr is the ip and port combo identifying the tenant pod, (e.g.
	// 132.130.1.11:34576).
	Addr string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	// PodState gives the current status of the tenant pod.
	State PodState `protobuf:"varint,3,opt,name=State,proto3,enum=cockroach.ccl.sqlproxyccl.tenant.PodState" json:"State,omitempty"`
	// Load is a number in the range [0, 1] indicating the current amount of load
	// experienced by this tenant pod.
	Load float32 `protobuf:"fixed32,4,opt,name=Load,proto3" json:"Load,omitempty"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{1}
}
func (m *Pod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(m, src)
}
func (m *Pod) XXX_Size() int {
	return m.Size()
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

// WatchPodsResponse represents the notifications that the server sends to
// its clients when clients want to monitor the directory server activity.
type WatchPodsResponse struct {
	// Pod describes the tenant pod which has been added, modified, or deleted.
	Pod *Pod `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
}

func (m *WatchPodsResponse) Reset()         { *m = WatchPodsResponse{} }
func (m *WatchPodsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchPodsResponse) ProtoMessage()    {}
func (*WatchPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{2}
}
func (m *WatchPodsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WatchPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPodsResponse.Merge(m, src)
}
func (m *WatchPodsResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPodsResponse proto.InternalMessageInfo

// ListPodsRequest is used to query the server for the list of current
// pods of a given tenant.
type ListPodsRequest struct {
	// TenantID identifies the tenant for which the client is requesting a list of
	// the pods.
	TenantID uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *ListPodsRequest) Reset()         { *m = ListPodsRequest{} }
func (m *ListPodsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPodsRequest) ProtoMessage()    {}
func (*ListPodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{3}
}
func (m *ListPodsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPodsRequest.Merge(m, src)
}
func (m *ListPodsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPodsRequest proto.InternalMessageInfo

// EnsurePodRequest is used to ensure that at least one tenant pod is in the
// RUNNING state.
type EnsurePodRequest struct {
	// TenantID is the id of the tenant for which a RUNNING pod is requested.
	TenantID uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *EnsurePodRequest) Reset()         { *m = EnsurePodRequest{} }
func (m *EnsurePodRequest) String() string { return proto.CompactTextString(m) }
func (*EnsurePodRequest) ProtoMessage()    {}
func (*EnsurePodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{4}
}
func (m *EnsurePodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnsurePodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnsurePodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePodRequest.Merge(m, src)
}
func (m *EnsurePodRequest) XXX_Size() int {
	return m.Size()
}
func (m *EnsurePodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePodRequest proto.InternalMessageInfo

// EnsurePodResponse is empty and indicates that the server processed the
// request.
type EnsurePodResponse struct {
}

func (m *EnsurePodResponse) Reset()         { *m = EnsurePodResponse{} }
func (m *EnsurePodResponse) String() string { return proto.CompactTextString(m) }
func (*EnsurePodResponse) ProtoMessage()    {}
func (*EnsurePodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{5}
}
func (m *EnsurePodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnsurePodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EnsurePodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnsurePodResponse.Merge(m, src)
}
func (m *EnsurePodResponse) XXX_Size() int {
	return m.Size()
}
func (m *EnsurePodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnsurePodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnsurePodResponse proto.InternalMessageInfo

// ListPodsResponse is sent back as a result of requesting the list of pods for
// a given tenant.
type ListPodsResponse struct {
	// Pods is the list of RUNNING and/or DRAINING pods for the requested tenant.
	// It does not include DELETING pods.
	Pods []*Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (m *ListPodsResponse) Reset()         { *m = ListPodsResponse{} }
func (m *ListPodsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPodsResponse) ProtoMessage()    {}
func (*ListPodsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{6}
}
func (m *ListPodsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPodsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ListPodsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPodsResponse.Merge(m, src)
}
func (m *ListPodsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPodsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPodsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPodsResponse proto.InternalMessageInfo

// GetTenantRequest is used by a client to request from the sever metadata
// related to a given tenant.
type GetTenantRequest struct {
	// TenantID identifies the tenant for which the metadata is being requested.
	TenantID uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *GetTenantRequest) Reset()         { *m = GetTenantRequest{} }
func (m *GetTenantRequest) String() string { return proto.CompactTextString(m) }
func (*GetTenantRequest) ProtoMessage()    {}
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{7}
}
func (m *GetTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantRequest.Merge(m, src)
}
func (m *GetTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantRequest proto.InternalMessageInfo

// GetTenantResponse is sent back when a client requests metadata for a tenant.
type GetTenantResponse struct {
	// ClusterName is the name of the tenant's cluster.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
}

func (m *GetTenantResponse) Reset()         { *m = GetTenantResponse{} }
func (m *GetTenantResponse) String() string { return proto.CompactTextString(m) }
func (*GetTenantResponse) ProtoMessage()    {}
func (*GetTenantResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec8b5028e8f2b222, []int{8}
}
func (m *GetTenantResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GetTenantResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantResponse.Merge(m, src)
}
func (m *GetTenantResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.ccl.sqlproxyccl.tenant.PodState", PodState_name, PodState_value)
	proto.RegisterType((*WatchPodsRequest)(nil), "cockroach.ccl.sqlproxyccl.tenant.WatchPodsRequest")
	proto.RegisterType((*Pod)(nil), "cockroach.ccl.sqlproxyccl.tenant.Pod")
	proto.RegisterType((*WatchPodsResponse)(nil), "cockroach.ccl.sqlproxyccl.tenant.WatchPodsResponse")
	proto.RegisterType((*ListPodsRequest)(nil), "cockroach.ccl.sqlproxyccl.tenant.ListPodsRequest")
	proto.RegisterType((*EnsurePodRequest)(nil), "cockroach.ccl.sqlproxyccl.tenant.EnsurePodRequest")
	proto.RegisterType((*EnsurePodResponse)(nil), "cockroach.ccl.sqlproxyccl.tenant.EnsurePodResponse")
	proto.RegisterType((*ListPodsResponse)(nil), "cockroach.ccl.sqlproxyccl.tenant.ListPodsResponse")
	proto.RegisterType((*GetTenantRequest)(nil), "cockroach.ccl.sqlproxyccl.tenant.GetTenantRequest")
	proto.RegisterType((*GetTenantResponse)(nil), "cockroach.ccl.sqlproxyccl.tenant.GetTenantResponse")
}

func init() {
	proto.RegisterFile("ccl/sqlproxyccl/tenant/directory.proto", fileDescriptor_ec8b5028e8f2b222)
}

var fileDescriptor_ec8b5028e8f2b222 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xa6, 0x8c, 0xf6, 0xb5, 0x82, 0xd4, 0x70, 0x88, 0x7a, 0x08, 0x21, 0x12, 0x28,
	0xec, 0x90, 0x42, 0x27, 0x81, 0x90, 0x40, 0x62, 0x53, 0xcb, 0x54, 0x51, 0x42, 0x15, 0x36, 0x4d,
	0xe2, 0x32, 0x05, 0xdb, 0xda, 0x2a, 0xba, 0x38, 0x4d, 0x5c, 0xc4, 0xbe, 0x01, 0x47, 0xce, 0x5c,
	0xf9, 0x32, 0x3b, 0xee, 0xb8, 0x13, 0x82, 0xf4, 0x8b, 0xa0, 0x38, 0x69, 0x09, 0x9d, 0xc4, 0xd2,
	0xdd, 0x9e, 0x5d, 0xff, 0xfc, 0x7f, 0x7f, 0xbf, 0x7f, 0x03, 0x0f, 0x09, 0x99, 0x74, 0xe2, 0xe9,
	0x24, 0x8c, 0xf8, 0x97, 0xd3, 0xb4, 0x16, 0x2c, 0xf0, 0x03, 0xd1, 0xa1, 0xe3, 0x88, 0x11, 0xc1,
	0xa3, 0x53, 0x27, 0x8c, 0xb8, 0xe0, 0xd8, 0x24, 0x9c, 0x7c, 0x8a, 0xb8, 0x4f, 0x8e, 0x1d, 0x42,
	0x26, 0x4e, 0x81, 0x70, 0x32, 0xa2, 0x7d, 0xf7, 0x88, 0x1f, 0x71, 0x79, 0xb8, 0x93, 0x56, 0x19,
	0x67, 0x61, 0xd0, 0x0e, 0x7c, 0x41, 0x8e, 0x47, 0x9c, 0xc6, 0x1e, 0x9b, 0xce, 0x58, 0x2c, 0xac,
	0xef, 0x08, 0xd4, 0x11, 0xa7, 0xf8, 0x11, 0xd4, 0x33, 0xf6, 0x70, 0x4c, 0xf5, 0x8a, 0x89, 0xec,
	0xea, 0x4e, 0x33, 0xf9, 0x79, 0xaf, 0xb6, 0x27, 0x37, 0x07, 0x3d, 0xaf, 0x96, 0xfd, 0x3c, 0xa0,
	0x18, 0x43, 0x75, 0x9b, 0xd2, 0x48, 0x47, 0x26, 0xb2, 0xeb, 0x9e, 0xac, 0xf1, 0x2b, 0xb8, 0xf1,
	0x5e, 0xf8, 0x82, 0xe9, 0xaa, 0x89, 0xec, 0x5b, 0xdd, 0x4d, 0xe7, 0xaa, 0x16, 0x9d, 0x11, 0xa7,
	0x92, 0xf0, 0x32, 0x30, 0xbd, 0x75, 0xc8, 0x7d, 0xaa, 0x57, 0x4d, 0x64, 0x57, 0x3c, 0x59, 0x5b,
	0x43, 0x68, 0x15, 0x1a, 0x8e, 0x43, 0x1e, 0xc4, 0x0c, 0x3f, 0x03, 0x35, 0xe4, 0x54, 0xaa, 0x37,
	0xba, 0x0f, 0x4a, 0x09, 0x79, 0x29, 0x61, 0xbd, 0x80, 0xdb, 0xc3, 0x71, 0x2c, 0x0a, 0xee, 0xff,
	0x75, 0x8d, 0xfe, 0xe7, 0xda, 0x7a, 0x09, 0x5a, 0x3f, 0x88, 0x67, 0x11, 0x4b, 0xef, 0x5b, 0x1f,
	0xbf, 0x03, 0xad, 0x02, 0x9e, 0x59, 0xb1, 0xde, 0x82, 0xf6, 0xb7, 0xa3, 0xdc, 0xde, 0x73, 0xa8,
	0x86, 0x9c, 0xc6, 0x3a, 0x32, 0xd5, 0xf2, 0xfe, 0x24, 0x92, 0xb6, 0xb8, 0xcb, 0x44, 0x26, 0x7e,
	0x8d, 0x16, 0x9f, 0x42, 0xab, 0x80, 0xe7, 0xed, 0xdc, 0x87, 0x26, 0x99, 0xcc, 0x62, 0xc1, 0xa2,
	0xc3, 0xc0, 0x3f, 0x61, 0xf9, 0xd0, 0x1b, 0xf9, 0x9e, 0xeb, 0x9f, 0xb0, 0xcd, 0xd7, 0x50, 0x5b,
	0x0c, 0x13, 0x37, 0xe0, 0xa6, 0xb7, 0xef, 0xba, 0x03, 0x77, 0x57, 0x53, 0x70, 0x13, 0x6a, 0x3d,
	0x6f, 0x7b, 0x20, 0x57, 0x48, 0xae, 0xfa, 0xc3, 0xfe, 0x5e, 0xba, 0xaa, 0xa4, 0x07, 0xf7, 0xdd,
	0x37, 0xee, 0xbb, 0x03, 0x57, 0x53, 0xdb, 0xd5, 0xaf, 0x3f, 0x0c, 0xa5, 0x9b, 0xa8, 0x50, 0xef,
	0x2d, 0xa2, 0x8e, 0xa7, 0x50, 0x5b, 0xbc, 0x0d, 0x7e, 0x72, 0xf5, 0x2b, 0xac, 0x4c, 0xb6, 0xdd,
	0x5d, 0x07, 0xc9, 0xbd, 0x7e, 0x86, 0xfa, 0x32, 0x6e, 0xb8, 0xc4, 0x05, 0xab, 0x7f, 0xa6, 0xf6,
	0xd6, 0x5a, 0x4c, 0xa6, 0xfa, 0x18, 0x61, 0x01, 0xf5, 0x65, 0x36, 0xca, 0xe8, 0xae, 0xe6, 0xb0,
	0x8c, 0xee, 0xa5, 0xf0, 0xa5, 0xaa, 0xcb, 0x71, 0x97, 0x51, 0x5d, 0x8d, 0x56, 0x19, 0xd5, 0x4b,
	0x79, 0xda, 0xb1, 0xcf, 0x7e, 0x1b, 0xca, 0x59, 0x62, 0xa0, 0xf3, 0xc4, 0x40, 0x17, 0x89, 0x81,
	0x7e, 0x25, 0x06, 0xfa, 0x36, 0x37, 0x94, 0xf3, 0xb9, 0xa1, 0x5c, 0xcc, 0x0d, 0xe5, 0xc3, 0x46,
	0xc6, 0x7e, 0xdc, 0x90, 0x1f, 0xad, 0xad, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0x0f, 0x28,
	0xb4, 0x16, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectoryClient interface {
	// ListPods is used to query the server for the list of all RUNNING and/or
	// DRAINING pods of a given tenant.
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error)
	// WatchPods gets a stream of tenant pod change notifications. Notifications
	// are sent when a tenant pod is created, destroyed, or modified. When
	// WatchPods is first called, it returns notifications for all existing pods.
	WatchPods(ctx context.Context, in *WatchPodsRequest, opts ...grpc.CallOption) (Directory_WatchPodsClient, error)
	// EnsurePod ensures that at least one of the given tenant's pod is in the
	// RUNNING state. If there is already a RUNNING pod, then the server doesn't
	// have to do anything. If there isn't a RUNNING pod, then the server must
	// either convert an existing DRAINING pod to a RUNNING pod, or else bring new
	// RUNNING pod up. If the requested tenant does not exist, EnsurePod returns a
	// GRPC NotFound error.
	EnsurePod(ctx context.Context, in *EnsurePodRequest, opts ...grpc.CallOption) (*EnsurePodResponse, error)
	// GetTenant is used to fetch the metadata of a specific tenant. If the tenant
	// does not exist, GetTenant returns a GRPC NotFound error.
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error)
}

type directoryClient struct {
	cc *grpc.ClientConn
}

func NewDirectoryClient(cc *grpc.ClientConn) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error) {
	out := new(ListPodsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) WatchPods(ctx context.Context, in *WatchPodsRequest, opts ...grpc.CallOption) (Directory_WatchPodsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Directory_serviceDesc.Streams[0], "/cockroach.ccl.sqlproxyccl.tenant.Directory/WatchPods", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryWatchPodsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_WatchPodsClient interface {
	Recv() (*WatchPodsResponse, error)
	grpc.ClientStream
}

type directoryWatchPodsClient struct {
	grpc.ClientStream
}

func (x *directoryWatchPodsClient) Recv() (*WatchPodsResponse, error) {
	m := new(WatchPodsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) EnsurePod(ctx context.Context, in *EnsurePodRequest, opts ...grpc.CallOption) (*EnsurePodResponse, error) {
	out := new(EnsurePodResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/EnsurePod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*GetTenantResponse, error) {
	out := new(GetTenantResponse)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.tenant.Directory/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
type DirectoryServer interface {
	// ListPods is used to query the server for the list of all RUNNING and/or
	// DRAINING pods of a given tenant.
	ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error)
	// WatchPods gets a stream of tenant pod change notifications. Notifications
	// are sent when a tenant pod is created, destroyed, or modified. When
	// WatchPods is first called, it returns notifications for all existing pods.
	WatchPods(*WatchPodsRequest, Directory_WatchPodsServer) error
	// EnsurePod ensures that at least one of the given tenant's pod is in the
	// RUNNING state. If there is already a RUNNING pod, then the server doesn't
	// have to do anything. If there isn't a RUNNING pod, then the server must
	// either convert an existing DRAINING pod to a RUNNING pod, or else bring new
	// RUNNING pod up. If the requested tenant does not exist, EnsurePod returns a
	// GRPC NotFound error.
	EnsurePod(context.Context, *EnsurePodRequest) (*EnsurePodResponse, error)
	// GetTenant is used to fetch the metadata of a specific tenant. If the tenant
	// does not exist, GetTenant returns a GRPC NotFound error.
	GetTenant(context.Context, *GetTenantRequest) (*GetTenantResponse, error)
}

// UnimplementedDirectoryServer can be embedded to have forward compatible implementations.
type UnimplementedDirectoryServer struct {
}

func (*UnimplementedDirectoryServer) ListPods(ctx context.Context, req *ListPodsRequest) (*ListPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (*UnimplementedDirectoryServer) WatchPods(req *WatchPodsRequest, srv Directory_WatchPodsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPods not implemented")
}
func (*UnimplementedDirectoryServer) EnsurePod(ctx context.Context, req *EnsurePodRequest) (*EnsurePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsurePod not implemented")
}
func (*UnimplementedDirectoryServer) GetTenant(ctx context.Context, req *GetTenantRequest) (*GetTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}

func RegisterDirectoryServer(s *grpc.Server, srv DirectoryServer) {
	s.RegisterService(&_Directory_serviceDesc, srv)
}

func _Directory_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.ccl.sqlproxyccl.tenant.Directory/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListPods(ctx, req.(*ListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_WatchPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPodsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).WatchPods(m, &directoryWatchPodsServer{stream})
}

type Directory_WatchPodsServer interface {
	Send(*WatchPodsResponse) error
	grpc.ServerStream
}

type directoryWatchPodsServer struct {
	grpc.ServerStream
}

func (x *directoryWatchPodsServer) Send(m *WatchPodsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_EnsurePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsurePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).EnsurePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.ccl.sqlproxyccl.tenant.Directory/EnsurePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).EnsurePod(ctx, req.(*EnsurePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.ccl.sqlproxyccl.tenant.Directory/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Directory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.ccl.sqlproxyccl.tenant.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPods",
			Handler:    _Directory_ListPods_Handler,
		},
		{
			MethodName: "EnsurePod",
			Handler:    _Directory_EnsurePod_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Directory_GetTenant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchPods",
			Handler:       _Directory_WatchPods_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ccl/sqlproxyccl/tenant/directory.proto",
}

func (m *WatchPodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchPodsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchPodsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Pod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Load != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Load))))
		i--
		dAtA[i] = 0x25
	}
	if m.State != 0 {
		i = encodeVarintDirectory(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.TenantID != 0 {
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchPodsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchPodsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchPodsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pod != nil {
		{
			size, err := m.Pod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDirectory(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPodsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPodsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantID != 0 {
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnsurePodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnsurePodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnsurePodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantID != 0 {
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnsurePodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnsurePodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnsurePodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListPodsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPodsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPodsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDirectory(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TenantID != 0 {
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTenantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDirectory(dAtA []byte, offset int, v uint64) int {
	offset -= sovDirectory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WatchPodsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.TenantID != 0 {
		n += 1 + sovDirectory(uint64(m.TenantID))
	}
	if m.State != 0 {
		n += 1 + sovDirectory(uint64(m.State))
	}
	if m.Load != 0 {
		n += 5
	}
	return n
}

func (m *WatchPodsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pod != nil {
		l = m.Pod.Size()
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func (m *ListPodsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantID != 0 {
		n += 1 + sovDirectory(uint64(m.TenantID))
	}
	return n
}

func (m *EnsurePodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantID != 0 {
		n += 1 + sovDirectory(uint64(m.TenantID))
	}
	return n
}

func (m *EnsurePodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListPodsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovDirectory(uint64(l))
		}
	}
	return n
}

func (m *GetTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantID != 0 {
		n += 1 + sovDirectory(uint64(m.TenantID))
	}
	return n
}

func (m *GetTenantResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	return n
}

func sovDirectory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDirectory(x uint64) (n int) {
	return sovDirectory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WatchPodsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchPodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchPodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PodState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Load = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchPodsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchPodsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchPodsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pod == nil {
				m.Pod = &Pod{}
			}
			if err := m.Pod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPodsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnsurePodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnsurePodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnsurePodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnsurePodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnsurePodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnsurePodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPodsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPodsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPodsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &Pod{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDirectory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDirectory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDirectory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDirectory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDirectory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDirectory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDirectory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDirectory = fmt.Errorf("proto: unexpected end of group")
)
