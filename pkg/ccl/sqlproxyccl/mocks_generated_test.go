// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/ccl/sqlproxyccl (interfaces: TenantResolver)

// Package sqlproxyccl is a generated GoMock package.
package sqlproxyccl

import (
	context "context"
	reflect "reflect"

	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	gomock "github.com/golang/mock/gomock"
)

// MockTenantResolver is a mock of TenantResolver interface.
type MockTenantResolver struct {
	ctrl     *gomock.Controller
	recorder *MockTenantResolverMockRecorder
}

// MockTenantResolverMockRecorder is the mock recorder for MockTenantResolver.
type MockTenantResolverMockRecorder struct {
	mock *MockTenantResolver
}

// NewMockTenantResolver creates a new mock instance.
func NewMockTenantResolver(ctrl *gomock.Controller) *MockTenantResolver {
	mock := &MockTenantResolver{ctrl: ctrl}
	mock.recorder = &MockTenantResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantResolver) EXPECT() *MockTenantResolverMockRecorder {
	return m.recorder
}

// EnsureTenantAddr mocks base method.
func (m *MockTenantResolver) EnsureTenantAddr(arg0 context.Context, arg1 roachpb.TenantID, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureTenantAddr", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureTenantAddr indicates an expected call of EnsureTenantAddr.
func (mr *MockTenantResolverMockRecorder) EnsureTenantAddr(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureTenantAddr", reflect.TypeOf((*MockTenantResolver)(nil).EnsureTenantAddr), arg0, arg1, arg2)
}

// LookupTenantAddrs mocks base method.
func (m *MockTenantResolver) LookupTenantAddrs(arg0 context.Context, arg1 roachpb.TenantID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupTenantAddrs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupTenantAddrs indicates an expected call of LookupTenantAddrs.
func (mr *MockTenantResolverMockRecorder) LookupTenantAddrs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupTenantAddrs", reflect.TypeOf((*MockTenantResolver)(nil).LookupTenantAddrs), arg0, arg1)
}

// ReportFailure mocks base method.
func (m *MockTenantResolver) ReportFailure(arg0 context.Context, arg1 roachpb.TenantID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportFailure", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportFailure indicates an expected call of ReportFailure.
func (mr *MockTenantResolverMockRecorder) ReportFailure(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportFailure", reflect.TypeOf((*MockTenantResolver)(nil).ReportFailure), arg0, arg1, arg2)
}
