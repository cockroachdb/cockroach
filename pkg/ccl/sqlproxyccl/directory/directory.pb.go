// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ccl/sqlproxyccl/directory/directory.proto

package directory

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	ADDED    EventType = 0
	MODIFIED EventType = 1
	DELETED  EventType = 2
)

var EventType_name = map[int32]string{
	0: "ADDED",
	1: "MODIFIED",
	2: "DELETED",
}
var EventType_value = map[string]int32{
	"ADDED":    0,
	"MODIFIED": 1,
	"DELETED":  2,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{0}
}

type Phase int32

const (
	RUNNING     Phase = 0
	NOT_RUNNING Phase = 1
)

var Phase_name = map[int32]string{
	0: "RUNNING",
	1: "NOT_RUNNING",
}
var Phase_value = map[string]int32{
	"RUNNING":     0,
	"NOT_RUNNING": 1,
}

func (x Phase) String() string {
	return proto.EnumName(Phase_name, int32(x))
}
func (Phase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{1}
}

type EventReq struct {
}

func (m *EventReq) Reset()         { *m = EventReq{} }
func (m *EventReq) String() string { return proto.CompactTextString(m) }
func (*EventReq) ProtoMessage()    {}
func (*EventReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{0}
}
func (m *EventReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EventReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReq.Merge(dst, src)
}
func (m *EventReq) XXX_Size() int {
	return m.Size()
}
func (m *EventReq) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReq.DiscardUnknown(m)
}

var xxx_messageInfo_EventReq proto.InternalMessageInfo

type EventResp struct {
	Typ      EventType `protobuf:"varint,1,opt,name=typ,proto3,enum=cockroach.ccl.sqlproxyccl.directory.EventType" json:"typ,omitempty"`
	Ip       string    `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	TenantId uint64    `protobuf:"varint,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *EventResp) Reset()         { *m = EventResp{} }
func (m *EventResp) String() string { return proto.CompactTextString(m) }
func (*EventResp) ProtoMessage()    {}
func (*EventResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{1}
}
func (m *EventResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EventResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResp.Merge(dst, src)
}
func (m *EventResp) XXX_Size() int {
	return m.Size()
}
func (m *EventResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResp.DiscardUnknown(m)
}

var xxx_messageInfo_EventResp proto.InternalMessageInfo

type TenantReq struct {
	TenantId uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (m *TenantReq) Reset()         { *m = TenantReq{} }
func (m *TenantReq) String() string { return proto.CompactTextString(m) }
func (*TenantReq) ProtoMessage()    {}
func (*TenantReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{2}
}
func (m *TenantReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TenantReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantReq.Merge(dst, src)
}
func (m *TenantReq) XXX_Size() int {
	return m.Size()
}
func (m *TenantReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantReq.DiscardUnknown(m)
}

var xxx_messageInfo_TenantReq proto.InternalMessageInfo

type SetPodsCountReq struct {
	TenantId uint64 `protobuf:"varint,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Count    int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *SetPodsCountReq) Reset()         { *m = SetPodsCountReq{} }
func (m *SetPodsCountReq) String() string { return proto.CompactTextString(m) }
func (*SetPodsCountReq) ProtoMessage()    {}
func (*SetPodsCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{3}
}
func (m *SetPodsCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPodsCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SetPodsCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPodsCountReq.Merge(dst, src)
}
func (m *SetPodsCountReq) XXX_Size() int {
	return m.Size()
}
func (m *SetPodsCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPodsCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetPodsCountReq proto.InternalMessageInfo

type SetPodsCountResp struct {
}

func (m *SetPodsCountResp) Reset()         { *m = SetPodsCountResp{} }
func (m *SetPodsCountResp) String() string { return proto.CompactTextString(m) }
func (*SetPodsCountResp) ProtoMessage()    {}
func (*SetPodsCountResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{4}
}
func (m *SetPodsCountResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPodsCountResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SetPodsCountResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPodsCountResp.Merge(dst, src)
}
func (m *SetPodsCountResp) XXX_Size() int {
	return m.Size()
}
func (m *SetPodsCountResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPodsCountResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetPodsCountResp proto.InternalMessageInfo

type Pod struct {
	Ip    string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Phase Phase  `protobuf:"varint,2,opt,name=phase,proto3,enum=cockroach.ccl.sqlproxyccl.directory.Phase" json:"phase,omitempty"`
}

func (m *Pod) Reset()         { *m = Pod{} }
func (m *Pod) String() string { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()    {}
func (*Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{5}
}
func (m *Pod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pod.Merge(dst, src)
}
func (m *Pod) XXX_Size() int {
	return m.Size()
}
func (m *Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_Pod proto.InternalMessageInfo

type ListResp struct {
	Pods []*Pod `protobuf:"bytes,1,rep,name=pods,proto3" json:"pods,omitempty"`
}

func (m *ListResp) Reset()         { *m = ListResp{} }
func (m *ListResp) String() string { return proto.CompactTextString(m) }
func (*ListResp) ProtoMessage()    {}
func (*ListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_directory_b388c1fa63505dde, []int{6}
}
func (m *ListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResp.Merge(dst, src)
}
func (m *ListResp) XXX_Size() int {
	return m.Size()
}
func (m *ListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventReq)(nil), "cockroach.ccl.sqlproxyccl.directory.EventReq")
	proto.RegisterType((*EventResp)(nil), "cockroach.ccl.sqlproxyccl.directory.EventResp")
	proto.RegisterType((*TenantReq)(nil), "cockroach.ccl.sqlproxyccl.directory.TenantReq")
	proto.RegisterType((*SetPodsCountReq)(nil), "cockroach.ccl.sqlproxyccl.directory.SetPodsCountReq")
	proto.RegisterType((*SetPodsCountResp)(nil), "cockroach.ccl.sqlproxyccl.directory.SetPodsCountResp")
	proto.RegisterType((*Pod)(nil), "cockroach.ccl.sqlproxyccl.directory.Pod")
	proto.RegisterType((*ListResp)(nil), "cockroach.ccl.sqlproxyccl.directory.ListResp")
	proto.RegisterEnum("cockroach.ccl.sqlproxyccl.directory.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("cockroach.ccl.sqlproxyccl.directory.Phase", Phase_name, Phase_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectoryClient interface {
	List(ctx context.Context, in *TenantReq, opts ...grpc.CallOption) (*ListResp, error)
	WaitEvent(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (Directory_WaitEventClient, error)
	SetPodsCount(ctx context.Context, in *SetPodsCountReq, opts ...grpc.CallOption) (*SetPodsCountResp, error)
}

type directoryClient struct {
	cc *grpc.ClientConn
}

func NewDirectoryClient(cc *grpc.ClientConn) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) List(ctx context.Context, in *TenantReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.directory.Directory/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) WaitEvent(ctx context.Context, in *EventReq, opts ...grpc.CallOption) (Directory_WaitEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Directory_serviceDesc.Streams[0], "/cockroach.ccl.sqlproxyccl.directory.Directory/WaitEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &directoryWaitEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Directory_WaitEventClient interface {
	Recv() (*EventResp, error)
	grpc.ClientStream
}

type directoryWaitEventClient struct {
	grpc.ClientStream
}

func (x *directoryWaitEventClient) Recv() (*EventResp, error) {
	m := new(EventResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *directoryClient) SetPodsCount(ctx context.Context, in *SetPodsCountReq, opts ...grpc.CallOption) (*SetPodsCountResp, error) {
	out := new(SetPodsCountResp)
	err := c.cc.Invoke(ctx, "/cockroach.ccl.sqlproxyccl.directory.Directory/SetPodsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
type DirectoryServer interface {
	List(context.Context, *TenantReq) (*ListResp, error)
	WaitEvent(*EventReq, Directory_WaitEventServer) error
	SetPodsCount(context.Context, *SetPodsCountReq) (*SetPodsCountResp, error)
}

func RegisterDirectoryServer(s *grpc.Server, srv DirectoryServer) {
	s.RegisterService(&_Directory_serviceDesc, srv)
}

func _Directory_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.ccl.sqlproxyccl.directory.Directory/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).List(ctx, req.(*TenantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_WaitEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DirectoryServer).WaitEvent(m, &directoryWaitEventServer{stream})
}

type Directory_WaitEventServer interface {
	Send(*EventResp) error
	grpc.ServerStream
}

type directoryWaitEventServer struct {
	grpc.ServerStream
}

func (x *directoryWaitEventServer) Send(m *EventResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Directory_SetPodsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPodsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetPodsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.ccl.sqlproxyccl.directory.Directory/SetPodsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetPodsCount(ctx, req.(*SetPodsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Directory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.ccl.sqlproxyccl.directory.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Directory_List_Handler,
		},
		{
			MethodName: "SetPodsCount",
			Handler:    _Directory_SetPodsCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WaitEvent",
			Handler:       _Directory_WaitEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ccl/sqlproxyccl/directory/directory.proto",
}

func (m *EventReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EventResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Typ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.Typ))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.TenantId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantId))
	}
	return i, nil
}

func (m *TenantReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TenantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantId))
	}
	return i, nil
}

func (m *SetPodsCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPodsCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TenantId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.TenantId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *SetPodsCountResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPodsCountResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Pod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ip) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Phase != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDirectory(dAtA, i, uint64(m.Phase))
	}
	return i, nil
}

func (m *ListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, msg := range m.Pods {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDirectory(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintDirectory(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Typ != 0 {
		n += 1 + sovDirectory(uint64(m.Typ))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.TenantId != 0 {
		n += 1 + sovDirectory(uint64(m.TenantId))
	}
	return n
}

func (m *TenantReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantId != 0 {
		n += 1 + sovDirectory(uint64(m.TenantId))
	}
	return n
}

func (m *SetPodsCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantId != 0 {
		n += 1 + sovDirectory(uint64(m.TenantId))
	}
	if m.Count != 0 {
		n += 1 + sovDirectory(uint64(m.Count))
	}
	return n
}

func (m *SetPodsCountResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovDirectory(uint64(l))
	}
	if m.Phase != 0 {
		n += 1 + sovDirectory(uint64(m.Phase))
	}
	return n
}

func (m *ListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovDirectory(uint64(l))
		}
	}
	return n
}

func sovDirectory(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDirectory(x uint64) (n int) {
	return sovDirectory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typ", wireType)
			}
			m.Typ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Typ |= (EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPodsCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPodsCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPodsCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			m.TenantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPodsCountResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPodsCountResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPodsCountResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= (Phase(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDirectory
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &Pod{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDirectory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDirectory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDirectory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDirectory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDirectory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDirectory
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDirectory
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDirectory(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDirectory = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDirectory   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ccl/sqlproxyccl/directory/directory.proto", fileDescriptor_directory_b388c1fa63505dde)
}

var fileDescriptor_directory_b388c1fa63505dde = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xb4, 0x81, 0xe6, 0x75, 0xea, 0x22, 0x6b, 0x87, 0xaa, 0x48, 0x51, 0x15, 0x2e,
	0xa1, 0xd3, 0x32, 0x54, 0x40, 0x5c, 0x38, 0x0c, 0x70, 0x80, 0x4a, 0xa3, 0xab, 0x4c, 0xd1, 0x24,
	0x2e, 0x53, 0x71, 0xac, 0x2d, 0xa2, 0xaa, 0xdd, 0x38, 0x20, 0x0a, 0x5f, 0x80, 0x23, 0xdf, 0x81,
	0x2f, 0xb3, 0xe3, 0x8e, 0xbb, 0x20, 0x41, 0xfb, 0x45, 0x90, 0x9d, 0x2e, 0x6c, 0xbb, 0x10, 0x76,
	0xfb, 0xc7, 0xf9, 0xff, 0x9e, 0xff, 0x79, 0xef, 0x05, 0xee, 0x31, 0x36, 0xdd, 0x55, 0xf3, 0xa9,
	0xcc, 0xc4, 0xe7, 0x85, 0xd6, 0x49, 0x9a, 0x71, 0x96, 0x8b, 0x6c, 0xf1, 0x57, 0x45, 0x32, 0x13,
	0xb9, 0xc0, 0x77, 0x99, 0x60, 0x1f, 0x32, 0x31, 0x61, 0x27, 0x11, 0x63, 0xd3, 0xe8, 0x12, 0x14,
	0x95, 0xd6, 0xce, 0xd6, 0xb1, 0x38, 0x16, 0xc6, 0xbf, 0xab, 0x55, 0x81, 0x06, 0x00, 0x8d, 0xf8,
	0x13, 0x9f, 0xe5, 0x94, 0xcf, 0x83, 0x2f, 0xe0, 0xae, 0xb5, 0x92, 0x78, 0x0f, 0x6a, 0xf9, 0x42,
	0xb6, 0x51, 0x17, 0x85, 0xad, 0x7e, 0x14, 0x55, 0xb8, 0x21, 0x32, 0xf0, 0x78, 0x21, 0x39, 0xd5,
	0x28, 0x6e, 0x81, 0x9d, 0xca, 0xb6, 0xdd, 0x45, 0xa1, 0x4b, 0xed, 0x54, 0xe2, 0x3b, 0xe0, 0xe6,
	0x7c, 0x36, 0x99, 0xe5, 0x47, 0x69, 0xd2, 0xae, 0x75, 0x51, 0x58, 0xa7, 0x8d, 0xe2, 0x60, 0x90,
	0x04, 0x21, 0xb8, 0x63, 0xa3, 0x29, 0x9f, 0x5f, 0x75, 0xa2, 0x6b, 0x4e, 0x02, 0x9b, 0x6f, 0x78,
	0x3e, 0x12, 0x89, 0x7a, 0x2e, 0x3e, 0xfe, 0xdb, 0x8f, 0xb7, 0xc0, 0x61, 0xda, 0x68, 0x92, 0x38,
	0xb4, 0x78, 0x08, 0x30, 0x78, 0x57, 0xab, 0x28, 0x19, 0x1c, 0x42, 0x6d, 0x24, 0x92, 0x75, 0x6e,
	0x54, 0xe6, 0xde, 0x03, 0x47, 0x9e, 0x4c, 0x14, 0x37, 0x05, 0x5a, 0xfd, 0x5e, 0xa5, 0x5e, 0x8c,
	0x34, 0x41, 0x0b, 0x30, 0x78, 0x05, 0x8d, 0xfd, 0x54, 0x15, 0x7d, 0x7d, 0x02, 0x75, 0x29, 0x12,
	0xd5, 0x46, 0xdd, 0x5a, 0xd8, 0xec, 0x87, 0xd5, 0x8a, 0x89, 0x84, 0x1a, 0xaa, 0xf7, 0x78, 0x3d,
	0x22, 0xdd, 0x65, 0xec, 0x82, 0xf3, 0x94, 0x90, 0x98, 0x78, 0x16, 0xde, 0x80, 0xc6, 0xeb, 0x03,
	0x32, 0x78, 0x31, 0x88, 0x89, 0x87, 0x70, 0x13, 0x6e, 0x93, 0x78, 0x3f, 0x1e, 0xc7, 0xc4, 0xb3,
	0x3b, 0xf5, 0x6f, 0x3f, 0x7c, 0xab, 0xb7, 0x0d, 0x8e, 0x89, 0xa4, 0xdf, 0xd1, 0xb7, 0xc3, 0xe1,
	0x60, 0xf8, 0xd2, 0xb3, 0xf0, 0x26, 0x34, 0x87, 0x07, 0xe3, 0xa3, 0x8b, 0x03, 0x54, 0x98, 0xfb,
	0x3f, 0x6d, 0x70, 0xc9, 0xc5, 0xed, 0x98, 0x43, 0x5d, 0xa7, 0xc7, 0xd5, 0x96, 0xa0, 0x9c, 0x62,
	0x67, 0xa7, 0x92, 0xbf, 0x6c, 0xcc, 0x14, 0xdc, 0xc3, 0x49, 0x9a, 0x9b, 0xcf, 0xc3, 0x3b, 0xd5,
	0x17, 0x4e, 0x5f, 0x15, 0xfd, 0x8f, 0x5d, 0xc9, 0xfb, 0x08, 0x7f, 0x85, 0x8d, 0xcb, 0xf3, 0xc7,
	0x0f, 0x2b, 0x55, 0xb8, 0xb6, 0x78, 0x9d, 0x47, 0x37, 0xa0, 0x94, 0x7c, 0xb6, 0x7d, 0xfa, 0xdb,
	0xb7, 0x4e, 0x97, 0x3e, 0x3a, 0x5b, 0xfa, 0xe8, 0x7c, 0xe9, 0xa3, 0x5f, 0x4b, 0x1f, 0x7d, 0x5f,
	0xf9, 0xd6, 0xd9, 0xca, 0xb7, 0xce, 0x57, 0xbe, 0xf5, 0xce, 0x2d, 0xe9, 0xf7, 0xb7, 0xcc, 0x8f,
	0xfa, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xee, 0x6a, 0xa5, 0x10, 0x04, 0x00, 0x00,
}
