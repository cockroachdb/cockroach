// GENERATED FILE DO NOT EDIT
import * as $protobuf from "protobufjs";

/** Namespace cockroach. */
export namespace cockroach {

    /** Namespace server. */
    namespace server {

        /** Namespace serverpb. */
        namespace serverpb {

            /** ZoneConfigurationLevel enum. */
            enum ZoneConfigurationLevel {
                UNKNOWN = 0,
                CLUSTER = 1,
                DATABASE = 2,
                TABLE = 3
            }

            /** Properties of a DatabasesRequest. */
            interface IDatabasesRequest {
            }

            /** Represents a DatabasesRequest. */
            class DatabasesRequest implements IDatabasesRequest {

                /**
                 * Constructs a new DatabasesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDatabasesRequest);

                /**
                 * Creates a new DatabasesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DatabasesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDatabasesRequest): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Encodes the specified DatabasesRequest message. Does not implicitly {@link cockroach.server.serverpb.DatabasesRequest.verify|verify} messages.
                 * @param message DatabasesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDatabasesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabasesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabasesRequest.verify|verify} messages.
                 * @param message DatabasesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDatabasesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabasesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DatabasesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Decodes a DatabasesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DatabasesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Verifies a DatabasesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DatabasesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DatabasesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Creates a plain object from a DatabasesRequest message. Also converts values to other types if specified.
                 * @param message DatabasesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabasesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabasesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DatabasesResponse. */
            interface IDatabasesResponse {

                /** DatabasesResponse databases */
                databases?: (string[]|null);
            }

            /** Represents a DatabasesResponse. */
            class DatabasesResponse implements IDatabasesResponse {

                /**
                 * Constructs a new DatabasesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDatabasesResponse);

                /** DatabasesResponse databases. */
                public databases: string[];

                /**
                 * Creates a new DatabasesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DatabasesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDatabasesResponse): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Encodes the specified DatabasesResponse message. Does not implicitly {@link cockroach.server.serverpb.DatabasesResponse.verify|verify} messages.
                 * @param message DatabasesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDatabasesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabasesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabasesResponse.verify|verify} messages.
                 * @param message DatabasesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDatabasesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabasesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DatabasesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Decodes a DatabasesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DatabasesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Verifies a DatabasesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DatabasesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DatabasesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Creates a plain object from a DatabasesResponse message. Also converts values to other types if specified.
                 * @param message DatabasesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabasesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabasesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DatabaseDetailsRequest. */
            interface IDatabaseDetailsRequest {

                /** DatabaseDetailsRequest database */
                database?: (string|null);
            }

            /** Represents a DatabaseDetailsRequest. */
            class DatabaseDetailsRequest implements IDatabaseDetailsRequest {

                /**
                 * Constructs a new DatabaseDetailsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDatabaseDetailsRequest);

                /** DatabaseDetailsRequest database. */
                public database: string;

                /**
                 * Creates a new DatabaseDetailsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DatabaseDetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDatabaseDetailsRequest): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Encodes the specified DatabaseDetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsRequest.verify|verify} messages.
                 * @param message DatabaseDetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDatabaseDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabaseDetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsRequest.verify|verify} messages.
                 * @param message DatabaseDetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDatabaseDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabaseDetailsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DatabaseDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Decodes a DatabaseDetailsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DatabaseDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Verifies a DatabaseDetailsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DatabaseDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DatabaseDetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Creates a plain object from a DatabaseDetailsRequest message. Also converts values to other types if specified.
                 * @param message DatabaseDetailsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabaseDetailsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabaseDetailsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DatabaseDetailsResponse. */
            interface IDatabaseDetailsResponse {

                /** DatabaseDetailsResponse grants */
                grants?: (cockroach.server.serverpb.DatabaseDetailsResponse.IGrant[]|null);

                /** DatabaseDetailsResponse table_names */
                table_names?: (string[]|null);

                /** DatabaseDetailsResponse descriptor_id */
                descriptor_id?: (Long|null);

                /** DatabaseDetailsResponse zone_config */
                zone_config?: (cockroach.config.zonepb.IZoneConfig|null);

                /** DatabaseDetailsResponse zone_config_level */
                zone_config_level?: (cockroach.server.serverpb.ZoneConfigurationLevel|null);
            }

            /** Represents a DatabaseDetailsResponse. */
            class DatabaseDetailsResponse implements IDatabaseDetailsResponse {

                /**
                 * Constructs a new DatabaseDetailsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDatabaseDetailsResponse);

                /** DatabaseDetailsResponse grants. */
                public grants: cockroach.server.serverpb.DatabaseDetailsResponse.IGrant[];

                /** DatabaseDetailsResponse table_names. */
                public table_names: string[];

                /** DatabaseDetailsResponse descriptor_id. */
                public descriptor_id: Long;

                /** DatabaseDetailsResponse zone_config. */
                public zone_config?: (cockroach.config.zonepb.IZoneConfig|null);

                /** DatabaseDetailsResponse zone_config_level. */
                public zone_config_level: cockroach.server.serverpb.ZoneConfigurationLevel;

                /**
                 * Creates a new DatabaseDetailsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DatabaseDetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDatabaseDetailsResponse): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Encodes the specified DatabaseDetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.verify|verify} messages.
                 * @param message DatabaseDetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDatabaseDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabaseDetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.verify|verify} messages.
                 * @param message DatabaseDetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDatabaseDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabaseDetailsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DatabaseDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Decodes a DatabaseDetailsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DatabaseDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Verifies a DatabaseDetailsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DatabaseDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DatabaseDetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Creates a plain object from a DatabaseDetailsResponse message. Also converts values to other types if specified.
                 * @param message DatabaseDetailsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabaseDetailsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabaseDetailsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DatabaseDetailsResponse {

                /** Properties of a Grant. */
                interface IGrant {

                    /** Grant user */
                    user?: (string|null);

                    /** Grant privileges */
                    privileges?: (string[]|null);
                }

                /** Represents a Grant. */
                class Grant implements IGrant {

                    /**
                     * Constructs a new Grant.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DatabaseDetailsResponse.IGrant);

                    /** Grant user. */
                    public user: string;

                    /** Grant privileges. */
                    public privileges: string[];

                    /**
                     * Creates a new Grant instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Grant instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DatabaseDetailsResponse.IGrant): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Encodes the specified Grant message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.Grant.verify|verify} messages.
                     * @param message Grant message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DatabaseDetailsResponse.IGrant, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Grant message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.Grant.verify|verify} messages.
                     * @param message Grant message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DatabaseDetailsResponse.IGrant, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Grant message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Decodes a Grant message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Verifies a Grant message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Grant
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Creates a plain object from a Grant message. Also converts values to other types if specified.
                     * @param message Grant
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DatabaseDetailsResponse.Grant, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Grant to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a TableDetailsRequest. */
            interface ITableDetailsRequest {

                /** TableDetailsRequest database */
                database?: (string|null);

                /** TableDetailsRequest table */
                table?: (string|null);
            }

            /** Represents a TableDetailsRequest. */
            class TableDetailsRequest implements ITableDetailsRequest {

                /**
                 * Constructs a new TableDetailsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ITableDetailsRequest);

                /** TableDetailsRequest database. */
                public database: string;

                /** TableDetailsRequest table. */
                public table: string;

                /**
                 * Creates a new TableDetailsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TableDetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ITableDetailsRequest): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Encodes the specified TableDetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsRequest.verify|verify} messages.
                 * @param message TableDetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ITableDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableDetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsRequest.verify|verify} messages.
                 * @param message TableDetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ITableDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableDetailsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TableDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Decodes a TableDetailsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TableDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Verifies a TableDetailsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TableDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TableDetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Creates a plain object from a TableDetailsRequest message. Also converts values to other types if specified.
                 * @param message TableDetailsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableDetailsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableDetailsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TableDetailsResponse. */
            interface ITableDetailsResponse {

                /** TableDetailsResponse grants */
                grants?: (cockroach.server.serverpb.TableDetailsResponse.IGrant[]|null);

                /** TableDetailsResponse columns */
                columns?: (cockroach.server.serverpb.TableDetailsResponse.IColumn[]|null);

                /** TableDetailsResponse indexes */
                indexes?: (cockroach.server.serverpb.TableDetailsResponse.IIndex[]|null);

                /** TableDetailsResponse range_count */
                range_count?: (Long|null);

                /** TableDetailsResponse create_table_statement */
                create_table_statement?: (string|null);

                /** TableDetailsResponse zone_config */
                zone_config?: (cockroach.config.zonepb.IZoneConfig|null);

                /** TableDetailsResponse zone_config_level */
                zone_config_level?: (cockroach.server.serverpb.ZoneConfigurationLevel|null);

                /** TableDetailsResponse descriptor_id */
                descriptor_id?: (Long|null);
            }

            /** Represents a TableDetailsResponse. */
            class TableDetailsResponse implements ITableDetailsResponse {

                /**
                 * Constructs a new TableDetailsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ITableDetailsResponse);

                /** TableDetailsResponse grants. */
                public grants: cockroach.server.serverpb.TableDetailsResponse.IGrant[];

                /** TableDetailsResponse columns. */
                public columns: cockroach.server.serverpb.TableDetailsResponse.IColumn[];

                /** TableDetailsResponse indexes. */
                public indexes: cockroach.server.serverpb.TableDetailsResponse.IIndex[];

                /** TableDetailsResponse range_count. */
                public range_count: Long;

                /** TableDetailsResponse create_table_statement. */
                public create_table_statement: string;

                /** TableDetailsResponse zone_config. */
                public zone_config?: (cockroach.config.zonepb.IZoneConfig|null);

                /** TableDetailsResponse zone_config_level. */
                public zone_config_level: cockroach.server.serverpb.ZoneConfigurationLevel;

                /** TableDetailsResponse descriptor_id. */
                public descriptor_id: Long;

                /**
                 * Creates a new TableDetailsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TableDetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ITableDetailsResponse): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Encodes the specified TableDetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.verify|verify} messages.
                 * @param message TableDetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ITableDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableDetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.verify|verify} messages.
                 * @param message TableDetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ITableDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableDetailsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TableDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Decodes a TableDetailsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TableDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Verifies a TableDetailsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TableDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TableDetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Creates a plain object from a TableDetailsResponse message. Also converts values to other types if specified.
                 * @param message TableDetailsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableDetailsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableDetailsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TableDetailsResponse {

                /** Properties of a Grant. */
                interface IGrant {

                    /** Grant user */
                    user?: (string|null);

                    /** Grant privileges */
                    privileges?: (string[]|null);
                }

                /** Represents a Grant. */
                class Grant implements IGrant {

                    /**
                     * Constructs a new Grant.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.IGrant);

                    /** Grant user. */
                    public user: string;

                    /** Grant privileges. */
                    public privileges: string[];

                    /**
                     * Creates a new Grant instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Grant instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.IGrant): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Encodes the specified Grant message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Grant.verify|verify} messages.
                     * @param message Grant message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.IGrant, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Grant message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Grant.verify|verify} messages.
                     * @param message Grant message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.IGrant, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Grant message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Decodes a Grant message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Verifies a Grant message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Grant
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Creates a plain object from a Grant message. Also converts values to other types if specified.
                     * @param message Grant
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Grant, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Grant to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Column. */
                interface IColumn {

                    /** Column name */
                    name?: (string|null);

                    /** Column type */
                    type?: (string|null);

                    /** Column nullable */
                    nullable?: (boolean|null);

                    /** Column default_value */
                    default_value?: (string|null);

                    /** Column generation_expression */
                    generation_expression?: (string|null);

                    /** Column hidden */
                    hidden?: (boolean|null);
                }

                /** Represents a Column. */
                class Column implements IColumn {

                    /**
                     * Constructs a new Column.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.IColumn);

                    /** Column name. */
                    public name: string;

                    /** Column type. */
                    public type: string;

                    /** Column nullable. */
                    public nullable: boolean;

                    /** Column default_value. */
                    public default_value: string;

                    /** Column generation_expression. */
                    public generation_expression: string;

                    /** Column hidden. */
                    public hidden: boolean;

                    /**
                     * Creates a new Column instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Column instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.IColumn): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Encodes the specified Column message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Column.verify|verify} messages.
                     * @param message Column message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.IColumn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Column message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Column.verify|verify} messages.
                     * @param message Column message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.IColumn, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Column message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Decodes a Column message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Verifies a Column message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Column message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Column
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Creates a plain object from a Column message. Also converts values to other types if specified.
                     * @param message Column
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Column, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Column to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Index. */
                interface IIndex {

                    /** Index name */
                    name?: (string|null);

                    /** Index unique */
                    unique?: (boolean|null);

                    /** Index seq */
                    seq?: (Long|null);

                    /** Index column */
                    column?: (string|null);

                    /** Index direction */
                    direction?: (string|null);

                    /** Index storing */
                    storing?: (boolean|null);

                    /** Index implicit */
                    implicit?: (boolean|null);
                }

                /** Represents an Index. */
                class Index implements IIndex {

                    /**
                     * Constructs a new Index.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.IIndex);

                    /** Index name. */
                    public name: string;

                    /** Index unique. */
                    public unique: boolean;

                    /** Index seq. */
                    public seq: Long;

                    /** Index column. */
                    public column: string;

                    /** Index direction. */
                    public direction: string;

                    /** Index storing. */
                    public storing: boolean;

                    /** Index implicit. */
                    public implicit: boolean;

                    /**
                     * Creates a new Index instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Index instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.IIndex): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Encodes the specified Index message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Index.verify|verify} messages.
                     * @param message Index message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.IIndex, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Index message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Index.verify|verify} messages.
                     * @param message Index message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.IIndex, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Index message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Index
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Decodes an Index message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Index
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Verifies an Index message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Index message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Index
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Creates a plain object from an Index message. Also converts values to other types if specified.
                     * @param message Index
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Index, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Index to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a TableStatsRequest. */
            interface ITableStatsRequest {

                /** TableStatsRequest database */
                database?: (string|null);

                /** TableStatsRequest table */
                table?: (string|null);
            }

            /** Represents a TableStatsRequest. */
            class TableStatsRequest implements ITableStatsRequest {

                /**
                 * Constructs a new TableStatsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ITableStatsRequest);

                /** TableStatsRequest database. */
                public database: string;

                /** TableStatsRequest table. */
                public table: string;

                /**
                 * Creates a new TableStatsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TableStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ITableStatsRequest): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Encodes the specified TableStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.TableStatsRequest.verify|verify} messages.
                 * @param message TableStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ITableStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsRequest.verify|verify} messages.
                 * @param message TableStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ITableStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableStatsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Decodes a TableStatsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Verifies a TableStatsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TableStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TableStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Creates a plain object from a TableStatsRequest message. Also converts values to other types if specified.
                 * @param message TableStatsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableStatsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableStatsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TableStatsResponse. */
            interface ITableStatsResponse {

                /** TableStatsResponse range_count */
                range_count?: (Long|null);

                /** TableStatsResponse replica_count */
                replica_count?: (Long|null);

                /** TableStatsResponse node_count */
                node_count?: (Long|null);

                /** TableStatsResponse stats */
                stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

                /** TableStatsResponse approximate_disk_bytes */
                approximate_disk_bytes?: (Long|null);

                /** TableStatsResponse missing_nodes */
                missing_nodes?: (cockroach.server.serverpb.TableStatsResponse.IMissingNode[]|null);
            }

            /** Represents a TableStatsResponse. */
            class TableStatsResponse implements ITableStatsResponse {

                /**
                 * Constructs a new TableStatsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ITableStatsResponse);

                /** TableStatsResponse range_count. */
                public range_count: Long;

                /** TableStatsResponse replica_count. */
                public replica_count: Long;

                /** TableStatsResponse node_count. */
                public node_count: Long;

                /** TableStatsResponse stats. */
                public stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

                /** TableStatsResponse approximate_disk_bytes. */
                public approximate_disk_bytes: Long;

                /** TableStatsResponse missing_nodes. */
                public missing_nodes: cockroach.server.serverpb.TableStatsResponse.IMissingNode[];

                /**
                 * Creates a new TableStatsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TableStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ITableStatsResponse): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Encodes the specified TableStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.verify|verify} messages.
                 * @param message TableStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ITableStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.verify|verify} messages.
                 * @param message TableStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ITableStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableStatsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Decodes a TableStatsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Verifies a TableStatsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TableStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TableStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Creates a plain object from a TableStatsResponse message. Also converts values to other types if specified.
                 * @param message TableStatsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableStatsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableStatsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TableStatsResponse {

                /** Properties of a MissingNode. */
                interface IMissingNode {

                    /** MissingNode node_id */
                    node_id?: (string|null);

                    /** MissingNode error_message */
                    error_message?: (string|null);
                }

                /** Represents a MissingNode. */
                class MissingNode implements IMissingNode {

                    /**
                     * Constructs a new MissingNode.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableStatsResponse.IMissingNode);

                    /** MissingNode node_id. */
                    public node_id: string;

                    /** MissingNode error_message. */
                    public error_message: string;

                    /**
                     * Creates a new MissingNode instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MissingNode instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableStatsResponse.IMissingNode): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Encodes the specified MissingNode message. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.MissingNode.verify|verify} messages.
                     * @param message MissingNode message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableStatsResponse.IMissingNode, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MissingNode message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.MissingNode.verify|verify} messages.
                     * @param message MissingNode message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableStatsResponse.IMissingNode, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MissingNode message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MissingNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Decodes a MissingNode message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MissingNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Verifies a MissingNode message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MissingNode message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MissingNode
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Creates a plain object from a MissingNode message. Also converts values to other types if specified.
                     * @param message MissingNode
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableStatsResponse.MissingNode, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MissingNode to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a NonTableStatsRequest. */
            interface INonTableStatsRequest {
            }

            /** Represents a NonTableStatsRequest. */
            class NonTableStatsRequest implements INonTableStatsRequest {

                /**
                 * Constructs a new NonTableStatsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.INonTableStatsRequest);

                /**
                 * Creates a new NonTableStatsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NonTableStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.INonTableStatsRequest): cockroach.server.serverpb.NonTableStatsRequest;

                /**
                 * Encodes the specified NonTableStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.NonTableStatsRequest.verify|verify} messages.
                 * @param message NonTableStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.INonTableStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NonTableStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NonTableStatsRequest.verify|verify} messages.
                 * @param message NonTableStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.INonTableStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NonTableStatsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NonTableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NonTableStatsRequest;

                /**
                 * Decodes a NonTableStatsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NonTableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NonTableStatsRequest;

                /**
                 * Verifies a NonTableStatsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NonTableStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NonTableStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NonTableStatsRequest;

                /**
                 * Creates a plain object from a NonTableStatsRequest message. Also converts values to other types if specified.
                 * @param message NonTableStatsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NonTableStatsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NonTableStatsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NonTableStatsResponse. */
            interface INonTableStatsResponse {

                /** NonTableStatsResponse time_series_stats */
                time_series_stats?: (cockroach.server.serverpb.ITableStatsResponse|null);

                /** NonTableStatsResponse internal_use_stats */
                internal_use_stats?: (cockroach.server.serverpb.ITableStatsResponse|null);
            }

            /** Represents a NonTableStatsResponse. */
            class NonTableStatsResponse implements INonTableStatsResponse {

                /**
                 * Constructs a new NonTableStatsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.INonTableStatsResponse);

                /** NonTableStatsResponse time_series_stats. */
                public time_series_stats?: (cockroach.server.serverpb.ITableStatsResponse|null);

                /** NonTableStatsResponse internal_use_stats. */
                public internal_use_stats?: (cockroach.server.serverpb.ITableStatsResponse|null);

                /**
                 * Creates a new NonTableStatsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NonTableStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.INonTableStatsResponse): cockroach.server.serverpb.NonTableStatsResponse;

                /**
                 * Encodes the specified NonTableStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.NonTableStatsResponse.verify|verify} messages.
                 * @param message NonTableStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.INonTableStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NonTableStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NonTableStatsResponse.verify|verify} messages.
                 * @param message NonTableStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.INonTableStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NonTableStatsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NonTableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NonTableStatsResponse;

                /**
                 * Decodes a NonTableStatsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NonTableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NonTableStatsResponse;

                /**
                 * Verifies a NonTableStatsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NonTableStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NonTableStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NonTableStatsResponse;

                /**
                 * Creates a plain object from a NonTableStatsResponse message. Also converts values to other types if specified.
                 * @param message NonTableStatsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NonTableStatsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NonTableStatsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UsersRequest. */
            interface IUsersRequest {
            }

            /** Represents a UsersRequest. */
            class UsersRequest implements IUsersRequest {

                /**
                 * Constructs a new UsersRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUsersRequest);

                /**
                 * Creates a new UsersRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UsersRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUsersRequest): cockroach.server.serverpb.UsersRequest;

                /**
                 * Encodes the specified UsersRequest message. Does not implicitly {@link cockroach.server.serverpb.UsersRequest.verify|verify} messages.
                 * @param message UsersRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUsersRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UsersRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersRequest.verify|verify} messages.
                 * @param message UsersRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUsersRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UsersRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UsersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersRequest;

                /**
                 * Decodes a UsersRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UsersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersRequest;

                /**
                 * Verifies a UsersRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UsersRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UsersRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersRequest;

                /**
                 * Creates a plain object from a UsersRequest message. Also converts values to other types if specified.
                 * @param message UsersRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UsersRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UsersRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UsersResponse. */
            interface IUsersResponse {

                /** UsersResponse users */
                users?: (cockroach.server.serverpb.UsersResponse.IUser[]|null);
            }

            /** Represents a UsersResponse. */
            class UsersResponse implements IUsersResponse {

                /**
                 * Constructs a new UsersResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUsersResponse);

                /** UsersResponse users. */
                public users: cockroach.server.serverpb.UsersResponse.IUser[];

                /**
                 * Creates a new UsersResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UsersResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUsersResponse): cockroach.server.serverpb.UsersResponse;

                /**
                 * Encodes the specified UsersResponse message. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.verify|verify} messages.
                 * @param message UsersResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUsersResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UsersResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.verify|verify} messages.
                 * @param message UsersResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUsersResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UsersResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersResponse;

                /**
                 * Decodes a UsersResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersResponse;

                /**
                 * Verifies a UsersResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UsersResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UsersResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse;

                /**
                 * Creates a plain object from a UsersResponse message. Also converts values to other types if specified.
                 * @param message UsersResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UsersResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UsersResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace UsersResponse {

                /** Properties of a User. */
                interface IUser {

                    /** User username */
                    username?: (string|null);
                }

                /** Represents a User. */
                class User implements IUser {

                    /**
                     * Constructs a new User.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.UsersResponse.IUser);

                    /** User username. */
                    public username: string;

                    /**
                     * Creates a new User instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns User instance
                     */
                    public static create(properties?: cockroach.server.serverpb.UsersResponse.IUser): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Encodes the specified User message. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.User.verify|verify} messages.
                     * @param message User message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.UsersResponse.IUser, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.User.verify|verify} messages.
                     * @param message User message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.UsersResponse.IUser, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Verifies a User message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns User
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @param message User
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.UsersResponse.User, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this User to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an EventsRequest. */
            interface IEventsRequest {

                /** EventsRequest type */
                type?: (string|null);

                /** EventsRequest target_id */
                target_id?: (Long|null);

                /** EventsRequest limit */
                limit?: (number|null);

                /** EventsRequest unredacted_events */
                unredacted_events?: (boolean|null);
            }

            /** Represents an EventsRequest. */
            class EventsRequest implements IEventsRequest {

                /**
                 * Constructs a new EventsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEventsRequest);

                /** EventsRequest type. */
                public type: string;

                /** EventsRequest target_id. */
                public target_id: Long;

                /** EventsRequest limit. */
                public limit: number;

                /** EventsRequest unredacted_events. */
                public unredacted_events: boolean;

                /**
                 * Creates a new EventsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EventsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEventsRequest): cockroach.server.serverpb.EventsRequest;

                /**
                 * Encodes the specified EventsRequest message. Does not implicitly {@link cockroach.server.serverpb.EventsRequest.verify|verify} messages.
                 * @param message EventsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEventsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EventsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsRequest.verify|verify} messages.
                 * @param message EventsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEventsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EventsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EventsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsRequest;

                /**
                 * Decodes an EventsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EventsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsRequest;

                /**
                 * Verifies an EventsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EventsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EventsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsRequest;

                /**
                 * Creates a plain object from an EventsRequest message. Also converts values to other types if specified.
                 * @param message EventsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EventsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EventsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EventsResponse. */
            interface IEventsResponse {

                /** EventsResponse events */
                events?: (cockroach.server.serverpb.EventsResponse.IEvent[]|null);
            }

            /** Represents an EventsResponse. */
            class EventsResponse implements IEventsResponse {

                /**
                 * Constructs a new EventsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEventsResponse);

                /** EventsResponse events. */
                public events: cockroach.server.serverpb.EventsResponse.IEvent[];

                /**
                 * Creates a new EventsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EventsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEventsResponse): cockroach.server.serverpb.EventsResponse;

                /**
                 * Encodes the specified EventsResponse message. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.verify|verify} messages.
                 * @param message EventsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEventsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EventsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.verify|verify} messages.
                 * @param message EventsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEventsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EventsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EventsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsResponse;

                /**
                 * Decodes an EventsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EventsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsResponse;

                /**
                 * Verifies an EventsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EventsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EventsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse;

                /**
                 * Creates a plain object from an EventsResponse message. Also converts values to other types if specified.
                 * @param message EventsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EventsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EventsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace EventsResponse {

                /** Properties of an Event. */
                interface IEvent {

                    /** Event timestamp */
                    timestamp?: (google.protobuf.ITimestamp|null);

                    /** Event event_type */
                    event_type?: (string|null);

                    /** Event target_id */
                    target_id?: (Long|null);

                    /** Event reporting_id */
                    reporting_id?: (Long|null);

                    /** Event info */
                    info?: (string|null);

                    /** Event unique_id */
                    unique_id?: (Uint8Array|null);
                }

                /** Represents an Event. */
                class Event implements IEvent {

                    /**
                     * Constructs a new Event.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.EventsResponse.IEvent);

                    /** Event timestamp. */
                    public timestamp?: (google.protobuf.ITimestamp|null);

                    /** Event event_type. */
                    public event_type: string;

                    /** Event target_id. */
                    public target_id: Long;

                    /** Event reporting_id. */
                    public reporting_id: Long;

                    /** Event info. */
                    public info: string;

                    /** Event unique_id. */
                    public unique_id: Uint8Array;

                    /**
                     * Creates a new Event instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Event instance
                     */
                    public static create(properties?: cockroach.server.serverpb.EventsResponse.IEvent): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Encodes the specified Event message. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.Event.verify|verify} messages.
                     * @param message Event message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.EventsResponse.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Event message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.Event.verify|verify} messages.
                     * @param message Event message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.EventsResponse.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Event message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Decodes an Event message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Verifies an Event message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Event message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Event
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Creates a plain object from an Event message. Also converts values to other types if specified.
                     * @param message Event
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.EventsResponse.Event, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Event to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a SetUIDataRequest. */
            interface ISetUIDataRequest {

                /** SetUIDataRequest key_values */
                key_values?: ({ [k: string]: Uint8Array }|null);
            }

            /** Represents a SetUIDataRequest. */
            class SetUIDataRequest implements ISetUIDataRequest {

                /**
                 * Constructs a new SetUIDataRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISetUIDataRequest);

                /** SetUIDataRequest key_values. */
                public key_values: { [k: string]: Uint8Array };

                /**
                 * Creates a new SetUIDataRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SetUIDataRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISetUIDataRequest): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Encodes the specified SetUIDataRequest message. Does not implicitly {@link cockroach.server.serverpb.SetUIDataRequest.verify|verify} messages.
                 * @param message SetUIDataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISetUIDataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SetUIDataRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SetUIDataRequest.verify|verify} messages.
                 * @param message SetUIDataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISetUIDataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SetUIDataRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Decodes a SetUIDataRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Verifies a SetUIDataRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SetUIDataRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Creates a plain object from a SetUIDataRequest message. Also converts values to other types if specified.
                 * @param message SetUIDataRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SetUIDataRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SetUIDataRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SetUIDataResponse. */
            interface ISetUIDataResponse {
            }

            /** Represents a SetUIDataResponse. */
            class SetUIDataResponse implements ISetUIDataResponse {

                /**
                 * Constructs a new SetUIDataResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISetUIDataResponse);

                /**
                 * Creates a new SetUIDataResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SetUIDataResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISetUIDataResponse): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Encodes the specified SetUIDataResponse message. Does not implicitly {@link cockroach.server.serverpb.SetUIDataResponse.verify|verify} messages.
                 * @param message SetUIDataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISetUIDataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SetUIDataResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SetUIDataResponse.verify|verify} messages.
                 * @param message SetUIDataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISetUIDataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SetUIDataResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Decodes a SetUIDataResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Verifies a SetUIDataResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SetUIDataResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Creates a plain object from a SetUIDataResponse message. Also converts values to other types if specified.
                 * @param message SetUIDataResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SetUIDataResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SetUIDataResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetUIDataRequest. */
            interface IGetUIDataRequest {

                /** GetUIDataRequest keys */
                keys?: (string[]|null);
            }

            /** Represents a GetUIDataRequest. */
            class GetUIDataRequest implements IGetUIDataRequest {

                /**
                 * Constructs a new GetUIDataRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IGetUIDataRequest);

                /** GetUIDataRequest keys. */
                public keys: string[];

                /**
                 * Creates a new GetUIDataRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GetUIDataRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IGetUIDataRequest): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Encodes the specified GetUIDataRequest message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataRequest.verify|verify} messages.
                 * @param message GetUIDataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IGetUIDataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetUIDataRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataRequest.verify|verify} messages.
                 * @param message GetUIDataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IGetUIDataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetUIDataRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Decodes a GetUIDataRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Verifies a GetUIDataRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetUIDataRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Creates a plain object from a GetUIDataRequest message. Also converts values to other types if specified.
                 * @param message GetUIDataRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetUIDataRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetUIDataRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetUIDataResponse. */
            interface IGetUIDataResponse {

                /** GetUIDataResponse key_values */
                key_values?: ({ [k: string]: cockroach.server.serverpb.GetUIDataResponse.IValue }|null);
            }

            /** Represents a GetUIDataResponse. */
            class GetUIDataResponse implements IGetUIDataResponse {

                /**
                 * Constructs a new GetUIDataResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IGetUIDataResponse);

                /** GetUIDataResponse key_values. */
                public key_values: { [k: string]: cockroach.server.serverpb.GetUIDataResponse.IValue };

                /**
                 * Creates a new GetUIDataResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GetUIDataResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IGetUIDataResponse): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Encodes the specified GetUIDataResponse message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.verify|verify} messages.
                 * @param message GetUIDataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IGetUIDataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetUIDataResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.verify|verify} messages.
                 * @param message GetUIDataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IGetUIDataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetUIDataResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Decodes a GetUIDataResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Verifies a GetUIDataResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetUIDataResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Creates a plain object from a GetUIDataResponse message. Also converts values to other types if specified.
                 * @param message GetUIDataResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetUIDataResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetUIDataResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace GetUIDataResponse {

                /** Properties of a Value. */
                interface IValue {

                    /** Value value */
                    value?: (Uint8Array|null);

                    /** Value last_updated */
                    last_updated?: (google.protobuf.ITimestamp|null);
                }

                /** Represents a Value. */
                class Value implements IValue {

                    /**
                     * Constructs a new Value.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.GetUIDataResponse.IValue);

                    /** Value value. */
                    public value: Uint8Array;

                    /** Value last_updated. */
                    public last_updated?: (google.protobuf.ITimestamp|null);

                    /**
                     * Creates a new Value instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Value instance
                     */
                    public static create(properties?: cockroach.server.serverpb.GetUIDataResponse.IValue): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Encodes the specified Value message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.Value.verify|verify} messages.
                     * @param message Value message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.GetUIDataResponse.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.Value.verify|verify} messages.
                     * @param message Value message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.GetUIDataResponse.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Value message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Decodes a Value message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Verifies a Value message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Value
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Creates a plain object from a Value message. Also converts values to other types if specified.
                     * @param message Value
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.GetUIDataResponse.Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Value to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ClusterRequest. */
            interface IClusterRequest {
            }

            /** Represents a ClusterRequest. */
            class ClusterRequest implements IClusterRequest {

                /**
                 * Constructs a new ClusterRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IClusterRequest);

                /**
                 * Creates a new ClusterRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ClusterRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IClusterRequest): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Encodes the specified ClusterRequest message. Does not implicitly {@link cockroach.server.serverpb.ClusterRequest.verify|verify} messages.
                 * @param message ClusterRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IClusterRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClusterRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ClusterRequest.verify|verify} messages.
                 * @param message ClusterRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IClusterRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClusterRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ClusterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Decodes a ClusterRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ClusterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Verifies a ClusterRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ClusterRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ClusterRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Creates a plain object from a ClusterRequest message. Also converts values to other types if specified.
                 * @param message ClusterRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ClusterRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClusterRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ClusterResponse. */
            interface IClusterResponse {

                /** ClusterResponse cluster_id */
                cluster_id?: (string|null);

                /** ClusterResponse reporting_enabled */
                reporting_enabled?: (boolean|null);

                /** ClusterResponse enterprise_enabled */
                enterprise_enabled?: (boolean|null);
            }

            /** Represents a ClusterResponse. */
            class ClusterResponse implements IClusterResponse {

                /**
                 * Constructs a new ClusterResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IClusterResponse);

                /** ClusterResponse cluster_id. */
                public cluster_id: string;

                /** ClusterResponse reporting_enabled. */
                public reporting_enabled: boolean;

                /** ClusterResponse enterprise_enabled. */
                public enterprise_enabled: boolean;

                /**
                 * Creates a new ClusterResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ClusterResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IClusterResponse): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Encodes the specified ClusterResponse message. Does not implicitly {@link cockroach.server.serverpb.ClusterResponse.verify|verify} messages.
                 * @param message ClusterResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IClusterResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClusterResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ClusterResponse.verify|verify} messages.
                 * @param message ClusterResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IClusterResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClusterResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ClusterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Decodes a ClusterResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ClusterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Verifies a ClusterResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ClusterResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ClusterResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Creates a plain object from a ClusterResponse message. Also converts values to other types if specified.
                 * @param message ClusterResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ClusterResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClusterResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** DrainMode enum. */
            enum DrainMode {
                CLIENT = 0,
                LEASES = 1
            }

            /** Properties of a DrainRequest. */
            interface IDrainRequest {

                /** DrainRequest on */
                on?: (number[]|null);

                /** DrainRequest off */
                off?: (number[]|null);

                /** DrainRequest shutdown */
                shutdown?: (boolean|null);
            }

            /** Represents a DrainRequest. */
            class DrainRequest implements IDrainRequest {

                /**
                 * Constructs a new DrainRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDrainRequest);

                /** DrainRequest on. */
                public on: number[];

                /** DrainRequest off. */
                public off: number[];

                /** DrainRequest shutdown. */
                public shutdown: boolean;

                /**
                 * Creates a new DrainRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DrainRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDrainRequest): cockroach.server.serverpb.DrainRequest;

                /**
                 * Encodes the specified DrainRequest message. Does not implicitly {@link cockroach.server.serverpb.DrainRequest.verify|verify} messages.
                 * @param message DrainRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDrainRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrainRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DrainRequest.verify|verify} messages.
                 * @param message DrainRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDrainRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrainRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DrainRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DrainRequest;

                /**
                 * Decodes a DrainRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DrainRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DrainRequest;

                /**
                 * Verifies a DrainRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DrainRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DrainRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DrainRequest;

                /**
                 * Creates a plain object from a DrainRequest message. Also converts values to other types if specified.
                 * @param message DrainRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DrainRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrainRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DrainResponse. */
            interface IDrainResponse {

                /** DrainResponse on */
                on?: (number[]|null);
            }

            /** Represents a DrainResponse. */
            class DrainResponse implements IDrainResponse {

                /**
                 * Constructs a new DrainResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDrainResponse);

                /** DrainResponse on. */
                public on: number[];

                /**
                 * Creates a new DrainResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DrainResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDrainResponse): cockroach.server.serverpb.DrainResponse;

                /**
                 * Encodes the specified DrainResponse message. Does not implicitly {@link cockroach.server.serverpb.DrainResponse.verify|verify} messages.
                 * @param message DrainResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDrainResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrainResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DrainResponse.verify|verify} messages.
                 * @param message DrainResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDrainResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrainResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DrainResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DrainResponse;

                /**
                 * Decodes a DrainResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DrainResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DrainResponse;

                /**
                 * Verifies a DrainResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DrainResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DrainResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DrainResponse;

                /**
                 * Creates a plain object from a DrainResponse message. Also converts values to other types if specified.
                 * @param message DrainResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DrainResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrainResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DecommissionStatusRequest. */
            interface IDecommissionStatusRequest {

                /** DecommissionStatusRequest node_ids */
                node_ids?: (number[]|null);
            }

            /** Represents a DecommissionStatusRequest. */
            class DecommissionStatusRequest implements IDecommissionStatusRequest {

                /**
                 * Constructs a new DecommissionStatusRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDecommissionStatusRequest);

                /** DecommissionStatusRequest node_ids. */
                public node_ids: number[];

                /**
                 * Creates a new DecommissionStatusRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DecommissionStatusRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDecommissionStatusRequest): cockroach.server.serverpb.DecommissionStatusRequest;

                /**
                 * Encodes the specified DecommissionStatusRequest message. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusRequest.verify|verify} messages.
                 * @param message DecommissionStatusRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDecommissionStatusRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DecommissionStatusRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusRequest.verify|verify} messages.
                 * @param message DecommissionStatusRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDecommissionStatusRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DecommissionStatusRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DecommissionStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DecommissionStatusRequest;

                /**
                 * Decodes a DecommissionStatusRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DecommissionStatusRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DecommissionStatusRequest;

                /**
                 * Verifies a DecommissionStatusRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DecommissionStatusRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DecommissionStatusRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DecommissionStatusRequest;

                /**
                 * Creates a plain object from a DecommissionStatusRequest message. Also converts values to other types if specified.
                 * @param message DecommissionStatusRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DecommissionStatusRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DecommissionStatusRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DecommissionRequest. */
            interface IDecommissionRequest {

                /** DecommissionRequest node_ids */
                node_ids?: (number[]|null);

                /** DecommissionRequest decommissioning */
                decommissioning?: (boolean|null);
            }

            /** Represents a DecommissionRequest. */
            class DecommissionRequest implements IDecommissionRequest {

                /**
                 * Constructs a new DecommissionRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDecommissionRequest);

                /** DecommissionRequest node_ids. */
                public node_ids: number[];

                /** DecommissionRequest decommissioning. */
                public decommissioning: boolean;

                /**
                 * Creates a new DecommissionRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DecommissionRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDecommissionRequest): cockroach.server.serverpb.DecommissionRequest;

                /**
                 * Encodes the specified DecommissionRequest message. Does not implicitly {@link cockroach.server.serverpb.DecommissionRequest.verify|verify} messages.
                 * @param message DecommissionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDecommissionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DecommissionRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DecommissionRequest.verify|verify} messages.
                 * @param message DecommissionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDecommissionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DecommissionRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DecommissionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DecommissionRequest;

                /**
                 * Decodes a DecommissionRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DecommissionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DecommissionRequest;

                /**
                 * Verifies a DecommissionRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DecommissionRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DecommissionRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DecommissionRequest;

                /**
                 * Creates a plain object from a DecommissionRequest message. Also converts values to other types if specified.
                 * @param message DecommissionRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DecommissionRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DecommissionRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DecommissionStatusResponse. */
            interface IDecommissionStatusResponse {

                /** DecommissionStatusResponse status */
                status?: (cockroach.server.serverpb.DecommissionStatusResponse.IStatus[]|null);
            }

            /** Represents a DecommissionStatusResponse. */
            class DecommissionStatusResponse implements IDecommissionStatusResponse {

                /**
                 * Constructs a new DecommissionStatusResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDecommissionStatusResponse);

                /** DecommissionStatusResponse status. */
                public status: cockroach.server.serverpb.DecommissionStatusResponse.IStatus[];

                /**
                 * Creates a new DecommissionStatusResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DecommissionStatusResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDecommissionStatusResponse): cockroach.server.serverpb.DecommissionStatusResponse;

                /**
                 * Encodes the specified DecommissionStatusResponse message. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusResponse.verify|verify} messages.
                 * @param message DecommissionStatusResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDecommissionStatusResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DecommissionStatusResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusResponse.verify|verify} messages.
                 * @param message DecommissionStatusResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDecommissionStatusResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DecommissionStatusResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DecommissionStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DecommissionStatusResponse;

                /**
                 * Decodes a DecommissionStatusResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DecommissionStatusResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DecommissionStatusResponse;

                /**
                 * Verifies a DecommissionStatusResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DecommissionStatusResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DecommissionStatusResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DecommissionStatusResponse;

                /**
                 * Creates a plain object from a DecommissionStatusResponse message. Also converts values to other types if specified.
                 * @param message DecommissionStatusResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DecommissionStatusResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DecommissionStatusResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DecommissionStatusResponse {

                /** Properties of a Status. */
                interface IStatus {

                    /** Status node_id */
                    node_id?: (number|null);

                    /** Status is_live */
                    is_live?: (boolean|null);

                    /** Status replica_count */
                    replica_count?: (Long|null);

                    /** Status decommissioning */
                    decommissioning?: (boolean|null);

                    /** Status draining */
                    draining?: (boolean|null);
                }

                /** Represents a Status. */
                class Status implements IStatus {

                    /**
                     * Constructs a new Status.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DecommissionStatusResponse.IStatus);

                    /** Status node_id. */
                    public node_id: number;

                    /** Status is_live. */
                    public is_live: boolean;

                    /** Status replica_count. */
                    public replica_count: Long;

                    /** Status decommissioning. */
                    public decommissioning: boolean;

                    /** Status draining. */
                    public draining: boolean;

                    /**
                     * Creates a new Status instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Status instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DecommissionStatusResponse.IStatus): cockroach.server.serverpb.DecommissionStatusResponse.Status;

                    /**
                     * Encodes the specified Status message. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusResponse.Status.verify|verify} messages.
                     * @param message Status message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DecommissionStatusResponse.IStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Status message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DecommissionStatusResponse.Status.verify|verify} messages.
                     * @param message Status message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DecommissionStatusResponse.IStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Status message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Status
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DecommissionStatusResponse.Status;

                    /**
                     * Decodes a Status message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Status
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DecommissionStatusResponse.Status;

                    /**
                     * Verifies a Status message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Status message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Status
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DecommissionStatusResponse.Status;

                    /**
                     * Creates a plain object from a Status message. Also converts values to other types if specified.
                     * @param message Status
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DecommissionStatusResponse.Status, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Status to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a SettingsRequest. */
            interface ISettingsRequest {

                /** SettingsRequest keys */
                keys?: (string[]|null);

                /** SettingsRequest unredacted_values */
                unredacted_values?: (boolean|null);
            }

            /** Represents a SettingsRequest. */
            class SettingsRequest implements ISettingsRequest {

                /**
                 * Constructs a new SettingsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISettingsRequest);

                /** SettingsRequest keys. */
                public keys: string[];

                /** SettingsRequest unredacted_values. */
                public unredacted_values: boolean;

                /**
                 * Creates a new SettingsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SettingsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISettingsRequest): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Encodes the specified SettingsRequest message. Does not implicitly {@link cockroach.server.serverpb.SettingsRequest.verify|verify} messages.
                 * @param message SettingsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISettingsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SettingsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsRequest.verify|verify} messages.
                 * @param message SettingsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISettingsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SettingsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SettingsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Decodes a SettingsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SettingsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Verifies a SettingsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SettingsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SettingsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Creates a plain object from a SettingsRequest message. Also converts values to other types if specified.
                 * @param message SettingsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SettingsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SettingsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SettingsResponse. */
            interface ISettingsResponse {

                /** SettingsResponse key_values */
                key_values?: ({ [k: string]: cockroach.server.serverpb.SettingsResponse.IValue }|null);
            }

            /** Represents a SettingsResponse. */
            class SettingsResponse implements ISettingsResponse {

                /**
                 * Constructs a new SettingsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISettingsResponse);

                /** SettingsResponse key_values. */
                public key_values: { [k: string]: cockroach.server.serverpb.SettingsResponse.IValue };

                /**
                 * Creates a new SettingsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SettingsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISettingsResponse): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Encodes the specified SettingsResponse message. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.verify|verify} messages.
                 * @param message SettingsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISettingsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SettingsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.verify|verify} messages.
                 * @param message SettingsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISettingsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SettingsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SettingsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Decodes a SettingsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SettingsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Verifies a SettingsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SettingsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SettingsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Creates a plain object from a SettingsResponse message. Also converts values to other types if specified.
                 * @param message SettingsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SettingsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SettingsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace SettingsResponse {

                /** Properties of a Value. */
                interface IValue {

                    /** Value value */
                    value?: (string|null);

                    /** Value type */
                    type?: (string|null);

                    /** Value description */
                    description?: (string|null);

                    /** Value public */
                    "public"?: (boolean|null);
                }

                /** Represents a Value. */
                class Value implements IValue {

                    /**
                     * Constructs a new Value.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.SettingsResponse.IValue);

                    /** Value value. */
                    public value: string;

                    /** Value type. */
                    public type: string;

                    /** Value description. */
                    public description: string;

                    /** Value public. */
                    public public: boolean;

                    /**
                     * Creates a new Value instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Value instance
                     */
                    public static create(properties?: cockroach.server.serverpb.SettingsResponse.IValue): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Encodes the specified Value message. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.Value.verify|verify} messages.
                     * @param message Value message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.SettingsResponse.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.Value.verify|verify} messages.
                     * @param message Value message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.SettingsResponse.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Value message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Decodes a Value message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Verifies a Value message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Value
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Creates a plain object from a Value message. Also converts values to other types if specified.
                     * @param message Value
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.SettingsResponse.Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Value to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a HealthRequest. */
            interface IHealthRequest {
            }

            /** Represents a HealthRequest. */
            class HealthRequest implements IHealthRequest {

                /**
                 * Constructs a new HealthRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IHealthRequest);

                /**
                 * Creates a new HealthRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HealthRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IHealthRequest): cockroach.server.serverpb.HealthRequest;

                /**
                 * Encodes the specified HealthRequest message. Does not implicitly {@link cockroach.server.serverpb.HealthRequest.verify|verify} messages.
                 * @param message HealthRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IHealthRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HealthRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HealthRequest.verify|verify} messages.
                 * @param message HealthRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IHealthRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HealthRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HealthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HealthRequest;

                /**
                 * Decodes a HealthRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HealthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HealthRequest;

                /**
                 * Verifies a HealthRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HealthRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HealthRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HealthRequest;

                /**
                 * Creates a plain object from a HealthRequest message. Also converts values to other types if specified.
                 * @param message HealthRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HealthRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HealthResponse. */
            interface IHealthResponse {
            }

            /** Represents a HealthResponse. */
            class HealthResponse implements IHealthResponse {

                /**
                 * Constructs a new HealthResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IHealthResponse);

                /**
                 * Creates a new HealthResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HealthResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IHealthResponse): cockroach.server.serverpb.HealthResponse;

                /**
                 * Encodes the specified HealthResponse message. Does not implicitly {@link cockroach.server.serverpb.HealthResponse.verify|verify} messages.
                 * @param message HealthResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IHealthResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HealthResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HealthResponse.verify|verify} messages.
                 * @param message HealthResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IHealthResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HealthResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HealthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HealthResponse;

                /**
                 * Decodes a HealthResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HealthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HealthResponse;

                /**
                 * Verifies a HealthResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HealthResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HealthResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HealthResponse;

                /**
                 * Creates a plain object from a HealthResponse message. Also converts values to other types if specified.
                 * @param message HealthResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HealthResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LivenessRequest. */
            interface ILivenessRequest {
            }

            /** Represents a LivenessRequest. */
            class LivenessRequest implements ILivenessRequest {

                /**
                 * Constructs a new LivenessRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILivenessRequest);

                /**
                 * Creates a new LivenessRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LivenessRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILivenessRequest): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Encodes the specified LivenessRequest message. Does not implicitly {@link cockroach.server.serverpb.LivenessRequest.verify|verify} messages.
                 * @param message LivenessRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILivenessRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LivenessRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LivenessRequest.verify|verify} messages.
                 * @param message LivenessRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILivenessRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LivenessRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LivenessRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Decodes a LivenessRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LivenessRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Verifies a LivenessRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LivenessRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LivenessRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Creates a plain object from a LivenessRequest message. Also converts values to other types if specified.
                 * @param message LivenessRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LivenessRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LivenessRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LivenessResponse. */
            interface ILivenessResponse {

                /** LivenessResponse livenesses */
                livenesses?: (cockroach.storage.ILiveness[]|null);

                /** LivenessResponse statuses */
                statuses?: ({ [k: string]: cockroach.storage.NodeLivenessStatus }|null);
            }

            /** Represents a LivenessResponse. */
            class LivenessResponse implements ILivenessResponse {

                /**
                 * Constructs a new LivenessResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILivenessResponse);

                /** LivenessResponse livenesses. */
                public livenesses: cockroach.storage.ILiveness[];

                /** LivenessResponse statuses. */
                public statuses: { [k: string]: cockroach.storage.NodeLivenessStatus };

                /**
                 * Creates a new LivenessResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LivenessResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILivenessResponse): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Encodes the specified LivenessResponse message. Does not implicitly {@link cockroach.server.serverpb.LivenessResponse.verify|verify} messages.
                 * @param message LivenessResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILivenessResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LivenessResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LivenessResponse.verify|verify} messages.
                 * @param message LivenessResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILivenessResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LivenessResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LivenessResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Decodes a LivenessResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LivenessResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Verifies a LivenessResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LivenessResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LivenessResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Creates a plain object from a LivenessResponse message. Also converts values to other types if specified.
                 * @param message LivenessResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LivenessResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LivenessResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a JobsRequest. */
            interface IJobsRequest {

                /** JobsRequest limit */
                limit?: (number|null);

                /** JobsRequest status */
                status?: (string|null);

                /** JobsRequest type */
                type?: (cockroach.sql.jobs.jobspb.Type|null);
            }

            /** Represents a JobsRequest. */
            class JobsRequest implements IJobsRequest {

                /**
                 * Constructs a new JobsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IJobsRequest);

                /** JobsRequest limit. */
                public limit: number;

                /** JobsRequest status. */
                public status: string;

                /** JobsRequest type. */
                public type: cockroach.sql.jobs.jobspb.Type;

                /**
                 * Creates a new JobsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns JobsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IJobsRequest): cockroach.server.serverpb.JobsRequest;

                /**
                 * Encodes the specified JobsRequest message. Does not implicitly {@link cockroach.server.serverpb.JobsRequest.verify|verify} messages.
                 * @param message JobsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IJobsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified JobsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.JobsRequest.verify|verify} messages.
                 * @param message JobsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IJobsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a JobsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns JobsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.JobsRequest;

                /**
                 * Decodes a JobsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns JobsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.JobsRequest;

                /**
                 * Verifies a JobsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a JobsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns JobsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.JobsRequest;

                /**
                 * Creates a plain object from a JobsRequest message. Also converts values to other types if specified.
                 * @param message JobsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.JobsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this JobsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a JobsResponse. */
            interface IJobsResponse {

                /** JobsResponse jobs */
                jobs?: (cockroach.server.serverpb.JobsResponse.IJob[]|null);
            }

            /** Represents a JobsResponse. */
            class JobsResponse implements IJobsResponse {

                /**
                 * Constructs a new JobsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IJobsResponse);

                /** JobsResponse jobs. */
                public jobs: cockroach.server.serverpb.JobsResponse.IJob[];

                /**
                 * Creates a new JobsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns JobsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IJobsResponse): cockroach.server.serverpb.JobsResponse;

                /**
                 * Encodes the specified JobsResponse message. Does not implicitly {@link cockroach.server.serverpb.JobsResponse.verify|verify} messages.
                 * @param message JobsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IJobsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified JobsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.JobsResponse.verify|verify} messages.
                 * @param message JobsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IJobsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a JobsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns JobsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.JobsResponse;

                /**
                 * Decodes a JobsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns JobsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.JobsResponse;

                /**
                 * Verifies a JobsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a JobsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns JobsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.JobsResponse;

                /**
                 * Creates a plain object from a JobsResponse message. Also converts values to other types if specified.
                 * @param message JobsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.JobsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this JobsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace JobsResponse {

                /** Properties of a Job. */
                interface IJob {

                    /** Job id */
                    id?: (Long|null);

                    /** Job type */
                    type?: (string|null);

                    /** Job description */
                    description?: (string|null);

                    /** Job statement */
                    statement?: (string|null);

                    /** Job username */
                    username?: (string|null);

                    /** Job descriptor_ids */
                    descriptor_ids?: (number[]|null);

                    /** Job status */
                    status?: (string|null);

                    /** Job created */
                    created?: (google.protobuf.ITimestamp|null);

                    /** Job started */
                    started?: (google.protobuf.ITimestamp|null);

                    /** Job finished */
                    finished?: (google.protobuf.ITimestamp|null);

                    /** Job modified */
                    modified?: (google.protobuf.ITimestamp|null);

                    /** Job fraction_completed */
                    fraction_completed?: (number|null);

                    /** Job error */
                    error?: (string|null);

                    /** Job highwater_timestamp */
                    highwater_timestamp?: (google.protobuf.ITimestamp|null);

                    /** Job highwater_decimal */
                    highwater_decimal?: (string|null);

                    /** Job running_status */
                    running_status?: (string|null);
                }

                /** Represents a Job. */
                class Job implements IJob {

                    /**
                     * Constructs a new Job.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.JobsResponse.IJob);

                    /** Job id. */
                    public id: Long;

                    /** Job type. */
                    public type: string;

                    /** Job description. */
                    public description: string;

                    /** Job statement. */
                    public statement: string;

                    /** Job username. */
                    public username: string;

                    /** Job descriptor_ids. */
                    public descriptor_ids: number[];

                    /** Job status. */
                    public status: string;

                    /** Job created. */
                    public created?: (google.protobuf.ITimestamp|null);

                    /** Job started. */
                    public started?: (google.protobuf.ITimestamp|null);

                    /** Job finished. */
                    public finished?: (google.protobuf.ITimestamp|null);

                    /** Job modified. */
                    public modified?: (google.protobuf.ITimestamp|null);

                    /** Job fraction_completed. */
                    public fraction_completed: number;

                    /** Job error. */
                    public error: string;

                    /** Job highwater_timestamp. */
                    public highwater_timestamp?: (google.protobuf.ITimestamp|null);

                    /** Job highwater_decimal. */
                    public highwater_decimal: string;

                    /** Job running_status. */
                    public running_status: string;

                    /**
                     * Creates a new Job instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Job instance
                     */
                    public static create(properties?: cockroach.server.serverpb.JobsResponse.IJob): cockroach.server.serverpb.JobsResponse.Job;

                    /**
                     * Encodes the specified Job message. Does not implicitly {@link cockroach.server.serverpb.JobsResponse.Job.verify|verify} messages.
                     * @param message Job message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.JobsResponse.IJob, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Job message, length delimited. Does not implicitly {@link cockroach.server.serverpb.JobsResponse.Job.verify|verify} messages.
                     * @param message Job message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.JobsResponse.IJob, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Job message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Job
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.JobsResponse.Job;

                    /**
                     * Decodes a Job message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Job
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.JobsResponse.Job;

                    /**
                     * Verifies a Job message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Job message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Job
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.JobsResponse.Job;

                    /**
                     * Creates a plain object from a Job message. Also converts values to other types if specified.
                     * @param message Job
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.JobsResponse.Job, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Job to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a LocationsRequest. */
            interface ILocationsRequest {
            }

            /** Represents a LocationsRequest. */
            class LocationsRequest implements ILocationsRequest {

                /**
                 * Constructs a new LocationsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILocationsRequest);

                /**
                 * Creates a new LocationsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LocationsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILocationsRequest): cockroach.server.serverpb.LocationsRequest;

                /**
                 * Encodes the specified LocationsRequest message. Does not implicitly {@link cockroach.server.serverpb.LocationsRequest.verify|verify} messages.
                 * @param message LocationsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILocationsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LocationsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LocationsRequest.verify|verify} messages.
                 * @param message LocationsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILocationsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LocationsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LocationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LocationsRequest;

                /**
                 * Decodes a LocationsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LocationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LocationsRequest;

                /**
                 * Verifies a LocationsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LocationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LocationsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LocationsRequest;

                /**
                 * Creates a plain object from a LocationsRequest message. Also converts values to other types if specified.
                 * @param message LocationsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LocationsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LocationsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LocationsResponse. */
            interface ILocationsResponse {

                /** LocationsResponse locations */
                locations?: (cockroach.server.serverpb.LocationsResponse.ILocation[]|null);
            }

            /** Represents a LocationsResponse. */
            class LocationsResponse implements ILocationsResponse {

                /**
                 * Constructs a new LocationsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILocationsResponse);

                /** LocationsResponse locations. */
                public locations: cockroach.server.serverpb.LocationsResponse.ILocation[];

                /**
                 * Creates a new LocationsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LocationsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILocationsResponse): cockroach.server.serverpb.LocationsResponse;

                /**
                 * Encodes the specified LocationsResponse message. Does not implicitly {@link cockroach.server.serverpb.LocationsResponse.verify|verify} messages.
                 * @param message LocationsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILocationsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LocationsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LocationsResponse.verify|verify} messages.
                 * @param message LocationsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILocationsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LocationsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LocationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LocationsResponse;

                /**
                 * Decodes a LocationsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LocationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LocationsResponse;

                /**
                 * Verifies a LocationsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LocationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LocationsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LocationsResponse;

                /**
                 * Creates a plain object from a LocationsResponse message. Also converts values to other types if specified.
                 * @param message LocationsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LocationsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LocationsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace LocationsResponse {

                /** Properties of a Location. */
                interface ILocation {

                    /** Location locality_key */
                    locality_key?: (string|null);

                    /** Location locality_value */
                    locality_value?: (string|null);

                    /** Location latitude */
                    latitude?: (number|null);

                    /** Location longitude */
                    longitude?: (number|null);
                }

                /** Represents a Location. */
                class Location implements ILocation {

                    /**
                     * Constructs a new Location.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.LocationsResponse.ILocation);

                    /** Location locality_key. */
                    public locality_key: string;

                    /** Location locality_value. */
                    public locality_value: string;

                    /** Location latitude. */
                    public latitude: number;

                    /** Location longitude. */
                    public longitude: number;

                    /**
                     * Creates a new Location instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Location instance
                     */
                    public static create(properties?: cockroach.server.serverpb.LocationsResponse.ILocation): cockroach.server.serverpb.LocationsResponse.Location;

                    /**
                     * Encodes the specified Location message. Does not implicitly {@link cockroach.server.serverpb.LocationsResponse.Location.verify|verify} messages.
                     * @param message Location message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.LocationsResponse.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LocationsResponse.Location.verify|verify} messages.
                     * @param message Location message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.LocationsResponse.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LocationsResponse.Location;

                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LocationsResponse.Location;

                    /**
                     * Verifies a Location message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Location
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LocationsResponse.Location;

                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @param message Location
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.LocationsResponse.Location, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Location to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a RangeLogRequest. */
            interface IRangeLogRequest {

                /** RangeLogRequest range_id */
                range_id?: (Long|null);

                /** RangeLogRequest limit */
                limit?: (number|null);
            }

            /** Represents a RangeLogRequest. */
            class RangeLogRequest implements IRangeLogRequest {

                /**
                 * Constructs a new RangeLogRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeLogRequest);

                /** RangeLogRequest range_id. */
                public range_id: Long;

                /** RangeLogRequest limit. */
                public limit: number;

                /**
                 * Creates a new RangeLogRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeLogRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeLogRequest): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Encodes the specified RangeLogRequest message. Does not implicitly {@link cockroach.server.serverpb.RangeLogRequest.verify|verify} messages.
                 * @param message RangeLogRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeLogRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeLogRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogRequest.verify|verify} messages.
                 * @param message RangeLogRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeLogRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeLogRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeLogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Decodes a RangeLogRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeLogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Verifies a RangeLogRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeLogRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeLogRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Creates a plain object from a RangeLogRequest message. Also converts values to other types if specified.
                 * @param message RangeLogRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeLogRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeLogRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangeLogResponse. */
            interface IRangeLogResponse {

                /** RangeLogResponse events */
                events?: (cockroach.server.serverpb.RangeLogResponse.IEvent[]|null);
            }

            /** Represents a RangeLogResponse. */
            class RangeLogResponse implements IRangeLogResponse {

                /**
                 * Constructs a new RangeLogResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeLogResponse);

                /** RangeLogResponse events. */
                public events: cockroach.server.serverpb.RangeLogResponse.IEvent[];

                /**
                 * Creates a new RangeLogResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeLogResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeLogResponse): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Encodes the specified RangeLogResponse message. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.verify|verify} messages.
                 * @param message RangeLogResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeLogResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeLogResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.verify|verify} messages.
                 * @param message RangeLogResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeLogResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeLogResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeLogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Decodes a RangeLogResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeLogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Verifies a RangeLogResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeLogResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeLogResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Creates a plain object from a RangeLogResponse message. Also converts values to other types if specified.
                 * @param message RangeLogResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeLogResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeLogResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace RangeLogResponse {

                /** Properties of a PrettyInfo. */
                interface IPrettyInfo {

                    /** PrettyInfo updated_desc */
                    updated_desc?: (string|null);

                    /** PrettyInfo new_desc */
                    new_desc?: (string|null);

                    /** PrettyInfo added_replica */
                    added_replica?: (string|null);

                    /** PrettyInfo removed_replica */
                    removed_replica?: (string|null);

                    /** PrettyInfo reason */
                    reason?: (string|null);

                    /** PrettyInfo details */
                    details?: (string|null);
                }

                /** Represents a PrettyInfo. */
                class PrettyInfo implements IPrettyInfo {

                    /**
                     * Constructs a new PrettyInfo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.RangeLogResponse.IPrettyInfo);

                    /** PrettyInfo updated_desc. */
                    public updated_desc: string;

                    /** PrettyInfo new_desc. */
                    public new_desc: string;

                    /** PrettyInfo added_replica. */
                    public added_replica: string;

                    /** PrettyInfo removed_replica. */
                    public removed_replica: string;

                    /** PrettyInfo reason. */
                    public reason: string;

                    /** PrettyInfo details. */
                    public details: string;

                    /**
                     * Creates a new PrettyInfo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns PrettyInfo instance
                     */
                    public static create(properties?: cockroach.server.serverpb.RangeLogResponse.IPrettyInfo): cockroach.server.serverpb.RangeLogResponse.PrettyInfo;

                    /**
                     * Encodes the specified PrettyInfo message. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.PrettyInfo.verify|verify} messages.
                     * @param message PrettyInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.RangeLogResponse.IPrettyInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified PrettyInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.PrettyInfo.verify|verify} messages.
                     * @param message PrettyInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.RangeLogResponse.IPrettyInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a PrettyInfo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns PrettyInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogResponse.PrettyInfo;

                    /**
                     * Decodes a PrettyInfo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns PrettyInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogResponse.PrettyInfo;

                    /**
                     * Verifies a PrettyInfo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a PrettyInfo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns PrettyInfo
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogResponse.PrettyInfo;

                    /**
                     * Creates a plain object from a PrettyInfo message. Also converts values to other types if specified.
                     * @param message PrettyInfo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.RangeLogResponse.PrettyInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this PrettyInfo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an Event. */
                interface IEvent {

                    /** Event event */
                    event?: (cockroach.storage.IRangeLogEvent|null);

                    /** Event pretty_info */
                    pretty_info?: (cockroach.server.serverpb.RangeLogResponse.IPrettyInfo|null);
                }

                /** Represents an Event. */
                class Event implements IEvent {

                    /**
                     * Constructs a new Event.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.RangeLogResponse.IEvent);

                    /** Event event. */
                    public event?: (cockroach.storage.IRangeLogEvent|null);

                    /** Event pretty_info. */
                    public pretty_info?: (cockroach.server.serverpb.RangeLogResponse.IPrettyInfo|null);

                    /**
                     * Creates a new Event instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Event instance
                     */
                    public static create(properties?: cockroach.server.serverpb.RangeLogResponse.IEvent): cockroach.server.serverpb.RangeLogResponse.Event;

                    /**
                     * Encodes the specified Event message. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.Event.verify|verify} messages.
                     * @param message Event message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.RangeLogResponse.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Event message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.Event.verify|verify} messages.
                     * @param message Event message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.RangeLogResponse.IEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Event message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogResponse.Event;

                    /**
                     * Decodes an Event message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogResponse.Event;

                    /**
                     * Verifies an Event message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Event message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Event
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogResponse.Event;

                    /**
                     * Creates a plain object from an Event message. Also converts values to other types if specified.
                     * @param message Event
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.RangeLogResponse.Event, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Event to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a QueryPlanRequest. */
            interface IQueryPlanRequest {

                /** QueryPlanRequest query */
                query?: (string|null);
            }

            /** Represents a QueryPlanRequest. */
            class QueryPlanRequest implements IQueryPlanRequest {

                /**
                 * Constructs a new QueryPlanRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IQueryPlanRequest);

                /** QueryPlanRequest query. */
                public query: string;

                /**
                 * Creates a new QueryPlanRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns QueryPlanRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IQueryPlanRequest): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Encodes the specified QueryPlanRequest message. Does not implicitly {@link cockroach.server.serverpb.QueryPlanRequest.verify|verify} messages.
                 * @param message QueryPlanRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IQueryPlanRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified QueryPlanRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.QueryPlanRequest.verify|verify} messages.
                 * @param message QueryPlanRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IQueryPlanRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a QueryPlanRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns QueryPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Decodes a QueryPlanRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns QueryPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Verifies a QueryPlanRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a QueryPlanRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns QueryPlanRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Creates a plain object from a QueryPlanRequest message. Also converts values to other types if specified.
                 * @param message QueryPlanRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.QueryPlanRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this QueryPlanRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a QueryPlanResponse. */
            interface IQueryPlanResponse {

                /** QueryPlanResponse distsql_physical_query_plan */
                distsql_physical_query_plan?: (string|null);
            }

            /** Represents a QueryPlanResponse. */
            class QueryPlanResponse implements IQueryPlanResponse {

                /**
                 * Constructs a new QueryPlanResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IQueryPlanResponse);

                /** QueryPlanResponse distsql_physical_query_plan. */
                public distsql_physical_query_plan: string;

                /**
                 * Creates a new QueryPlanResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns QueryPlanResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IQueryPlanResponse): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Encodes the specified QueryPlanResponse message. Does not implicitly {@link cockroach.server.serverpb.QueryPlanResponse.verify|verify} messages.
                 * @param message QueryPlanResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IQueryPlanResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified QueryPlanResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.QueryPlanResponse.verify|verify} messages.
                 * @param message QueryPlanResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IQueryPlanResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a QueryPlanResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns QueryPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Decodes a QueryPlanResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns QueryPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Verifies a QueryPlanResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a QueryPlanResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns QueryPlanResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Creates a plain object from a QueryPlanResponse message. Also converts values to other types if specified.
                 * @param message QueryPlanResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.QueryPlanResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this QueryPlanResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DataDistributionRequest. */
            interface IDataDistributionRequest {
            }

            /** Represents a DataDistributionRequest. */
            class DataDistributionRequest implements IDataDistributionRequest {

                /**
                 * Constructs a new DataDistributionRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDataDistributionRequest);

                /**
                 * Creates a new DataDistributionRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DataDistributionRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDataDistributionRequest): cockroach.server.serverpb.DataDistributionRequest;

                /**
                 * Encodes the specified DataDistributionRequest message. Does not implicitly {@link cockroach.server.serverpb.DataDistributionRequest.verify|verify} messages.
                 * @param message DataDistributionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDataDistributionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DataDistributionRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DataDistributionRequest.verify|verify} messages.
                 * @param message DataDistributionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDataDistributionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DataDistributionRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DataDistributionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DataDistributionRequest;

                /**
                 * Decodes a DataDistributionRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DataDistributionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DataDistributionRequest;

                /**
                 * Verifies a DataDistributionRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DataDistributionRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DataDistributionRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DataDistributionRequest;

                /**
                 * Creates a plain object from a DataDistributionRequest message. Also converts values to other types if specified.
                 * @param message DataDistributionRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DataDistributionRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DataDistributionRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DataDistributionResponse. */
            interface IDataDistributionResponse {

                /** DataDistributionResponse database_info */
                database_info?: ({ [k: string]: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo }|null);

                /** DataDistributionResponse zone_configs */
                zone_configs?: ({ [k: string]: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig }|null);
            }

            /** Represents a DataDistributionResponse. */
            class DataDistributionResponse implements IDataDistributionResponse {

                /**
                 * Constructs a new DataDistributionResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDataDistributionResponse);

                /** DataDistributionResponse database_info. */
                public database_info: { [k: string]: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo };

                /** DataDistributionResponse zone_configs. */
                public zone_configs: { [k: string]: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig };

                /**
                 * Creates a new DataDistributionResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DataDistributionResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDataDistributionResponse): cockroach.server.serverpb.DataDistributionResponse;

                /**
                 * Encodes the specified DataDistributionResponse message. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.verify|verify} messages.
                 * @param message DataDistributionResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDataDistributionResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DataDistributionResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.verify|verify} messages.
                 * @param message DataDistributionResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDataDistributionResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DataDistributionResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DataDistributionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DataDistributionResponse;

                /**
                 * Decodes a DataDistributionResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DataDistributionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DataDistributionResponse;

                /**
                 * Verifies a DataDistributionResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DataDistributionResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DataDistributionResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DataDistributionResponse;

                /**
                 * Creates a plain object from a DataDistributionResponse message. Also converts values to other types if specified.
                 * @param message DataDistributionResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DataDistributionResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DataDistributionResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DataDistributionResponse {

                /** Properties of a ZoneConfig. */
                interface IZoneConfig {

                    /** ZoneConfig target */
                    target?: (string|null);

                    /** ZoneConfig config */
                    config?: (cockroach.config.zonepb.IZoneConfig|null);

                    /** ZoneConfig config_sql */
                    config_sql?: (string|null);
                }

                /** Represents a ZoneConfig. */
                class ZoneConfig implements IZoneConfig {

                    /**
                     * Constructs a new ZoneConfig.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig);

                    /** ZoneConfig target. */
                    public target: string;

                    /** ZoneConfig config. */
                    public config?: (cockroach.config.zonepb.IZoneConfig|null);

                    /** ZoneConfig config_sql. */
                    public config_sql: string;

                    /**
                     * Creates a new ZoneConfig instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ZoneConfig instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig): cockroach.server.serverpb.DataDistributionResponse.ZoneConfig;

                    /**
                     * Encodes the specified ZoneConfig message. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.ZoneConfig.verify|verify} messages.
                     * @param message ZoneConfig message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ZoneConfig message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.ZoneConfig.verify|verify} messages.
                     * @param message ZoneConfig message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DataDistributionResponse.IZoneConfig, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ZoneConfig message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ZoneConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DataDistributionResponse.ZoneConfig;

                    /**
                     * Decodes a ZoneConfig message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ZoneConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DataDistributionResponse.ZoneConfig;

                    /**
                     * Verifies a ZoneConfig message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ZoneConfig message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ZoneConfig
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DataDistributionResponse.ZoneConfig;

                    /**
                     * Creates a plain object from a ZoneConfig message. Also converts values to other types if specified.
                     * @param message ZoneConfig
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DataDistributionResponse.ZoneConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ZoneConfig to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TableInfo. */
                interface ITableInfo {

                    /** TableInfo replica_count_by_node_id */
                    replica_count_by_node_id?: ({ [k: string]: Long }|null);

                    /** TableInfo zone_config_id */
                    zone_config_id?: (Long|null);

                    /** TableInfo dropped_at */
                    dropped_at?: (google.protobuf.ITimestamp|null);
                }

                /** Represents a TableInfo. */
                class TableInfo implements ITableInfo {

                    /**
                     * Constructs a new TableInfo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DataDistributionResponse.ITableInfo);

                    /** TableInfo replica_count_by_node_id. */
                    public replica_count_by_node_id: { [k: string]: Long };

                    /** TableInfo zone_config_id. */
                    public zone_config_id: Long;

                    /** TableInfo dropped_at. */
                    public dropped_at?: (google.protobuf.ITimestamp|null);

                    /**
                     * Creates a new TableInfo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TableInfo instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DataDistributionResponse.ITableInfo): cockroach.server.serverpb.DataDistributionResponse.TableInfo;

                    /**
                     * Encodes the specified TableInfo message. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.TableInfo.verify|verify} messages.
                     * @param message TableInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DataDistributionResponse.ITableInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TableInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.TableInfo.verify|verify} messages.
                     * @param message TableInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DataDistributionResponse.ITableInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TableInfo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TableInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DataDistributionResponse.TableInfo;

                    /**
                     * Decodes a TableInfo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TableInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DataDistributionResponse.TableInfo;

                    /**
                     * Verifies a TableInfo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TableInfo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TableInfo
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DataDistributionResponse.TableInfo;

                    /**
                     * Creates a plain object from a TableInfo message. Also converts values to other types if specified.
                     * @param message TableInfo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DataDistributionResponse.TableInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TableInfo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a DatabaseInfo. */
                interface IDatabaseInfo {

                    /** DatabaseInfo table_info */
                    table_info?: ({ [k: string]: cockroach.server.serverpb.DataDistributionResponse.ITableInfo }|null);
                }

                /** Represents a DatabaseInfo. */
                class DatabaseInfo implements IDatabaseInfo {

                    /**
                     * Constructs a new DatabaseInfo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo);

                    /** DatabaseInfo table_info. */
                    public table_info: { [k: string]: cockroach.server.serverpb.DataDistributionResponse.ITableInfo };

                    /**
                     * Creates a new DatabaseInfo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns DatabaseInfo instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo): cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo;

                    /**
                     * Encodes the specified DatabaseInfo message. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo.verify|verify} messages.
                     * @param message DatabaseInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified DatabaseInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo.verify|verify} messages.
                     * @param message DatabaseInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DataDistributionResponse.IDatabaseInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a DatabaseInfo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns DatabaseInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo;

                    /**
                     * Decodes a DatabaseInfo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns DatabaseInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo;

                    /**
                     * Verifies a DatabaseInfo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a DatabaseInfo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns DatabaseInfo
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo;

                    /**
                     * Creates a plain object from a DatabaseInfo message. Also converts values to other types if specified.
                     * @param message DatabaseInfo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DataDistributionResponse.DatabaseInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this DatabaseInfo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a MetricMetadataRequest. */
            interface IMetricMetadataRequest {
            }

            /** Represents a MetricMetadataRequest. */
            class MetricMetadataRequest implements IMetricMetadataRequest {

                /**
                 * Constructs a new MetricMetadataRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IMetricMetadataRequest);

                /**
                 * Creates a new MetricMetadataRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MetricMetadataRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IMetricMetadataRequest): cockroach.server.serverpb.MetricMetadataRequest;

                /**
                 * Encodes the specified MetricMetadataRequest message. Does not implicitly {@link cockroach.server.serverpb.MetricMetadataRequest.verify|verify} messages.
                 * @param message MetricMetadataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IMetricMetadataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MetricMetadataRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.MetricMetadataRequest.verify|verify} messages.
                 * @param message MetricMetadataRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IMetricMetadataRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MetricMetadataRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MetricMetadataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.MetricMetadataRequest;

                /**
                 * Decodes a MetricMetadataRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MetricMetadataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.MetricMetadataRequest;

                /**
                 * Verifies a MetricMetadataRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MetricMetadataRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MetricMetadataRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.MetricMetadataRequest;

                /**
                 * Creates a plain object from a MetricMetadataRequest message. Also converts values to other types if specified.
                 * @param message MetricMetadataRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.MetricMetadataRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetricMetadataRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MetricMetadataResponse. */
            interface IMetricMetadataResponse {

                /** MetricMetadataResponse metadata */
                metadata?: ({ [k: string]: cockroach.util.metric.IMetadata }|null);
            }

            /** Represents a MetricMetadataResponse. */
            class MetricMetadataResponse implements IMetricMetadataResponse {

                /**
                 * Constructs a new MetricMetadataResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IMetricMetadataResponse);

                /** MetricMetadataResponse metadata. */
                public metadata: { [k: string]: cockroach.util.metric.IMetadata };

                /**
                 * Creates a new MetricMetadataResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MetricMetadataResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IMetricMetadataResponse): cockroach.server.serverpb.MetricMetadataResponse;

                /**
                 * Encodes the specified MetricMetadataResponse message. Does not implicitly {@link cockroach.server.serverpb.MetricMetadataResponse.verify|verify} messages.
                 * @param message MetricMetadataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IMetricMetadataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MetricMetadataResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.MetricMetadataResponse.verify|verify} messages.
                 * @param message MetricMetadataResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IMetricMetadataResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MetricMetadataResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MetricMetadataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.MetricMetadataResponse;

                /**
                 * Decodes a MetricMetadataResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MetricMetadataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.MetricMetadataResponse;

                /**
                 * Verifies a MetricMetadataResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MetricMetadataResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MetricMetadataResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.MetricMetadataResponse;

                /**
                 * Creates a plain object from a MetricMetadataResponse message. Also converts values to other types if specified.
                 * @param message MetricMetadataResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.MetricMetadataResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetricMetadataResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EnqueueRangeRequest. */
            interface IEnqueueRangeRequest {

                /** EnqueueRangeRequest node_id */
                node_id?: (number|null);

                /** EnqueueRangeRequest queue */
                queue?: (string|null);

                /** EnqueueRangeRequest range_id */
                range_id?: (number|null);

                /** EnqueueRangeRequest skip_should_queue */
                skip_should_queue?: (boolean|null);
            }

            /** Represents an EnqueueRangeRequest. */
            class EnqueueRangeRequest implements IEnqueueRangeRequest {

                /**
                 * Constructs a new EnqueueRangeRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEnqueueRangeRequest);

                /** EnqueueRangeRequest node_id. */
                public node_id: number;

                /** EnqueueRangeRequest queue. */
                public queue: string;

                /** EnqueueRangeRequest range_id. */
                public range_id: number;

                /** EnqueueRangeRequest skip_should_queue. */
                public skip_should_queue: boolean;

                /**
                 * Creates a new EnqueueRangeRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EnqueueRangeRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEnqueueRangeRequest): cockroach.server.serverpb.EnqueueRangeRequest;

                /**
                 * Encodes the specified EnqueueRangeRequest message. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeRequest.verify|verify} messages.
                 * @param message EnqueueRangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEnqueueRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EnqueueRangeRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeRequest.verify|verify} messages.
                 * @param message EnqueueRangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEnqueueRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EnqueueRangeRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EnqueueRangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EnqueueRangeRequest;

                /**
                 * Decodes an EnqueueRangeRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EnqueueRangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EnqueueRangeRequest;

                /**
                 * Verifies an EnqueueRangeRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EnqueueRangeRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EnqueueRangeRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EnqueueRangeRequest;

                /**
                 * Creates a plain object from an EnqueueRangeRequest message. Also converts values to other types if specified.
                 * @param message EnqueueRangeRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EnqueueRangeRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EnqueueRangeRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EnqueueRangeResponse. */
            interface IEnqueueRangeResponse {

                /** EnqueueRangeResponse details */
                details?: (cockroach.server.serverpb.EnqueueRangeResponse.IDetails[]|null);
            }

            /** Represents an EnqueueRangeResponse. */
            class EnqueueRangeResponse implements IEnqueueRangeResponse {

                /**
                 * Constructs a new EnqueueRangeResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEnqueueRangeResponse);

                /** EnqueueRangeResponse details. */
                public details: cockroach.server.serverpb.EnqueueRangeResponse.IDetails[];

                /**
                 * Creates a new EnqueueRangeResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EnqueueRangeResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEnqueueRangeResponse): cockroach.server.serverpb.EnqueueRangeResponse;

                /**
                 * Encodes the specified EnqueueRangeResponse message. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeResponse.verify|verify} messages.
                 * @param message EnqueueRangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEnqueueRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EnqueueRangeResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeResponse.verify|verify} messages.
                 * @param message EnqueueRangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEnqueueRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EnqueueRangeResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EnqueueRangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EnqueueRangeResponse;

                /**
                 * Decodes an EnqueueRangeResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EnqueueRangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EnqueueRangeResponse;

                /**
                 * Verifies an EnqueueRangeResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EnqueueRangeResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EnqueueRangeResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EnqueueRangeResponse;

                /**
                 * Creates a plain object from an EnqueueRangeResponse message. Also converts values to other types if specified.
                 * @param message EnqueueRangeResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EnqueueRangeResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EnqueueRangeResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace EnqueueRangeResponse {

                /** Properties of a Details. */
                interface IDetails {

                    /** Details node_id */
                    node_id?: (number|null);

                    /** Details events */
                    events?: (cockroach.server.serverpb.ITraceEvent[]|null);

                    /** Details error */
                    error?: (string|null);
                }

                /** Represents a Details. */
                class Details implements IDetails {

                    /**
                     * Constructs a new Details.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.EnqueueRangeResponse.IDetails);

                    /** Details node_id. */
                    public node_id: number;

                    /** Details events. */
                    public events: cockroach.server.serverpb.ITraceEvent[];

                    /** Details error. */
                    public error: string;

                    /**
                     * Creates a new Details instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Details instance
                     */
                    public static create(properties?: cockroach.server.serverpb.EnqueueRangeResponse.IDetails): cockroach.server.serverpb.EnqueueRangeResponse.Details;

                    /**
                     * Encodes the specified Details message. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeResponse.Details.verify|verify} messages.
                     * @param message Details message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.EnqueueRangeResponse.IDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Details message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EnqueueRangeResponse.Details.verify|verify} messages.
                     * @param message Details message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.EnqueueRangeResponse.IDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Details message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EnqueueRangeResponse.Details;

                    /**
                     * Decodes a Details message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Details
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EnqueueRangeResponse.Details;

                    /**
                     * Verifies a Details message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Details message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Details
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EnqueueRangeResponse.Details;

                    /**
                     * Creates a plain object from a Details message. Also converts values to other types if specified.
                     * @param message Details
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.EnqueueRangeResponse.Details, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Details to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a ChartCatalogRequest. */
            interface IChartCatalogRequest {
            }

            /** Represents a ChartCatalogRequest. */
            class ChartCatalogRequest implements IChartCatalogRequest {

                /**
                 * Constructs a new ChartCatalogRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IChartCatalogRequest);

                /**
                 * Creates a new ChartCatalogRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ChartCatalogRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IChartCatalogRequest): cockroach.server.serverpb.ChartCatalogRequest;

                /**
                 * Encodes the specified ChartCatalogRequest message. Does not implicitly {@link cockroach.server.serverpb.ChartCatalogRequest.verify|verify} messages.
                 * @param message ChartCatalogRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IChartCatalogRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ChartCatalogRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ChartCatalogRequest.verify|verify} messages.
                 * @param message ChartCatalogRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IChartCatalogRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ChartCatalogRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ChartCatalogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ChartCatalogRequest;

                /**
                 * Decodes a ChartCatalogRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ChartCatalogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ChartCatalogRequest;

                /**
                 * Verifies a ChartCatalogRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ChartCatalogRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ChartCatalogRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ChartCatalogRequest;

                /**
                 * Creates a plain object from a ChartCatalogRequest message. Also converts values to other types if specified.
                 * @param message ChartCatalogRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ChartCatalogRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ChartCatalogRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ChartCatalogResponse. */
            interface IChartCatalogResponse {

                /** ChartCatalogResponse catalog */
                catalog?: (cockroach.ts.catalog.IChartSection[]|null);
            }

            /** Represents a ChartCatalogResponse. */
            class ChartCatalogResponse implements IChartCatalogResponse {

                /**
                 * Constructs a new ChartCatalogResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IChartCatalogResponse);

                /** ChartCatalogResponse catalog. */
                public catalog: cockroach.ts.catalog.IChartSection[];

                /**
                 * Creates a new ChartCatalogResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ChartCatalogResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IChartCatalogResponse): cockroach.server.serverpb.ChartCatalogResponse;

                /**
                 * Encodes the specified ChartCatalogResponse message. Does not implicitly {@link cockroach.server.serverpb.ChartCatalogResponse.verify|verify} messages.
                 * @param message ChartCatalogResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IChartCatalogResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ChartCatalogResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ChartCatalogResponse.verify|verify} messages.
                 * @param message ChartCatalogResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IChartCatalogResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ChartCatalogResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ChartCatalogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ChartCatalogResponse;

                /**
                 * Decodes a ChartCatalogResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ChartCatalogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ChartCatalogResponse;

                /**
                 * Verifies a ChartCatalogResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ChartCatalogResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ChartCatalogResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ChartCatalogResponse;

                /**
                 * Creates a plain object from a ChartCatalogResponse message. Also converts values to other types if specified.
                 * @param message ChartCatalogResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ChartCatalogResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ChartCatalogResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Represents an Admin */
            class Admin extends $protobuf.rpc.Service {

                /**
                 * Constructs a new Admin service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new Admin service using the specified rpc implementation.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 * @returns RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Admin;

                /**
                 * Calls Users.
                 * @param request UsersRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UsersResponse
                 */
                public users(request: cockroach.server.serverpb.IUsersRequest, callback: cockroach.server.serverpb.Admin.UsersCallback): void;

                /**
                 * Calls Users.
                 * @param request UsersRequest message or plain object
                 * @returns Promise
                 */
                public users(request: cockroach.server.serverpb.IUsersRequest): Promise<cockroach.server.serverpb.UsersResponse>;

                /**
                 * Calls Databases.
                 * @param request DatabasesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DatabasesResponse
                 */
                public databases(request: cockroach.server.serverpb.IDatabasesRequest, callback: cockroach.server.serverpb.Admin.DatabasesCallback): void;

                /**
                 * Calls Databases.
                 * @param request DatabasesRequest message or plain object
                 * @returns Promise
                 */
                public databases(request: cockroach.server.serverpb.IDatabasesRequest): Promise<cockroach.server.serverpb.DatabasesResponse>;

                /**
                 * Calls DatabaseDetails.
                 * @param request DatabaseDetailsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DatabaseDetailsResponse
                 */
                public databaseDetails(request: cockroach.server.serverpb.IDatabaseDetailsRequest, callback: cockroach.server.serverpb.Admin.DatabaseDetailsCallback): void;

                /**
                 * Calls DatabaseDetails.
                 * @param request DatabaseDetailsRequest message or plain object
                 * @returns Promise
                 */
                public databaseDetails(request: cockroach.server.serverpb.IDatabaseDetailsRequest): Promise<cockroach.server.serverpb.DatabaseDetailsResponse>;

                /**
                 * Calls TableDetails.
                 * @param request TableDetailsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and TableDetailsResponse
                 */
                public tableDetails(request: cockroach.server.serverpb.ITableDetailsRequest, callback: cockroach.server.serverpb.Admin.TableDetailsCallback): void;

                /**
                 * Calls TableDetails.
                 * @param request TableDetailsRequest message or plain object
                 * @returns Promise
                 */
                public tableDetails(request: cockroach.server.serverpb.ITableDetailsRequest): Promise<cockroach.server.serverpb.TableDetailsResponse>;

                /**
                 * Calls TableStats.
                 * @param request TableStatsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and TableStatsResponse
                 */
                public tableStats(request: cockroach.server.serverpb.ITableStatsRequest, callback: cockroach.server.serverpb.Admin.TableStatsCallback): void;

                /**
                 * Calls TableStats.
                 * @param request TableStatsRequest message or plain object
                 * @returns Promise
                 */
                public tableStats(request: cockroach.server.serverpb.ITableStatsRequest): Promise<cockroach.server.serverpb.TableStatsResponse>;

                /**
                 * Calls NonTableStats.
                 * @param request NonTableStatsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and NonTableStatsResponse
                 */
                public nonTableStats(request: cockroach.server.serverpb.INonTableStatsRequest, callback: cockroach.server.serverpb.Admin.NonTableStatsCallback): void;

                /**
                 * Calls NonTableStats.
                 * @param request NonTableStatsRequest message or plain object
                 * @returns Promise
                 */
                public nonTableStats(request: cockroach.server.serverpb.INonTableStatsRequest): Promise<cockroach.server.serverpb.NonTableStatsResponse>;

                /**
                 * Calls Events.
                 * @param request EventsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and EventsResponse
                 */
                public events(request: cockroach.server.serverpb.IEventsRequest, callback: cockroach.server.serverpb.Admin.EventsCallback): void;

                /**
                 * Calls Events.
                 * @param request EventsRequest message or plain object
                 * @returns Promise
                 */
                public events(request: cockroach.server.serverpb.IEventsRequest): Promise<cockroach.server.serverpb.EventsResponse>;

                /**
                 * Calls SetUIData.
                 * @param request SetUIDataRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and SetUIDataResponse
                 */
                public setUIData(request: cockroach.server.serverpb.ISetUIDataRequest, callback: cockroach.server.serverpb.Admin.SetUIDataCallback): void;

                /**
                 * Calls SetUIData.
                 * @param request SetUIDataRequest message or plain object
                 * @returns Promise
                 */
                public setUIData(request: cockroach.server.serverpb.ISetUIDataRequest): Promise<cockroach.server.serverpb.SetUIDataResponse>;

                /**
                 * Calls GetUIData.
                 * @param request GetUIDataRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and GetUIDataResponse
                 */
                public getUIData(request: cockroach.server.serverpb.IGetUIDataRequest, callback: cockroach.server.serverpb.Admin.GetUIDataCallback): void;

                /**
                 * Calls GetUIData.
                 * @param request GetUIDataRequest message or plain object
                 * @returns Promise
                 */
                public getUIData(request: cockroach.server.serverpb.IGetUIDataRequest): Promise<cockroach.server.serverpb.GetUIDataResponse>;

                /**
                 * Calls Cluster.
                 * @param request ClusterRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ClusterResponse
                 */
                public cluster(request: cockroach.server.serverpb.IClusterRequest, callback: cockroach.server.serverpb.Admin.ClusterCallback): void;

                /**
                 * Calls Cluster.
                 * @param request ClusterRequest message or plain object
                 * @returns Promise
                 */
                public cluster(request: cockroach.server.serverpb.IClusterRequest): Promise<cockroach.server.serverpb.ClusterResponse>;

                /**
                 * Calls Settings.
                 * @param request SettingsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and SettingsResponse
                 */
                public settings(request: cockroach.server.serverpb.ISettingsRequest, callback: cockroach.server.serverpb.Admin.SettingsCallback): void;

                /**
                 * Calls Settings.
                 * @param request SettingsRequest message or plain object
                 * @returns Promise
                 */
                public settings(request: cockroach.server.serverpb.ISettingsRequest): Promise<cockroach.server.serverpb.SettingsResponse>;

                /**
                 * Calls Health.
                 * @param request HealthRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and HealthResponse
                 */
                public health(request: cockroach.server.serverpb.IHealthRequest, callback: cockroach.server.serverpb.Admin.HealthCallback): void;

                /**
                 * Calls Health.
                 * @param request HealthRequest message or plain object
                 * @returns Promise
                 */
                public health(request: cockroach.server.serverpb.IHealthRequest): Promise<cockroach.server.serverpb.HealthResponse>;

                /**
                 * Calls Liveness.
                 * @param request LivenessRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LivenessResponse
                 */
                public liveness(request: cockroach.server.serverpb.ILivenessRequest, callback: cockroach.server.serverpb.Admin.LivenessCallback): void;

                /**
                 * Calls Liveness.
                 * @param request LivenessRequest message or plain object
                 * @returns Promise
                 */
                public liveness(request: cockroach.server.serverpb.ILivenessRequest): Promise<cockroach.server.serverpb.LivenessResponse>;

                /**
                 * Calls Jobs.
                 * @param request JobsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and JobsResponse
                 */
                public jobs(request: cockroach.server.serverpb.IJobsRequest, callback: cockroach.server.serverpb.Admin.JobsCallback): void;

                /**
                 * Calls Jobs.
                 * @param request JobsRequest message or plain object
                 * @returns Promise
                 */
                public jobs(request: cockroach.server.serverpb.IJobsRequest): Promise<cockroach.server.serverpb.JobsResponse>;

                /**
                 * Calls Locations.
                 * @param request LocationsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LocationsResponse
                 */
                public locations(request: cockroach.server.serverpb.ILocationsRequest, callback: cockroach.server.serverpb.Admin.LocationsCallback): void;

                /**
                 * Calls Locations.
                 * @param request LocationsRequest message or plain object
                 * @returns Promise
                 */
                public locations(request: cockroach.server.serverpb.ILocationsRequest): Promise<cockroach.server.serverpb.LocationsResponse>;

                /**
                 * Calls QueryPlan.
                 * @param request QueryPlanRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and QueryPlanResponse
                 */
                public queryPlan(request: cockroach.server.serverpb.IQueryPlanRequest, callback: cockroach.server.serverpb.Admin.QueryPlanCallback): void;

                /**
                 * Calls QueryPlan.
                 * @param request QueryPlanRequest message or plain object
                 * @returns Promise
                 */
                public queryPlan(request: cockroach.server.serverpb.IQueryPlanRequest): Promise<cockroach.server.serverpb.QueryPlanResponse>;

                /**
                 * Calls Drain.
                 * @param request DrainRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DrainResponse
                 */
                public drain(request: cockroach.server.serverpb.IDrainRequest, callback: cockroach.server.serverpb.Admin.DrainCallback): void;

                /**
                 * Calls Drain.
                 * @param request DrainRequest message or plain object
                 * @returns Promise
                 */
                public drain(request: cockroach.server.serverpb.IDrainRequest): Promise<cockroach.server.serverpb.DrainResponse>;

                /**
                 * Calls Decommission.
                 * @param request DecommissionRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DecommissionStatusResponse
                 */
                public decommission(request: cockroach.server.serverpb.IDecommissionRequest, callback: cockroach.server.serverpb.Admin.DecommissionCallback): void;

                /**
                 * Calls Decommission.
                 * @param request DecommissionRequest message or plain object
                 * @returns Promise
                 */
                public decommission(request: cockroach.server.serverpb.IDecommissionRequest): Promise<cockroach.server.serverpb.DecommissionStatusResponse>;

                /**
                 * Calls DecommissionStatus.
                 * @param request DecommissionStatusRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DecommissionStatusResponse
                 */
                public decommissionStatus(request: cockroach.server.serverpb.IDecommissionStatusRequest, callback: cockroach.server.serverpb.Admin.DecommissionStatusCallback): void;

                /**
                 * Calls DecommissionStatus.
                 * @param request DecommissionStatusRequest message or plain object
                 * @returns Promise
                 */
                public decommissionStatus(request: cockroach.server.serverpb.IDecommissionStatusRequest): Promise<cockroach.server.serverpb.DecommissionStatusResponse>;

                /**
                 * Calls RangeLog.
                 * @param request RangeLogRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and RangeLogResponse
                 */
                public rangeLog(request: cockroach.server.serverpb.IRangeLogRequest, callback: cockroach.server.serverpb.Admin.RangeLogCallback): void;

                /**
                 * Calls RangeLog.
                 * @param request RangeLogRequest message or plain object
                 * @returns Promise
                 */
                public rangeLog(request: cockroach.server.serverpb.IRangeLogRequest): Promise<cockroach.server.serverpb.RangeLogResponse>;

                /**
                 * Calls DataDistribution.
                 * @param request DataDistributionRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DataDistributionResponse
                 */
                public dataDistribution(request: cockroach.server.serverpb.IDataDistributionRequest, callback: cockroach.server.serverpb.Admin.DataDistributionCallback): void;

                /**
                 * Calls DataDistribution.
                 * @param request DataDistributionRequest message or plain object
                 * @returns Promise
                 */
                public dataDistribution(request: cockroach.server.serverpb.IDataDistributionRequest): Promise<cockroach.server.serverpb.DataDistributionResponse>;

                /**
                 * Calls AllMetricMetadata.
                 * @param request MetricMetadataRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and MetricMetadataResponse
                 */
                public allMetricMetadata(request: cockroach.server.serverpb.IMetricMetadataRequest, callback: cockroach.server.serverpb.Admin.AllMetricMetadataCallback): void;

                /**
                 * Calls AllMetricMetadata.
                 * @param request MetricMetadataRequest message or plain object
                 * @returns Promise
                 */
                public allMetricMetadata(request: cockroach.server.serverpb.IMetricMetadataRequest): Promise<cockroach.server.serverpb.MetricMetadataResponse>;

                /**
                 * Calls ChartCatalog.
                 * @param request ChartCatalogRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ChartCatalogResponse
                 */
                public chartCatalog(request: cockroach.server.serverpb.IChartCatalogRequest, callback: cockroach.server.serverpb.Admin.ChartCatalogCallback): void;

                /**
                 * Calls ChartCatalog.
                 * @param request ChartCatalogRequest message or plain object
                 * @returns Promise
                 */
                public chartCatalog(request: cockroach.server.serverpb.IChartCatalogRequest): Promise<cockroach.server.serverpb.ChartCatalogResponse>;

                /**
                 * Calls EnqueueRange.
                 * @param request EnqueueRangeRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and EnqueueRangeResponse
                 */
                public enqueueRange(request: cockroach.server.serverpb.IEnqueueRangeRequest, callback: cockroach.server.serverpb.Admin.EnqueueRangeCallback): void;

                /**
                 * Calls EnqueueRange.
                 * @param request EnqueueRangeRequest message or plain object
                 * @returns Promise
                 */
                public enqueueRange(request: cockroach.server.serverpb.IEnqueueRangeRequest): Promise<cockroach.server.serverpb.EnqueueRangeResponse>;
            }

            namespace Admin {

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#users}.
                 * @param error Error, if any
                 * @param [response] UsersResponse
                 */
                type UsersCallback = (error: (Error|null), response?: cockroach.server.serverpb.UsersResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#databases}.
                 * @param error Error, if any
                 * @param [response] DatabasesResponse
                 */
                type DatabasesCallback = (error: (Error|null), response?: cockroach.server.serverpb.DatabasesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#databaseDetails}.
                 * @param error Error, if any
                 * @param [response] DatabaseDetailsResponse
                 */
                type DatabaseDetailsCallback = (error: (Error|null), response?: cockroach.server.serverpb.DatabaseDetailsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#tableDetails}.
                 * @param error Error, if any
                 * @param [response] TableDetailsResponse
                 */
                type TableDetailsCallback = (error: (Error|null), response?: cockroach.server.serverpb.TableDetailsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#tableStats}.
                 * @param error Error, if any
                 * @param [response] TableStatsResponse
                 */
                type TableStatsCallback = (error: (Error|null), response?: cockroach.server.serverpb.TableStatsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#nonTableStats}.
                 * @param error Error, if any
                 * @param [response] NonTableStatsResponse
                 */
                type NonTableStatsCallback = (error: (Error|null), response?: cockroach.server.serverpb.NonTableStatsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#events}.
                 * @param error Error, if any
                 * @param [response] EventsResponse
                 */
                type EventsCallback = (error: (Error|null), response?: cockroach.server.serverpb.EventsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#setUIData}.
                 * @param error Error, if any
                 * @param [response] SetUIDataResponse
                 */
                type SetUIDataCallback = (error: (Error|null), response?: cockroach.server.serverpb.SetUIDataResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#getUIData}.
                 * @param error Error, if any
                 * @param [response] GetUIDataResponse
                 */
                type GetUIDataCallback = (error: (Error|null), response?: cockroach.server.serverpb.GetUIDataResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#cluster}.
                 * @param error Error, if any
                 * @param [response] ClusterResponse
                 */
                type ClusterCallback = (error: (Error|null), response?: cockroach.server.serverpb.ClusterResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#settings}.
                 * @param error Error, if any
                 * @param [response] SettingsResponse
                 */
                type SettingsCallback = (error: (Error|null), response?: cockroach.server.serverpb.SettingsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#health}.
                 * @param error Error, if any
                 * @param [response] HealthResponse
                 */
                type HealthCallback = (error: (Error|null), response?: cockroach.server.serverpb.HealthResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#liveness}.
                 * @param error Error, if any
                 * @param [response] LivenessResponse
                 */
                type LivenessCallback = (error: (Error|null), response?: cockroach.server.serverpb.LivenessResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#jobs}.
                 * @param error Error, if any
                 * @param [response] JobsResponse
                 */
                type JobsCallback = (error: (Error|null), response?: cockroach.server.serverpb.JobsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#locations}.
                 * @param error Error, if any
                 * @param [response] LocationsResponse
                 */
                type LocationsCallback = (error: (Error|null), response?: cockroach.server.serverpb.LocationsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#queryPlan}.
                 * @param error Error, if any
                 * @param [response] QueryPlanResponse
                 */
                type QueryPlanCallback = (error: (Error|null), response?: cockroach.server.serverpb.QueryPlanResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#drain}.
                 * @param error Error, if any
                 * @param [response] DrainResponse
                 */
                type DrainCallback = (error: (Error|null), response?: cockroach.server.serverpb.DrainResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#decommission}.
                 * @param error Error, if any
                 * @param [response] DecommissionStatusResponse
                 */
                type DecommissionCallback = (error: (Error|null), response?: cockroach.server.serverpb.DecommissionStatusResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#decommissionStatus}.
                 * @param error Error, if any
                 * @param [response] DecommissionStatusResponse
                 */
                type DecommissionStatusCallback = (error: (Error|null), response?: cockroach.server.serverpb.DecommissionStatusResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#rangeLog}.
                 * @param error Error, if any
                 * @param [response] RangeLogResponse
                 */
                type RangeLogCallback = (error: (Error|null), response?: cockroach.server.serverpb.RangeLogResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#dataDistribution}.
                 * @param error Error, if any
                 * @param [response] DataDistributionResponse
                 */
                type DataDistributionCallback = (error: (Error|null), response?: cockroach.server.serverpb.DataDistributionResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#allMetricMetadata}.
                 * @param error Error, if any
                 * @param [response] MetricMetadataResponse
                 */
                type AllMetricMetadataCallback = (error: (Error|null), response?: cockroach.server.serverpb.MetricMetadataResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#chartCatalog}.
                 * @param error Error, if any
                 * @param [response] ChartCatalogResponse
                 */
                type ChartCatalogCallback = (error: (Error|null), response?: cockroach.server.serverpb.ChartCatalogResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Admin#enqueueRange}.
                 * @param error Error, if any
                 * @param [response] EnqueueRangeResponse
                 */
                type EnqueueRangeCallback = (error: (Error|null), response?: cockroach.server.serverpb.EnqueueRangeResponse) => void;
            }

            /** Properties of a CertificatesRequest. */
            interface ICertificatesRequest {

                /** CertificatesRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a CertificatesRequest. */
            class CertificatesRequest implements ICertificatesRequest {

                /**
                 * Constructs a new CertificatesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICertificatesRequest);

                /** CertificatesRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new CertificatesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CertificatesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICertificatesRequest): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Encodes the specified CertificatesRequest message. Does not implicitly {@link cockroach.server.serverpb.CertificatesRequest.verify|verify} messages.
                 * @param message CertificatesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICertificatesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificatesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificatesRequest.verify|verify} messages.
                 * @param message CertificatesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICertificatesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificatesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CertificatesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Decodes a CertificatesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CertificatesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Verifies a CertificatesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CertificatesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CertificatesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Creates a plain object from a CertificatesRequest message. Also converts values to other types if specified.
                 * @param message CertificatesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificatesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificatesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CertificateDetails. */
            interface ICertificateDetails {

                /** CertificateDetails type */
                type?: (cockroach.server.serverpb.CertificateDetails.CertificateType|null);

                /** CertificateDetails error_message */
                error_message?: (string|null);

                /** CertificateDetails data */
                data?: (Uint8Array|null);

                /** CertificateDetails fields */
                fields?: (cockroach.server.serverpb.CertificateDetails.IFields[]|null);
            }

            /** Represents a CertificateDetails. */
            class CertificateDetails implements ICertificateDetails {

                /**
                 * Constructs a new CertificateDetails.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICertificateDetails);

                /** CertificateDetails type. */
                public type: cockroach.server.serverpb.CertificateDetails.CertificateType;

                /** CertificateDetails error_message. */
                public error_message: string;

                /** CertificateDetails data. */
                public data: Uint8Array;

                /** CertificateDetails fields. */
                public fields: cockroach.server.serverpb.CertificateDetails.IFields[];

                /**
                 * Creates a new CertificateDetails instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CertificateDetails instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICertificateDetails): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Encodes the specified CertificateDetails message. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.verify|verify} messages.
                 * @param message CertificateDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICertificateDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificateDetails message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.verify|verify} messages.
                 * @param message CertificateDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICertificateDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificateDetails message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CertificateDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Decodes a CertificateDetails message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CertificateDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Verifies a CertificateDetails message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CertificateDetails message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CertificateDetails
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Creates a plain object from a CertificateDetails message. Also converts values to other types if specified.
                 * @param message CertificateDetails
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificateDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificateDetails to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace CertificateDetails {

                /** CertificateType enum. */
                enum CertificateType {
                    CA = 0,
                    NODE = 1,
                    CLIENT_CA = 2,
                    CLIENT = 3,
                    UI_CA = 4,
                    UI = 5
                }

                /** Properties of a Fields. */
                interface IFields {

                    /** Fields issuer */
                    issuer?: (string|null);

                    /** Fields subject */
                    subject?: (string|null);

                    /** Fields valid_from */
                    valid_from?: (Long|null);

                    /** Fields valid_until */
                    valid_until?: (Long|null);

                    /** Fields addresses */
                    addresses?: (string[]|null);

                    /** Fields signature_algorithm */
                    signature_algorithm?: (string|null);

                    /** Fields public_key */
                    public_key?: (string|null);

                    /** Fields key_usage */
                    key_usage?: (string[]|null);

                    /** Fields extended_key_usage */
                    extended_key_usage?: (string[]|null);
                }

                /** Represents a Fields. */
                class Fields implements IFields {

                    /**
                     * Constructs a new Fields.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.CertificateDetails.IFields);

                    /** Fields issuer. */
                    public issuer: string;

                    /** Fields subject. */
                    public subject: string;

                    /** Fields valid_from. */
                    public valid_from: Long;

                    /** Fields valid_until. */
                    public valid_until: Long;

                    /** Fields addresses. */
                    public addresses: string[];

                    /** Fields signature_algorithm. */
                    public signature_algorithm: string;

                    /** Fields public_key. */
                    public public_key: string;

                    /** Fields key_usage. */
                    public key_usage: string[];

                    /** Fields extended_key_usage. */
                    public extended_key_usage: string[];

                    /**
                     * Creates a new Fields instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Fields instance
                     */
                    public static create(properties?: cockroach.server.serverpb.CertificateDetails.IFields): cockroach.server.serverpb.CertificateDetails.Fields;

                    /**
                     * Encodes the specified Fields message. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.CertificateDetails.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Fields message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.Fields.verify|verify} messages.
                     * @param message Fields message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.CertificateDetails.IFields, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Fields message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificateDetails.Fields;

                    /**
                     * Decodes a Fields message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Fields
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificateDetails.Fields;

                    /**
                     * Verifies a Fields message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Fields
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificateDetails.Fields;

                    /**
                     * Creates a plain object from a Fields message. Also converts values to other types if specified.
                     * @param message Fields
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.CertificateDetails.Fields, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Fields to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a CertificatesResponse. */
            interface ICertificatesResponse {

                /** CertificatesResponse certificates */
                certificates?: (cockroach.server.serverpb.ICertificateDetails[]|null);
            }

            /** Represents a CertificatesResponse. */
            class CertificatesResponse implements ICertificatesResponse {

                /**
                 * Constructs a new CertificatesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICertificatesResponse);

                /** CertificatesResponse certificates. */
                public certificates: cockroach.server.serverpb.ICertificateDetails[];

                /**
                 * Creates a new CertificatesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CertificatesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICertificatesResponse): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Encodes the specified CertificatesResponse message. Does not implicitly {@link cockroach.server.serverpb.CertificatesResponse.verify|verify} messages.
                 * @param message CertificatesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICertificatesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificatesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificatesResponse.verify|verify} messages.
                 * @param message CertificatesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICertificatesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificatesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CertificatesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Decodes a CertificatesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CertificatesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Verifies a CertificatesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CertificatesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CertificatesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Creates a plain object from a CertificatesResponse message. Also converts values to other types if specified.
                 * @param message CertificatesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificatesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificatesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DetailsRequest. */
            interface IDetailsRequest {

                /** DetailsRequest node_id */
                node_id?: (string|null);

                /** DetailsRequest ready */
                ready?: (boolean|null);
            }

            /** Represents a DetailsRequest. */
            class DetailsRequest implements IDetailsRequest {

                /**
                 * Constructs a new DetailsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDetailsRequest);

                /** DetailsRequest node_id. */
                public node_id: string;

                /** DetailsRequest ready. */
                public ready: boolean;

                /**
                 * Creates a new DetailsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDetailsRequest): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Encodes the specified DetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.DetailsRequest.verify|verify} messages.
                 * @param message DetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DetailsRequest.verify|verify} messages.
                 * @param message DetailsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDetailsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DetailsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Decodes a DetailsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Verifies a DetailsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Creates a plain object from a DetailsRequest message. Also converts values to other types if specified.
                 * @param message DetailsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DetailsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DetailsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SystemInfo. */
            interface ISystemInfo {

                /** SystemInfo system_info */
                system_info?: (string|null);

                /** SystemInfo kernel_info */
                kernel_info?: (string|null);
            }

            /** Represents a SystemInfo. */
            class SystemInfo implements ISystemInfo {

                /**
                 * Constructs a new SystemInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISystemInfo);

                /** SystemInfo system_info. */
                public system_info: string;

                /** SystemInfo kernel_info. */
                public kernel_info: string;

                /**
                 * Creates a new SystemInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SystemInfo instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISystemInfo): cockroach.server.serverpb.SystemInfo;

                /**
                 * Encodes the specified SystemInfo message. Does not implicitly {@link cockroach.server.serverpb.SystemInfo.verify|verify} messages.
                 * @param message SystemInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISystemInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SystemInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SystemInfo.verify|verify} messages.
                 * @param message SystemInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISystemInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SystemInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SystemInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SystemInfo;

                /**
                 * Decodes a SystemInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SystemInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SystemInfo;

                /**
                 * Verifies a SystemInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SystemInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SystemInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SystemInfo;

                /**
                 * Creates a plain object from a SystemInfo message. Also converts values to other types if specified.
                 * @param message SystemInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SystemInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SystemInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DetailsResponse. */
            interface IDetailsResponse {

                /** DetailsResponse node_id */
                node_id?: (number|null);

                /** DetailsResponse address */
                address?: (cockroach.util.IUnresolvedAddr|null);

                /** DetailsResponse build_info */
                build_info?: (cockroach.build.IInfo|null);

                /** DetailsResponse system_info */
                system_info?: (cockroach.server.serverpb.ISystemInfo|null);

                /** DetailsResponse sql_address */
                sql_address?: (cockroach.util.IUnresolvedAddr|null);
            }

            /** Represents a DetailsResponse. */
            class DetailsResponse implements IDetailsResponse {

                /**
                 * Constructs a new DetailsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDetailsResponse);

                /** DetailsResponse node_id. */
                public node_id: number;

                /** DetailsResponse address. */
                public address?: (cockroach.util.IUnresolvedAddr|null);

                /** DetailsResponse build_info. */
                public build_info?: (cockroach.build.IInfo|null);

                /** DetailsResponse system_info. */
                public system_info?: (cockroach.server.serverpb.ISystemInfo|null);

                /** DetailsResponse sql_address. */
                public sql_address?: (cockroach.util.IUnresolvedAddr|null);

                /**
                 * Creates a new DetailsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDetailsResponse): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Encodes the specified DetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.DetailsResponse.verify|verify} messages.
                 * @param message DetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DetailsResponse.verify|verify} messages.
                 * @param message DetailsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDetailsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DetailsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Decodes a DetailsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Verifies a DetailsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Creates a plain object from a DetailsResponse message. Also converts values to other types if specified.
                 * @param message DetailsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DetailsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DetailsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NodesRequest. */
            interface INodesRequest {
            }

            /** Represents a NodesRequest. */
            class NodesRequest implements INodesRequest {

                /**
                 * Constructs a new NodesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.INodesRequest);

                /**
                 * Creates a new NodesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NodesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.INodesRequest): cockroach.server.serverpb.NodesRequest;

                /**
                 * Encodes the specified NodesRequest message. Does not implicitly {@link cockroach.server.serverpb.NodesRequest.verify|verify} messages.
                 * @param message NodesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.INodesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodesRequest.verify|verify} messages.
                 * @param message NodesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.INodesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodesRequest;

                /**
                 * Decodes a NodesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodesRequest;

                /**
                 * Verifies a NodesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NodesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NodesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodesRequest;

                /**
                 * Creates a plain object from a NodesRequest message. Also converts values to other types if specified.
                 * @param message NodesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NodesResponse. */
            interface INodesResponse {

                /** NodesResponse nodes */
                nodes?: (cockroach.server.status.statuspb.INodeStatus[]|null);

                /** NodesResponse liveness_by_node_id */
                liveness_by_node_id?: ({ [k: string]: cockroach.storage.NodeLivenessStatus }|null);
            }

            /** Represents a NodesResponse. */
            class NodesResponse implements INodesResponse {

                /**
                 * Constructs a new NodesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.INodesResponse);

                /** NodesResponse nodes. */
                public nodes: cockroach.server.status.statuspb.INodeStatus[];

                /** NodesResponse liveness_by_node_id. */
                public liveness_by_node_id: { [k: string]: cockroach.storage.NodeLivenessStatus };

                /**
                 * Creates a new NodesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NodesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.INodesResponse): cockroach.server.serverpb.NodesResponse;

                /**
                 * Encodes the specified NodesResponse message. Does not implicitly {@link cockroach.server.serverpb.NodesResponse.verify|verify} messages.
                 * @param message NodesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.INodesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodesResponse.verify|verify} messages.
                 * @param message NodesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.INodesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodesResponse;

                /**
                 * Decodes a NodesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodesResponse;

                /**
                 * Verifies a NodesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NodesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NodesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodesResponse;

                /**
                 * Creates a plain object from a NodesResponse message. Also converts values to other types if specified.
                 * @param message NodesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NodeRequest. */
            interface INodeRequest {

                /** NodeRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a NodeRequest. */
            class NodeRequest implements INodeRequest {

                /**
                 * Constructs a new NodeRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.INodeRequest);

                /** NodeRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new NodeRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NodeRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.INodeRequest): cockroach.server.serverpb.NodeRequest;

                /**
                 * Encodes the specified NodeRequest message. Does not implicitly {@link cockroach.server.serverpb.NodeRequest.verify|verify} messages.
                 * @param message NodeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.INodeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodeRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodeRequest.verify|verify} messages.
                 * @param message NodeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.INodeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodeRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodeRequest;

                /**
                 * Decodes a NodeRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodeRequest;

                /**
                 * Verifies a NodeRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NodeRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NodeRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodeRequest;

                /**
                 * Creates a plain object from a NodeRequest message. Also converts values to other types if specified.
                 * @param message NodeRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodeRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodeRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftState. */
            interface IRaftState {

                /** RaftState replica_id */
                replica_id?: (Long|null);

                /** RaftState hard_state */
                hard_state?: (raftpb.IHardState|null);

                /** RaftState lead */
                lead?: (Long|null);

                /** RaftState state */
                state?: (string|null);

                /** RaftState applied */
                applied?: (Long|null);

                /** RaftState progress */
                progress?: ({ [k: string]: cockroach.server.serverpb.RaftState.IProgress }|null);

                /** RaftState lead_transferee */
                lead_transferee?: (Long|null);
            }

            /** Represents a RaftState. */
            class RaftState implements IRaftState {

                /**
                 * Constructs a new RaftState.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftState);

                /** RaftState replica_id. */
                public replica_id: Long;

                /** RaftState hard_state. */
                public hard_state?: (raftpb.IHardState|null);

                /** RaftState lead. */
                public lead: Long;

                /** RaftState state. */
                public state: string;

                /** RaftState applied. */
                public applied: Long;

                /** RaftState progress. */
                public progress: { [k: string]: cockroach.server.serverpb.RaftState.IProgress };

                /** RaftState lead_transferee. */
                public lead_transferee: Long;

                /**
                 * Creates a new RaftState instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftState instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftState): cockroach.server.serverpb.RaftState;

                /**
                 * Encodes the specified RaftState message. Does not implicitly {@link cockroach.server.serverpb.RaftState.verify|verify} messages.
                 * @param message RaftState message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftState, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftState message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftState.verify|verify} messages.
                 * @param message RaftState message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftState, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftState message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftState;

                /**
                 * Decodes a RaftState message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftState;

                /**
                 * Verifies a RaftState message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftState message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftState
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftState;

                /**
                 * Creates a plain object from a RaftState message. Also converts values to other types if specified.
                 * @param message RaftState
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftState, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftState to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace RaftState {

                /** Properties of a Progress. */
                interface IProgress {

                    /** Progress match */
                    match?: (Long|null);

                    /** Progress next */
                    next?: (Long|null);

                    /** Progress state */
                    state?: (string|null);

                    /** Progress paused */
                    paused?: (boolean|null);

                    /** Progress pending_snapshot */
                    pending_snapshot?: (Long|null);
                }

                /** Represents a Progress. */
                class Progress implements IProgress {

                    /**
                     * Constructs a new Progress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.RaftState.IProgress);

                    /** Progress match. */
                    public match: Long;

                    /** Progress next. */
                    public next: Long;

                    /** Progress state. */
                    public state: string;

                    /** Progress paused. */
                    public paused: boolean;

                    /** Progress pending_snapshot. */
                    public pending_snapshot: Long;

                    /**
                     * Creates a new Progress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Progress instance
                     */
                    public static create(properties?: cockroach.server.serverpb.RaftState.IProgress): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Encodes the specified Progress message. Does not implicitly {@link cockroach.server.serverpb.RaftState.Progress.verify|verify} messages.
                     * @param message Progress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.RaftState.IProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Progress message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftState.Progress.verify|verify} messages.
                     * @param message Progress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.RaftState.IProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Progress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Decodes a Progress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Verifies a Progress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Progress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Progress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Creates a plain object from a Progress message. Also converts values to other types if specified.
                     * @param message Progress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.RaftState.Progress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Progress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a RangeProblems. */
            interface IRangeProblems {

                /** RangeProblems unavailable */
                unavailable?: (boolean|null);

                /** RangeProblems leader_not_lease_holder */
                leader_not_lease_holder?: (boolean|null);

                /** RangeProblems no_raft_leader */
                no_raft_leader?: (boolean|null);

                /** RangeProblems underreplicated */
                underreplicated?: (boolean|null);

                /** RangeProblems overreplicated */
                overreplicated?: (boolean|null);

                /** RangeProblems no_lease */
                no_lease?: (boolean|null);

                /** RangeProblems quiescent_equals_ticking */
                quiescent_equals_ticking?: (boolean|null);

                /** RangeProblems raft_log_too_large */
                raft_log_too_large?: (boolean|null);
            }

            /** Represents a RangeProblems. */
            class RangeProblems implements IRangeProblems {

                /**
                 * Constructs a new RangeProblems.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeProblems);

                /** RangeProblems unavailable. */
                public unavailable: boolean;

                /** RangeProblems leader_not_lease_holder. */
                public leader_not_lease_holder: boolean;

                /** RangeProblems no_raft_leader. */
                public no_raft_leader: boolean;

                /** RangeProblems underreplicated. */
                public underreplicated: boolean;

                /** RangeProblems overreplicated. */
                public overreplicated: boolean;

                /** RangeProblems no_lease. */
                public no_lease: boolean;

                /** RangeProblems quiescent_equals_ticking. */
                public quiescent_equals_ticking: boolean;

                /** RangeProblems raft_log_too_large. */
                public raft_log_too_large: boolean;

                /**
                 * Creates a new RangeProblems instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeProblems instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeProblems): cockroach.server.serverpb.RangeProblems;

                /**
                 * Encodes the specified RangeProblems message. Does not implicitly {@link cockroach.server.serverpb.RangeProblems.verify|verify} messages.
                 * @param message RangeProblems message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeProblems, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeProblems message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeProblems.verify|verify} messages.
                 * @param message RangeProblems message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeProblems, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeProblems message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeProblems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeProblems;

                /**
                 * Decodes a RangeProblems message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeProblems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeProblems;

                /**
                 * Verifies a RangeProblems message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeProblems message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeProblems
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeProblems;

                /**
                 * Creates a plain object from a RangeProblems message. Also converts values to other types if specified.
                 * @param message RangeProblems
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeProblems, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeProblems to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangeStatistics. */
            interface IRangeStatistics {

                /** RangeStatistics queries_per_second */
                queries_per_second?: (number|null);

                /** RangeStatistics writes_per_second */
                writes_per_second?: (number|null);
            }

            /** Represents a RangeStatistics. */
            class RangeStatistics implements IRangeStatistics {

                /**
                 * Constructs a new RangeStatistics.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeStatistics);

                /** RangeStatistics queries_per_second. */
                public queries_per_second: number;

                /** RangeStatistics writes_per_second. */
                public writes_per_second: number;

                /**
                 * Creates a new RangeStatistics instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeStatistics instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeStatistics): cockroach.server.serverpb.RangeStatistics;

                /**
                 * Encodes the specified RangeStatistics message. Does not implicitly {@link cockroach.server.serverpb.RangeStatistics.verify|verify} messages.
                 * @param message RangeStatistics message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeStatistics message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeStatistics.verify|verify} messages.
                 * @param message RangeStatistics message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeStatistics message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeStatistics
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeStatistics;

                /**
                 * Decodes a RangeStatistics message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeStatistics
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeStatistics;

                /**
                 * Verifies a RangeStatistics message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeStatistics message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeStatistics
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeStatistics;

                /**
                 * Creates a plain object from a RangeStatistics message. Also converts values to other types if specified.
                 * @param message RangeStatistics
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeStatistics, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeStatistics to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a PrettySpan. */
            interface IPrettySpan {

                /** PrettySpan start_key */
                start_key?: (string|null);

                /** PrettySpan end_key */
                end_key?: (string|null);
            }

            /** Represents a PrettySpan. */
            class PrettySpan implements IPrettySpan {

                /**
                 * Constructs a new PrettySpan.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IPrettySpan);

                /** PrettySpan start_key. */
                public start_key: string;

                /** PrettySpan end_key. */
                public end_key: string;

                /**
                 * Creates a new PrettySpan instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PrettySpan instance
                 */
                public static create(properties?: cockroach.server.serverpb.IPrettySpan): cockroach.server.serverpb.PrettySpan;

                /**
                 * Encodes the specified PrettySpan message. Does not implicitly {@link cockroach.server.serverpb.PrettySpan.verify|verify} messages.
                 * @param message PrettySpan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IPrettySpan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PrettySpan message, length delimited. Does not implicitly {@link cockroach.server.serverpb.PrettySpan.verify|verify} messages.
                 * @param message PrettySpan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IPrettySpan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PrettySpan message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PrettySpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.PrettySpan;

                /**
                 * Decodes a PrettySpan message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PrettySpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.PrettySpan;

                /**
                 * Verifies a PrettySpan message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PrettySpan message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PrettySpan
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.PrettySpan;

                /**
                 * Creates a plain object from a PrettySpan message. Also converts values to other types if specified.
                 * @param message PrettySpan
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.PrettySpan, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PrettySpan to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangeInfo. */
            interface IRangeInfo {

                /** RangeInfo span */
                span?: (cockroach.server.serverpb.IPrettySpan|null);

                /** RangeInfo raft_state */
                raft_state?: (cockroach.server.serverpb.IRaftState|null);

                /** RangeInfo state */
                state?: (cockroach.storage.storagepb.IRangeInfo|null);

                /** RangeInfo source_node_id */
                source_node_id?: (number|null);

                /** RangeInfo source_store_id */
                source_store_id?: (number|null);

                /** RangeInfo error_message */
                error_message?: (string|null);

                /** RangeInfo lease_history */
                lease_history?: (cockroach.roachpb.ILease[]|null);

                /** RangeInfo problems */
                problems?: (cockroach.server.serverpb.IRangeProblems|null);

                /** RangeInfo stats */
                stats?: (cockroach.server.serverpb.IRangeStatistics|null);

                /** RangeInfo latches_local */
                latches_local?: (cockroach.storage.storagepb.ILatchManagerInfo|null);

                /** RangeInfo latches_global */
                latches_global?: (cockroach.storage.storagepb.ILatchManagerInfo|null);

                /** RangeInfo lease_status */
                lease_status?: (cockroach.storage.ILeaseStatus|null);

                /** RangeInfo quiescent */
                quiescent?: (boolean|null);

                /** RangeInfo ticking */
                ticking?: (boolean|null);
            }

            /** Represents a RangeInfo. */
            class RangeInfo implements IRangeInfo {

                /**
                 * Constructs a new RangeInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeInfo);

                /** RangeInfo span. */
                public span?: (cockroach.server.serverpb.IPrettySpan|null);

                /** RangeInfo raft_state. */
                public raft_state?: (cockroach.server.serverpb.IRaftState|null);

                /** RangeInfo state. */
                public state?: (cockroach.storage.storagepb.IRangeInfo|null);

                /** RangeInfo source_node_id. */
                public source_node_id: number;

                /** RangeInfo source_store_id. */
                public source_store_id: number;

                /** RangeInfo error_message. */
                public error_message: string;

                /** RangeInfo lease_history. */
                public lease_history: cockroach.roachpb.ILease[];

                /** RangeInfo problems. */
                public problems?: (cockroach.server.serverpb.IRangeProblems|null);

                /** RangeInfo stats. */
                public stats?: (cockroach.server.serverpb.IRangeStatistics|null);

                /** RangeInfo latches_local. */
                public latches_local?: (cockroach.storage.storagepb.ILatchManagerInfo|null);

                /** RangeInfo latches_global. */
                public latches_global?: (cockroach.storage.storagepb.ILatchManagerInfo|null);

                /** RangeInfo lease_status. */
                public lease_status?: (cockroach.storage.ILeaseStatus|null);

                /** RangeInfo quiescent. */
                public quiescent: boolean;

                /** RangeInfo ticking. */
                public ticking: boolean;

                /**
                 * Creates a new RangeInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeInfo instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeInfo): cockroach.server.serverpb.RangeInfo;

                /**
                 * Encodes the specified RangeInfo message. Does not implicitly {@link cockroach.server.serverpb.RangeInfo.verify|verify} messages.
                 * @param message RangeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeInfo.verify|verify} messages.
                 * @param message RangeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeInfo;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeInfo;

                /**
                 * Verifies a RangeInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeInfo;

                /**
                 * Creates a plain object from a RangeInfo message. Also converts values to other types if specified.
                 * @param message RangeInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangesRequest. */
            interface IRangesRequest {

                /** RangesRequest node_id */
                node_id?: (string|null);

                /** RangesRequest range_ids */
                range_ids?: (Long[]|null);
            }

            /** Represents a RangesRequest. */
            class RangesRequest implements IRangesRequest {

                /**
                 * Constructs a new RangesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangesRequest);

                /** RangesRequest node_id. */
                public node_id: string;

                /** RangesRequest range_ids. */
                public range_ids: Long[];

                /**
                 * Creates a new RangesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangesRequest): cockroach.server.serverpb.RangesRequest;

                /**
                 * Encodes the specified RangesRequest message. Does not implicitly {@link cockroach.server.serverpb.RangesRequest.verify|verify} messages.
                 * @param message RangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangesRequest.verify|verify} messages.
                 * @param message RangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangesRequest;

                /**
                 * Decodes a RangesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangesRequest;

                /**
                 * Verifies a RangesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangesRequest;

                /**
                 * Creates a plain object from a RangesRequest message. Also converts values to other types if specified.
                 * @param message RangesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangesResponse. */
            interface IRangesResponse {

                /** RangesResponse ranges */
                ranges?: (cockroach.server.serverpb.IRangeInfo[]|null);
            }

            /** Represents a RangesResponse. */
            class RangesResponse implements IRangesResponse {

                /**
                 * Constructs a new RangesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangesResponse);

                /** RangesResponse ranges. */
                public ranges: cockroach.server.serverpb.IRangeInfo[];

                /**
                 * Creates a new RangesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangesResponse): cockroach.server.serverpb.RangesResponse;

                /**
                 * Encodes the specified RangesResponse message. Does not implicitly {@link cockroach.server.serverpb.RangesResponse.verify|verify} messages.
                 * @param message RangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangesResponse.verify|verify} messages.
                 * @param message RangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangesResponse;

                /**
                 * Decodes a RangesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangesResponse;

                /**
                 * Verifies a RangesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangesResponse;

                /**
                 * Creates a plain object from a RangesResponse message. Also converts values to other types if specified.
                 * @param message RangesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GossipRequest. */
            interface IGossipRequest {

                /** GossipRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a GossipRequest. */
            class GossipRequest implements IGossipRequest {

                /**
                 * Constructs a new GossipRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IGossipRequest);

                /** GossipRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new GossipRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GossipRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IGossipRequest): cockroach.server.serverpb.GossipRequest;

                /**
                 * Encodes the specified GossipRequest message. Does not implicitly {@link cockroach.server.serverpb.GossipRequest.verify|verify} messages.
                 * @param message GossipRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IGossipRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GossipRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GossipRequest.verify|verify} messages.
                 * @param message GossipRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IGossipRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GossipRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GossipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GossipRequest;

                /**
                 * Decodes a GossipRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GossipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GossipRequest;

                /**
                 * Verifies a GossipRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GossipRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GossipRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GossipRequest;

                /**
                 * Creates a plain object from a GossipRequest message. Also converts values to other types if specified.
                 * @param message GossipRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GossipRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GossipRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EngineStatsInfo. */
            interface IEngineStatsInfo {

                /** EngineStatsInfo store_id */
                store_id?: (number|null);

                /** EngineStatsInfo tickers_and_histograms */
                tickers_and_histograms?: (cockroach.storage.engine.enginepb.ITickersAndHistograms|null);

                /** EngineStatsInfo engine_type */
                engine_type?: (cockroach.storage.engine.enginepb.EngineType|null);
            }

            /** Represents an EngineStatsInfo. */
            class EngineStatsInfo implements IEngineStatsInfo {

                /**
                 * Constructs a new EngineStatsInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEngineStatsInfo);

                /** EngineStatsInfo store_id. */
                public store_id: number;

                /** EngineStatsInfo tickers_and_histograms. */
                public tickers_and_histograms?: (cockroach.storage.engine.enginepb.ITickersAndHistograms|null);

                /** EngineStatsInfo engine_type. */
                public engine_type: cockroach.storage.engine.enginepb.EngineType;

                /**
                 * Creates a new EngineStatsInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EngineStatsInfo instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEngineStatsInfo): cockroach.server.serverpb.EngineStatsInfo;

                /**
                 * Encodes the specified EngineStatsInfo message. Does not implicitly {@link cockroach.server.serverpb.EngineStatsInfo.verify|verify} messages.
                 * @param message EngineStatsInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEngineStatsInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EngineStatsInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EngineStatsInfo.verify|verify} messages.
                 * @param message EngineStatsInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEngineStatsInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EngineStatsInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EngineStatsInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EngineStatsInfo;

                /**
                 * Decodes an EngineStatsInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EngineStatsInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EngineStatsInfo;

                /**
                 * Verifies an EngineStatsInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EngineStatsInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EngineStatsInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EngineStatsInfo;

                /**
                 * Creates a plain object from an EngineStatsInfo message. Also converts values to other types if specified.
                 * @param message EngineStatsInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EngineStatsInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EngineStatsInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EngineStatsRequest. */
            interface IEngineStatsRequest {

                /** EngineStatsRequest node_id */
                node_id?: (string|null);
            }

            /** Represents an EngineStatsRequest. */
            class EngineStatsRequest implements IEngineStatsRequest {

                /**
                 * Constructs a new EngineStatsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEngineStatsRequest);

                /** EngineStatsRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new EngineStatsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EngineStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEngineStatsRequest): cockroach.server.serverpb.EngineStatsRequest;

                /**
                 * Encodes the specified EngineStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.EngineStatsRequest.verify|verify} messages.
                 * @param message EngineStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEngineStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EngineStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EngineStatsRequest.verify|verify} messages.
                 * @param message EngineStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEngineStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EngineStatsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EngineStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EngineStatsRequest;

                /**
                 * Decodes an EngineStatsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EngineStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EngineStatsRequest;

                /**
                 * Verifies an EngineStatsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EngineStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EngineStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EngineStatsRequest;

                /**
                 * Creates a plain object from an EngineStatsRequest message. Also converts values to other types if specified.
                 * @param message EngineStatsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EngineStatsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EngineStatsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an EngineStatsResponse. */
            interface IEngineStatsResponse {

                /** EngineStatsResponse stats */
                stats?: (cockroach.server.serverpb.IEngineStatsInfo[]|null);
            }

            /** Represents an EngineStatsResponse. */
            class EngineStatsResponse implements IEngineStatsResponse {

                /**
                 * Constructs a new EngineStatsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IEngineStatsResponse);

                /** EngineStatsResponse stats. */
                public stats: cockroach.server.serverpb.IEngineStatsInfo[];

                /**
                 * Creates a new EngineStatsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns EngineStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IEngineStatsResponse): cockroach.server.serverpb.EngineStatsResponse;

                /**
                 * Encodes the specified EngineStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.EngineStatsResponse.verify|verify} messages.
                 * @param message EngineStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IEngineStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EngineStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EngineStatsResponse.verify|verify} messages.
                 * @param message EngineStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IEngineStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EngineStatsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns EngineStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EngineStatsResponse;

                /**
                 * Decodes an EngineStatsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns EngineStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EngineStatsResponse;

                /**
                 * Verifies an EngineStatsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an EngineStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns EngineStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EngineStatsResponse;

                /**
                 * Creates a plain object from an EngineStatsResponse message. Also converts values to other types if specified.
                 * @param message EngineStatsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EngineStatsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this EngineStatsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TraceEvent. */
            interface ITraceEvent {

                /** TraceEvent time */
                time?: (google.protobuf.ITimestamp|null);

                /** TraceEvent message */
                message?: (string|null);
            }

            /** Represents a TraceEvent. */
            class TraceEvent implements ITraceEvent {

                /**
                 * Constructs a new TraceEvent.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ITraceEvent);

                /** TraceEvent time. */
                public time?: (google.protobuf.ITimestamp|null);

                /** TraceEvent message. */
                public message: string;

                /**
                 * Creates a new TraceEvent instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TraceEvent instance
                 */
                public static create(properties?: cockroach.server.serverpb.ITraceEvent): cockroach.server.serverpb.TraceEvent;

                /**
                 * Encodes the specified TraceEvent message. Does not implicitly {@link cockroach.server.serverpb.TraceEvent.verify|verify} messages.
                 * @param message TraceEvent message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ITraceEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TraceEvent message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TraceEvent.verify|verify} messages.
                 * @param message TraceEvent message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ITraceEvent, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TraceEvent message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TraceEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TraceEvent;

                /**
                 * Decodes a TraceEvent message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TraceEvent
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TraceEvent;

                /**
                 * Verifies a TraceEvent message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TraceEvent message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TraceEvent
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TraceEvent;

                /**
                 * Creates a plain object from a TraceEvent message. Also converts values to other types if specified.
                 * @param message TraceEvent
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TraceEvent, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TraceEvent to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an AllocatorDryRun. */
            interface IAllocatorDryRun {

                /** AllocatorDryRun range_id */
                range_id?: (Long|null);

                /** AllocatorDryRun events */
                events?: (cockroach.server.serverpb.ITraceEvent[]|null);
            }

            /** Represents an AllocatorDryRun. */
            class AllocatorDryRun implements IAllocatorDryRun {

                /**
                 * Constructs a new AllocatorDryRun.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IAllocatorDryRun);

                /** AllocatorDryRun range_id. */
                public range_id: Long;

                /** AllocatorDryRun events. */
                public events: cockroach.server.serverpb.ITraceEvent[];

                /**
                 * Creates a new AllocatorDryRun instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AllocatorDryRun instance
                 */
                public static create(properties?: cockroach.server.serverpb.IAllocatorDryRun): cockroach.server.serverpb.AllocatorDryRun;

                /**
                 * Encodes the specified AllocatorDryRun message. Does not implicitly {@link cockroach.server.serverpb.AllocatorDryRun.verify|verify} messages.
                 * @param message AllocatorDryRun message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IAllocatorDryRun, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AllocatorDryRun message, length delimited. Does not implicitly {@link cockroach.server.serverpb.AllocatorDryRun.verify|verify} messages.
                 * @param message AllocatorDryRun message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IAllocatorDryRun, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AllocatorDryRun message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AllocatorDryRun
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.AllocatorDryRun;

                /**
                 * Decodes an AllocatorDryRun message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AllocatorDryRun
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.AllocatorDryRun;

                /**
                 * Verifies an AllocatorDryRun message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AllocatorDryRun message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AllocatorDryRun
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.AllocatorDryRun;

                /**
                 * Creates a plain object from an AllocatorDryRun message. Also converts values to other types if specified.
                 * @param message AllocatorDryRun
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.AllocatorDryRun, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AllocatorDryRun to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an AllocatorRangeRequest. */
            interface IAllocatorRangeRequest {

                /** AllocatorRangeRequest range_id */
                range_id?: (Long|null);
            }

            /** Represents an AllocatorRangeRequest. */
            class AllocatorRangeRequest implements IAllocatorRangeRequest {

                /**
                 * Constructs a new AllocatorRangeRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IAllocatorRangeRequest);

                /** AllocatorRangeRequest range_id. */
                public range_id: Long;

                /**
                 * Creates a new AllocatorRangeRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AllocatorRangeRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IAllocatorRangeRequest): cockroach.server.serverpb.AllocatorRangeRequest;

                /**
                 * Encodes the specified AllocatorRangeRequest message. Does not implicitly {@link cockroach.server.serverpb.AllocatorRangeRequest.verify|verify} messages.
                 * @param message AllocatorRangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IAllocatorRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AllocatorRangeRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.AllocatorRangeRequest.verify|verify} messages.
                 * @param message AllocatorRangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IAllocatorRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AllocatorRangeRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AllocatorRangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.AllocatorRangeRequest;

                /**
                 * Decodes an AllocatorRangeRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AllocatorRangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.AllocatorRangeRequest;

                /**
                 * Verifies an AllocatorRangeRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AllocatorRangeRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AllocatorRangeRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.AllocatorRangeRequest;

                /**
                 * Creates a plain object from an AllocatorRangeRequest message. Also converts values to other types if specified.
                 * @param message AllocatorRangeRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.AllocatorRangeRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AllocatorRangeRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an AllocatorRangeResponse. */
            interface IAllocatorRangeResponse {

                /** AllocatorRangeResponse node_id */
                node_id?: (Long|null);

                /** AllocatorRangeResponse dry_run */
                dry_run?: (cockroach.server.serverpb.IAllocatorDryRun|null);
            }

            /** Represents an AllocatorRangeResponse. */
            class AllocatorRangeResponse implements IAllocatorRangeResponse {

                /**
                 * Constructs a new AllocatorRangeResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IAllocatorRangeResponse);

                /** AllocatorRangeResponse node_id. */
                public node_id: Long;

                /** AllocatorRangeResponse dry_run. */
                public dry_run?: (cockroach.server.serverpb.IAllocatorDryRun|null);

                /**
                 * Creates a new AllocatorRangeResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AllocatorRangeResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IAllocatorRangeResponse): cockroach.server.serverpb.AllocatorRangeResponse;

                /**
                 * Encodes the specified AllocatorRangeResponse message. Does not implicitly {@link cockroach.server.serverpb.AllocatorRangeResponse.verify|verify} messages.
                 * @param message AllocatorRangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IAllocatorRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AllocatorRangeResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.AllocatorRangeResponse.verify|verify} messages.
                 * @param message AllocatorRangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IAllocatorRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AllocatorRangeResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AllocatorRangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.AllocatorRangeResponse;

                /**
                 * Decodes an AllocatorRangeResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AllocatorRangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.AllocatorRangeResponse;

                /**
                 * Verifies an AllocatorRangeResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AllocatorRangeResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AllocatorRangeResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.AllocatorRangeResponse;

                /**
                 * Creates a plain object from an AllocatorRangeResponse message. Also converts values to other types if specified.
                 * @param message AllocatorRangeResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.AllocatorRangeResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AllocatorRangeResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an AllocatorRequest. */
            interface IAllocatorRequest {

                /** AllocatorRequest node_id */
                node_id?: (string|null);

                /** AllocatorRequest range_ids */
                range_ids?: (Long[]|null);
            }

            /** Represents an AllocatorRequest. */
            class AllocatorRequest implements IAllocatorRequest {

                /**
                 * Constructs a new AllocatorRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IAllocatorRequest);

                /** AllocatorRequest node_id. */
                public node_id: string;

                /** AllocatorRequest range_ids. */
                public range_ids: Long[];

                /**
                 * Creates a new AllocatorRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AllocatorRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IAllocatorRequest): cockroach.server.serverpb.AllocatorRequest;

                /**
                 * Encodes the specified AllocatorRequest message. Does not implicitly {@link cockroach.server.serverpb.AllocatorRequest.verify|verify} messages.
                 * @param message AllocatorRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IAllocatorRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AllocatorRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.AllocatorRequest.verify|verify} messages.
                 * @param message AllocatorRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IAllocatorRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AllocatorRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AllocatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.AllocatorRequest;

                /**
                 * Decodes an AllocatorRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AllocatorRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.AllocatorRequest;

                /**
                 * Verifies an AllocatorRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AllocatorRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AllocatorRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.AllocatorRequest;

                /**
                 * Creates a plain object from an AllocatorRequest message. Also converts values to other types if specified.
                 * @param message AllocatorRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.AllocatorRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AllocatorRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an AllocatorResponse. */
            interface IAllocatorResponse {

                /** AllocatorResponse dry_runs */
                dry_runs?: (cockroach.server.serverpb.IAllocatorDryRun[]|null);
            }

            /** Represents an AllocatorResponse. */
            class AllocatorResponse implements IAllocatorResponse {

                /**
                 * Constructs a new AllocatorResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IAllocatorResponse);

                /** AllocatorResponse dry_runs. */
                public dry_runs: cockroach.server.serverpb.IAllocatorDryRun[];

                /**
                 * Creates a new AllocatorResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns AllocatorResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IAllocatorResponse): cockroach.server.serverpb.AllocatorResponse;

                /**
                 * Encodes the specified AllocatorResponse message. Does not implicitly {@link cockroach.server.serverpb.AllocatorResponse.verify|verify} messages.
                 * @param message AllocatorResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IAllocatorResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified AllocatorResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.AllocatorResponse.verify|verify} messages.
                 * @param message AllocatorResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IAllocatorResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an AllocatorResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns AllocatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.AllocatorResponse;

                /**
                 * Decodes an AllocatorResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns AllocatorResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.AllocatorResponse;

                /**
                 * Verifies an AllocatorResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an AllocatorResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns AllocatorResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.AllocatorResponse;

                /**
                 * Creates a plain object from an AllocatorResponse message. Also converts values to other types if specified.
                 * @param message AllocatorResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.AllocatorResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this AllocatorResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a JSONResponse. */
            interface IJSONResponse {

                /** JSONResponse data */
                data?: (Uint8Array|null);
            }

            /** Represents a JSONResponse. */
            class JSONResponse implements IJSONResponse {

                /**
                 * Constructs a new JSONResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IJSONResponse);

                /** JSONResponse data. */
                public data: Uint8Array;

                /**
                 * Creates a new JSONResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns JSONResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IJSONResponse): cockroach.server.serverpb.JSONResponse;

                /**
                 * Encodes the specified JSONResponse message. Does not implicitly {@link cockroach.server.serverpb.JSONResponse.verify|verify} messages.
                 * @param message JSONResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IJSONResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified JSONResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.JSONResponse.verify|verify} messages.
                 * @param message JSONResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IJSONResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a JSONResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns JSONResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.JSONResponse;

                /**
                 * Decodes a JSONResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns JSONResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.JSONResponse;

                /**
                 * Verifies a JSONResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a JSONResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns JSONResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.JSONResponse;

                /**
                 * Creates a plain object from a JSONResponse message. Also converts values to other types if specified.
                 * @param message JSONResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.JSONResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this JSONResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LogsRequest. */
            interface ILogsRequest {

                /** LogsRequest node_id */
                node_id?: (string|null);

                /** LogsRequest level */
                level?: (string|null);

                /** LogsRequest start_time */
                start_time?: (string|null);

                /** LogsRequest end_time */
                end_time?: (string|null);

                /** LogsRequest max */
                max?: (string|null);

                /** LogsRequest pattern */
                pattern?: (string|null);
            }

            /** Represents a LogsRequest. */
            class LogsRequest implements ILogsRequest {

                /**
                 * Constructs a new LogsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILogsRequest);

                /** LogsRequest node_id. */
                public node_id: string;

                /** LogsRequest level. */
                public level: string;

                /** LogsRequest start_time. */
                public start_time: string;

                /** LogsRequest end_time. */
                public end_time: string;

                /** LogsRequest max. */
                public max: string;

                /** LogsRequest pattern. */
                public pattern: string;

                /**
                 * Creates a new LogsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LogsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILogsRequest): cockroach.server.serverpb.LogsRequest;

                /**
                 * Encodes the specified LogsRequest message. Does not implicitly {@link cockroach.server.serverpb.LogsRequest.verify|verify} messages.
                 * @param message LogsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILogsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogsRequest.verify|verify} messages.
                 * @param message LogsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILogsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogsRequest;

                /**
                 * Decodes a LogsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogsRequest;

                /**
                 * Verifies a LogsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LogsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LogsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogsRequest;

                /**
                 * Creates a plain object from a LogsRequest message. Also converts values to other types if specified.
                 * @param message LogsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LogEntriesResponse. */
            interface ILogEntriesResponse {

                /** LogEntriesResponse entries */
                entries?: (cockroach.util.log.IEntry[]|null);
            }

            /** Represents a LogEntriesResponse. */
            class LogEntriesResponse implements ILogEntriesResponse {

                /**
                 * Constructs a new LogEntriesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILogEntriesResponse);

                /** LogEntriesResponse entries. */
                public entries: cockroach.util.log.IEntry[];

                /**
                 * Creates a new LogEntriesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LogEntriesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILogEntriesResponse): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Encodes the specified LogEntriesResponse message. Does not implicitly {@link cockroach.server.serverpb.LogEntriesResponse.verify|verify} messages.
                 * @param message LogEntriesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILogEntriesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogEntriesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogEntriesResponse.verify|verify} messages.
                 * @param message LogEntriesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILogEntriesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogEntriesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LogEntriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Decodes a LogEntriesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LogEntriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Verifies a LogEntriesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LogEntriesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LogEntriesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Creates a plain object from a LogEntriesResponse message. Also converts values to other types if specified.
                 * @param message LogEntriesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogEntriesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogEntriesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LogFilesListRequest. */
            interface ILogFilesListRequest {

                /** LogFilesListRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a LogFilesListRequest. */
            class LogFilesListRequest implements ILogFilesListRequest {

                /**
                 * Constructs a new LogFilesListRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILogFilesListRequest);

                /** LogFilesListRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new LogFilesListRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LogFilesListRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILogFilesListRequest): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Encodes the specified LogFilesListRequest message. Does not implicitly {@link cockroach.server.serverpb.LogFilesListRequest.verify|verify} messages.
                 * @param message LogFilesListRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILogFilesListRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFilesListRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFilesListRequest.verify|verify} messages.
                 * @param message LogFilesListRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILogFilesListRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFilesListRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LogFilesListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Decodes a LogFilesListRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LogFilesListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Verifies a LogFilesListRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LogFilesListRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LogFilesListRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Creates a plain object from a LogFilesListRequest message. Also converts values to other types if specified.
                 * @param message LogFilesListRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFilesListRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFilesListRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LogFilesListResponse. */
            interface ILogFilesListResponse {

                /** LogFilesListResponse files */
                files?: (cockroach.util.log.IFileInfo[]|null);
            }

            /** Represents a LogFilesListResponse. */
            class LogFilesListResponse implements ILogFilesListResponse {

                /**
                 * Constructs a new LogFilesListResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILogFilesListResponse);

                /** LogFilesListResponse files. */
                public files: cockroach.util.log.IFileInfo[];

                /**
                 * Creates a new LogFilesListResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LogFilesListResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILogFilesListResponse): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Encodes the specified LogFilesListResponse message. Does not implicitly {@link cockroach.server.serverpb.LogFilesListResponse.verify|verify} messages.
                 * @param message LogFilesListResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILogFilesListResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFilesListResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFilesListResponse.verify|verify} messages.
                 * @param message LogFilesListResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILogFilesListResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFilesListResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LogFilesListResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Decodes a LogFilesListResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LogFilesListResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Verifies a LogFilesListResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LogFilesListResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LogFilesListResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Creates a plain object from a LogFilesListResponse message. Also converts values to other types if specified.
                 * @param message LogFilesListResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFilesListResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFilesListResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LogFileRequest. */
            interface ILogFileRequest {

                /** LogFileRequest node_id */
                node_id?: (string|null);

                /** LogFileRequest file */
                file?: (string|null);
            }

            /** Represents a LogFileRequest. */
            class LogFileRequest implements ILogFileRequest {

                /**
                 * Constructs a new LogFileRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ILogFileRequest);

                /** LogFileRequest node_id. */
                public node_id: string;

                /** LogFileRequest file. */
                public file: string;

                /**
                 * Creates a new LogFileRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LogFileRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ILogFileRequest): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Encodes the specified LogFileRequest message. Does not implicitly {@link cockroach.server.serverpb.LogFileRequest.verify|verify} messages.
                 * @param message LogFileRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ILogFileRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFileRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFileRequest.verify|verify} messages.
                 * @param message LogFileRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ILogFileRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFileRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LogFileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Decodes a LogFileRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LogFileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Verifies a LogFileRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LogFileRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LogFileRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Creates a plain object from a LogFileRequest message. Also converts values to other types if specified.
                 * @param message LogFileRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFileRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFileRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StacksRequest. */
            interface IStacksRequest {

                /** StacksRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a StacksRequest. */
            class StacksRequest implements IStacksRequest {

                /**
                 * Constructs a new StacksRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStacksRequest);

                /** StacksRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new StacksRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StacksRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStacksRequest): cockroach.server.serverpb.StacksRequest;

                /**
                 * Encodes the specified StacksRequest message. Does not implicitly {@link cockroach.server.serverpb.StacksRequest.verify|verify} messages.
                 * @param message StacksRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStacksRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StacksRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StacksRequest.verify|verify} messages.
                 * @param message StacksRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStacksRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StacksRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StacksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StacksRequest;

                /**
                 * Decodes a StacksRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StacksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StacksRequest;

                /**
                 * Verifies a StacksRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StacksRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StacksRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StacksRequest;

                /**
                 * Creates a plain object from a StacksRequest message. Also converts values to other types if specified.
                 * @param message StacksRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StacksRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StacksRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** FileType enum. */
            enum FileType {
                HEAP = 0,
                GOROUTINES = 1
            }

            /** Properties of a File. */
            interface IFile {

                /** File name */
                name?: (string|null);

                /** File file_size */
                file_size?: (Long|null);

                /** File contents */
                contents?: (Uint8Array|null);
            }

            /** Represents a File. */
            class File implements IFile {

                /**
                 * Constructs a new File.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IFile);

                /** File name. */
                public name: string;

                /** File file_size. */
                public file_size: Long;

                /** File contents. */
                public contents: Uint8Array;

                /**
                 * Creates a new File instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns File instance
                 */
                public static create(properties?: cockroach.server.serverpb.IFile): cockroach.server.serverpb.File;

                /**
                 * Encodes the specified File message. Does not implicitly {@link cockroach.server.serverpb.File.verify|verify} messages.
                 * @param message File message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified File message, length delimited. Does not implicitly {@link cockroach.server.serverpb.File.verify|verify} messages.
                 * @param message File message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IFile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a File message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.File;

                /**
                 * Decodes a File message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns File
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.File;

                /**
                 * Verifies a File message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a File message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns File
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.File;

                /**
                 * Creates a plain object from a File message. Also converts values to other types if specified.
                 * @param message File
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.File, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this File to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetFilesRequest. */
            interface IGetFilesRequest {

                /** GetFilesRequest node_id */
                node_id?: (string|null);

                /** GetFilesRequest list_only */
                list_only?: (boolean|null);

                /** GetFilesRequest type */
                type?: (cockroach.server.serverpb.FileType|null);

                /** GetFilesRequest patterns */
                patterns?: (string[]|null);
            }

            /** Represents a GetFilesRequest. */
            class GetFilesRequest implements IGetFilesRequest {

                /**
                 * Constructs a new GetFilesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IGetFilesRequest);

                /** GetFilesRequest node_id. */
                public node_id: string;

                /** GetFilesRequest list_only. */
                public list_only: boolean;

                /** GetFilesRequest type. */
                public type: cockroach.server.serverpb.FileType;

                /** GetFilesRequest patterns. */
                public patterns: string[];

                /**
                 * Creates a new GetFilesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GetFilesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IGetFilesRequest): cockroach.server.serverpb.GetFilesRequest;

                /**
                 * Encodes the specified GetFilesRequest message. Does not implicitly {@link cockroach.server.serverpb.GetFilesRequest.verify|verify} messages.
                 * @param message GetFilesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IGetFilesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetFilesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetFilesRequest.verify|verify} messages.
                 * @param message GetFilesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IGetFilesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetFilesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GetFilesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetFilesRequest;

                /**
                 * Decodes a GetFilesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GetFilesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetFilesRequest;

                /**
                 * Verifies a GetFilesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetFilesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetFilesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetFilesRequest;

                /**
                 * Creates a plain object from a GetFilesRequest message. Also converts values to other types if specified.
                 * @param message GetFilesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetFilesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetFilesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a GetFilesResponse. */
            interface IGetFilesResponse {

                /** GetFilesResponse files */
                files?: (cockroach.server.serverpb.IFile[]|null);
            }

            /** Represents a GetFilesResponse. */
            class GetFilesResponse implements IGetFilesResponse {

                /**
                 * Constructs a new GetFilesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IGetFilesResponse);

                /** GetFilesResponse files. */
                public files: cockroach.server.serverpb.IFile[];

                /**
                 * Creates a new GetFilesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GetFilesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IGetFilesResponse): cockroach.server.serverpb.GetFilesResponse;

                /**
                 * Encodes the specified GetFilesResponse message. Does not implicitly {@link cockroach.server.serverpb.GetFilesResponse.verify|verify} messages.
                 * @param message GetFilesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IGetFilesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetFilesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetFilesResponse.verify|verify} messages.
                 * @param message GetFilesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IGetFilesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetFilesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GetFilesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetFilesResponse;

                /**
                 * Decodes a GetFilesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GetFilesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetFilesResponse;

                /**
                 * Verifies a GetFilesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GetFilesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GetFilesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetFilesResponse;

                /**
                 * Creates a plain object from a GetFilesResponse message. Also converts values to other types if specified.
                 * @param message GetFilesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetFilesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetFilesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ProfileRequest. */
            interface IProfileRequest {

                /** ProfileRequest node_id */
                node_id?: (string|null);

                /** ProfileRequest type */
                type?: (cockroach.server.serverpb.ProfileRequest.Type|null);
            }

            /** Represents a ProfileRequest. */
            class ProfileRequest implements IProfileRequest {

                /**
                 * Constructs a new ProfileRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IProfileRequest);

                /** ProfileRequest node_id. */
                public node_id: string;

                /** ProfileRequest type. */
                public type: cockroach.server.serverpb.ProfileRequest.Type;

                /**
                 * Creates a new ProfileRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ProfileRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IProfileRequest): cockroach.server.serverpb.ProfileRequest;

                /**
                 * Encodes the specified ProfileRequest message. Does not implicitly {@link cockroach.server.serverpb.ProfileRequest.verify|verify} messages.
                 * @param message ProfileRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IProfileRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ProfileRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProfileRequest.verify|verify} messages.
                 * @param message ProfileRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IProfileRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ProfileRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ProfileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProfileRequest;

                /**
                 * Decodes a ProfileRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ProfileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProfileRequest;

                /**
                 * Verifies a ProfileRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ProfileRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ProfileRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProfileRequest;

                /**
                 * Creates a plain object from a ProfileRequest message. Also converts values to other types if specified.
                 * @param message ProfileRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ProfileRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ProfileRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ProfileRequest {

                /** Type enum. */
                enum Type {
                    HEAP = 0
                }
            }

            /** Properties of a MetricsRequest. */
            interface IMetricsRequest {

                /** MetricsRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a MetricsRequest. */
            class MetricsRequest implements IMetricsRequest {

                /**
                 * Constructs a new MetricsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IMetricsRequest);

                /** MetricsRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new MetricsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MetricsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IMetricsRequest): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Encodes the specified MetricsRequest message. Does not implicitly {@link cockroach.server.serverpb.MetricsRequest.verify|verify} messages.
                 * @param message MetricsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IMetricsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MetricsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.MetricsRequest.verify|verify} messages.
                 * @param message MetricsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IMetricsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MetricsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MetricsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Decodes a MetricsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MetricsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Verifies a MetricsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MetricsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MetricsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Creates a plain object from a MetricsRequest message. Also converts values to other types if specified.
                 * @param message MetricsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.MetricsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetricsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftRangeNode. */
            interface IRaftRangeNode {

                /** RaftRangeNode node_id */
                node_id?: (number|null);

                /** RaftRangeNode range */
                range?: (cockroach.server.serverpb.IRangeInfo|null);
            }

            /** Represents a RaftRangeNode. */
            class RaftRangeNode implements IRaftRangeNode {

                /**
                 * Constructs a new RaftRangeNode.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftRangeNode);

                /** RaftRangeNode node_id. */
                public node_id: number;

                /** RaftRangeNode range. */
                public range?: (cockroach.server.serverpb.IRangeInfo|null);

                /**
                 * Creates a new RaftRangeNode instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftRangeNode instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftRangeNode): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Encodes the specified RaftRangeNode message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeNode.verify|verify} messages.
                 * @param message RaftRangeNode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftRangeNode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeNode message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeNode.verify|verify} messages.
                 * @param message RaftRangeNode message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftRangeNode, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeNode message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftRangeNode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Decodes a RaftRangeNode message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftRangeNode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Verifies a RaftRangeNode message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftRangeNode message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftRangeNode
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Creates a plain object from a RaftRangeNode message. Also converts values to other types if specified.
                 * @param message RaftRangeNode
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeNode, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeNode to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftRangeError. */
            interface IRaftRangeError {

                /** RaftRangeError message */
                message?: (string|null);
            }

            /** Represents a RaftRangeError. */
            class RaftRangeError implements IRaftRangeError {

                /**
                 * Constructs a new RaftRangeError.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftRangeError);

                /** RaftRangeError message. */
                public message: string;

                /**
                 * Creates a new RaftRangeError instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftRangeError instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftRangeError): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Encodes the specified RaftRangeError message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeError.verify|verify} messages.
                 * @param message RaftRangeError message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftRangeError, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeError message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeError.verify|verify} messages.
                 * @param message RaftRangeError message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftRangeError, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeError message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftRangeError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Decodes a RaftRangeError message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftRangeError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Verifies a RaftRangeError message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftRangeError message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftRangeError
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Creates a plain object from a RaftRangeError message. Also converts values to other types if specified.
                 * @param message RaftRangeError
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeError, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeError to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftRangeStatus. */
            interface IRaftRangeStatus {

                /** RaftRangeStatus range_id */
                range_id?: (Long|null);

                /** RaftRangeStatus errors */
                errors?: (cockroach.server.serverpb.IRaftRangeError[]|null);

                /** RaftRangeStatus nodes */
                nodes?: (cockroach.server.serverpb.IRaftRangeNode[]|null);
            }

            /** Represents a RaftRangeStatus. */
            class RaftRangeStatus implements IRaftRangeStatus {

                /**
                 * Constructs a new RaftRangeStatus.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftRangeStatus);

                /** RaftRangeStatus range_id. */
                public range_id: Long;

                /** RaftRangeStatus errors. */
                public errors: cockroach.server.serverpb.IRaftRangeError[];

                /** RaftRangeStatus nodes. */
                public nodes: cockroach.server.serverpb.IRaftRangeNode[];

                /**
                 * Creates a new RaftRangeStatus instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftRangeStatus instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftRangeStatus): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Encodes the specified RaftRangeStatus message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeStatus.verify|verify} messages.
                 * @param message RaftRangeStatus message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftRangeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeStatus message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeStatus.verify|verify} messages.
                 * @param message RaftRangeStatus message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftRangeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeStatus message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftRangeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Decodes a RaftRangeStatus message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftRangeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Verifies a RaftRangeStatus message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftRangeStatus message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftRangeStatus
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Creates a plain object from a RaftRangeStatus message. Also converts values to other types if specified.
                 * @param message RaftRangeStatus
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeStatus to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftDebugRequest. */
            interface IRaftDebugRequest {

                /** RaftDebugRequest range_ids */
                range_ids?: (Long[]|null);
            }

            /** Represents a RaftDebugRequest. */
            class RaftDebugRequest implements IRaftDebugRequest {

                /**
                 * Constructs a new RaftDebugRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftDebugRequest);

                /** RaftDebugRequest range_ids. */
                public range_ids: Long[];

                /**
                 * Creates a new RaftDebugRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftDebugRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftDebugRequest): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Encodes the specified RaftDebugRequest message. Does not implicitly {@link cockroach.server.serverpb.RaftDebugRequest.verify|verify} messages.
                 * @param message RaftDebugRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftDebugRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftDebugRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftDebugRequest.verify|verify} messages.
                 * @param message RaftDebugRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftDebugRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftDebugRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftDebugRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Decodes a RaftDebugRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftDebugRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Verifies a RaftDebugRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftDebugRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftDebugRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Creates a plain object from a RaftDebugRequest message. Also converts values to other types if specified.
                 * @param message RaftDebugRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftDebugRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftDebugRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RaftDebugResponse. */
            interface IRaftDebugResponse {

                /** RaftDebugResponse ranges */
                ranges?: ({ [k: string]: cockroach.server.serverpb.IRaftRangeStatus }|null);

                /** RaftDebugResponse errors */
                errors?: (cockroach.server.serverpb.IRaftRangeError[]|null);
            }

            /** Represents a RaftDebugResponse. */
            class RaftDebugResponse implements IRaftDebugResponse {

                /**
                 * Constructs a new RaftDebugResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRaftDebugResponse);

                /** RaftDebugResponse ranges. */
                public ranges: { [k: string]: cockroach.server.serverpb.IRaftRangeStatus };

                /** RaftDebugResponse errors. */
                public errors: cockroach.server.serverpb.IRaftRangeError[];

                /**
                 * Creates a new RaftDebugResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RaftDebugResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRaftDebugResponse): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Encodes the specified RaftDebugResponse message. Does not implicitly {@link cockroach.server.serverpb.RaftDebugResponse.verify|verify} messages.
                 * @param message RaftDebugResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRaftDebugResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftDebugResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftDebugResponse.verify|verify} messages.
                 * @param message RaftDebugResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRaftDebugResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftDebugResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RaftDebugResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Decodes a RaftDebugResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RaftDebugResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Verifies a RaftDebugResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RaftDebugResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RaftDebugResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Creates a plain object from a RaftDebugResponse message. Also converts values to other types if specified.
                 * @param message RaftDebugResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftDebugResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftDebugResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an ActiveQuery. */
            interface IActiveQuery {

                /** ActiveQuery id */
                id?: (string|null);

                /** ActiveQuery sql */
                sql?: (string|null);

                /** ActiveQuery start */
                start?: (google.protobuf.ITimestamp|null);

                /** ActiveQuery is_distributed */
                is_distributed?: (boolean|null);

                /** ActiveQuery phase */
                phase?: (cockroach.server.serverpb.ActiveQuery.Phase|null);

                /** ActiveQuery progress */
                progress?: (number|null);
            }

            /** Represents an ActiveQuery. */
            class ActiveQuery implements IActiveQuery {

                /**
                 * Constructs a new ActiveQuery.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IActiveQuery);

                /** ActiveQuery id. */
                public id: string;

                /** ActiveQuery sql. */
                public sql: string;

                /** ActiveQuery start. */
                public start?: (google.protobuf.ITimestamp|null);

                /** ActiveQuery is_distributed. */
                public is_distributed: boolean;

                /** ActiveQuery phase. */
                public phase: cockroach.server.serverpb.ActiveQuery.Phase;

                /** ActiveQuery progress. */
                public progress: number;

                /**
                 * Creates a new ActiveQuery instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ActiveQuery instance
                 */
                public static create(properties?: cockroach.server.serverpb.IActiveQuery): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Encodes the specified ActiveQuery message. Does not implicitly {@link cockroach.server.serverpb.ActiveQuery.verify|verify} messages.
                 * @param message ActiveQuery message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IActiveQuery, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ActiveQuery message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ActiveQuery.verify|verify} messages.
                 * @param message ActiveQuery message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IActiveQuery, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ActiveQuery message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ActiveQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Decodes an ActiveQuery message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ActiveQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Verifies an ActiveQuery message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ActiveQuery message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ActiveQuery
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Creates a plain object from an ActiveQuery message. Also converts values to other types if specified.
                 * @param message ActiveQuery
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ActiveQuery, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ActiveQuery to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ActiveQuery {

                /** Phase enum. */
                enum Phase {
                    PREPARING = 0,
                    EXECUTING = 1
                }
            }

            /** Properties of a ListSessionsRequest. */
            interface IListSessionsRequest {

                /** ListSessionsRequest username */
                username?: (string|null);
            }

            /** Represents a ListSessionsRequest. */
            class ListSessionsRequest implements IListSessionsRequest {

                /**
                 * Constructs a new ListSessionsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IListSessionsRequest);

                /** ListSessionsRequest username. */
                public username: string;

                /**
                 * Creates a new ListSessionsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ListSessionsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IListSessionsRequest): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Encodes the specified ListSessionsRequest message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsRequest.verify|verify} messages.
                 * @param message ListSessionsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IListSessionsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsRequest.verify|verify} messages.
                 * @param message ListSessionsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IListSessionsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ListSessionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Decodes a ListSessionsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ListSessionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Verifies a ListSessionsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListSessionsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListSessionsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Creates a plain object from a ListSessionsRequest message. Also converts values to other types if specified.
                 * @param message ListSessionsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Session. */
            interface ISession {

                /** Session node_id */
                node_id?: (number|null);

                /** Session username */
                username?: (string|null);

                /** Session client_address */
                client_address?: (string|null);

                /** Session application_name */
                application_name?: (string|null);

                /** Session active_queries */
                active_queries?: (cockroach.server.serverpb.IActiveQuery[]|null);

                /** Session start */
                start?: (google.protobuf.ITimestamp|null);

                /** Session kv_txn_id */
                kv_txn_id?: (Uint8Array|null);

                /** Session last_active_query */
                last_active_query?: (string|null);

                /** Session id */
                id?: (Uint8Array|null);

                /** Session alloc_bytes */
                alloc_bytes?: (Long|null);

                /** Session max_alloc_bytes */
                max_alloc_bytes?: (Long|null);
            }

            /** Represents a Session. */
            class Session implements ISession {

                /**
                 * Constructs a new Session.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISession);

                /** Session node_id. */
                public node_id: number;

                /** Session username. */
                public username: string;

                /** Session client_address. */
                public client_address: string;

                /** Session application_name. */
                public application_name: string;

                /** Session active_queries. */
                public active_queries: cockroach.server.serverpb.IActiveQuery[];

                /** Session start. */
                public start?: (google.protobuf.ITimestamp|null);

                /** Session kv_txn_id. */
                public kv_txn_id: Uint8Array;

                /** Session last_active_query. */
                public last_active_query: string;

                /** Session id. */
                public id: Uint8Array;

                /** Session alloc_bytes. */
                public alloc_bytes: Long;

                /** Session max_alloc_bytes. */
                public max_alloc_bytes: Long;

                /**
                 * Creates a new Session instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Session instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISession): cockroach.server.serverpb.Session;

                /**
                 * Encodes the specified Session message. Does not implicitly {@link cockroach.server.serverpb.Session.verify|verify} messages.
                 * @param message Session message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISession, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Session message, length delimited. Does not implicitly {@link cockroach.server.serverpb.Session.verify|verify} messages.
                 * @param message Session message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISession, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Session message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Session
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.Session;

                /**
                 * Decodes a Session message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Session
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.Session;

                /**
                 * Verifies a Session message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Session message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Session
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.Session;

                /**
                 * Creates a plain object from a Session message. Also converts values to other types if specified.
                 * @param message Session
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.Session, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Session to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ListSessionsError. */
            interface IListSessionsError {

                /** ListSessionsError node_id */
                node_id?: (number|null);

                /** ListSessionsError message */
                message?: (string|null);
            }

            /** Represents a ListSessionsError. */
            class ListSessionsError implements IListSessionsError {

                /**
                 * Constructs a new ListSessionsError.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IListSessionsError);

                /** ListSessionsError node_id. */
                public node_id: number;

                /** ListSessionsError message. */
                public message: string;

                /**
                 * Creates a new ListSessionsError instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ListSessionsError instance
                 */
                public static create(properties?: cockroach.server.serverpb.IListSessionsError): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Encodes the specified ListSessionsError message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsError.verify|verify} messages.
                 * @param message ListSessionsError message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IListSessionsError, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsError message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsError.verify|verify} messages.
                 * @param message ListSessionsError message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IListSessionsError, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsError message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ListSessionsError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Decodes a ListSessionsError message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ListSessionsError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Verifies a ListSessionsError message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListSessionsError message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListSessionsError
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Creates a plain object from a ListSessionsError message. Also converts values to other types if specified.
                 * @param message ListSessionsError
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsError, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsError to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ListSessionsResponse. */
            interface IListSessionsResponse {

                /** ListSessionsResponse sessions */
                sessions?: (cockroach.server.serverpb.ISession[]|null);

                /** ListSessionsResponse errors */
                errors?: (cockroach.server.serverpb.IListSessionsError[]|null);
            }

            /** Represents a ListSessionsResponse. */
            class ListSessionsResponse implements IListSessionsResponse {

                /**
                 * Constructs a new ListSessionsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IListSessionsResponse);

                /** ListSessionsResponse sessions. */
                public sessions: cockroach.server.serverpb.ISession[];

                /** ListSessionsResponse errors. */
                public errors: cockroach.server.serverpb.IListSessionsError[];

                /**
                 * Creates a new ListSessionsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ListSessionsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IListSessionsResponse): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Encodes the specified ListSessionsResponse message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsResponse.verify|verify} messages.
                 * @param message ListSessionsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IListSessionsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsResponse.verify|verify} messages.
                 * @param message ListSessionsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IListSessionsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ListSessionsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Decodes a ListSessionsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ListSessionsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Verifies a ListSessionsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ListSessionsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ListSessionsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Creates a plain object from a ListSessionsResponse message. Also converts values to other types if specified.
                 * @param message ListSessionsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CancelQueryRequest. */
            interface ICancelQueryRequest {

                /** CancelQueryRequest node_id */
                node_id?: (string|null);

                /** CancelQueryRequest query_id */
                query_id?: (string|null);

                /** CancelQueryRequest username */
                username?: (string|null);
            }

            /** Represents a CancelQueryRequest. */
            class CancelQueryRequest implements ICancelQueryRequest {

                /**
                 * Constructs a new CancelQueryRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICancelQueryRequest);

                /** CancelQueryRequest node_id. */
                public node_id: string;

                /** CancelQueryRequest query_id. */
                public query_id: string;

                /** CancelQueryRequest username. */
                public username: string;

                /**
                 * Creates a new CancelQueryRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CancelQueryRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICancelQueryRequest): cockroach.server.serverpb.CancelQueryRequest;

                /**
                 * Encodes the specified CancelQueryRequest message. Does not implicitly {@link cockroach.server.serverpb.CancelQueryRequest.verify|verify} messages.
                 * @param message CancelQueryRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICancelQueryRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CancelQueryRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CancelQueryRequest.verify|verify} messages.
                 * @param message CancelQueryRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICancelQueryRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CancelQueryRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CancelQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CancelQueryRequest;

                /**
                 * Decodes a CancelQueryRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CancelQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CancelQueryRequest;

                /**
                 * Verifies a CancelQueryRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CancelQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CancelQueryRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CancelQueryRequest;

                /**
                 * Creates a plain object from a CancelQueryRequest message. Also converts values to other types if specified.
                 * @param message CancelQueryRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CancelQueryRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CancelQueryRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CancelQueryResponse. */
            interface ICancelQueryResponse {

                /** CancelQueryResponse canceled */
                canceled?: (boolean|null);

                /** CancelQueryResponse error */
                error?: (string|null);
            }

            /** Represents a CancelQueryResponse. */
            class CancelQueryResponse implements ICancelQueryResponse {

                /**
                 * Constructs a new CancelQueryResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICancelQueryResponse);

                /** CancelQueryResponse canceled. */
                public canceled: boolean;

                /** CancelQueryResponse error. */
                public error: string;

                /**
                 * Creates a new CancelQueryResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CancelQueryResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICancelQueryResponse): cockroach.server.serverpb.CancelQueryResponse;

                /**
                 * Encodes the specified CancelQueryResponse message. Does not implicitly {@link cockroach.server.serverpb.CancelQueryResponse.verify|verify} messages.
                 * @param message CancelQueryResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICancelQueryResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CancelQueryResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CancelQueryResponse.verify|verify} messages.
                 * @param message CancelQueryResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICancelQueryResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CancelQueryResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CancelQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CancelQueryResponse;

                /**
                 * Decodes a CancelQueryResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CancelQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CancelQueryResponse;

                /**
                 * Verifies a CancelQueryResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CancelQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CancelQueryResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CancelQueryResponse;

                /**
                 * Creates a plain object from a CancelQueryResponse message. Also converts values to other types if specified.
                 * @param message CancelQueryResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CancelQueryResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CancelQueryResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CancelSessionRequest. */
            interface ICancelSessionRequest {

                /** CancelSessionRequest node_id */
                node_id?: (string|null);

                /** CancelSessionRequest session_id */
                session_id?: (Uint8Array|null);

                /** CancelSessionRequest username */
                username?: (string|null);
            }

            /** Represents a CancelSessionRequest. */
            class CancelSessionRequest implements ICancelSessionRequest {

                /**
                 * Constructs a new CancelSessionRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICancelSessionRequest);

                /** CancelSessionRequest node_id. */
                public node_id: string;

                /** CancelSessionRequest session_id. */
                public session_id: Uint8Array;

                /** CancelSessionRequest username. */
                public username: string;

                /**
                 * Creates a new CancelSessionRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CancelSessionRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICancelSessionRequest): cockroach.server.serverpb.CancelSessionRequest;

                /**
                 * Encodes the specified CancelSessionRequest message. Does not implicitly {@link cockroach.server.serverpb.CancelSessionRequest.verify|verify} messages.
                 * @param message CancelSessionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICancelSessionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CancelSessionRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CancelSessionRequest.verify|verify} messages.
                 * @param message CancelSessionRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICancelSessionRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CancelSessionRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CancelSessionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CancelSessionRequest;

                /**
                 * Decodes a CancelSessionRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CancelSessionRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CancelSessionRequest;

                /**
                 * Verifies a CancelSessionRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CancelSessionRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CancelSessionRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CancelSessionRequest;

                /**
                 * Creates a plain object from a CancelSessionRequest message. Also converts values to other types if specified.
                 * @param message CancelSessionRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CancelSessionRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CancelSessionRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CancelSessionResponse. */
            interface ICancelSessionResponse {

                /** CancelSessionResponse canceled */
                canceled?: (boolean|null);

                /** CancelSessionResponse error */
                error?: (string|null);
            }

            /** Represents a CancelSessionResponse. */
            class CancelSessionResponse implements ICancelSessionResponse {

                /**
                 * Constructs a new CancelSessionResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ICancelSessionResponse);

                /** CancelSessionResponse canceled. */
                public canceled: boolean;

                /** CancelSessionResponse error. */
                public error: string;

                /**
                 * Creates a new CancelSessionResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CancelSessionResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ICancelSessionResponse): cockroach.server.serverpb.CancelSessionResponse;

                /**
                 * Encodes the specified CancelSessionResponse message. Does not implicitly {@link cockroach.server.serverpb.CancelSessionResponse.verify|verify} messages.
                 * @param message CancelSessionResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ICancelSessionResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CancelSessionResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CancelSessionResponse.verify|verify} messages.
                 * @param message CancelSessionResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ICancelSessionResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CancelSessionResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CancelSessionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CancelSessionResponse;

                /**
                 * Decodes a CancelSessionResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CancelSessionResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CancelSessionResponse;

                /**
                 * Verifies a CancelSessionResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CancelSessionResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CancelSessionResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CancelSessionResponse;

                /**
                 * Creates a plain object from a CancelSessionResponse message. Also converts values to other types if specified.
                 * @param message CancelSessionResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CancelSessionResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CancelSessionResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SpanStatsRequest. */
            interface ISpanStatsRequest {

                /** SpanStatsRequest node_id */
                node_id?: (string|null);

                /** SpanStatsRequest start_key */
                start_key?: (Uint8Array|null);

                /** SpanStatsRequest end_key */
                end_key?: (Uint8Array|null);
            }

            /** Represents a SpanStatsRequest. */
            class SpanStatsRequest implements ISpanStatsRequest {

                /**
                 * Constructs a new SpanStatsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISpanStatsRequest);

                /** SpanStatsRequest node_id. */
                public node_id: string;

                /** SpanStatsRequest start_key. */
                public start_key: Uint8Array;

                /** SpanStatsRequest end_key. */
                public end_key: Uint8Array;

                /**
                 * Creates a new SpanStatsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SpanStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISpanStatsRequest): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Encodes the specified SpanStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.SpanStatsRequest.verify|verify} messages.
                 * @param message SpanStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISpanStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SpanStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SpanStatsRequest.verify|verify} messages.
                 * @param message SpanStatsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISpanStatsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SpanStatsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SpanStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Decodes a SpanStatsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SpanStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Verifies a SpanStatsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SpanStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SpanStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Creates a plain object from a SpanStatsRequest message. Also converts values to other types if specified.
                 * @param message SpanStatsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SpanStatsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SpanStatsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SpanStatsResponse. */
            interface ISpanStatsResponse {

                /** SpanStatsResponse range_count */
                range_count?: (number|null);

                /** SpanStatsResponse approximate_disk_bytes */
                approximate_disk_bytes?: (Long|null);

                /** SpanStatsResponse total_stats */
                total_stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);
            }

            /** Represents a SpanStatsResponse. */
            class SpanStatsResponse implements ISpanStatsResponse {

                /**
                 * Constructs a new SpanStatsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISpanStatsResponse);

                /** SpanStatsResponse range_count. */
                public range_count: number;

                /** SpanStatsResponse approximate_disk_bytes. */
                public approximate_disk_bytes: Long;

                /** SpanStatsResponse total_stats. */
                public total_stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

                /**
                 * Creates a new SpanStatsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SpanStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISpanStatsResponse): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Encodes the specified SpanStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.SpanStatsResponse.verify|verify} messages.
                 * @param message SpanStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISpanStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SpanStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SpanStatsResponse.verify|verify} messages.
                 * @param message SpanStatsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISpanStatsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SpanStatsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SpanStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Decodes a SpanStatsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SpanStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Verifies a SpanStatsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SpanStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SpanStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Creates a plain object from a SpanStatsResponse message. Also converts values to other types if specified.
                 * @param message SpanStatsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SpanStatsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SpanStatsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ProblemRangesRequest. */
            interface IProblemRangesRequest {

                /** ProblemRangesRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a ProblemRangesRequest. */
            class ProblemRangesRequest implements IProblemRangesRequest {

                /**
                 * Constructs a new ProblemRangesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IProblemRangesRequest);

                /** ProblemRangesRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new ProblemRangesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ProblemRangesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IProblemRangesRequest): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Encodes the specified ProblemRangesRequest message. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesRequest.verify|verify} messages.
                 * @param message ProblemRangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IProblemRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ProblemRangesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesRequest.verify|verify} messages.
                 * @param message ProblemRangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IProblemRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ProblemRangesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ProblemRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Decodes a ProblemRangesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ProblemRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Verifies a ProblemRangesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ProblemRangesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ProblemRangesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Creates a plain object from a ProblemRangesRequest message. Also converts values to other types if specified.
                 * @param message ProblemRangesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ProblemRangesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ProblemRangesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ProblemRangesResponse. */
            interface IProblemRangesResponse {

                /** ProblemRangesResponse node_id */
                node_id?: (number|null);

                /** ProblemRangesResponse problems_by_node_id */
                problems_by_node_id?: ({ [k: string]: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems }|null);
            }

            /** Represents a ProblemRangesResponse. */
            class ProblemRangesResponse implements IProblemRangesResponse {

                /**
                 * Constructs a new ProblemRangesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IProblemRangesResponse);

                /** ProblemRangesResponse node_id. */
                public node_id: number;

                /** ProblemRangesResponse problems_by_node_id. */
                public problems_by_node_id: { [k: string]: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems };

                /**
                 * Creates a new ProblemRangesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ProblemRangesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IProblemRangesResponse): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Encodes the specified ProblemRangesResponse message. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.verify|verify} messages.
                 * @param message ProblemRangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IProblemRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ProblemRangesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.verify|verify} messages.
                 * @param message ProblemRangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IProblemRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ProblemRangesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ProblemRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Decodes a ProblemRangesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ProblemRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Verifies a ProblemRangesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ProblemRangesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ProblemRangesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Creates a plain object from a ProblemRangesResponse message. Also converts values to other types if specified.
                 * @param message ProblemRangesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ProblemRangesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ProblemRangesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ProblemRangesResponse {

                /** Properties of a NodeProblems. */
                interface INodeProblems {

                    /** NodeProblems error_message */
                    error_message?: (string|null);

                    /** NodeProblems unavailable_range_ids */
                    unavailable_range_ids?: (Long[]|null);

                    /** NodeProblems raft_leader_not_lease_holder_range_ids */
                    raft_leader_not_lease_holder_range_ids?: (Long[]|null);

                    /** NodeProblems no_raft_leader_range_ids */
                    no_raft_leader_range_ids?: (Long[]|null);

                    /** NodeProblems no_lease_range_ids */
                    no_lease_range_ids?: (Long[]|null);

                    /** NodeProblems underreplicated_range_ids */
                    underreplicated_range_ids?: (Long[]|null);

                    /** NodeProblems overreplicated_range_ids */
                    overreplicated_range_ids?: (Long[]|null);

                    /** NodeProblems quiescent_equals_ticking_range_ids */
                    quiescent_equals_ticking_range_ids?: (Long[]|null);

                    /** NodeProblems raft_log_too_large_range_ids */
                    raft_log_too_large_range_ids?: (Long[]|null);
                }

                /** Represents a NodeProblems. */
                class NodeProblems implements INodeProblems {

                    /**
                     * Constructs a new NodeProblems.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems);

                    /** NodeProblems error_message. */
                    public error_message: string;

                    /** NodeProblems unavailable_range_ids. */
                    public unavailable_range_ids: Long[];

                    /** NodeProblems raft_leader_not_lease_holder_range_ids. */
                    public raft_leader_not_lease_holder_range_ids: Long[];

                    /** NodeProblems no_raft_leader_range_ids. */
                    public no_raft_leader_range_ids: Long[];

                    /** NodeProblems no_lease_range_ids. */
                    public no_lease_range_ids: Long[];

                    /** NodeProblems underreplicated_range_ids. */
                    public underreplicated_range_ids: Long[];

                    /** NodeProblems overreplicated_range_ids. */
                    public overreplicated_range_ids: Long[];

                    /** NodeProblems quiescent_equals_ticking_range_ids. */
                    public quiescent_equals_ticking_range_ids: Long[];

                    /** NodeProblems raft_log_too_large_range_ids. */
                    public raft_log_too_large_range_ids: Long[];

                    /**
                     * Creates a new NodeProblems instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns NodeProblems instance
                     */
                    public static create(properties?: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems): cockroach.server.serverpb.ProblemRangesResponse.NodeProblems;

                    /**
                     * Encodes the specified NodeProblems message. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.NodeProblems.verify|verify} messages.
                     * @param message NodeProblems message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified NodeProblems message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.NodeProblems.verify|verify} messages.
                     * @param message NodeProblems message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.ProblemRangesResponse.INodeProblems, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a NodeProblems message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns NodeProblems
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProblemRangesResponse.NodeProblems;

                    /**
                     * Decodes a NodeProblems message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns NodeProblems
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProblemRangesResponse.NodeProblems;

                    /**
                     * Verifies a NodeProblems message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a NodeProblems message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns NodeProblems
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesResponse.NodeProblems;

                    /**
                     * Creates a plain object from a NodeProblems message. Also converts values to other types if specified.
                     * @param message NodeProblems
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.ProblemRangesResponse.NodeProblems, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this NodeProblems to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a HotRangesRequest. */
            interface IHotRangesRequest {

                /** HotRangesRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a HotRangesRequest. */
            class HotRangesRequest implements IHotRangesRequest {

                /**
                 * Constructs a new HotRangesRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IHotRangesRequest);

                /** HotRangesRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new HotRangesRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HotRangesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IHotRangesRequest): cockroach.server.serverpb.HotRangesRequest;

                /**
                 * Encodes the specified HotRangesRequest message. Does not implicitly {@link cockroach.server.serverpb.HotRangesRequest.verify|verify} messages.
                 * @param message HotRangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IHotRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HotRangesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HotRangesRequest.verify|verify} messages.
                 * @param message HotRangesRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IHotRangesRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HotRangesRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HotRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HotRangesRequest;

                /**
                 * Decodes a HotRangesRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HotRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HotRangesRequest;

                /**
                 * Verifies a HotRangesRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HotRangesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HotRangesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HotRangesRequest;

                /**
                 * Creates a plain object from a HotRangesRequest message. Also converts values to other types if specified.
                 * @param message HotRangesRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HotRangesRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HotRangesRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HotRangesResponse. */
            interface IHotRangesResponse {

                /** HotRangesResponse node_id */
                node_id?: (number|null);

                /** HotRangesResponse hot_ranges_by_node_id */
                hot_ranges_by_node_id?: ({ [k: string]: cockroach.server.serverpb.HotRangesResponse.INodeResponse }|null);
            }

            /** Represents a HotRangesResponse. */
            class HotRangesResponse implements IHotRangesResponse {

                /**
                 * Constructs a new HotRangesResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IHotRangesResponse);

                /** HotRangesResponse node_id. */
                public node_id: number;

                /** HotRangesResponse hot_ranges_by_node_id. */
                public hot_ranges_by_node_id: { [k: string]: cockroach.server.serverpb.HotRangesResponse.INodeResponse };

                /**
                 * Creates a new HotRangesResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HotRangesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IHotRangesResponse): cockroach.server.serverpb.HotRangesResponse;

                /**
                 * Encodes the specified HotRangesResponse message. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.verify|verify} messages.
                 * @param message HotRangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IHotRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HotRangesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.verify|verify} messages.
                 * @param message HotRangesResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IHotRangesResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HotRangesResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HotRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HotRangesResponse;

                /**
                 * Decodes a HotRangesResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HotRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HotRangesResponse;

                /**
                 * Verifies a HotRangesResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HotRangesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HotRangesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HotRangesResponse;

                /**
                 * Creates a plain object from a HotRangesResponse message. Also converts values to other types if specified.
                 * @param message HotRangesResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HotRangesResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HotRangesResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace HotRangesResponse {

                /** Properties of a HotRange. */
                interface IHotRange {

                    /** HotRange desc */
                    desc?: (cockroach.roachpb.IRangeDescriptor|null);

                    /** HotRange queries_per_second */
                    queries_per_second?: (number|null);
                }

                /** Represents a HotRange. */
                class HotRange implements IHotRange {

                    /**
                     * Constructs a new HotRange.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.HotRangesResponse.IHotRange);

                    /** HotRange desc. */
                    public desc?: (cockroach.roachpb.IRangeDescriptor|null);

                    /** HotRange queries_per_second. */
                    public queries_per_second: number;

                    /**
                     * Creates a new HotRange instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns HotRange instance
                     */
                    public static create(properties?: cockroach.server.serverpb.HotRangesResponse.IHotRange): cockroach.server.serverpb.HotRangesResponse.HotRange;

                    /**
                     * Encodes the specified HotRange message. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.HotRange.verify|verify} messages.
                     * @param message HotRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.HotRangesResponse.IHotRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified HotRange message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.HotRange.verify|verify} messages.
                     * @param message HotRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.HotRangesResponse.IHotRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a HotRange message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns HotRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HotRangesResponse.HotRange;

                    /**
                     * Decodes a HotRange message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns HotRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HotRangesResponse.HotRange;

                    /**
                     * Verifies a HotRange message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HotRange message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HotRange
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HotRangesResponse.HotRange;

                    /**
                     * Creates a plain object from a HotRange message. Also converts values to other types if specified.
                     * @param message HotRange
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.HotRangesResponse.HotRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HotRange to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a StoreResponse. */
                interface IStoreResponse {

                    /** StoreResponse store_id */
                    store_id?: (number|null);

                    /** StoreResponse hot_ranges */
                    hot_ranges?: (cockroach.server.serverpb.HotRangesResponse.IHotRange[]|null);
                }

                /** Represents a StoreResponse. */
                class StoreResponse implements IStoreResponse {

                    /**
                     * Constructs a new StoreResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.HotRangesResponse.IStoreResponse);

                    /** StoreResponse store_id. */
                    public store_id: number;

                    /** StoreResponse hot_ranges. */
                    public hot_ranges: cockroach.server.serverpb.HotRangesResponse.IHotRange[];

                    /**
                     * Creates a new StoreResponse instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns StoreResponse instance
                     */
                    public static create(properties?: cockroach.server.serverpb.HotRangesResponse.IStoreResponse): cockroach.server.serverpb.HotRangesResponse.StoreResponse;

                    /**
                     * Encodes the specified StoreResponse message. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.StoreResponse.verify|verify} messages.
                     * @param message StoreResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.HotRangesResponse.IStoreResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified StoreResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.StoreResponse.verify|verify} messages.
                     * @param message StoreResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.HotRangesResponse.IStoreResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a StoreResponse message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns StoreResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HotRangesResponse.StoreResponse;

                    /**
                     * Decodes a StoreResponse message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns StoreResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HotRangesResponse.StoreResponse;

                    /**
                     * Verifies a StoreResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a StoreResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns StoreResponse
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HotRangesResponse.StoreResponse;

                    /**
                     * Creates a plain object from a StoreResponse message. Also converts values to other types if specified.
                     * @param message StoreResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.HotRangesResponse.StoreResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this StoreResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a NodeResponse. */
                interface INodeResponse {

                    /** NodeResponse error_message */
                    error_message?: (string|null);

                    /** NodeResponse stores */
                    stores?: (cockroach.server.serverpb.HotRangesResponse.IStoreResponse[]|null);
                }

                /** Represents a NodeResponse. */
                class NodeResponse implements INodeResponse {

                    /**
                     * Constructs a new NodeResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.HotRangesResponse.INodeResponse);

                    /** NodeResponse error_message. */
                    public error_message: string;

                    /** NodeResponse stores. */
                    public stores: cockroach.server.serverpb.HotRangesResponse.IStoreResponse[];

                    /**
                     * Creates a new NodeResponse instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns NodeResponse instance
                     */
                    public static create(properties?: cockroach.server.serverpb.HotRangesResponse.INodeResponse): cockroach.server.serverpb.HotRangesResponse.NodeResponse;

                    /**
                     * Encodes the specified NodeResponse message. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.NodeResponse.verify|verify} messages.
                     * @param message NodeResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.HotRangesResponse.INodeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified NodeResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HotRangesResponse.NodeResponse.verify|verify} messages.
                     * @param message NodeResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.HotRangesResponse.INodeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a NodeResponse message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns NodeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HotRangesResponse.NodeResponse;

                    /**
                     * Decodes a NodeResponse message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns NodeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HotRangesResponse.NodeResponse;

                    /**
                     * Verifies a NodeResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a NodeResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns NodeResponse
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HotRangesResponse.NodeResponse;

                    /**
                     * Creates a plain object from a NodeResponse message. Also converts values to other types if specified.
                     * @param message NodeResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.HotRangesResponse.NodeResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this NodeResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a RangeRequest. */
            interface IRangeRequest {

                /** RangeRequest range_id */
                range_id?: (Long|null);
            }

            /** Represents a RangeRequest. */
            class RangeRequest implements IRangeRequest {

                /**
                 * Constructs a new RangeRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeRequest);

                /** RangeRequest range_id. */
                public range_id: Long;

                /**
                 * Creates a new RangeRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeRequest): cockroach.server.serverpb.RangeRequest;

                /**
                 * Encodes the specified RangeRequest message. Does not implicitly {@link cockroach.server.serverpb.RangeRequest.verify|verify} messages.
                 * @param message RangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeRequest.verify|verify} messages.
                 * @param message RangeRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeRequest;

                /**
                 * Decodes a RangeRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeRequest;

                /**
                 * Verifies a RangeRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeRequest;

                /**
                 * Creates a plain object from a RangeRequest message. Also converts values to other types if specified.
                 * @param message RangeRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangeResponse. */
            interface IRangeResponse {

                /** RangeResponse node_id */
                node_id?: (number|null);

                /** RangeResponse range_id */
                range_id?: (Long|null);

                /** RangeResponse responses_by_node_id */
                responses_by_node_id?: ({ [k: string]: cockroach.server.serverpb.RangeResponse.INodeResponse }|null);
            }

            /** Represents a RangeResponse. */
            class RangeResponse implements IRangeResponse {

                /**
                 * Constructs a new RangeResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IRangeResponse);

                /** RangeResponse node_id. */
                public node_id: number;

                /** RangeResponse range_id. */
                public range_id: Long;

                /** RangeResponse responses_by_node_id. */
                public responses_by_node_id: { [k: string]: cockroach.server.serverpb.RangeResponse.INodeResponse };

                /**
                 * Creates a new RangeResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IRangeResponse): cockroach.server.serverpb.RangeResponse;

                /**
                 * Encodes the specified RangeResponse message. Does not implicitly {@link cockroach.server.serverpb.RangeResponse.verify|verify} messages.
                 * @param message RangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeResponse.verify|verify} messages.
                 * @param message RangeResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IRangeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeResponse;

                /**
                 * Decodes a RangeResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeResponse;

                /**
                 * Verifies a RangeResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeResponse;

                /**
                 * Creates a plain object from a RangeResponse message. Also converts values to other types if specified.
                 * @param message RangeResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace RangeResponse {

                /** Properties of a NodeResponse. */
                interface INodeResponse {

                    /** NodeResponse response */
                    response?: (boolean|null);

                    /** NodeResponse error_message */
                    error_message?: (string|null);

                    /** NodeResponse infos */
                    infos?: (cockroach.server.serverpb.IRangeInfo[]|null);
                }

                /** Represents a NodeResponse. */
                class NodeResponse implements INodeResponse {

                    /**
                     * Constructs a new NodeResponse.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.RangeResponse.INodeResponse);

                    /** NodeResponse response. */
                    public response: boolean;

                    /** NodeResponse error_message. */
                    public error_message: string;

                    /** NodeResponse infos. */
                    public infos: cockroach.server.serverpb.IRangeInfo[];

                    /**
                     * Creates a new NodeResponse instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns NodeResponse instance
                     */
                    public static create(properties?: cockroach.server.serverpb.RangeResponse.INodeResponse): cockroach.server.serverpb.RangeResponse.NodeResponse;

                    /**
                     * Encodes the specified NodeResponse message. Does not implicitly {@link cockroach.server.serverpb.RangeResponse.NodeResponse.verify|verify} messages.
                     * @param message NodeResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.RangeResponse.INodeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified NodeResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeResponse.NodeResponse.verify|verify} messages.
                     * @param message NodeResponse message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.RangeResponse.INodeResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a NodeResponse message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns NodeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeResponse.NodeResponse;

                    /**
                     * Decodes a NodeResponse message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns NodeResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeResponse.NodeResponse;

                    /**
                     * Verifies a NodeResponse message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a NodeResponse message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns NodeResponse
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeResponse.NodeResponse;

                    /**
                     * Creates a plain object from a NodeResponse message. Also converts values to other types if specified.
                     * @param message NodeResponse
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.RangeResponse.NodeResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this NodeResponse to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a DiagnosticsRequest. */
            interface IDiagnosticsRequest {

                /** DiagnosticsRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a DiagnosticsRequest. */
            class DiagnosticsRequest implements IDiagnosticsRequest {

                /**
                 * Constructs a new DiagnosticsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IDiagnosticsRequest);

                /** DiagnosticsRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new DiagnosticsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DiagnosticsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IDiagnosticsRequest): cockroach.server.serverpb.DiagnosticsRequest;

                /**
                 * Encodes the specified DiagnosticsRequest message. Does not implicitly {@link cockroach.server.serverpb.DiagnosticsRequest.verify|verify} messages.
                 * @param message DiagnosticsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IDiagnosticsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DiagnosticsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DiagnosticsRequest.verify|verify} messages.
                 * @param message DiagnosticsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IDiagnosticsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DiagnosticsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DiagnosticsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DiagnosticsRequest;

                /**
                 * Decodes a DiagnosticsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DiagnosticsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DiagnosticsRequest;

                /**
                 * Verifies a DiagnosticsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DiagnosticsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DiagnosticsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DiagnosticsRequest;

                /**
                 * Creates a plain object from a DiagnosticsRequest message. Also converts values to other types if specified.
                 * @param message DiagnosticsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DiagnosticsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DiagnosticsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StoresRequest. */
            interface IStoresRequest {

                /** StoresRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a StoresRequest. */
            class StoresRequest implements IStoresRequest {

                /**
                 * Constructs a new StoresRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStoresRequest);

                /** StoresRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new StoresRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StoresRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStoresRequest): cockroach.server.serverpb.StoresRequest;

                /**
                 * Encodes the specified StoresRequest message. Does not implicitly {@link cockroach.server.serverpb.StoresRequest.verify|verify} messages.
                 * @param message StoresRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStoresRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StoresRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StoresRequest.verify|verify} messages.
                 * @param message StoresRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStoresRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StoresRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StoresRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StoresRequest;

                /**
                 * Decodes a StoresRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StoresRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StoresRequest;

                /**
                 * Verifies a StoresRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StoresRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StoresRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StoresRequest;

                /**
                 * Creates a plain object from a StoresRequest message. Also converts values to other types if specified.
                 * @param message StoresRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StoresRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StoresRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StoreDetails. */
            interface IStoreDetails {

                /** StoreDetails store_id */
                store_id?: (number|null);

                /** StoreDetails encryption_status */
                encryption_status?: (Uint8Array|null);

                /** StoreDetails total_files */
                total_files?: (Long|null);

                /** StoreDetails total_bytes */
                total_bytes?: (Long|null);

                /** StoreDetails active_key_files */
                active_key_files?: (Long|null);

                /** StoreDetails active_key_bytes */
                active_key_bytes?: (Long|null);
            }

            /** Represents a StoreDetails. */
            class StoreDetails implements IStoreDetails {

                /**
                 * Constructs a new StoreDetails.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStoreDetails);

                /** StoreDetails store_id. */
                public store_id: number;

                /** StoreDetails encryption_status. */
                public encryption_status: Uint8Array;

                /** StoreDetails total_files. */
                public total_files: Long;

                /** StoreDetails total_bytes. */
                public total_bytes: Long;

                /** StoreDetails active_key_files. */
                public active_key_files: Long;

                /** StoreDetails active_key_bytes. */
                public active_key_bytes: Long;

                /**
                 * Creates a new StoreDetails instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StoreDetails instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStoreDetails): cockroach.server.serverpb.StoreDetails;

                /**
                 * Encodes the specified StoreDetails message. Does not implicitly {@link cockroach.server.serverpb.StoreDetails.verify|verify} messages.
                 * @param message StoreDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStoreDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StoreDetails message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StoreDetails.verify|verify} messages.
                 * @param message StoreDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStoreDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StoreDetails message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StoreDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StoreDetails;

                /**
                 * Decodes a StoreDetails message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StoreDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StoreDetails;

                /**
                 * Verifies a StoreDetails message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StoreDetails message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StoreDetails
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StoreDetails;

                /**
                 * Creates a plain object from a StoreDetails message. Also converts values to other types if specified.
                 * @param message StoreDetails
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StoreDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StoreDetails to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StoresResponse. */
            interface IStoresResponse {

                /** StoresResponse stores */
                stores?: (cockroach.server.serverpb.IStoreDetails[]|null);
            }

            /** Represents a StoresResponse. */
            class StoresResponse implements IStoresResponse {

                /**
                 * Constructs a new StoresResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStoresResponse);

                /** StoresResponse stores. */
                public stores: cockroach.server.serverpb.IStoreDetails[];

                /**
                 * Creates a new StoresResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StoresResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStoresResponse): cockroach.server.serverpb.StoresResponse;

                /**
                 * Encodes the specified StoresResponse message. Does not implicitly {@link cockroach.server.serverpb.StoresResponse.verify|verify} messages.
                 * @param message StoresResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStoresResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StoresResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StoresResponse.verify|verify} messages.
                 * @param message StoresResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStoresResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StoresResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StoresResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StoresResponse;

                /**
                 * Decodes a StoresResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StoresResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StoresResponse;

                /**
                 * Verifies a StoresResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StoresResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StoresResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StoresResponse;

                /**
                 * Creates a plain object from a StoresResponse message. Also converts values to other types if specified.
                 * @param message StoresResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StoresResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StoresResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StatementsRequest. */
            interface IStatementsRequest {

                /** StatementsRequest node_id */
                node_id?: (string|null);
            }

            /** Represents a StatementsRequest. */
            class StatementsRequest implements IStatementsRequest {

                /**
                 * Constructs a new StatementsRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStatementsRequest);

                /** StatementsRequest node_id. */
                public node_id: string;

                /**
                 * Creates a new StatementsRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StatementsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStatementsRequest): cockroach.server.serverpb.StatementsRequest;

                /**
                 * Encodes the specified StatementsRequest message. Does not implicitly {@link cockroach.server.serverpb.StatementsRequest.verify|verify} messages.
                 * @param message StatementsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStatementsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StatementsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StatementsRequest.verify|verify} messages.
                 * @param message StatementsRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStatementsRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StatementsRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StatementsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StatementsRequest;

                /**
                 * Decodes a StatementsRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StatementsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StatementsRequest;

                /**
                 * Verifies a StatementsRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StatementsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StatementsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StatementsRequest;

                /**
                 * Creates a plain object from a StatementsRequest message. Also converts values to other types if specified.
                 * @param message StatementsRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StatementsRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StatementsRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StatementsResponse. */
            interface IStatementsResponse {

                /** StatementsResponse statements */
                statements?: (cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics[]|null);

                /** StatementsResponse last_reset */
                last_reset?: (google.protobuf.ITimestamp|null);

                /** StatementsResponse internal_app_name_prefix */
                internal_app_name_prefix?: (string|null);
            }

            /** Represents a StatementsResponse. */
            class StatementsResponse implements IStatementsResponse {

                /**
                 * Constructs a new StatementsResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IStatementsResponse);

                /** StatementsResponse statements. */
                public statements: cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics[];

                /** StatementsResponse last_reset. */
                public last_reset?: (google.protobuf.ITimestamp|null);

                /** StatementsResponse internal_app_name_prefix. */
                public internal_app_name_prefix: string;

                /**
                 * Creates a new StatementsResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StatementsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IStatementsResponse): cockroach.server.serverpb.StatementsResponse;

                /**
                 * Encodes the specified StatementsResponse message. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.verify|verify} messages.
                 * @param message StatementsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IStatementsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StatementsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.verify|verify} messages.
                 * @param message StatementsResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IStatementsResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StatementsResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StatementsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StatementsResponse;

                /**
                 * Decodes a StatementsResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StatementsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StatementsResponse;

                /**
                 * Verifies a StatementsResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StatementsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StatementsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StatementsResponse;

                /**
                 * Creates a plain object from a StatementsResponse message. Also converts values to other types if specified.
                 * @param message StatementsResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StatementsResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StatementsResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace StatementsResponse {

                /** Properties of an ExtendedStatementStatisticsKey. */
                interface IExtendedStatementStatisticsKey {

                    /** ExtendedStatementStatisticsKey key_data */
                    key_data?: (cockroach.sql.IStatementStatisticsKey|null);

                    /** ExtendedStatementStatisticsKey node_id */
                    node_id?: (number|null);
                }

                /** Represents an ExtendedStatementStatisticsKey. */
                class ExtendedStatementStatisticsKey implements IExtendedStatementStatisticsKey {

                    /**
                     * Constructs a new ExtendedStatementStatisticsKey.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey);

                    /** ExtendedStatementStatisticsKey key_data. */
                    public key_data?: (cockroach.sql.IStatementStatisticsKey|null);

                    /** ExtendedStatementStatisticsKey node_id. */
                    public node_id: number;

                    /**
                     * Creates a new ExtendedStatementStatisticsKey instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ExtendedStatementStatisticsKey instance
                     */
                    public static create(properties?: cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey): cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey;

                    /**
                     * Encodes the specified ExtendedStatementStatisticsKey message. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey.verify|verify} messages.
                     * @param message ExtendedStatementStatisticsKey message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ExtendedStatementStatisticsKey message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey.verify|verify} messages.
                     * @param message ExtendedStatementStatisticsKey message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an ExtendedStatementStatisticsKey message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ExtendedStatementStatisticsKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey;

                    /**
                     * Decodes an ExtendedStatementStatisticsKey message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ExtendedStatementStatisticsKey
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey;

                    /**
                     * Verifies an ExtendedStatementStatisticsKey message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an ExtendedStatementStatisticsKey message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ExtendedStatementStatisticsKey
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey;

                    /**
                     * Creates a plain object from an ExtendedStatementStatisticsKey message. Also converts values to other types if specified.
                     * @param message ExtendedStatementStatisticsKey
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.StatementsResponse.ExtendedStatementStatisticsKey, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ExtendedStatementStatisticsKey to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CollectedStatementStatistics. */
                interface ICollectedStatementStatistics {

                    /** CollectedStatementStatistics key */
                    key?: (cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey|null);

                    /** CollectedStatementStatistics stats */
                    stats?: (cockroach.sql.IStatementStatistics|null);
                }

                /** Represents a CollectedStatementStatistics. */
                class CollectedStatementStatistics implements ICollectedStatementStatistics {

                    /**
                     * Constructs a new CollectedStatementStatistics.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics);

                    /** CollectedStatementStatistics key. */
                    public key?: (cockroach.server.serverpb.StatementsResponse.IExtendedStatementStatisticsKey|null);

                    /** CollectedStatementStatistics stats. */
                    public stats?: (cockroach.sql.IStatementStatistics|null);

                    /**
                     * Creates a new CollectedStatementStatistics instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CollectedStatementStatistics instance
                     */
                    public static create(properties?: cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics): cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics;

                    /**
                     * Encodes the specified CollectedStatementStatistics message. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics.verify|verify} messages.
                     * @param message CollectedStatementStatistics message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CollectedStatementStatistics message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics.verify|verify} messages.
                     * @param message CollectedStatementStatistics message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.StatementsResponse.ICollectedStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CollectedStatementStatistics message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CollectedStatementStatistics
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics;

                    /**
                     * Decodes a CollectedStatementStatistics message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CollectedStatementStatistics
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics;

                    /**
                     * Verifies a CollectedStatementStatistics message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CollectedStatementStatistics message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CollectedStatementStatistics
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics;

                    /**
                     * Creates a plain object from a CollectedStatementStatistics message. Also converts values to other types if specified.
                     * @param message CollectedStatementStatistics
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.StatementsResponse.CollectedStatementStatistics, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CollectedStatementStatistics to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Represents a Status */
            class Status extends $protobuf.rpc.Service {

                /**
                 * Constructs a new Status service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new Status service using the specified rpc implementation.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 * @returns RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Status;

                /**
                 * Calls Certificates.
                 * @param request CertificatesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CertificatesResponse
                 */
                public certificates(request: cockroach.server.serverpb.ICertificatesRequest, callback: cockroach.server.serverpb.Status.CertificatesCallback): void;

                /**
                 * Calls Certificates.
                 * @param request CertificatesRequest message or plain object
                 * @returns Promise
                 */
                public certificates(request: cockroach.server.serverpb.ICertificatesRequest): Promise<cockroach.server.serverpb.CertificatesResponse>;

                /**
                 * Calls Details.
                 * @param request DetailsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DetailsResponse
                 */
                public details(request: cockroach.server.serverpb.IDetailsRequest, callback: cockroach.server.serverpb.Status.DetailsCallback): void;

                /**
                 * Calls Details.
                 * @param request DetailsRequest message or plain object
                 * @returns Promise
                 */
                public details(request: cockroach.server.serverpb.IDetailsRequest): Promise<cockroach.server.serverpb.DetailsResponse>;

                /**
                 * Calls Nodes.
                 * @param request NodesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and NodesResponse
                 */
                public nodes(request: cockroach.server.serverpb.INodesRequest, callback: cockroach.server.serverpb.Status.NodesCallback): void;

                /**
                 * Calls Nodes.
                 * @param request NodesRequest message or plain object
                 * @returns Promise
                 */
                public nodes(request: cockroach.server.serverpb.INodesRequest): Promise<cockroach.server.serverpb.NodesResponse>;

                /**
                 * Calls Node.
                 * @param request NodeRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and NodeStatus
                 */
                public node(request: cockroach.server.serverpb.INodeRequest, callback: cockroach.server.serverpb.Status.NodeCallback): void;

                /**
                 * Calls Node.
                 * @param request NodeRequest message or plain object
                 * @returns Promise
                 */
                public node(request: cockroach.server.serverpb.INodeRequest): Promise<cockroach.server.status.statuspb.NodeStatus>;

                /**
                 * Calls RaftDebug.
                 * @param request RaftDebugRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and RaftDebugResponse
                 */
                public raftDebug(request: cockroach.server.serverpb.IRaftDebugRequest, callback: cockroach.server.serverpb.Status.RaftDebugCallback): void;

                /**
                 * Calls RaftDebug.
                 * @param request RaftDebugRequest message or plain object
                 * @returns Promise
                 */
                public raftDebug(request: cockroach.server.serverpb.IRaftDebugRequest): Promise<cockroach.server.serverpb.RaftDebugResponse>;

                /**
                 * Calls Ranges.
                 * @param request RangesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and RangesResponse
                 */
                public ranges(request: cockroach.server.serverpb.IRangesRequest, callback: cockroach.server.serverpb.Status.RangesCallback): void;

                /**
                 * Calls Ranges.
                 * @param request RangesRequest message or plain object
                 * @returns Promise
                 */
                public ranges(request: cockroach.server.serverpb.IRangesRequest): Promise<cockroach.server.serverpb.RangesResponse>;

                /**
                 * Calls Gossip.
                 * @param request GossipRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and InfoStatus
                 */
                public gossip(request: cockroach.server.serverpb.IGossipRequest, callback: cockroach.server.serverpb.Status.GossipCallback): void;

                /**
                 * Calls Gossip.
                 * @param request GossipRequest message or plain object
                 * @returns Promise
                 */
                public gossip(request: cockroach.server.serverpb.IGossipRequest): Promise<cockroach.gossip.InfoStatus>;

                /**
                 * Calls EngineStats.
                 * @param request EngineStatsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and EngineStatsResponse
                 */
                public engineStats(request: cockroach.server.serverpb.IEngineStatsRequest, callback: cockroach.server.serverpb.Status.EngineStatsCallback): void;

                /**
                 * Calls EngineStats.
                 * @param request EngineStatsRequest message or plain object
                 * @returns Promise
                 */
                public engineStats(request: cockroach.server.serverpb.IEngineStatsRequest): Promise<cockroach.server.serverpb.EngineStatsResponse>;

                /**
                 * Calls Allocator.
                 * @param request AllocatorRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and AllocatorResponse
                 */
                public allocator(request: cockroach.server.serverpb.IAllocatorRequest, callback: cockroach.server.serverpb.Status.AllocatorCallback): void;

                /**
                 * Calls Allocator.
                 * @param request AllocatorRequest message or plain object
                 * @returns Promise
                 */
                public allocator(request: cockroach.server.serverpb.IAllocatorRequest): Promise<cockroach.server.serverpb.AllocatorResponse>;

                /**
                 * Calls AllocatorRange.
                 * @param request AllocatorRangeRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and AllocatorRangeResponse
                 */
                public allocatorRange(request: cockroach.server.serverpb.IAllocatorRangeRequest, callback: cockroach.server.serverpb.Status.AllocatorRangeCallback): void;

                /**
                 * Calls AllocatorRange.
                 * @param request AllocatorRangeRequest message or plain object
                 * @returns Promise
                 */
                public allocatorRange(request: cockroach.server.serverpb.IAllocatorRangeRequest): Promise<cockroach.server.serverpb.AllocatorRangeResponse>;

                /**
                 * Calls ListSessions.
                 * @param request ListSessionsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ListSessionsResponse
                 */
                public listSessions(request: cockroach.server.serverpb.IListSessionsRequest, callback: cockroach.server.serverpb.Status.ListSessionsCallback): void;

                /**
                 * Calls ListSessions.
                 * @param request ListSessionsRequest message or plain object
                 * @returns Promise
                 */
                public listSessions(request: cockroach.server.serverpb.IListSessionsRequest): Promise<cockroach.server.serverpb.ListSessionsResponse>;

                /**
                 * Calls ListLocalSessions.
                 * @param request ListSessionsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ListSessionsResponse
                 */
                public listLocalSessions(request: cockroach.server.serverpb.IListSessionsRequest, callback: cockroach.server.serverpb.Status.ListLocalSessionsCallback): void;

                /**
                 * Calls ListLocalSessions.
                 * @param request ListSessionsRequest message or plain object
                 * @returns Promise
                 */
                public listLocalSessions(request: cockroach.server.serverpb.IListSessionsRequest): Promise<cockroach.server.serverpb.ListSessionsResponse>;

                /**
                 * Calls CancelQuery.
                 * @param request CancelQueryRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CancelQueryResponse
                 */
                public cancelQuery(request: cockroach.server.serverpb.ICancelQueryRequest, callback: cockroach.server.serverpb.Status.CancelQueryCallback): void;

                /**
                 * Calls CancelQuery.
                 * @param request CancelQueryRequest message or plain object
                 * @returns Promise
                 */
                public cancelQuery(request: cockroach.server.serverpb.ICancelQueryRequest): Promise<cockroach.server.serverpb.CancelQueryResponse>;

                /**
                 * Calls CancelSession.
                 * @param request CancelSessionRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and CancelSessionResponse
                 */
                public cancelSession(request: cockroach.server.serverpb.ICancelSessionRequest, callback: cockroach.server.serverpb.Status.CancelSessionCallback): void;

                /**
                 * Calls CancelSession.
                 * @param request CancelSessionRequest message or plain object
                 * @returns Promise
                 */
                public cancelSession(request: cockroach.server.serverpb.ICancelSessionRequest): Promise<cockroach.server.serverpb.CancelSessionResponse>;

                /**
                 * Calls SpanStats.
                 * @param request SpanStatsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and SpanStatsResponse
                 */
                public spanStats(request: cockroach.server.serverpb.ISpanStatsRequest, callback: cockroach.server.serverpb.Status.SpanStatsCallback): void;

                /**
                 * Calls SpanStats.
                 * @param request SpanStatsRequest message or plain object
                 * @returns Promise
                 */
                public spanStats(request: cockroach.server.serverpb.ISpanStatsRequest): Promise<cockroach.server.serverpb.SpanStatsResponse>;

                /**
                 * Calls Stacks.
                 * @param request StacksRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and JSONResponse
                 */
                public stacks(request: cockroach.server.serverpb.IStacksRequest, callback: cockroach.server.serverpb.Status.StacksCallback): void;

                /**
                 * Calls Stacks.
                 * @param request StacksRequest message or plain object
                 * @returns Promise
                 */
                public stacks(request: cockroach.server.serverpb.IStacksRequest): Promise<cockroach.server.serverpb.JSONResponse>;

                /**
                 * Calls Profile.
                 * @param request ProfileRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and JSONResponse
                 */
                public profile(request: cockroach.server.serverpb.IProfileRequest, callback: cockroach.server.serverpb.Status.ProfileCallback): void;

                /**
                 * Calls Profile.
                 * @param request ProfileRequest message or plain object
                 * @returns Promise
                 */
                public profile(request: cockroach.server.serverpb.IProfileRequest): Promise<cockroach.server.serverpb.JSONResponse>;

                /**
                 * Calls Metrics.
                 * @param request MetricsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and JSONResponse
                 */
                public metrics(request: cockroach.server.serverpb.IMetricsRequest, callback: cockroach.server.serverpb.Status.MetricsCallback): void;

                /**
                 * Calls Metrics.
                 * @param request MetricsRequest message or plain object
                 * @returns Promise
                 */
                public metrics(request: cockroach.server.serverpb.IMetricsRequest): Promise<cockroach.server.serverpb.JSONResponse>;

                /**
                 * Calls GetFiles.
                 * @param request GetFilesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and GetFilesResponse
                 */
                public getFiles(request: cockroach.server.serverpb.IGetFilesRequest, callback: cockroach.server.serverpb.Status.GetFilesCallback): void;

                /**
                 * Calls GetFiles.
                 * @param request GetFilesRequest message or plain object
                 * @returns Promise
                 */
                public getFiles(request: cockroach.server.serverpb.IGetFilesRequest): Promise<cockroach.server.serverpb.GetFilesResponse>;

                /**
                 * Calls LogFilesList.
                 * @param request LogFilesListRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LogFilesListResponse
                 */
                public logFilesList(request: cockroach.server.serverpb.ILogFilesListRequest, callback: cockroach.server.serverpb.Status.LogFilesListCallback): void;

                /**
                 * Calls LogFilesList.
                 * @param request LogFilesListRequest message or plain object
                 * @returns Promise
                 */
                public logFilesList(request: cockroach.server.serverpb.ILogFilesListRequest): Promise<cockroach.server.serverpb.LogFilesListResponse>;

                /**
                 * Calls LogFile.
                 * @param request LogFileRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LogEntriesResponse
                 */
                public logFile(request: cockroach.server.serverpb.ILogFileRequest, callback: cockroach.server.serverpb.Status.LogFileCallback): void;

                /**
                 * Calls LogFile.
                 * @param request LogFileRequest message or plain object
                 * @returns Promise
                 */
                public logFile(request: cockroach.server.serverpb.ILogFileRequest): Promise<cockroach.server.serverpb.LogEntriesResponse>;

                /**
                 * Calls Logs.
                 * @param request LogsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and LogEntriesResponse
                 */
                public logs(request: cockroach.server.serverpb.ILogsRequest, callback: cockroach.server.serverpb.Status.LogsCallback): void;

                /**
                 * Calls Logs.
                 * @param request LogsRequest message or plain object
                 * @returns Promise
                 */
                public logs(request: cockroach.server.serverpb.ILogsRequest): Promise<cockroach.server.serverpb.LogEntriesResponse>;

                /**
                 * Calls ProblemRanges.
                 * @param request ProblemRangesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and ProblemRangesResponse
                 */
                public problemRanges(request: cockroach.server.serverpb.IProblemRangesRequest, callback: cockroach.server.serverpb.Status.ProblemRangesCallback): void;

                /**
                 * Calls ProblemRanges.
                 * @param request ProblemRangesRequest message or plain object
                 * @returns Promise
                 */
                public problemRanges(request: cockroach.server.serverpb.IProblemRangesRequest): Promise<cockroach.server.serverpb.ProblemRangesResponse>;

                /**
                 * Calls HotRanges.
                 * @param request HotRangesRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and HotRangesResponse
                 */
                public hotRanges(request: cockroach.server.serverpb.IHotRangesRequest, callback: cockroach.server.serverpb.Status.HotRangesCallback): void;

                /**
                 * Calls HotRanges.
                 * @param request HotRangesRequest message or plain object
                 * @returns Promise
                 */
                public hotRanges(request: cockroach.server.serverpb.IHotRangesRequest): Promise<cockroach.server.serverpb.HotRangesResponse>;

                /**
                 * Calls Range.
                 * @param request RangeRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and RangeResponse
                 */
                public range(request: cockroach.server.serverpb.IRangeRequest, callback: cockroach.server.serverpb.Status.RangeCallback): void;

                /**
                 * Calls Range.
                 * @param request RangeRequest message or plain object
                 * @returns Promise
                 */
                public range(request: cockroach.server.serverpb.IRangeRequest): Promise<cockroach.server.serverpb.RangeResponse>;

                /**
                 * Calls Diagnostics.
                 * @param request DiagnosticsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and DiagnosticReport
                 */
                public diagnostics(request: cockroach.server.serverpb.IDiagnosticsRequest, callback: cockroach.server.serverpb.Status.DiagnosticsCallback): void;

                /**
                 * Calls Diagnostics.
                 * @param request DiagnosticsRequest message or plain object
                 * @returns Promise
                 */
                public diagnostics(request: cockroach.server.serverpb.IDiagnosticsRequest): Promise<cockroach.server.diagnosticspb.DiagnosticReport>;

                /**
                 * Calls Stores.
                 * @param request StoresRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and StoresResponse
                 */
                public stores(request: cockroach.server.serverpb.IStoresRequest, callback: cockroach.server.serverpb.Status.StoresCallback): void;

                /**
                 * Calls Stores.
                 * @param request StoresRequest message or plain object
                 * @returns Promise
                 */
                public stores(request: cockroach.server.serverpb.IStoresRequest): Promise<cockroach.server.serverpb.StoresResponse>;

                /**
                 * Calls Statements.
                 * @param request StatementsRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and StatementsResponse
                 */
                public statements(request: cockroach.server.serverpb.IStatementsRequest, callback: cockroach.server.serverpb.Status.StatementsCallback): void;

                /**
                 * Calls Statements.
                 * @param request StatementsRequest message or plain object
                 * @returns Promise
                 */
                public statements(request: cockroach.server.serverpb.IStatementsRequest): Promise<cockroach.server.serverpb.StatementsResponse>;
            }

            namespace Status {

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#certificates}.
                 * @param error Error, if any
                 * @param [response] CertificatesResponse
                 */
                type CertificatesCallback = (error: (Error|null), response?: cockroach.server.serverpb.CertificatesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#details}.
                 * @param error Error, if any
                 * @param [response] DetailsResponse
                 */
                type DetailsCallback = (error: (Error|null), response?: cockroach.server.serverpb.DetailsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#nodes}.
                 * @param error Error, if any
                 * @param [response] NodesResponse
                 */
                type NodesCallback = (error: (Error|null), response?: cockroach.server.serverpb.NodesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#node}.
                 * @param error Error, if any
                 * @param [response] NodeStatus
                 */
                type NodeCallback = (error: (Error|null), response?: cockroach.server.status.statuspb.NodeStatus) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#raftDebug}.
                 * @param error Error, if any
                 * @param [response] RaftDebugResponse
                 */
                type RaftDebugCallback = (error: (Error|null), response?: cockroach.server.serverpb.RaftDebugResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#ranges}.
                 * @param error Error, if any
                 * @param [response] RangesResponse
                 */
                type RangesCallback = (error: (Error|null), response?: cockroach.server.serverpb.RangesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#gossip}.
                 * @param error Error, if any
                 * @param [response] InfoStatus
                 */
                type GossipCallback = (error: (Error|null), response?: cockroach.gossip.InfoStatus) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#engineStats}.
                 * @param error Error, if any
                 * @param [response] EngineStatsResponse
                 */
                type EngineStatsCallback = (error: (Error|null), response?: cockroach.server.serverpb.EngineStatsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#allocator}.
                 * @param error Error, if any
                 * @param [response] AllocatorResponse
                 */
                type AllocatorCallback = (error: (Error|null), response?: cockroach.server.serverpb.AllocatorResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#allocatorRange}.
                 * @param error Error, if any
                 * @param [response] AllocatorRangeResponse
                 */
                type AllocatorRangeCallback = (error: (Error|null), response?: cockroach.server.serverpb.AllocatorRangeResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#listSessions}.
                 * @param error Error, if any
                 * @param [response] ListSessionsResponse
                 */
                type ListSessionsCallback = (error: (Error|null), response?: cockroach.server.serverpb.ListSessionsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#listLocalSessions}.
                 * @param error Error, if any
                 * @param [response] ListSessionsResponse
                 */
                type ListLocalSessionsCallback = (error: (Error|null), response?: cockroach.server.serverpb.ListSessionsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#cancelQuery}.
                 * @param error Error, if any
                 * @param [response] CancelQueryResponse
                 */
                type CancelQueryCallback = (error: (Error|null), response?: cockroach.server.serverpb.CancelQueryResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#cancelSession}.
                 * @param error Error, if any
                 * @param [response] CancelSessionResponse
                 */
                type CancelSessionCallback = (error: (Error|null), response?: cockroach.server.serverpb.CancelSessionResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#spanStats}.
                 * @param error Error, if any
                 * @param [response] SpanStatsResponse
                 */
                type SpanStatsCallback = (error: (Error|null), response?: cockroach.server.serverpb.SpanStatsResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#stacks}.
                 * @param error Error, if any
                 * @param [response] JSONResponse
                 */
                type StacksCallback = (error: (Error|null), response?: cockroach.server.serverpb.JSONResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#profile}.
                 * @param error Error, if any
                 * @param [response] JSONResponse
                 */
                type ProfileCallback = (error: (Error|null), response?: cockroach.server.serverpb.JSONResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#metrics}.
                 * @param error Error, if any
                 * @param [response] JSONResponse
                 */
                type MetricsCallback = (error: (Error|null), response?: cockroach.server.serverpb.JSONResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#getFiles}.
                 * @param error Error, if any
                 * @param [response] GetFilesResponse
                 */
                type GetFilesCallback = (error: (Error|null), response?: cockroach.server.serverpb.GetFilesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#logFilesList}.
                 * @param error Error, if any
                 * @param [response] LogFilesListResponse
                 */
                type LogFilesListCallback = (error: (Error|null), response?: cockroach.server.serverpb.LogFilesListResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#logFile}.
                 * @param error Error, if any
                 * @param [response] LogEntriesResponse
                 */
                type LogFileCallback = (error: (Error|null), response?: cockroach.server.serverpb.LogEntriesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#logs}.
                 * @param error Error, if any
                 * @param [response] LogEntriesResponse
                 */
                type LogsCallback = (error: (Error|null), response?: cockroach.server.serverpb.LogEntriesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#problemRanges}.
                 * @param error Error, if any
                 * @param [response] ProblemRangesResponse
                 */
                type ProblemRangesCallback = (error: (Error|null), response?: cockroach.server.serverpb.ProblemRangesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#hotRanges}.
                 * @param error Error, if any
                 * @param [response] HotRangesResponse
                 */
                type HotRangesCallback = (error: (Error|null), response?: cockroach.server.serverpb.HotRangesResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#range}.
                 * @param error Error, if any
                 * @param [response] RangeResponse
                 */
                type RangeCallback = (error: (Error|null), response?: cockroach.server.serverpb.RangeResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#diagnostics}.
                 * @param error Error, if any
                 * @param [response] DiagnosticReport
                 */
                type DiagnosticsCallback = (error: (Error|null), response?: cockroach.server.diagnosticspb.DiagnosticReport) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#stores}.
                 * @param error Error, if any
                 * @param [response] StoresResponse
                 */
                type StoresCallback = (error: (Error|null), response?: cockroach.server.serverpb.StoresResponse) => void;

                /**
                 * Callback as used by {@link cockroach.server.serverpb.Status#statements}.
                 * @param error Error, if any
                 * @param [response] StatementsResponse
                 */
                type StatementsCallback = (error: (Error|null), response?: cockroach.server.serverpb.StatementsResponse) => void;
            }

            /** Properties of a UserLoginRequest. */
            interface IUserLoginRequest {

                /** UserLoginRequest username */
                username?: (string|null);

                /** UserLoginRequest password */
                password?: (string|null);
            }

            /** Represents a UserLoginRequest. */
            class UserLoginRequest implements IUserLoginRequest {

                /**
                 * Constructs a new UserLoginRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUserLoginRequest);

                /** UserLoginRequest username. */
                public username: string;

                /** UserLoginRequest password. */
                public password: string;

                /**
                 * Creates a new UserLoginRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UserLoginRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUserLoginRequest): cockroach.server.serverpb.UserLoginRequest;

                /**
                 * Encodes the specified UserLoginRequest message. Does not implicitly {@link cockroach.server.serverpb.UserLoginRequest.verify|verify} messages.
                 * @param message UserLoginRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUserLoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UserLoginRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UserLoginRequest.verify|verify} messages.
                 * @param message UserLoginRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUserLoginRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UserLoginRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UserLoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UserLoginRequest;

                /**
                 * Decodes a UserLoginRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UserLoginRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UserLoginRequest;

                /**
                 * Verifies a UserLoginRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UserLoginRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UserLoginRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UserLoginRequest;

                /**
                 * Creates a plain object from a UserLoginRequest message. Also converts values to other types if specified.
                 * @param message UserLoginRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UserLoginRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UserLoginRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UserLoginResponse. */
            interface IUserLoginResponse {
            }

            /** Represents a UserLoginResponse. */
            class UserLoginResponse implements IUserLoginResponse {

                /**
                 * Constructs a new UserLoginResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUserLoginResponse);

                /**
                 * Creates a new UserLoginResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UserLoginResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUserLoginResponse): cockroach.server.serverpb.UserLoginResponse;

                /**
                 * Encodes the specified UserLoginResponse message. Does not implicitly {@link cockroach.server.serverpb.UserLoginResponse.verify|verify} messages.
                 * @param message UserLoginResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUserLoginResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UserLoginResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UserLoginResponse.verify|verify} messages.
                 * @param message UserLoginResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUserLoginResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UserLoginResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UserLoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UserLoginResponse;

                /**
                 * Decodes a UserLoginResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UserLoginResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UserLoginResponse;

                /**
                 * Verifies a UserLoginResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UserLoginResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UserLoginResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UserLoginResponse;

                /**
                 * Creates a plain object from a UserLoginResponse message. Also converts values to other types if specified.
                 * @param message UserLoginResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UserLoginResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UserLoginResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UserLogoutRequest. */
            interface IUserLogoutRequest {
            }

            /** Represents a UserLogoutRequest. */
            class UserLogoutRequest implements IUserLogoutRequest {

                /**
                 * Constructs a new UserLogoutRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUserLogoutRequest);

                /**
                 * Creates a new UserLogoutRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UserLogoutRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUserLogoutRequest): cockroach.server.serverpb.UserLogoutRequest;

                /**
                 * Encodes the specified UserLogoutRequest message. Does not implicitly {@link cockroach.server.serverpb.UserLogoutRequest.verify|verify} messages.
                 * @param message UserLogoutRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUserLogoutRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UserLogoutRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UserLogoutRequest.verify|verify} messages.
                 * @param message UserLogoutRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUserLogoutRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UserLogoutRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UserLogoutRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UserLogoutRequest;

                /**
                 * Decodes a UserLogoutRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UserLogoutRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UserLogoutRequest;

                /**
                 * Verifies a UserLogoutRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UserLogoutRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UserLogoutRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UserLogoutRequest;

                /**
                 * Creates a plain object from a UserLogoutRequest message. Also converts values to other types if specified.
                 * @param message UserLogoutRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UserLogoutRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UserLogoutRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UserLogoutResponse. */
            interface IUserLogoutResponse {
            }

            /** Represents a UserLogoutResponse. */
            class UserLogoutResponse implements IUserLogoutResponse {

                /**
                 * Constructs a new UserLogoutResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.IUserLogoutResponse);

                /**
                 * Creates a new UserLogoutResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UserLogoutResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.IUserLogoutResponse): cockroach.server.serverpb.UserLogoutResponse;

                /**
                 * Encodes the specified UserLogoutResponse message. Does not implicitly {@link cockroach.server.serverpb.UserLogoutResponse.verify|verify} messages.
                 * @param message UserLogoutResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.IUserLogoutResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UserLogoutResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UserLogoutResponse.verify|verify} messages.
                 * @param message UserLogoutResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.IUserLogoutResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UserLogoutResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UserLogoutResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UserLogoutResponse;

                /**
                 * Decodes a UserLogoutResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UserLogoutResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UserLogoutResponse;

                /**
                 * Verifies a UserLogoutResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UserLogoutResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UserLogoutResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UserLogoutResponse;

                /**
                 * Creates a plain object from a UserLogoutResponse message. Also converts values to other types if specified.
                 * @param message UserLogoutResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UserLogoutResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UserLogoutResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SessionCookie. */
            interface ISessionCookie {

                /** SessionCookie id */
                id?: (Long|null);

                /** SessionCookie secret */
                secret?: (Uint8Array|null);
            }

            /** Represents a SessionCookie. */
            class SessionCookie implements ISessionCookie {

                /**
                 * Constructs a new SessionCookie.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ISessionCookie);

                /** SessionCookie id. */
                public id: Long;

                /** SessionCookie secret. */
                public secret: Uint8Array;

                /**
                 * Creates a new SessionCookie instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SessionCookie instance
                 */
                public static create(properties?: cockroach.server.serverpb.ISessionCookie): cockroach.server.serverpb.SessionCookie;

                /**
                 * Encodes the specified SessionCookie message. Does not implicitly {@link cockroach.server.serverpb.SessionCookie.verify|verify} messages.
                 * @param message SessionCookie message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.serverpb.ISessionCookie, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SessionCookie message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SessionCookie.verify|verify} messages.
                 * @param message SessionCookie message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ISessionCookie, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SessionCookie message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SessionCookie
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SessionCookie;

                /**
                 * Decodes a SessionCookie message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SessionCookie
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SessionCookie;

                /**
                 * Verifies a SessionCookie message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SessionCookie message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SessionCookie
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SessionCookie;

                /**
                 * Creates a plain object from a SessionCookie message. Also converts values to other types if specified.
                 * @param message SessionCookie
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SessionCookie, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SessionCookie to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Represents a LogIn */
            class LogIn extends $protobuf.rpc.Service {

                /**
                 * Constructs a new LogIn service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new LogIn service using the specified rpc implementation.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 * @returns RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): LogIn;

                /**
                 * Calls UserLogin.
                 * @param request UserLoginRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UserLoginResponse
                 */
                public userLogin(request: cockroach.server.serverpb.IUserLoginRequest, callback: cockroach.server.serverpb.LogIn.UserLoginCallback): void;

                /**
                 * Calls UserLogin.
                 * @param request UserLoginRequest message or plain object
                 * @returns Promise
                 */
                public userLogin(request: cockroach.server.serverpb.IUserLoginRequest): Promise<cockroach.server.serverpb.UserLoginResponse>;
            }

            namespace LogIn {

                /**
                 * Callback as used by {@link cockroach.server.serverpb.LogIn#userLogin}.
                 * @param error Error, if any
                 * @param [response] UserLoginResponse
                 */
                type UserLoginCallback = (error: (Error|null), response?: cockroach.server.serverpb.UserLoginResponse) => void;
            }

            /** Represents a LogOut */
            class LogOut extends $protobuf.rpc.Service {

                /**
                 * Constructs a new LogOut service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new LogOut service using the specified rpc implementation.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 * @returns RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): LogOut;

                /**
                 * Calls UserLogout.
                 * @param request UserLogoutRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and UserLogoutResponse
                 */
                public userLogout(request: cockroach.server.serverpb.IUserLogoutRequest, callback: cockroach.server.serverpb.LogOut.UserLogoutCallback): void;

                /**
                 * Calls UserLogout.
                 * @param request UserLogoutRequest message or plain object
                 * @returns Promise
                 */
                public userLogout(request: cockroach.server.serverpb.IUserLogoutRequest): Promise<cockroach.server.serverpb.UserLogoutResponse>;
            }

            namespace LogOut {

                /**
                 * Callback as used by {@link cockroach.server.serverpb.LogOut#userLogout}.
                 * @param error Error, if any
                 * @param [response] UserLogoutResponse
                 */
                type UserLogoutCallback = (error: (Error|null), response?: cockroach.server.serverpb.UserLogoutResponse) => void;
            }
        }

        /** Namespace diagnosticspb. */
        namespace diagnosticspb {

            /** Properties of a DiagnosticReport. */
            interface IDiagnosticReport {

                /** DiagnosticReport node */
                node?: (cockroach.server.diagnosticspb.INodeInfo|null);

                /** DiagnosticReport stores */
                stores?: (cockroach.server.diagnosticspb.IStoreInfo[]|null);

                /** DiagnosticReport schema */
                schema?: (cockroach.sql.sqlbase.ITableDescriptor[]|null);

                /** DiagnosticReport sql_stats */
                sql_stats?: (cockroach.sql.ICollectedStatementStatistics[]|null);

                /** DiagnosticReport altered_settings */
                altered_settings?: ({ [k: string]: string }|null);

                /** DiagnosticReport zone_configs */
                zone_configs?: ({ [k: string]: cockroach.config.zonepb.IZoneConfig }|null);

                /** DiagnosticReport feature_usage */
                feature_usage?: ({ [k: string]: number }|null);

                /** DiagnosticReport legacy_unimplemented_errors */
                legacy_unimplemented_errors?: ({ [k: string]: Long }|null);

                /** DiagnosticReport legacy_error_counts */
                legacy_error_counts?: ({ [k: string]: Long }|null);
            }

            /** Represents a DiagnosticReport. */
            class DiagnosticReport implements IDiagnosticReport {

                /**
                 * Constructs a new DiagnosticReport.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.IDiagnosticReport);

                /** DiagnosticReport node. */
                public node?: (cockroach.server.diagnosticspb.INodeInfo|null);

                /** DiagnosticReport stores. */
                public stores: cockroach.server.diagnosticspb.IStoreInfo[];

                /** DiagnosticReport schema. */
                public schema: cockroach.sql.sqlbase.ITableDescriptor[];

                /** DiagnosticReport sql_stats. */
                public sql_stats: cockroach.sql.ICollectedStatementStatistics[];

                /** DiagnosticReport altered_settings. */
                public altered_settings: { [k: string]: string };

                /** DiagnosticReport zone_configs. */
                public zone_configs: { [k: string]: cockroach.config.zonepb.IZoneConfig };

                /** DiagnosticReport feature_usage. */
                public feature_usage: { [k: string]: number };

                /** DiagnosticReport legacy_unimplemented_errors. */
                public legacy_unimplemented_errors: { [k: string]: Long };

                /** DiagnosticReport legacy_error_counts. */
                public legacy_error_counts: { [k: string]: Long };

                /**
                 * Creates a new DiagnosticReport instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DiagnosticReport instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.IDiagnosticReport): cockroach.server.diagnosticspb.DiagnosticReport;

                /**
                 * Encodes the specified DiagnosticReport message. Does not implicitly {@link cockroach.server.diagnosticspb.DiagnosticReport.verify|verify} messages.
                 * @param message DiagnosticReport message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.IDiagnosticReport, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DiagnosticReport message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.DiagnosticReport.verify|verify} messages.
                 * @param message DiagnosticReport message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.IDiagnosticReport, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DiagnosticReport message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DiagnosticReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.DiagnosticReport;

                /**
                 * Decodes a DiagnosticReport message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DiagnosticReport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.DiagnosticReport;

                /**
                 * Verifies a DiagnosticReport message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DiagnosticReport message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DiagnosticReport
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.DiagnosticReport;

                /**
                 * Creates a plain object from a DiagnosticReport message. Also converts values to other types if specified.
                 * @param message DiagnosticReport
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.DiagnosticReport, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DiagnosticReport to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a NodeInfo. */
            interface INodeInfo {

                /** NodeInfo node_id */
                node_id?: (number|null);

                /** NodeInfo bytes */
                bytes?: (Long|null);

                /** NodeInfo key_count */
                key_count?: (Long|null);

                /** NodeInfo range_count */
                range_count?: (Long|null);

                /** NodeInfo locality */
                locality?: (cockroach.roachpb.ILocality|null);

                /** NodeInfo hardware */
                hardware?: (cockroach.server.diagnosticspb.IHardwareInfo|null);

                /** NodeInfo os */
                os?: (cockroach.server.diagnosticspb.IOSInfo|null);

                /** NodeInfo build */
                build?: (cockroach.build.IInfo|null);

                /** NodeInfo uptime */
                uptime?: (Long|null);

                /** NodeInfo license_type */
                license_type?: (string|null);

                /** NodeInfo topology */
                topology?: (cockroach.server.diagnosticspb.ITopologyInfo|null);
            }

            /** Represents a NodeInfo. */
            class NodeInfo implements INodeInfo {

                /**
                 * Constructs a new NodeInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.INodeInfo);

                /** NodeInfo node_id. */
                public node_id: number;

                /** NodeInfo bytes. */
                public bytes: Long;

                /** NodeInfo key_count. */
                public key_count: Long;

                /** NodeInfo range_count. */
                public range_count: Long;

                /** NodeInfo locality. */
                public locality?: (cockroach.roachpb.ILocality|null);

                /** NodeInfo hardware. */
                public hardware?: (cockroach.server.diagnosticspb.IHardwareInfo|null);

                /** NodeInfo os. */
                public os?: (cockroach.server.diagnosticspb.IOSInfo|null);

                /** NodeInfo build. */
                public build?: (cockroach.build.IInfo|null);

                /** NodeInfo uptime. */
                public uptime: Long;

                /** NodeInfo license_type. */
                public license_type: string;

                /** NodeInfo topology. */
                public topology?: (cockroach.server.diagnosticspb.ITopologyInfo|null);

                /**
                 * Creates a new NodeInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NodeInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.INodeInfo): cockroach.server.diagnosticspb.NodeInfo;

                /**
                 * Encodes the specified NodeInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.NodeInfo.verify|verify} messages.
                 * @param message NodeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.INodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodeInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.NodeInfo.verify|verify} messages.
                 * @param message NodeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.INodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodeInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.NodeInfo;

                /**
                 * Decodes a NodeInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.NodeInfo;

                /**
                 * Verifies a NodeInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NodeInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.NodeInfo;

                /**
                 * Creates a plain object from a NodeInfo message. Also converts values to other types if specified.
                 * @param message NodeInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.NodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodeInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a StoreInfo. */
            interface IStoreInfo {

                /** StoreInfo node_id */
                node_id?: (number|null);

                /** StoreInfo store_id */
                store_id?: (number|null);

                /** StoreInfo bytes */
                bytes?: (Long|null);

                /** StoreInfo key_count */
                key_count?: (Long|null);

                /** StoreInfo range_count */
                range_count?: (Long|null);

                /** StoreInfo capacity */
                capacity?: (Long|null);

                /** StoreInfo available */
                available?: (Long|null);

                /** StoreInfo used */
                used?: (Long|null);

                /** StoreInfo encryption_algorithm */
                encryption_algorithm?: (Long|null);
            }

            /** Represents a StoreInfo. */
            class StoreInfo implements IStoreInfo {

                /**
                 * Constructs a new StoreInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.IStoreInfo);

                /** StoreInfo node_id. */
                public node_id: number;

                /** StoreInfo store_id. */
                public store_id: number;

                /** StoreInfo bytes. */
                public bytes: Long;

                /** StoreInfo key_count. */
                public key_count: Long;

                /** StoreInfo range_count. */
                public range_count: Long;

                /** StoreInfo capacity. */
                public capacity: Long;

                /** StoreInfo available. */
                public available: Long;

                /** StoreInfo used. */
                public used: Long;

                /** StoreInfo encryption_algorithm. */
                public encryption_algorithm: Long;

                /**
                 * Creates a new StoreInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns StoreInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.IStoreInfo): cockroach.server.diagnosticspb.StoreInfo;

                /**
                 * Encodes the specified StoreInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.StoreInfo.verify|verify} messages.
                 * @param message StoreInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.IStoreInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StoreInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.StoreInfo.verify|verify} messages.
                 * @param message StoreInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.IStoreInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StoreInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns StoreInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.StoreInfo;

                /**
                 * Decodes a StoreInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns StoreInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.StoreInfo;

                /**
                 * Verifies a StoreInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a StoreInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns StoreInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.StoreInfo;

                /**
                 * Creates a plain object from a StoreInfo message. Also converts values to other types if specified.
                 * @param message StoreInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.StoreInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this StoreInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a CPUInfo. */
            interface ICPUInfo {

                /** CPUInfo numcpu */
                numcpu?: (number|null);

                /** CPUInfo sockets */
                sockets?: (number|null);

                /** CPUInfo cores */
                cores?: (number|null);

                /** CPUInfo model */
                model?: (string|null);

                /** CPUInfo mhz */
                mhz?: (number|null);

                /** CPUInfo features */
                features?: (string[]|null);
            }

            /** Represents a CPUInfo. */
            class CPUInfo implements ICPUInfo {

                /**
                 * Constructs a new CPUInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.ICPUInfo);

                /** CPUInfo numcpu. */
                public numcpu: number;

                /** CPUInfo sockets. */
                public sockets: number;

                /** CPUInfo cores. */
                public cores: number;

                /** CPUInfo model. */
                public model: string;

                /** CPUInfo mhz. */
                public mhz: number;

                /** CPUInfo features. */
                public features: string[];

                /**
                 * Creates a new CPUInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns CPUInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.ICPUInfo): cockroach.server.diagnosticspb.CPUInfo;

                /**
                 * Encodes the specified CPUInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.CPUInfo.verify|verify} messages.
                 * @param message CPUInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.ICPUInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CPUInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.CPUInfo.verify|verify} messages.
                 * @param message CPUInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.ICPUInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CPUInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns CPUInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.CPUInfo;

                /**
                 * Decodes a CPUInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns CPUInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.CPUInfo;

                /**
                 * Verifies a CPUInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a CPUInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns CPUInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.CPUInfo;

                /**
                 * Creates a plain object from a CPUInfo message. Also converts values to other types if specified.
                 * @param message CPUInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.CPUInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this CPUInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a HardwareInfo. */
            interface IHardwareInfo {

                /** HardwareInfo virtualization */
                virtualization?: (string|null);

                /** HardwareInfo cpu */
                cpu?: (cockroach.server.diagnosticspb.ICPUInfo|null);

                /** HardwareInfo mem */
                mem?: (cockroach.server.diagnosticspb.IMemInfo|null);

                /** HardwareInfo loadavg15 */
                loadavg15?: (number|null);

                /** HardwareInfo provider */
                provider?: (string|null);

                /** HardwareInfo instance_class */
                instance_class?: (string|null);
            }

            /** Represents a HardwareInfo. */
            class HardwareInfo implements IHardwareInfo {

                /**
                 * Constructs a new HardwareInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.IHardwareInfo);

                /** HardwareInfo virtualization. */
                public virtualization: string;

                /** HardwareInfo cpu. */
                public cpu?: (cockroach.server.diagnosticspb.ICPUInfo|null);

                /** HardwareInfo mem. */
                public mem?: (cockroach.server.diagnosticspb.IMemInfo|null);

                /** HardwareInfo loadavg15. */
                public loadavg15: number;

                /** HardwareInfo provider. */
                public provider: string;

                /** HardwareInfo instance_class. */
                public instance_class: string;

                /**
                 * Creates a new HardwareInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns HardwareInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.IHardwareInfo): cockroach.server.diagnosticspb.HardwareInfo;

                /**
                 * Encodes the specified HardwareInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.HardwareInfo.verify|verify} messages.
                 * @param message HardwareInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.IHardwareInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HardwareInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.HardwareInfo.verify|verify} messages.
                 * @param message HardwareInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.IHardwareInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HardwareInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns HardwareInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.HardwareInfo;

                /**
                 * Decodes a HardwareInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns HardwareInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.HardwareInfo;

                /**
                 * Verifies a HardwareInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a HardwareInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns HardwareInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.HardwareInfo;

                /**
                 * Creates a plain object from a HardwareInfo message. Also converts values to other types if specified.
                 * @param message HardwareInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.HardwareInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this HardwareInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a OSInfo. */
            interface IOSInfo {

                /** OSInfo family */
                family?: (string|null);

                /** OSInfo platform */
                platform?: (string|null);

                /** OSInfo version */
                version?: (string|null);
            }

            /** Represents a OSInfo. */
            class OSInfo implements IOSInfo {

                /**
                 * Constructs a new OSInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.IOSInfo);

                /** OSInfo family. */
                public family: string;

                /** OSInfo platform. */
                public platform: string;

                /** OSInfo version. */
                public version: string;

                /**
                 * Creates a new OSInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns OSInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.IOSInfo): cockroach.server.diagnosticspb.OSInfo;

                /**
                 * Encodes the specified OSInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.OSInfo.verify|verify} messages.
                 * @param message OSInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.IOSInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified OSInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.OSInfo.verify|verify} messages.
                 * @param message OSInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.IOSInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a OSInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns OSInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.OSInfo;

                /**
                 * Decodes a OSInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns OSInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.OSInfo;

                /**
                 * Verifies a OSInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a OSInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns OSInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.OSInfo;

                /**
                 * Creates a plain object from a OSInfo message. Also converts values to other types if specified.
                 * @param message OSInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.OSInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this OSInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MemInfo. */
            interface IMemInfo {

                /** MemInfo total */
                total?: (Long|null);

                /** MemInfo available */
                available?: (Long|null);
            }

            /** Represents a MemInfo. */
            class MemInfo implements IMemInfo {

                /**
                 * Constructs a new MemInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.IMemInfo);

                /** MemInfo total. */
                public total: Long;

                /** MemInfo available. */
                public available: Long;

                /**
                 * Creates a new MemInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MemInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.IMemInfo): cockroach.server.diagnosticspb.MemInfo;

                /**
                 * Encodes the specified MemInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.MemInfo.verify|verify} messages.
                 * @param message MemInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.IMemInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MemInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.MemInfo.verify|verify} messages.
                 * @param message MemInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.IMemInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MemInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MemInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.MemInfo;

                /**
                 * Decodes a MemInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MemInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.MemInfo;

                /**
                 * Verifies a MemInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MemInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MemInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.MemInfo;

                /**
                 * Creates a plain object from a MemInfo message. Also converts values to other types if specified.
                 * @param message MemInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.MemInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MemInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TopologyInfo. */
            interface ITopologyInfo {

                /** TopologyInfo provider */
                provider?: (string|null);

                /** TopologyInfo region */
                region?: (string|null);
            }

            /** Represents a TopologyInfo. */
            class TopologyInfo implements ITopologyInfo {

                /**
                 * Constructs a new TopologyInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.diagnosticspb.ITopologyInfo);

                /** TopologyInfo provider. */
                public provider: string;

                /** TopologyInfo region. */
                public region: string;

                /**
                 * Creates a new TopologyInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TopologyInfo instance
                 */
                public static create(properties?: cockroach.server.diagnosticspb.ITopologyInfo): cockroach.server.diagnosticspb.TopologyInfo;

                /**
                 * Encodes the specified TopologyInfo message. Does not implicitly {@link cockroach.server.diagnosticspb.TopologyInfo.verify|verify} messages.
                 * @param message TopologyInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.server.diagnosticspb.ITopologyInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TopologyInfo message, length delimited. Does not implicitly {@link cockroach.server.diagnosticspb.TopologyInfo.verify|verify} messages.
                 * @param message TopologyInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.server.diagnosticspb.ITopologyInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TopologyInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TopologyInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.diagnosticspb.TopologyInfo;

                /**
                 * Decodes a TopologyInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TopologyInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.diagnosticspb.TopologyInfo;

                /**
                 * Verifies a TopologyInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TopologyInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TopologyInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.diagnosticspb.TopologyInfo;

                /**
                 * Creates a plain object from a TopologyInfo message. Also converts values to other types if specified.
                 * @param message TopologyInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.server.diagnosticspb.TopologyInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TopologyInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace status. */
        namespace status {

            /** Namespace statuspb. */
            namespace statuspb {

                /** Properties of a StoreStatus. */
                interface IStoreStatus {

                    /** StoreStatus desc */
                    desc?: (cockroach.roachpb.IStoreDescriptor|null);

                    /** StoreStatus metrics */
                    metrics?: ({ [k: string]: number }|null);
                }

                /** Represents a StoreStatus. */
                class StoreStatus implements IStoreStatus {

                    /**
                     * Constructs a new StoreStatus.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.status.statuspb.IStoreStatus);

                    /** StoreStatus desc. */
                    public desc?: (cockroach.roachpb.IStoreDescriptor|null);

                    /** StoreStatus metrics. */
                    public metrics: { [k: string]: number };

                    /**
                     * Creates a new StoreStatus instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns StoreStatus instance
                     */
                    public static create(properties?: cockroach.server.status.statuspb.IStoreStatus): cockroach.server.status.statuspb.StoreStatus;

                    /**
                     * Encodes the specified StoreStatus message. Does not implicitly {@link cockroach.server.status.statuspb.StoreStatus.verify|verify} messages.
                     * @param message StoreStatus message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.status.statuspb.IStoreStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified StoreStatus message, length delimited. Does not implicitly {@link cockroach.server.status.statuspb.StoreStatus.verify|verify} messages.
                     * @param message StoreStatus message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.status.statuspb.IStoreStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a StoreStatus message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns StoreStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.statuspb.StoreStatus;

                    /**
                     * Decodes a StoreStatus message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns StoreStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.statuspb.StoreStatus;

                    /**
                     * Verifies a StoreStatus message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a StoreStatus message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns StoreStatus
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.status.statuspb.StoreStatus;

                    /**
                     * Creates a plain object from a StoreStatus message. Also converts values to other types if specified.
                     * @param message StoreStatus
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.status.statuspb.StoreStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this StoreStatus to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a NodeStatus. */
                interface INodeStatus {

                    /** NodeStatus desc */
                    desc?: (cockroach.roachpb.INodeDescriptor|null);

                    /** NodeStatus build_info */
                    build_info?: (cockroach.build.IInfo|null);

                    /** NodeStatus started_at */
                    started_at?: (Long|null);

                    /** NodeStatus updated_at */
                    updated_at?: (Long|null);

                    /** NodeStatus metrics */
                    metrics?: ({ [k: string]: number }|null);

                    /** NodeStatus store_statuses */
                    store_statuses?: (cockroach.server.status.statuspb.IStoreStatus[]|null);

                    /** NodeStatus args */
                    args?: (string[]|null);

                    /** NodeStatus env */
                    env?: (string[]|null);

                    /** NodeStatus latencies */
                    latencies?: ({ [k: string]: Long }|null);

                    /** NodeStatus activity */
                    activity?: ({ [k: string]: cockroach.server.status.statuspb.NodeStatus.INetworkActivity }|null);

                    /** NodeStatus total_system_memory */
                    total_system_memory?: (Long|null);

                    /** NodeStatus num_cpus */
                    num_cpus?: (number|null);
                }

                /** Represents a NodeStatus. */
                class NodeStatus implements INodeStatus {

                    /**
                     * Constructs a new NodeStatus.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.status.statuspb.INodeStatus);

                    /** NodeStatus desc. */
                    public desc?: (cockroach.roachpb.INodeDescriptor|null);

                    /** NodeStatus build_info. */
                    public build_info?: (cockroach.build.IInfo|null);

                    /** NodeStatus started_at. */
                    public started_at: Long;

                    /** NodeStatus updated_at. */
                    public updated_at: Long;

                    /** NodeStatus metrics. */
                    public metrics: { [k: string]: number };

                    /** NodeStatus store_statuses. */
                    public store_statuses: cockroach.server.status.statuspb.IStoreStatus[];

                    /** NodeStatus args. */
                    public args: string[];

                    /** NodeStatus env. */
                    public env: string[];

                    /** NodeStatus latencies. */
                    public latencies: { [k: string]: Long };

                    /** NodeStatus activity. */
                    public activity: { [k: string]: cockroach.server.status.statuspb.NodeStatus.INetworkActivity };

                    /** NodeStatus total_system_memory. */
                    public total_system_memory: Long;

                    /** NodeStatus num_cpus. */
                    public num_cpus: number;

                    /**
                     * Creates a new NodeStatus instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns NodeStatus instance
                     */
                    public static create(properties?: cockroach.server.status.statuspb.INodeStatus): cockroach.server.status.statuspb.NodeStatus;

                    /**
                     * Encodes the specified NodeStatus message. Does not implicitly {@link cockroach.server.status.statuspb.NodeStatus.verify|verify} messages.
                     * @param message NodeStatus message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.status.statuspb.INodeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified NodeStatus message, length delimited. Does not implicitly {@link cockroach.server.status.statuspb.NodeStatus.verify|verify} messages.
                     * @param message NodeStatus message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.status.statuspb.INodeStatus, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a NodeStatus message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns NodeStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.statuspb.NodeStatus;

                    /**
                     * Decodes a NodeStatus message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns NodeStatus
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.statuspb.NodeStatus;

                    /**
                     * Verifies a NodeStatus message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a NodeStatus message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns NodeStatus
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.status.statuspb.NodeStatus;

                    /**
                     * Creates a plain object from a NodeStatus message. Also converts values to other types if specified.
                     * @param message NodeStatus
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.status.statuspb.NodeStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this NodeStatus to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace NodeStatus {

                    /** Properties of a NetworkActivity. */
                    interface INetworkActivity {

                        /** NetworkActivity incoming */
                        incoming?: (Long|null);

                        /** NetworkActivity outgoing */
                        outgoing?: (Long|null);

                        /** NetworkActivity latency */
                        latency?: (Long|null);
                    }

                    /** Represents a NetworkActivity. */
                    class NetworkActivity implements INetworkActivity {

                        /**
                         * Constructs a new NetworkActivity.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.server.status.statuspb.NodeStatus.INetworkActivity);

                        /** NetworkActivity incoming. */
                        public incoming: Long;

                        /** NetworkActivity outgoing. */
                        public outgoing: Long;

                        /** NetworkActivity latency. */
                        public latency: Long;

                        /**
                         * Creates a new NetworkActivity instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns NetworkActivity instance
                         */
                        public static create(properties?: cockroach.server.status.statuspb.NodeStatus.INetworkActivity): cockroach.server.status.statuspb.NodeStatus.NetworkActivity;

                        /**
                         * Encodes the specified NetworkActivity message. Does not implicitly {@link cockroach.server.status.statuspb.NodeStatus.NetworkActivity.verify|verify} messages.
                         * @param message NetworkActivity message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.server.status.statuspb.NodeStatus.INetworkActivity, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified NetworkActivity message, length delimited. Does not implicitly {@link cockroach.server.status.statuspb.NodeStatus.NetworkActivity.verify|verify} messages.
                         * @param message NetworkActivity message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.server.status.statuspb.NodeStatus.INetworkActivity, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a NetworkActivity message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns NetworkActivity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.statuspb.NodeStatus.NetworkActivity;

                        /**
                         * Decodes a NetworkActivity message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns NetworkActivity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.statuspb.NodeStatus.NetworkActivity;

                        /**
                         * Verifies a NetworkActivity message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a NetworkActivity message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns NetworkActivity
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.server.status.statuspb.NodeStatus.NetworkActivity;

                        /**
                         * Creates a plain object from a NetworkActivity message. Also converts values to other types if specified.
                         * @param message NetworkActivity
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.server.status.statuspb.NodeStatus.NetworkActivity, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this NetworkActivity to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a HealthAlert. */
                interface IHealthAlert {

                    /** HealthAlert store_id */
                    store_id?: (number|null);

                    /** HealthAlert category */
                    category?: (cockroach.server.status.statuspb.HealthAlert.Category|null);

                    /** HealthAlert description */
                    description?: (string|null);

                    /** HealthAlert value */
                    value?: (number|null);
                }

                /** Represents a HealthAlert. */
                class HealthAlert implements IHealthAlert {

                    /**
                     * Constructs a new HealthAlert.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.status.statuspb.IHealthAlert);

                    /** HealthAlert store_id. */
                    public store_id: number;

                    /** HealthAlert category. */
                    public category: cockroach.server.status.statuspb.HealthAlert.Category;

                    /** HealthAlert description. */
                    public description: string;

                    /** HealthAlert value. */
                    public value: number;

                    /**
                     * Creates a new HealthAlert instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns HealthAlert instance
                     */
                    public static create(properties?: cockroach.server.status.statuspb.IHealthAlert): cockroach.server.status.statuspb.HealthAlert;

                    /**
                     * Encodes the specified HealthAlert message. Does not implicitly {@link cockroach.server.status.statuspb.HealthAlert.verify|verify} messages.
                     * @param message HealthAlert message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.status.statuspb.IHealthAlert, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified HealthAlert message, length delimited. Does not implicitly {@link cockroach.server.status.statuspb.HealthAlert.verify|verify} messages.
                     * @param message HealthAlert message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.status.statuspb.IHealthAlert, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a HealthAlert message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns HealthAlert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.statuspb.HealthAlert;

                    /**
                     * Decodes a HealthAlert message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns HealthAlert
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.statuspb.HealthAlert;

                    /**
                     * Verifies a HealthAlert message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HealthAlert message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HealthAlert
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.status.statuspb.HealthAlert;

                    /**
                     * Creates a plain object from a HealthAlert message. Also converts values to other types if specified.
                     * @param message HealthAlert
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.status.statuspb.HealthAlert, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HealthAlert to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace HealthAlert {

                    /** Category enum. */
                    enum Category {
                        METRICS = 0,
                        NETWORK = 1
                    }
                }

                /** Properties of a HealthCheckResult. */
                interface IHealthCheckResult {

                    /** HealthCheckResult alerts */
                    alerts?: (cockroach.server.status.statuspb.IHealthAlert[]|null);
                }

                /** Represents a HealthCheckResult. */
                class HealthCheckResult implements IHealthCheckResult {

                    /**
                     * Constructs a new HealthCheckResult.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.status.statuspb.IHealthCheckResult);

                    /** HealthCheckResult alerts. */
                    public alerts: cockroach.server.status.statuspb.IHealthAlert[];

                    /**
                     * Creates a new HealthCheckResult instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns HealthCheckResult instance
                     */
                    public static create(properties?: cockroach.server.status.statuspb.IHealthCheckResult): cockroach.server.status.statuspb.HealthCheckResult;

                    /**
                     * Encodes the specified HealthCheckResult message. Does not implicitly {@link cockroach.server.status.statuspb.HealthCheckResult.verify|verify} messages.
                     * @param message HealthCheckResult message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.server.status.statuspb.IHealthCheckResult, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified HealthCheckResult message, length delimited. Does not implicitly {@link cockroach.server.status.statuspb.HealthCheckResult.verify|verify} messages.
                     * @param message HealthCheckResult message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.server.status.statuspb.IHealthCheckResult, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a HealthCheckResult message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns HealthCheckResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.statuspb.HealthCheckResult;

                    /**
                     * Decodes a HealthCheckResult message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns HealthCheckResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.statuspb.HealthCheckResult;

                    /**
                     * Verifies a HealthCheckResult message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HealthCheckResult message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HealthCheckResult
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.status.statuspb.HealthCheckResult;

                    /**
                     * Creates a plain object from a HealthCheckResult message. Also converts values to other types if specified.
                     * @param message HealthCheckResult
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.server.status.statuspb.HealthCheckResult, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HealthCheckResult to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }
    }

    /** Namespace config. */
    namespace config {

        /** Namespace zonepb. */
        namespace zonepb {

            /** Properties of a GCPolicy. */
            interface IGCPolicy {

                /** GCPolicy ttl_seconds */
                ttl_seconds?: (number|null);
            }

            /** Represents a GCPolicy. */
            class GCPolicy implements IGCPolicy {

                /**
                 * Constructs a new GCPolicy.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.IGCPolicy);

                /** GCPolicy ttl_seconds. */
                public ttl_seconds: number;

                /**
                 * Creates a new GCPolicy instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns GCPolicy instance
                 */
                public static create(properties?: cockroach.config.zonepb.IGCPolicy): cockroach.config.zonepb.GCPolicy;

                /**
                 * Encodes the specified GCPolicy message. Does not implicitly {@link cockroach.config.zonepb.GCPolicy.verify|verify} messages.
                 * @param message GCPolicy message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.IGCPolicy, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GCPolicy message, length delimited. Does not implicitly {@link cockroach.config.zonepb.GCPolicy.verify|verify} messages.
                 * @param message GCPolicy message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.IGCPolicy, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GCPolicy message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns GCPolicy
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.GCPolicy;

                /**
                 * Decodes a GCPolicy message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns GCPolicy
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.GCPolicy;

                /**
                 * Verifies a GCPolicy message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a GCPolicy message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns GCPolicy
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.GCPolicy;

                /**
                 * Creates a plain object from a GCPolicy message. Also converts values to other types if specified.
                 * @param message GCPolicy
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.GCPolicy, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this GCPolicy to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Constraint. */
            interface IConstraint {

                /** Constraint type */
                type?: (cockroach.config.zonepb.Constraint.Type|null);

                /** Constraint key */
                key?: (string|null);

                /** Constraint value */
                value?: (string|null);
            }

            /** Represents a Constraint. */
            class Constraint implements IConstraint {

                /**
                 * Constructs a new Constraint.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.IConstraint);

                /** Constraint type. */
                public type: cockroach.config.zonepb.Constraint.Type;

                /** Constraint key. */
                public key: string;

                /** Constraint value. */
                public value: string;

                /**
                 * Creates a new Constraint instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Constraint instance
                 */
                public static create(properties?: cockroach.config.zonepb.IConstraint): cockroach.config.zonepb.Constraint;

                /**
                 * Encodes the specified Constraint message. Does not implicitly {@link cockroach.config.zonepb.Constraint.verify|verify} messages.
                 * @param message Constraint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.IConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Constraint message, length delimited. Does not implicitly {@link cockroach.config.zonepb.Constraint.verify|verify} messages.
                 * @param message Constraint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.IConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Constraint message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Constraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.Constraint;

                /**
                 * Decodes a Constraint message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Constraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.Constraint;

                /**
                 * Verifies a Constraint message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Constraint
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.Constraint;

                /**
                 * Creates a plain object from a Constraint message. Also converts values to other types if specified.
                 * @param message Constraint
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.Constraint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Constraint to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace Constraint {

                /** Type enum. */
                enum Type {
                    DEPRECATED_POSITIVE = 0,
                    REQUIRED = 1,
                    PROHIBITED = 2
                }
            }

            /** Properties of a Constraints. */
            interface IConstraints {

                /** Constraints num_replicas */
                num_replicas?: (number|null);

                /** Constraints constraints */
                constraints?: (cockroach.config.zonepb.IConstraint[]|null);
            }

            /** Represents a Constraints. */
            class Constraints implements IConstraints {

                /**
                 * Constructs a new Constraints.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.IConstraints);

                /** Constraints num_replicas. */
                public num_replicas: number;

                /** Constraints constraints. */
                public constraints: cockroach.config.zonepb.IConstraint[];

                /**
                 * Creates a new Constraints instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Constraints instance
                 */
                public static create(properties?: cockroach.config.zonepb.IConstraints): cockroach.config.zonepb.Constraints;

                /**
                 * Encodes the specified Constraints message. Does not implicitly {@link cockroach.config.zonepb.Constraints.verify|verify} messages.
                 * @param message Constraints message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.IConstraints, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Constraints message, length delimited. Does not implicitly {@link cockroach.config.zonepb.Constraints.verify|verify} messages.
                 * @param message Constraints message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.IConstraints, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Constraints message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Constraints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.Constraints;

                /**
                 * Decodes a Constraints message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Constraints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.Constraints;

                /**
                 * Verifies a Constraints message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Constraints message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Constraints
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.Constraints;

                /**
                 * Creates a plain object from a Constraints message. Also converts values to other types if specified.
                 * @param message Constraints
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.Constraints, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Constraints to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LeasePreference. */
            interface ILeasePreference {

                /** LeasePreference constraints */
                constraints?: (cockroach.config.zonepb.IConstraint[]|null);
            }

            /** Represents a LeasePreference. */
            class LeasePreference implements ILeasePreference {

                /**
                 * Constructs a new LeasePreference.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.ILeasePreference);

                /** LeasePreference constraints. */
                public constraints: cockroach.config.zonepb.IConstraint[];

                /**
                 * Creates a new LeasePreference instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LeasePreference instance
                 */
                public static create(properties?: cockroach.config.zonepb.ILeasePreference): cockroach.config.zonepb.LeasePreference;

                /**
                 * Encodes the specified LeasePreference message. Does not implicitly {@link cockroach.config.zonepb.LeasePreference.verify|verify} messages.
                 * @param message LeasePreference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.ILeasePreference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LeasePreference message, length delimited. Does not implicitly {@link cockroach.config.zonepb.LeasePreference.verify|verify} messages.
                 * @param message LeasePreference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.ILeasePreference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LeasePreference message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LeasePreference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.LeasePreference;

                /**
                 * Decodes a LeasePreference message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LeasePreference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.LeasePreference;

                /**
                 * Verifies a LeasePreference message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LeasePreference message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LeasePreference
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.LeasePreference;

                /**
                 * Creates a plain object from a LeasePreference message. Also converts values to other types if specified.
                 * @param message LeasePreference
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.LeasePreference, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LeasePreference to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ZoneConfig. */
            interface IZoneConfig {

                /** ZoneConfig range_min_bytes */
                range_min_bytes?: (Long|null);

                /** ZoneConfig range_max_bytes */
                range_max_bytes?: (Long|null);

                /** ZoneConfig gc */
                gc?: (cockroach.config.zonepb.IGCPolicy|null);

                /** ZoneConfig num_replicas */
                num_replicas?: (number|null);

                /** ZoneConfig constraints */
                constraints?: (cockroach.config.zonepb.IConstraints[]|null);

                /** ZoneConfig inherited_constraints */
                inherited_constraints?: (boolean|null);

                /** ZoneConfig lease_preferences */
                lease_preferences?: (cockroach.config.zonepb.ILeasePreference[]|null);

                /** ZoneConfig inherited_lease_preferences */
                inherited_lease_preferences?: (boolean|null);

                /** ZoneConfig subzones */
                subzones?: (cockroach.config.zonepb.ISubzone[]|null);

                /** ZoneConfig subzone_spans */
                subzone_spans?: (cockroach.config.zonepb.ISubzoneSpan[]|null);
            }

            /** Represents a ZoneConfig. */
            class ZoneConfig implements IZoneConfig {

                /**
                 * Constructs a new ZoneConfig.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.IZoneConfig);

                /** ZoneConfig range_min_bytes. */
                public range_min_bytes: Long;

                /** ZoneConfig range_max_bytes. */
                public range_max_bytes: Long;

                /** ZoneConfig gc. */
                public gc?: (cockroach.config.zonepb.IGCPolicy|null);

                /** ZoneConfig num_replicas. */
                public num_replicas: number;

                /** ZoneConfig constraints. */
                public constraints: cockroach.config.zonepb.IConstraints[];

                /** ZoneConfig inherited_constraints. */
                public inherited_constraints: boolean;

                /** ZoneConfig lease_preferences. */
                public lease_preferences: cockroach.config.zonepb.ILeasePreference[];

                /** ZoneConfig inherited_lease_preferences. */
                public inherited_lease_preferences: boolean;

                /** ZoneConfig subzones. */
                public subzones: cockroach.config.zonepb.ISubzone[];

                /** ZoneConfig subzone_spans. */
                public subzone_spans: cockroach.config.zonepb.ISubzoneSpan[];

                /**
                 * Creates a new ZoneConfig instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ZoneConfig instance
                 */
                public static create(properties?: cockroach.config.zonepb.IZoneConfig): cockroach.config.zonepb.ZoneConfig;

                /**
                 * Encodes the specified ZoneConfig message. Does not implicitly {@link cockroach.config.zonepb.ZoneConfig.verify|verify} messages.
                 * @param message ZoneConfig message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.IZoneConfig, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ZoneConfig message, length delimited. Does not implicitly {@link cockroach.config.zonepb.ZoneConfig.verify|verify} messages.
                 * @param message ZoneConfig message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.IZoneConfig, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ZoneConfig message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.ZoneConfig;

                /**
                 * Decodes a ZoneConfig message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ZoneConfig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.ZoneConfig;

                /**
                 * Verifies a ZoneConfig message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ZoneConfig message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ZoneConfig
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.ZoneConfig;

                /**
                 * Creates a plain object from a ZoneConfig message. Also converts values to other types if specified.
                 * @param message ZoneConfig
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.ZoneConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ZoneConfig to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Subzone. */
            interface ISubzone {

                /** Subzone index_id */
                index_id?: (number|null);

                /** Subzone partition_name */
                partition_name?: (string|null);

                /** Subzone config */
                config?: (cockroach.config.zonepb.IZoneConfig|null);
            }

            /** Represents a Subzone. */
            class Subzone implements ISubzone {

                /**
                 * Constructs a new Subzone.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.ISubzone);

                /** Subzone index_id. */
                public index_id: number;

                /** Subzone partition_name. */
                public partition_name: string;

                /** Subzone config. */
                public config?: (cockroach.config.zonepb.IZoneConfig|null);

                /**
                 * Creates a new Subzone instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Subzone instance
                 */
                public static create(properties?: cockroach.config.zonepb.ISubzone): cockroach.config.zonepb.Subzone;

                /**
                 * Encodes the specified Subzone message. Does not implicitly {@link cockroach.config.zonepb.Subzone.verify|verify} messages.
                 * @param message Subzone message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.ISubzone, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Subzone message, length delimited. Does not implicitly {@link cockroach.config.zonepb.Subzone.verify|verify} messages.
                 * @param message Subzone message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.ISubzone, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Subzone message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Subzone
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.Subzone;

                /**
                 * Decodes a Subzone message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Subzone
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.Subzone;

                /**
                 * Verifies a Subzone message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Subzone message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Subzone
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.Subzone;

                /**
                 * Creates a plain object from a Subzone message. Also converts values to other types if specified.
                 * @param message Subzone
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.Subzone, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Subzone to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a SubzoneSpan. */
            interface ISubzoneSpan {

                /** SubzoneSpan key */
                key?: (Uint8Array|null);

                /** SubzoneSpan end_key */
                end_key?: (Uint8Array|null);

                /** SubzoneSpan subzone_index */
                subzone_index?: (number|null);
            }

            /** Represents a SubzoneSpan. */
            class SubzoneSpan implements ISubzoneSpan {

                /**
                 * Constructs a new SubzoneSpan.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.config.zonepb.ISubzoneSpan);

                /** SubzoneSpan key. */
                public key: Uint8Array;

                /** SubzoneSpan end_key. */
                public end_key: Uint8Array;

                /** SubzoneSpan subzone_index. */
                public subzone_index: number;

                /**
                 * Creates a new SubzoneSpan instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns SubzoneSpan instance
                 */
                public static create(properties?: cockroach.config.zonepb.ISubzoneSpan): cockroach.config.zonepb.SubzoneSpan;

                /**
                 * Encodes the specified SubzoneSpan message. Does not implicitly {@link cockroach.config.zonepb.SubzoneSpan.verify|verify} messages.
                 * @param message SubzoneSpan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.config.zonepb.ISubzoneSpan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SubzoneSpan message, length delimited. Does not implicitly {@link cockroach.config.zonepb.SubzoneSpan.verify|verify} messages.
                 * @param message SubzoneSpan message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.config.zonepb.ISubzoneSpan, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SubzoneSpan message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns SubzoneSpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.zonepb.SubzoneSpan;

                /**
                 * Decodes a SubzoneSpan message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns SubzoneSpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.zonepb.SubzoneSpan;

                /**
                 * Verifies a SubzoneSpan message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a SubzoneSpan message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns SubzoneSpan
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.config.zonepb.SubzoneSpan;

                /**
                 * Creates a plain object from a SubzoneSpan message. Also converts values to other types if specified.
                 * @param message SubzoneSpan
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.config.zonepb.SubzoneSpan, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this SubzoneSpan to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace sql. */
    namespace sql {

        /** Namespace jobs. */
        namespace jobs {

            /** Namespace jobspb. */
            namespace jobspb {

                /** Properties of a Lease. */
                interface ILease {

                    /** Lease node_id */
                    node_id?: (number|null);

                    /** Lease epoch */
                    epoch?: (Long|null);
                }

                /** Represents a Lease. */
                class Lease implements ILease {

                    /**
                     * Constructs a new Lease.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.ILease);

                    /** Lease node_id. */
                    public node_id: number;

                    /** Lease epoch. */
                    public epoch: Long;

                    /**
                     * Creates a new Lease instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Lease instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.ILease): cockroach.sql.jobs.jobspb.Lease;

                    /**
                     * Encodes the specified Lease message. Does not implicitly {@link cockroach.sql.jobs.jobspb.Lease.verify|verify} messages.
                     * @param message Lease message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.ILease, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Lease message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.Lease.verify|verify} messages.
                     * @param message Lease message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ILease, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Lease message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Lease
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.Lease;

                    /**
                     * Decodes a Lease message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Lease
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.Lease;

                    /**
                     * Verifies a Lease message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Lease message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Lease
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.Lease;

                    /**
                     * Creates a plain object from a Lease message. Also converts values to other types if specified.
                     * @param message Lease
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.Lease, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Lease to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a BackupDetails. */
                interface IBackupDetails {

                    /** BackupDetails start_time */
                    start_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** BackupDetails end_time */
                    end_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** BackupDetails uri */
                    uri?: (string|null);

                    /** BackupDetails uris_by_locality_kv */
                    uris_by_locality_kv?: ({ [k: string]: string }|null);

                    /** BackupDetails backup_descriptor */
                    backup_descriptor?: (Uint8Array|null);
                }

                /** Represents a BackupDetails. */
                class BackupDetails implements IBackupDetails {

                    /**
                     * Constructs a new BackupDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IBackupDetails);

                    /** BackupDetails start_time. */
                    public start_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** BackupDetails end_time. */
                    public end_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** BackupDetails uri. */
                    public uri: string;

                    /** BackupDetails uris_by_locality_kv. */
                    public uris_by_locality_kv: { [k: string]: string };

                    /** BackupDetails backup_descriptor. */
                    public backup_descriptor: Uint8Array;

                    /**
                     * Creates a new BackupDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns BackupDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IBackupDetails): cockroach.sql.jobs.jobspb.BackupDetails;

                    /**
                     * Encodes the specified BackupDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.BackupDetails.verify|verify} messages.
                     * @param message BackupDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IBackupDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified BackupDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.BackupDetails.verify|verify} messages.
                     * @param message BackupDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IBackupDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a BackupDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns BackupDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.BackupDetails;

                    /**
                     * Decodes a BackupDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns BackupDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.BackupDetails;

                    /**
                     * Verifies a BackupDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a BackupDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns BackupDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.BackupDetails;

                    /**
                     * Creates a plain object from a BackupDetails message. Also converts values to other types if specified.
                     * @param message BackupDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.BackupDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this BackupDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a BackupProgress. */
                interface IBackupProgress {
                }

                /** Represents a BackupProgress. */
                class BackupProgress implements IBackupProgress {

                    /**
                     * Constructs a new BackupProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IBackupProgress);

                    /**
                     * Creates a new BackupProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns BackupProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IBackupProgress): cockroach.sql.jobs.jobspb.BackupProgress;

                    /**
                     * Encodes the specified BackupProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.BackupProgress.verify|verify} messages.
                     * @param message BackupProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IBackupProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified BackupProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.BackupProgress.verify|verify} messages.
                     * @param message BackupProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IBackupProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a BackupProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns BackupProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.BackupProgress;

                    /**
                     * Decodes a BackupProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns BackupProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.BackupProgress;

                    /**
                     * Verifies a BackupProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a BackupProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns BackupProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.BackupProgress;

                    /**
                     * Creates a plain object from a BackupProgress message. Also converts values to other types if specified.
                     * @param message BackupProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.BackupProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this BackupProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a RestoreDetails. */
                interface IRestoreDetails {

                    /** RestoreDetails end_time */
                    end_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** RestoreDetails table_rewrites */
                    table_rewrites?: ({ [k: string]: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite }|null);

                    /** RestoreDetails uris */
                    uris?: (string[]|null);

                    /** RestoreDetails backup_locality_info */
                    backup_locality_info?: (cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo[]|null);

                    /** RestoreDetails table_descs */
                    table_descs?: (cockroach.sql.sqlbase.ITableDescriptor[]|null);

                    /** RestoreDetails override_db */
                    override_db?: (string|null);

                    /** RestoreDetails prepare_completed */
                    prepare_completed?: (boolean|null);

                    /** RestoreDetails stats_inserted */
                    stats_inserted?: (boolean|null);

                    /** RestoreDetails tables_published */
                    tables_published?: (boolean|null);
                }

                /** Represents a RestoreDetails. */
                class RestoreDetails implements IRestoreDetails {

                    /**
                     * Constructs a new RestoreDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IRestoreDetails);

                    /** RestoreDetails end_time. */
                    public end_time?: (cockroach.util.hlc.ITimestamp|null);

                    /** RestoreDetails table_rewrites. */
                    public table_rewrites: { [k: string]: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite };

                    /** RestoreDetails uris. */
                    public uris: string[];

                    /** RestoreDetails backup_locality_info. */
                    public backup_locality_info: cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo[];

                    /** RestoreDetails table_descs. */
                    public table_descs: cockroach.sql.sqlbase.ITableDescriptor[];

                    /** RestoreDetails override_db. */
                    public override_db: string;

                    /** RestoreDetails prepare_completed. */
                    public prepare_completed: boolean;

                    /** RestoreDetails stats_inserted. */
                    public stats_inserted: boolean;

                    /** RestoreDetails tables_published. */
                    public tables_published: boolean;

                    /**
                     * Creates a new RestoreDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns RestoreDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IRestoreDetails): cockroach.sql.jobs.jobspb.RestoreDetails;

                    /**
                     * Encodes the specified RestoreDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.verify|verify} messages.
                     * @param message RestoreDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IRestoreDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified RestoreDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.verify|verify} messages.
                     * @param message RestoreDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IRestoreDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a RestoreDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns RestoreDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.RestoreDetails;

                    /**
                     * Decodes a RestoreDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns RestoreDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.RestoreDetails;

                    /**
                     * Verifies a RestoreDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RestoreDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RestoreDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.RestoreDetails;

                    /**
                     * Creates a plain object from a RestoreDetails message. Also converts values to other types if specified.
                     * @param message RestoreDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.RestoreDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RestoreDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace RestoreDetails {

                    /** Properties of a TableRewrite. */
                    interface ITableRewrite {

                        /** TableRewrite table_id */
                        table_id?: (number|null);

                        /** TableRewrite parent_id */
                        parent_id?: (number|null);
                    }

                    /** Represents a TableRewrite. */
                    class TableRewrite implements ITableRewrite {

                        /**
                         * Constructs a new TableRewrite.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite);

                        /** TableRewrite table_id. */
                        public table_id: number;

                        /** TableRewrite parent_id. */
                        public parent_id: number;

                        /**
                         * Creates a new TableRewrite instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns TableRewrite instance
                         */
                        public static create(properties?: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite): cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite;

                        /**
                         * Encodes the specified TableRewrite message. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite.verify|verify} messages.
                         * @param message TableRewrite message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified TableRewrite message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite.verify|verify} messages.
                         * @param message TableRewrite message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.sql.jobs.jobspb.RestoreDetails.ITableRewrite, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a TableRewrite message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns TableRewrite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite;

                        /**
                         * Decodes a TableRewrite message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns TableRewrite
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite;

                        /**
                         * Verifies a TableRewrite message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a TableRewrite message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns TableRewrite
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite;

                        /**
                         * Creates a plain object from a TableRewrite message. Also converts values to other types if specified.
                         * @param message TableRewrite
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.sql.jobs.jobspb.RestoreDetails.TableRewrite, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this TableRewrite to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }

                    /** Properties of a BackupLocalityInfo. */
                    interface IBackupLocalityInfo {

                        /** BackupLocalityInfo uris_by_original_locality_kv */
                        uris_by_original_locality_kv?: ({ [k: string]: string }|null);
                    }

                    /** Represents a BackupLocalityInfo. */
                    class BackupLocalityInfo implements IBackupLocalityInfo {

                        /**
                         * Constructs a new BackupLocalityInfo.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo);

                        /** BackupLocalityInfo uris_by_original_locality_kv. */
                        public uris_by_original_locality_kv: { [k: string]: string };

                        /**
                         * Creates a new BackupLocalityInfo instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns BackupLocalityInfo instance
                         */
                        public static create(properties?: cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo): cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo;

                        /**
                         * Encodes the specified BackupLocalityInfo message. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo.verify|verify} messages.
                         * @param message BackupLocalityInfo message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified BackupLocalityInfo message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo.verify|verify} messages.
                         * @param message BackupLocalityInfo message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.sql.jobs.jobspb.RestoreDetails.IBackupLocalityInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a BackupLocalityInfo message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns BackupLocalityInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo;

                        /**
                         * Decodes a BackupLocalityInfo message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns BackupLocalityInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo;

                        /**
                         * Verifies a BackupLocalityInfo message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a BackupLocalityInfo message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns BackupLocalityInfo
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo;

                        /**
                         * Creates a plain object from a BackupLocalityInfo message. Also converts values to other types if specified.
                         * @param message BackupLocalityInfo
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.sql.jobs.jobspb.RestoreDetails.BackupLocalityInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this BackupLocalityInfo to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a RestoreProgress. */
                interface IRestoreProgress {

                    /** RestoreProgress high_water */
                    high_water?: (Uint8Array|null);
                }

                /** Represents a RestoreProgress. */
                class RestoreProgress implements IRestoreProgress {

                    /**
                     * Constructs a new RestoreProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IRestoreProgress);

                    /** RestoreProgress high_water. */
                    public high_water: Uint8Array;

                    /**
                     * Creates a new RestoreProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns RestoreProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IRestoreProgress): cockroach.sql.jobs.jobspb.RestoreProgress;

                    /**
                     * Encodes the specified RestoreProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreProgress.verify|verify} messages.
                     * @param message RestoreProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IRestoreProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified RestoreProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.RestoreProgress.verify|verify} messages.
                     * @param message RestoreProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IRestoreProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a RestoreProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns RestoreProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.RestoreProgress;

                    /**
                     * Decodes a RestoreProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns RestoreProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.RestoreProgress;

                    /**
                     * Verifies a RestoreProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RestoreProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RestoreProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.RestoreProgress;

                    /**
                     * Creates a plain object from a RestoreProgress message. Also converts values to other types if specified.
                     * @param message RestoreProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.RestoreProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RestoreProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an ImportDetails. */
                interface IImportDetails {

                    /** ImportDetails tables */
                    tables?: (cockroach.sql.jobs.jobspb.ImportDetails.ITable[]|null);

                    /** ImportDetails uris */
                    uris?: (string[]|null);

                    /** ImportDetails format */
                    format?: (cockroach.roachpb.IIOFileFormat|null);

                    /** ImportDetails sst_size */
                    sst_size?: (Long|null);

                    /** ImportDetails oversample */
                    oversample?: (Long|null);

                    /** ImportDetails skip_fks */
                    skip_fks?: (boolean|null);

                    /** ImportDetails walltime */
                    walltime?: (Long|null);

                    /** ImportDetails parent_id */
                    parent_id?: (number|null);

                    /** ImportDetails backup_path */
                    backup_path?: (string|null);

                    /** ImportDetails samples */
                    samples?: (Uint8Array[]|null);

                    /** ImportDetails ingest_directly */
                    ingest_directly?: (boolean|null);

                    /** ImportDetails prepare_complete */
                    prepare_complete?: (boolean|null);

                    /** ImportDetails tables_published */
                    tables_published?: (boolean|null);
                }

                /** Represents an ImportDetails. */
                class ImportDetails implements IImportDetails {

                    /**
                     * Constructs a new ImportDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IImportDetails);

                    /** ImportDetails tables. */
                    public tables: cockroach.sql.jobs.jobspb.ImportDetails.ITable[];

                    /** ImportDetails uris. */
                    public uris: string[];

                    /** ImportDetails format. */
                    public format?: (cockroach.roachpb.IIOFileFormat|null);

                    /** ImportDetails sst_size. */
                    public sst_size: Long;

                    /** ImportDetails oversample. */
                    public oversample: Long;

                    /** ImportDetails skip_fks. */
                    public skip_fks: boolean;

                    /** ImportDetails walltime. */
                    public walltime: Long;

                    /** ImportDetails parent_id. */
                    public parent_id: number;

                    /** ImportDetails backup_path. */
                    public backup_path: string;

                    /** ImportDetails samples. */
                    public samples: Uint8Array[];

                    /** ImportDetails ingest_directly. */
                    public ingest_directly: boolean;

                    /** ImportDetails prepare_complete. */
                    public prepare_complete: boolean;

                    /** ImportDetails tables_published. */
                    public tables_published: boolean;

                    /**
                     * Creates a new ImportDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ImportDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IImportDetails): cockroach.sql.jobs.jobspb.ImportDetails;

                    /**
                     * Encodes the specified ImportDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportDetails.verify|verify} messages.
                     * @param message ImportDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IImportDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ImportDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportDetails.verify|verify} messages.
                     * @param message ImportDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IImportDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an ImportDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ImportDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ImportDetails;

                    /**
                     * Decodes an ImportDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ImportDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ImportDetails;

                    /**
                     * Verifies an ImportDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an ImportDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ImportDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ImportDetails;

                    /**
                     * Creates a plain object from an ImportDetails message. Also converts values to other types if specified.
                     * @param message ImportDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ImportDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ImportDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace ImportDetails {

                    /** Properties of a Table. */
                    interface ITable {

                        /** Table desc */
                        desc?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                        /** Table name */
                        name?: (string|null);

                        /** Table seq_val */
                        seq_val?: (Long|null);

                        /** Table is_new */
                        is_new?: (boolean|null);

                        /** Table target_cols */
                        target_cols?: (string[]|null);
                    }

                    /** Represents a Table. */
                    class Table implements ITable {

                        /**
                         * Constructs a new Table.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.sql.jobs.jobspb.ImportDetails.ITable);

                        /** Table desc. */
                        public desc?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                        /** Table name. */
                        public name: string;

                        /** Table seq_val. */
                        public seq_val: Long;

                        /** Table is_new. */
                        public is_new: boolean;

                        /** Table target_cols. */
                        public target_cols: string[];

                        /**
                         * Creates a new Table instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns Table instance
                         */
                        public static create(properties?: cockroach.sql.jobs.jobspb.ImportDetails.ITable): cockroach.sql.jobs.jobspb.ImportDetails.Table;

                        /**
                         * Encodes the specified Table message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportDetails.Table.verify|verify} messages.
                         * @param message Table message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.sql.jobs.jobspb.ImportDetails.ITable, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified Table message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportDetails.Table.verify|verify} messages.
                         * @param message Table message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ImportDetails.ITable, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a Table message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ImportDetails.Table;

                        /**
                         * Decodes a Table message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns Table
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ImportDetails.Table;

                        /**
                         * Verifies a Table message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a Table message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns Table
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ImportDetails.Table;

                        /**
                         * Creates a plain object from a Table message. Also converts values to other types if specified.
                         * @param message Table
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.sql.jobs.jobspb.ImportDetails.Table, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this Table to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of an ImportProgress. */
                interface IImportProgress {

                    /** ImportProgress sampling_progress */
                    sampling_progress?: (number[]|null);

                    /** ImportProgress read_progress */
                    read_progress?: (number[]|null);

                    /** ImportProgress write_progress */
                    write_progress?: (number[]|null);

                    /** ImportProgress span_progress */
                    span_progress?: (cockroach.roachpb.ISpan[]|null);

                    /** ImportProgress resume_pos */
                    resume_pos?: (Long[]|null);
                }

                /** Represents an ImportProgress. */
                class ImportProgress implements IImportProgress {

                    /**
                     * Constructs a new ImportProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IImportProgress);

                    /** ImportProgress sampling_progress. */
                    public sampling_progress: number[];

                    /** ImportProgress read_progress. */
                    public read_progress: number[];

                    /** ImportProgress write_progress. */
                    public write_progress: number[];

                    /** ImportProgress span_progress. */
                    public span_progress: cockroach.roachpb.ISpan[];

                    /** ImportProgress resume_pos. */
                    public resume_pos: Long[];

                    /**
                     * Creates a new ImportProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ImportProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IImportProgress): cockroach.sql.jobs.jobspb.ImportProgress;

                    /**
                     * Encodes the specified ImportProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportProgress.verify|verify} messages.
                     * @param message ImportProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IImportProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ImportProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ImportProgress.verify|verify} messages.
                     * @param message ImportProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IImportProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an ImportProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ImportProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ImportProgress;

                    /**
                     * Decodes an ImportProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ImportProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ImportProgress;

                    /**
                     * Verifies an ImportProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an ImportProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ImportProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ImportProgress;

                    /**
                     * Creates a plain object from an ImportProgress message. Also converts values to other types if specified.
                     * @param message ImportProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ImportProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ImportProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ResumeSpanList. */
                interface IResumeSpanList {

                    /** ResumeSpanList resume_spans */
                    resume_spans?: (cockroach.roachpb.ISpan[]|null);
                }

                /** Represents a ResumeSpanList. */
                class ResumeSpanList implements IResumeSpanList {

                    /**
                     * Constructs a new ResumeSpanList.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IResumeSpanList);

                    /** ResumeSpanList resume_spans. */
                    public resume_spans: cockroach.roachpb.ISpan[];

                    /**
                     * Creates a new ResumeSpanList instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ResumeSpanList instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IResumeSpanList): cockroach.sql.jobs.jobspb.ResumeSpanList;

                    /**
                     * Encodes the specified ResumeSpanList message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ResumeSpanList.verify|verify} messages.
                     * @param message ResumeSpanList message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IResumeSpanList, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ResumeSpanList message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ResumeSpanList.verify|verify} messages.
                     * @param message ResumeSpanList message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IResumeSpanList, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ResumeSpanList message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ResumeSpanList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ResumeSpanList;

                    /**
                     * Decodes a ResumeSpanList message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ResumeSpanList
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ResumeSpanList;

                    /**
                     * Verifies a ResumeSpanList message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ResumeSpanList message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ResumeSpanList
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ResumeSpanList;

                    /**
                     * Creates a plain object from a ResumeSpanList message. Also converts values to other types if specified.
                     * @param message ResumeSpanList
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ResumeSpanList, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ResumeSpanList to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Status enum. */
                enum Status {
                    DRAINING_NAMES = 0,
                    WAIT_FOR_GC_INTERVAL = 1,
                    ROCKSDB_COMPACTION = 2,
                    DONE = 10
                }

                /** Properties of a DroppedTableDetails. */
                interface IDroppedTableDetails {

                    /** DroppedTableDetails name */
                    name?: (string|null);

                    /** DroppedTableDetails ID */
                    ID?: (number|null);

                    /** DroppedTableDetails status */
                    status?: (cockroach.sql.jobs.jobspb.Status|null);
                }

                /** Represents a DroppedTableDetails. */
                class DroppedTableDetails implements IDroppedTableDetails {

                    /**
                     * Constructs a new DroppedTableDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IDroppedTableDetails);

                    /** DroppedTableDetails name. */
                    public name: string;

                    /** DroppedTableDetails ID. */
                    public ID: number;

                    /** DroppedTableDetails status. */
                    public status: cockroach.sql.jobs.jobspb.Status;

                    /**
                     * Creates a new DroppedTableDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns DroppedTableDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IDroppedTableDetails): cockroach.sql.jobs.jobspb.DroppedTableDetails;

                    /**
                     * Encodes the specified DroppedTableDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.DroppedTableDetails.verify|verify} messages.
                     * @param message DroppedTableDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IDroppedTableDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified DroppedTableDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.DroppedTableDetails.verify|verify} messages.
                     * @param message DroppedTableDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IDroppedTableDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a DroppedTableDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns DroppedTableDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.DroppedTableDetails;

                    /**
                     * Decodes a DroppedTableDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns DroppedTableDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.DroppedTableDetails;

                    /**
                     * Verifies a DroppedTableDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a DroppedTableDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns DroppedTableDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.DroppedTableDetails;

                    /**
                     * Creates a plain object from a DroppedTableDetails message. Also converts values to other types if specified.
                     * @param message DroppedTableDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.DroppedTableDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this DroppedTableDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SchemaChangeDetails. */
                interface ISchemaChangeDetails {

                    /** SchemaChangeDetails resume_span_list */
                    resume_span_list?: (cockroach.sql.jobs.jobspb.IResumeSpanList[]|null);

                    /** SchemaChangeDetails dropped_tables */
                    dropped_tables?: (cockroach.sql.jobs.jobspb.IDroppedTableDetails[]|null);

                    /** SchemaChangeDetails dropped_database_id */
                    dropped_database_id?: (number|null);
                }

                /** Represents a SchemaChangeDetails. */
                class SchemaChangeDetails implements ISchemaChangeDetails {

                    /**
                     * Constructs a new SchemaChangeDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.ISchemaChangeDetails);

                    /** SchemaChangeDetails resume_span_list. */
                    public resume_span_list: cockroach.sql.jobs.jobspb.IResumeSpanList[];

                    /** SchemaChangeDetails dropped_tables. */
                    public dropped_tables: cockroach.sql.jobs.jobspb.IDroppedTableDetails[];

                    /** SchemaChangeDetails dropped_database_id. */
                    public dropped_database_id: number;

                    /**
                     * Creates a new SchemaChangeDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SchemaChangeDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.ISchemaChangeDetails): cockroach.sql.jobs.jobspb.SchemaChangeDetails;

                    /**
                     * Encodes the specified SchemaChangeDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.SchemaChangeDetails.verify|verify} messages.
                     * @param message SchemaChangeDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.ISchemaChangeDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SchemaChangeDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.SchemaChangeDetails.verify|verify} messages.
                     * @param message SchemaChangeDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ISchemaChangeDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SchemaChangeDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SchemaChangeDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.SchemaChangeDetails;

                    /**
                     * Decodes a SchemaChangeDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SchemaChangeDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.SchemaChangeDetails;

                    /**
                     * Verifies a SchemaChangeDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SchemaChangeDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SchemaChangeDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.SchemaChangeDetails;

                    /**
                     * Creates a plain object from a SchemaChangeDetails message. Also converts values to other types if specified.
                     * @param message SchemaChangeDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.SchemaChangeDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SchemaChangeDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SchemaChangeProgress. */
                interface ISchemaChangeProgress {
                }

                /** Represents a SchemaChangeProgress. */
                class SchemaChangeProgress implements ISchemaChangeProgress {

                    /**
                     * Constructs a new SchemaChangeProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.ISchemaChangeProgress);

                    /**
                     * Creates a new SchemaChangeProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SchemaChangeProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.ISchemaChangeProgress): cockroach.sql.jobs.jobspb.SchemaChangeProgress;

                    /**
                     * Encodes the specified SchemaChangeProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.SchemaChangeProgress.verify|verify} messages.
                     * @param message SchemaChangeProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.ISchemaChangeProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SchemaChangeProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.SchemaChangeProgress.verify|verify} messages.
                     * @param message SchemaChangeProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ISchemaChangeProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SchemaChangeProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SchemaChangeProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.SchemaChangeProgress;

                    /**
                     * Decodes a SchemaChangeProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SchemaChangeProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.SchemaChangeProgress;

                    /**
                     * Verifies a SchemaChangeProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SchemaChangeProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SchemaChangeProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.SchemaChangeProgress;

                    /**
                     * Creates a plain object from a SchemaChangeProgress message. Also converts values to other types if specified.
                     * @param message SchemaChangeProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.SchemaChangeProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SchemaChangeProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ChangefeedTarget. */
                interface IChangefeedTarget {

                    /** ChangefeedTarget statement_time_name */
                    statement_time_name?: (string|null);
                }

                /** Represents a ChangefeedTarget. */
                class ChangefeedTarget implements IChangefeedTarget {

                    /**
                     * Constructs a new ChangefeedTarget.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IChangefeedTarget);

                    /** ChangefeedTarget statement_time_name. */
                    public statement_time_name: string;

                    /**
                     * Creates a new ChangefeedTarget instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChangefeedTarget instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IChangefeedTarget): cockroach.sql.jobs.jobspb.ChangefeedTarget;

                    /**
                     * Encodes the specified ChangefeedTarget message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedTarget.verify|verify} messages.
                     * @param message ChangefeedTarget message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IChangefeedTarget, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChangefeedTarget message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedTarget.verify|verify} messages.
                     * @param message ChangefeedTarget message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IChangefeedTarget, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChangefeedTarget message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChangefeedTarget
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ChangefeedTarget;

                    /**
                     * Decodes a ChangefeedTarget message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChangefeedTarget
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ChangefeedTarget;

                    /**
                     * Verifies a ChangefeedTarget message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChangefeedTarget message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChangefeedTarget
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ChangefeedTarget;

                    /**
                     * Creates a plain object from a ChangefeedTarget message. Also converts values to other types if specified.
                     * @param message ChangefeedTarget
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ChangefeedTarget, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChangefeedTarget to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ChangefeedDetails. */
                interface IChangefeedDetails {

                    /** ChangefeedDetails targets */
                    targets?: ({ [k: string]: cockroach.sql.jobs.jobspb.IChangefeedTarget }|null);

                    /** ChangefeedDetails sink_uri */
                    sink_uri?: (string|null);

                    /** ChangefeedDetails opts */
                    opts?: ({ [k: string]: string }|null);

                    /** ChangefeedDetails statement_time */
                    statement_time?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a ChangefeedDetails. */
                class ChangefeedDetails implements IChangefeedDetails {

                    /**
                     * Constructs a new ChangefeedDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IChangefeedDetails);

                    /** ChangefeedDetails targets. */
                    public targets: { [k: string]: cockroach.sql.jobs.jobspb.IChangefeedTarget };

                    /** ChangefeedDetails sink_uri. */
                    public sink_uri: string;

                    /** ChangefeedDetails opts. */
                    public opts: { [k: string]: string };

                    /** ChangefeedDetails statement_time. */
                    public statement_time?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new ChangefeedDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChangefeedDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IChangefeedDetails): cockroach.sql.jobs.jobspb.ChangefeedDetails;

                    /**
                     * Encodes the specified ChangefeedDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedDetails.verify|verify} messages.
                     * @param message ChangefeedDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IChangefeedDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChangefeedDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedDetails.verify|verify} messages.
                     * @param message ChangefeedDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IChangefeedDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChangefeedDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChangefeedDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ChangefeedDetails;

                    /**
                     * Decodes a ChangefeedDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChangefeedDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ChangefeedDetails;

                    /**
                     * Verifies a ChangefeedDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChangefeedDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChangefeedDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ChangefeedDetails;

                    /**
                     * Creates a plain object from a ChangefeedDetails message. Also converts values to other types if specified.
                     * @param message ChangefeedDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ChangefeedDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChangefeedDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ResolvedSpan. */
                interface IResolvedSpan {

                    /** ResolvedSpan span */
                    span?: (cockroach.roachpb.ISpan|null);

                    /** ResolvedSpan timestamp */
                    timestamp?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a ResolvedSpan. */
                class ResolvedSpan implements IResolvedSpan {

                    /**
                     * Constructs a new ResolvedSpan.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IResolvedSpan);

                    /** ResolvedSpan span. */
                    public span?: (cockroach.roachpb.ISpan|null);

                    /** ResolvedSpan timestamp. */
                    public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new ResolvedSpan instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ResolvedSpan instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IResolvedSpan): cockroach.sql.jobs.jobspb.ResolvedSpan;

                    /**
                     * Encodes the specified ResolvedSpan message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ResolvedSpan.verify|verify} messages.
                     * @param message ResolvedSpan message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IResolvedSpan, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ResolvedSpan message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ResolvedSpan.verify|verify} messages.
                     * @param message ResolvedSpan message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IResolvedSpan, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ResolvedSpan message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ResolvedSpan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ResolvedSpan;

                    /**
                     * Decodes a ResolvedSpan message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ResolvedSpan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ResolvedSpan;

                    /**
                     * Verifies a ResolvedSpan message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ResolvedSpan message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ResolvedSpan
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ResolvedSpan;

                    /**
                     * Creates a plain object from a ResolvedSpan message. Also converts values to other types if specified.
                     * @param message ResolvedSpan
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ResolvedSpan, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ResolvedSpan to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a ChangefeedProgress. */
                interface IChangefeedProgress {

                    /** ChangefeedProgress resolved_spans */
                    resolved_spans?: (cockroach.sql.jobs.jobspb.IResolvedSpan[]|null);
                }

                /** Represents a ChangefeedProgress. */
                class ChangefeedProgress implements IChangefeedProgress {

                    /**
                     * Constructs a new ChangefeedProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IChangefeedProgress);

                    /** ChangefeedProgress resolved_spans. */
                    public resolved_spans: cockroach.sql.jobs.jobspb.IResolvedSpan[];

                    /**
                     * Creates a new ChangefeedProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns ChangefeedProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IChangefeedProgress): cockroach.sql.jobs.jobspb.ChangefeedProgress;

                    /**
                     * Encodes the specified ChangefeedProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedProgress.verify|verify} messages.
                     * @param message ChangefeedProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IChangefeedProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified ChangefeedProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.ChangefeedProgress.verify|verify} messages.
                     * @param message ChangefeedProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IChangefeedProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a ChangefeedProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns ChangefeedProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.ChangefeedProgress;

                    /**
                     * Decodes a ChangefeedProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns ChangefeedProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.ChangefeedProgress;

                    /**
                     * Verifies a ChangefeedProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a ChangefeedProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns ChangefeedProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.ChangefeedProgress;

                    /**
                     * Creates a plain object from a ChangefeedProgress message. Also converts values to other types if specified.
                     * @param message ChangefeedProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.ChangefeedProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this ChangefeedProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a CreateStatsDetails. */
                interface ICreateStatsDetails {

                    /** CreateStatsDetails name */
                    name?: (string|null);

                    /** CreateStatsDetails table */
                    table?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                    /** CreateStatsDetails column_stats */
                    column_stats?: (cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat[]|null);

                    /** CreateStatsDetails statement */
                    statement?: (string|null);

                    /** CreateStatsDetails as_of */
                    as_of?: (cockroach.util.hlc.ITimestamp|null);

                    /** CreateStatsDetails max_fraction_idle */
                    max_fraction_idle?: (number|null);

                    /** CreateStatsDetails fq_table_name */
                    fq_table_name?: (string|null);
                }

                /** Represents a CreateStatsDetails. */
                class CreateStatsDetails implements ICreateStatsDetails {

                    /**
                     * Constructs a new CreateStatsDetails.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.ICreateStatsDetails);

                    /** CreateStatsDetails name. */
                    public name: string;

                    /** CreateStatsDetails table. */
                    public table?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                    /** CreateStatsDetails column_stats. */
                    public column_stats: cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat[];

                    /** CreateStatsDetails statement. */
                    public statement: string;

                    /** CreateStatsDetails as_of. */
                    public as_of?: (cockroach.util.hlc.ITimestamp|null);

                    /** CreateStatsDetails max_fraction_idle. */
                    public max_fraction_idle: number;

                    /** CreateStatsDetails fq_table_name. */
                    public fq_table_name: string;

                    /**
                     * Creates a new CreateStatsDetails instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CreateStatsDetails instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.ICreateStatsDetails): cockroach.sql.jobs.jobspb.CreateStatsDetails;

                    /**
                     * Encodes the specified CreateStatsDetails message. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsDetails.verify|verify} messages.
                     * @param message CreateStatsDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.ICreateStatsDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CreateStatsDetails message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsDetails.verify|verify} messages.
                     * @param message CreateStatsDetails message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ICreateStatsDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CreateStatsDetails message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CreateStatsDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.CreateStatsDetails;

                    /**
                     * Decodes a CreateStatsDetails message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CreateStatsDetails
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.CreateStatsDetails;

                    /**
                     * Verifies a CreateStatsDetails message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CreateStatsDetails message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CreateStatsDetails
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.CreateStatsDetails;

                    /**
                     * Creates a plain object from a CreateStatsDetails message. Also converts values to other types if specified.
                     * @param message CreateStatsDetails
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.CreateStatsDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CreateStatsDetails to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace CreateStatsDetails {

                    /** Properties of a ColStat. */
                    interface IColStat {

                        /** ColStat column_ids */
                        column_ids?: (number[]|null);

                        /** ColStat has_histogram */
                        has_histogram?: (boolean|null);
                    }

                    /** Represents a ColStat. */
                    class ColStat implements IColStat {

                        /**
                         * Constructs a new ColStat.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat);

                        /** ColStat column_ids. */
                        public column_ids: number[];

                        /** ColStat has_histogram. */
                        public has_histogram: boolean;

                        /**
                         * Creates a new ColStat instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns ColStat instance
                         */
                        public static create(properties?: cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat): cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat;

                        /**
                         * Encodes the specified ColStat message. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat.verify|verify} messages.
                         * @param message ColStat message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified ColStat message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat.verify|verify} messages.
                         * @param message ColStat message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.sql.jobs.jobspb.CreateStatsDetails.IColStat, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a ColStat message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns ColStat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat;

                        /**
                         * Decodes a ColStat message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns ColStat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat;

                        /**
                         * Verifies a ColStat message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a ColStat message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns ColStat
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat;

                        /**
                         * Creates a plain object from a ColStat message. Also converts values to other types if specified.
                         * @param message ColStat
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.sql.jobs.jobspb.CreateStatsDetails.ColStat, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this ColStat to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a CreateStatsProgress. */
                interface ICreateStatsProgress {
                }

                /** Represents a CreateStatsProgress. */
                class CreateStatsProgress implements ICreateStatsProgress {

                    /**
                     * Constructs a new CreateStatsProgress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.ICreateStatsProgress);

                    /**
                     * Creates a new CreateStatsProgress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CreateStatsProgress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.ICreateStatsProgress): cockroach.sql.jobs.jobspb.CreateStatsProgress;

                    /**
                     * Encodes the specified CreateStatsProgress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsProgress.verify|verify} messages.
                     * @param message CreateStatsProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.ICreateStatsProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CreateStatsProgress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.CreateStatsProgress.verify|verify} messages.
                     * @param message CreateStatsProgress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.ICreateStatsProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CreateStatsProgress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CreateStatsProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.CreateStatsProgress;

                    /**
                     * Decodes a CreateStatsProgress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CreateStatsProgress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.CreateStatsProgress;

                    /**
                     * Verifies a CreateStatsProgress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CreateStatsProgress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CreateStatsProgress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.CreateStatsProgress;

                    /**
                     * Creates a plain object from a CreateStatsProgress message. Also converts values to other types if specified.
                     * @param message CreateStatsProgress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.CreateStatsProgress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CreateStatsProgress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Payload. */
                interface IPayload {

                    /** Payload description */
                    description?: (string|null);

                    /** Payload statement */
                    statement?: (string|null);

                    /** Payload username */
                    username?: (string|null);

                    /** Payload started_micros */
                    started_micros?: (Long|null);

                    /** Payload finished_micros */
                    finished_micros?: (Long|null);

                    /** Payload descriptor_ids */
                    descriptor_ids?: (number[]|null);

                    /** Payload error */
                    error?: (string|null);

                    /** Payload resume_errors */
                    resume_errors?: (cockroach.errorspb.IEncodedError[]|null);

                    /** Payload cleanup_errors */
                    cleanup_errors?: (cockroach.errorspb.IEncodedError[]|null);

                    /** Payload lease */
                    lease?: (cockroach.sql.jobs.jobspb.ILease|null);

                    /** Payload backup */
                    backup?: (cockroach.sql.jobs.jobspb.IBackupDetails|null);

                    /** Payload restore */
                    restore?: (cockroach.sql.jobs.jobspb.IRestoreDetails|null);

                    /** Payload schemaChange */
                    schemaChange?: (cockroach.sql.jobs.jobspb.ISchemaChangeDetails|null);

                    /** Payload import */
                    "import"?: (cockroach.sql.jobs.jobspb.IImportDetails|null);

                    /** Payload changefeed */
                    changefeed?: (cockroach.sql.jobs.jobspb.IChangefeedDetails|null);

                    /** Payload createStats */
                    createStats?: (cockroach.sql.jobs.jobspb.ICreateStatsDetails|null);
                }

                /** Represents a Payload. */
                class Payload implements IPayload {

                    /**
                     * Constructs a new Payload.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IPayload);

                    /** Payload description. */
                    public description: string;

                    /** Payload statement. */
                    public statement: string;

                    /** Payload username. */
                    public username: string;

                    /** Payload started_micros. */
                    public started_micros: Long;

                    /** Payload finished_micros. */
                    public finished_micros: Long;

                    /** Payload descriptor_ids. */
                    public descriptor_ids: number[];

                    /** Payload error. */
                    public error: string;

                    /** Payload resume_errors. */
                    public resume_errors: cockroach.errorspb.IEncodedError[];

                    /** Payload cleanup_errors. */
                    public cleanup_errors: cockroach.errorspb.IEncodedError[];

                    /** Payload lease. */
                    public lease?: (cockroach.sql.jobs.jobspb.ILease|null);

                    /** Payload backup. */
                    public backup?: (cockroach.sql.jobs.jobspb.IBackupDetails|null);

                    /** Payload restore. */
                    public restore?: (cockroach.sql.jobs.jobspb.IRestoreDetails|null);

                    /** Payload schemaChange. */
                    public schemaChange?: (cockroach.sql.jobs.jobspb.ISchemaChangeDetails|null);

                    /** Payload import. */
                    public import?: (cockroach.sql.jobs.jobspb.IImportDetails|null);

                    /** Payload changefeed. */
                    public changefeed?: (cockroach.sql.jobs.jobspb.IChangefeedDetails|null);

                    /** Payload createStats. */
                    public createStats?: (cockroach.sql.jobs.jobspb.ICreateStatsDetails|null);

                    /** Payload details. */
                    public details?: ("backup"|"restore"|"schemaChange"|"import"|"changefeed"|"createStats");

                    /**
                     * Creates a new Payload instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Payload instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IPayload): cockroach.sql.jobs.jobspb.Payload;

                    /**
                     * Encodes the specified Payload message. Does not implicitly {@link cockroach.sql.jobs.jobspb.Payload.verify|verify} messages.
                     * @param message Payload message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IPayload, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Payload message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.Payload.verify|verify} messages.
                     * @param message Payload message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IPayload, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Payload message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Payload
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.Payload;

                    /**
                     * Decodes a Payload message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Payload
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.Payload;

                    /**
                     * Verifies a Payload message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Payload message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Payload
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.Payload;

                    /**
                     * Creates a plain object from a Payload message. Also converts values to other types if specified.
                     * @param message Payload
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.Payload, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Payload to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Progress. */
                interface IProgress {

                    /** Progress fraction_completed */
                    fraction_completed?: (number|null);

                    /** Progress high_water */
                    high_water?: (cockroach.util.hlc.ITimestamp|null);

                    /** Progress modified_micros */
                    modified_micros?: (Long|null);

                    /** Progress running_status */
                    running_status?: (string|null);

                    /** Progress backup */
                    backup?: (cockroach.sql.jobs.jobspb.IBackupProgress|null);

                    /** Progress restore */
                    restore?: (cockroach.sql.jobs.jobspb.IRestoreProgress|null);

                    /** Progress schemaChange */
                    schemaChange?: (cockroach.sql.jobs.jobspb.ISchemaChangeProgress|null);

                    /** Progress import */
                    "import"?: (cockroach.sql.jobs.jobspb.IImportProgress|null);

                    /** Progress changefeed */
                    changefeed?: (cockroach.sql.jobs.jobspb.IChangefeedProgress|null);

                    /** Progress createStats */
                    createStats?: (cockroach.sql.jobs.jobspb.ICreateStatsProgress|null);
                }

                /** Represents a Progress. */
                class Progress implements IProgress {

                    /**
                     * Constructs a new Progress.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.jobs.jobspb.IProgress);

                    /** Progress fraction_completed. */
                    public fraction_completed: number;

                    /** Progress high_water. */
                    public high_water?: (cockroach.util.hlc.ITimestamp|null);

                    /** Progress modified_micros. */
                    public modified_micros: Long;

                    /** Progress running_status. */
                    public running_status: string;

                    /** Progress backup. */
                    public backup?: (cockroach.sql.jobs.jobspb.IBackupProgress|null);

                    /** Progress restore. */
                    public restore?: (cockroach.sql.jobs.jobspb.IRestoreProgress|null);

                    /** Progress schemaChange. */
                    public schemaChange?: (cockroach.sql.jobs.jobspb.ISchemaChangeProgress|null);

                    /** Progress import. */
                    public import?: (cockroach.sql.jobs.jobspb.IImportProgress|null);

                    /** Progress changefeed. */
                    public changefeed?: (cockroach.sql.jobs.jobspb.IChangefeedProgress|null);

                    /** Progress createStats. */
                    public createStats?: (cockroach.sql.jobs.jobspb.ICreateStatsProgress|null);

                    /** Progress progress. */
                    public progress?: ("fraction_completed"|"high_water");

                    /** Progress details. */
                    public details?: ("backup"|"restore"|"schemaChange"|"import"|"changefeed"|"createStats");

                    /**
                     * Creates a new Progress instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Progress instance
                     */
                    public static create(properties?: cockroach.sql.jobs.jobspb.IProgress): cockroach.sql.jobs.jobspb.Progress;

                    /**
                     * Encodes the specified Progress message. Does not implicitly {@link cockroach.sql.jobs.jobspb.Progress.verify|verify} messages.
                     * @param message Progress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.jobs.jobspb.IProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Progress message, length delimited. Does not implicitly {@link cockroach.sql.jobs.jobspb.Progress.verify|verify} messages.
                     * @param message Progress message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.jobs.jobspb.IProgress, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Progress message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.jobs.jobspb.Progress;

                    /**
                     * Decodes a Progress message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.jobs.jobspb.Progress;

                    /**
                     * Verifies a Progress message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Progress message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Progress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.jobs.jobspb.Progress;

                    /**
                     * Creates a plain object from a Progress message. Also converts values to other types if specified.
                     * @param message Progress
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.jobs.jobspb.Progress, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Progress to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Type enum. */
                enum Type {
                    UNSPECIFIED = 0,
                    BACKUP = 1,
                    RESTORE = 2,
                    SCHEMA_CHANGE = 3,
                    IMPORT = 4,
                    CHANGEFEED = 5,
                    CREATE_STATS = 6,
                    AUTO_CREATE_STATS = 7
                }
            }
        }

        /** Namespace sqlbase. */
        namespace sqlbase {

            /** ConstraintValidity enum. */
            enum ConstraintValidity {
                Validated = 0,
                Unvalidated = 1,
                Validating = 2,
                Dropping = 3
            }

            /** Properties of a ForeignKeyReference. */
            interface IForeignKeyReference {

                /** ForeignKeyReference table */
                table?: (number|null);

                /** ForeignKeyReference index */
                index?: (number|null);

                /** ForeignKeyReference name */
                name?: (string|null);

                /** ForeignKeyReference validity */
                validity?: (cockroach.sql.sqlbase.ConstraintValidity|null);

                /** ForeignKeyReference shared_prefix_len */
                shared_prefix_len?: (number|null);

                /** ForeignKeyReference on_delete */
                on_delete?: (cockroach.sql.sqlbase.ForeignKeyReference.Action|null);

                /** ForeignKeyReference on_update */
                on_update?: (cockroach.sql.sqlbase.ForeignKeyReference.Action|null);

                /** ForeignKeyReference match */
                match?: (cockroach.sql.sqlbase.ForeignKeyReference.Match|null);
            }

            /** Represents a ForeignKeyReference. */
            class ForeignKeyReference implements IForeignKeyReference {

                /**
                 * Constructs a new ForeignKeyReference.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IForeignKeyReference);

                /** ForeignKeyReference table. */
                public table: number;

                /** ForeignKeyReference index. */
                public index: number;

                /** ForeignKeyReference name. */
                public name: string;

                /** ForeignKeyReference validity. */
                public validity: cockroach.sql.sqlbase.ConstraintValidity;

                /** ForeignKeyReference shared_prefix_len. */
                public shared_prefix_len: number;

                /** ForeignKeyReference on_delete. */
                public on_delete: cockroach.sql.sqlbase.ForeignKeyReference.Action;

                /** ForeignKeyReference on_update. */
                public on_update: cockroach.sql.sqlbase.ForeignKeyReference.Action;

                /** ForeignKeyReference match. */
                public match: cockroach.sql.sqlbase.ForeignKeyReference.Match;

                /**
                 * Creates a new ForeignKeyReference instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ForeignKeyReference instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IForeignKeyReference): cockroach.sql.sqlbase.ForeignKeyReference;

                /**
                 * Encodes the specified ForeignKeyReference message. Does not implicitly {@link cockroach.sql.sqlbase.ForeignKeyReference.verify|verify} messages.
                 * @param message ForeignKeyReference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IForeignKeyReference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ForeignKeyReference message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.ForeignKeyReference.verify|verify} messages.
                 * @param message ForeignKeyReference message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IForeignKeyReference, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ForeignKeyReference message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ForeignKeyReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.ForeignKeyReference;

                /**
                 * Decodes a ForeignKeyReference message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ForeignKeyReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.ForeignKeyReference;

                /**
                 * Verifies a ForeignKeyReference message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ForeignKeyReference message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ForeignKeyReference
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.ForeignKeyReference;

                /**
                 * Creates a plain object from a ForeignKeyReference message. Also converts values to other types if specified.
                 * @param message ForeignKeyReference
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.ForeignKeyReference, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ForeignKeyReference to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ForeignKeyReference {

                /** Action enum. */
                enum Action {
                    NO_ACTION = 0,
                    RESTRICT = 1,
                    SET_NULL = 2,
                    SET_DEFAULT = 3,
                    CASCADE = 4
                }

                /** Match enum. */
                enum Match {
                    SIMPLE = 0,
                    FULL = 1,
                    PARTIAL = 2
                }
            }

            /** Properties of a ForeignKeyConstraint. */
            interface IForeignKeyConstraint {

                /** ForeignKeyConstraint origin_table_id */
                origin_table_id?: (number|null);

                /** ForeignKeyConstraint origin_column_ids */
                origin_column_ids?: (number[]|null);

                /** ForeignKeyConstraint referenced_column_ids */
                referenced_column_ids?: (number[]|null);

                /** ForeignKeyConstraint referenced_table_id */
                referenced_table_id?: (number|null);

                /** ForeignKeyConstraint name */
                name?: (string|null);

                /** ForeignKeyConstraint validity */
                validity?: (cockroach.sql.sqlbase.ConstraintValidity|null);

                /** ForeignKeyConstraint on_delete */
                on_delete?: (cockroach.sql.sqlbase.ForeignKeyReference.Action|null);

                /** ForeignKeyConstraint on_update */
                on_update?: (cockroach.sql.sqlbase.ForeignKeyReference.Action|null);

                /** ForeignKeyConstraint match */
                match?: (cockroach.sql.sqlbase.ForeignKeyReference.Match|null);

                /** ForeignKeyConstraint legacy_origin_index */
                legacy_origin_index?: (number|null);

                /** ForeignKeyConstraint legacy_referenced_index */
                legacy_referenced_index?: (number|null);
            }

            /** Represents a ForeignKeyConstraint. */
            class ForeignKeyConstraint implements IForeignKeyConstraint {

                /**
                 * Constructs a new ForeignKeyConstraint.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IForeignKeyConstraint);

                /** ForeignKeyConstraint origin_table_id. */
                public origin_table_id: number;

                /** ForeignKeyConstraint origin_column_ids. */
                public origin_column_ids: number[];

                /** ForeignKeyConstraint referenced_column_ids. */
                public referenced_column_ids: number[];

                /** ForeignKeyConstraint referenced_table_id. */
                public referenced_table_id: number;

                /** ForeignKeyConstraint name. */
                public name: string;

                /** ForeignKeyConstraint validity. */
                public validity: cockroach.sql.sqlbase.ConstraintValidity;

                /** ForeignKeyConstraint on_delete. */
                public on_delete: cockroach.sql.sqlbase.ForeignKeyReference.Action;

                /** ForeignKeyConstraint on_update. */
                public on_update: cockroach.sql.sqlbase.ForeignKeyReference.Action;

                /** ForeignKeyConstraint match. */
                public match: cockroach.sql.sqlbase.ForeignKeyReference.Match;

                /** ForeignKeyConstraint legacy_origin_index. */
                public legacy_origin_index: number;

                /** ForeignKeyConstraint legacy_referenced_index. */
                public legacy_referenced_index: number;

                /**
                 * Creates a new ForeignKeyConstraint instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ForeignKeyConstraint instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IForeignKeyConstraint): cockroach.sql.sqlbase.ForeignKeyConstraint;

                /**
                 * Encodes the specified ForeignKeyConstraint message. Does not implicitly {@link cockroach.sql.sqlbase.ForeignKeyConstraint.verify|verify} messages.
                 * @param message ForeignKeyConstraint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IForeignKeyConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ForeignKeyConstraint message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.ForeignKeyConstraint.verify|verify} messages.
                 * @param message ForeignKeyConstraint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IForeignKeyConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ForeignKeyConstraint message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ForeignKeyConstraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.ForeignKeyConstraint;

                /**
                 * Decodes a ForeignKeyConstraint message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ForeignKeyConstraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.ForeignKeyConstraint;

                /**
                 * Verifies a ForeignKeyConstraint message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ForeignKeyConstraint message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ForeignKeyConstraint
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.ForeignKeyConstraint;

                /**
                 * Creates a plain object from a ForeignKeyConstraint message. Also converts values to other types if specified.
                 * @param message ForeignKeyConstraint
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.ForeignKeyConstraint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ForeignKeyConstraint to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ColumnDescriptor. */
            interface IColumnDescriptor {

                /** ColumnDescriptor name */
                name?: (string|null);

                /** ColumnDescriptor id */
                id?: (number|null);

                /** ColumnDescriptor type */
                type?: (Uint8Array|null);

                /** ColumnDescriptor nullable */
                nullable?: (boolean|null);

                /** ColumnDescriptor default_expr */
                default_expr?: (string|null);

                /** ColumnDescriptor hidden */
                hidden?: (boolean|null);

                /** ColumnDescriptor uses_sequence_ids */
                uses_sequence_ids?: (number[]|null);

                /** ColumnDescriptor owns_sequence_ids */
                owns_sequence_ids?: (number[]|null);

                /** ColumnDescriptor compute_expr */
                compute_expr?: (string|null);
            }

            /** Represents a ColumnDescriptor. */
            class ColumnDescriptor implements IColumnDescriptor {

                /**
                 * Constructs a new ColumnDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IColumnDescriptor);

                /** ColumnDescriptor name. */
                public name: string;

                /** ColumnDescriptor id. */
                public id: number;

                /** ColumnDescriptor type. */
                public type: Uint8Array;

                /** ColumnDescriptor nullable. */
                public nullable: boolean;

                /** ColumnDescriptor default_expr. */
                public default_expr: string;

                /** ColumnDescriptor hidden. */
                public hidden: boolean;

                /** ColumnDescriptor uses_sequence_ids. */
                public uses_sequence_ids: number[];

                /** ColumnDescriptor owns_sequence_ids. */
                public owns_sequence_ids: number[];

                /** ColumnDescriptor compute_expr. */
                public compute_expr: string;

                /**
                 * Creates a new ColumnDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ColumnDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IColumnDescriptor): cockroach.sql.sqlbase.ColumnDescriptor;

                /**
                 * Encodes the specified ColumnDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.ColumnDescriptor.verify|verify} messages.
                 * @param message ColumnDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IColumnDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ColumnDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.ColumnDescriptor.verify|verify} messages.
                 * @param message ColumnDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IColumnDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ColumnDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ColumnDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.ColumnDescriptor;

                /**
                 * Decodes a ColumnDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ColumnDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.ColumnDescriptor;

                /**
                 * Verifies a ColumnDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ColumnDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ColumnDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.ColumnDescriptor;

                /**
                 * Creates a plain object from a ColumnDescriptor message. Also converts values to other types if specified.
                 * @param message ColumnDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.ColumnDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ColumnDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ColumnFamilyDescriptor. */
            interface IColumnFamilyDescriptor {

                /** ColumnFamilyDescriptor name */
                name?: (string|null);

                /** ColumnFamilyDescriptor id */
                id?: (number|null);

                /** ColumnFamilyDescriptor column_names */
                column_names?: (string[]|null);

                /** ColumnFamilyDescriptor column_ids */
                column_ids?: (number[]|null);

                /** ColumnFamilyDescriptor default_column_id */
                default_column_id?: (number|null);
            }

            /** Represents a ColumnFamilyDescriptor. */
            class ColumnFamilyDescriptor implements IColumnFamilyDescriptor {

                /**
                 * Constructs a new ColumnFamilyDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IColumnFamilyDescriptor);

                /** ColumnFamilyDescriptor name. */
                public name: string;

                /** ColumnFamilyDescriptor id. */
                public id: number;

                /** ColumnFamilyDescriptor column_names. */
                public column_names: string[];

                /** ColumnFamilyDescriptor column_ids. */
                public column_ids: number[];

                /** ColumnFamilyDescriptor default_column_id. */
                public default_column_id: number;

                /**
                 * Creates a new ColumnFamilyDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ColumnFamilyDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IColumnFamilyDescriptor): cockroach.sql.sqlbase.ColumnFamilyDescriptor;

                /**
                 * Encodes the specified ColumnFamilyDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.ColumnFamilyDescriptor.verify|verify} messages.
                 * @param message ColumnFamilyDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IColumnFamilyDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ColumnFamilyDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.ColumnFamilyDescriptor.verify|verify} messages.
                 * @param message ColumnFamilyDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IColumnFamilyDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ColumnFamilyDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ColumnFamilyDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.ColumnFamilyDescriptor;

                /**
                 * Decodes a ColumnFamilyDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ColumnFamilyDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.ColumnFamilyDescriptor;

                /**
                 * Verifies a ColumnFamilyDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ColumnFamilyDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ColumnFamilyDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.ColumnFamilyDescriptor;

                /**
                 * Creates a plain object from a ColumnFamilyDescriptor message. Also converts values to other types if specified.
                 * @param message ColumnFamilyDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.ColumnFamilyDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ColumnFamilyDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an InterleaveDescriptor. */
            interface IInterleaveDescriptor {

                /** InterleaveDescriptor ancestors */
                ancestors?: (cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor[]|null);
            }

            /** Represents an InterleaveDescriptor. */
            class InterleaveDescriptor implements IInterleaveDescriptor {

                /**
                 * Constructs a new InterleaveDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IInterleaveDescriptor);

                /** InterleaveDescriptor ancestors. */
                public ancestors: cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor[];

                /**
                 * Creates a new InterleaveDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns InterleaveDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IInterleaveDescriptor): cockroach.sql.sqlbase.InterleaveDescriptor;

                /**
                 * Encodes the specified InterleaveDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.InterleaveDescriptor.verify|verify} messages.
                 * @param message InterleaveDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IInterleaveDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified InterleaveDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.InterleaveDescriptor.verify|verify} messages.
                 * @param message InterleaveDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IInterleaveDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an InterleaveDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns InterleaveDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.InterleaveDescriptor;

                /**
                 * Decodes an InterleaveDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns InterleaveDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.InterleaveDescriptor;

                /**
                 * Verifies an InterleaveDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an InterleaveDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns InterleaveDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.InterleaveDescriptor;

                /**
                 * Creates a plain object from an InterleaveDescriptor message. Also converts values to other types if specified.
                 * @param message InterleaveDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.InterleaveDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this InterleaveDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace InterleaveDescriptor {

                /** Properties of an Ancestor. */
                interface IAncestor {

                    /** Ancestor table_id */
                    table_id?: (number|null);

                    /** Ancestor index_id */
                    index_id?: (number|null);

                    /** Ancestor shared_prefix_len */
                    shared_prefix_len?: (number|null);
                }

                /** Represents an Ancestor. */
                class Ancestor implements IAncestor {

                    /**
                     * Constructs a new Ancestor.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor);

                    /** Ancestor table_id. */
                    public table_id: number;

                    /** Ancestor index_id. */
                    public index_id: number;

                    /** Ancestor shared_prefix_len. */
                    public shared_prefix_len: number;

                    /**
                     * Creates a new Ancestor instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Ancestor instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor): cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor;

                    /**
                     * Encodes the specified Ancestor message. Does not implicitly {@link cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor.verify|verify} messages.
                     * @param message Ancestor message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Ancestor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor.verify|verify} messages.
                     * @param message Ancestor message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.InterleaveDescriptor.IAncestor, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Ancestor message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Ancestor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor;

                    /**
                     * Decodes an Ancestor message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Ancestor
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor;

                    /**
                     * Verifies an Ancestor message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an Ancestor message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Ancestor
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor;

                    /**
                     * Creates a plain object from an Ancestor message. Also converts values to other types if specified.
                     * @param message Ancestor
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.InterleaveDescriptor.Ancestor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Ancestor to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a PartitioningDescriptor. */
            interface IPartitioningDescriptor {

                /** PartitioningDescriptor num_columns */
                num_columns?: (number|null);

                /** PartitioningDescriptor list */
                list?: (cockroach.sql.sqlbase.PartitioningDescriptor.IList[]|null);

                /** PartitioningDescriptor range */
                range?: (cockroach.sql.sqlbase.PartitioningDescriptor.IRange[]|null);
            }

            /** Represents a PartitioningDescriptor. */
            class PartitioningDescriptor implements IPartitioningDescriptor {

                /**
                 * Constructs a new PartitioningDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IPartitioningDescriptor);

                /** PartitioningDescriptor num_columns. */
                public num_columns: number;

                /** PartitioningDescriptor list. */
                public list: cockroach.sql.sqlbase.PartitioningDescriptor.IList[];

                /** PartitioningDescriptor range. */
                public range: cockroach.sql.sqlbase.PartitioningDescriptor.IRange[];

                /**
                 * Creates a new PartitioningDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PartitioningDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IPartitioningDescriptor): cockroach.sql.sqlbase.PartitioningDescriptor;

                /**
                 * Encodes the specified PartitioningDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.verify|verify} messages.
                 * @param message PartitioningDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IPartitioningDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PartitioningDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.verify|verify} messages.
                 * @param message PartitioningDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IPartitioningDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PartitioningDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PartitioningDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.PartitioningDescriptor;

                /**
                 * Decodes a PartitioningDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PartitioningDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.PartitioningDescriptor;

                /**
                 * Verifies a PartitioningDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PartitioningDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PartitioningDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.PartitioningDescriptor;

                /**
                 * Creates a plain object from a PartitioningDescriptor message. Also converts values to other types if specified.
                 * @param message PartitioningDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.PartitioningDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PartitioningDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace PartitioningDescriptor {

                /** Properties of a List. */
                interface IList {

                    /** List name */
                    name?: (string|null);

                    /** List values */
                    values?: (Uint8Array[]|null);

                    /** List subpartitioning */
                    subpartitioning?: (cockroach.sql.sqlbase.IPartitioningDescriptor|null);
                }

                /** Represents a List. */
                class List implements IList {

                    /**
                     * Constructs a new List.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.PartitioningDescriptor.IList);

                    /** List name. */
                    public name: string;

                    /** List values. */
                    public values: Uint8Array[];

                    /** List subpartitioning. */
                    public subpartitioning?: (cockroach.sql.sqlbase.IPartitioningDescriptor|null);

                    /**
                     * Creates a new List instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns List instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.PartitioningDescriptor.IList): cockroach.sql.sqlbase.PartitioningDescriptor.List;

                    /**
                     * Encodes the specified List message. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.List.verify|verify} messages.
                     * @param message List message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.PartitioningDescriptor.IList, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified List message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.List.verify|verify} messages.
                     * @param message List message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.PartitioningDescriptor.IList, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a List message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns List
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.PartitioningDescriptor.List;

                    /**
                     * Decodes a List message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns List
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.PartitioningDescriptor.List;

                    /**
                     * Verifies a List message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a List message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns List
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.PartitioningDescriptor.List;

                    /**
                     * Creates a plain object from a List message. Also converts values to other types if specified.
                     * @param message List
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.PartitioningDescriptor.List, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this List to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Range. */
                interface IRange {

                    /** Range name */
                    name?: (string|null);

                    /** Range from_inclusive */
                    from_inclusive?: (Uint8Array|null);

                    /** Range to_exclusive */
                    to_exclusive?: (Uint8Array|null);
                }

                /** Represents a Range. */
                class Range implements IRange {

                    /**
                     * Constructs a new Range.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.PartitioningDescriptor.IRange);

                    /** Range name. */
                    public name: string;

                    /** Range from_inclusive. */
                    public from_inclusive: Uint8Array;

                    /** Range to_exclusive. */
                    public to_exclusive: Uint8Array;

                    /**
                     * Creates a new Range instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Range instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.PartitioningDescriptor.IRange): cockroach.sql.sqlbase.PartitioningDescriptor.Range;

                    /**
                     * Encodes the specified Range message. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.Range.verify|verify} messages.
                     * @param message Range message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.PartitioningDescriptor.IRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Range message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.PartitioningDescriptor.Range.verify|verify} messages.
                     * @param message Range message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.PartitioningDescriptor.IRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Range message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Range
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.PartitioningDescriptor.Range;

                    /**
                     * Decodes a Range message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Range
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.PartitioningDescriptor.Range;

                    /**
                     * Verifies a Range message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Range message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Range
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.PartitioningDescriptor.Range;

                    /**
                     * Creates a plain object from a Range message. Also converts values to other types if specified.
                     * @param message Range
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.PartitioningDescriptor.Range, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Range to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of an IndexDescriptor. */
            interface IIndexDescriptor {

                /** IndexDescriptor name */
                name?: (string|null);

                /** IndexDescriptor id */
                id?: (number|null);

                /** IndexDescriptor unique */
                unique?: (boolean|null);

                /** IndexDescriptor version */
                version?: (number|null);

                /** IndexDescriptor column_names */
                column_names?: (string[]|null);

                /** IndexDescriptor column_directions */
                column_directions?: (cockroach.sql.sqlbase.IndexDescriptor.Direction[]|null);

                /** IndexDescriptor store_column_names */
                store_column_names?: (string[]|null);

                /** IndexDescriptor column_ids */
                column_ids?: (number[]|null);

                /** IndexDescriptor extra_column_ids */
                extra_column_ids?: (number[]|null);

                /** IndexDescriptor store_column_ids */
                store_column_ids?: (number[]|null);

                /** IndexDescriptor composite_column_ids */
                composite_column_ids?: (number[]|null);

                /** IndexDescriptor foreign_key */
                foreign_key?: (cockroach.sql.sqlbase.IForeignKeyReference|null);

                /** IndexDescriptor referenced_by */
                referenced_by?: (cockroach.sql.sqlbase.IForeignKeyReference[]|null);

                /** IndexDescriptor interleave */
                interleave?: (cockroach.sql.sqlbase.IInterleaveDescriptor|null);

                /** IndexDescriptor interleaved_by */
                interleaved_by?: (cockroach.sql.sqlbase.IForeignKeyReference[]|null);

                /** IndexDescriptor partitioning */
                partitioning?: (cockroach.sql.sqlbase.IPartitioningDescriptor|null);

                /** IndexDescriptor type */
                type?: (cockroach.sql.sqlbase.IndexDescriptor.Type|null);

                /** IndexDescriptor created_explicitly */
                created_explicitly?: (boolean|null);

                /** IndexDescriptor encoding_type */
                encoding_type?: (number|null);
            }

            /** Represents an IndexDescriptor. */
            class IndexDescriptor implements IIndexDescriptor {

                /**
                 * Constructs a new IndexDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IIndexDescriptor);

                /** IndexDescriptor name. */
                public name: string;

                /** IndexDescriptor id. */
                public id: number;

                /** IndexDescriptor unique. */
                public unique: boolean;

                /** IndexDescriptor version. */
                public version: number;

                /** IndexDescriptor column_names. */
                public column_names: string[];

                /** IndexDescriptor column_directions. */
                public column_directions: cockroach.sql.sqlbase.IndexDescriptor.Direction[];

                /** IndexDescriptor store_column_names. */
                public store_column_names: string[];

                /** IndexDescriptor column_ids. */
                public column_ids: number[];

                /** IndexDescriptor extra_column_ids. */
                public extra_column_ids: number[];

                /** IndexDescriptor store_column_ids. */
                public store_column_ids: number[];

                /** IndexDescriptor composite_column_ids. */
                public composite_column_ids: number[];

                /** IndexDescriptor foreign_key. */
                public foreign_key?: (cockroach.sql.sqlbase.IForeignKeyReference|null);

                /** IndexDescriptor referenced_by. */
                public referenced_by: cockroach.sql.sqlbase.IForeignKeyReference[];

                /** IndexDescriptor interleave. */
                public interleave?: (cockroach.sql.sqlbase.IInterleaveDescriptor|null);

                /** IndexDescriptor interleaved_by. */
                public interleaved_by: cockroach.sql.sqlbase.IForeignKeyReference[];

                /** IndexDescriptor partitioning. */
                public partitioning?: (cockroach.sql.sqlbase.IPartitioningDescriptor|null);

                /** IndexDescriptor type. */
                public type: cockroach.sql.sqlbase.IndexDescriptor.Type;

                /** IndexDescriptor created_explicitly. */
                public created_explicitly: boolean;

                /** IndexDescriptor encoding_type. */
                public encoding_type: number;

                /**
                 * Creates a new IndexDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns IndexDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IIndexDescriptor): cockroach.sql.sqlbase.IndexDescriptor;

                /**
                 * Encodes the specified IndexDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.IndexDescriptor.verify|verify} messages.
                 * @param message IndexDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IIndexDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified IndexDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.IndexDescriptor.verify|verify} messages.
                 * @param message IndexDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IIndexDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an IndexDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns IndexDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.IndexDescriptor;

                /**
                 * Decodes an IndexDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns IndexDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.IndexDescriptor;

                /**
                 * Verifies an IndexDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an IndexDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns IndexDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.IndexDescriptor;

                /**
                 * Creates a plain object from an IndexDescriptor message. Also converts values to other types if specified.
                 * @param message IndexDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.IndexDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this IndexDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace IndexDescriptor {

                /** Direction enum. */
                enum Direction {
                    ASC = 0,
                    DESC = 1
                }

                /** Type enum. */
                enum Type {
                    FORWARD = 0,
                    INVERTED = 1
                }
            }

            /** Properties of a ConstraintToUpdate. */
            interface IConstraintToUpdate {

                /** ConstraintToUpdate constraint_type */
                constraint_type: cockroach.sql.sqlbase.ConstraintToUpdate.ConstraintType;

                /** ConstraintToUpdate name */
                name: string;

                /** ConstraintToUpdate check */
                check?: (cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint|null);

                /** ConstraintToUpdate foreign_key */
                foreign_key?: (cockroach.sql.sqlbase.IForeignKeyConstraint|null);

                /** ConstraintToUpdate not_null_column */
                not_null_column?: (number|null);
            }

            /** Represents a ConstraintToUpdate. */
            class ConstraintToUpdate implements IConstraintToUpdate {

                /**
                 * Constructs a new ConstraintToUpdate.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IConstraintToUpdate);

                /** ConstraintToUpdate constraint_type. */
                public constraint_type: cockroach.sql.sqlbase.ConstraintToUpdate.ConstraintType;

                /** ConstraintToUpdate name. */
                public name: string;

                /** ConstraintToUpdate check. */
                public check?: (cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint|null);

                /** ConstraintToUpdate foreign_key. */
                public foreign_key?: (cockroach.sql.sqlbase.IForeignKeyConstraint|null);

                /** ConstraintToUpdate not_null_column. */
                public not_null_column: number;

                /**
                 * Creates a new ConstraintToUpdate instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ConstraintToUpdate instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IConstraintToUpdate): cockroach.sql.sqlbase.ConstraintToUpdate;

                /**
                 * Encodes the specified ConstraintToUpdate message. Does not implicitly {@link cockroach.sql.sqlbase.ConstraintToUpdate.verify|verify} messages.
                 * @param message ConstraintToUpdate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IConstraintToUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ConstraintToUpdate message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.ConstraintToUpdate.verify|verify} messages.
                 * @param message ConstraintToUpdate message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IConstraintToUpdate, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ConstraintToUpdate message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ConstraintToUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.ConstraintToUpdate;

                /**
                 * Decodes a ConstraintToUpdate message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ConstraintToUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.ConstraintToUpdate;

                /**
                 * Verifies a ConstraintToUpdate message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ConstraintToUpdate message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ConstraintToUpdate
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.ConstraintToUpdate;

                /**
                 * Creates a plain object from a ConstraintToUpdate message. Also converts values to other types if specified.
                 * @param message ConstraintToUpdate
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.ConstraintToUpdate, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ConstraintToUpdate to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ConstraintToUpdate {

                /** ConstraintType enum. */
                enum ConstraintType {
                    CHECK = 0,
                    FOREIGN_KEY = 1,
                    NOT_NULL = 2
                }
            }

            /** Properties of a PrimaryKeySwap. */
            interface IPrimaryKeySwap {

                /** PrimaryKeySwap old_primary_index_id */
                old_primary_index_id?: (number|null);

                /** PrimaryKeySwap new_primary_index_id */
                new_primary_index_id?: (number|null);

                /** PrimaryKeySwap old_indexes */
                old_indexes?: (number[]|null);

                /** PrimaryKeySwap new_indexes */
                new_indexes?: (number[]|null);
            }

            /** Represents a PrimaryKeySwap. */
            class PrimaryKeySwap implements IPrimaryKeySwap {

                /**
                 * Constructs a new PrimaryKeySwap.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IPrimaryKeySwap);

                /** PrimaryKeySwap old_primary_index_id. */
                public old_primary_index_id: number;

                /** PrimaryKeySwap new_primary_index_id. */
                public new_primary_index_id: number;

                /** PrimaryKeySwap old_indexes. */
                public old_indexes: number[];

                /** PrimaryKeySwap new_indexes. */
                public new_indexes: number[];

                /**
                 * Creates a new PrimaryKeySwap instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PrimaryKeySwap instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IPrimaryKeySwap): cockroach.sql.sqlbase.PrimaryKeySwap;

                /**
                 * Encodes the specified PrimaryKeySwap message. Does not implicitly {@link cockroach.sql.sqlbase.PrimaryKeySwap.verify|verify} messages.
                 * @param message PrimaryKeySwap message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IPrimaryKeySwap, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PrimaryKeySwap message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.PrimaryKeySwap.verify|verify} messages.
                 * @param message PrimaryKeySwap message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IPrimaryKeySwap, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PrimaryKeySwap message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PrimaryKeySwap
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.PrimaryKeySwap;

                /**
                 * Decodes a PrimaryKeySwap message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PrimaryKeySwap
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.PrimaryKeySwap;

                /**
                 * Verifies a PrimaryKeySwap message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PrimaryKeySwap message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PrimaryKeySwap
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.PrimaryKeySwap;

                /**
                 * Creates a plain object from a PrimaryKeySwap message. Also converts values to other types if specified.
                 * @param message PrimaryKeySwap
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.PrimaryKeySwap, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PrimaryKeySwap to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a DescriptorMutation. */
            interface IDescriptorMutation {

                /** DescriptorMutation column */
                column?: (cockroach.sql.sqlbase.IColumnDescriptor|null);

                /** DescriptorMutation index */
                index?: (cockroach.sql.sqlbase.IIndexDescriptor|null);

                /** DescriptorMutation constraint */
                constraint?: (cockroach.sql.sqlbase.IConstraintToUpdate|null);

                /** DescriptorMutation primaryKeySwap */
                primaryKeySwap?: (cockroach.sql.sqlbase.IPrimaryKeySwap|null);

                /** DescriptorMutation state */
                state?: (cockroach.sql.sqlbase.DescriptorMutation.State|null);

                /** DescriptorMutation direction */
                direction?: (cockroach.sql.sqlbase.DescriptorMutation.Direction|null);

                /** DescriptorMutation mutation_id */
                mutation_id?: (number|null);

                /** DescriptorMutation rollback */
                rollback?: (boolean|null);
            }

            /** Represents a DescriptorMutation. */
            class DescriptorMutation implements IDescriptorMutation {

                /**
                 * Constructs a new DescriptorMutation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IDescriptorMutation);

                /** DescriptorMutation column. */
                public column?: (cockroach.sql.sqlbase.IColumnDescriptor|null);

                /** DescriptorMutation index. */
                public index?: (cockroach.sql.sqlbase.IIndexDescriptor|null);

                /** DescriptorMutation constraint. */
                public constraint?: (cockroach.sql.sqlbase.IConstraintToUpdate|null);

                /** DescriptorMutation primaryKeySwap. */
                public primaryKeySwap?: (cockroach.sql.sqlbase.IPrimaryKeySwap|null);

                /** DescriptorMutation state. */
                public state: cockroach.sql.sqlbase.DescriptorMutation.State;

                /** DescriptorMutation direction. */
                public direction: cockroach.sql.sqlbase.DescriptorMutation.Direction;

                /** DescriptorMutation mutation_id. */
                public mutation_id: number;

                /** DescriptorMutation rollback. */
                public rollback: boolean;

                /** DescriptorMutation descriptor. */
                public descriptor?: ("column"|"index"|"constraint"|"primaryKeySwap");

                /**
                 * Creates a new DescriptorMutation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DescriptorMutation instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IDescriptorMutation): cockroach.sql.sqlbase.DescriptorMutation;

                /**
                 * Encodes the specified DescriptorMutation message. Does not implicitly {@link cockroach.sql.sqlbase.DescriptorMutation.verify|verify} messages.
                 * @param message DescriptorMutation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IDescriptorMutation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DescriptorMutation message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.DescriptorMutation.verify|verify} messages.
                 * @param message DescriptorMutation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IDescriptorMutation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DescriptorMutation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DescriptorMutation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.DescriptorMutation;

                /**
                 * Decodes a DescriptorMutation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DescriptorMutation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.DescriptorMutation;

                /**
                 * Verifies a DescriptorMutation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DescriptorMutation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DescriptorMutation
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.DescriptorMutation;

                /**
                 * Creates a plain object from a DescriptorMutation message. Also converts values to other types if specified.
                 * @param message DescriptorMutation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.DescriptorMutation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DescriptorMutation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DescriptorMutation {

                /** State enum. */
                enum State {
                    UNKNOWN = 0,
                    DELETE_ONLY = 1,
                    DELETE_AND_WRITE_ONLY = 2
                }

                /** Direction enum. */
                enum Direction {
                    NONE = 0,
                    ADD = 1,
                    DROP = 2
                }
            }

            /** Properties of a TableDescriptor. */
            interface ITableDescriptor {

                /** TableDescriptor name */
                name?: (string|null);

                /** TableDescriptor id */
                id?: (number|null);

                /** TableDescriptor parent_id */
                parent_id?: (number|null);

                /** TableDescriptor unexposed_parent_schema_id */
                unexposed_parent_schema_id?: (number|null);

                /** TableDescriptor version */
                version?: (number|null);

                /** TableDescriptor modification_time */
                modification_time?: (cockroach.util.hlc.ITimestamp|null);

                /** TableDescriptor columns */
                columns?: (cockroach.sql.sqlbase.IColumnDescriptor[]|null);

                /** TableDescriptor next_column_id */
                next_column_id?: (number|null);

                /** TableDescriptor families */
                families?: (cockroach.sql.sqlbase.IColumnFamilyDescriptor[]|null);

                /** TableDescriptor next_family_id */
                next_family_id?: (number|null);

                /** TableDescriptor primary_index */
                primary_index?: (cockroach.sql.sqlbase.IIndexDescriptor|null);

                /** TableDescriptor indexes */
                indexes?: (cockroach.sql.sqlbase.IIndexDescriptor[]|null);

                /** TableDescriptor next_index_id */
                next_index_id?: (number|null);

                /** TableDescriptor privileges */
                privileges?: (cockroach.sql.sqlbase.IPrivilegeDescriptor|null);

                /** TableDescriptor mutations */
                mutations?: (cockroach.sql.sqlbase.IDescriptorMutation[]|null);

                /** TableDescriptor lease */
                lease?: (cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease|null);

                /** TableDescriptor next_mutation_id */
                next_mutation_id?: (number|null);

                /** TableDescriptor format_version */
                format_version?: (number|null);

                /** TableDescriptor state */
                state?: (cockroach.sql.sqlbase.TableDescriptor.State|null);

                /** TableDescriptor offline_reason */
                offline_reason?: (string|null);

                /** TableDescriptor checks */
                checks?: (cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint[]|null);

                /** TableDescriptor draining_names */
                draining_names?: (cockroach.sql.sqlbase.TableDescriptor.INameInfo[]|null);

                /** TableDescriptor view_query */
                view_query?: (string|null);

                /** TableDescriptor dependsOn */
                dependsOn?: (number[]|null);

                /** TableDescriptor dependedOnBy */
                dependedOnBy?: (cockroach.sql.sqlbase.TableDescriptor.IReference[]|null);

                /** TableDescriptor mutationJobs */
                mutationJobs?: (cockroach.sql.sqlbase.TableDescriptor.IMutationJob[]|null);

                /** TableDescriptor sequence_opts */
                sequence_opts?: (cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts|null);

                /** TableDescriptor drop_time */
                drop_time?: (Long|null);

                /** TableDescriptor replacement_of */
                replacement_of?: (cockroach.sql.sqlbase.TableDescriptor.IReplacement|null);

                /** TableDescriptor audit_mode */
                audit_mode?: (cockroach.sql.sqlbase.TableDescriptor.AuditMode|null);

                /** TableDescriptor drop_job_id */
                drop_job_id?: (Long|null);

                /** TableDescriptor gc_mutations */
                gc_mutations?: (cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation[]|null);

                /** TableDescriptor create_query */
                create_query?: (string|null);

                /** TableDescriptor create_as_of_time */
                create_as_of_time?: (cockroach.util.hlc.ITimestamp|null);

                /** TableDescriptor outbound_fks */
                outbound_fks?: (cockroach.sql.sqlbase.IForeignKeyConstraint[]|null);

                /** TableDescriptor inbound_fks */
                inbound_fks?: (cockroach.sql.sqlbase.IForeignKeyConstraint[]|null);

                /** TableDescriptor temporary */
                temporary?: (boolean|null);
            }

            /** Represents a TableDescriptor. */
            class TableDescriptor implements ITableDescriptor {

                /**
                 * Constructs a new TableDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.ITableDescriptor);

                /** TableDescriptor name. */
                public name: string;

                /** TableDescriptor id. */
                public id: number;

                /** TableDescriptor parent_id. */
                public parent_id: number;

                /** TableDescriptor unexposed_parent_schema_id. */
                public unexposed_parent_schema_id: number;

                /** TableDescriptor version. */
                public version: number;

                /** TableDescriptor modification_time. */
                public modification_time?: (cockroach.util.hlc.ITimestamp|null);

                /** TableDescriptor columns. */
                public columns: cockroach.sql.sqlbase.IColumnDescriptor[];

                /** TableDescriptor next_column_id. */
                public next_column_id: number;

                /** TableDescriptor families. */
                public families: cockroach.sql.sqlbase.IColumnFamilyDescriptor[];

                /** TableDescriptor next_family_id. */
                public next_family_id: number;

                /** TableDescriptor primary_index. */
                public primary_index?: (cockroach.sql.sqlbase.IIndexDescriptor|null);

                /** TableDescriptor indexes. */
                public indexes: cockroach.sql.sqlbase.IIndexDescriptor[];

                /** TableDescriptor next_index_id. */
                public next_index_id: number;

                /** TableDescriptor privileges. */
                public privileges?: (cockroach.sql.sqlbase.IPrivilegeDescriptor|null);

                /** TableDescriptor mutations. */
                public mutations: cockroach.sql.sqlbase.IDescriptorMutation[];

                /** TableDescriptor lease. */
                public lease?: (cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease|null);

                /** TableDescriptor next_mutation_id. */
                public next_mutation_id: number;

                /** TableDescriptor format_version. */
                public format_version: number;

                /** TableDescriptor state. */
                public state: cockroach.sql.sqlbase.TableDescriptor.State;

                /** TableDescriptor offline_reason. */
                public offline_reason: string;

                /** TableDescriptor checks. */
                public checks: cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint[];

                /** TableDescriptor draining_names. */
                public draining_names: cockroach.sql.sqlbase.TableDescriptor.INameInfo[];

                /** TableDescriptor view_query. */
                public view_query: string;

                /** TableDescriptor dependsOn. */
                public dependsOn: number[];

                /** TableDescriptor dependedOnBy. */
                public dependedOnBy: cockroach.sql.sqlbase.TableDescriptor.IReference[];

                /** TableDescriptor mutationJobs. */
                public mutationJobs: cockroach.sql.sqlbase.TableDescriptor.IMutationJob[];

                /** TableDescriptor sequence_opts. */
                public sequence_opts?: (cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts|null);

                /** TableDescriptor drop_time. */
                public drop_time: Long;

                /** TableDescriptor replacement_of. */
                public replacement_of?: (cockroach.sql.sqlbase.TableDescriptor.IReplacement|null);

                /** TableDescriptor audit_mode. */
                public audit_mode: cockroach.sql.sqlbase.TableDescriptor.AuditMode;

                /** TableDescriptor drop_job_id. */
                public drop_job_id: Long;

                /** TableDescriptor gc_mutations. */
                public gc_mutations: cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation[];

                /** TableDescriptor create_query. */
                public create_query: string;

                /** TableDescriptor create_as_of_time. */
                public create_as_of_time?: (cockroach.util.hlc.ITimestamp|null);

                /** TableDescriptor outbound_fks. */
                public outbound_fks: cockroach.sql.sqlbase.IForeignKeyConstraint[];

                /** TableDescriptor inbound_fks. */
                public inbound_fks: cockroach.sql.sqlbase.IForeignKeyConstraint[];

                /** TableDescriptor temporary. */
                public temporary: boolean;

                /**
                 * Creates a new TableDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TableDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.ITableDescriptor): cockroach.sql.sqlbase.TableDescriptor;

                /**
                 * Encodes the specified TableDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.verify|verify} messages.
                 * @param message TableDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.ITableDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.verify|verify} messages.
                 * @param message TableDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.ITableDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TableDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor;

                /**
                 * Decodes a TableDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TableDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor;

                /**
                 * Verifies a TableDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TableDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TableDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor;

                /**
                 * Creates a plain object from a TableDescriptor message. Also converts values to other types if specified.
                 * @param message TableDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.TableDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TableDescriptor {

                /** Properties of a SchemaChangeLease. */
                interface ISchemaChangeLease {

                    /** SchemaChangeLease node_id */
                    node_id?: (number|null);

                    /** SchemaChangeLease expiration_time */
                    expiration_time?: (Long|null);
                }

                /** Represents a SchemaChangeLease. */
                class SchemaChangeLease implements ISchemaChangeLease {

                    /**
                     * Constructs a new SchemaChangeLease.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease);

                    /** SchemaChangeLease node_id. */
                    public node_id: number;

                    /** SchemaChangeLease expiration_time. */
                    public expiration_time: Long;

                    /**
                     * Creates a new SchemaChangeLease instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SchemaChangeLease instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease): cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease;

                    /**
                     * Encodes the specified SchemaChangeLease message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease.verify|verify} messages.
                     * @param message SchemaChangeLease message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SchemaChangeLease message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease.verify|verify} messages.
                     * @param message SchemaChangeLease message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.ISchemaChangeLease, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SchemaChangeLease message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SchemaChangeLease
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease;

                    /**
                     * Decodes a SchemaChangeLease message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SchemaChangeLease
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease;

                    /**
                     * Verifies a SchemaChangeLease message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SchemaChangeLease message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SchemaChangeLease
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease;

                    /**
                     * Creates a plain object from a SchemaChangeLease message. Also converts values to other types if specified.
                     * @param message SchemaChangeLease
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.SchemaChangeLease, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SchemaChangeLease to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** State enum. */
                enum State {
                    PUBLIC = 0,
                    ADD = 1,
                    DROP = 2,
                    OFFLINE = 3
                }

                /** Properties of a CheckConstraint. */
                interface ICheckConstraint {

                    /** CheckConstraint expr */
                    expr?: (string|null);

                    /** CheckConstraint name */
                    name?: (string|null);

                    /** CheckConstraint validity */
                    validity?: (cockroach.sql.sqlbase.ConstraintValidity|null);

                    /** CheckConstraint column_ids */
                    column_ids?: (number[]|null);

                    /** CheckConstraint is_non_null_constraint */
                    is_non_null_constraint?: (boolean|null);
                }

                /** Represents a CheckConstraint. */
                class CheckConstraint implements ICheckConstraint {

                    /**
                     * Constructs a new CheckConstraint.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint);

                    /** CheckConstraint expr. */
                    public expr: string;

                    /** CheckConstraint name. */
                    public name: string;

                    /** CheckConstraint validity. */
                    public validity: cockroach.sql.sqlbase.ConstraintValidity;

                    /** CheckConstraint column_ids. */
                    public column_ids: number[];

                    /** CheckConstraint is_non_null_constraint. */
                    public is_non_null_constraint: boolean;

                    /**
                     * Creates a new CheckConstraint instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CheckConstraint instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint): cockroach.sql.sqlbase.TableDescriptor.CheckConstraint;

                    /**
                     * Encodes the specified CheckConstraint message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.CheckConstraint.verify|verify} messages.
                     * @param message CheckConstraint message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CheckConstraint message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.CheckConstraint.verify|verify} messages.
                     * @param message CheckConstraint message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.ICheckConstraint, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CheckConstraint message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CheckConstraint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.CheckConstraint;

                    /**
                     * Decodes a CheckConstraint message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CheckConstraint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.CheckConstraint;

                    /**
                     * Verifies a CheckConstraint message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CheckConstraint message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CheckConstraint
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.CheckConstraint;

                    /**
                     * Creates a plain object from a CheckConstraint message. Also converts values to other types if specified.
                     * @param message CheckConstraint
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.CheckConstraint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CheckConstraint to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a NameInfo. */
                interface INameInfo {

                    /** NameInfo parent_id */
                    parent_id?: (number|null);

                    /** NameInfo parent_schema_id */
                    parent_schema_id?: (number|null);

                    /** NameInfo name */
                    name?: (string|null);
                }

                /** Represents a NameInfo. */
                class NameInfo implements INameInfo {

                    /**
                     * Constructs a new NameInfo.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.INameInfo);

                    /** NameInfo parent_id. */
                    public parent_id: number;

                    /** NameInfo parent_schema_id. */
                    public parent_schema_id: number;

                    /** NameInfo name. */
                    public name: string;

                    /**
                     * Creates a new NameInfo instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns NameInfo instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.INameInfo): cockroach.sql.sqlbase.TableDescriptor.NameInfo;

                    /**
                     * Encodes the specified NameInfo message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.NameInfo.verify|verify} messages.
                     * @param message NameInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.INameInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified NameInfo message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.NameInfo.verify|verify} messages.
                     * @param message NameInfo message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.INameInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a NameInfo message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns NameInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.NameInfo;

                    /**
                     * Decodes a NameInfo message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns NameInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.NameInfo;

                    /**
                     * Verifies a NameInfo message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a NameInfo message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns NameInfo
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.NameInfo;

                    /**
                     * Creates a plain object from a NameInfo message. Also converts values to other types if specified.
                     * @param message NameInfo
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.NameInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this NameInfo to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a Reference. */
                interface IReference {

                    /** Reference id */
                    id?: (number|null);

                    /** Reference index_id */
                    index_id?: (number|null);

                    /** Reference column_ids */
                    column_ids?: (number[]|null);
                }

                /** Represents a Reference. */
                class Reference implements IReference {

                    /**
                     * Constructs a new Reference.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.IReference);

                    /** Reference id. */
                    public id: number;

                    /** Reference index_id. */
                    public index_id: number;

                    /** Reference column_ids. */
                    public column_ids: number[];

                    /**
                     * Creates a new Reference instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Reference instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.IReference): cockroach.sql.sqlbase.TableDescriptor.Reference;

                    /**
                     * Encodes the specified Reference message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.Reference.verify|verify} messages.
                     * @param message Reference message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.IReference, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Reference message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.Reference.verify|verify} messages.
                     * @param message Reference message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.IReference, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Reference message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Reference
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.Reference;

                    /**
                     * Decodes a Reference message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Reference
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.Reference;

                    /**
                     * Verifies a Reference message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Reference message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Reference
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.Reference;

                    /**
                     * Creates a plain object from a Reference message. Also converts values to other types if specified.
                     * @param message Reference
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.Reference, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Reference to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MutationJob. */
                interface IMutationJob {

                    /** MutationJob mutation_id */
                    mutation_id?: (number|null);

                    /** MutationJob job_id */
                    job_id?: (Long|null);
                }

                /** Represents a MutationJob. */
                class MutationJob implements IMutationJob {

                    /**
                     * Constructs a new MutationJob.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.IMutationJob);

                    /** MutationJob mutation_id. */
                    public mutation_id: number;

                    /** MutationJob job_id. */
                    public job_id: Long;

                    /**
                     * Creates a new MutationJob instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MutationJob instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.IMutationJob): cockroach.sql.sqlbase.TableDescriptor.MutationJob;

                    /**
                     * Encodes the specified MutationJob message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.MutationJob.verify|verify} messages.
                     * @param message MutationJob message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.IMutationJob, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MutationJob message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.MutationJob.verify|verify} messages.
                     * @param message MutationJob message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.IMutationJob, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MutationJob message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MutationJob
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.MutationJob;

                    /**
                     * Decodes a MutationJob message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MutationJob
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.MutationJob;

                    /**
                     * Verifies a MutationJob message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MutationJob message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MutationJob
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.MutationJob;

                    /**
                     * Creates a plain object from a MutationJob message. Also converts values to other types if specified.
                     * @param message MutationJob
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.MutationJob, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MutationJob to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SequenceOpts. */
                interface ISequenceOpts {

                    /** SequenceOpts increment */
                    increment?: (Long|null);

                    /** SequenceOpts min_value */
                    min_value?: (Long|null);

                    /** SequenceOpts max_value */
                    max_value?: (Long|null);

                    /** SequenceOpts start */
                    start?: (Long|null);

                    /** SequenceOpts virtual */
                    virtual?: (boolean|null);

                    /** SequenceOpts sequence_owner */
                    sequence_owner?: (cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner|null);
                }

                /** Represents a SequenceOpts. */
                class SequenceOpts implements ISequenceOpts {

                    /**
                     * Constructs a new SequenceOpts.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts);

                    /** SequenceOpts increment. */
                    public increment: Long;

                    /** SequenceOpts min_value. */
                    public min_value: Long;

                    /** SequenceOpts max_value. */
                    public max_value: Long;

                    /** SequenceOpts start. */
                    public start: Long;

                    /** SequenceOpts virtual. */
                    public virtual: boolean;

                    /** SequenceOpts sequence_owner. */
                    public sequence_owner?: (cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner|null);

                    /**
                     * Creates a new SequenceOpts instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SequenceOpts instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts;

                    /**
                     * Encodes the specified SequenceOpts message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.verify|verify} messages.
                     * @param message SequenceOpts message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SequenceOpts message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.verify|verify} messages.
                     * @param message SequenceOpts message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.ISequenceOpts, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SequenceOpts message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SequenceOpts
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts;

                    /**
                     * Decodes a SequenceOpts message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SequenceOpts
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts;

                    /**
                     * Verifies a SequenceOpts message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SequenceOpts message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SequenceOpts
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts;

                    /**
                     * Creates a plain object from a SequenceOpts message. Also converts values to other types if specified.
                     * @param message SequenceOpts
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SequenceOpts to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace SequenceOpts {

                    /** Properties of a SequenceOwner. */
                    interface ISequenceOwner {

                        /** SequenceOwner owner_column_id */
                        owner_column_id?: (number|null);

                        /** SequenceOwner owner_table_id */
                        owner_table_id?: (number|null);
                    }

                    /** Represents a SequenceOwner. */
                    class SequenceOwner implements ISequenceOwner {

                        /**
                         * Constructs a new SequenceOwner.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner);

                        /** SequenceOwner owner_column_id. */
                        public owner_column_id: number;

                        /** SequenceOwner owner_table_id. */
                        public owner_table_id: number;

                        /**
                         * Creates a new SequenceOwner instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SequenceOwner instance
                         */
                        public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner;

                        /**
                         * Encodes the specified SequenceOwner message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner.verify|verify} messages.
                         * @param message SequenceOwner message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SequenceOwner message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner.verify|verify} messages.
                         * @param message SequenceOwner message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.ISequenceOwner, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SequenceOwner message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SequenceOwner
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner;

                        /**
                         * Decodes a SequenceOwner message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SequenceOwner
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner;

                        /**
                         * Verifies a SequenceOwner message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SequenceOwner message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SequenceOwner
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner;

                        /**
                         * Creates a plain object from a SequenceOwner message. Also converts values to other types if specified.
                         * @param message SequenceOwner
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.SequenceOpts.SequenceOwner, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SequenceOwner to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a Replacement. */
                interface IReplacement {

                    /** Replacement id */
                    id?: (number|null);

                    /** Replacement time */
                    time?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a Replacement. */
                class Replacement implements IReplacement {

                    /**
                     * Constructs a new Replacement.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.IReplacement);

                    /** Replacement id. */
                    public id: number;

                    /** Replacement time. */
                    public time?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new Replacement instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Replacement instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.IReplacement): cockroach.sql.sqlbase.TableDescriptor.Replacement;

                    /**
                     * Encodes the specified Replacement message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.Replacement.verify|verify} messages.
                     * @param message Replacement message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.IReplacement, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Replacement message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.Replacement.verify|verify} messages.
                     * @param message Replacement message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.IReplacement, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Replacement message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Replacement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.Replacement;

                    /**
                     * Decodes a Replacement message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Replacement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.Replacement;

                    /**
                     * Verifies a Replacement message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Replacement message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Replacement
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.Replacement;

                    /**
                     * Creates a plain object from a Replacement message. Also converts values to other types if specified.
                     * @param message Replacement
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.Replacement, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Replacement to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** AuditMode enum. */
                enum AuditMode {
                    DISABLED = 0,
                    READWRITE = 1
                }

                /** Properties of a GCDescriptorMutation. */
                interface IGCDescriptorMutation {

                    /** GCDescriptorMutation index_id */
                    index_id?: (Long|null);

                    /** GCDescriptorMutation drop_time */
                    drop_time?: (Long|null);

                    /** GCDescriptorMutation job_id */
                    job_id?: (Long|null);
                }

                /** Represents a GCDescriptorMutation. */
                class GCDescriptorMutation implements IGCDescriptorMutation {

                    /**
                     * Constructs a new GCDescriptorMutation.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation);

                    /** GCDescriptorMutation index_id. */
                    public index_id: Long;

                    /** GCDescriptorMutation drop_time. */
                    public drop_time: Long;

                    /** GCDescriptorMutation job_id. */
                    public job_id: Long;

                    /**
                     * Creates a new GCDescriptorMutation instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns GCDescriptorMutation instance
                     */
                    public static create(properties?: cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation): cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation;

                    /**
                     * Encodes the specified GCDescriptorMutation message. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation.verify|verify} messages.
                     * @param message GCDescriptorMutation message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified GCDescriptorMutation message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation.verify|verify} messages.
                     * @param message GCDescriptorMutation message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.sql.sqlbase.TableDescriptor.IGCDescriptorMutation, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a GCDescriptorMutation message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns GCDescriptorMutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation;

                    /**
                     * Decodes a GCDescriptorMutation message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns GCDescriptorMutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation;

                    /**
                     * Verifies a GCDescriptorMutation message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a GCDescriptorMutation message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns GCDescriptorMutation
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation;

                    /**
                     * Creates a plain object from a GCDescriptorMutation message. Also converts values to other types if specified.
                     * @param message GCDescriptorMutation
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.sql.sqlbase.TableDescriptor.GCDescriptorMutation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this GCDescriptorMutation to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a DatabaseDescriptor. */
            interface IDatabaseDescriptor {

                /** DatabaseDescriptor name */
                name?: (string|null);

                /** DatabaseDescriptor id */
                id?: (number|null);

                /** DatabaseDescriptor privileges */
                privileges?: (cockroach.sql.sqlbase.IPrivilegeDescriptor|null);
            }

            /** Represents a DatabaseDescriptor. */
            class DatabaseDescriptor implements IDatabaseDescriptor {

                /**
                 * Constructs a new DatabaseDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IDatabaseDescriptor);

                /** DatabaseDescriptor name. */
                public name: string;

                /** DatabaseDescriptor id. */
                public id: number;

                /** DatabaseDescriptor privileges. */
                public privileges?: (cockroach.sql.sqlbase.IPrivilegeDescriptor|null);

                /**
                 * Creates a new DatabaseDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DatabaseDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IDatabaseDescriptor): cockroach.sql.sqlbase.DatabaseDescriptor;

                /**
                 * Encodes the specified DatabaseDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.DatabaseDescriptor.verify|verify} messages.
                 * @param message DatabaseDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IDatabaseDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabaseDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.DatabaseDescriptor.verify|verify} messages.
                 * @param message DatabaseDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IDatabaseDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabaseDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DatabaseDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.DatabaseDescriptor;

                /**
                 * Decodes a DatabaseDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DatabaseDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.DatabaseDescriptor;

                /**
                 * Verifies a DatabaseDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DatabaseDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DatabaseDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.DatabaseDescriptor;

                /**
                 * Creates a plain object from a DatabaseDescriptor message. Also converts values to other types if specified.
                 * @param message DatabaseDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.DatabaseDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabaseDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Descriptor. */
            interface IDescriptor {

                /** Descriptor table */
                table?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                /** Descriptor database */
                database?: (cockroach.sql.sqlbase.IDatabaseDescriptor|null);
            }

            /** Represents a Descriptor. */
            class Descriptor implements IDescriptor {

                /**
                 * Constructs a new Descriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IDescriptor);

                /** Descriptor table. */
                public table?: (cockroach.sql.sqlbase.ITableDescriptor|null);

                /** Descriptor database. */
                public database?: (cockroach.sql.sqlbase.IDatabaseDescriptor|null);

                /** Descriptor union. */
                public union?: ("table"|"database");

                /**
                 * Creates a new Descriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Descriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IDescriptor): cockroach.sql.sqlbase.Descriptor;

                /**
                 * Encodes the specified Descriptor message. Does not implicitly {@link cockroach.sql.sqlbase.Descriptor.verify|verify} messages.
                 * @param message Descriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Descriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.Descriptor.verify|verify} messages.
                 * @param message Descriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Descriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Descriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.Descriptor;

                /**
                 * Decodes a Descriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Descriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.Descriptor;

                /**
                 * Verifies a Descriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Descriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Descriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.Descriptor;

                /**
                 * Creates a plain object from a Descriptor message. Also converts values to other types if specified.
                 * @param message Descriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.Descriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Descriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a UserPrivileges. */
            interface IUserPrivileges {

                /** UserPrivileges user */
                user?: (string|null);

                /** UserPrivileges privileges */
                privileges?: (number|null);
            }

            /** Represents a UserPrivileges. */
            class UserPrivileges implements IUserPrivileges {

                /**
                 * Constructs a new UserPrivileges.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IUserPrivileges);

                /** UserPrivileges user. */
                public user: string;

                /** UserPrivileges privileges. */
                public privileges: number;

                /**
                 * Creates a new UserPrivileges instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns UserPrivileges instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IUserPrivileges): cockroach.sql.sqlbase.UserPrivileges;

                /**
                 * Encodes the specified UserPrivileges message. Does not implicitly {@link cockroach.sql.sqlbase.UserPrivileges.verify|verify} messages.
                 * @param message UserPrivileges message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IUserPrivileges, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UserPrivileges message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.UserPrivileges.verify|verify} messages.
                 * @param message UserPrivileges message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IUserPrivileges, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UserPrivileges message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns UserPrivileges
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.UserPrivileges;

                /**
                 * Decodes a UserPrivileges message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns UserPrivileges
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.UserPrivileges;

                /**
                 * Verifies a UserPrivileges message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a UserPrivileges message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns UserPrivileges
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.UserPrivileges;

                /**
                 * Creates a plain object from a UserPrivileges message. Also converts values to other types if specified.
                 * @param message UserPrivileges
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.UserPrivileges, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this UserPrivileges to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a PrivilegeDescriptor. */
            interface IPrivilegeDescriptor {

                /** PrivilegeDescriptor users */
                users?: (cockroach.sql.sqlbase.IUserPrivileges[]|null);
            }

            /** Represents a PrivilegeDescriptor. */
            class PrivilegeDescriptor implements IPrivilegeDescriptor {

                /**
                 * Constructs a new PrivilegeDescriptor.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.sqlbase.IPrivilegeDescriptor);

                /** PrivilegeDescriptor users. */
                public users: cockroach.sql.sqlbase.IUserPrivileges[];

                /**
                 * Creates a new PrivilegeDescriptor instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns PrivilegeDescriptor instance
                 */
                public static create(properties?: cockroach.sql.sqlbase.IPrivilegeDescriptor): cockroach.sql.sqlbase.PrivilegeDescriptor;

                /**
                 * Encodes the specified PrivilegeDescriptor message. Does not implicitly {@link cockroach.sql.sqlbase.PrivilegeDescriptor.verify|verify} messages.
                 * @param message PrivilegeDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.sqlbase.IPrivilegeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PrivilegeDescriptor message, length delimited. Does not implicitly {@link cockroach.sql.sqlbase.PrivilegeDescriptor.verify|verify} messages.
                 * @param message PrivilegeDescriptor message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.sqlbase.IPrivilegeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PrivilegeDescriptor message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns PrivilegeDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.sqlbase.PrivilegeDescriptor;

                /**
                 * Decodes a PrivilegeDescriptor message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns PrivilegeDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.sqlbase.PrivilegeDescriptor;

                /**
                 * Verifies a PrivilegeDescriptor message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a PrivilegeDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns PrivilegeDescriptor
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.sqlbase.PrivilegeDescriptor;

                /**
                 * Creates a plain object from a PrivilegeDescriptor message. Also converts values to other types if specified.
                 * @param message PrivilegeDescriptor
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.sqlbase.PrivilegeDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this PrivilegeDescriptor to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a StatementStatistics. */
        interface IStatementStatistics {

            /** StatementStatistics count */
            count?: (Long|null);

            /** StatementStatistics first_attempt_count */
            first_attempt_count?: (Long|null);

            /** StatementStatistics max_retries */
            max_retries?: (Long|null);

            /** StatementStatistics legacy_last_err */
            legacy_last_err?: (string|null);

            /** StatementStatistics legacy_last_err_redacted */
            legacy_last_err_redacted?: (string|null);

            /** StatementStatistics num_rows */
            num_rows?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics parse_lat */
            parse_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics plan_lat */
            plan_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics run_lat */
            run_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics service_lat */
            service_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics overhead_lat */
            overhead_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics sensitive_info */
            sensitive_info?: (cockroach.sql.ISensitiveInfo|null);

            /** StatementStatistics bytes_read */
            bytes_read?: (Long|null);

            /** StatementStatistics rows_read */
            rows_read?: (Long|null);
        }

        /** Represents a StatementStatistics. */
        class StatementStatistics implements IStatementStatistics {

            /**
             * Constructs a new StatementStatistics.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.IStatementStatistics);

            /** StatementStatistics count. */
            public count: Long;

            /** StatementStatistics first_attempt_count. */
            public first_attempt_count: Long;

            /** StatementStatistics max_retries. */
            public max_retries: Long;

            /** StatementStatistics legacy_last_err. */
            public legacy_last_err: string;

            /** StatementStatistics legacy_last_err_redacted. */
            public legacy_last_err_redacted: string;

            /** StatementStatistics num_rows. */
            public num_rows?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics parse_lat. */
            public parse_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics plan_lat. */
            public plan_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics run_lat. */
            public run_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics service_lat. */
            public service_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics overhead_lat. */
            public overhead_lat?: (cockroach.sql.INumericStat|null);

            /** StatementStatistics sensitive_info. */
            public sensitive_info?: (cockroach.sql.ISensitiveInfo|null);

            /** StatementStatistics bytes_read. */
            public bytes_read: Long;

            /** StatementStatistics rows_read. */
            public rows_read: Long;

            /**
             * Creates a new StatementStatistics instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StatementStatistics instance
             */
            public static create(properties?: cockroach.sql.IStatementStatistics): cockroach.sql.StatementStatistics;

            /**
             * Encodes the specified StatementStatistics message. Does not implicitly {@link cockroach.sql.StatementStatistics.verify|verify} messages.
             * @param message StatementStatistics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.IStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StatementStatistics message, length delimited. Does not implicitly {@link cockroach.sql.StatementStatistics.verify|verify} messages.
             * @param message StatementStatistics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.IStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StatementStatistics message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StatementStatistics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.StatementStatistics;

            /**
             * Decodes a StatementStatistics message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StatementStatistics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.StatementStatistics;

            /**
             * Verifies a StatementStatistics message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StatementStatistics message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StatementStatistics
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.StatementStatistics;

            /**
             * Creates a plain object from a StatementStatistics message. Also converts values to other types if specified.
             * @param message StatementStatistics
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.StatementStatistics, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StatementStatistics to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SensitiveInfo. */
        interface ISensitiveInfo {

            /** SensitiveInfo last_err */
            last_err?: (string|null);

            /** SensitiveInfo most_recent_plan_description */
            most_recent_plan_description?: (cockroach.sql.IExplainTreePlanNode|null);

            /** SensitiveInfo most_recent_plan_timestamp */
            most_recent_plan_timestamp?: (google.protobuf.ITimestamp|null);
        }

        /** Represents a SensitiveInfo. */
        class SensitiveInfo implements ISensitiveInfo {

            /**
             * Constructs a new SensitiveInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.ISensitiveInfo);

            /** SensitiveInfo last_err. */
            public last_err: string;

            /** SensitiveInfo most_recent_plan_description. */
            public most_recent_plan_description?: (cockroach.sql.IExplainTreePlanNode|null);

            /** SensitiveInfo most_recent_plan_timestamp. */
            public most_recent_plan_timestamp?: (google.protobuf.ITimestamp|null);

            /**
             * Creates a new SensitiveInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SensitiveInfo instance
             */
            public static create(properties?: cockroach.sql.ISensitiveInfo): cockroach.sql.SensitiveInfo;

            /**
             * Encodes the specified SensitiveInfo message. Does not implicitly {@link cockroach.sql.SensitiveInfo.verify|verify} messages.
             * @param message SensitiveInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.ISensitiveInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SensitiveInfo message, length delimited. Does not implicitly {@link cockroach.sql.SensitiveInfo.verify|verify} messages.
             * @param message SensitiveInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.ISensitiveInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SensitiveInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SensitiveInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.SensitiveInfo;

            /**
             * Decodes a SensitiveInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SensitiveInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.SensitiveInfo;

            /**
             * Verifies a SensitiveInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SensitiveInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SensitiveInfo
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.SensitiveInfo;

            /**
             * Creates a plain object from a SensitiveInfo message. Also converts values to other types if specified.
             * @param message SensitiveInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.SensitiveInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SensitiveInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NumericStat. */
        interface INumericStat {

            /** NumericStat mean */
            mean?: (number|null);

            /** NumericStat squared_diffs */
            squared_diffs?: (number|null);
        }

        /** Represents a NumericStat. */
        class NumericStat implements INumericStat {

            /**
             * Constructs a new NumericStat.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.INumericStat);

            /** NumericStat mean. */
            public mean: number;

            /** NumericStat squared_diffs. */
            public squared_diffs: number;

            /**
             * Creates a new NumericStat instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NumericStat instance
             */
            public static create(properties?: cockroach.sql.INumericStat): cockroach.sql.NumericStat;

            /**
             * Encodes the specified NumericStat message. Does not implicitly {@link cockroach.sql.NumericStat.verify|verify} messages.
             * @param message NumericStat message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.INumericStat, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NumericStat message, length delimited. Does not implicitly {@link cockroach.sql.NumericStat.verify|verify} messages.
             * @param message NumericStat message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.INumericStat, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NumericStat message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NumericStat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.NumericStat;

            /**
             * Decodes a NumericStat message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NumericStat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.NumericStat;

            /**
             * Verifies a NumericStat message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NumericStat message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NumericStat
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.NumericStat;

            /**
             * Creates a plain object from a NumericStat message. Also converts values to other types if specified.
             * @param message NumericStat
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.NumericStat, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NumericStat to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StatementStatisticsKey. */
        interface IStatementStatisticsKey {

            /** StatementStatisticsKey query */
            query?: (string|null);

            /** StatementStatisticsKey app */
            app?: (string|null);

            /** StatementStatisticsKey distSQL */
            distSQL?: (boolean|null);

            /** StatementStatisticsKey failed */
            failed?: (boolean|null);

            /** StatementStatisticsKey opt */
            opt?: (boolean|null);

            /** StatementStatisticsKey implicit_txn */
            implicit_txn?: (boolean|null);
        }

        /** Represents a StatementStatisticsKey. */
        class StatementStatisticsKey implements IStatementStatisticsKey {

            /**
             * Constructs a new StatementStatisticsKey.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.IStatementStatisticsKey);

            /** StatementStatisticsKey query. */
            public query: string;

            /** StatementStatisticsKey app. */
            public app: string;

            /** StatementStatisticsKey distSQL. */
            public distSQL: boolean;

            /** StatementStatisticsKey failed. */
            public failed: boolean;

            /** StatementStatisticsKey opt. */
            public opt: boolean;

            /** StatementStatisticsKey implicit_txn. */
            public implicit_txn: boolean;

            /**
             * Creates a new StatementStatisticsKey instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StatementStatisticsKey instance
             */
            public static create(properties?: cockroach.sql.IStatementStatisticsKey): cockroach.sql.StatementStatisticsKey;

            /**
             * Encodes the specified StatementStatisticsKey message. Does not implicitly {@link cockroach.sql.StatementStatisticsKey.verify|verify} messages.
             * @param message StatementStatisticsKey message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.IStatementStatisticsKey, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StatementStatisticsKey message, length delimited. Does not implicitly {@link cockroach.sql.StatementStatisticsKey.verify|verify} messages.
             * @param message StatementStatisticsKey message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.IStatementStatisticsKey, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StatementStatisticsKey message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StatementStatisticsKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.StatementStatisticsKey;

            /**
             * Decodes a StatementStatisticsKey message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StatementStatisticsKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.StatementStatisticsKey;

            /**
             * Verifies a StatementStatisticsKey message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StatementStatisticsKey message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StatementStatisticsKey
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.StatementStatisticsKey;

            /**
             * Creates a plain object from a StatementStatisticsKey message. Also converts values to other types if specified.
             * @param message StatementStatisticsKey
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.StatementStatisticsKey, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StatementStatisticsKey to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a CollectedStatementStatistics. */
        interface ICollectedStatementStatistics {

            /** CollectedStatementStatistics key */
            key?: (cockroach.sql.IStatementStatisticsKey|null);

            /** CollectedStatementStatistics stats */
            stats?: (cockroach.sql.IStatementStatistics|null);
        }

        /** Represents a CollectedStatementStatistics. */
        class CollectedStatementStatistics implements ICollectedStatementStatistics {

            /**
             * Constructs a new CollectedStatementStatistics.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.ICollectedStatementStatistics);

            /** CollectedStatementStatistics key. */
            public key?: (cockroach.sql.IStatementStatisticsKey|null);

            /** CollectedStatementStatistics stats. */
            public stats?: (cockroach.sql.IStatementStatistics|null);

            /**
             * Creates a new CollectedStatementStatistics instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CollectedStatementStatistics instance
             */
            public static create(properties?: cockroach.sql.ICollectedStatementStatistics): cockroach.sql.CollectedStatementStatistics;

            /**
             * Encodes the specified CollectedStatementStatistics message. Does not implicitly {@link cockroach.sql.CollectedStatementStatistics.verify|verify} messages.
             * @param message CollectedStatementStatistics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.ICollectedStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CollectedStatementStatistics message, length delimited. Does not implicitly {@link cockroach.sql.CollectedStatementStatistics.verify|verify} messages.
             * @param message CollectedStatementStatistics message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.ICollectedStatementStatistics, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CollectedStatementStatistics message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CollectedStatementStatistics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.CollectedStatementStatistics;

            /**
             * Decodes a CollectedStatementStatistics message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CollectedStatementStatistics
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.CollectedStatementStatistics;

            /**
             * Verifies a CollectedStatementStatistics message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CollectedStatementStatistics message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CollectedStatementStatistics
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.CollectedStatementStatistics;

            /**
             * Creates a plain object from a CollectedStatementStatistics message. Also converts values to other types if specified.
             * @param message CollectedStatementStatistics
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.CollectedStatementStatistics, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CollectedStatementStatistics to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an ExplainTreePlanNode. */
        interface IExplainTreePlanNode {

            /** ExplainTreePlanNode name */
            name?: (string|null);

            /** ExplainTreePlanNode attrs */
            attrs?: (cockroach.sql.ExplainTreePlanNode.IAttr[]|null);

            /** ExplainTreePlanNode children */
            children?: (cockroach.sql.IExplainTreePlanNode[]|null);
        }

        /** Represents an ExplainTreePlanNode. */
        class ExplainTreePlanNode implements IExplainTreePlanNode {

            /**
             * Constructs a new ExplainTreePlanNode.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.IExplainTreePlanNode);

            /** ExplainTreePlanNode name. */
            public name: string;

            /** ExplainTreePlanNode attrs. */
            public attrs: cockroach.sql.ExplainTreePlanNode.IAttr[];

            /** ExplainTreePlanNode children. */
            public children: cockroach.sql.IExplainTreePlanNode[];

            /**
             * Creates a new ExplainTreePlanNode instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ExplainTreePlanNode instance
             */
            public static create(properties?: cockroach.sql.IExplainTreePlanNode): cockroach.sql.ExplainTreePlanNode;

            /**
             * Encodes the specified ExplainTreePlanNode message. Does not implicitly {@link cockroach.sql.ExplainTreePlanNode.verify|verify} messages.
             * @param message ExplainTreePlanNode message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.IExplainTreePlanNode, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ExplainTreePlanNode message, length delimited. Does not implicitly {@link cockroach.sql.ExplainTreePlanNode.verify|verify} messages.
             * @param message ExplainTreePlanNode message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.IExplainTreePlanNode, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ExplainTreePlanNode message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ExplainTreePlanNode
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.ExplainTreePlanNode;

            /**
             * Decodes an ExplainTreePlanNode message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ExplainTreePlanNode
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.ExplainTreePlanNode;

            /**
             * Verifies an ExplainTreePlanNode message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ExplainTreePlanNode message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ExplainTreePlanNode
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.ExplainTreePlanNode;

            /**
             * Creates a plain object from an ExplainTreePlanNode message. Also converts values to other types if specified.
             * @param message ExplainTreePlanNode
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.ExplainTreePlanNode, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ExplainTreePlanNode to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace ExplainTreePlanNode {

            /** Properties of an Attr. */
            interface IAttr {

                /** Attr key */
                key?: (string|null);

                /** Attr value */
                value?: (string|null);
            }

            /** Represents an Attr. */
            class Attr implements IAttr {

                /**
                 * Constructs a new Attr.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.sql.ExplainTreePlanNode.IAttr);

                /** Attr key. */
                public key: string;

                /** Attr value. */
                public value: string;

                /**
                 * Creates a new Attr instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Attr instance
                 */
                public static create(properties?: cockroach.sql.ExplainTreePlanNode.IAttr): cockroach.sql.ExplainTreePlanNode.Attr;

                /**
                 * Encodes the specified Attr message. Does not implicitly {@link cockroach.sql.ExplainTreePlanNode.Attr.verify|verify} messages.
                 * @param message Attr message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.sql.ExplainTreePlanNode.IAttr, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Attr message, length delimited. Does not implicitly {@link cockroach.sql.ExplainTreePlanNode.Attr.verify|verify} messages.
                 * @param message Attr message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.sql.ExplainTreePlanNode.IAttr, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Attr message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Attr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.ExplainTreePlanNode.Attr;

                /**
                 * Decodes an Attr message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Attr
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.ExplainTreePlanNode.Attr;

                /**
                 * Verifies an Attr message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Attr message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Attr
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.sql.ExplainTreePlanNode.Attr;

                /**
                 * Creates a plain object from an Attr message. Also converts values to other types if specified.
                 * @param message Attr
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.sql.ExplainTreePlanNode.Attr, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Attr to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a TxnStats. */
        interface ITxnStats {

            /** TxnStats txn_count */
            txn_count?: (Long|null);

            /** TxnStats txn_time_sec */
            txn_time_sec?: (cockroach.sql.INumericStat|null);

            /** TxnStats committed_count */
            committed_count?: (Long|null);

            /** TxnStats implicit_count */
            implicit_count?: (Long|null);
        }

        /** Represents a TxnStats. */
        class TxnStats implements ITxnStats {

            /**
             * Constructs a new TxnStats.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.sql.ITxnStats);

            /** TxnStats txn_count. */
            public txn_count: Long;

            /** TxnStats txn_time_sec. */
            public txn_time_sec?: (cockroach.sql.INumericStat|null);

            /** TxnStats committed_count. */
            public committed_count: Long;

            /** TxnStats implicit_count. */
            public implicit_count: Long;

            /**
             * Creates a new TxnStats instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TxnStats instance
             */
            public static create(properties?: cockroach.sql.ITxnStats): cockroach.sql.TxnStats;

            /**
             * Encodes the specified TxnStats message. Does not implicitly {@link cockroach.sql.TxnStats.verify|verify} messages.
             * @param message TxnStats message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.sql.ITxnStats, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TxnStats message, length delimited. Does not implicitly {@link cockroach.sql.TxnStats.verify|verify} messages.
             * @param message TxnStats message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.sql.ITxnStats, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TxnStats message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TxnStats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.sql.TxnStats;

            /**
             * Decodes a TxnStats message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TxnStats
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.sql.TxnStats;

            /**
             * Verifies a TxnStats message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TxnStats message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TxnStats
             */
            public static fromObject(object: { [k: string]: any }): cockroach.sql.TxnStats;

            /**
             * Creates a plain object from a TxnStats message. Also converts values to other types if specified.
             * @param message TxnStats
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.sql.TxnStats, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TxnStats to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace errorspb. */
    namespace errorspb {

        /** Properties of an EncodedError. */
        interface IEncodedError {

            /** EncodedError leaf */
            leaf?: (cockroach.errorspb.IEncodedErrorLeaf|null);

            /** EncodedError wrapper */
            wrapper?: (cockroach.errorspb.IEncodedWrapper|null);
        }

        /** Represents an EncodedError. */
        class EncodedError implements IEncodedError {

            /**
             * Constructs a new EncodedError.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.errorspb.IEncodedError);

            /** EncodedError leaf. */
            public leaf?: (cockroach.errorspb.IEncodedErrorLeaf|null);

            /** EncodedError wrapper. */
            public wrapper?: (cockroach.errorspb.IEncodedWrapper|null);

            /** EncodedError error. */
            public error?: ("leaf"|"wrapper");

            /**
             * Creates a new EncodedError instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EncodedError instance
             */
            public static create(properties?: cockroach.errorspb.IEncodedError): cockroach.errorspb.EncodedError;

            /**
             * Encodes the specified EncodedError message. Does not implicitly {@link cockroach.errorspb.EncodedError.verify|verify} messages.
             * @param message EncodedError message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.errorspb.IEncodedError, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EncodedError message, length delimited. Does not implicitly {@link cockroach.errorspb.EncodedError.verify|verify} messages.
             * @param message EncodedError message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.errorspb.IEncodedError, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EncodedError message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EncodedError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.errorspb.EncodedError;

            /**
             * Decodes an EncodedError message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EncodedError
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.errorspb.EncodedError;

            /**
             * Verifies an EncodedError message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EncodedError message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EncodedError
             */
            public static fromObject(object: { [k: string]: any }): cockroach.errorspb.EncodedError;

            /**
             * Creates a plain object from an EncodedError message. Also converts values to other types if specified.
             * @param message EncodedError
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.errorspb.EncodedError, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EncodedError to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EncodedErrorLeaf. */
        interface IEncodedErrorLeaf {

            /** EncodedErrorLeaf message */
            message?: (string|null);

            /** EncodedErrorLeaf details */
            details?: (cockroach.errorspb.IEncodedErrorDetails|null);
        }

        /** Represents an EncodedErrorLeaf. */
        class EncodedErrorLeaf implements IEncodedErrorLeaf {

            /**
             * Constructs a new EncodedErrorLeaf.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.errorspb.IEncodedErrorLeaf);

            /** EncodedErrorLeaf message. */
            public message: string;

            /** EncodedErrorLeaf details. */
            public details?: (cockroach.errorspb.IEncodedErrorDetails|null);

            /**
             * Creates a new EncodedErrorLeaf instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EncodedErrorLeaf instance
             */
            public static create(properties?: cockroach.errorspb.IEncodedErrorLeaf): cockroach.errorspb.EncodedErrorLeaf;

            /**
             * Encodes the specified EncodedErrorLeaf message. Does not implicitly {@link cockroach.errorspb.EncodedErrorLeaf.verify|verify} messages.
             * @param message EncodedErrorLeaf message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.errorspb.IEncodedErrorLeaf, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EncodedErrorLeaf message, length delimited. Does not implicitly {@link cockroach.errorspb.EncodedErrorLeaf.verify|verify} messages.
             * @param message EncodedErrorLeaf message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.errorspb.IEncodedErrorLeaf, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EncodedErrorLeaf message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EncodedErrorLeaf
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.errorspb.EncodedErrorLeaf;

            /**
             * Decodes an EncodedErrorLeaf message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EncodedErrorLeaf
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.errorspb.EncodedErrorLeaf;

            /**
             * Verifies an EncodedErrorLeaf message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EncodedErrorLeaf message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EncodedErrorLeaf
             */
            public static fromObject(object: { [k: string]: any }): cockroach.errorspb.EncodedErrorLeaf;

            /**
             * Creates a plain object from an EncodedErrorLeaf message. Also converts values to other types if specified.
             * @param message EncodedErrorLeaf
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.errorspb.EncodedErrorLeaf, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EncodedErrorLeaf to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EncodedErrorDetails. */
        interface IEncodedErrorDetails {

            /** EncodedErrorDetails original_type_name */
            original_type_name?: (string|null);

            /** EncodedErrorDetails error_type_mark */
            error_type_mark?: (cockroach.errorspb.IErrorTypeMark|null);

            /** EncodedErrorDetails reportable_payload */
            reportable_payload?: (string[]|null);

            /** EncodedErrorDetails full_details */
            full_details?: (google.protobuf.IAny|null);
        }

        /** Represents an EncodedErrorDetails. */
        class EncodedErrorDetails implements IEncodedErrorDetails {

            /**
             * Constructs a new EncodedErrorDetails.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.errorspb.IEncodedErrorDetails);

            /** EncodedErrorDetails original_type_name. */
            public original_type_name: string;

            /** EncodedErrorDetails error_type_mark. */
            public error_type_mark?: (cockroach.errorspb.IErrorTypeMark|null);

            /** EncodedErrorDetails reportable_payload. */
            public reportable_payload: string[];

            /** EncodedErrorDetails full_details. */
            public full_details?: (google.protobuf.IAny|null);

            /**
             * Creates a new EncodedErrorDetails instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EncodedErrorDetails instance
             */
            public static create(properties?: cockroach.errorspb.IEncodedErrorDetails): cockroach.errorspb.EncodedErrorDetails;

            /**
             * Encodes the specified EncodedErrorDetails message. Does not implicitly {@link cockroach.errorspb.EncodedErrorDetails.verify|verify} messages.
             * @param message EncodedErrorDetails message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.errorspb.IEncodedErrorDetails, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EncodedErrorDetails message, length delimited. Does not implicitly {@link cockroach.errorspb.EncodedErrorDetails.verify|verify} messages.
             * @param message EncodedErrorDetails message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.errorspb.IEncodedErrorDetails, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EncodedErrorDetails message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EncodedErrorDetails
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.errorspb.EncodedErrorDetails;

            /**
             * Decodes an EncodedErrorDetails message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EncodedErrorDetails
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.errorspb.EncodedErrorDetails;

            /**
             * Verifies an EncodedErrorDetails message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EncodedErrorDetails message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EncodedErrorDetails
             */
            public static fromObject(object: { [k: string]: any }): cockroach.errorspb.EncodedErrorDetails;

            /**
             * Creates a plain object from an EncodedErrorDetails message. Also converts values to other types if specified.
             * @param message EncodedErrorDetails
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.errorspb.EncodedErrorDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EncodedErrorDetails to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EncodedWrapper. */
        interface IEncodedWrapper {

            /** EncodedWrapper cause */
            cause?: (cockroach.errorspb.IEncodedError|null);

            /** EncodedWrapper message_prefix */
            message_prefix?: (string|null);

            /** EncodedWrapper details */
            details?: (cockroach.errorspb.IEncodedErrorDetails|null);
        }

        /** Represents an EncodedWrapper. */
        class EncodedWrapper implements IEncodedWrapper {

            /**
             * Constructs a new EncodedWrapper.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.errorspb.IEncodedWrapper);

            /** EncodedWrapper cause. */
            public cause?: (cockroach.errorspb.IEncodedError|null);

            /** EncodedWrapper message_prefix. */
            public message_prefix: string;

            /** EncodedWrapper details. */
            public details?: (cockroach.errorspb.IEncodedErrorDetails|null);

            /**
             * Creates a new EncodedWrapper instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EncodedWrapper instance
             */
            public static create(properties?: cockroach.errorspb.IEncodedWrapper): cockroach.errorspb.EncodedWrapper;

            /**
             * Encodes the specified EncodedWrapper message. Does not implicitly {@link cockroach.errorspb.EncodedWrapper.verify|verify} messages.
             * @param message EncodedWrapper message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.errorspb.IEncodedWrapper, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EncodedWrapper message, length delimited. Does not implicitly {@link cockroach.errorspb.EncodedWrapper.verify|verify} messages.
             * @param message EncodedWrapper message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.errorspb.IEncodedWrapper, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EncodedWrapper message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EncodedWrapper
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.errorspb.EncodedWrapper;

            /**
             * Decodes an EncodedWrapper message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EncodedWrapper
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.errorspb.EncodedWrapper;

            /**
             * Verifies an EncodedWrapper message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EncodedWrapper message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EncodedWrapper
             */
            public static fromObject(object: { [k: string]: any }): cockroach.errorspb.EncodedWrapper;

            /**
             * Creates a plain object from an EncodedWrapper message. Also converts values to other types if specified.
             * @param message EncodedWrapper
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.errorspb.EncodedWrapper, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EncodedWrapper to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an ErrorTypeMark. */
        interface IErrorTypeMark {

            /** ErrorTypeMark family_name */
            family_name?: (string|null);

            /** ErrorTypeMark extension */
            extension?: (string|null);
        }

        /** Represents an ErrorTypeMark. */
        class ErrorTypeMark implements IErrorTypeMark {

            /**
             * Constructs a new ErrorTypeMark.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.errorspb.IErrorTypeMark);

            /** ErrorTypeMark family_name. */
            public family_name: string;

            /** ErrorTypeMark extension. */
            public extension: string;

            /**
             * Creates a new ErrorTypeMark instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ErrorTypeMark instance
             */
            public static create(properties?: cockroach.errorspb.IErrorTypeMark): cockroach.errorspb.ErrorTypeMark;

            /**
             * Encodes the specified ErrorTypeMark message. Does not implicitly {@link cockroach.errorspb.ErrorTypeMark.verify|verify} messages.
             * @param message ErrorTypeMark message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.errorspb.IErrorTypeMark, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ErrorTypeMark message, length delimited. Does not implicitly {@link cockroach.errorspb.ErrorTypeMark.verify|verify} messages.
             * @param message ErrorTypeMark message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.errorspb.IErrorTypeMark, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ErrorTypeMark message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ErrorTypeMark
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.errorspb.ErrorTypeMark;

            /**
             * Decodes an ErrorTypeMark message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ErrorTypeMark
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.errorspb.ErrorTypeMark;

            /**
             * Verifies an ErrorTypeMark message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ErrorTypeMark message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ErrorTypeMark
             */
            public static fromObject(object: { [k: string]: any }): cockroach.errorspb.ErrorTypeMark;

            /**
             * Creates a plain object from an ErrorTypeMark message. Also converts values to other types if specified.
             * @param message ErrorTypeMark
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.errorspb.ErrorTypeMark, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ErrorTypeMark to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace roachpb. */
    namespace roachpb {

        /** Properties of a Span. */
        interface ISpan {

            /** Span key */
            key?: (Uint8Array|null);

            /** Span end_key */
            end_key?: (Uint8Array|null);
        }

        /** Represents a Span. */
        class Span implements ISpan {

            /**
             * Constructs a new Span.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ISpan);

            /** Span key. */
            public key: Uint8Array;

            /** Span end_key. */
            public end_key: Uint8Array;

            /**
             * Creates a new Span instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Span instance
             */
            public static create(properties?: cockroach.roachpb.ISpan): cockroach.roachpb.Span;

            /**
             * Encodes the specified Span message. Does not implicitly {@link cockroach.roachpb.Span.verify|verify} messages.
             * @param message Span message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ISpan, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Span message, length delimited. Does not implicitly {@link cockroach.roachpb.Span.verify|verify} messages.
             * @param message Span message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ISpan, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Span message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Span
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Span;

            /**
             * Decodes a Span message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Span
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Span;

            /**
             * Verifies a Span message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Span message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Span
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Span;

            /**
             * Creates a plain object from a Span message. Also converts values to other types if specified.
             * @param message Span
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Span, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Span to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** ValueType enum. */
        enum ValueType {
            UNKNOWN = 0,
            INT = 1,
            FLOAT = 2,
            BYTES = 3,
            DELIMITED_BYTES = 8,
            TIME = 4,
            DECIMAL = 5,
            DELIMITED_DECIMAL = 9,
            DURATION = 6,
            TIMETZ = 12,
            TUPLE = 10,
            BITARRAY = 11,
            TIMESERIES = 100
        }

        /** Properties of a Value. */
        interface IValue {

            /** Value raw_bytes */
            raw_bytes?: (Uint8Array|null);

            /** Value timestamp */
            timestamp?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents a Value. */
        class Value implements IValue {

            /**
             * Constructs a new Value.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IValue);

            /** Value raw_bytes. */
            public raw_bytes: Uint8Array;

            /** Value timestamp. */
            public timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new Value instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Value instance
             */
            public static create(properties?: cockroach.roachpb.IValue): cockroach.roachpb.Value;

            /**
             * Encodes the specified Value message. Does not implicitly {@link cockroach.roachpb.Value.verify|verify} messages.
             * @param message Value message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.roachpb.Value.verify|verify} messages.
             * @param message Value message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Value message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Value;

            /**
             * Decodes a Value message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Value;

            /**
             * Verifies a Value message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Value
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Value;

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @param message Value
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Value, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Value to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a KeyValue. */
        interface IKeyValue {

            /** KeyValue key */
            key?: (Uint8Array|null);

            /** KeyValue value */
            value?: (cockroach.roachpb.IValue|null);
        }

        /** Represents a KeyValue. */
        class KeyValue implements IKeyValue {

            /**
             * Constructs a new KeyValue.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IKeyValue);

            /** KeyValue key. */
            public key: Uint8Array;

            /** KeyValue value. */
            public value?: (cockroach.roachpb.IValue|null);

            /**
             * Creates a new KeyValue instance using the specified properties.
             * @param [properties] Properties to set
             * @returns KeyValue instance
             */
            public static create(properties?: cockroach.roachpb.IKeyValue): cockroach.roachpb.KeyValue;

            /**
             * Encodes the specified KeyValue message. Does not implicitly {@link cockroach.roachpb.KeyValue.verify|verify} messages.
             * @param message KeyValue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IKeyValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link cockroach.roachpb.KeyValue.verify|verify} messages.
             * @param message KeyValue message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IKeyValue, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KeyValue message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns KeyValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.KeyValue;

            /**
             * Decodes a KeyValue message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns KeyValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.KeyValue;

            /**
             * Verifies a KeyValue message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns KeyValue
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.KeyValue;

            /**
             * Creates a plain object from a KeyValue message. Also converts values to other types if specified.
             * @param message KeyValue
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.KeyValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this KeyValue to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StoreIdent. */
        interface IStoreIdent {

            /** StoreIdent cluster_id */
            cluster_id?: (Uint8Array|null);

            /** StoreIdent node_id */
            node_id?: (number|null);

            /** StoreIdent store_id */
            store_id?: (number|null);
        }

        /** Represents a StoreIdent. */
        class StoreIdent implements IStoreIdent {

            /**
             * Constructs a new StoreIdent.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IStoreIdent);

            /** StoreIdent cluster_id. */
            public cluster_id: Uint8Array;

            /** StoreIdent node_id. */
            public node_id: number;

            /** StoreIdent store_id. */
            public store_id: number;

            /**
             * Creates a new StoreIdent instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StoreIdent instance
             */
            public static create(properties?: cockroach.roachpb.IStoreIdent): cockroach.roachpb.StoreIdent;

            /**
             * Encodes the specified StoreIdent message. Does not implicitly {@link cockroach.roachpb.StoreIdent.verify|verify} messages.
             * @param message StoreIdent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IStoreIdent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreIdent message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreIdent.verify|verify} messages.
             * @param message StoreIdent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IStoreIdent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreIdent message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StoreIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreIdent;

            /**
             * Decodes a StoreIdent message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StoreIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreIdent;

            /**
             * Verifies a StoreIdent message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StoreIdent message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StoreIdent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreIdent;

            /**
             * Creates a plain object from a StoreIdent message. Also converts values to other types if specified.
             * @param message StoreIdent
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreIdent, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreIdent to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SplitTrigger. */
        interface ISplitTrigger {

            /** SplitTrigger left_desc */
            left_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** SplitTrigger right_desc */
            right_desc?: (cockroach.roachpb.IRangeDescriptor|null);
        }

        /** Represents a SplitTrigger. */
        class SplitTrigger implements ISplitTrigger {

            /**
             * Constructs a new SplitTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ISplitTrigger);

            /** SplitTrigger left_desc. */
            public left_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** SplitTrigger right_desc. */
            public right_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /**
             * Creates a new SplitTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SplitTrigger instance
             */
            public static create(properties?: cockroach.roachpb.ISplitTrigger): cockroach.roachpb.SplitTrigger;

            /**
             * Encodes the specified SplitTrigger message. Does not implicitly {@link cockroach.roachpb.SplitTrigger.verify|verify} messages.
             * @param message SplitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ISplitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SplitTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.SplitTrigger.verify|verify} messages.
             * @param message SplitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ISplitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SplitTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SplitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.SplitTrigger;

            /**
             * Decodes a SplitTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SplitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.SplitTrigger;

            /**
             * Verifies a SplitTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SplitTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SplitTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.SplitTrigger;

            /**
             * Creates a plain object from a SplitTrigger message. Also converts values to other types if specified.
             * @param message SplitTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.SplitTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SplitTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MergeTrigger. */
        interface IMergeTrigger {

            /** MergeTrigger left_desc */
            left_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** MergeTrigger right_desc */
            right_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** MergeTrigger right_mvcc_stats */
            right_mvcc_stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

            /** MergeTrigger freeze_start */
            freeze_start?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents a MergeTrigger. */
        class MergeTrigger implements IMergeTrigger {

            /**
             * Constructs a new MergeTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IMergeTrigger);

            /** MergeTrigger left_desc. */
            public left_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** MergeTrigger right_desc. */
            public right_desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** MergeTrigger right_mvcc_stats. */
            public right_mvcc_stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

            /** MergeTrigger freeze_start. */
            public freeze_start?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new MergeTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MergeTrigger instance
             */
            public static create(properties?: cockroach.roachpb.IMergeTrigger): cockroach.roachpb.MergeTrigger;

            /**
             * Encodes the specified MergeTrigger message. Does not implicitly {@link cockroach.roachpb.MergeTrigger.verify|verify} messages.
             * @param message MergeTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IMergeTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MergeTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.MergeTrigger.verify|verify} messages.
             * @param message MergeTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IMergeTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MergeTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MergeTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.MergeTrigger;

            /**
             * Decodes a MergeTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MergeTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.MergeTrigger;

            /**
             * Verifies a MergeTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MergeTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MergeTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.MergeTrigger;

            /**
             * Creates a plain object from a MergeTrigger message. Also converts values to other types if specified.
             * @param message MergeTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.MergeTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MergeTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** ReplicaChangeType enum. */
        enum ReplicaChangeType {
            ADD_REPLICA = 0,
            REMOVE_REPLICA = 1
        }

        /** Properties of a ChangeReplicasTrigger. */
        interface IChangeReplicasTrigger {

            /** ChangeReplicasTrigger deprecated_change_type */
            deprecated_change_type?: (cockroach.roachpb.ReplicaChangeType|null);

            /** ChangeReplicasTrigger deprecated_replica */
            deprecated_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

            /** ChangeReplicasTrigger deprecated_updated_replicas */
            deprecated_updated_replicas?: (cockroach.roachpb.IReplicaDescriptor[]|null);

            /** ChangeReplicasTrigger deprecated_next_replica_id */
            deprecated_next_replica_id?: (number|null);

            /** ChangeReplicasTrigger desc */
            desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** ChangeReplicasTrigger internal_added_replicas */
            internal_added_replicas?: (cockroach.roachpb.IReplicaDescriptor[]|null);

            /** ChangeReplicasTrigger internal_removed_replicas */
            internal_removed_replicas?: (cockroach.roachpb.IReplicaDescriptor[]|null);
        }

        /** Represents a ChangeReplicasTrigger. */
        class ChangeReplicasTrigger implements IChangeReplicasTrigger {

            /**
             * Constructs a new ChangeReplicasTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IChangeReplicasTrigger);

            /** ChangeReplicasTrigger deprecated_change_type. */
            public deprecated_change_type: cockroach.roachpb.ReplicaChangeType;

            /** ChangeReplicasTrigger deprecated_replica. */
            public deprecated_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

            /** ChangeReplicasTrigger deprecated_updated_replicas. */
            public deprecated_updated_replicas: cockroach.roachpb.IReplicaDescriptor[];

            /** ChangeReplicasTrigger deprecated_next_replica_id. */
            public deprecated_next_replica_id: number;

            /** ChangeReplicasTrigger desc. */
            public desc?: (cockroach.roachpb.IRangeDescriptor|null);

            /** ChangeReplicasTrigger internal_added_replicas. */
            public internal_added_replicas: cockroach.roachpb.IReplicaDescriptor[];

            /** ChangeReplicasTrigger internal_removed_replicas. */
            public internal_removed_replicas: cockroach.roachpb.IReplicaDescriptor[];

            /**
             * Creates a new ChangeReplicasTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ChangeReplicasTrigger instance
             */
            public static create(properties?: cockroach.roachpb.IChangeReplicasTrigger): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Encodes the specified ChangeReplicasTrigger message. Does not implicitly {@link cockroach.roachpb.ChangeReplicasTrigger.verify|verify} messages.
             * @param message ChangeReplicasTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IChangeReplicasTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ChangeReplicasTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.ChangeReplicasTrigger.verify|verify} messages.
             * @param message ChangeReplicasTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IChangeReplicasTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ChangeReplicasTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ChangeReplicasTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Decodes a ChangeReplicasTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ChangeReplicasTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Verifies a ChangeReplicasTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ChangeReplicasTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ChangeReplicasTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Creates a plain object from a ChangeReplicasTrigger message. Also converts values to other types if specified.
             * @param message ChangeReplicasTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ChangeReplicasTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ChangeReplicasTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ModifiedSpanTrigger. */
        interface IModifiedSpanTrigger {

            /** ModifiedSpanTrigger system_config_span */
            system_config_span?: (boolean|null);

            /** ModifiedSpanTrigger node_liveness_span */
            node_liveness_span?: (cockroach.roachpb.ISpan|null);
        }

        /** Represents a ModifiedSpanTrigger. */
        class ModifiedSpanTrigger implements IModifiedSpanTrigger {

            /**
             * Constructs a new ModifiedSpanTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IModifiedSpanTrigger);

            /** ModifiedSpanTrigger system_config_span. */
            public system_config_span: boolean;

            /** ModifiedSpanTrigger node_liveness_span. */
            public node_liveness_span?: (cockroach.roachpb.ISpan|null);

            /**
             * Creates a new ModifiedSpanTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ModifiedSpanTrigger instance
             */
            public static create(properties?: cockroach.roachpb.IModifiedSpanTrigger): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Encodes the specified ModifiedSpanTrigger message. Does not implicitly {@link cockroach.roachpb.ModifiedSpanTrigger.verify|verify} messages.
             * @param message ModifiedSpanTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IModifiedSpanTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ModifiedSpanTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.ModifiedSpanTrigger.verify|verify} messages.
             * @param message ModifiedSpanTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IModifiedSpanTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ModifiedSpanTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ModifiedSpanTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Decodes a ModifiedSpanTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ModifiedSpanTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Verifies a ModifiedSpanTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ModifiedSpanTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ModifiedSpanTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Creates a plain object from a ModifiedSpanTrigger message. Also converts values to other types if specified.
             * @param message ModifiedSpanTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ModifiedSpanTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ModifiedSpanTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StickyBitTrigger. */
        interface IStickyBitTrigger {

            /** StickyBitTrigger sticky_bit */
            sticky_bit?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents a StickyBitTrigger. */
        class StickyBitTrigger implements IStickyBitTrigger {

            /**
             * Constructs a new StickyBitTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IStickyBitTrigger);

            /** StickyBitTrigger sticky_bit. */
            public sticky_bit?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new StickyBitTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StickyBitTrigger instance
             */
            public static create(properties?: cockroach.roachpb.IStickyBitTrigger): cockroach.roachpb.StickyBitTrigger;

            /**
             * Encodes the specified StickyBitTrigger message. Does not implicitly {@link cockroach.roachpb.StickyBitTrigger.verify|verify} messages.
             * @param message StickyBitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IStickyBitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StickyBitTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.StickyBitTrigger.verify|verify} messages.
             * @param message StickyBitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IStickyBitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StickyBitTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StickyBitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StickyBitTrigger;

            /**
             * Decodes a StickyBitTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StickyBitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StickyBitTrigger;

            /**
             * Verifies a StickyBitTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StickyBitTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StickyBitTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StickyBitTrigger;

            /**
             * Creates a plain object from a StickyBitTrigger message. Also converts values to other types if specified.
             * @param message StickyBitTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.StickyBitTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StickyBitTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an InternalCommitTrigger. */
        interface IInternalCommitTrigger {

            /** InternalCommitTrigger split_trigger */
            split_trigger?: (cockroach.roachpb.ISplitTrigger|null);

            /** InternalCommitTrigger merge_trigger */
            merge_trigger?: (cockroach.roachpb.IMergeTrigger|null);

            /** InternalCommitTrigger change_replicas_trigger */
            change_replicas_trigger?: (cockroach.roachpb.IChangeReplicasTrigger|null);

            /** InternalCommitTrigger modified_span_trigger */
            modified_span_trigger?: (cockroach.roachpb.IModifiedSpanTrigger|null);

            /** InternalCommitTrigger sticky_bit_trigger */
            sticky_bit_trigger?: (cockroach.roachpb.IStickyBitTrigger|null);
        }

        /** Represents an InternalCommitTrigger. */
        class InternalCommitTrigger implements IInternalCommitTrigger {

            /**
             * Constructs a new InternalCommitTrigger.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IInternalCommitTrigger);

            /** InternalCommitTrigger split_trigger. */
            public split_trigger?: (cockroach.roachpb.ISplitTrigger|null);

            /** InternalCommitTrigger merge_trigger. */
            public merge_trigger?: (cockroach.roachpb.IMergeTrigger|null);

            /** InternalCommitTrigger change_replicas_trigger. */
            public change_replicas_trigger?: (cockroach.roachpb.IChangeReplicasTrigger|null);

            /** InternalCommitTrigger modified_span_trigger. */
            public modified_span_trigger?: (cockroach.roachpb.IModifiedSpanTrigger|null);

            /** InternalCommitTrigger sticky_bit_trigger. */
            public sticky_bit_trigger?: (cockroach.roachpb.IStickyBitTrigger|null);

            /**
             * Creates a new InternalCommitTrigger instance using the specified properties.
             * @param [properties] Properties to set
             * @returns InternalCommitTrigger instance
             */
            public static create(properties?: cockroach.roachpb.IInternalCommitTrigger): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Encodes the specified InternalCommitTrigger message. Does not implicitly {@link cockroach.roachpb.InternalCommitTrigger.verify|verify} messages.
             * @param message InternalCommitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IInternalCommitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified InternalCommitTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.InternalCommitTrigger.verify|verify} messages.
             * @param message InternalCommitTrigger message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IInternalCommitTrigger, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an InternalCommitTrigger message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns InternalCommitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Decodes an InternalCommitTrigger message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns InternalCommitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Verifies an InternalCommitTrigger message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an InternalCommitTrigger message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns InternalCommitTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Creates a plain object from an InternalCommitTrigger message. Also converts values to other types if specified.
             * @param message InternalCommitTrigger
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.InternalCommitTrigger, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this InternalCommitTrigger to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** TransactionStatus enum. */
        enum TransactionStatus {
            PENDING = 0,
            STAGING = 3,
            COMMITTED = 1,
            ABORTED = 2
        }

        /** Properties of an ObservedTimestamp. */
        interface IObservedTimestamp {

            /** ObservedTimestamp node_id */
            node_id?: (number|null);

            /** ObservedTimestamp timestamp */
            timestamp?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents an ObservedTimestamp. */
        class ObservedTimestamp implements IObservedTimestamp {

            /**
             * Constructs a new ObservedTimestamp.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IObservedTimestamp);

            /** ObservedTimestamp node_id. */
            public node_id: number;

            /** ObservedTimestamp timestamp. */
            public timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new ObservedTimestamp instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ObservedTimestamp instance
             */
            public static create(properties?: cockroach.roachpb.IObservedTimestamp): cockroach.roachpb.ObservedTimestamp;

            /**
             * Encodes the specified ObservedTimestamp message. Does not implicitly {@link cockroach.roachpb.ObservedTimestamp.verify|verify} messages.
             * @param message ObservedTimestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IObservedTimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ObservedTimestamp message, length delimited. Does not implicitly {@link cockroach.roachpb.ObservedTimestamp.verify|verify} messages.
             * @param message ObservedTimestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IObservedTimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ObservedTimestamp message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ObservedTimestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ObservedTimestamp;

            /**
             * Decodes an ObservedTimestamp message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ObservedTimestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ObservedTimestamp;

            /**
             * Verifies an ObservedTimestamp message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an ObservedTimestamp message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ObservedTimestamp
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ObservedTimestamp;

            /**
             * Creates a plain object from an ObservedTimestamp message. Also converts values to other types if specified.
             * @param message ObservedTimestamp
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ObservedTimestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ObservedTimestamp to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Transaction. */
        interface ITransaction {

            /** Transaction meta */
            meta?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** Transaction name */
            name?: (string|null);

            /** Transaction status */
            status?: (cockroach.roachpb.TransactionStatus|null);

            /** Transaction last_heartbeat */
            last_heartbeat?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction deprecated_orig_timestamp */
            deprecated_orig_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction commit_timestamp_fixed */
            commit_timestamp_fixed?: (boolean|null);

            /** Transaction read_timestamp */
            read_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction max_timestamp */
            max_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction observed_timestamps */
            observed_timestamps?: (cockroach.roachpb.IObservedTimestamp[]|null);

            /** Transaction write_too_old */
            write_too_old?: (boolean|null);

            /** Transaction intent_spans */
            intent_spans?: (cockroach.roachpb.ISpan[]|null);

            /** Transaction in_flight_writes */
            in_flight_writes?: (cockroach.roachpb.ISequencedWrite[]|null);

            /** Transaction ignored_seqnums */
            ignored_seqnums?: (cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[]|null);
        }

        /** Represents a Transaction. */
        class Transaction implements ITransaction {

            /**
             * Constructs a new Transaction.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ITransaction);

            /** Transaction meta. */
            public meta?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** Transaction name. */
            public name: string;

            /** Transaction status. */
            public status: cockroach.roachpb.TransactionStatus;

            /** Transaction last_heartbeat. */
            public last_heartbeat?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction deprecated_orig_timestamp. */
            public deprecated_orig_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction commit_timestamp_fixed. */
            public commit_timestamp_fixed: boolean;

            /** Transaction read_timestamp. */
            public read_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction max_timestamp. */
            public max_timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** Transaction observed_timestamps. */
            public observed_timestamps: cockroach.roachpb.IObservedTimestamp[];

            /** Transaction write_too_old. */
            public write_too_old: boolean;

            /** Transaction intent_spans. */
            public intent_spans: cockroach.roachpb.ISpan[];

            /** Transaction in_flight_writes. */
            public in_flight_writes: cockroach.roachpb.ISequencedWrite[];

            /** Transaction ignored_seqnums. */
            public ignored_seqnums: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[];

            /**
             * Creates a new Transaction instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Transaction instance
             */
            public static create(properties?: cockroach.roachpb.ITransaction): cockroach.roachpb.Transaction;

            /**
             * Encodes the specified Transaction message. Does not implicitly {@link cockroach.roachpb.Transaction.verify|verify} messages.
             * @param message Transaction message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ITransaction, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Transaction message, length delimited. Does not implicitly {@link cockroach.roachpb.Transaction.verify|verify} messages.
             * @param message Transaction message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ITransaction, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Transaction message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Transaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Transaction;

            /**
             * Decodes a Transaction message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Transaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Transaction;

            /**
             * Verifies a Transaction message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Transaction
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Transaction;

            /**
             * Creates a plain object from a Transaction message. Also converts values to other types if specified.
             * @param message Transaction
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Transaction, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Transaction to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a TransactionRecord. */
        interface ITransactionRecord {

            /** TransactionRecord meta */
            meta?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** TransactionRecord status */
            status?: (cockroach.roachpb.TransactionStatus|null);

            /** TransactionRecord last_heartbeat */
            last_heartbeat?: (cockroach.util.hlc.ITimestamp|null);

            /** TransactionRecord intent_spans */
            intent_spans?: (cockroach.roachpb.ISpan[]|null);

            /** TransactionRecord in_flight_writes */
            in_flight_writes?: (cockroach.roachpb.ISequencedWrite[]|null);

            /** TransactionRecord ignored_seqnums */
            ignored_seqnums?: (cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[]|null);
        }

        /** Represents a TransactionRecord. */
        class TransactionRecord implements ITransactionRecord {

            /**
             * Constructs a new TransactionRecord.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ITransactionRecord);

            /** TransactionRecord meta. */
            public meta?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** TransactionRecord status. */
            public status: cockroach.roachpb.TransactionStatus;

            /** TransactionRecord last_heartbeat. */
            public last_heartbeat?: (cockroach.util.hlc.ITimestamp|null);

            /** TransactionRecord intent_spans. */
            public intent_spans: cockroach.roachpb.ISpan[];

            /** TransactionRecord in_flight_writes. */
            public in_flight_writes: cockroach.roachpb.ISequencedWrite[];

            /** TransactionRecord ignored_seqnums. */
            public ignored_seqnums: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[];

            /**
             * Creates a new TransactionRecord instance using the specified properties.
             * @param [properties] Properties to set
             * @returns TransactionRecord instance
             */
            public static create(properties?: cockroach.roachpb.ITransactionRecord): cockroach.roachpb.TransactionRecord;

            /**
             * Encodes the specified TransactionRecord message. Does not implicitly {@link cockroach.roachpb.TransactionRecord.verify|verify} messages.
             * @param message TransactionRecord message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ITransactionRecord, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified TransactionRecord message, length delimited. Does not implicitly {@link cockroach.roachpb.TransactionRecord.verify|verify} messages.
             * @param message TransactionRecord message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ITransactionRecord, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a TransactionRecord message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns TransactionRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.TransactionRecord;

            /**
             * Decodes a TransactionRecord message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns TransactionRecord
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.TransactionRecord;

            /**
             * Verifies a TransactionRecord message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a TransactionRecord message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns TransactionRecord
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.TransactionRecord;

            /**
             * Creates a plain object from a TransactionRecord message. Also converts values to other types if specified.
             * @param message TransactionRecord
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.TransactionRecord, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this TransactionRecord to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Intent. */
        interface IIntent {

            /** Intent span */
            span?: (cockroach.roachpb.ISpan|null);

            /** Intent txn */
            txn?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** Intent status */
            status?: (cockroach.roachpb.TransactionStatus|null);

            /** Intent ignored_seqnums */
            ignored_seqnums?: (cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[]|null);
        }

        /** Represents an Intent. */
        class Intent implements IIntent {

            /**
             * Constructs a new Intent.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IIntent);

            /** Intent span. */
            public span?: (cockroach.roachpb.ISpan|null);

            /** Intent txn. */
            public txn?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

            /** Intent status. */
            public status: cockroach.roachpb.TransactionStatus;

            /** Intent ignored_seqnums. */
            public ignored_seqnums: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange[];

            /**
             * Creates a new Intent instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Intent instance
             */
            public static create(properties?: cockroach.roachpb.IIntent): cockroach.roachpb.Intent;

            /**
             * Encodes the specified Intent message. Does not implicitly {@link cockroach.roachpb.Intent.verify|verify} messages.
             * @param message Intent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IIntent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Intent message, length delimited. Does not implicitly {@link cockroach.roachpb.Intent.verify|verify} messages.
             * @param message Intent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IIntent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Intent message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Intent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Intent;

            /**
             * Decodes an Intent message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Intent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Intent;

            /**
             * Verifies an Intent message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Intent message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Intent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Intent;

            /**
             * Creates a plain object from an Intent message. Also converts values to other types if specified.
             * @param message Intent
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Intent, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Intent to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a SequencedWrite. */
        interface ISequencedWrite {

            /** SequencedWrite key */
            key?: (Uint8Array|null);

            /** SequencedWrite sequence */
            sequence?: (number|null);
        }

        /** Represents a SequencedWrite. */
        class SequencedWrite implements ISequencedWrite {

            /**
             * Constructs a new SequencedWrite.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ISequencedWrite);

            /** SequencedWrite key. */
            public key: Uint8Array;

            /** SequencedWrite sequence. */
            public sequence: number;

            /**
             * Creates a new SequencedWrite instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SequencedWrite instance
             */
            public static create(properties?: cockroach.roachpb.ISequencedWrite): cockroach.roachpb.SequencedWrite;

            /**
             * Encodes the specified SequencedWrite message. Does not implicitly {@link cockroach.roachpb.SequencedWrite.verify|verify} messages.
             * @param message SequencedWrite message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ISequencedWrite, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SequencedWrite message, length delimited. Does not implicitly {@link cockroach.roachpb.SequencedWrite.verify|verify} messages.
             * @param message SequencedWrite message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ISequencedWrite, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SequencedWrite message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SequencedWrite
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.SequencedWrite;

            /**
             * Decodes a SequencedWrite message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SequencedWrite
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.SequencedWrite;

            /**
             * Verifies a SequencedWrite message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SequencedWrite message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SequencedWrite
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.SequencedWrite;

            /**
             * Creates a plain object from a SequencedWrite message. Also converts values to other types if specified.
             * @param message SequencedWrite
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.SequencedWrite, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SequencedWrite to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Lease. */
        interface ILease {

            /** Lease start */
            start?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease expiration */
            expiration?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease replica */
            replica?: (cockroach.roachpb.IReplicaDescriptor|null);

            /** Lease deprecated_start_stasis */
            deprecated_start_stasis?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease proposed_ts */
            proposed_ts?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease epoch */
            epoch?: (Long|null);

            /** Lease sequence */
            sequence?: (Long|null);
        }

        /** Represents a Lease. */
        class Lease implements ILease {

            /**
             * Constructs a new Lease.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ILease);

            /** Lease start. */
            public start?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease expiration. */
            public expiration?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease replica. */
            public replica?: (cockroach.roachpb.IReplicaDescriptor|null);

            /** Lease deprecated_start_stasis. */
            public deprecated_start_stasis?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease proposed_ts. */
            public proposed_ts?: (cockroach.util.hlc.ITimestamp|null);

            /** Lease epoch. */
            public epoch: Long;

            /** Lease sequence. */
            public sequence: Long;

            /**
             * Creates a new Lease instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Lease instance
             */
            public static create(properties?: cockroach.roachpb.ILease): cockroach.roachpb.Lease;

            /**
             * Encodes the specified Lease message. Does not implicitly {@link cockroach.roachpb.Lease.verify|verify} messages.
             * @param message Lease message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ILease, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Lease message, length delimited. Does not implicitly {@link cockroach.roachpb.Lease.verify|verify} messages.
             * @param message Lease message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ILease, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Lease message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Lease
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Lease;

            /**
             * Decodes a Lease message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Lease
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Lease;

            /**
             * Verifies a Lease message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Lease message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Lease
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Lease;

            /**
             * Creates a plain object from a Lease message. Also converts values to other types if specified.
             * @param message Lease
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Lease, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Lease to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an AbortSpanEntry. */
        interface IAbortSpanEntry {

            /** AbortSpanEntry key */
            key?: (Uint8Array|null);

            /** AbortSpanEntry timestamp */
            timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** AbortSpanEntry priority */
            priority?: (number|null);
        }

        /** Represents an AbortSpanEntry. */
        class AbortSpanEntry implements IAbortSpanEntry {

            /**
             * Constructs a new AbortSpanEntry.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IAbortSpanEntry);

            /** AbortSpanEntry key. */
            public key: Uint8Array;

            /** AbortSpanEntry timestamp. */
            public timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** AbortSpanEntry priority. */
            public priority: number;

            /**
             * Creates a new AbortSpanEntry instance using the specified properties.
             * @param [properties] Properties to set
             * @returns AbortSpanEntry instance
             */
            public static create(properties?: cockroach.roachpb.IAbortSpanEntry): cockroach.roachpb.AbortSpanEntry;

            /**
             * Encodes the specified AbortSpanEntry message. Does not implicitly {@link cockroach.roachpb.AbortSpanEntry.verify|verify} messages.
             * @param message AbortSpanEntry message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IAbortSpanEntry, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AbortSpanEntry message, length delimited. Does not implicitly {@link cockroach.roachpb.AbortSpanEntry.verify|verify} messages.
             * @param message AbortSpanEntry message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IAbortSpanEntry, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AbortSpanEntry message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns AbortSpanEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.AbortSpanEntry;

            /**
             * Decodes an AbortSpanEntry message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns AbortSpanEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.AbortSpanEntry;

            /**
             * Verifies an AbortSpanEntry message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an AbortSpanEntry message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns AbortSpanEntry
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.AbortSpanEntry;

            /**
             * Creates a plain object from an AbortSpanEntry message. Also converts values to other types if specified.
             * @param message AbortSpanEntry
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.AbortSpanEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this AbortSpanEntry to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a LeafTxnInputState. */
        interface ILeafTxnInputState {

            /** LeafTxnInputState txn */
            txn?: (cockroach.roachpb.ITransaction|null);

            /** LeafTxnInputState refresh_invalid */
            refresh_invalid?: (boolean|null);

            /** LeafTxnInputState in_flight_writes */
            in_flight_writes?: (cockroach.roachpb.ISequencedWrite[]|null);

            /** LeafTxnInputState stepping_mode_enabled */
            stepping_mode_enabled?: (boolean|null);

            /** LeafTxnInputState read_seq_num */
            read_seq_num?: (number|null);
        }

        /** Represents a LeafTxnInputState. */
        class LeafTxnInputState implements ILeafTxnInputState {

            /**
             * Constructs a new LeafTxnInputState.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ILeafTxnInputState);

            /** LeafTxnInputState txn. */
            public txn?: (cockroach.roachpb.ITransaction|null);

            /** LeafTxnInputState refresh_invalid. */
            public refresh_invalid: boolean;

            /** LeafTxnInputState in_flight_writes. */
            public in_flight_writes: cockroach.roachpb.ISequencedWrite[];

            /** LeafTxnInputState stepping_mode_enabled. */
            public stepping_mode_enabled: boolean;

            /** LeafTxnInputState read_seq_num. */
            public read_seq_num: number;

            /**
             * Creates a new LeafTxnInputState instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LeafTxnInputState instance
             */
            public static create(properties?: cockroach.roachpb.ILeafTxnInputState): cockroach.roachpb.LeafTxnInputState;

            /**
             * Encodes the specified LeafTxnInputState message. Does not implicitly {@link cockroach.roachpb.LeafTxnInputState.verify|verify} messages.
             * @param message LeafTxnInputState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ILeafTxnInputState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LeafTxnInputState message, length delimited. Does not implicitly {@link cockroach.roachpb.LeafTxnInputState.verify|verify} messages.
             * @param message LeafTxnInputState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ILeafTxnInputState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LeafTxnInputState message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LeafTxnInputState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.LeafTxnInputState;

            /**
             * Decodes a LeafTxnInputState message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LeafTxnInputState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.LeafTxnInputState;

            /**
             * Verifies a LeafTxnInputState message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LeafTxnInputState message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LeafTxnInputState
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.LeafTxnInputState;

            /**
             * Creates a plain object from a LeafTxnInputState message. Also converts values to other types if specified.
             * @param message LeafTxnInputState
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.LeafTxnInputState, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LeafTxnInputState to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a LeafTxnFinalState. */
        interface ILeafTxnFinalState {

            /** LeafTxnFinalState txn */
            txn?: (cockroach.roachpb.ITransaction|null);

            /** LeafTxnFinalState deprecated_command_count */
            deprecated_command_count?: (number|null);

            /** LeafTxnFinalState refresh_spans */
            refresh_spans?: (cockroach.roachpb.ISpan[]|null);

            /** LeafTxnFinalState refresh_invalid */
            refresh_invalid?: (boolean|null);
        }

        /** Represents a LeafTxnFinalState. */
        class LeafTxnFinalState implements ILeafTxnFinalState {

            /**
             * Constructs a new LeafTxnFinalState.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ILeafTxnFinalState);

            /** LeafTxnFinalState txn. */
            public txn?: (cockroach.roachpb.ITransaction|null);

            /** LeafTxnFinalState deprecated_command_count. */
            public deprecated_command_count: number;

            /** LeafTxnFinalState refresh_spans. */
            public refresh_spans: cockroach.roachpb.ISpan[];

            /** LeafTxnFinalState refresh_invalid. */
            public refresh_invalid: boolean;

            /**
             * Creates a new LeafTxnFinalState instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LeafTxnFinalState instance
             */
            public static create(properties?: cockroach.roachpb.ILeafTxnFinalState): cockroach.roachpb.LeafTxnFinalState;

            /**
             * Encodes the specified LeafTxnFinalState message. Does not implicitly {@link cockroach.roachpb.LeafTxnFinalState.verify|verify} messages.
             * @param message LeafTxnFinalState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ILeafTxnFinalState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LeafTxnFinalState message, length delimited. Does not implicitly {@link cockroach.roachpb.LeafTxnFinalState.verify|verify} messages.
             * @param message LeafTxnFinalState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ILeafTxnFinalState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LeafTxnFinalState message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LeafTxnFinalState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.LeafTxnFinalState;

            /**
             * Decodes a LeafTxnFinalState message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LeafTxnFinalState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.LeafTxnFinalState;

            /**
             * Verifies a LeafTxnFinalState message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LeafTxnFinalState message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LeafTxnFinalState
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.LeafTxnFinalState;

            /**
             * Creates a plain object from a LeafTxnFinalState message. Also converts values to other types if specified.
             * @param message LeafTxnFinalState
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.LeafTxnFinalState, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LeafTxnFinalState to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Attributes. */
        interface IAttributes {

            /** Attributes attrs */
            attrs?: (string[]|null);
        }

        /** Represents an Attributes. */
        class Attributes implements IAttributes {

            /**
             * Constructs a new Attributes.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IAttributes);

            /** Attributes attrs. */
            public attrs: string[];

            /**
             * Creates a new Attributes instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Attributes instance
             */
            public static create(properties?: cockroach.roachpb.IAttributes): cockroach.roachpb.Attributes;

            /**
             * Encodes the specified Attributes message. Does not implicitly {@link cockroach.roachpb.Attributes.verify|verify} messages.
             * @param message Attributes message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IAttributes, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Attributes message, length delimited. Does not implicitly {@link cockroach.roachpb.Attributes.verify|verify} messages.
             * @param message Attributes message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IAttributes, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Attributes message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Attributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Attributes;

            /**
             * Decodes an Attributes message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Attributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Attributes;

            /**
             * Verifies an Attributes message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Attributes message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Attributes
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Attributes;

            /**
             * Creates a plain object from an Attributes message. Also converts values to other types if specified.
             * @param message Attributes
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Attributes, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Attributes to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ReplicationTarget. */
        interface IReplicationTarget {

            /** ReplicationTarget node_id */
            node_id?: (number|null);

            /** ReplicationTarget store_id */
            store_id?: (number|null);
        }

        /** Represents a ReplicationTarget. */
        class ReplicationTarget implements IReplicationTarget {

            /**
             * Constructs a new ReplicationTarget.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IReplicationTarget);

            /** ReplicationTarget node_id. */
            public node_id: number;

            /** ReplicationTarget store_id. */
            public store_id: number;

            /**
             * Creates a new ReplicationTarget instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ReplicationTarget instance
             */
            public static create(properties?: cockroach.roachpb.IReplicationTarget): cockroach.roachpb.ReplicationTarget;

            /**
             * Encodes the specified ReplicationTarget message. Does not implicitly {@link cockroach.roachpb.ReplicationTarget.verify|verify} messages.
             * @param message ReplicationTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IReplicationTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicationTarget message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicationTarget.verify|verify} messages.
             * @param message ReplicationTarget message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IReplicationTarget, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicationTarget message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ReplicationTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicationTarget;

            /**
             * Decodes a ReplicationTarget message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ReplicationTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicationTarget;

            /**
             * Verifies a ReplicationTarget message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ReplicationTarget message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ReplicationTarget
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicationTarget;

            /**
             * Creates a plain object from a ReplicationTarget message. Also converts values to other types if specified.
             * @param message ReplicationTarget
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicationTarget, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicationTarget to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** ReplicaType enum. */
        enum ReplicaType {
            VOTER_FULL = 0,
            VOTER_INCOMING = 2,
            VOTER_OUTGOING = 3,
            VOTER_DEMOTING = 4,
            LEARNER = 1
        }

        /** Properties of a ReplicaDescriptor. */
        interface IReplicaDescriptor {

            /** ReplicaDescriptor node_id */
            node_id?: (number|null);

            /** ReplicaDescriptor store_id */
            store_id?: (number|null);

            /** ReplicaDescriptor replica_id */
            replica_id?: (number|null);

            /** ReplicaDescriptor type */
            type?: (cockroach.roachpb.ReplicaType|null);
        }

        /** Represents a ReplicaDescriptor. */
        class ReplicaDescriptor implements IReplicaDescriptor {

            /**
             * Constructs a new ReplicaDescriptor.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IReplicaDescriptor);

            /** ReplicaDescriptor node_id. */
            public node_id: number;

            /** ReplicaDescriptor store_id. */
            public store_id: number;

            /** ReplicaDescriptor replica_id. */
            public replica_id: number;

            /** ReplicaDescriptor type. */
            public type: cockroach.roachpb.ReplicaType;

            /**
             * Creates a new ReplicaDescriptor instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ReplicaDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.IReplicaDescriptor): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Encodes the specified ReplicaDescriptor message. Does not implicitly {@link cockroach.roachpb.ReplicaDescriptor.verify|verify} messages.
             * @param message ReplicaDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IReplicaDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicaDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicaDescriptor.verify|verify} messages.
             * @param message ReplicaDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IReplicaDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicaDescriptor message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ReplicaDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Decodes a ReplicaDescriptor message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ReplicaDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Verifies a ReplicaDescriptor message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ReplicaDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ReplicaDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Creates a plain object from a ReplicaDescriptor message. Also converts values to other types if specified.
             * @param message ReplicaDescriptor
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicaDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicaDescriptor to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ReplicaIdent. */
        interface IReplicaIdent {

            /** ReplicaIdent range_id */
            range_id?: (Long|null);

            /** ReplicaIdent replica */
            replica?: (cockroach.roachpb.IReplicaDescriptor|null);
        }

        /** Represents a ReplicaIdent. */
        class ReplicaIdent implements IReplicaIdent {

            /**
             * Constructs a new ReplicaIdent.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IReplicaIdent);

            /** ReplicaIdent range_id. */
            public range_id: Long;

            /** ReplicaIdent replica. */
            public replica?: (cockroach.roachpb.IReplicaDescriptor|null);

            /**
             * Creates a new ReplicaIdent instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ReplicaIdent instance
             */
            public static create(properties?: cockroach.roachpb.IReplicaIdent): cockroach.roachpb.ReplicaIdent;

            /**
             * Encodes the specified ReplicaIdent message. Does not implicitly {@link cockroach.roachpb.ReplicaIdent.verify|verify} messages.
             * @param message ReplicaIdent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IReplicaIdent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicaIdent message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicaIdent.verify|verify} messages.
             * @param message ReplicaIdent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IReplicaIdent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicaIdent message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ReplicaIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicaIdent;

            /**
             * Decodes a ReplicaIdent message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ReplicaIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicaIdent;

            /**
             * Verifies a ReplicaIdent message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ReplicaIdent message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ReplicaIdent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicaIdent;

            /**
             * Creates a plain object from a ReplicaIdent message. Also converts values to other types if specified.
             * @param message ReplicaIdent
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicaIdent, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicaIdent to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a RangeDescriptor. */
        interface IRangeDescriptor {

            /** RangeDescriptor range_id */
            range_id?: (Long|null);

            /** RangeDescriptor start_key */
            start_key?: (Uint8Array|null);

            /** RangeDescriptor end_key */
            end_key?: (Uint8Array|null);

            /** RangeDescriptor internal_replicas */
            internal_replicas?: (cockroach.roachpb.IReplicaDescriptor[]|null);

            /** RangeDescriptor next_replica_id */
            next_replica_id?: (number|null);

            /** RangeDescriptor generation */
            generation?: (Long|null);

            /** RangeDescriptor generation_comparable */
            generation_comparable?: (boolean|null);

            /** RangeDescriptor sticky_bit */
            sticky_bit?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents a RangeDescriptor. */
        class RangeDescriptor implements IRangeDescriptor {

            /**
             * Constructs a new RangeDescriptor.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IRangeDescriptor);

            /** RangeDescriptor range_id. */
            public range_id: Long;

            /** RangeDescriptor start_key. */
            public start_key: Uint8Array;

            /** RangeDescriptor end_key. */
            public end_key: Uint8Array;

            /** RangeDescriptor internal_replicas. */
            public internal_replicas: cockroach.roachpb.IReplicaDescriptor[];

            /** RangeDescriptor next_replica_id. */
            public next_replica_id: number;

            /** RangeDescriptor generation. */
            public generation: Long;

            /** RangeDescriptor generation_comparable. */
            public generation_comparable: boolean;

            /** RangeDescriptor sticky_bit. */
            public sticky_bit?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new RangeDescriptor instance using the specified properties.
             * @param [properties] Properties to set
             * @returns RangeDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.IRangeDescriptor): cockroach.roachpb.RangeDescriptor;

            /**
             * Encodes the specified RangeDescriptor message. Does not implicitly {@link cockroach.roachpb.RangeDescriptor.verify|verify} messages.
             * @param message RangeDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IRangeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RangeDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.RangeDescriptor.verify|verify} messages.
             * @param message RangeDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IRangeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RangeDescriptor message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns RangeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RangeDescriptor;

            /**
             * Decodes a RangeDescriptor message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns RangeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RangeDescriptor;

            /**
             * Verifies a RangeDescriptor message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a RangeDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns RangeDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RangeDescriptor;

            /**
             * Creates a plain object from a RangeDescriptor message. Also converts values to other types if specified.
             * @param message RangeDescriptor
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.RangeDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this RangeDescriptor to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Percentiles. */
        interface IPercentiles {

            /** Percentiles p10 */
            p10?: (number|null);

            /** Percentiles p25 */
            p25?: (number|null);

            /** Percentiles p50 */
            p50?: (number|null);

            /** Percentiles p75 */
            p75?: (number|null);

            /** Percentiles p90 */
            p90?: (number|null);

            /** Percentiles pMax */
            pMax?: (number|null);
        }

        /** Represents a Percentiles. */
        class Percentiles implements IPercentiles {

            /**
             * Constructs a new Percentiles.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IPercentiles);

            /** Percentiles p10. */
            public p10: number;

            /** Percentiles p25. */
            public p25: number;

            /** Percentiles p50. */
            public p50: number;

            /** Percentiles p75. */
            public p75: number;

            /** Percentiles p90. */
            public p90: number;

            /** Percentiles pMax. */
            public pMax: number;

            /**
             * Creates a new Percentiles instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Percentiles instance
             */
            public static create(properties?: cockroach.roachpb.IPercentiles): cockroach.roachpb.Percentiles;

            /**
             * Encodes the specified Percentiles message. Does not implicitly {@link cockroach.roachpb.Percentiles.verify|verify} messages.
             * @param message Percentiles message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IPercentiles, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Percentiles message, length delimited. Does not implicitly {@link cockroach.roachpb.Percentiles.verify|verify} messages.
             * @param message Percentiles message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IPercentiles, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Percentiles message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Percentiles
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Percentiles;

            /**
             * Decodes a Percentiles message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Percentiles
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Percentiles;

            /**
             * Verifies a Percentiles message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Percentiles message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Percentiles
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Percentiles;

            /**
             * Creates a plain object from a Percentiles message. Also converts values to other types if specified.
             * @param message Percentiles
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Percentiles, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Percentiles to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StoreCapacity. */
        interface IStoreCapacity {

            /** StoreCapacity capacity */
            capacity?: (Long|null);

            /** StoreCapacity available */
            available?: (Long|null);

            /** StoreCapacity used */
            used?: (Long|null);

            /** StoreCapacity logical_bytes */
            logical_bytes?: (Long|null);

            /** StoreCapacity range_count */
            range_count?: (number|null);

            /** StoreCapacity lease_count */
            lease_count?: (number|null);

            /** StoreCapacity queries_per_second */
            queries_per_second?: (number|null);

            /** StoreCapacity writes_per_second */
            writes_per_second?: (number|null);

            /** StoreCapacity bytes_per_replica */
            bytes_per_replica?: (cockroach.roachpb.IPercentiles|null);

            /** StoreCapacity writes_per_replica */
            writes_per_replica?: (cockroach.roachpb.IPercentiles|null);
        }

        /** Represents a StoreCapacity. */
        class StoreCapacity implements IStoreCapacity {

            /**
             * Constructs a new StoreCapacity.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IStoreCapacity);

            /** StoreCapacity capacity. */
            public capacity: Long;

            /** StoreCapacity available. */
            public available: Long;

            /** StoreCapacity used. */
            public used: Long;

            /** StoreCapacity logical_bytes. */
            public logical_bytes: Long;

            /** StoreCapacity range_count. */
            public range_count: number;

            /** StoreCapacity lease_count. */
            public lease_count: number;

            /** StoreCapacity queries_per_second. */
            public queries_per_second: number;

            /** StoreCapacity writes_per_second. */
            public writes_per_second: number;

            /** StoreCapacity bytes_per_replica. */
            public bytes_per_replica?: (cockroach.roachpb.IPercentiles|null);

            /** StoreCapacity writes_per_replica. */
            public writes_per_replica?: (cockroach.roachpb.IPercentiles|null);

            /**
             * Creates a new StoreCapacity instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StoreCapacity instance
             */
            public static create(properties?: cockroach.roachpb.IStoreCapacity): cockroach.roachpb.StoreCapacity;

            /**
             * Encodes the specified StoreCapacity message. Does not implicitly {@link cockroach.roachpb.StoreCapacity.verify|verify} messages.
             * @param message StoreCapacity message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IStoreCapacity, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreCapacity message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreCapacity.verify|verify} messages.
             * @param message StoreCapacity message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IStoreCapacity, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreCapacity message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StoreCapacity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreCapacity;

            /**
             * Decodes a StoreCapacity message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StoreCapacity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreCapacity;

            /**
             * Verifies a StoreCapacity message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StoreCapacity message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StoreCapacity
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreCapacity;

            /**
             * Creates a plain object from a StoreCapacity message. Also converts values to other types if specified.
             * @param message StoreCapacity
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreCapacity, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreCapacity to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a NodeDescriptor. */
        interface INodeDescriptor {

            /** NodeDescriptor node_id */
            node_id?: (number|null);

            /** NodeDescriptor address */
            address?: (cockroach.util.IUnresolvedAddr|null);

            /** NodeDescriptor attrs */
            attrs?: (cockroach.roachpb.IAttributes|null);

            /** NodeDescriptor locality */
            locality?: (cockroach.roachpb.ILocality|null);

            /** NodeDescriptor ServerVersion */
            ServerVersion?: (cockroach.roachpb.IVersion|null);

            /** NodeDescriptor build_tag */
            build_tag?: (string|null);

            /** NodeDescriptor started_at */
            started_at?: (Long|null);

            /** NodeDescriptor locality_address */
            locality_address?: (cockroach.roachpb.ILocalityAddress[]|null);

            /** NodeDescriptor cluster_name */
            cluster_name?: (string|null);

            /** NodeDescriptor sql_address */
            sql_address?: (cockroach.util.IUnresolvedAddr|null);
        }

        /** Represents a NodeDescriptor. */
        class NodeDescriptor implements INodeDescriptor {

            /**
             * Constructs a new NodeDescriptor.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.INodeDescriptor);

            /** NodeDescriptor node_id. */
            public node_id: number;

            /** NodeDescriptor address. */
            public address?: (cockroach.util.IUnresolvedAddr|null);

            /** NodeDescriptor attrs. */
            public attrs?: (cockroach.roachpb.IAttributes|null);

            /** NodeDescriptor locality. */
            public locality?: (cockroach.roachpb.ILocality|null);

            /** NodeDescriptor ServerVersion. */
            public ServerVersion?: (cockroach.roachpb.IVersion|null);

            /** NodeDescriptor build_tag. */
            public build_tag: string;

            /** NodeDescriptor started_at. */
            public started_at: Long;

            /** NodeDescriptor locality_address. */
            public locality_address: cockroach.roachpb.ILocalityAddress[];

            /** NodeDescriptor cluster_name. */
            public cluster_name: string;

            /** NodeDescriptor sql_address. */
            public sql_address?: (cockroach.util.IUnresolvedAddr|null);

            /**
             * Creates a new NodeDescriptor instance using the specified properties.
             * @param [properties] Properties to set
             * @returns NodeDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.INodeDescriptor): cockroach.roachpb.NodeDescriptor;

            /**
             * Encodes the specified NodeDescriptor message. Does not implicitly {@link cockroach.roachpb.NodeDescriptor.verify|verify} messages.
             * @param message NodeDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.INodeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NodeDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.NodeDescriptor.verify|verify} messages.
             * @param message NodeDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.INodeDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NodeDescriptor message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns NodeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.NodeDescriptor;

            /**
             * Decodes a NodeDescriptor message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns NodeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.NodeDescriptor;

            /**
             * Verifies a NodeDescriptor message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a NodeDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns NodeDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.NodeDescriptor;

            /**
             * Creates a plain object from a NodeDescriptor message. Also converts values to other types if specified.
             * @param message NodeDescriptor
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.NodeDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this NodeDescriptor to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a LocalityAddress. */
        interface ILocalityAddress {

            /** LocalityAddress address */
            address?: (cockroach.util.IUnresolvedAddr|null);

            /** LocalityAddress locality_tier */
            locality_tier?: (cockroach.roachpb.ITier|null);
        }

        /** Represents a LocalityAddress. */
        class LocalityAddress implements ILocalityAddress {

            /**
             * Constructs a new LocalityAddress.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ILocalityAddress);

            /** LocalityAddress address. */
            public address?: (cockroach.util.IUnresolvedAddr|null);

            /** LocalityAddress locality_tier. */
            public locality_tier?: (cockroach.roachpb.ITier|null);

            /**
             * Creates a new LocalityAddress instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LocalityAddress instance
             */
            public static create(properties?: cockroach.roachpb.ILocalityAddress): cockroach.roachpb.LocalityAddress;

            /**
             * Encodes the specified LocalityAddress message. Does not implicitly {@link cockroach.roachpb.LocalityAddress.verify|verify} messages.
             * @param message LocalityAddress message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ILocalityAddress, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LocalityAddress message, length delimited. Does not implicitly {@link cockroach.roachpb.LocalityAddress.verify|verify} messages.
             * @param message LocalityAddress message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ILocalityAddress, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LocalityAddress message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LocalityAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.LocalityAddress;

            /**
             * Decodes a LocalityAddress message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LocalityAddress
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.LocalityAddress;

            /**
             * Verifies a LocalityAddress message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LocalityAddress message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LocalityAddress
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.LocalityAddress;

            /**
             * Creates a plain object from a LocalityAddress message. Also converts values to other types if specified.
             * @param message LocalityAddress
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.LocalityAddress, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LocalityAddress to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StoreDescriptor. */
        interface IStoreDescriptor {

            /** StoreDescriptor store_id */
            store_id?: (number|null);

            /** StoreDescriptor attrs */
            attrs?: (cockroach.roachpb.IAttributes|null);

            /** StoreDescriptor node */
            node?: (cockroach.roachpb.INodeDescriptor|null);

            /** StoreDescriptor capacity */
            capacity?: (cockroach.roachpb.IStoreCapacity|null);
        }

        /** Represents a StoreDescriptor. */
        class StoreDescriptor implements IStoreDescriptor {

            /**
             * Constructs a new StoreDescriptor.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IStoreDescriptor);

            /** StoreDescriptor store_id. */
            public store_id: number;

            /** StoreDescriptor attrs. */
            public attrs?: (cockroach.roachpb.IAttributes|null);

            /** StoreDescriptor node. */
            public node?: (cockroach.roachpb.INodeDescriptor|null);

            /** StoreDescriptor capacity. */
            public capacity?: (cockroach.roachpb.IStoreCapacity|null);

            /**
             * Creates a new StoreDescriptor instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StoreDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.IStoreDescriptor): cockroach.roachpb.StoreDescriptor;

            /**
             * Encodes the specified StoreDescriptor message. Does not implicitly {@link cockroach.roachpb.StoreDescriptor.verify|verify} messages.
             * @param message StoreDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IStoreDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreDescriptor.verify|verify} messages.
             * @param message StoreDescriptor message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IStoreDescriptor, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreDescriptor message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StoreDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreDescriptor;

            /**
             * Decodes a StoreDescriptor message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StoreDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreDescriptor;

            /**
             * Verifies a StoreDescriptor message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StoreDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StoreDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreDescriptor;

            /**
             * Creates a plain object from a StoreDescriptor message. Also converts values to other types if specified.
             * @param message StoreDescriptor
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreDescriptor, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreDescriptor to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a StoreDeadReplicas. */
        interface IStoreDeadReplicas {

            /** StoreDeadReplicas store_id */
            store_id?: (number|null);

            /** StoreDeadReplicas replicas */
            replicas?: (cockroach.roachpb.IReplicaIdent[]|null);
        }

        /** Represents a StoreDeadReplicas. */
        class StoreDeadReplicas implements IStoreDeadReplicas {

            /**
             * Constructs a new StoreDeadReplicas.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IStoreDeadReplicas);

            /** StoreDeadReplicas store_id. */
            public store_id: number;

            /** StoreDeadReplicas replicas. */
            public replicas: cockroach.roachpb.IReplicaIdent[];

            /**
             * Creates a new StoreDeadReplicas instance using the specified properties.
             * @param [properties] Properties to set
             * @returns StoreDeadReplicas instance
             */
            public static create(properties?: cockroach.roachpb.IStoreDeadReplicas): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Encodes the specified StoreDeadReplicas message. Does not implicitly {@link cockroach.roachpb.StoreDeadReplicas.verify|verify} messages.
             * @param message StoreDeadReplicas message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IStoreDeadReplicas, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreDeadReplicas message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreDeadReplicas.verify|verify} messages.
             * @param message StoreDeadReplicas message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IStoreDeadReplicas, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreDeadReplicas message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns StoreDeadReplicas
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Decodes a StoreDeadReplicas message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns StoreDeadReplicas
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Verifies a StoreDeadReplicas message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a StoreDeadReplicas message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns StoreDeadReplicas
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Creates a plain object from a StoreDeadReplicas message. Also converts values to other types if specified.
             * @param message StoreDeadReplicas
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreDeadReplicas, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreDeadReplicas to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Locality. */
        interface ILocality {

            /** Locality tiers */
            tiers?: (cockroach.roachpb.ITier[]|null);
        }

        /** Represents a Locality. */
        class Locality implements ILocality {

            /**
             * Constructs a new Locality.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ILocality);

            /** Locality tiers. */
            public tiers: cockroach.roachpb.ITier[];

            /**
             * Creates a new Locality instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Locality instance
             */
            public static create(properties?: cockroach.roachpb.ILocality): cockroach.roachpb.Locality;

            /**
             * Encodes the specified Locality message. Does not implicitly {@link cockroach.roachpb.Locality.verify|verify} messages.
             * @param message Locality message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ILocality, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Locality message, length delimited. Does not implicitly {@link cockroach.roachpb.Locality.verify|verify} messages.
             * @param message Locality message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ILocality, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Locality message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Locality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Locality;

            /**
             * Decodes a Locality message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Locality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Locality;

            /**
             * Verifies a Locality message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Locality message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Locality
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Locality;

            /**
             * Creates a plain object from a Locality message. Also converts values to other types if specified.
             * @param message Locality
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Locality, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Locality to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Tier. */
        interface ITier {

            /** Tier key */
            key?: (string|null);

            /** Tier value */
            value?: (string|null);
        }

        /** Represents a Tier. */
        class Tier implements ITier {

            /**
             * Constructs a new Tier.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ITier);

            /** Tier key. */
            public key: string;

            /** Tier value. */
            public value: string;

            /**
             * Creates a new Tier instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Tier instance
             */
            public static create(properties?: cockroach.roachpb.ITier): cockroach.roachpb.Tier;

            /**
             * Encodes the specified Tier message. Does not implicitly {@link cockroach.roachpb.Tier.verify|verify} messages.
             * @param message Tier message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ITier, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Tier message, length delimited. Does not implicitly {@link cockroach.roachpb.Tier.verify|verify} messages.
             * @param message Tier message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ITier, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Tier message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Tier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Tier;

            /**
             * Decodes a Tier message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Tier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Tier;

            /**
             * Verifies a Tier message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Tier message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Tier
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Tier;

            /**
             * Creates a plain object from a Tier message. Also converts values to other types if specified.
             * @param message Tier
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Tier, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Tier to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Version. */
        interface IVersion {

            /** Version major_val */
            major_val?: (number|null);

            /** Version minor_val */
            minor_val?: (number|null);

            /** Version patch */
            patch?: (number|null);

            /** Version unstable */
            unstable?: (number|null);
        }

        /** Represents a Version. */
        class Version implements IVersion {

            /**
             * Constructs a new Version.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IVersion);

            /** Version major_val. */
            public major_val: number;

            /** Version minor_val. */
            public minor_val: number;

            /** Version patch. */
            public patch: number;

            /** Version unstable. */
            public unstable: number;

            /**
             * Creates a new Version instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Version instance
             */
            public static create(properties?: cockroach.roachpb.IVersion): cockroach.roachpb.Version;

            /**
             * Encodes the specified Version message. Does not implicitly {@link cockroach.roachpb.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Version message, length delimited. Does not implicitly {@link cockroach.roachpb.Version.verify|verify} messages.
             * @param message Version message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IVersion, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Version message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Version;

            /**
             * Decodes a Version message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Version;

            /**
             * Verifies a Version message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Version
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Version;

            /**
             * Creates a plain object from a Version message. Also converts values to other types if specified.
             * @param message Version
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.Version, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Version to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a IOFileFormat. */
        interface IIOFileFormat {

            /** IOFileFormat format */
            format?: (cockroach.roachpb.IOFileFormat.FileFormat|null);

            /** IOFileFormat csv */
            csv?: (cockroach.roachpb.ICSVOptions|null);

            /** IOFileFormat mysql_out */
            mysql_out?: (cockroach.roachpb.IMySQLOutfileOptions|null);

            /** IOFileFormat pg_copy */
            pg_copy?: (cockroach.roachpb.IPgCopyOptions|null);

            /** IOFileFormat pg_dump */
            pg_dump?: (cockroach.roachpb.IPgDumpOptions|null);

            /** IOFileFormat avro */
            avro?: (cockroach.roachpb.IAvroOptions|null);

            /** IOFileFormat compression */
            compression?: (cockroach.roachpb.IOFileFormat.Compression|null);

            /** IOFileFormat save_rejected */
            save_rejected?: (boolean|null);
        }

        /** Represents a IOFileFormat. */
        class IOFileFormat implements IIOFileFormat {

            /**
             * Constructs a new IOFileFormat.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IIOFileFormat);

            /** IOFileFormat format. */
            public format: cockroach.roachpb.IOFileFormat.FileFormat;

            /** IOFileFormat csv. */
            public csv?: (cockroach.roachpb.ICSVOptions|null);

            /** IOFileFormat mysql_out. */
            public mysql_out?: (cockroach.roachpb.IMySQLOutfileOptions|null);

            /** IOFileFormat pg_copy. */
            public pg_copy?: (cockroach.roachpb.IPgCopyOptions|null);

            /** IOFileFormat pg_dump. */
            public pg_dump?: (cockroach.roachpb.IPgDumpOptions|null);

            /** IOFileFormat avro. */
            public avro?: (cockroach.roachpb.IAvroOptions|null);

            /** IOFileFormat compression. */
            public compression: cockroach.roachpb.IOFileFormat.Compression;

            /** IOFileFormat save_rejected. */
            public save_rejected: boolean;

            /**
             * Creates a new IOFileFormat instance using the specified properties.
             * @param [properties] Properties to set
             * @returns IOFileFormat instance
             */
            public static create(properties?: cockroach.roachpb.IIOFileFormat): cockroach.roachpb.IOFileFormat;

            /**
             * Encodes the specified IOFileFormat message. Does not implicitly {@link cockroach.roachpb.IOFileFormat.verify|verify} messages.
             * @param message IOFileFormat message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IIOFileFormat, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified IOFileFormat message, length delimited. Does not implicitly {@link cockroach.roachpb.IOFileFormat.verify|verify} messages.
             * @param message IOFileFormat message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IIOFileFormat, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a IOFileFormat message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns IOFileFormat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.IOFileFormat;

            /**
             * Decodes a IOFileFormat message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns IOFileFormat
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.IOFileFormat;

            /**
             * Verifies a IOFileFormat message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a IOFileFormat message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns IOFileFormat
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.IOFileFormat;

            /**
             * Creates a plain object from a IOFileFormat message. Also converts values to other types if specified.
             * @param message IOFileFormat
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.IOFileFormat, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this IOFileFormat to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace IOFileFormat {

            /** FileFormat enum. */
            enum FileFormat {
                Unknown = 0,
                CSV = 1,
                MysqlOutfile = 2,
                Mysqldump = 3,
                PgCopy = 4,
                PgDump = 5,
                Avro = 6
            }

            /** Compression enum. */
            enum Compression {
                Auto = 0,
                None = 1,
                Gzip = 2,
                Bzip = 3
            }
        }

        /** Properties of a CSVOptions. */
        interface ICSVOptions {

            /** CSVOptions comma */
            comma?: (number|null);

            /** CSVOptions comment */
            comment?: (number|null);

            /** CSVOptions null_encoding */
            null_encoding?: (string|null);

            /** CSVOptions skip */
            skip?: (number|null);

            /** CSVOptions strict_quotes */
            strict_quotes?: (boolean|null);
        }

        /** Represents a CSVOptions. */
        class CSVOptions implements ICSVOptions {

            /**
             * Constructs a new CSVOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ICSVOptions);

            /** CSVOptions comma. */
            public comma: number;

            /** CSVOptions comment. */
            public comment: number;

            /** CSVOptions null_encoding. */
            public null_encoding: string;

            /** CSVOptions skip. */
            public skip: number;

            /** CSVOptions strict_quotes. */
            public strict_quotes: boolean;

            /**
             * Creates a new CSVOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CSVOptions instance
             */
            public static create(properties?: cockroach.roachpb.ICSVOptions): cockroach.roachpb.CSVOptions;

            /**
             * Encodes the specified CSVOptions message. Does not implicitly {@link cockroach.roachpb.CSVOptions.verify|verify} messages.
             * @param message CSVOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.ICSVOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CSVOptions message, length delimited. Does not implicitly {@link cockroach.roachpb.CSVOptions.verify|verify} messages.
             * @param message CSVOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ICSVOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CSVOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CSVOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.CSVOptions;

            /**
             * Decodes a CSVOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CSVOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.CSVOptions;

            /**
             * Verifies a CSVOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CSVOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CSVOptions
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.CSVOptions;

            /**
             * Creates a plain object from a CSVOptions message. Also converts values to other types if specified.
             * @param message CSVOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.CSVOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CSVOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MySQLOutfileOptions. */
        interface IMySQLOutfileOptions {

            /** MySQLOutfileOptions row_separator */
            row_separator?: (number|null);

            /** MySQLOutfileOptions field_separator */
            field_separator?: (number|null);

            /** MySQLOutfileOptions enclose */
            enclose?: (cockroach.roachpb.MySQLOutfileOptions.Enclose|null);

            /** MySQLOutfileOptions encloser */
            encloser?: (number|null);

            /** MySQLOutfileOptions has_escape */
            has_escape?: (boolean|null);

            /** MySQLOutfileOptions escape */
            escape?: (number|null);

            /** MySQLOutfileOptions skip */
            skip?: (number|null);

            /** MySQLOutfileOptions null_encoding */
            null_encoding?: (string|null);
        }

        /** Represents a MySQLOutfileOptions. */
        class MySQLOutfileOptions implements IMySQLOutfileOptions {

            /**
             * Constructs a new MySQLOutfileOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IMySQLOutfileOptions);

            /** MySQLOutfileOptions row_separator. */
            public row_separator: number;

            /** MySQLOutfileOptions field_separator. */
            public field_separator: number;

            /** MySQLOutfileOptions enclose. */
            public enclose: cockroach.roachpb.MySQLOutfileOptions.Enclose;

            /** MySQLOutfileOptions encloser. */
            public encloser: number;

            /** MySQLOutfileOptions has_escape. */
            public has_escape: boolean;

            /** MySQLOutfileOptions escape. */
            public escape: number;

            /** MySQLOutfileOptions skip. */
            public skip: number;

            /** MySQLOutfileOptions null_encoding. */
            public null_encoding: string;

            /**
             * Creates a new MySQLOutfileOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MySQLOutfileOptions instance
             */
            public static create(properties?: cockroach.roachpb.IMySQLOutfileOptions): cockroach.roachpb.MySQLOutfileOptions;

            /**
             * Encodes the specified MySQLOutfileOptions message. Does not implicitly {@link cockroach.roachpb.MySQLOutfileOptions.verify|verify} messages.
             * @param message MySQLOutfileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IMySQLOutfileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MySQLOutfileOptions message, length delimited. Does not implicitly {@link cockroach.roachpb.MySQLOutfileOptions.verify|verify} messages.
             * @param message MySQLOutfileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IMySQLOutfileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MySQLOutfileOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MySQLOutfileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.MySQLOutfileOptions;

            /**
             * Decodes a MySQLOutfileOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MySQLOutfileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.MySQLOutfileOptions;

            /**
             * Verifies a MySQLOutfileOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MySQLOutfileOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MySQLOutfileOptions
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.MySQLOutfileOptions;

            /**
             * Creates a plain object from a MySQLOutfileOptions message. Also converts values to other types if specified.
             * @param message MySQLOutfileOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.MySQLOutfileOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MySQLOutfileOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace MySQLOutfileOptions {

            /** Enclose enum. */
            enum Enclose {
                Never = 0,
                Always = 1,
                Optional = 2
            }
        }

        /** Properties of a PgCopyOptions. */
        interface IPgCopyOptions {

            /** PgCopyOptions delimiter */
            delimiter?: (number|null);

            /** PgCopyOptions null */
            "null"?: (string|null);

            /** PgCopyOptions maxRowSize */
            maxRowSize?: (number|null);
        }

        /** Represents a PgCopyOptions. */
        class PgCopyOptions implements IPgCopyOptions {

            /**
             * Constructs a new PgCopyOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IPgCopyOptions);

            /** PgCopyOptions delimiter. */
            public delimiter: number;

            /** PgCopyOptions null. */
            public null: string;

            /** PgCopyOptions maxRowSize. */
            public maxRowSize: number;

            /**
             * Creates a new PgCopyOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns PgCopyOptions instance
             */
            public static create(properties?: cockroach.roachpb.IPgCopyOptions): cockroach.roachpb.PgCopyOptions;

            /**
             * Encodes the specified PgCopyOptions message. Does not implicitly {@link cockroach.roachpb.PgCopyOptions.verify|verify} messages.
             * @param message PgCopyOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IPgCopyOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified PgCopyOptions message, length delimited. Does not implicitly {@link cockroach.roachpb.PgCopyOptions.verify|verify} messages.
             * @param message PgCopyOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IPgCopyOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a PgCopyOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns PgCopyOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.PgCopyOptions;

            /**
             * Decodes a PgCopyOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns PgCopyOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.PgCopyOptions;

            /**
             * Verifies a PgCopyOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a PgCopyOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns PgCopyOptions
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.PgCopyOptions;

            /**
             * Creates a plain object from a PgCopyOptions message. Also converts values to other types if specified.
             * @param message PgCopyOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.PgCopyOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this PgCopyOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a PgDumpOptions. */
        interface IPgDumpOptions {

            /** PgDumpOptions maxRowSize */
            maxRowSize?: (number|null);
        }

        /** Represents a PgDumpOptions. */
        class PgDumpOptions implements IPgDumpOptions {

            /**
             * Constructs a new PgDumpOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IPgDumpOptions);

            /** PgDumpOptions maxRowSize. */
            public maxRowSize: number;

            /**
             * Creates a new PgDumpOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns PgDumpOptions instance
             */
            public static create(properties?: cockroach.roachpb.IPgDumpOptions): cockroach.roachpb.PgDumpOptions;

            /**
             * Encodes the specified PgDumpOptions message. Does not implicitly {@link cockroach.roachpb.PgDumpOptions.verify|verify} messages.
             * @param message PgDumpOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IPgDumpOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified PgDumpOptions message, length delimited. Does not implicitly {@link cockroach.roachpb.PgDumpOptions.verify|verify} messages.
             * @param message PgDumpOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IPgDumpOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a PgDumpOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns PgDumpOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.PgDumpOptions;

            /**
             * Decodes a PgDumpOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns PgDumpOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.PgDumpOptions;

            /**
             * Verifies a PgDumpOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a PgDumpOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns PgDumpOptions
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.PgDumpOptions;

            /**
             * Creates a plain object from a PgDumpOptions message. Also converts values to other types if specified.
             * @param message PgDumpOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.PgDumpOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this PgDumpOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an AvroOptions. */
        interface IAvroOptions {

            /** AvroOptions format */
            format?: (cockroach.roachpb.AvroOptions.Format|null);

            /** AvroOptions strict_mode */
            strict_mode?: (boolean|null);

            /** AvroOptions schemaJSON */
            schemaJSON?: (string|null);

            /** AvroOptions max_record_size */
            max_record_size?: (number|null);

            /** AvroOptions record_separator */
            record_separator?: (number|null);
        }

        /** Represents an AvroOptions. */
        class AvroOptions implements IAvroOptions {

            /**
             * Constructs a new AvroOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IAvroOptions);

            /** AvroOptions format. */
            public format: cockroach.roachpb.AvroOptions.Format;

            /** AvroOptions strict_mode. */
            public strict_mode: boolean;

            /** AvroOptions schemaJSON. */
            public schemaJSON: string;

            /** AvroOptions max_record_size. */
            public max_record_size: number;

            /** AvroOptions record_separator. */
            public record_separator: number;

            /**
             * Creates a new AvroOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns AvroOptions instance
             */
            public static create(properties?: cockroach.roachpb.IAvroOptions): cockroach.roachpb.AvroOptions;

            /**
             * Encodes the specified AvroOptions message. Does not implicitly {@link cockroach.roachpb.AvroOptions.verify|verify} messages.
             * @param message AvroOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IAvroOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AvroOptions message, length delimited. Does not implicitly {@link cockroach.roachpb.AvroOptions.verify|verify} messages.
             * @param message AvroOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IAvroOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AvroOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns AvroOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.AvroOptions;

            /**
             * Decodes an AvroOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns AvroOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.AvroOptions;

            /**
             * Verifies an AvroOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an AvroOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns AvroOptions
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.AvroOptions;

            /**
             * Creates a plain object from an AvroOptions message. Also converts values to other types if specified.
             * @param message AvroOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.AvroOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this AvroOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace AvroOptions {

            /** Format enum. */
            enum Format {
                OCF = 0,
                BIN_RECORDS = 1,
                JSON_RECORDS = 2
            }
        }

        /** Properties of a RaftTruncatedState. */
        interface IRaftTruncatedState {

            /** RaftTruncatedState index */
            index?: (Long|null);

            /** RaftTruncatedState term */
            term?: (Long|null);
        }

        /** Represents a RaftTruncatedState. */
        class RaftTruncatedState implements IRaftTruncatedState {

            /**
             * Constructs a new RaftTruncatedState.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IRaftTruncatedState);

            /** RaftTruncatedState index. */
            public index: Long;

            /** RaftTruncatedState term. */
            public term: Long;

            /**
             * Creates a new RaftTruncatedState instance using the specified properties.
             * @param [properties] Properties to set
             * @returns RaftTruncatedState instance
             */
            public static create(properties?: cockroach.roachpb.IRaftTruncatedState): cockroach.roachpb.RaftTruncatedState;

            /**
             * Encodes the specified RaftTruncatedState message. Does not implicitly {@link cockroach.roachpb.RaftTruncatedState.verify|verify} messages.
             * @param message RaftTruncatedState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IRaftTruncatedState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftTruncatedState message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftTruncatedState.verify|verify} messages.
             * @param message RaftTruncatedState message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IRaftTruncatedState, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftTruncatedState message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns RaftTruncatedState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftTruncatedState;

            /**
             * Decodes a RaftTruncatedState message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns RaftTruncatedState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftTruncatedState;

            /**
             * Verifies a RaftTruncatedState message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a RaftTruncatedState message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns RaftTruncatedState
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftTruncatedState;

            /**
             * Creates a plain object from a RaftTruncatedState message. Also converts values to other types if specified.
             * @param message RaftTruncatedState
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftTruncatedState, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftTruncatedState to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a RaftTombstone. */
        interface IRaftTombstone {

            /** RaftTombstone next_replica_id */
            next_replica_id?: (number|null);
        }

        /** Represents a RaftTombstone. */
        class RaftTombstone implements IRaftTombstone {

            /**
             * Constructs a new RaftTombstone.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IRaftTombstone);

            /** RaftTombstone next_replica_id. */
            public next_replica_id: number;

            /**
             * Creates a new RaftTombstone instance using the specified properties.
             * @param [properties] Properties to set
             * @returns RaftTombstone instance
             */
            public static create(properties?: cockroach.roachpb.IRaftTombstone): cockroach.roachpb.RaftTombstone;

            /**
             * Encodes the specified RaftTombstone message. Does not implicitly {@link cockroach.roachpb.RaftTombstone.verify|verify} messages.
             * @param message RaftTombstone message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IRaftTombstone, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftTombstone message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftTombstone.verify|verify} messages.
             * @param message RaftTombstone message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IRaftTombstone, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftTombstone message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns RaftTombstone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftTombstone;

            /**
             * Decodes a RaftTombstone message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns RaftTombstone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftTombstone;

            /**
             * Verifies a RaftTombstone message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a RaftTombstone message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns RaftTombstone
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftTombstone;

            /**
             * Creates a plain object from a RaftTombstone message. Also converts values to other types if specified.
             * @param message RaftTombstone
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftTombstone, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftTombstone to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a RaftSnapshotData. */
        interface IRaftSnapshotData {

            /** RaftSnapshotData KV */
            KV?: (cockroach.roachpb.RaftSnapshotData.IKeyValue[]|null);

            /** RaftSnapshotData log_entries */
            log_entries?: (Uint8Array[]|null);
        }

        /** Represents a RaftSnapshotData. */
        class RaftSnapshotData implements IRaftSnapshotData {

            /**
             * Constructs a new RaftSnapshotData.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.IRaftSnapshotData);

            /** RaftSnapshotData KV. */
            public KV: cockroach.roachpb.RaftSnapshotData.IKeyValue[];

            /** RaftSnapshotData log_entries. */
            public log_entries: Uint8Array[];

            /**
             * Creates a new RaftSnapshotData instance using the specified properties.
             * @param [properties] Properties to set
             * @returns RaftSnapshotData instance
             */
            public static create(properties?: cockroach.roachpb.IRaftSnapshotData): cockroach.roachpb.RaftSnapshotData;

            /**
             * Encodes the specified RaftSnapshotData message. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.verify|verify} messages.
             * @param message RaftSnapshotData message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.roachpb.IRaftSnapshotData, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftSnapshotData message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.verify|verify} messages.
             * @param message RaftSnapshotData message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.IRaftSnapshotData, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftSnapshotData message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns RaftSnapshotData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftSnapshotData;

            /**
             * Decodes a RaftSnapshotData message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns RaftSnapshotData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftSnapshotData;

            /**
             * Verifies a RaftSnapshotData message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a RaftSnapshotData message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns RaftSnapshotData
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData;

            /**
             * Creates a plain object from a RaftSnapshotData message. Also converts values to other types if specified.
             * @param message RaftSnapshotData
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftSnapshotData, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftSnapshotData to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace RaftSnapshotData {

            /** Properties of a KeyValue. */
            interface IKeyValue {

                /** KeyValue key */
                key?: (Uint8Array|null);

                /** KeyValue value */
                value?: (Uint8Array|null);

                /** KeyValue timestamp */
                timestamp?: (cockroach.util.hlc.ITimestamp|null);
            }

            /** Represents a KeyValue. */
            class KeyValue implements IKeyValue {

                /**
                 * Constructs a new KeyValue.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.roachpb.RaftSnapshotData.IKeyValue);

                /** KeyValue key. */
                public key: Uint8Array;

                /** KeyValue value. */
                public value: Uint8Array;

                /** KeyValue timestamp. */
                public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                /**
                 * Creates a new KeyValue instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns KeyValue instance
                 */
                public static create(properties?: cockroach.roachpb.RaftSnapshotData.IKeyValue): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Encodes the specified KeyValue message. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.KeyValue.verify|verify} messages.
                 * @param message KeyValue message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.roachpb.RaftSnapshotData.IKeyValue, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.KeyValue.verify|verify} messages.
                 * @param message KeyValue message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.roachpb.RaftSnapshotData.IKeyValue, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a KeyValue message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns KeyValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Decodes a KeyValue message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns KeyValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Verifies a KeyValue message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns KeyValue
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Creates a plain object from a KeyValue message. Also converts values to other types if specified.
                 * @param message KeyValue
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.roachpb.RaftSnapshotData.KeyValue, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this KeyValue to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace util. */
    namespace util {

        /** Properties of an UnresolvedAddr. */
        interface IUnresolvedAddr {

            /** UnresolvedAddr network_field */
            network_field?: (string|null);

            /** UnresolvedAddr address_field */
            address_field?: (string|null);
        }

        /** Represents an UnresolvedAddr. */
        class UnresolvedAddr implements IUnresolvedAddr {

            /**
             * Constructs a new UnresolvedAddr.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.util.IUnresolvedAddr);

            /** UnresolvedAddr network_field. */
            public network_field: string;

            /** UnresolvedAddr address_field. */
            public address_field: string;

            /**
             * Creates a new UnresolvedAddr instance using the specified properties.
             * @param [properties] Properties to set
             * @returns UnresolvedAddr instance
             */
            public static create(properties?: cockroach.util.IUnresolvedAddr): cockroach.util.UnresolvedAddr;

            /**
             * Encodes the specified UnresolvedAddr message. Does not implicitly {@link cockroach.util.UnresolvedAddr.verify|verify} messages.
             * @param message UnresolvedAddr message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.util.IUnresolvedAddr, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UnresolvedAddr message, length delimited. Does not implicitly {@link cockroach.util.UnresolvedAddr.verify|verify} messages.
             * @param message UnresolvedAddr message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.util.IUnresolvedAddr, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an UnresolvedAddr message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns UnresolvedAddr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.UnresolvedAddr;

            /**
             * Decodes an UnresolvedAddr message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns UnresolvedAddr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.UnresolvedAddr;

            /**
             * Verifies an UnresolvedAddr message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an UnresolvedAddr message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UnresolvedAddr
             */
            public static fromObject(object: { [k: string]: any }): cockroach.util.UnresolvedAddr;

            /**
             * Creates a plain object from an UnresolvedAddr message. Also converts values to other types if specified.
             * @param message UnresolvedAddr
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.util.UnresolvedAddr, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UnresolvedAddr to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Namespace hlc. */
        namespace hlc {

            /** Properties of a Timestamp. */
            interface ITimestamp {

                /** Timestamp wall_time */
                wall_time?: (Long|null);

                /** Timestamp logical */
                logical?: (number|null);
            }

            /** Represents a Timestamp. */
            class Timestamp implements ITimestamp {

                /**
                 * Constructs a new Timestamp.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.hlc.ITimestamp);

                /** Timestamp wall_time. */
                public wall_time: Long;

                /** Timestamp logical. */
                public logical: number;

                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Timestamp instance
                 */
                public static create(properties?: cockroach.util.hlc.ITimestamp): cockroach.util.hlc.Timestamp;

                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link cockroach.util.hlc.Timestamp.verify|verify} messages.
                 * @param message Timestamp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.hlc.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link cockroach.util.hlc.Timestamp.verify|verify} messages.
                 * @param message Timestamp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.hlc.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.hlc.Timestamp;

                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.hlc.Timestamp;

                /**
                 * Verifies a Timestamp message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Timestamp
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.hlc.Timestamp;

                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @param message Timestamp
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.hlc.Timestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Timestamp to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a LegacyTimestamp. */
            interface ILegacyTimestamp {

                /** LegacyTimestamp wall_time */
                wall_time?: (Long|null);

                /** LegacyTimestamp logical */
                logical?: (number|null);
            }

            /** Represents a LegacyTimestamp. */
            class LegacyTimestamp implements ILegacyTimestamp {

                /**
                 * Constructs a new LegacyTimestamp.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.hlc.ILegacyTimestamp);

                /** LegacyTimestamp wall_time. */
                public wall_time: Long;

                /** LegacyTimestamp logical. */
                public logical: number;

                /**
                 * Creates a new LegacyTimestamp instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LegacyTimestamp instance
                 */
                public static create(properties?: cockroach.util.hlc.ILegacyTimestamp): cockroach.util.hlc.LegacyTimestamp;

                /**
                 * Encodes the specified LegacyTimestamp message. Does not implicitly {@link cockroach.util.hlc.LegacyTimestamp.verify|verify} messages.
                 * @param message LegacyTimestamp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.hlc.ILegacyTimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LegacyTimestamp message, length delimited. Does not implicitly {@link cockroach.util.hlc.LegacyTimestamp.verify|verify} messages.
                 * @param message LegacyTimestamp message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.hlc.ILegacyTimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LegacyTimestamp message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LegacyTimestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.hlc.LegacyTimestamp;

                /**
                 * Decodes a LegacyTimestamp message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LegacyTimestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.hlc.LegacyTimestamp;

                /**
                 * Verifies a LegacyTimestamp message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LegacyTimestamp message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LegacyTimestamp
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.hlc.LegacyTimestamp;

                /**
                 * Creates a plain object from a LegacyTimestamp message. Also converts values to other types if specified.
                 * @param message LegacyTimestamp
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.hlc.LegacyTimestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LegacyTimestamp to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace log. */
        namespace log {

            /** Severity enum. */
            enum Severity {
                UNKNOWN = 0,
                INFO = 1,
                WARNING = 2,
                ERROR = 3,
                FATAL = 4,
                NONE = 5,
                DEFAULT = 6
            }

            /** Properties of an Entry. */
            interface IEntry {

                /** Entry severity */
                severity?: (cockroach.util.log.Severity|null);

                /** Entry time */
                time?: (Long|null);

                /** Entry goroutine */
                goroutine?: (Long|null);

                /** Entry file */
                file?: (string|null);

                /** Entry line */
                line?: (Long|null);

                /** Entry message */
                message?: (string|null);
            }

            /** Represents an Entry. */
            class Entry implements IEntry {

                /**
                 * Constructs a new Entry.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.IEntry);

                /** Entry severity. */
                public severity: cockroach.util.log.Severity;

                /** Entry time. */
                public time: Long;

                /** Entry goroutine. */
                public goroutine: Long;

                /** Entry file. */
                public file: string;

                /** Entry line. */
                public line: Long;

                /** Entry message. */
                public message: string;

                /**
                 * Creates a new Entry instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Entry instance
                 */
                public static create(properties?: cockroach.util.log.IEntry): cockroach.util.log.Entry;

                /**
                 * Encodes the specified Entry message. Does not implicitly {@link cockroach.util.log.Entry.verify|verify} messages.
                 * @param message Entry message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.log.IEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Entry message, length delimited. Does not implicitly {@link cockroach.util.log.Entry.verify|verify} messages.
                 * @param message Entry message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.IEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Entry message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.Entry;

                /**
                 * Decodes an Entry message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.Entry;

                /**
                 * Verifies an Entry message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Entry
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.Entry;

                /**
                 * Creates a plain object from an Entry message. Also converts values to other types if specified.
                 * @param message Entry
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.log.Entry, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Entry to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FileDetails. */
            interface IFileDetails {

                /** FileDetails program */
                program?: (string|null);

                /** FileDetails host */
                host?: (string|null);

                /** FileDetails user_name */
                user_name?: (string|null);

                /** FileDetails time */
                time?: (Long|null);

                /** FileDetails pid */
                pid?: (Long|null);
            }

            /** Represents a FileDetails. */
            class FileDetails implements IFileDetails {

                /**
                 * Constructs a new FileDetails.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.IFileDetails);

                /** FileDetails program. */
                public program: string;

                /** FileDetails host. */
                public host: string;

                /** FileDetails user_name. */
                public user_name: string;

                /** FileDetails time. */
                public time: Long;

                /** FileDetails pid. */
                public pid: Long;

                /**
                 * Creates a new FileDetails instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns FileDetails instance
                 */
                public static create(properties?: cockroach.util.log.IFileDetails): cockroach.util.log.FileDetails;

                /**
                 * Encodes the specified FileDetails message. Does not implicitly {@link cockroach.util.log.FileDetails.verify|verify} messages.
                 * @param message FileDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.log.IFileDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FileDetails message, length delimited. Does not implicitly {@link cockroach.util.log.FileDetails.verify|verify} messages.
                 * @param message FileDetails message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.IFileDetails, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FileDetails message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns FileDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.FileDetails;

                /**
                 * Decodes a FileDetails message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns FileDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.FileDetails;

                /**
                 * Verifies a FileDetails message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FileDetails message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FileDetails
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.FileDetails;

                /**
                 * Creates a plain object from a FileDetails message. Also converts values to other types if specified.
                 * @param message FileDetails
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.log.FileDetails, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FileDetails to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a FileInfo. */
            interface IFileInfo {

                /** FileInfo name */
                name?: (string|null);

                /** FileInfo size_bytes */
                size_bytes?: (Long|null);

                /** FileInfo mod_time_nanos */
                mod_time_nanos?: (Long|null);

                /** FileInfo details */
                details?: (cockroach.util.log.IFileDetails|null);
            }

            /** Represents a FileInfo. */
            class FileInfo implements IFileInfo {

                /**
                 * Constructs a new FileInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.IFileInfo);

                /** FileInfo name. */
                public name: string;

                /** FileInfo size_bytes. */
                public size_bytes: Long;

                /** FileInfo mod_time_nanos. */
                public mod_time_nanos: Long;

                /** FileInfo details. */
                public details?: (cockroach.util.log.IFileDetails|null);

                /**
                 * Creates a new FileInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns FileInfo instance
                 */
                public static create(properties?: cockroach.util.log.IFileInfo): cockroach.util.log.FileInfo;

                /**
                 * Encodes the specified FileInfo message. Does not implicitly {@link cockroach.util.log.FileInfo.verify|verify} messages.
                 * @param message FileInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.log.IFileInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FileInfo message, length delimited. Does not implicitly {@link cockroach.util.log.FileInfo.verify|verify} messages.
                 * @param message FileInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.IFileInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FileInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.FileInfo;

                /**
                 * Decodes a FileInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.FileInfo;

                /**
                 * Verifies a FileInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a FileInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns FileInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.FileInfo;

                /**
                 * Creates a plain object from a FileInfo message. Also converts values to other types if specified.
                 * @param message FileInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.log.FileInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this FileInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace metric. */
        namespace metric {

            /** Properties of a LabelPair. */
            interface ILabelPair {

                /** LabelPair name */
                name?: (string|null);

                /** LabelPair value */
                value?: (string|null);
            }

            /** Represents a LabelPair. */
            class LabelPair implements ILabelPair {

                /**
                 * Constructs a new LabelPair.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.metric.ILabelPair);

                /** LabelPair name. */
                public name: string;

                /** LabelPair value. */
                public value: string;

                /**
                 * Creates a new LabelPair instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LabelPair instance
                 */
                public static create(properties?: cockroach.util.metric.ILabelPair): cockroach.util.metric.LabelPair;

                /**
                 * Encodes the specified LabelPair message. Does not implicitly {@link cockroach.util.metric.LabelPair.verify|verify} messages.
                 * @param message LabelPair message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.metric.ILabelPair, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LabelPair message, length delimited. Does not implicitly {@link cockroach.util.metric.LabelPair.verify|verify} messages.
                 * @param message LabelPair message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.metric.ILabelPair, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LabelPair message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LabelPair
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.metric.LabelPair;

                /**
                 * Decodes a LabelPair message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LabelPair
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.metric.LabelPair;

                /**
                 * Verifies a LabelPair message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LabelPair message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LabelPair
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.metric.LabelPair;

                /**
                 * Creates a plain object from a LabelPair message. Also converts values to other types if specified.
                 * @param message LabelPair
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.metric.LabelPair, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LabelPair to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Unit enum. */
            enum Unit {
                UNSET = 0,
                BYTES = 1,
                CONST = 2,
                COUNT = 3,
                NANOSECONDS = 4,
                PERCENT = 5,
                SECONDS = 6,
                TIMESTAMP_NS = 7,
                TIMESTAMP_SEC = 8
            }

            /** Properties of a Metadata. */
            interface IMetadata {

                /** Metadata name */
                name: string;

                /** Metadata help */
                help: string;

                /** Metadata measurement */
                measurement: string;

                /** Metadata unit */
                unit: cockroach.util.metric.Unit;

                /** Metadata metricType */
                metricType?: (io.prometheus.client.MetricType|null);

                /** Metadata labels */
                labels?: (cockroach.util.metric.ILabelPair[]|null);
            }

            /** Represents a Metadata. */
            class Metadata implements IMetadata {

                /**
                 * Constructs a new Metadata.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.metric.IMetadata);

                /** Metadata name. */
                public name: string;

                /** Metadata help. */
                public help: string;

                /** Metadata measurement. */
                public measurement: string;

                /** Metadata unit. */
                public unit: cockroach.util.metric.Unit;

                /** Metadata metricType. */
                public metricType: io.prometheus.client.MetricType;

                /** Metadata labels. */
                public labels: cockroach.util.metric.ILabelPair[];

                /**
                 * Creates a new Metadata instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Metadata instance
                 */
                public static create(properties?: cockroach.util.metric.IMetadata): cockroach.util.metric.Metadata;

                /**
                 * Encodes the specified Metadata message. Does not implicitly {@link cockroach.util.metric.Metadata.verify|verify} messages.
                 * @param message Metadata message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.util.metric.IMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Metadata message, length delimited. Does not implicitly {@link cockroach.util.metric.Metadata.verify|verify} messages.
                 * @param message Metadata message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.util.metric.IMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Metadata message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.metric.Metadata;

                /**
                 * Decodes a Metadata message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Metadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.metric.Metadata;

                /**
                 * Verifies a Metadata message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Metadata
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.metric.Metadata;

                /**
                 * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                 * @param message Metadata
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.util.metric.Metadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Metadata to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace storage. */
    namespace storage {

        /** Namespace engine. */
        namespace engine {

            /** Namespace enginepb. */
            namespace enginepb {

                /** Properties of a MVCCMetadata. */
                interface IMVCCMetadata {

                    /** MVCCMetadata txn */
                    txn?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

                    /** MVCCMetadata timestamp */
                    timestamp?: (cockroach.util.hlc.ILegacyTimestamp|null);

                    /** MVCCMetadata deleted */
                    deleted?: (boolean|null);

                    /** MVCCMetadata key_bytes */
                    key_bytes?: (Long|null);

                    /** MVCCMetadata val_bytes */
                    val_bytes?: (Long|null);

                    /** MVCCMetadata raw_bytes */
                    raw_bytes?: (Uint8Array|null);

                    /** MVCCMetadata intent_history */
                    intent_history?: (cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent[]|null);

                    /** MVCCMetadata merge_timestamp */
                    merge_timestamp?: (cockroach.util.hlc.ILegacyTimestamp|null);
                }

                /** Represents a MVCCMetadata. */
                class MVCCMetadata implements IMVCCMetadata {

                    /**
                     * Constructs a new MVCCMetadata.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCMetadata);

                    /** MVCCMetadata txn. */
                    public txn?: (cockroach.storage.engine.enginepb.ITxnMeta|null);

                    /** MVCCMetadata timestamp. */
                    public timestamp?: (cockroach.util.hlc.ILegacyTimestamp|null);

                    /** MVCCMetadata deleted. */
                    public deleted: boolean;

                    /** MVCCMetadata key_bytes. */
                    public key_bytes: Long;

                    /** MVCCMetadata val_bytes. */
                    public val_bytes: Long;

                    /** MVCCMetadata raw_bytes. */
                    public raw_bytes: Uint8Array;

                    /** MVCCMetadata intent_history. */
                    public intent_history: cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent[];

                    /** MVCCMetadata merge_timestamp. */
                    public merge_timestamp?: (cockroach.util.hlc.ILegacyTimestamp|null);

                    /**
                     * Creates a new MVCCMetadata instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCMetadata instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCMetadata): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Encodes the specified MVCCMetadata message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.verify|verify} messages.
                     * @param message MVCCMetadata message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCMetadata message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.verify|verify} messages.
                     * @param message MVCCMetadata message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCMetadata message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Decodes a MVCCMetadata message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Verifies a MVCCMetadata message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCMetadata message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCMetadata
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Creates a plain object from a MVCCMetadata message. Also converts values to other types if specified.
                     * @param message MVCCMetadata
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCMetadata to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                namespace MVCCMetadata {

                    /** Properties of a SequencedIntent. */
                    interface ISequencedIntent {

                        /** SequencedIntent sequence */
                        sequence?: (number|null);

                        /** SequencedIntent value */
                        value?: (Uint8Array|null);
                    }

                    /** Represents a SequencedIntent. */
                    class SequencedIntent implements ISequencedIntent {

                        /**
                         * Constructs a new SequencedIntent.
                         * @param [properties] Properties to set
                         */
                        constructor(properties?: cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent);

                        /** SequencedIntent sequence. */
                        public sequence: number;

                        /** SequencedIntent value. */
                        public value: Uint8Array;

                        /**
                         * Creates a new SequencedIntent instance using the specified properties.
                         * @param [properties] Properties to set
                         * @returns SequencedIntent instance
                         */
                        public static create(properties?: cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent): cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent;

                        /**
                         * Encodes the specified SequencedIntent message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent.verify|verify} messages.
                         * @param message SequencedIntent message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encode(message: cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Encodes the specified SequencedIntent message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent.verify|verify} messages.
                         * @param message SequencedIntent message or plain object to encode
                         * @param [writer] Writer to encode to
                         * @returns Writer
                         */
                        public static encodeDelimited(message: cockroach.storage.engine.enginepb.MVCCMetadata.ISequencedIntent, writer?: $protobuf.Writer): $protobuf.Writer;

                        /**
                         * Decodes a SequencedIntent message from the specified reader or buffer.
                         * @param reader Reader or buffer to decode from
                         * @param [length] Message length if known beforehand
                         * @returns SequencedIntent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent;

                        /**
                         * Decodes a SequencedIntent message from the specified reader or buffer, length delimited.
                         * @param reader Reader or buffer to decode from
                         * @returns SequencedIntent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent;

                        /**
                         * Verifies a SequencedIntent message.
                         * @param message Plain object to verify
                         * @returns `null` if valid, otherwise the reason why it is not
                         */
                        public static verify(message: { [k: string]: any }): (string|null);

                        /**
                         * Creates a SequencedIntent message from a plain object. Also converts values to their respective internal types.
                         * @param object Plain object
                         * @returns SequencedIntent
                         */
                        public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent;

                        /**
                         * Creates a plain object from a SequencedIntent message. Also converts values to other types if specified.
                         * @param message SequencedIntent
                         * @param [options] Conversion options
                         * @returns Plain object
                         */
                        public static toObject(message: cockroach.storage.engine.enginepb.MVCCMetadata.SequencedIntent, options?: $protobuf.IConversionOptions): { [k: string]: any };

                        /**
                         * Converts this SequencedIntent to JSON.
                         * @returns JSON object
                         */
                        public toJSON(): { [k: string]: any };
                    }
                }

                /** Properties of a MVCCStats. */
                interface IMVCCStats {

                    /** MVCCStats contains_estimates */
                    contains_estimates?: (Long|null);

                    /** MVCCStats last_update_nanos */
                    last_update_nanos?: (Long|null);

                    /** MVCCStats intent_age */
                    intent_age?: (Long|null);

                    /** MVCCStats gc_bytes_age */
                    gc_bytes_age?: (Long|null);

                    /** MVCCStats live_bytes */
                    live_bytes?: (Long|null);

                    /** MVCCStats live_count */
                    live_count?: (Long|null);

                    /** MVCCStats key_bytes */
                    key_bytes?: (Long|null);

                    /** MVCCStats key_count */
                    key_count?: (Long|null);

                    /** MVCCStats val_bytes */
                    val_bytes?: (Long|null);

                    /** MVCCStats val_count */
                    val_count?: (Long|null);

                    /** MVCCStats intent_bytes */
                    intent_bytes?: (Long|null);

                    /** MVCCStats intent_count */
                    intent_count?: (Long|null);

                    /** MVCCStats sys_bytes */
                    sys_bytes?: (Long|null);

                    /** MVCCStats sys_count */
                    sys_count?: (Long|null);
                }

                /** Represents a MVCCStats. */
                class MVCCStats implements IMVCCStats {

                    /**
                     * Constructs a new MVCCStats.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCStats);

                    /** MVCCStats contains_estimates. */
                    public contains_estimates: Long;

                    /** MVCCStats last_update_nanos. */
                    public last_update_nanos: Long;

                    /** MVCCStats intent_age. */
                    public intent_age: Long;

                    /** MVCCStats gc_bytes_age. */
                    public gc_bytes_age: Long;

                    /** MVCCStats live_bytes. */
                    public live_bytes: Long;

                    /** MVCCStats live_count. */
                    public live_count: Long;

                    /** MVCCStats key_bytes. */
                    public key_bytes: Long;

                    /** MVCCStats key_count. */
                    public key_count: Long;

                    /** MVCCStats val_bytes. */
                    public val_bytes: Long;

                    /** MVCCStats val_count. */
                    public val_count: Long;

                    /** MVCCStats intent_bytes. */
                    public intent_bytes: Long;

                    /** MVCCStats intent_count. */
                    public intent_count: Long;

                    /** MVCCStats sys_bytes. */
                    public sys_bytes: Long;

                    /** MVCCStats sys_count. */
                    public sys_count: Long;

                    /**
                     * Creates a new MVCCStats instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCStats instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCStats): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Encodes the specified MVCCStats message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStats.verify|verify} messages.
                     * @param message MVCCStats message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCStats, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCStats message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStats.verify|verify} messages.
                     * @param message MVCCStats message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCStats, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCStats message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Decodes a MVCCStats message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Verifies a MVCCStats message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCStats message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCStats
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Creates a plain object from a MVCCStats message. Also converts values to other types if specified.
                     * @param message MVCCStats
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCStats, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCStats to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TxnMeta. */
                interface ITxnMeta {

                    /** TxnMeta id */
                    id?: (Uint8Array|null);

                    /** TxnMeta key */
                    key?: (Uint8Array|null);

                    /** TxnMeta epoch */
                    epoch?: (number|null);

                    /** TxnMeta write_timestamp */
                    write_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** TxnMeta min_timestamp */
                    min_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** TxnMeta priority */
                    priority?: (number|null);

                    /** TxnMeta sequence */
                    sequence?: (number|null);
                }

                /** Represents a TxnMeta. */
                class TxnMeta implements ITxnMeta {

                    /**
                     * Constructs a new TxnMeta.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.ITxnMeta);

                    /** TxnMeta id. */
                    public id: Uint8Array;

                    /** TxnMeta key. */
                    public key: Uint8Array;

                    /** TxnMeta epoch. */
                    public epoch: number;

                    /** TxnMeta write_timestamp. */
                    public write_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** TxnMeta min_timestamp. */
                    public min_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** TxnMeta priority. */
                    public priority: number;

                    /** TxnMeta sequence. */
                    public sequence: number;

                    /**
                     * Creates a new TxnMeta instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TxnMeta instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.ITxnMeta): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Encodes the specified TxnMeta message. Does not implicitly {@link cockroach.storage.engine.enginepb.TxnMeta.verify|verify} messages.
                     * @param message TxnMeta message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.ITxnMeta, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TxnMeta message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.TxnMeta.verify|verify} messages.
                     * @param message TxnMeta message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.ITxnMeta, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TxnMeta message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TxnMeta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Decodes a TxnMeta message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TxnMeta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Verifies a TxnMeta message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TxnMeta message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TxnMeta
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Creates a plain object from a TxnMeta message. Also converts values to other types if specified.
                     * @param message TxnMeta
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.TxnMeta, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TxnMeta to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of an IgnoredSeqNumRange. */
                interface IIgnoredSeqNumRange {

                    /** IgnoredSeqNumRange start */
                    start?: (number|null);

                    /** IgnoredSeqNumRange end */
                    end?: (number|null);
                }

                /** Represents an IgnoredSeqNumRange. */
                class IgnoredSeqNumRange implements IIgnoredSeqNumRange {

                    /**
                     * Constructs a new IgnoredSeqNumRange.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange);

                    /** IgnoredSeqNumRange start. */
                    public start: number;

                    /** IgnoredSeqNumRange end. */
                    public end: number;

                    /**
                     * Creates a new IgnoredSeqNumRange instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns IgnoredSeqNumRange instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange): cockroach.storage.engine.enginepb.IgnoredSeqNumRange;

                    /**
                     * Encodes the specified IgnoredSeqNumRange message. Does not implicitly {@link cockroach.storage.engine.enginepb.IgnoredSeqNumRange.verify|verify} messages.
                     * @param message IgnoredSeqNumRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified IgnoredSeqNumRange message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.IgnoredSeqNumRange.verify|verify} messages.
                     * @param message IgnoredSeqNumRange message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IIgnoredSeqNumRange, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an IgnoredSeqNumRange message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns IgnoredSeqNumRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.IgnoredSeqNumRange;

                    /**
                     * Decodes an IgnoredSeqNumRange message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns IgnoredSeqNumRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.IgnoredSeqNumRange;

                    /**
                     * Verifies an IgnoredSeqNumRange message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates an IgnoredSeqNumRange message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns IgnoredSeqNumRange
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.IgnoredSeqNumRange;

                    /**
                     * Creates a plain object from an IgnoredSeqNumRange message. Also converts values to other types if specified.
                     * @param message IgnoredSeqNumRange
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.IgnoredSeqNumRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this IgnoredSeqNumRange to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCStatsDelta. */
                interface IMVCCStatsDelta {

                    /** MVCCStatsDelta contains_estimates */
                    contains_estimates?: (Long|null);

                    /** MVCCStatsDelta last_update_nanos */
                    last_update_nanos?: (Long|null);

                    /** MVCCStatsDelta intent_age */
                    intent_age?: (Long|null);

                    /** MVCCStatsDelta gc_bytes_age */
                    gc_bytes_age?: (Long|null);

                    /** MVCCStatsDelta live_bytes */
                    live_bytes?: (Long|null);

                    /** MVCCStatsDelta live_count */
                    live_count?: (Long|null);

                    /** MVCCStatsDelta key_bytes */
                    key_bytes?: (Long|null);

                    /** MVCCStatsDelta key_count */
                    key_count?: (Long|null);

                    /** MVCCStatsDelta val_bytes */
                    val_bytes?: (Long|null);

                    /** MVCCStatsDelta val_count */
                    val_count?: (Long|null);

                    /** MVCCStatsDelta intent_bytes */
                    intent_bytes?: (Long|null);

                    /** MVCCStatsDelta intent_count */
                    intent_count?: (Long|null);

                    /** MVCCStatsDelta sys_bytes */
                    sys_bytes?: (Long|null);

                    /** MVCCStatsDelta sys_count */
                    sys_count?: (Long|null);
                }

                /** Represents a MVCCStatsDelta. */
                class MVCCStatsDelta implements IMVCCStatsDelta {

                    /**
                     * Constructs a new MVCCStatsDelta.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCStatsDelta);

                    /** MVCCStatsDelta contains_estimates. */
                    public contains_estimates: Long;

                    /** MVCCStatsDelta last_update_nanos. */
                    public last_update_nanos: Long;

                    /** MVCCStatsDelta intent_age. */
                    public intent_age: Long;

                    /** MVCCStatsDelta gc_bytes_age. */
                    public gc_bytes_age: Long;

                    /** MVCCStatsDelta live_bytes. */
                    public live_bytes: Long;

                    /** MVCCStatsDelta live_count. */
                    public live_count: Long;

                    /** MVCCStatsDelta key_bytes. */
                    public key_bytes: Long;

                    /** MVCCStatsDelta key_count. */
                    public key_count: Long;

                    /** MVCCStatsDelta val_bytes. */
                    public val_bytes: Long;

                    /** MVCCStatsDelta val_count. */
                    public val_count: Long;

                    /** MVCCStatsDelta intent_bytes. */
                    public intent_bytes: Long;

                    /** MVCCStatsDelta intent_count. */
                    public intent_count: Long;

                    /** MVCCStatsDelta sys_bytes. */
                    public sys_bytes: Long;

                    /** MVCCStatsDelta sys_count. */
                    public sys_count: Long;

                    /**
                     * Creates a new MVCCStatsDelta instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCStatsDelta instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCStatsDelta): cockroach.storage.engine.enginepb.MVCCStatsDelta;

                    /**
                     * Encodes the specified MVCCStatsDelta message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStatsDelta.verify|verify} messages.
                     * @param message MVCCStatsDelta message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCStatsDelta, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCStatsDelta message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStatsDelta.verify|verify} messages.
                     * @param message MVCCStatsDelta message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCStatsDelta, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCStatsDelta message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCStatsDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCStatsDelta;

                    /**
                     * Decodes a MVCCStatsDelta message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCStatsDelta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCStatsDelta;

                    /**
                     * Verifies a MVCCStatsDelta message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCStatsDelta message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCStatsDelta
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCStatsDelta;

                    /**
                     * Creates a plain object from a MVCCStatsDelta message. Also converts values to other types if specified.
                     * @param message MVCCStatsDelta
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCStatsDelta, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCStatsDelta to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCPersistentStats. */
                interface IMVCCPersistentStats {

                    /** MVCCPersistentStats contains_estimates */
                    contains_estimates?: (Long|null);

                    /** MVCCPersistentStats last_update_nanos */
                    last_update_nanos?: (Long|null);

                    /** MVCCPersistentStats intent_age */
                    intent_age?: (Long|null);

                    /** MVCCPersistentStats gc_bytes_age */
                    gc_bytes_age?: (Long|null);

                    /** MVCCPersistentStats live_bytes */
                    live_bytes?: (Long|null);

                    /** MVCCPersistentStats live_count */
                    live_count?: (Long|null);

                    /** MVCCPersistentStats key_bytes */
                    key_bytes?: (Long|null);

                    /** MVCCPersistentStats key_count */
                    key_count?: (Long|null);

                    /** MVCCPersistentStats val_bytes */
                    val_bytes?: (Long|null);

                    /** MVCCPersistentStats val_count */
                    val_count?: (Long|null);

                    /** MVCCPersistentStats intent_bytes */
                    intent_bytes?: (Long|null);

                    /** MVCCPersistentStats intent_count */
                    intent_count?: (Long|null);

                    /** MVCCPersistentStats sys_bytes */
                    sys_bytes?: (Long|null);

                    /** MVCCPersistentStats sys_count */
                    sys_count?: (Long|null);
                }

                /** Represents a MVCCPersistentStats. */
                class MVCCPersistentStats implements IMVCCPersistentStats {

                    /**
                     * Constructs a new MVCCPersistentStats.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCPersistentStats);

                    /** MVCCPersistentStats contains_estimates. */
                    public contains_estimates: Long;

                    /** MVCCPersistentStats last_update_nanos. */
                    public last_update_nanos: Long;

                    /** MVCCPersistentStats intent_age. */
                    public intent_age: Long;

                    /** MVCCPersistentStats gc_bytes_age. */
                    public gc_bytes_age: Long;

                    /** MVCCPersistentStats live_bytes. */
                    public live_bytes: Long;

                    /** MVCCPersistentStats live_count. */
                    public live_count: Long;

                    /** MVCCPersistentStats key_bytes. */
                    public key_bytes: Long;

                    /** MVCCPersistentStats key_count. */
                    public key_count: Long;

                    /** MVCCPersistentStats val_bytes. */
                    public val_bytes: Long;

                    /** MVCCPersistentStats val_count. */
                    public val_count: Long;

                    /** MVCCPersistentStats intent_bytes. */
                    public intent_bytes: Long;

                    /** MVCCPersistentStats intent_count. */
                    public intent_count: Long;

                    /** MVCCPersistentStats sys_bytes. */
                    public sys_bytes: Long;

                    /** MVCCPersistentStats sys_count. */
                    public sys_count: Long;

                    /**
                     * Creates a new MVCCPersistentStats instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCPersistentStats instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCPersistentStats): cockroach.storage.engine.enginepb.MVCCPersistentStats;

                    /**
                     * Encodes the specified MVCCPersistentStats message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCPersistentStats.verify|verify} messages.
                     * @param message MVCCPersistentStats message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCPersistentStats, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCPersistentStats message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCPersistentStats.verify|verify} messages.
                     * @param message MVCCPersistentStats message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCPersistentStats, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCPersistentStats message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCPersistentStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCPersistentStats;

                    /**
                     * Decodes a MVCCPersistentStats message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCPersistentStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCPersistentStats;

                    /**
                     * Verifies a MVCCPersistentStats message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCPersistentStats message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCPersistentStats
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCPersistentStats;

                    /**
                     * Creates a plain object from a MVCCPersistentStats message. Also converts values to other types if specified.
                     * @param message MVCCPersistentStats
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCPersistentStats, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCPersistentStats to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a RangeAppliedState. */
                interface IRangeAppliedState {

                    /** RangeAppliedState raft_applied_index */
                    raft_applied_index?: (Long|null);

                    /** RangeAppliedState lease_applied_index */
                    lease_applied_index?: (Long|null);

                    /** RangeAppliedState range_stats */
                    range_stats?: (cockroach.storage.engine.enginepb.IMVCCPersistentStats|null);
                }

                /** Represents a RangeAppliedState. */
                class RangeAppliedState implements IRangeAppliedState {

                    /**
                     * Constructs a new RangeAppliedState.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IRangeAppliedState);

                    /** RangeAppliedState raft_applied_index. */
                    public raft_applied_index: Long;

                    /** RangeAppliedState lease_applied_index. */
                    public lease_applied_index: Long;

                    /** RangeAppliedState range_stats. */
                    public range_stats?: (cockroach.storage.engine.enginepb.IMVCCPersistentStats|null);

                    /**
                     * Creates a new RangeAppliedState instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns RangeAppliedState instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IRangeAppliedState): cockroach.storage.engine.enginepb.RangeAppliedState;

                    /**
                     * Encodes the specified RangeAppliedState message. Does not implicitly {@link cockroach.storage.engine.enginepb.RangeAppliedState.verify|verify} messages.
                     * @param message RangeAppliedState message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IRangeAppliedState, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified RangeAppliedState message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.RangeAppliedState.verify|verify} messages.
                     * @param message RangeAppliedState message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IRangeAppliedState, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a RangeAppliedState message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns RangeAppliedState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.RangeAppliedState;

                    /**
                     * Decodes a RangeAppliedState message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns RangeAppliedState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.RangeAppliedState;

                    /**
                     * Verifies a RangeAppliedState message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a RangeAppliedState message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns RangeAppliedState
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.RangeAppliedState;

                    /**
                     * Creates a plain object from a RangeAppliedState message. Also converts values to other types if specified.
                     * @param message RangeAppliedState
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.RangeAppliedState, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this RangeAppliedState to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCWriteValueOp. */
                interface IMVCCWriteValueOp {

                    /** MVCCWriteValueOp key */
                    key?: (Uint8Array|null);

                    /** MVCCWriteValueOp timestamp */
                    timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCWriteValueOp value */
                    value?: (Uint8Array|null);

                    /** MVCCWriteValueOp prev_value */
                    prev_value?: (Uint8Array|null);
                }

                /** Represents a MVCCWriteValueOp. */
                class MVCCWriteValueOp implements IMVCCWriteValueOp {

                    /**
                     * Constructs a new MVCCWriteValueOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCWriteValueOp);

                    /** MVCCWriteValueOp key. */
                    public key: Uint8Array;

                    /** MVCCWriteValueOp timestamp. */
                    public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCWriteValueOp value. */
                    public value: Uint8Array;

                    /** MVCCWriteValueOp prev_value. */
                    public prev_value: Uint8Array;

                    /**
                     * Creates a new MVCCWriteValueOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCWriteValueOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCWriteValueOp): cockroach.storage.engine.enginepb.MVCCWriteValueOp;

                    /**
                     * Encodes the specified MVCCWriteValueOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCWriteValueOp.verify|verify} messages.
                     * @param message MVCCWriteValueOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCWriteValueOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCWriteValueOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCWriteValueOp.verify|verify} messages.
                     * @param message MVCCWriteValueOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCWriteValueOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCWriteValueOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCWriteValueOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCWriteValueOp;

                    /**
                     * Decodes a MVCCWriteValueOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCWriteValueOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCWriteValueOp;

                    /**
                     * Verifies a MVCCWriteValueOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCWriteValueOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCWriteValueOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCWriteValueOp;

                    /**
                     * Creates a plain object from a MVCCWriteValueOp message. Also converts values to other types if specified.
                     * @param message MVCCWriteValueOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCWriteValueOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCWriteValueOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCWriteIntentOp. */
                interface IMVCCWriteIntentOp {

                    /** MVCCWriteIntentOp txn_id */
                    txn_id?: (Uint8Array|null);

                    /** MVCCWriteIntentOp txn_key */
                    txn_key?: (Uint8Array|null);

                    /** MVCCWriteIntentOp txn_min_timestamp */
                    txn_min_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCWriteIntentOp timestamp */
                    timestamp?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a MVCCWriteIntentOp. */
                class MVCCWriteIntentOp implements IMVCCWriteIntentOp {

                    /**
                     * Constructs a new MVCCWriteIntentOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCWriteIntentOp);

                    /** MVCCWriteIntentOp txn_id. */
                    public txn_id: Uint8Array;

                    /** MVCCWriteIntentOp txn_key. */
                    public txn_key: Uint8Array;

                    /** MVCCWriteIntentOp txn_min_timestamp. */
                    public txn_min_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCWriteIntentOp timestamp. */
                    public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new MVCCWriteIntentOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCWriteIntentOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCWriteIntentOp): cockroach.storage.engine.enginepb.MVCCWriteIntentOp;

                    /**
                     * Encodes the specified MVCCWriteIntentOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCWriteIntentOp.verify|verify} messages.
                     * @param message MVCCWriteIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCWriteIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCWriteIntentOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCWriteIntentOp.verify|verify} messages.
                     * @param message MVCCWriteIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCWriteIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCWriteIntentOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCWriteIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCWriteIntentOp;

                    /**
                     * Decodes a MVCCWriteIntentOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCWriteIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCWriteIntentOp;

                    /**
                     * Verifies a MVCCWriteIntentOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCWriteIntentOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCWriteIntentOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCWriteIntentOp;

                    /**
                     * Creates a plain object from a MVCCWriteIntentOp message. Also converts values to other types if specified.
                     * @param message MVCCWriteIntentOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCWriteIntentOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCWriteIntentOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCUpdateIntentOp. */
                interface IMVCCUpdateIntentOp {

                    /** MVCCUpdateIntentOp txn_id */
                    txn_id?: (Uint8Array|null);

                    /** MVCCUpdateIntentOp timestamp */
                    timestamp?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a MVCCUpdateIntentOp. */
                class MVCCUpdateIntentOp implements IMVCCUpdateIntentOp {

                    /**
                     * Constructs a new MVCCUpdateIntentOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp);

                    /** MVCCUpdateIntentOp txn_id. */
                    public txn_id: Uint8Array;

                    /** MVCCUpdateIntentOp timestamp. */
                    public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new MVCCUpdateIntentOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCUpdateIntentOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp): cockroach.storage.engine.enginepb.MVCCUpdateIntentOp;

                    /**
                     * Encodes the specified MVCCUpdateIntentOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCUpdateIntentOp.verify|verify} messages.
                     * @param message MVCCUpdateIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCUpdateIntentOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCUpdateIntentOp.verify|verify} messages.
                     * @param message MVCCUpdateIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCUpdateIntentOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCUpdateIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCUpdateIntentOp;

                    /**
                     * Decodes a MVCCUpdateIntentOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCUpdateIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCUpdateIntentOp;

                    /**
                     * Verifies a MVCCUpdateIntentOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCUpdateIntentOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCUpdateIntentOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCUpdateIntentOp;

                    /**
                     * Creates a plain object from a MVCCUpdateIntentOp message. Also converts values to other types if specified.
                     * @param message MVCCUpdateIntentOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCUpdateIntentOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCUpdateIntentOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCCommitIntentOp. */
                interface IMVCCCommitIntentOp {

                    /** MVCCCommitIntentOp txn_id */
                    txn_id?: (Uint8Array|null);

                    /** MVCCCommitIntentOp key */
                    key?: (Uint8Array|null);

                    /** MVCCCommitIntentOp timestamp */
                    timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCCommitIntentOp value */
                    value?: (Uint8Array|null);

                    /** MVCCCommitIntentOp prev_value */
                    prev_value?: (Uint8Array|null);
                }

                /** Represents a MVCCCommitIntentOp. */
                class MVCCCommitIntentOp implements IMVCCCommitIntentOp {

                    /**
                     * Constructs a new MVCCCommitIntentOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCCommitIntentOp);

                    /** MVCCCommitIntentOp txn_id. */
                    public txn_id: Uint8Array;

                    /** MVCCCommitIntentOp key. */
                    public key: Uint8Array;

                    /** MVCCCommitIntentOp timestamp. */
                    public timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** MVCCCommitIntentOp value. */
                    public value: Uint8Array;

                    /** MVCCCommitIntentOp prev_value. */
                    public prev_value: Uint8Array;

                    /**
                     * Creates a new MVCCCommitIntentOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCCommitIntentOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCCommitIntentOp): cockroach.storage.engine.enginepb.MVCCCommitIntentOp;

                    /**
                     * Encodes the specified MVCCCommitIntentOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCCommitIntentOp.verify|verify} messages.
                     * @param message MVCCCommitIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCCommitIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCCommitIntentOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCCommitIntentOp.verify|verify} messages.
                     * @param message MVCCCommitIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCCommitIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCCommitIntentOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCCommitIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCCommitIntentOp;

                    /**
                     * Decodes a MVCCCommitIntentOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCCommitIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCCommitIntentOp;

                    /**
                     * Verifies a MVCCCommitIntentOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCCommitIntentOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCCommitIntentOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCCommitIntentOp;

                    /**
                     * Creates a plain object from a MVCCCommitIntentOp message. Also converts values to other types if specified.
                     * @param message MVCCCommitIntentOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCCommitIntentOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCCommitIntentOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCAbortIntentOp. */
                interface IMVCCAbortIntentOp {

                    /** MVCCAbortIntentOp txn_id */
                    txn_id?: (Uint8Array|null);
                }

                /** Represents a MVCCAbortIntentOp. */
                class MVCCAbortIntentOp implements IMVCCAbortIntentOp {

                    /**
                     * Constructs a new MVCCAbortIntentOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCAbortIntentOp);

                    /** MVCCAbortIntentOp txn_id. */
                    public txn_id: Uint8Array;

                    /**
                     * Creates a new MVCCAbortIntentOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCAbortIntentOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCAbortIntentOp): cockroach.storage.engine.enginepb.MVCCAbortIntentOp;

                    /**
                     * Encodes the specified MVCCAbortIntentOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCAbortIntentOp.verify|verify} messages.
                     * @param message MVCCAbortIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCAbortIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCAbortIntentOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCAbortIntentOp.verify|verify} messages.
                     * @param message MVCCAbortIntentOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCAbortIntentOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCAbortIntentOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCAbortIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCAbortIntentOp;

                    /**
                     * Decodes a MVCCAbortIntentOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCAbortIntentOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCAbortIntentOp;

                    /**
                     * Verifies a MVCCAbortIntentOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCAbortIntentOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCAbortIntentOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCAbortIntentOp;

                    /**
                     * Creates a plain object from a MVCCAbortIntentOp message. Also converts values to other types if specified.
                     * @param message MVCCAbortIntentOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCAbortIntentOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCAbortIntentOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCAbortTxnOp. */
                interface IMVCCAbortTxnOp {

                    /** MVCCAbortTxnOp txn_id */
                    txn_id?: (Uint8Array|null);
                }

                /** Represents a MVCCAbortTxnOp. */
                class MVCCAbortTxnOp implements IMVCCAbortTxnOp {

                    /**
                     * Constructs a new MVCCAbortTxnOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCAbortTxnOp);

                    /** MVCCAbortTxnOp txn_id. */
                    public txn_id: Uint8Array;

                    /**
                     * Creates a new MVCCAbortTxnOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCAbortTxnOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCAbortTxnOp): cockroach.storage.engine.enginepb.MVCCAbortTxnOp;

                    /**
                     * Encodes the specified MVCCAbortTxnOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCAbortTxnOp.verify|verify} messages.
                     * @param message MVCCAbortTxnOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCAbortTxnOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCAbortTxnOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCAbortTxnOp.verify|verify} messages.
                     * @param message MVCCAbortTxnOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCAbortTxnOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCAbortTxnOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCAbortTxnOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCAbortTxnOp;

                    /**
                     * Decodes a MVCCAbortTxnOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCAbortTxnOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCAbortTxnOp;

                    /**
                     * Verifies a MVCCAbortTxnOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCAbortTxnOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCAbortTxnOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCAbortTxnOp;

                    /**
                     * Creates a plain object from a MVCCAbortTxnOp message. Also converts values to other types if specified.
                     * @param message MVCCAbortTxnOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCAbortTxnOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCAbortTxnOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a MVCCLogicalOp. */
                interface IMVCCLogicalOp {

                    /** MVCCLogicalOp write_value */
                    write_value?: (cockroach.storage.engine.enginepb.IMVCCWriteValueOp|null);

                    /** MVCCLogicalOp write_intent */
                    write_intent?: (cockroach.storage.engine.enginepb.IMVCCWriteIntentOp|null);

                    /** MVCCLogicalOp update_intent */
                    update_intent?: (cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp|null);

                    /** MVCCLogicalOp commit_intent */
                    commit_intent?: (cockroach.storage.engine.enginepb.IMVCCCommitIntentOp|null);

                    /** MVCCLogicalOp abort_intent */
                    abort_intent?: (cockroach.storage.engine.enginepb.IMVCCAbortIntentOp|null);

                    /** MVCCLogicalOp abort_txn */
                    abort_txn?: (cockroach.storage.engine.enginepb.IMVCCAbortTxnOp|null);
                }

                /** Represents a MVCCLogicalOp. */
                class MVCCLogicalOp implements IMVCCLogicalOp {

                    /**
                     * Constructs a new MVCCLogicalOp.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IMVCCLogicalOp);

                    /** MVCCLogicalOp write_value. */
                    public write_value?: (cockroach.storage.engine.enginepb.IMVCCWriteValueOp|null);

                    /** MVCCLogicalOp write_intent. */
                    public write_intent?: (cockroach.storage.engine.enginepb.IMVCCWriteIntentOp|null);

                    /** MVCCLogicalOp update_intent. */
                    public update_intent?: (cockroach.storage.engine.enginepb.IMVCCUpdateIntentOp|null);

                    /** MVCCLogicalOp commit_intent. */
                    public commit_intent?: (cockroach.storage.engine.enginepb.IMVCCCommitIntentOp|null);

                    /** MVCCLogicalOp abort_intent. */
                    public abort_intent?: (cockroach.storage.engine.enginepb.IMVCCAbortIntentOp|null);

                    /** MVCCLogicalOp abort_txn. */
                    public abort_txn?: (cockroach.storage.engine.enginepb.IMVCCAbortTxnOp|null);

                    /**
                     * Creates a new MVCCLogicalOp instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns MVCCLogicalOp instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IMVCCLogicalOp): cockroach.storage.engine.enginepb.MVCCLogicalOp;

                    /**
                     * Encodes the specified MVCCLogicalOp message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCLogicalOp.verify|verify} messages.
                     * @param message MVCCLogicalOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IMVCCLogicalOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCLogicalOp message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCLogicalOp.verify|verify} messages.
                     * @param message MVCCLogicalOp message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IMVCCLogicalOp, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCLogicalOp message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns MVCCLogicalOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCLogicalOp;

                    /**
                     * Decodes a MVCCLogicalOp message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns MVCCLogicalOp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCLogicalOp;

                    /**
                     * Verifies a MVCCLogicalOp message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a MVCCLogicalOp message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns MVCCLogicalOp
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCLogicalOp;

                    /**
                     * Creates a plain object from a MVCCLogicalOp message. Also converts values to other types if specified.
                     * @param message MVCCLogicalOp
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCLogicalOp, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCLogicalOp to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** EngineType enum. */
                enum EngineType {
                    EngineTypeRocksDB = 0,
                    EngineTypePebble = 1,
                    EngineTypeTeePebbleRocksDB = 2
                }

                /** Properties of a SSTUserProperties. */
                interface ISSTUserProperties {

                    /** SSTUserProperties path */
                    path?: (string|null);

                    /** SSTUserProperties ts_min */
                    ts_min?: (cockroach.util.hlc.ITimestamp|null);

                    /** SSTUserProperties ts_max */
                    ts_max?: (cockroach.util.hlc.ITimestamp|null);
                }

                /** Represents a SSTUserProperties. */
                class SSTUserProperties implements ISSTUserProperties {

                    /**
                     * Constructs a new SSTUserProperties.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.ISSTUserProperties);

                    /** SSTUserProperties path. */
                    public path: string;

                    /** SSTUserProperties ts_min. */
                    public ts_min?: (cockroach.util.hlc.ITimestamp|null);

                    /** SSTUserProperties ts_max. */
                    public ts_max?: (cockroach.util.hlc.ITimestamp|null);

                    /**
                     * Creates a new SSTUserProperties instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SSTUserProperties instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.ISSTUserProperties): cockroach.storage.engine.enginepb.SSTUserProperties;

                    /**
                     * Encodes the specified SSTUserProperties message. Does not implicitly {@link cockroach.storage.engine.enginepb.SSTUserProperties.verify|verify} messages.
                     * @param message SSTUserProperties message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.ISSTUserProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SSTUserProperties message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.SSTUserProperties.verify|verify} messages.
                     * @param message SSTUserProperties message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.ISSTUserProperties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SSTUserProperties message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SSTUserProperties
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.SSTUserProperties;

                    /**
                     * Decodes a SSTUserProperties message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SSTUserProperties
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.SSTUserProperties;

                    /**
                     * Verifies a SSTUserProperties message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SSTUserProperties message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SSTUserProperties
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.SSTUserProperties;

                    /**
                     * Creates a plain object from a SSTUserProperties message. Also converts values to other types if specified.
                     * @param message SSTUserProperties
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.SSTUserProperties, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SSTUserProperties to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a SSTUserPropertiesCollection. */
                interface ISSTUserPropertiesCollection {

                    /** SSTUserPropertiesCollection sst */
                    sst?: (cockroach.storage.engine.enginepb.ISSTUserProperties[]|null);

                    /** SSTUserPropertiesCollection error */
                    error?: (string|null);
                }

                /** Represents a SSTUserPropertiesCollection. */
                class SSTUserPropertiesCollection implements ISSTUserPropertiesCollection {

                    /**
                     * Constructs a new SSTUserPropertiesCollection.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.ISSTUserPropertiesCollection);

                    /** SSTUserPropertiesCollection sst. */
                    public sst: cockroach.storage.engine.enginepb.ISSTUserProperties[];

                    /** SSTUserPropertiesCollection error. */
                    public error: string;

                    /**
                     * Creates a new SSTUserPropertiesCollection instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns SSTUserPropertiesCollection instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.ISSTUserPropertiesCollection): cockroach.storage.engine.enginepb.SSTUserPropertiesCollection;

                    /**
                     * Encodes the specified SSTUserPropertiesCollection message. Does not implicitly {@link cockroach.storage.engine.enginepb.SSTUserPropertiesCollection.verify|verify} messages.
                     * @param message SSTUserPropertiesCollection message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.ISSTUserPropertiesCollection, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified SSTUserPropertiesCollection message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.SSTUserPropertiesCollection.verify|verify} messages.
                     * @param message SSTUserPropertiesCollection message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.ISSTUserPropertiesCollection, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a SSTUserPropertiesCollection message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns SSTUserPropertiesCollection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.SSTUserPropertiesCollection;

                    /**
                     * Decodes a SSTUserPropertiesCollection message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns SSTUserPropertiesCollection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.SSTUserPropertiesCollection;

                    /**
                     * Verifies a SSTUserPropertiesCollection message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a SSTUserPropertiesCollection message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns SSTUserPropertiesCollection
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.SSTUserPropertiesCollection;

                    /**
                     * Creates a plain object from a SSTUserPropertiesCollection message. Also converts values to other types if specified.
                     * @param message SSTUserPropertiesCollection
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.SSTUserPropertiesCollection, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this SSTUserPropertiesCollection to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a HistogramData. */
                interface IHistogramData {

                    /** HistogramData mean */
                    mean?: (number|null);

                    /** HistogramData p50 */
                    p50?: (number|null);

                    /** HistogramData p95 */
                    p95?: (number|null);

                    /** HistogramData p99 */
                    p99?: (number|null);

                    /** HistogramData max */
                    max?: (number|null);

                    /** HistogramData count */
                    count?: (Long|null);

                    /** HistogramData sum */
                    sum?: (Long|null);
                }

                /** Represents a HistogramData. */
                class HistogramData implements IHistogramData {

                    /**
                     * Constructs a new HistogramData.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.IHistogramData);

                    /** HistogramData mean. */
                    public mean: number;

                    /** HistogramData p50. */
                    public p50: number;

                    /** HistogramData p95. */
                    public p95: number;

                    /** HistogramData p99. */
                    public p99: number;

                    /** HistogramData max. */
                    public max: number;

                    /** HistogramData count. */
                    public count: Long;

                    /** HistogramData sum. */
                    public sum: Long;

                    /**
                     * Creates a new HistogramData instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns HistogramData instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.IHistogramData): cockroach.storage.engine.enginepb.HistogramData;

                    /**
                     * Encodes the specified HistogramData message. Does not implicitly {@link cockroach.storage.engine.enginepb.HistogramData.verify|verify} messages.
                     * @param message HistogramData message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.IHistogramData, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified HistogramData message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.HistogramData.verify|verify} messages.
                     * @param message HistogramData message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.IHistogramData, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a HistogramData message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns HistogramData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.HistogramData;

                    /**
                     * Decodes a HistogramData message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns HistogramData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.HistogramData;

                    /**
                     * Verifies a HistogramData message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a HistogramData message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns HistogramData
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.HistogramData;

                    /**
                     * Creates a plain object from a HistogramData message. Also converts values to other types if specified.
                     * @param message HistogramData
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.HistogramData, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this HistogramData to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                /** Properties of a TickersAndHistograms. */
                interface ITickersAndHistograms {

                    /** TickersAndHistograms tickers */
                    tickers?: ({ [k: string]: Long }|null);

                    /** TickersAndHistograms histograms */
                    histograms?: ({ [k: string]: cockroach.storage.engine.enginepb.IHistogramData }|null);
                }

                /** Represents a TickersAndHistograms. */
                class TickersAndHistograms implements ITickersAndHistograms {

                    /**
                     * Constructs a new TickersAndHistograms.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.ITickersAndHistograms);

                    /** TickersAndHistograms tickers. */
                    public tickers: { [k: string]: Long };

                    /** TickersAndHistograms histograms. */
                    public histograms: { [k: string]: cockroach.storage.engine.enginepb.IHistogramData };

                    /**
                     * Creates a new TickersAndHistograms instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns TickersAndHistograms instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.ITickersAndHistograms): cockroach.storage.engine.enginepb.TickersAndHistograms;

                    /**
                     * Encodes the specified TickersAndHistograms message. Does not implicitly {@link cockroach.storage.engine.enginepb.TickersAndHistograms.verify|verify} messages.
                     * @param message TickersAndHistograms message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.ITickersAndHistograms, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TickersAndHistograms message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.TickersAndHistograms.verify|verify} messages.
                     * @param message TickersAndHistograms message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.ITickersAndHistograms, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TickersAndHistograms message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns TickersAndHistograms
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.TickersAndHistograms;

                    /**
                     * Decodes a TickersAndHistograms message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns TickersAndHistograms
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.TickersAndHistograms;

                    /**
                     * Verifies a TickersAndHistograms message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a TickersAndHistograms message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns TickersAndHistograms
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.TickersAndHistograms;

                    /**
                     * Creates a plain object from a TickersAndHistograms message. Also converts values to other types if specified.
                     * @param message TickersAndHistograms
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.TickersAndHistograms, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TickersAndHistograms to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        /** LeaseState enum. */
        enum LeaseState {
            ERROR = 0,
            VALID = 1,
            STASIS = 2,
            EXPIRED = 3,
            PROSCRIBED = 4
        }

        /** Properties of a LeaseStatus. */
        interface ILeaseStatus {

            /** LeaseStatus lease */
            lease?: (cockroach.roachpb.ILease|null);

            /** LeaseStatus timestamp */
            timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** LeaseStatus state */
            state?: (cockroach.storage.LeaseState|null);

            /** LeaseStatus liveness */
            liveness?: (cockroach.storage.ILiveness|null);
        }

        /** Represents a LeaseStatus. */
        class LeaseStatus implements ILeaseStatus {

            /**
             * Constructs a new LeaseStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.storage.ILeaseStatus);

            /** LeaseStatus lease. */
            public lease?: (cockroach.roachpb.ILease|null);

            /** LeaseStatus timestamp. */
            public timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /** LeaseStatus state. */
            public state: cockroach.storage.LeaseState;

            /** LeaseStatus liveness. */
            public liveness?: (cockroach.storage.ILiveness|null);

            /**
             * Creates a new LeaseStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns LeaseStatus instance
             */
            public static create(properties?: cockroach.storage.ILeaseStatus): cockroach.storage.LeaseStatus;

            /**
             * Encodes the specified LeaseStatus message. Does not implicitly {@link cockroach.storage.LeaseStatus.verify|verify} messages.
             * @param message LeaseStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.storage.ILeaseStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified LeaseStatus message, length delimited. Does not implicitly {@link cockroach.storage.LeaseStatus.verify|verify} messages.
             * @param message LeaseStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.storage.ILeaseStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a LeaseStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns LeaseStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.LeaseStatus;

            /**
             * Decodes a LeaseStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns LeaseStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.LeaseStatus;

            /**
             * Verifies a LeaseStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a LeaseStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns LeaseStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.storage.LeaseStatus;

            /**
             * Creates a plain object from a LeaseStatus message. Also converts values to other types if specified.
             * @param message LeaseStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.storage.LeaseStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this LeaseStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Liveness. */
        interface ILiveness {

            /** Liveness node_id */
            node_id?: (number|null);

            /** Liveness epoch */
            epoch?: (Long|null);

            /** Liveness expiration */
            expiration?: (cockroach.util.hlc.ILegacyTimestamp|null);

            /** Liveness draining */
            draining?: (boolean|null);

            /** Liveness decommissioning */
            decommissioning?: (boolean|null);
        }

        /** Represents a Liveness. */
        class Liveness implements ILiveness {

            /**
             * Constructs a new Liveness.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.storage.ILiveness);

            /** Liveness node_id. */
            public node_id: number;

            /** Liveness epoch. */
            public epoch: Long;

            /** Liveness expiration. */
            public expiration?: (cockroach.util.hlc.ILegacyTimestamp|null);

            /** Liveness draining. */
            public draining: boolean;

            /** Liveness decommissioning. */
            public decommissioning: boolean;

            /**
             * Creates a new Liveness instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Liveness instance
             */
            public static create(properties?: cockroach.storage.ILiveness): cockroach.storage.Liveness;

            /**
             * Encodes the specified Liveness message. Does not implicitly {@link cockroach.storage.Liveness.verify|verify} messages.
             * @param message Liveness message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.storage.ILiveness, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Liveness message, length delimited. Does not implicitly {@link cockroach.storage.Liveness.verify|verify} messages.
             * @param message Liveness message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.storage.ILiveness, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Liveness message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Liveness
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.Liveness;

            /**
             * Decodes a Liveness message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Liveness
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.Liveness;

            /**
             * Verifies a Liveness message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Liveness message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Liveness
             */
            public static fromObject(object: { [k: string]: any }): cockroach.storage.Liveness;

            /**
             * Creates a plain object from a Liveness message. Also converts values to other types if specified.
             * @param message Liveness
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.storage.Liveness, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Liveness to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** NodeLivenessStatus enum. */
        enum NodeLivenessStatus {
            UNKNOWN = 0,
            DEAD = 1,
            UNAVAILABLE = 2,
            LIVE = 3,
            DECOMMISSIONING = 4,
            DECOMMISSIONED = 5
        }

        /** Namespace storagepb. */
        namespace storagepb {

            /** Properties of a ReplicaState. */
            interface IReplicaState {

                /** ReplicaState raft_applied_index */
                raft_applied_index?: (Long|null);

                /** ReplicaState lease_applied_index */
                lease_applied_index?: (Long|null);

                /** ReplicaState desc */
                desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** ReplicaState lease */
                lease?: (cockroach.roachpb.ILease|null);

                /** ReplicaState truncated_state */
                truncated_state?: (cockroach.roachpb.IRaftTruncatedState|null);

                /** ReplicaState gc_threshold */
                gc_threshold?: (cockroach.util.hlc.ITimestamp|null);

                /** ReplicaState stats */
                stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

                /** ReplicaState using_applied_state_key */
                using_applied_state_key?: (boolean|null);
            }

            /** Represents a ReplicaState. */
            class ReplicaState implements IReplicaState {

                /**
                 * Constructs a new ReplicaState.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.storagepb.IReplicaState);

                /** ReplicaState raft_applied_index. */
                public raft_applied_index: Long;

                /** ReplicaState lease_applied_index. */
                public lease_applied_index: Long;

                /** ReplicaState desc. */
                public desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** ReplicaState lease. */
                public lease?: (cockroach.roachpb.ILease|null);

                /** ReplicaState truncated_state. */
                public truncated_state?: (cockroach.roachpb.IRaftTruncatedState|null);

                /** ReplicaState gc_threshold. */
                public gc_threshold?: (cockroach.util.hlc.ITimestamp|null);

                /** ReplicaState stats. */
                public stats?: (cockroach.storage.engine.enginepb.IMVCCStats|null);

                /** ReplicaState using_applied_state_key. */
                public using_applied_state_key: boolean;

                /**
                 * Creates a new ReplicaState instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ReplicaState instance
                 */
                public static create(properties?: cockroach.storage.storagepb.IReplicaState): cockroach.storage.storagepb.ReplicaState;

                /**
                 * Encodes the specified ReplicaState message. Does not implicitly {@link cockroach.storage.storagepb.ReplicaState.verify|verify} messages.
                 * @param message ReplicaState message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.storage.storagepb.IReplicaState, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReplicaState message, length delimited. Does not implicitly {@link cockroach.storage.storagepb.ReplicaState.verify|verify} messages.
                 * @param message ReplicaState message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.storage.storagepb.IReplicaState, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReplicaState message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ReplicaState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagepb.ReplicaState;

                /**
                 * Decodes a ReplicaState message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ReplicaState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagepb.ReplicaState;

                /**
                 * Verifies a ReplicaState message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReplicaState message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReplicaState
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.storagepb.ReplicaState;

                /**
                 * Creates a plain object from a ReplicaState message. Also converts values to other types if specified.
                 * @param message ReplicaState
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.storage.storagepb.ReplicaState, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReplicaState to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a RangeInfo. */
            interface IRangeInfo {

                /** RangeInfo state */
                state?: (cockroach.storage.storagepb.IReplicaState|null);

                /** RangeInfo last_index */
                last_index?: (Long|null);

                /** RangeInfo num_pending */
                num_pending?: (Long|null);

                /** RangeInfo num_dropped */
                num_dropped?: (Long|null);

                /** RangeInfo raft_log_size */
                raft_log_size?: (Long|null);

                /** RangeInfo raft_log_size_trusted */
                raft_log_size_trusted?: (boolean|null);

                /** RangeInfo approximate_proposal_quota */
                approximate_proposal_quota?: (Long|null);

                /** RangeInfo proposal_quota_base_index */
                proposal_quota_base_index?: (Long|null);

                /** RangeInfo proposal_quota_release_queue */
                proposal_quota_release_queue?: (Long[]|null);

                /** RangeInfo range_max_bytes */
                range_max_bytes?: (Long|null);

                /** RangeInfo newest_closed_timestamp */
                newest_closed_timestamp?: (cockroach.storage.storagepb.RangeInfo.ICTEntry|null);

                /** RangeInfo active_closed_timestamp */
                active_closed_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                /** RangeInfo rangefeed_registrations */
                rangefeed_registrations?: (Long|null);
            }

            /** Represents a RangeInfo. */
            class RangeInfo implements IRangeInfo {

                /**
                 * Constructs a new RangeInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.storagepb.IRangeInfo);

                /** RangeInfo state. */
                public state?: (cockroach.storage.storagepb.IReplicaState|null);

                /** RangeInfo last_index. */
                public last_index: Long;

                /** RangeInfo num_pending. */
                public num_pending: Long;

                /** RangeInfo num_dropped. */
                public num_dropped: Long;

                /** RangeInfo raft_log_size. */
                public raft_log_size: Long;

                /** RangeInfo raft_log_size_trusted. */
                public raft_log_size_trusted: boolean;

                /** RangeInfo approximate_proposal_quota. */
                public approximate_proposal_quota: Long;

                /** RangeInfo proposal_quota_base_index. */
                public proposal_quota_base_index: Long;

                /** RangeInfo proposal_quota_release_queue. */
                public proposal_quota_release_queue: Long[];

                /** RangeInfo range_max_bytes. */
                public range_max_bytes: Long;

                /** RangeInfo newest_closed_timestamp. */
                public newest_closed_timestamp?: (cockroach.storage.storagepb.RangeInfo.ICTEntry|null);

                /** RangeInfo active_closed_timestamp. */
                public active_closed_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                /** RangeInfo rangefeed_registrations. */
                public rangefeed_registrations: Long;

                /**
                 * Creates a new RangeInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns RangeInfo instance
                 */
                public static create(properties?: cockroach.storage.storagepb.IRangeInfo): cockroach.storage.storagepb.RangeInfo;

                /**
                 * Encodes the specified RangeInfo message. Does not implicitly {@link cockroach.storage.storagepb.RangeInfo.verify|verify} messages.
                 * @param message RangeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.storage.storagepb.IRangeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeInfo message, length delimited. Does not implicitly {@link cockroach.storage.storagepb.RangeInfo.verify|verify} messages.
                 * @param message RangeInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.storage.storagepb.IRangeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagepb.RangeInfo;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagepb.RangeInfo;

                /**
                 * Verifies a RangeInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns RangeInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.storagepb.RangeInfo;

                /**
                 * Creates a plain object from a RangeInfo message. Also converts values to other types if specified.
                 * @param message RangeInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.storage.storagepb.RangeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace RangeInfo {

                /** Properties of a CTEntry. */
                interface ICTEntry {

                    /** CTEntry node_id */
                    node_id?: (number|null);

                    /** CTEntry closed_timestamp */
                    closed_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** CTEntry mlai */
                    mlai?: (Long|null);
                }

                /** Represents a CTEntry. */
                class CTEntry implements ICTEntry {

                    /**
                     * Constructs a new CTEntry.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.storagepb.RangeInfo.ICTEntry);

                    /** CTEntry node_id. */
                    public node_id: number;

                    /** CTEntry closed_timestamp. */
                    public closed_timestamp?: (cockroach.util.hlc.ITimestamp|null);

                    /** CTEntry mlai. */
                    public mlai: Long;

                    /**
                     * Creates a new CTEntry instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns CTEntry instance
                     */
                    public static create(properties?: cockroach.storage.storagepb.RangeInfo.ICTEntry): cockroach.storage.storagepb.RangeInfo.CTEntry;

                    /**
                     * Encodes the specified CTEntry message. Does not implicitly {@link cockroach.storage.storagepb.RangeInfo.CTEntry.verify|verify} messages.
                     * @param message CTEntry message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.storage.storagepb.RangeInfo.ICTEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified CTEntry message, length delimited. Does not implicitly {@link cockroach.storage.storagepb.RangeInfo.CTEntry.verify|verify} messages.
                     * @param message CTEntry message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.storagepb.RangeInfo.ICTEntry, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a CTEntry message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns CTEntry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagepb.RangeInfo.CTEntry;

                    /**
                     * Decodes a CTEntry message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns CTEntry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagepb.RangeInfo.CTEntry;

                    /**
                     * Verifies a CTEntry message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a CTEntry message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns CTEntry
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.storagepb.RangeInfo.CTEntry;

                    /**
                     * Creates a plain object from a CTEntry message. Also converts values to other types if specified.
                     * @param message CTEntry
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.storage.storagepb.RangeInfo.CTEntry, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this CTEntry to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a LatchManagerInfo. */
            interface ILatchManagerInfo {

                /** LatchManagerInfo read_count */
                read_count?: (Long|null);

                /** LatchManagerInfo write_count */
                write_count?: (Long|null);
            }

            /** Represents a LatchManagerInfo. */
            class LatchManagerInfo implements ILatchManagerInfo {

                /**
                 * Constructs a new LatchManagerInfo.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.storagepb.ILatchManagerInfo);

                /** LatchManagerInfo read_count. */
                public read_count: Long;

                /** LatchManagerInfo write_count. */
                public write_count: Long;

                /**
                 * Creates a new LatchManagerInfo instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LatchManagerInfo instance
                 */
                public static create(properties?: cockroach.storage.storagepb.ILatchManagerInfo): cockroach.storage.storagepb.LatchManagerInfo;

                /**
                 * Encodes the specified LatchManagerInfo message. Does not implicitly {@link cockroach.storage.storagepb.LatchManagerInfo.verify|verify} messages.
                 * @param message LatchManagerInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.storage.storagepb.ILatchManagerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LatchManagerInfo message, length delimited. Does not implicitly {@link cockroach.storage.storagepb.LatchManagerInfo.verify|verify} messages.
                 * @param message LatchManagerInfo message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.storage.storagepb.ILatchManagerInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LatchManagerInfo message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LatchManagerInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagepb.LatchManagerInfo;

                /**
                 * Decodes a LatchManagerInfo message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LatchManagerInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagepb.LatchManagerInfo;

                /**
                 * Verifies a LatchManagerInfo message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LatchManagerInfo message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LatchManagerInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.storagepb.LatchManagerInfo;

                /**
                 * Creates a plain object from a LatchManagerInfo message. Also converts values to other types if specified.
                 * @param message LatchManagerInfo
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.storage.storagepb.LatchManagerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LatchManagerInfo to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** RangeLogEventType enum. */
        enum RangeLogEventType {
            split = 0,
            merge = 3,
            add = 1,
            remove = 2
        }

        /** Properties of a RangeLogEvent. */
        interface IRangeLogEvent {

            /** RangeLogEvent timestamp */
            timestamp?: (google.protobuf.ITimestamp|null);

            /** RangeLogEvent range_id */
            range_id?: (Long|null);

            /** RangeLogEvent store_id */
            store_id?: (number|null);

            /** RangeLogEvent event_type */
            event_type?: (cockroach.storage.RangeLogEventType|null);

            /** RangeLogEvent other_range_id */
            other_range_id?: (Long|null);

            /** RangeLogEvent info */
            info?: (cockroach.storage.RangeLogEvent.IInfo|null);
        }

        /** Represents a RangeLogEvent. */
        class RangeLogEvent implements IRangeLogEvent {

            /**
             * Constructs a new RangeLogEvent.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.storage.IRangeLogEvent);

            /** RangeLogEvent timestamp. */
            public timestamp?: (google.protobuf.ITimestamp|null);

            /** RangeLogEvent range_id. */
            public range_id: Long;

            /** RangeLogEvent store_id. */
            public store_id: number;

            /** RangeLogEvent event_type. */
            public event_type: cockroach.storage.RangeLogEventType;

            /** RangeLogEvent other_range_id. */
            public other_range_id: Long;

            /** RangeLogEvent info. */
            public info?: (cockroach.storage.RangeLogEvent.IInfo|null);

            /**
             * Creates a new RangeLogEvent instance using the specified properties.
             * @param [properties] Properties to set
             * @returns RangeLogEvent instance
             */
            public static create(properties?: cockroach.storage.IRangeLogEvent): cockroach.storage.RangeLogEvent;

            /**
             * Encodes the specified RangeLogEvent message. Does not implicitly {@link cockroach.storage.RangeLogEvent.verify|verify} messages.
             * @param message RangeLogEvent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.storage.IRangeLogEvent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RangeLogEvent message, length delimited. Does not implicitly {@link cockroach.storage.RangeLogEvent.verify|verify} messages.
             * @param message RangeLogEvent message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.storage.IRangeLogEvent, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RangeLogEvent message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns RangeLogEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.RangeLogEvent;

            /**
             * Decodes a RangeLogEvent message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns RangeLogEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.RangeLogEvent;

            /**
             * Verifies a RangeLogEvent message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a RangeLogEvent message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns RangeLogEvent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.storage.RangeLogEvent;

            /**
             * Creates a plain object from a RangeLogEvent message. Also converts values to other types if specified.
             * @param message RangeLogEvent
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.storage.RangeLogEvent, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this RangeLogEvent to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace RangeLogEvent {

            /** Properties of an Info. */
            interface IInfo {

                /** Info updated_desc */
                updated_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info new_desc */
                new_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info removed_desc */
                removed_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info added_replica */
                added_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

                /** Info removed_replica */
                removed_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

                /** Info reason */
                reason?: (string|null);

                /** Info details */
                details?: (string|null);
            }

            /** Represents an Info. */
            class Info implements IInfo {

                /**
                 * Constructs a new Info.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.RangeLogEvent.IInfo);

                /** Info updated_desc. */
                public updated_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info new_desc. */
                public new_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info removed_desc. */
                public removed_desc?: (cockroach.roachpb.IRangeDescriptor|null);

                /** Info added_replica. */
                public added_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

                /** Info removed_replica. */
                public removed_replica?: (cockroach.roachpb.IReplicaDescriptor|null);

                /** Info reason. */
                public reason: string;

                /** Info details. */
                public details: string;

                /**
                 * Creates a new Info instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Info instance
                 */
                public static create(properties?: cockroach.storage.RangeLogEvent.IInfo): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Encodes the specified Info message. Does not implicitly {@link cockroach.storage.RangeLogEvent.Info.verify|verify} messages.
                 * @param message Info message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.storage.RangeLogEvent.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.storage.RangeLogEvent.Info.verify|verify} messages.
                 * @param message Info message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.storage.RangeLogEvent.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Info message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Info
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Decodes an Info message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Info
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Verifies an Info message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Info message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Info
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Creates a plain object from an Info message. Also converts values to other types if specified.
                 * @param message Info
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.storage.RangeLogEvent.Info, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Info to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /** Namespace build. */
    namespace build {

        /** Properties of an Info. */
        interface IInfo {

            /** Info go_version */
            go_version?: (string|null);

            /** Info tag */
            tag?: (string|null);

            /** Info time */
            time?: (string|null);

            /** Info revision */
            revision?: (string|null);

            /** Info cgo_compiler */
            cgo_compiler?: (string|null);

            /** Info cgo_target_triple */
            cgo_target_triple?: (string|null);

            /** Info platform */
            platform?: (string|null);

            /** Info distribution */
            distribution?: (string|null);

            /** Info type */
            type?: (string|null);

            /** Info channel */
            channel?: (string|null);

            /** Info env_channel */
            env_channel?: (string|null);

            /** Info dependencies */
            dependencies?: (string|null);
        }

        /** Represents an Info. */
        class Info implements IInfo {

            /**
             * Constructs a new Info.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.build.IInfo);

            /** Info go_version. */
            public go_version: string;

            /** Info tag. */
            public tag: string;

            /** Info time. */
            public time: string;

            /** Info revision. */
            public revision: string;

            /** Info cgo_compiler. */
            public cgo_compiler: string;

            /** Info cgo_target_triple. */
            public cgo_target_triple: string;

            /** Info platform. */
            public platform: string;

            /** Info distribution. */
            public distribution: string;

            /** Info type. */
            public type: string;

            /** Info channel. */
            public channel: string;

            /** Info env_channel. */
            public env_channel: string;

            /** Info dependencies. */
            public dependencies: string;

            /**
             * Creates a new Info instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Info instance
             */
            public static create(properties?: cockroach.build.IInfo): cockroach.build.Info;

            /**
             * Encodes the specified Info message. Does not implicitly {@link cockroach.build.Info.verify|verify} messages.
             * @param message Info message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.build.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.build.Info.verify|verify} messages.
             * @param message Info message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.build.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Info message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.build.Info;

            /**
             * Decodes an Info message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.build.Info;

            /**
             * Verifies an Info message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Info
             */
            public static fromObject(object: { [k: string]: any }): cockroach.build.Info;

            /**
             * Creates a plain object from an Info message. Also converts values to other types if specified.
             * @param message Info
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.build.Info, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Info to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace gossip. */
    namespace gossip {

        /** Properties of a BootstrapInfo. */
        interface IBootstrapInfo {

            /** BootstrapInfo addresses */
            addresses?: (cockroach.util.IUnresolvedAddr[]|null);

            /** BootstrapInfo timestamp */
            timestamp?: (cockroach.util.hlc.ITimestamp|null);
        }

        /** Represents a BootstrapInfo. */
        class BootstrapInfo implements IBootstrapInfo {

            /**
             * Constructs a new BootstrapInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IBootstrapInfo);

            /** BootstrapInfo addresses. */
            public addresses: cockroach.util.IUnresolvedAddr[];

            /** BootstrapInfo timestamp. */
            public timestamp?: (cockroach.util.hlc.ITimestamp|null);

            /**
             * Creates a new BootstrapInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns BootstrapInfo instance
             */
            public static create(properties?: cockroach.gossip.IBootstrapInfo): cockroach.gossip.BootstrapInfo;

            /**
             * Encodes the specified BootstrapInfo message. Does not implicitly {@link cockroach.gossip.BootstrapInfo.verify|verify} messages.
             * @param message BootstrapInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IBootstrapInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BootstrapInfo message, length delimited. Does not implicitly {@link cockroach.gossip.BootstrapInfo.verify|verify} messages.
             * @param message BootstrapInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IBootstrapInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BootstrapInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns BootstrapInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.BootstrapInfo;

            /**
             * Decodes a BootstrapInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns BootstrapInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.BootstrapInfo;

            /**
             * Verifies a BootstrapInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a BootstrapInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns BootstrapInfo
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.BootstrapInfo;

            /**
             * Creates a plain object from a BootstrapInfo message. Also converts values to other types if specified.
             * @param message BootstrapInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.BootstrapInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this BootstrapInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Request. */
        interface IRequest {

            /** Request node_id */
            node_id?: (number|null);

            /** Request addr */
            addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Request high_water_stamps */
            high_water_stamps?: ({ [k: string]: Long }|null);

            /** Request delta */
            delta?: ({ [k: string]: cockroach.gossip.IInfo }|null);

            /** Request cluster_id */
            cluster_id?: (Uint8Array|null);
        }

        /** Represents a Request. */
        class Request implements IRequest {

            /**
             * Constructs a new Request.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IRequest);

            /** Request node_id. */
            public node_id: number;

            /** Request addr. */
            public addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Request high_water_stamps. */
            public high_water_stamps: { [k: string]: Long };

            /** Request delta. */
            public delta: { [k: string]: cockroach.gossip.IInfo };

            /** Request cluster_id. */
            public cluster_id: Uint8Array;

            /**
             * Creates a new Request instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Request instance
             */
            public static create(properties?: cockroach.gossip.IRequest): cockroach.gossip.Request;

            /**
             * Encodes the specified Request message. Does not implicitly {@link cockroach.gossip.Request.verify|verify} messages.
             * @param message Request message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Request message, length delimited. Does not implicitly {@link cockroach.gossip.Request.verify|verify} messages.
             * @param message Request message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IRequest, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Request message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Request;

            /**
             * Decodes a Request message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Request;

            /**
             * Verifies a Request message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Request
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Request;

            /**
             * Creates a plain object from a Request message. Also converts values to other types if specified.
             * @param message Request
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.Request, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Request to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Response. */
        interface IResponse {

            /** Response node_id */
            node_id?: (number|null);

            /** Response addr */
            addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Response alternate_addr */
            alternate_addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Response alternate_node_id */
            alternate_node_id?: (number|null);

            /** Response delta */
            delta?: ({ [k: string]: cockroach.gossip.IInfo }|null);

            /** Response high_water_stamps */
            high_water_stamps?: ({ [k: string]: Long }|null);
        }

        /** Represents a Response. */
        class Response implements IResponse {

            /**
             * Constructs a new Response.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IResponse);

            /** Response node_id. */
            public node_id: number;

            /** Response addr. */
            public addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Response alternate_addr. */
            public alternate_addr?: (cockroach.util.IUnresolvedAddr|null);

            /** Response alternate_node_id. */
            public alternate_node_id: number;

            /** Response delta. */
            public delta: { [k: string]: cockroach.gossip.IInfo };

            /** Response high_water_stamps. */
            public high_water_stamps: { [k: string]: Long };

            /**
             * Creates a new Response instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Response instance
             */
            public static create(properties?: cockroach.gossip.IResponse): cockroach.gossip.Response;

            /**
             * Encodes the specified Response message. Does not implicitly {@link cockroach.gossip.Response.verify|verify} messages.
             * @param message Response message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Response message, length delimited. Does not implicitly {@link cockroach.gossip.Response.verify|verify} messages.
             * @param message Response message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IResponse, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Response;

            /**
             * Decodes a Response message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Response;

            /**
             * Verifies a Response message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Response message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Response
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Response;

            /**
             * Creates a plain object from a Response message. Also converts values to other types if specified.
             * @param message Response
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.Response, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Response to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ConnStatus. */
        interface IConnStatus {

            /** ConnStatus node_id */
            node_id?: (number|null);

            /** ConnStatus address */
            address?: (string|null);

            /** ConnStatus age_nanos */
            age_nanos?: (Long|null);
        }

        /** Represents a ConnStatus. */
        class ConnStatus implements IConnStatus {

            /**
             * Constructs a new ConnStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IConnStatus);

            /** ConnStatus node_id. */
            public node_id: number;

            /** ConnStatus address. */
            public address: string;

            /** ConnStatus age_nanos. */
            public age_nanos: Long;

            /**
             * Creates a new ConnStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ConnStatus instance
             */
            public static create(properties?: cockroach.gossip.IConnStatus): cockroach.gossip.ConnStatus;

            /**
             * Encodes the specified ConnStatus message. Does not implicitly {@link cockroach.gossip.ConnStatus.verify|verify} messages.
             * @param message ConnStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IConnStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ConnStatus message, length delimited. Does not implicitly {@link cockroach.gossip.ConnStatus.verify|verify} messages.
             * @param message ConnStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IConnStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ConnStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ConnStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.ConnStatus;

            /**
             * Decodes a ConnStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ConnStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.ConnStatus;

            /**
             * Verifies a ConnStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ConnStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ConnStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.ConnStatus;

            /**
             * Creates a plain object from a ConnStatus message. Also converts values to other types if specified.
             * @param message ConnStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.ConnStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ConnStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MetricSnap. */
        interface IMetricSnap {

            /** MetricSnap bytes_received */
            bytes_received?: (Long|null);

            /** MetricSnap bytes_sent */
            bytes_sent?: (Long|null);

            /** MetricSnap infos_received */
            infos_received?: (Long|null);

            /** MetricSnap infos_sent */
            infos_sent?: (Long|null);

            /** MetricSnap conns_refused */
            conns_refused?: (Long|null);
        }

        /** Represents a MetricSnap. */
        class MetricSnap implements IMetricSnap {

            /**
             * Constructs a new MetricSnap.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IMetricSnap);

            /** MetricSnap bytes_received. */
            public bytes_received: Long;

            /** MetricSnap bytes_sent. */
            public bytes_sent: Long;

            /** MetricSnap infos_received. */
            public infos_received: Long;

            /** MetricSnap infos_sent. */
            public infos_sent: Long;

            /** MetricSnap conns_refused. */
            public conns_refused: Long;

            /**
             * Creates a new MetricSnap instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MetricSnap instance
             */
            public static create(properties?: cockroach.gossip.IMetricSnap): cockroach.gossip.MetricSnap;

            /**
             * Encodes the specified MetricSnap message. Does not implicitly {@link cockroach.gossip.MetricSnap.verify|verify} messages.
             * @param message MetricSnap message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IMetricSnap, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MetricSnap message, length delimited. Does not implicitly {@link cockroach.gossip.MetricSnap.verify|verify} messages.
             * @param message MetricSnap message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IMetricSnap, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MetricSnap message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MetricSnap
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.MetricSnap;

            /**
             * Decodes a MetricSnap message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MetricSnap
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.MetricSnap;

            /**
             * Verifies a MetricSnap message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MetricSnap message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MetricSnap
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.MetricSnap;

            /**
             * Creates a plain object from a MetricSnap message. Also converts values to other types if specified.
             * @param message MetricSnap
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.MetricSnap, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MetricSnap to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an OutgoingConnStatus. */
        interface IOutgoingConnStatus {

            /** OutgoingConnStatus conn_status */
            conn_status?: (cockroach.gossip.IConnStatus|null);

            /** OutgoingConnStatus metrics */
            metrics?: (cockroach.gossip.IMetricSnap|null);
        }

        /** Represents an OutgoingConnStatus. */
        class OutgoingConnStatus implements IOutgoingConnStatus {

            /**
             * Constructs a new OutgoingConnStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IOutgoingConnStatus);

            /** OutgoingConnStatus conn_status. */
            public conn_status?: (cockroach.gossip.IConnStatus|null);

            /** OutgoingConnStatus metrics. */
            public metrics?: (cockroach.gossip.IMetricSnap|null);

            /**
             * Creates a new OutgoingConnStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns OutgoingConnStatus instance
             */
            public static create(properties?: cockroach.gossip.IOutgoingConnStatus): cockroach.gossip.OutgoingConnStatus;

            /**
             * Encodes the specified OutgoingConnStatus message. Does not implicitly {@link cockroach.gossip.OutgoingConnStatus.verify|verify} messages.
             * @param message OutgoingConnStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IOutgoingConnStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OutgoingConnStatus message, length delimited. Does not implicitly {@link cockroach.gossip.OutgoingConnStatus.verify|verify} messages.
             * @param message OutgoingConnStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IOutgoingConnStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OutgoingConnStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns OutgoingConnStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.OutgoingConnStatus;

            /**
             * Decodes an OutgoingConnStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns OutgoingConnStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.OutgoingConnStatus;

            /**
             * Verifies an OutgoingConnStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OutgoingConnStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OutgoingConnStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.OutgoingConnStatus;

            /**
             * Creates a plain object from an OutgoingConnStatus message. Also converts values to other types if specified.
             * @param message OutgoingConnStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.OutgoingConnStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OutgoingConnStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ClientStatus. */
        interface IClientStatus {

            /** ClientStatus conn_status */
            conn_status?: (cockroach.gossip.IOutgoingConnStatus[]|null);

            /** ClientStatus max_conns */
            max_conns?: (number|null);
        }

        /** Represents a ClientStatus. */
        class ClientStatus implements IClientStatus {

            /**
             * Constructs a new ClientStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IClientStatus);

            /** ClientStatus conn_status. */
            public conn_status: cockroach.gossip.IOutgoingConnStatus[];

            /** ClientStatus max_conns. */
            public max_conns: number;

            /**
             * Creates a new ClientStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ClientStatus instance
             */
            public static create(properties?: cockroach.gossip.IClientStatus): cockroach.gossip.ClientStatus;

            /**
             * Encodes the specified ClientStatus message. Does not implicitly {@link cockroach.gossip.ClientStatus.verify|verify} messages.
             * @param message ClientStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IClientStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ClientStatus message, length delimited. Does not implicitly {@link cockroach.gossip.ClientStatus.verify|verify} messages.
             * @param message ClientStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IClientStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ClientStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ClientStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.ClientStatus;

            /**
             * Decodes a ClientStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ClientStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.ClientStatus;

            /**
             * Verifies a ClientStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ClientStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ClientStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.ClientStatus;

            /**
             * Creates a plain object from a ClientStatus message. Also converts values to other types if specified.
             * @param message ClientStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.ClientStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ClientStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServerStatus. */
        interface IServerStatus {

            /** ServerStatus conn_status */
            conn_status?: (cockroach.gossip.IConnStatus[]|null);

            /** ServerStatus max_conns */
            max_conns?: (number|null);

            /** ServerStatus metrics */
            metrics?: (cockroach.gossip.IMetricSnap|null);
        }

        /** Represents a ServerStatus. */
        class ServerStatus implements IServerStatus {

            /**
             * Constructs a new ServerStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IServerStatus);

            /** ServerStatus conn_status. */
            public conn_status: cockroach.gossip.IConnStatus[];

            /** ServerStatus max_conns. */
            public max_conns: number;

            /** ServerStatus metrics. */
            public metrics?: (cockroach.gossip.IMetricSnap|null);

            /**
             * Creates a new ServerStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServerStatus instance
             */
            public static create(properties?: cockroach.gossip.IServerStatus): cockroach.gossip.ServerStatus;

            /**
             * Encodes the specified ServerStatus message. Does not implicitly {@link cockroach.gossip.ServerStatus.verify|verify} messages.
             * @param message ServerStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IServerStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServerStatus message, length delimited. Does not implicitly {@link cockroach.gossip.ServerStatus.verify|verify} messages.
             * @param message ServerStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IServerStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServerStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServerStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.ServerStatus;

            /**
             * Decodes a ServerStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServerStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.ServerStatus;

            /**
             * Verifies a ServerStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServerStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServerStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.ServerStatus;

            /**
             * Creates a plain object from a ServerStatus message. Also converts values to other types if specified.
             * @param message ServerStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.ServerStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServerStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Connectivity. */
        interface IConnectivity {

            /** Connectivity sentinel_node_id */
            sentinel_node_id?: (number|null);

            /** Connectivity client_conns */
            client_conns?: (cockroach.gossip.Connectivity.IConn[]|null);
        }

        /** Represents a Connectivity. */
        class Connectivity implements IConnectivity {

            /**
             * Constructs a new Connectivity.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IConnectivity);

            /** Connectivity sentinel_node_id. */
            public sentinel_node_id: number;

            /** Connectivity client_conns. */
            public client_conns: cockroach.gossip.Connectivity.IConn[];

            /**
             * Creates a new Connectivity instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Connectivity instance
             */
            public static create(properties?: cockroach.gossip.IConnectivity): cockroach.gossip.Connectivity;

            /**
             * Encodes the specified Connectivity message. Does not implicitly {@link cockroach.gossip.Connectivity.verify|verify} messages.
             * @param message Connectivity message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IConnectivity, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Connectivity message, length delimited. Does not implicitly {@link cockroach.gossip.Connectivity.verify|verify} messages.
             * @param message Connectivity message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IConnectivity, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Connectivity message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Connectivity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Connectivity;

            /**
             * Decodes a Connectivity message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Connectivity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Connectivity;

            /**
             * Verifies a Connectivity message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Connectivity message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Connectivity
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Connectivity;

            /**
             * Creates a plain object from a Connectivity message. Also converts values to other types if specified.
             * @param message Connectivity
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.Connectivity, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Connectivity to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Connectivity {

            /** Properties of a Conn. */
            interface IConn {

                /** Conn source_id */
                source_id?: (number|null);

                /** Conn target_id */
                target_id?: (number|null);
            }

            /** Represents a Conn. */
            class Conn implements IConn {

                /**
                 * Constructs a new Conn.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.gossip.Connectivity.IConn);

                /** Conn source_id. */
                public source_id: number;

                /** Conn target_id. */
                public target_id: number;

                /**
                 * Creates a new Conn instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Conn instance
                 */
                public static create(properties?: cockroach.gossip.Connectivity.IConn): cockroach.gossip.Connectivity.Conn;

                /**
                 * Encodes the specified Conn message. Does not implicitly {@link cockroach.gossip.Connectivity.Conn.verify|verify} messages.
                 * @param message Conn message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.gossip.Connectivity.IConn, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Conn message, length delimited. Does not implicitly {@link cockroach.gossip.Connectivity.Conn.verify|verify} messages.
                 * @param message Conn message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.gossip.Connectivity.IConn, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Conn message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Conn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Connectivity.Conn;

                /**
                 * Decodes a Conn message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Conn
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Connectivity.Conn;

                /**
                 * Verifies a Conn message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Conn message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Conn
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.gossip.Connectivity.Conn;

                /**
                 * Creates a plain object from a Conn message. Also converts values to other types if specified.
                 * @param message Conn
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.gossip.Connectivity.Conn, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Conn to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an InfoStatus. */
        interface IInfoStatus {

            /** InfoStatus infos */
            infos?: ({ [k: string]: cockroach.gossip.IInfo }|null);

            /** InfoStatus client */
            client?: (cockroach.gossip.IClientStatus|null);

            /** InfoStatus server */
            server?: (cockroach.gossip.IServerStatus|null);

            /** InfoStatus connectivity */
            connectivity?: (cockroach.gossip.IConnectivity|null);
        }

        /** Represents an InfoStatus. */
        class InfoStatus implements IInfoStatus {

            /**
             * Constructs a new InfoStatus.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IInfoStatus);

            /** InfoStatus infos. */
            public infos: { [k: string]: cockroach.gossip.IInfo };

            /** InfoStatus client. */
            public client?: (cockroach.gossip.IClientStatus|null);

            /** InfoStatus server. */
            public server?: (cockroach.gossip.IServerStatus|null);

            /** InfoStatus connectivity. */
            public connectivity?: (cockroach.gossip.IConnectivity|null);

            /**
             * Creates a new InfoStatus instance using the specified properties.
             * @param [properties] Properties to set
             * @returns InfoStatus instance
             */
            public static create(properties?: cockroach.gossip.IInfoStatus): cockroach.gossip.InfoStatus;

            /**
             * Encodes the specified InfoStatus message. Does not implicitly {@link cockroach.gossip.InfoStatus.verify|verify} messages.
             * @param message InfoStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IInfoStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified InfoStatus message, length delimited. Does not implicitly {@link cockroach.gossip.InfoStatus.verify|verify} messages.
             * @param message InfoStatus message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IInfoStatus, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an InfoStatus message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns InfoStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.InfoStatus;

            /**
             * Decodes an InfoStatus message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns InfoStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.InfoStatus;

            /**
             * Verifies an InfoStatus message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an InfoStatus message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns InfoStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.InfoStatus;

            /**
             * Creates a plain object from an InfoStatus message. Also converts values to other types if specified.
             * @param message InfoStatus
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.InfoStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this InfoStatus to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an Info. */
        interface IInfo {

            /** Info value */
            value?: (cockroach.roachpb.IValue|null);

            /** Info orig_stamp */
            orig_stamp?: (Long|null);

            /** Info ttl_stamp */
            ttl_stamp?: (Long|null);

            /** Info hops */
            hops?: (number|null);

            /** Info node_id */
            node_id?: (number|null);

            /** Info peer_id */
            peer_id?: (number|null);
        }

        /** Represents an Info. */
        class Info implements IInfo {

            /**
             * Constructs a new Info.
             * @param [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.IInfo);

            /** Info value. */
            public value?: (cockroach.roachpb.IValue|null);

            /** Info orig_stamp. */
            public orig_stamp: Long;

            /** Info ttl_stamp. */
            public ttl_stamp: Long;

            /** Info hops. */
            public hops: number;

            /** Info node_id. */
            public node_id: number;

            /** Info peer_id. */
            public peer_id: number;

            /**
             * Creates a new Info instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Info instance
             */
            public static create(properties?: cockroach.gossip.IInfo): cockroach.gossip.Info;

            /**
             * Encodes the specified Info message. Does not implicitly {@link cockroach.gossip.Info.verify|verify} messages.
             * @param message Info message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: cockroach.gossip.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.gossip.Info.verify|verify} messages.
             * @param message Info message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: cockroach.gossip.IInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Info message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Info;

            /**
             * Decodes an Info message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Info;

            /**
             * Verifies an Info message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Info
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Info;

            /**
             * Creates a plain object from an Info message. Also converts values to other types if specified.
             * @param message Info
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: cockroach.gossip.Info, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Info to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Represents a Gossip */
        class Gossip extends $protobuf.rpc.Service {

            /**
             * Constructs a new Gossip service.
             * @param rpcImpl RPC implementation
             * @param [requestDelimited=false] Whether requests are length-delimited
             * @param [responseDelimited=false] Whether responses are length-delimited
             */
            constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

            /**
             * Creates new Gossip service using the specified rpc implementation.
             * @param rpcImpl RPC implementation
             * @param [requestDelimited=false] Whether requests are length-delimited
             * @param [responseDelimited=false] Whether responses are length-delimited
             * @returns RPC service. Useful where requests and/or responses are streamed.
             */
            public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Gossip;

            /**
             * Calls Gossip.
             * @param request Request message or plain object
             * @param callback Node-style callback called with the error, if any, and Response
             */
            public gossip(request: cockroach.gossip.IRequest, callback: cockroach.gossip.Gossip.GossipCallback): void;

            /**
             * Calls Gossip.
             * @param request Request message or plain object
             * @returns Promise
             */
            public gossip(request: cockroach.gossip.IRequest): Promise<cockroach.gossip.Response>;
        }

        namespace Gossip {

            /**
             * Callback as used by {@link cockroach.gossip.Gossip#gossip}.
             * @param error Error, if any
             * @param [response] Response
             */
            type GossipCallback = (error: (Error|null), response?: cockroach.gossip.Response) => void;
        }
    }

    /** Namespace ts. */
    namespace ts {

        /** Namespace catalog. */
        namespace catalog {

            /** AxisUnits enum. */
            enum AxisUnits {
                UNSET_UNITS = 0,
                COUNT = 1,
                BYTES = 2,
                DURATION = 3
            }

            /** DescribeAggregator enum. */
            enum DescribeAggregator {
                UNSET_AGG = 0,
                AVG = 1,
                SUM = 2,
                MAX = 3,
                MIN = 4
            }

            /** DescribeDerivative enum. */
            enum DescribeDerivative {
                UNSET_DER = 0,
                NONE = 1,
                DERIVATIVE = 2,
                NON_NEGATIVE_DERIVATIVE = 3
            }

            /** Properties of a ChartMetric. */
            interface IChartMetric {

                /** ChartMetric name */
                name: string;

                /** ChartMetric help */
                help: string;

                /** ChartMetric axisLabel */
                axisLabel: string;

                /** ChartMetric preferredUnits */
                preferredUnits: cockroach.ts.catalog.AxisUnits;

                /** ChartMetric metricType */
                metricType?: (io.prometheus.client.MetricType|null);
            }

            /** Represents a ChartMetric. */
            class ChartMetric implements IChartMetric {

                /**
                 * Constructs a new ChartMetric.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.catalog.IChartMetric);

                /** ChartMetric name. */
                public name: string;

                /** ChartMetric help. */
                public help: string;

                /** ChartMetric axisLabel. */
                public axisLabel: string;

                /** ChartMetric preferredUnits. */
                public preferredUnits: cockroach.ts.catalog.AxisUnits;

                /** ChartMetric metricType. */
                public metricType: io.prometheus.client.MetricType;

                /**
                 * Creates a new ChartMetric instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ChartMetric instance
                 */
                public static create(properties?: cockroach.ts.catalog.IChartMetric): cockroach.ts.catalog.ChartMetric;

                /**
                 * Encodes the specified ChartMetric message. Does not implicitly {@link cockroach.ts.catalog.ChartMetric.verify|verify} messages.
                 * @param message ChartMetric message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.catalog.IChartMetric, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ChartMetric message, length delimited. Does not implicitly {@link cockroach.ts.catalog.ChartMetric.verify|verify} messages.
                 * @param message ChartMetric message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.catalog.IChartMetric, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ChartMetric message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ChartMetric
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.catalog.ChartMetric;

                /**
                 * Decodes a ChartMetric message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ChartMetric
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.catalog.ChartMetric;

                /**
                 * Verifies a ChartMetric message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ChartMetric message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ChartMetric
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.catalog.ChartMetric;

                /**
                 * Creates a plain object from a ChartMetric message. Also converts values to other types if specified.
                 * @param message ChartMetric
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.catalog.ChartMetric, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ChartMetric to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an IndividualChart. */
            interface IIndividualChart {

                /** IndividualChart title */
                title: string;

                /** IndividualChart longTitle */
                longTitle: string;

                /** IndividualChart collectionTitle */
                collectionTitle: string;

                /** IndividualChart downsampler */
                downsampler: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** IndividualChart aggregator */
                aggregator: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** IndividualChart derivative */
                derivative: cockroach.ts.tspb.TimeSeriesQueryDerivative;

                /** IndividualChart units */
                units: cockroach.ts.catalog.AxisUnits;

                /** IndividualChart axisLabel */
                axisLabel: string;

                /** IndividualChart percentiles */
                percentiles: boolean;

                /** IndividualChart metrics */
                metrics?: (cockroach.ts.catalog.IChartMetric[]|null);
            }

            /** Represents an IndividualChart. */
            class IndividualChart implements IIndividualChart {

                /**
                 * Constructs a new IndividualChart.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.catalog.IIndividualChart);

                /** IndividualChart title. */
                public title: string;

                /** IndividualChart longTitle. */
                public longTitle: string;

                /** IndividualChart collectionTitle. */
                public collectionTitle: string;

                /** IndividualChart downsampler. */
                public downsampler: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** IndividualChart aggregator. */
                public aggregator: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** IndividualChart derivative. */
                public derivative: cockroach.ts.tspb.TimeSeriesQueryDerivative;

                /** IndividualChart units. */
                public units: cockroach.ts.catalog.AxisUnits;

                /** IndividualChart axisLabel. */
                public axisLabel: string;

                /** IndividualChart percentiles. */
                public percentiles: boolean;

                /** IndividualChart metrics. */
                public metrics: cockroach.ts.catalog.IChartMetric[];

                /**
                 * Creates a new IndividualChart instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns IndividualChart instance
                 */
                public static create(properties?: cockroach.ts.catalog.IIndividualChart): cockroach.ts.catalog.IndividualChart;

                /**
                 * Encodes the specified IndividualChart message. Does not implicitly {@link cockroach.ts.catalog.IndividualChart.verify|verify} messages.
                 * @param message IndividualChart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.catalog.IIndividualChart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified IndividualChart message, length delimited. Does not implicitly {@link cockroach.ts.catalog.IndividualChart.verify|verify} messages.
                 * @param message IndividualChart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.catalog.IIndividualChart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an IndividualChart message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns IndividualChart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.catalog.IndividualChart;

                /**
                 * Decodes an IndividualChart message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns IndividualChart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.catalog.IndividualChart;

                /**
                 * Verifies an IndividualChart message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an IndividualChart message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns IndividualChart
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.catalog.IndividualChart;

                /**
                 * Creates a plain object from an IndividualChart message. Also converts values to other types if specified.
                 * @param message IndividualChart
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.catalog.IndividualChart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this IndividualChart to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ChartSection. */
            interface IChartSection {

                /** ChartSection title */
                title: string;

                /** ChartSection longTitle */
                longTitle: string;

                /** ChartSection collectionTitle */
                collectionTitle: string;

                /** ChartSection description */
                description: string;

                /** ChartSection level */
                level: number;

                /** ChartSection subsections */
                subsections?: (cockroach.ts.catalog.IChartSection[]|null);

                /** ChartSection charts */
                charts?: (cockroach.ts.catalog.IIndividualChart[]|null);
            }

            /** Represents a ChartSection. */
            class ChartSection implements IChartSection {

                /**
                 * Constructs a new ChartSection.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.catalog.IChartSection);

                /** ChartSection title. */
                public title: string;

                /** ChartSection longTitle. */
                public longTitle: string;

                /** ChartSection collectionTitle. */
                public collectionTitle: string;

                /** ChartSection description. */
                public description: string;

                /** ChartSection level. */
                public level: number;

                /** ChartSection subsections. */
                public subsections: cockroach.ts.catalog.IChartSection[];

                /** ChartSection charts. */
                public charts: cockroach.ts.catalog.IIndividualChart[];

                /**
                 * Creates a new ChartSection instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ChartSection instance
                 */
                public static create(properties?: cockroach.ts.catalog.IChartSection): cockroach.ts.catalog.ChartSection;

                /**
                 * Encodes the specified ChartSection message. Does not implicitly {@link cockroach.ts.catalog.ChartSection.verify|verify} messages.
                 * @param message ChartSection message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.catalog.IChartSection, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ChartSection message, length delimited. Does not implicitly {@link cockroach.ts.catalog.ChartSection.verify|verify} messages.
                 * @param message ChartSection message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.catalog.IChartSection, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ChartSection message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ChartSection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.catalog.ChartSection;

                /**
                 * Decodes a ChartSection message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ChartSection
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.catalog.ChartSection;

                /**
                 * Verifies a ChartSection message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ChartSection message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ChartSection
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.catalog.ChartSection;

                /**
                 * Creates a plain object from a ChartSection message. Also converts values to other types if specified.
                 * @param message ChartSection
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.catalog.ChartSection, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ChartSection to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Namespace tspb. */
        namespace tspb {

            /** Properties of a TimeSeriesDatapoint. */
            interface ITimeSeriesDatapoint {

                /** TimeSeriesDatapoint timestamp_nanos */
                timestamp_nanos?: (Long|null);

                /** TimeSeriesDatapoint value */
                value?: (number|null);
            }

            /** Represents a TimeSeriesDatapoint. */
            class TimeSeriesDatapoint implements ITimeSeriesDatapoint {

                /**
                 * Constructs a new TimeSeriesDatapoint.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.ITimeSeriesDatapoint);

                /** TimeSeriesDatapoint timestamp_nanos. */
                public timestamp_nanos: Long;

                /** TimeSeriesDatapoint value. */
                public value: number;

                /**
                 * Creates a new TimeSeriesDatapoint instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimeSeriesDatapoint instance
                 */
                public static create(properties?: cockroach.ts.tspb.ITimeSeriesDatapoint): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Encodes the specified TimeSeriesDatapoint message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesDatapoint.verify|verify} messages.
                 * @param message TimeSeriesDatapoint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.ITimeSeriesDatapoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesDatapoint message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesDatapoint.verify|verify} messages.
                 * @param message TimeSeriesDatapoint message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.ITimeSeriesDatapoint, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesDatapoint message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimeSeriesDatapoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Decodes a TimeSeriesDatapoint message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimeSeriesDatapoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Verifies a TimeSeriesDatapoint message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimeSeriesDatapoint message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimeSeriesDatapoint
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Creates a plain object from a TimeSeriesDatapoint message. Also converts values to other types if specified.
                 * @param message TimeSeriesDatapoint
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesDatapoint, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesDatapoint to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TimeSeriesData. */
            interface ITimeSeriesData {

                /** TimeSeriesData name */
                name?: (string|null);

                /** TimeSeriesData source */
                source?: (string|null);

                /** TimeSeriesData datapoints */
                datapoints?: (cockroach.ts.tspb.ITimeSeriesDatapoint[]|null);
            }

            /** Represents a TimeSeriesData. */
            class TimeSeriesData implements ITimeSeriesData {

                /**
                 * Constructs a new TimeSeriesData.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.ITimeSeriesData);

                /** TimeSeriesData name. */
                public name: string;

                /** TimeSeriesData source. */
                public source: string;

                /** TimeSeriesData datapoints. */
                public datapoints: cockroach.ts.tspb.ITimeSeriesDatapoint[];

                /**
                 * Creates a new TimeSeriesData instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimeSeriesData instance
                 */
                public static create(properties?: cockroach.ts.tspb.ITimeSeriesData): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Encodes the specified TimeSeriesData message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesData.verify|verify} messages.
                 * @param message TimeSeriesData message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.ITimeSeriesData, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesData message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesData.verify|verify} messages.
                 * @param message TimeSeriesData message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.ITimeSeriesData, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesData message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimeSeriesData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Decodes a TimeSeriesData message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimeSeriesData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Verifies a TimeSeriesData message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimeSeriesData message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimeSeriesData
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Creates a plain object from a TimeSeriesData message. Also converts values to other types if specified.
                 * @param message TimeSeriesData
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesData, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesData to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** TimeSeriesQueryAggregator enum. */
            enum TimeSeriesQueryAggregator {
                AVG = 1,
                SUM = 2,
                MAX = 3,
                MIN = 4,
                FIRST = 5,
                LAST = 6,
                VARIANCE = 7
            }

            /** TimeSeriesQueryDerivative enum. */
            enum TimeSeriesQueryDerivative {
                NONE = 0,
                DERIVATIVE = 1,
                NON_NEGATIVE_DERIVATIVE = 2
            }

            /** Properties of a Query. */
            interface IQuery {

                /** Query name */
                name?: (string|null);

                /** Query downsampler */
                downsampler?: (cockroach.ts.tspb.TimeSeriesQueryAggregator|null);

                /** Query source_aggregator */
                source_aggregator?: (cockroach.ts.tspb.TimeSeriesQueryAggregator|null);

                /** Query derivative */
                derivative?: (cockroach.ts.tspb.TimeSeriesQueryDerivative|null);

                /** Query sources */
                sources?: (string[]|null);
            }

            /** Represents a Query. */
            class Query implements IQuery {

                /**
                 * Constructs a new Query.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.IQuery);

                /** Query name. */
                public name: string;

                /** Query downsampler. */
                public downsampler: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** Query source_aggregator. */
                public source_aggregator: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /** Query derivative. */
                public derivative: cockroach.ts.tspb.TimeSeriesQueryDerivative;

                /** Query sources. */
                public sources: string[];

                /**
                 * Creates a new Query instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Query instance
                 */
                public static create(properties?: cockroach.ts.tspb.IQuery): cockroach.ts.tspb.Query;

                /**
                 * Encodes the specified Query message. Does not implicitly {@link cockroach.ts.tspb.Query.verify|verify} messages.
                 * @param message Query message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.IQuery, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Query message, length delimited. Does not implicitly {@link cockroach.ts.tspb.Query.verify|verify} messages.
                 * @param message Query message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.IQuery, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Query message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Query
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.Query;

                /**
                 * Decodes a Query message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Query
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.Query;

                /**
                 * Verifies a Query message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Query message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Query
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.Query;

                /**
                 * Creates a plain object from a Query message. Also converts values to other types if specified.
                 * @param message Query
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.Query, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Query to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TimeSeriesQueryRequest. */
            interface ITimeSeriesQueryRequest {

                /** TimeSeriesQueryRequest start_nanos */
                start_nanos?: (Long|null);

                /** TimeSeriesQueryRequest end_nanos */
                end_nanos?: (Long|null);

                /** TimeSeriesQueryRequest queries */
                queries?: (cockroach.ts.tspb.IQuery[]|null);

                /** TimeSeriesQueryRequest sample_nanos */
                sample_nanos?: (Long|null);
            }

            /** Represents a TimeSeriesQueryRequest. */
            class TimeSeriesQueryRequest implements ITimeSeriesQueryRequest {

                /**
                 * Constructs a new TimeSeriesQueryRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.ITimeSeriesQueryRequest);

                /** TimeSeriesQueryRequest start_nanos. */
                public start_nanos: Long;

                /** TimeSeriesQueryRequest end_nanos. */
                public end_nanos: Long;

                /** TimeSeriesQueryRequest queries. */
                public queries: cockroach.ts.tspb.IQuery[];

                /** TimeSeriesQueryRequest sample_nanos. */
                public sample_nanos: Long;

                /**
                 * Creates a new TimeSeriesQueryRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimeSeriesQueryRequest instance
                 */
                public static create(properties?: cockroach.ts.tspb.ITimeSeriesQueryRequest): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Encodes the specified TimeSeriesQueryRequest message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryRequest.verify|verify} messages.
                 * @param message TimeSeriesQueryRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.ITimeSeriesQueryRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesQueryRequest message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryRequest.verify|verify} messages.
                 * @param message TimeSeriesQueryRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.ITimeSeriesQueryRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesQueryRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimeSeriesQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Decodes a TimeSeriesQueryRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimeSeriesQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Verifies a TimeSeriesQueryRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimeSeriesQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimeSeriesQueryRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Creates a plain object from a TimeSeriesQueryRequest message. Also converts values to other types if specified.
                 * @param message TimeSeriesQueryRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesQueryRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a TimeSeriesQueryResponse. */
            interface ITimeSeriesQueryResponse {

                /** TimeSeriesQueryResponse results */
                results?: (cockroach.ts.tspb.TimeSeriesQueryResponse.IResult[]|null);
            }

            /** Represents a TimeSeriesQueryResponse. */
            class TimeSeriesQueryResponse implements ITimeSeriesQueryResponse {

                /**
                 * Constructs a new TimeSeriesQueryResponse.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.ITimeSeriesQueryResponse);

                /** TimeSeriesQueryResponse results. */
                public results: cockroach.ts.tspb.TimeSeriesQueryResponse.IResult[];

                /**
                 * Creates a new TimeSeriesQueryResponse instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns TimeSeriesQueryResponse instance
                 */
                public static create(properties?: cockroach.ts.tspb.ITimeSeriesQueryResponse): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Encodes the specified TimeSeriesQueryResponse message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.verify|verify} messages.
                 * @param message TimeSeriesQueryResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.ITimeSeriesQueryResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesQueryResponse message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.verify|verify} messages.
                 * @param message TimeSeriesQueryResponse message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.ITimeSeriesQueryResponse, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesQueryResponse message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns TimeSeriesQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Decodes a TimeSeriesQueryResponse message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns TimeSeriesQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Verifies a TimeSeriesQueryResponse message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a TimeSeriesQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns TimeSeriesQueryResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Creates a plain object from a TimeSeriesQueryResponse message. Also converts values to other types if specified.
                 * @param message TimeSeriesQueryResponse
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryResponse, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesQueryResponse to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TimeSeriesQueryResponse {

                /** Properties of a Result. */
                interface IResult {

                    /** Result query */
                    query?: (cockroach.ts.tspb.IQuery|null);

                    /** Result datapoints */
                    datapoints?: (cockroach.ts.tspb.ITimeSeriesDatapoint[]|null);
                }

                /** Represents a Result. */
                class Result implements IResult {

                    /**
                     * Constructs a new Result.
                     * @param [properties] Properties to set
                     */
                    constructor(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse.IResult);

                    /** Result query. */
                    public query?: (cockroach.ts.tspb.IQuery|null);

                    /** Result datapoints. */
                    public datapoints: cockroach.ts.tspb.ITimeSeriesDatapoint[];

                    /**
                     * Creates a new Result instance using the specified properties.
                     * @param [properties] Properties to set
                     * @returns Result instance
                     */
                    public static create(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse.IResult): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Encodes the specified Result message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.Result.verify|verify} messages.
                     * @param message Result message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encode(message: cockroach.ts.tspb.TimeSeriesQueryResponse.IResult, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Result message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.Result.verify|verify} messages.
                     * @param message Result message or plain object to encode
                     * @param [writer] Writer to encode to
                     * @returns Writer
                     */
                    public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesQueryResponse.IResult, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Result message from the specified reader or buffer.
                     * @param reader Reader or buffer to decode from
                     * @param [length] Message length if known beforehand
                     * @returns Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Decodes a Result message from the specified reader or buffer, length delimited.
                     * @param reader Reader or buffer to decode from
                     * @returns Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Verifies a Result message.
                     * @param message Plain object to verify
                     * @returns `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): (string|null);

                    /**
                     * Creates a Result message from a plain object. Also converts values to their respective internal types.
                     * @param object Plain object
                     * @returns Result
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Creates a plain object from a Result message. Also converts values to other types if specified.
                     * @param message Result
                     * @param [options] Conversion options
                     * @returns Plain object
                     */
                    public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryResponse.Result, options?: $protobuf.IConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Result to JSON.
                     * @returns JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /** Properties of a DumpRequest. */
            interface IDumpRequest {
            }

            /** Represents a DumpRequest. */
            class DumpRequest implements IDumpRequest {

                /**
                 * Constructs a new DumpRequest.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.IDumpRequest);

                /**
                 * Creates a new DumpRequest instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns DumpRequest instance
                 */
                public static create(properties?: cockroach.ts.tspb.IDumpRequest): cockroach.ts.tspb.DumpRequest;

                /**
                 * Encodes the specified DumpRequest message. Does not implicitly {@link cockroach.ts.tspb.DumpRequest.verify|verify} messages.
                 * @param message DumpRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: cockroach.ts.tspb.IDumpRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DumpRequest message, length delimited. Does not implicitly {@link cockroach.ts.tspb.DumpRequest.verify|verify} messages.
                 * @param message DumpRequest message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.IDumpRequest, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DumpRequest message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns DumpRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.DumpRequest;

                /**
                 * Decodes a DumpRequest message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns DumpRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.DumpRequest;

                /**
                 * Verifies a DumpRequest message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a DumpRequest message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns DumpRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.DumpRequest;

                /**
                 * Creates a plain object from a DumpRequest message. Also converts values to other types if specified.
                 * @param message DumpRequest
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.DumpRequest, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this DumpRequest to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Represents a TimeSeries */
            class TimeSeries extends $protobuf.rpc.Service {

                /**
                 * Constructs a new TimeSeries service.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new TimeSeries service using the specified rpc implementation.
                 * @param rpcImpl RPC implementation
                 * @param [requestDelimited=false] Whether requests are length-delimited
                 * @param [responseDelimited=false] Whether responses are length-delimited
                 * @returns RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): TimeSeries;

                /**
                 * Calls Query.
                 * @param request TimeSeriesQueryRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and TimeSeriesQueryResponse
                 */
                public query(request: cockroach.ts.tspb.ITimeSeriesQueryRequest, callback: cockroach.ts.tspb.TimeSeries.QueryCallback): void;

                /**
                 * Calls Query.
                 * @param request TimeSeriesQueryRequest message or plain object
                 * @returns Promise
                 */
                public query(request: cockroach.ts.tspb.ITimeSeriesQueryRequest): Promise<cockroach.ts.tspb.TimeSeriesQueryResponse>;

                /**
                 * Calls Dump.
                 * @param request DumpRequest message or plain object
                 * @param callback Node-style callback called with the error, if any, and TimeSeriesData
                 */
                public dump(request: cockroach.ts.tspb.IDumpRequest, callback: cockroach.ts.tspb.TimeSeries.DumpCallback): void;

                /**
                 * Calls Dump.
                 * @param request DumpRequest message or plain object
                 * @returns Promise
                 */
                public dump(request: cockroach.ts.tspb.IDumpRequest): Promise<cockroach.ts.tspb.TimeSeriesData>;
            }

            namespace TimeSeries {

                /**
                 * Callback as used by {@link cockroach.ts.tspb.TimeSeries#query}.
                 * @param error Error, if any
                 * @param [response] TimeSeriesQueryResponse
                 */
                type QueryCallback = (error: (Error|null), response?: cockroach.ts.tspb.TimeSeriesQueryResponse) => void;

                /**
                 * Callback as used by {@link cockroach.ts.tspb.TimeSeries#dump}.
                 * @param error Error, if any
                 * @param [response] TimeSeriesData
                 */
                type DumpCallback = (error: (Error|null), response?: cockroach.ts.tspb.TimeSeriesData) => void;
            }
        }
    }
}

/** Namespace google. */
export namespace google {

    /** Namespace protobuf. */
    namespace protobuf {

        /** Properties of a FileDescriptorSet. */
        interface IFileDescriptorSet {

            /** FileDescriptorSet file */
            file?: (google.protobuf.IFileDescriptorProto[]|null);
        }

        /** Represents a FileDescriptorSet. */
        class FileDescriptorSet implements IFileDescriptorSet {

            /**
             * Constructs a new FileDescriptorSet.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorSet);

            /** FileDescriptorSet file. */
            public file: google.protobuf.IFileDescriptorProto[];

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileDescriptorSet instance
             */
            public static create(properties?: google.protobuf.IFileDescriptorSet): google.protobuf.FileDescriptorSet;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param message FileDescriptorSet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileDescriptorSet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param message FileDescriptorSet message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileDescriptorSet, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorSet;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorSet;

            /**
             * Verifies a FileDescriptorSet message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorSet
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorSet;

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @param message FileDescriptorSet
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorSet, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileDescriptorProto. */
        interface IFileDescriptorProto {

            /** FileDescriptorProto name */
            name?: (string|null);

            /** FileDescriptorProto package */
            "package"?: (string|null);

            /** FileDescriptorProto dependency */
            dependency?: (string[]|null);

            /** FileDescriptorProto public_dependency */
            public_dependency?: (number[]|null);

            /** FileDescriptorProto weak_dependency */
            weak_dependency?: (number[]|null);

            /** FileDescriptorProto message_type */
            message_type?: (google.protobuf.IDescriptorProto[]|null);

            /** FileDescriptorProto enum_type */
            enum_type?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** FileDescriptorProto service */
            service?: (google.protobuf.IServiceDescriptorProto[]|null);

            /** FileDescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** FileDescriptorProto options */
            options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto source_code_info */
            source_code_info?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax */
            syntax?: (string|null);
        }

        /** Represents a FileDescriptorProto. */
        class FileDescriptorProto implements IFileDescriptorProto {

            /**
             * Constructs a new FileDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileDescriptorProto);

            /** FileDescriptorProto name. */
            public name: string;

            /** FileDescriptorProto package. */
            public package: string;

            /** FileDescriptorProto dependency. */
            public dependency: string[];

            /** FileDescriptorProto public_dependency. */
            public public_dependency: number[];

            /** FileDescriptorProto weak_dependency. */
            public weak_dependency: number[];

            /** FileDescriptorProto message_type. */
            public message_type: google.protobuf.IDescriptorProto[];

            /** FileDescriptorProto enum_type. */
            public enum_type: google.protobuf.IEnumDescriptorProto[];

            /** FileDescriptorProto service. */
            public service: google.protobuf.IServiceDescriptorProto[];

            /** FileDescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** FileDescriptorProto options. */
            public options?: (google.protobuf.IFileOptions|null);

            /** FileDescriptorProto source_code_info. */
            public source_code_info?: (google.protobuf.ISourceCodeInfo|null);

            /** FileDescriptorProto syntax. */
            public syntax: string;

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IFileDescriptorProto): google.protobuf.FileDescriptorProto;

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param message FileDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param message FileDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorProto;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorProto;

            /**
             * Verifies a FileDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorProto;

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @param message FileDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a DescriptorProto. */
        interface IDescriptorProto {

            /** DescriptorProto name */
            name?: (string|null);

            /** DescriptorProto field */
            field?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto extension */
            extension?: (google.protobuf.IFieldDescriptorProto[]|null);

            /** DescriptorProto nested_type */
            nested_type?: (google.protobuf.IDescriptorProto[]|null);

            /** DescriptorProto enum_type */
            enum_type?: (google.protobuf.IEnumDescriptorProto[]|null);

            /** DescriptorProto extension_range */
            extension_range?: (google.protobuf.DescriptorProto.IExtensionRange[]|null);

            /** DescriptorProto oneof_decl */
            oneof_decl?: (google.protobuf.IOneofDescriptorProto[]|null);

            /** DescriptorProto options */
            options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reserved_range */
            reserved_range?: (google.protobuf.DescriptorProto.IReservedRange[]|null);

            /** DescriptorProto reserved_name */
            reserved_name?: (string[]|null);
        }

        /** Represents a DescriptorProto. */
        class DescriptorProto implements IDescriptorProto {

            /**
             * Constructs a new DescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IDescriptorProto);

            /** DescriptorProto name. */
            public name: string;

            /** DescriptorProto field. */
            public field: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto extension. */
            public extension: google.protobuf.IFieldDescriptorProto[];

            /** DescriptorProto nested_type. */
            public nested_type: google.protobuf.IDescriptorProto[];

            /** DescriptorProto enum_type. */
            public enum_type: google.protobuf.IEnumDescriptorProto[];

            /** DescriptorProto extension_range. */
            public extension_range: google.protobuf.DescriptorProto.IExtensionRange[];

            /** DescriptorProto oneof_decl. */
            public oneof_decl: google.protobuf.IOneofDescriptorProto[];

            /** DescriptorProto options. */
            public options?: (google.protobuf.IMessageOptions|null);

            /** DescriptorProto reserved_range. */
            public reserved_range: google.protobuf.DescriptorProto.IReservedRange[];

            /** DescriptorProto reserved_name. */
            public reserved_name: string[];

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns DescriptorProto instance
             */
            public static create(properties?: google.protobuf.IDescriptorProto): google.protobuf.DescriptorProto;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param message DescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param message DescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto;

            /**
             * Verifies a DescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns DescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto;

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @param message DescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.DescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this DescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace DescriptorProto {

            /** Properties of an ExtensionRange. */
            interface IExtensionRange {

                /** ExtensionRange start */
                start?: (number|null);

                /** ExtensionRange end */
                end?: (number|null);
            }

            /** Represents an ExtensionRange. */
            class ExtensionRange implements IExtensionRange {

                /**
                 * Constructs a new ExtensionRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IExtensionRange);

                /** ExtensionRange start. */
                public start: number;

                /** ExtensionRange end. */
                public end: number;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ExtensionRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.IExtensionRange): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param message ExtensionRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.IExtensionRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param message ExtensionRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.IExtensionRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Verifies an ExtensionRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ExtensionRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @param message ExtensionRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ExtensionRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a ReservedRange. */
            interface IReservedRange {

                /** ReservedRange start */
                start?: (number|null);

                /** ReservedRange end */
                end?: (number|null);
            }

            /** Represents a ReservedRange. */
            class ReservedRange implements IReservedRange {

                /**
                 * Constructs a new ReservedRange.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.IReservedRange);

                /** ReservedRange start. */
                public start: number;

                /** ReservedRange end. */
                public end: number;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns ReservedRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.IReservedRange): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param message ReservedRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.IReservedRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param message ReservedRange message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.IReservedRange, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Verifies a ReservedRange message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns ReservedRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @param message ReservedRange
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ReservedRange, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReservedRange to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a FieldDescriptorProto. */
        interface IFieldDescriptorProto {

            /** FieldDescriptorProto name */
            name?: (string|null);

            /** FieldDescriptorProto number */
            number?: (number|null);

            /** FieldDescriptorProto label */
            label?: (google.protobuf.FieldDescriptorProto.Label|null);

            /** FieldDescriptorProto type */
            type?: (google.protobuf.FieldDescriptorProto.Type|null);

            /** FieldDescriptorProto type_name */
            type_name?: (string|null);

            /** FieldDescriptorProto extendee */
            extendee?: (string|null);

            /** FieldDescriptorProto default_value */
            default_value?: (string|null);

            /** FieldDescriptorProto oneof_index */
            oneof_index?: (number|null);

            /** FieldDescriptorProto json_name */
            json_name?: (string|null);

            /** FieldDescriptorProto options */
            options?: (google.protobuf.IFieldOptions|null);
        }

        /** Represents a FieldDescriptorProto. */
        class FieldDescriptorProto implements IFieldDescriptorProto {

            /**
             * Constructs a new FieldDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldDescriptorProto);

            /** FieldDescriptorProto name. */
            public name: string;

            /** FieldDescriptorProto number. */
            public number: number;

            /** FieldDescriptorProto label. */
            public label: google.protobuf.FieldDescriptorProto.Label;

            /** FieldDescriptorProto type. */
            public type: google.protobuf.FieldDescriptorProto.Type;

            /** FieldDescriptorProto type_name. */
            public type_name: string;

            /** FieldDescriptorProto extendee. */
            public extendee: string;

            /** FieldDescriptorProto default_value. */
            public default_value: string;

            /** FieldDescriptorProto oneof_index. */
            public oneof_index: number;

            /** FieldDescriptorProto json_name. */
            public json_name: string;

            /** FieldDescriptorProto options. */
            public options?: (google.protobuf.IFieldOptions|null);

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IFieldDescriptorProto): google.protobuf.FieldDescriptorProto;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param message FieldDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFieldDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param message FieldDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFieldDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldDescriptorProto;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldDescriptorProto;

            /**
             * Verifies a FieldDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldDescriptorProto;

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @param message FieldDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldDescriptorProto {

            /** Type enum. */
            enum Type {
                TYPE_DOUBLE = 1,
                TYPE_FLOAT = 2,
                TYPE_INT64 = 3,
                TYPE_UINT64 = 4,
                TYPE_INT32 = 5,
                TYPE_FIXED64 = 6,
                TYPE_FIXED32 = 7,
                TYPE_BOOL = 8,
                TYPE_STRING = 9,
                TYPE_GROUP = 10,
                TYPE_MESSAGE = 11,
                TYPE_BYTES = 12,
                TYPE_UINT32 = 13,
                TYPE_ENUM = 14,
                TYPE_SFIXED32 = 15,
                TYPE_SFIXED64 = 16,
                TYPE_SINT32 = 17,
                TYPE_SINT64 = 18
            }

            /** Label enum. */
            enum Label {
                LABEL_OPTIONAL = 1,
                LABEL_REQUIRED = 2,
                LABEL_REPEATED = 3
            }
        }

        /** Properties of an OneofDescriptorProto. */
        interface IOneofDescriptorProto {

            /** OneofDescriptorProto name */
            name?: (string|null);

            /** OneofDescriptorProto options */
            options?: (google.protobuf.IOneofOptions|null);
        }

        /** Represents an OneofDescriptorProto. */
        class OneofDescriptorProto implements IOneofDescriptorProto {

            /**
             * Constructs a new OneofDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofDescriptorProto);

            /** OneofDescriptorProto name. */
            public name: string;

            /** OneofDescriptorProto options. */
            public options?: (google.protobuf.IOneofOptions|null);

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns OneofDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IOneofDescriptorProto): google.protobuf.OneofDescriptorProto;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param message OneofDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IOneofDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param message OneofDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IOneofDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofDescriptorProto;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofDescriptorProto;

            /**
             * Verifies an OneofDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofDescriptorProto;

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @param message OneofDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumDescriptorProto. */
        interface IEnumDescriptorProto {

            /** EnumDescriptorProto name */
            name?: (string|null);

            /** EnumDescriptorProto value */
            value?: (google.protobuf.IEnumValueDescriptorProto[]|null);

            /** EnumDescriptorProto options */
            options?: (google.protobuf.IEnumOptions|null);
        }

        /** Represents an EnumDescriptorProto. */
        class EnumDescriptorProto implements IEnumDescriptorProto {

            /**
             * Constructs a new EnumDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumDescriptorProto);

            /** EnumDescriptorProto name. */
            public name: string;

            /** EnumDescriptorProto value. */
            public value: google.protobuf.IEnumValueDescriptorProto[];

            /** EnumDescriptorProto options. */
            public options?: (google.protobuf.IEnumOptions|null);

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IEnumDescriptorProto): google.protobuf.EnumDescriptorProto;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param message EnumDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param message EnumDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumDescriptorProto;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumDescriptorProto;

            /**
             * Verifies an EnumDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto;

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumValueDescriptorProto. */
        interface IEnumValueDescriptorProto {

            /** EnumValueDescriptorProto name */
            name?: (string|null);

            /** EnumValueDescriptorProto number */
            number?: (number|null);

            /** EnumValueDescriptorProto options */
            options?: (google.protobuf.IEnumValueOptions|null);
        }

        /** Represents an EnumValueDescriptorProto. */
        class EnumValueDescriptorProto implements IEnumValueDescriptorProto {

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueDescriptorProto);

            /** EnumValueDescriptorProto name. */
            public name: string;

            /** EnumValueDescriptorProto number. */
            public number: number;

            /** EnumValueDescriptorProto options. */
            public options?: (google.protobuf.IEnumValueOptions|null);

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumValueDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IEnumValueDescriptorProto): google.protobuf.EnumValueDescriptorProto;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param message EnumValueDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumValueDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param message EnumValueDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumValueDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueDescriptorProto;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueDescriptorProto;

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueDescriptorProto;

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @param message EnumValueDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceDescriptorProto. */
        interface IServiceDescriptorProto {

            /** ServiceDescriptorProto name */
            name?: (string|null);

            /** ServiceDescriptorProto method */
            method?: (google.protobuf.IMethodDescriptorProto[]|null);

            /** ServiceDescriptorProto options */
            options?: (google.protobuf.IServiceOptions|null);
        }

        /** Represents a ServiceDescriptorProto. */
        class ServiceDescriptorProto implements IServiceDescriptorProto {

            /**
             * Constructs a new ServiceDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceDescriptorProto);

            /** ServiceDescriptorProto name. */
            public name: string;

            /** ServiceDescriptorProto method. */
            public method: google.protobuf.IMethodDescriptorProto[];

            /** ServiceDescriptorProto options. */
            public options?: (google.protobuf.IServiceOptions|null);

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServiceDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IServiceDescriptorProto): google.protobuf.ServiceDescriptorProto;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param message ServiceDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IServiceDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param message ServiceDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IServiceDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceDescriptorProto;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceDescriptorProto;

            /**
             * Verifies a ServiceDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceDescriptorProto;

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @param message ServiceDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodDescriptorProto. */
        interface IMethodDescriptorProto {

            /** MethodDescriptorProto name */
            name?: (string|null);

            /** MethodDescriptorProto input_type */
            input_type?: (string|null);

            /** MethodDescriptorProto output_type */
            output_type?: (string|null);

            /** MethodDescriptorProto options */
            options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto client_streaming */
            client_streaming?: (boolean|null);

            /** MethodDescriptorProto server_streaming */
            server_streaming?: (boolean|null);
        }

        /** Represents a MethodDescriptorProto. */
        class MethodDescriptorProto implements IMethodDescriptorProto {

            /**
             * Constructs a new MethodDescriptorProto.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodDescriptorProto);

            /** MethodDescriptorProto name. */
            public name: string;

            /** MethodDescriptorProto input_type. */
            public input_type: string;

            /** MethodDescriptorProto output_type. */
            public output_type: string;

            /** MethodDescriptorProto options. */
            public options?: (google.protobuf.IMethodOptions|null);

            /** MethodDescriptorProto client_streaming. */
            public client_streaming: boolean;

            /** MethodDescriptorProto server_streaming. */
            public server_streaming: boolean;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MethodDescriptorProto instance
             */
            public static create(properties?: google.protobuf.IMethodDescriptorProto): google.protobuf.MethodDescriptorProto;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param message MethodDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMethodDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param message MethodDescriptorProto message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMethodDescriptorProto, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodDescriptorProto;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodDescriptorProto;

            /**
             * Verifies a MethodDescriptorProto message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodDescriptorProto;

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @param message MethodDescriptorProto
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodDescriptorProto, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FileOptions. */
        interface IFileOptions {

            /** FileOptions java_package */
            java_package?: (string|null);

            /** FileOptions java_outer_classname */
            java_outer_classname?: (string|null);

            /** FileOptions java_multiple_files */
            java_multiple_files?: (boolean|null);

            /** FileOptions java_generate_equals_and_hash */
            java_generate_equals_and_hash?: (boolean|null);

            /** FileOptions java_string_check_utf8 */
            java_string_check_utf8?: (boolean|null);

            /** FileOptions optimize_for */
            optimize_for?: (google.protobuf.FileOptions.OptimizeMode|null);

            /** FileOptions go_package */
            go_package?: (string|null);

            /** FileOptions cc_generic_services */
            cc_generic_services?: (boolean|null);

            /** FileOptions java_generic_services */
            java_generic_services?: (boolean|null);

            /** FileOptions py_generic_services */
            py_generic_services?: (boolean|null);

            /** FileOptions deprecated */
            deprecated?: (boolean|null);

            /** FileOptions cc_enable_arenas */
            cc_enable_arenas?: (boolean|null);

            /** FileOptions objc_class_prefix */
            objc_class_prefix?: (string|null);

            /** FileOptions csharp_namespace */
            csharp_namespace?: (string|null);

            /** FileOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** FileOptions .gogoproto.goproto_getters_all */
            ".gogoproto.goproto_getters_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_enum_prefix_all */
            ".gogoproto.goproto_enum_prefix_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_stringer_all */
            ".gogoproto.goproto_stringer_all"?: (boolean|null);

            /** FileOptions .gogoproto.verbose_equal_all */
            ".gogoproto.verbose_equal_all"?: (boolean|null);

            /** FileOptions .gogoproto.face_all */
            ".gogoproto.face_all"?: (boolean|null);

            /** FileOptions .gogoproto.gostring_all */
            ".gogoproto.gostring_all"?: (boolean|null);

            /** FileOptions .gogoproto.populate_all */
            ".gogoproto.populate_all"?: (boolean|null);

            /** FileOptions .gogoproto.stringer_all */
            ".gogoproto.stringer_all"?: (boolean|null);

            /** FileOptions .gogoproto.onlyone_all */
            ".gogoproto.onlyone_all"?: (boolean|null);

            /** FileOptions .gogoproto.equal_all */
            ".gogoproto.equal_all"?: (boolean|null);

            /** FileOptions .gogoproto.description_all */
            ".gogoproto.description_all"?: (boolean|null);

            /** FileOptions .gogoproto.testgen_all */
            ".gogoproto.testgen_all"?: (boolean|null);

            /** FileOptions .gogoproto.benchgen_all */
            ".gogoproto.benchgen_all"?: (boolean|null);

            /** FileOptions .gogoproto.marshaler_all */
            ".gogoproto.marshaler_all"?: (boolean|null);

            /** FileOptions .gogoproto.unmarshaler_all */
            ".gogoproto.unmarshaler_all"?: (boolean|null);

            /** FileOptions .gogoproto.stable_marshaler_all */
            ".gogoproto.stable_marshaler_all"?: (boolean|null);

            /** FileOptions .gogoproto.sizer_all */
            ".gogoproto.sizer_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_enum_stringer_all */
            ".gogoproto.goproto_enum_stringer_all"?: (boolean|null);

            /** FileOptions .gogoproto.enum_stringer_all */
            ".gogoproto.enum_stringer_all"?: (boolean|null);

            /** FileOptions .gogoproto.unsafe_marshaler_all */
            ".gogoproto.unsafe_marshaler_all"?: (boolean|null);

            /** FileOptions .gogoproto.unsafe_unmarshaler_all */
            ".gogoproto.unsafe_unmarshaler_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_extensions_map_all */
            ".gogoproto.goproto_extensions_map_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_unrecognized_all */
            ".gogoproto.goproto_unrecognized_all"?: (boolean|null);

            /** FileOptions .gogoproto.gogoproto_import */
            ".gogoproto.gogoproto_import"?: (boolean|null);

            /** FileOptions .gogoproto.protosizer_all */
            ".gogoproto.protosizer_all"?: (boolean|null);

            /** FileOptions .gogoproto.compare_all */
            ".gogoproto.compare_all"?: (boolean|null);

            /** FileOptions .gogoproto.typedecl_all */
            ".gogoproto.typedecl_all"?: (boolean|null);

            /** FileOptions .gogoproto.enumdecl_all */
            ".gogoproto.enumdecl_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_registration */
            ".gogoproto.goproto_registration"?: (boolean|null);

            /** FileOptions .gogoproto.messagename_all */
            ".gogoproto.messagename_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_sizecache_all */
            ".gogoproto.goproto_sizecache_all"?: (boolean|null);

            /** FileOptions .gogoproto.goproto_unkeyed_all */
            ".gogoproto.goproto_unkeyed_all"?: (boolean|null);
        }

        /** Represents a FileOptions. */
        class FileOptions implements IFileOptions {

            /**
             * Constructs a new FileOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFileOptions);

            /** FileOptions java_package. */
            public java_package: string;

            /** FileOptions java_outer_classname. */
            public java_outer_classname: string;

            /** FileOptions java_multiple_files. */
            public java_multiple_files: boolean;

            /** FileOptions java_generate_equals_and_hash. */
            public java_generate_equals_and_hash: boolean;

            /** FileOptions java_string_check_utf8. */
            public java_string_check_utf8: boolean;

            /** FileOptions optimize_for. */
            public optimize_for: google.protobuf.FileOptions.OptimizeMode;

            /** FileOptions go_package. */
            public go_package: string;

            /** FileOptions cc_generic_services. */
            public cc_generic_services: boolean;

            /** FileOptions java_generic_services. */
            public java_generic_services: boolean;

            /** FileOptions py_generic_services. */
            public py_generic_services: boolean;

            /** FileOptions deprecated. */
            public deprecated: boolean;

            /** FileOptions cc_enable_arenas. */
            public cc_enable_arenas: boolean;

            /** FileOptions objc_class_prefix. */
            public objc_class_prefix: string;

            /** FileOptions csharp_namespace. */
            public csharp_namespace: string;

            /** FileOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FileOptions instance
             */
            public static create(properties?: google.protobuf.IFileOptions): google.protobuf.FileOptions;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param message FileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param message FileOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFileOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileOptions;

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileOptions;

            /**
             * Verifies a FileOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FileOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileOptions;

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @param message FileOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FileOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FileOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FileOptions {

            /** OptimizeMode enum. */
            enum OptimizeMode {
                SPEED = 1,
                CODE_SIZE = 2,
                LITE_RUNTIME = 3
            }
        }

        /** Properties of a MessageOptions. */
        interface IMessageOptions {

            /** MessageOptions message_set_wire_format */
            message_set_wire_format?: (boolean|null);

            /** MessageOptions no_standard_descriptor_accessor */
            no_standard_descriptor_accessor?: (boolean|null);

            /** MessageOptions deprecated */
            deprecated?: (boolean|null);

            /** MessageOptions map_entry */
            map_entry?: (boolean|null);

            /** MessageOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** MessageOptions .gogoproto.goproto_getters */
            ".gogoproto.goproto_getters"?: (boolean|null);

            /** MessageOptions .gogoproto.goproto_stringer */
            ".gogoproto.goproto_stringer"?: (boolean|null);

            /** MessageOptions .gogoproto.verbose_equal */
            ".gogoproto.verbose_equal"?: (boolean|null);

            /** MessageOptions .gogoproto.face */
            ".gogoproto.face"?: (boolean|null);

            /** MessageOptions .gogoproto.gostring */
            ".gogoproto.gostring"?: (boolean|null);

            /** MessageOptions .gogoproto.populate */
            ".gogoproto.populate"?: (boolean|null);

            /** MessageOptions .gogoproto.stringer */
            ".gogoproto.stringer"?: (boolean|null);

            /** MessageOptions .gogoproto.onlyone */
            ".gogoproto.onlyone"?: (boolean|null);

            /** MessageOptions .gogoproto.equal */
            ".gogoproto.equal"?: (boolean|null);

            /** MessageOptions .gogoproto.description */
            ".gogoproto.description"?: (boolean|null);

            /** MessageOptions .gogoproto.testgen */
            ".gogoproto.testgen"?: (boolean|null);

            /** MessageOptions .gogoproto.benchgen */
            ".gogoproto.benchgen"?: (boolean|null);

            /** MessageOptions .gogoproto.marshaler */
            ".gogoproto.marshaler"?: (boolean|null);

            /** MessageOptions .gogoproto.unmarshaler */
            ".gogoproto.unmarshaler"?: (boolean|null);

            /** MessageOptions .gogoproto.stable_marshaler */
            ".gogoproto.stable_marshaler"?: (boolean|null);

            /** MessageOptions .gogoproto.sizer */
            ".gogoproto.sizer"?: (boolean|null);

            /** MessageOptions .gogoproto.unsafe_marshaler */
            ".gogoproto.unsafe_marshaler"?: (boolean|null);

            /** MessageOptions .gogoproto.unsafe_unmarshaler */
            ".gogoproto.unsafe_unmarshaler"?: (boolean|null);

            /** MessageOptions .gogoproto.goproto_extensions_map */
            ".gogoproto.goproto_extensions_map"?: (boolean|null);

            /** MessageOptions .gogoproto.goproto_unrecognized */
            ".gogoproto.goproto_unrecognized"?: (boolean|null);

            /** MessageOptions .gogoproto.protosizer */
            ".gogoproto.protosizer"?: (boolean|null);

            /** MessageOptions .gogoproto.compare */
            ".gogoproto.compare"?: (boolean|null);

            /** MessageOptions .gogoproto.typedecl */
            ".gogoproto.typedecl"?: (boolean|null);

            /** MessageOptions .gogoproto.messagename */
            ".gogoproto.messagename"?: (boolean|null);

            /** MessageOptions .gogoproto.goproto_sizecache */
            ".gogoproto.goproto_sizecache"?: (boolean|null);

            /** MessageOptions .gogoproto.goproto_unkeyed */
            ".gogoproto.goproto_unkeyed"?: (boolean|null);
        }

        /** Represents a MessageOptions. */
        class MessageOptions implements IMessageOptions {

            /**
             * Constructs a new MessageOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMessageOptions);

            /** MessageOptions message_set_wire_format. */
            public message_set_wire_format: boolean;

            /** MessageOptions no_standard_descriptor_accessor. */
            public no_standard_descriptor_accessor: boolean;

            /** MessageOptions deprecated. */
            public deprecated: boolean;

            /** MessageOptions map_entry. */
            public map_entry: boolean;

            /** MessageOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MessageOptions instance
             */
            public static create(properties?: google.protobuf.IMessageOptions): google.protobuf.MessageOptions;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param message MessageOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param message MessageOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MessageOptions;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MessageOptions;

            /**
             * Verifies a MessageOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MessageOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MessageOptions;

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @param message MessageOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MessageOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MessageOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a FieldOptions. */
        interface IFieldOptions {

            /** FieldOptions ctype */
            ctype?: (google.protobuf.FieldOptions.CType|null);

            /** FieldOptions packed */
            packed?: (boolean|null);

            /** FieldOptions jstype */
            jstype?: (google.protobuf.FieldOptions.JSType|null);

            /** FieldOptions lazy */
            lazy?: (boolean|null);

            /** FieldOptions deprecated */
            deprecated?: (boolean|null);

            /** FieldOptions weak */
            weak?: (boolean|null);

            /** FieldOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** FieldOptions .gogoproto.nullable */
            ".gogoproto.nullable"?: (boolean|null);

            /** FieldOptions .gogoproto.embed */
            ".gogoproto.embed"?: (boolean|null);

            /** FieldOptions .gogoproto.customtype */
            ".gogoproto.customtype"?: (string|null);

            /** FieldOptions .gogoproto.customname */
            ".gogoproto.customname"?: (string|null);

            /** FieldOptions .gogoproto.jsontag */
            ".gogoproto.jsontag"?: (string|null);

            /** FieldOptions .gogoproto.moretags */
            ".gogoproto.moretags"?: (string|null);

            /** FieldOptions .gogoproto.casttype */
            ".gogoproto.casttype"?: (string|null);

            /** FieldOptions .gogoproto.castkey */
            ".gogoproto.castkey"?: (string|null);

            /** FieldOptions .gogoproto.castvalue */
            ".gogoproto.castvalue"?: (string|null);

            /** FieldOptions .gogoproto.stdtime */
            ".gogoproto.stdtime"?: (boolean|null);

            /** FieldOptions .gogoproto.stdduration */
            ".gogoproto.stdduration"?: (boolean|null);

            /** FieldOptions .gogoproto.wktpointer */
            ".gogoproto.wktpointer"?: (boolean|null);
        }

        /** Represents a FieldOptions. */
        class FieldOptions implements IFieldOptions {

            /**
             * Constructs a new FieldOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IFieldOptions);

            /** FieldOptions ctype. */
            public ctype: google.protobuf.FieldOptions.CType;

            /** FieldOptions packed. */
            public packed: boolean;

            /** FieldOptions jstype. */
            public jstype: google.protobuf.FieldOptions.JSType;

            /** FieldOptions lazy. */
            public lazy: boolean;

            /** FieldOptions deprecated. */
            public deprecated: boolean;

            /** FieldOptions weak. */
            public weak: boolean;

            /** FieldOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns FieldOptions instance
             */
            public static create(properties?: google.protobuf.IFieldOptions): google.protobuf.FieldOptions;

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param message FieldOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IFieldOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param message FieldOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IFieldOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldOptions;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldOptions;

            /**
             * Verifies a FieldOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns FieldOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldOptions;

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @param message FieldOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.FieldOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldOptions {

            /** CType enum. */
            enum CType {
                STRING = 0,
                CORD = 1,
                STRING_PIECE = 2
            }

            /** JSType enum. */
            enum JSType {
                JS_NORMAL = 0,
                JS_STRING = 1,
                JS_NUMBER = 2
            }
        }

        /** Properties of an OneofOptions. */
        interface IOneofOptions {

            /** OneofOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents an OneofOptions. */
        class OneofOptions implements IOneofOptions {

            /**
             * Constructs a new OneofOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IOneofOptions);

            /** OneofOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns OneofOptions instance
             */
            public static create(properties?: google.protobuf.IOneofOptions): google.protobuf.OneofOptions;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param message OneofOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IOneofOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param message OneofOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IOneofOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofOptions;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofOptions;

            /**
             * Verifies an OneofOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns OneofOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofOptions;

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @param message OneofOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.OneofOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumOptions. */
        interface IEnumOptions {

            /** EnumOptions allow_alias */
            allow_alias?: (boolean|null);

            /** EnumOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** EnumOptions .gogoproto.goproto_enum_prefix */
            ".gogoproto.goproto_enum_prefix"?: (boolean|null);

            /** EnumOptions .gogoproto.goproto_enum_stringer */
            ".gogoproto.goproto_enum_stringer"?: (boolean|null);

            /** EnumOptions .gogoproto.enum_stringer */
            ".gogoproto.enum_stringer"?: (boolean|null);

            /** EnumOptions .gogoproto.enum_customname */
            ".gogoproto.enum_customname"?: (string|null);

            /** EnumOptions .gogoproto.enumdecl */
            ".gogoproto.enumdecl"?: (boolean|null);
        }

        /** Represents an EnumOptions. */
        class EnumOptions implements IEnumOptions {

            /**
             * Constructs a new EnumOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumOptions);

            /** EnumOptions allow_alias. */
            public allow_alias: boolean;

            /** EnumOptions deprecated. */
            public deprecated: boolean;

            /** EnumOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumOptions instance
             */
            public static create(properties?: google.protobuf.IEnumOptions): google.protobuf.EnumOptions;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param message EnumOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param message EnumOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumOptions;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumOptions;

            /**
             * Verifies an EnumOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumOptions;

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @param message EnumOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an EnumValueOptions. */
        interface IEnumValueOptions {

            /** EnumValueOptions deprecated */
            deprecated?: (boolean|null);

            /** EnumValueOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** EnumValueOptions .gogoproto.enumvalue_customname */
            ".gogoproto.enumvalue_customname"?: (string|null);
        }

        /** Represents an EnumValueOptions. */
        class EnumValueOptions implements IEnumValueOptions {

            /**
             * Constructs a new EnumValueOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IEnumValueOptions);

            /** EnumValueOptions deprecated. */
            public deprecated: boolean;

            /** EnumValueOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns EnumValueOptions instance
             */
            public static create(properties?: google.protobuf.IEnumValueOptions): google.protobuf.EnumValueOptions;

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param message EnumValueOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IEnumValueOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param message EnumValueOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IEnumValueOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueOptions;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueOptions;

            /**
             * Verifies an EnumValueOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns EnumValueOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueOptions;

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @param message EnumValueOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.EnumValueOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a ServiceOptions. */
        interface IServiceOptions {

            /** ServiceOptions deprecated */
            deprecated?: (boolean|null);

            /** ServiceOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);
        }

        /** Represents a ServiceOptions. */
        class ServiceOptions implements IServiceOptions {

            /**
             * Constructs a new ServiceOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IServiceOptions);

            /** ServiceOptions deprecated. */
            public deprecated: boolean;

            /** ServiceOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns ServiceOptions instance
             */
            public static create(properties?: google.protobuf.IServiceOptions): google.protobuf.ServiceOptions;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param message ServiceOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IServiceOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param message ServiceOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IServiceOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceOptions;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceOptions;

            /**
             * Verifies a ServiceOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns ServiceOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceOptions;

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @param message ServiceOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.ServiceOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a MethodOptions. */
        interface IMethodOptions {

            /** MethodOptions deprecated */
            deprecated?: (boolean|null);

            /** MethodOptions uninterpreted_option */
            uninterpreted_option?: (google.protobuf.IUninterpretedOption[]|null);

            /** MethodOptions .google.api.http */
            ".google.api.http"?: (google.api.IHttpRule|null);
        }

        /** Represents a MethodOptions. */
        class MethodOptions implements IMethodOptions {

            /**
             * Constructs a new MethodOptions.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IMethodOptions);

            /** MethodOptions deprecated. */
            public deprecated: boolean;

            /** MethodOptions uninterpreted_option. */
            public uninterpreted_option: google.protobuf.IUninterpretedOption[];

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @param [properties] Properties to set
             * @returns MethodOptions instance
             */
            public static create(properties?: google.protobuf.IMethodOptions): google.protobuf.MethodOptions;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param message MethodOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IMethodOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param message MethodOptions message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IMethodOptions, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodOptions;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodOptions;

            /**
             * Verifies a MethodOptions message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns MethodOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodOptions;

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @param message MethodOptions
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.MethodOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodOptions to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of an UninterpretedOption. */
        interface IUninterpretedOption {

            /** UninterpretedOption name */
            name?: (google.protobuf.UninterpretedOption.INamePart[]|null);

            /** UninterpretedOption identifier_value */
            identifier_value?: (string|null);

            /** UninterpretedOption positive_int_value */
            positive_int_value?: (Long|null);

            /** UninterpretedOption negative_int_value */
            negative_int_value?: (Long|null);

            /** UninterpretedOption double_value */
            double_value?: (number|null);

            /** UninterpretedOption string_value */
            string_value?: (Uint8Array|null);

            /** UninterpretedOption aggregate_value */
            aggregate_value?: (string|null);
        }

        /** Represents an UninterpretedOption. */
        class UninterpretedOption implements IUninterpretedOption {

            /**
             * Constructs a new UninterpretedOption.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IUninterpretedOption);

            /** UninterpretedOption name. */
            public name: google.protobuf.UninterpretedOption.INamePart[];

            /** UninterpretedOption identifier_value. */
            public identifier_value: string;

            /** UninterpretedOption positive_int_value. */
            public positive_int_value: Long;

            /** UninterpretedOption negative_int_value. */
            public negative_int_value: Long;

            /** UninterpretedOption double_value. */
            public double_value: number;

            /** UninterpretedOption string_value. */
            public string_value: Uint8Array;

            /** UninterpretedOption aggregate_value. */
            public aggregate_value: string;

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @param [properties] Properties to set
             * @returns UninterpretedOption instance
             */
            public static create(properties?: google.protobuf.IUninterpretedOption): google.protobuf.UninterpretedOption;

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param message UninterpretedOption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IUninterpretedOption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param message UninterpretedOption message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IUninterpretedOption, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption;

            /**
             * Verifies an UninterpretedOption message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns UninterpretedOption
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption;

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @param message UninterpretedOption
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.UninterpretedOption, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this UninterpretedOption to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace UninterpretedOption {

            /** Properties of a NamePart. */
            interface INamePart {

                /** NamePart name_part */
                name_part: string;

                /** NamePart is_extension */
                is_extension: boolean;
            }

            /** Represents a NamePart. */
            class NamePart implements INamePart {

                /**
                 * Constructs a new NamePart.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.UninterpretedOption.INamePart);

                /** NamePart name_part. */
                public name_part: string;

                /** NamePart is_extension. */
                public is_extension: boolean;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns NamePart instance
                 */
                public static create(properties?: google.protobuf.UninterpretedOption.INamePart): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param message NamePart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.UninterpretedOption.INamePart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param message NamePart message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.UninterpretedOption.INamePart, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Verifies a NamePart message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns NamePart
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @param message NamePart
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.UninterpretedOption.NamePart, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this NamePart to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a SourceCodeInfo. */
        interface ISourceCodeInfo {

            /** SourceCodeInfo location */
            location?: (google.protobuf.SourceCodeInfo.ILocation[]|null);
        }

        /** Represents a SourceCodeInfo. */
        class SourceCodeInfo implements ISourceCodeInfo {

            /**
             * Constructs a new SourceCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ISourceCodeInfo);

            /** SourceCodeInfo location. */
            public location: google.protobuf.SourceCodeInfo.ILocation[];

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns SourceCodeInfo instance
             */
            public static create(properties?: google.protobuf.ISourceCodeInfo): google.protobuf.SourceCodeInfo;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param message SourceCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.ISourceCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param message SourceCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.ISourceCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo;

            /**
             * Verifies a SourceCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns SourceCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo;

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @param message SourceCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.SourceCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace SourceCodeInfo {

            /** Properties of a Location. */
            interface ILocation {

                /** Location path */
                path?: (number[]|null);

                /** Location span */
                span?: (number[]|null);

                /** Location leading_comments */
                leading_comments?: (string|null);

                /** Location trailing_comments */
                trailing_comments?: (string|null);

                /** Location leading_detached_comments */
                leading_detached_comments?: (string[]|null);
            }

            /** Represents a Location. */
            class Location implements ILocation {

                /**
                 * Constructs a new Location.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.SourceCodeInfo.ILocation);

                /** Location path. */
                public path: number[];

                /** Location span. */
                public span: number[];

                /** Location leading_comments. */
                public leading_comments: string;

                /** Location trailing_comments. */
                public trailing_comments: string;

                /** Location leading_detached_comments. */
                public leading_detached_comments: string[];

                /**
                 * Creates a new Location instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Location instance
                 */
                public static create(properties?: google.protobuf.SourceCodeInfo.ILocation): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param message Location message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.SourceCodeInfo.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param message Location message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.SourceCodeInfo.ILocation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Verifies a Location message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Location
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @param message Location
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.SourceCodeInfo.Location, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Location to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of a GeneratedCodeInfo. */
        interface IGeneratedCodeInfo {

            /** GeneratedCodeInfo annotation */
            annotation?: (google.protobuf.GeneratedCodeInfo.IAnnotation[]|null);
        }

        /** Represents a GeneratedCodeInfo. */
        class GeneratedCodeInfo implements IGeneratedCodeInfo {

            /**
             * Constructs a new GeneratedCodeInfo.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IGeneratedCodeInfo);

            /** GeneratedCodeInfo annotation. */
            public annotation: google.protobuf.GeneratedCodeInfo.IAnnotation[];

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @param [properties] Properties to set
             * @returns GeneratedCodeInfo instance
             */
            public static create(properties?: google.protobuf.IGeneratedCodeInfo): google.protobuf.GeneratedCodeInfo;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param message GeneratedCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IGeneratedCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param message GeneratedCodeInfo message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IGeneratedCodeInfo, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo;

            /**
             * Verifies a GeneratedCodeInfo message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns GeneratedCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo;

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @param message GeneratedCodeInfo
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.GeneratedCodeInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GeneratedCodeInfo {

            /** Properties of an Annotation. */
            interface IAnnotation {

                /** Annotation path */
                path?: (number[]|null);

                /** Annotation source_file */
                source_file?: (string|null);

                /** Annotation begin */
                begin?: (number|null);

                /** Annotation end */
                end?: (number|null);
            }

            /** Represents an Annotation. */
            class Annotation implements IAnnotation {

                /**
                 * Constructs a new Annotation.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.GeneratedCodeInfo.IAnnotation);

                /** Annotation path. */
                public path: number[];

                /** Annotation source_file. */
                public source_file: string;

                /** Annotation begin. */
                public begin: number;

                /** Annotation end. */
                public end: number;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Annotation instance
                 */
                public static create(properties?: google.protobuf.GeneratedCodeInfo.IAnnotation): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param message Annotation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: google.protobuf.GeneratedCodeInfo.IAnnotation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param message Annotation message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: google.protobuf.GeneratedCodeInfo.IAnnotation, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Verifies an Annotation message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Annotation
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @param message Annotation
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: google.protobuf.GeneratedCodeInfo.Annotation, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Annotation to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /** Properties of an Any. */
        interface IAny {

            /** Any type_url */
            type_url?: (string|null);

            /** Any value */
            value?: (Uint8Array|null);
        }

        /** Represents an Any. */
        class Any implements IAny {

            /**
             * Constructs a new Any.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.IAny);

            /** Any type_url. */
            public type_url: string;

            /** Any value. */
            public value: Uint8Array;

            /**
             * Creates a new Any instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Any instance
             */
            public static create(properties?: google.protobuf.IAny): google.protobuf.Any;

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @param message Any message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.IAny, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @param message Any message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.IAny, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Any;

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Any;

            /**
             * Verifies an Any message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Any
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Any;

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @param message Any
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Any, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Any to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a Timestamp. */
        interface ITimestamp {

            /** Timestamp seconds */
            seconds?: (Long|null);

            /** Timestamp nanos */
            nanos?: (number|null);
        }

        /** Represents a Timestamp. */
        class Timestamp implements ITimestamp {

            /**
             * Constructs a new Timestamp.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ITimestamp);

            /** Timestamp seconds. */
            public seconds: Long;

            /** Timestamp nanos. */
            public nanos: number;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Timestamp instance
             */
            public static create(properties?: google.protobuf.ITimestamp): google.protobuf.Timestamp;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.protobuf.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param message Timestamp message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.protobuf.ITimestamp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Timestamp;

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Timestamp;

            /**
             * Verifies a Timestamp message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Timestamp
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Timestamp;

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @param message Timestamp
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.protobuf.Timestamp, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Timestamp to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /** Namespace api. */
    namespace api {

        /** Properties of a Http. */
        interface IHttp {

            /** Http rules */
            rules?: (google.api.IHttpRule[]|null);

            /** Http fully_decode_reserved_expansion */
            fully_decode_reserved_expansion?: (boolean|null);
        }

        /** Represents a Http. */
        class Http implements IHttp {

            /**
             * Constructs a new Http.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.IHttp);

            /** Http rules. */
            public rules: google.api.IHttpRule[];

            /** Http fully_decode_reserved_expansion. */
            public fully_decode_reserved_expansion: boolean;

            /**
             * Creates a new Http instance using the specified properties.
             * @param [properties] Properties to set
             * @returns Http instance
             */
            public static create(properties?: google.api.IHttp): google.api.Http;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @param message Http message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.api.IHttp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @param message Http message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.api.IHttp, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.api.Http;

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.api.Http;

            /**
             * Verifies a Http message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns Http
             */
            public static fromObject(object: { [k: string]: any }): google.api.Http;

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @param message Http
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.Http, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this Http to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a HttpRule. */
        interface IHttpRule {

            /** HttpRule selector */
            selector?: (string|null);

            /** HttpRule get */
            get?: (string|null);

            /** HttpRule put */
            put?: (string|null);

            /** HttpRule post */
            post?: (string|null);

            /** HttpRule delete */
            "delete"?: (string|null);

            /** HttpRule patch */
            patch?: (string|null);

            /** HttpRule custom */
            custom?: (google.api.ICustomHttpPattern|null);

            /** HttpRule body */
            body?: (string|null);

            /** HttpRule response_body */
            response_body?: (string|null);

            /** HttpRule additional_bindings */
            additional_bindings?: (google.api.IHttpRule[]|null);
        }

        /** Represents a HttpRule. */
        class HttpRule implements IHttpRule {

            /**
             * Constructs a new HttpRule.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.IHttpRule);

            /** HttpRule selector. */
            public selector: string;

            /** HttpRule get. */
            public get: string;

            /** HttpRule put. */
            public put: string;

            /** HttpRule post. */
            public post: string;

            /** HttpRule delete. */
            public delete: string;

            /** HttpRule patch. */
            public patch: string;

            /** HttpRule custom. */
            public custom?: (google.api.ICustomHttpPattern|null);

            /** HttpRule body. */
            public body: string;

            /** HttpRule response_body. */
            public response_body: string;

            /** HttpRule additional_bindings. */
            public additional_bindings: google.api.IHttpRule[];

            /** HttpRule pattern. */
            public pattern?: ("get"|"put"|"post"|"delete"|"patch"|"custom");

            /**
             * Creates a new HttpRule instance using the specified properties.
             * @param [properties] Properties to set
             * @returns HttpRule instance
             */
            public static create(properties?: google.api.IHttpRule): google.api.HttpRule;

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @param message HttpRule message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.api.IHttpRule, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @param message HttpRule message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.api.IHttpRule, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.api.HttpRule;

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.api.HttpRule;

            /**
             * Verifies a HttpRule message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns HttpRule
             */
            public static fromObject(object: { [k: string]: any }): google.api.HttpRule;

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @param message HttpRule
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.HttpRule, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this HttpRule to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /** Properties of a CustomHttpPattern. */
        interface ICustomHttpPattern {

            /** CustomHttpPattern kind */
            kind?: (string|null);

            /** CustomHttpPattern path */
            path?: (string|null);
        }

        /** Represents a CustomHttpPattern. */
        class CustomHttpPattern implements ICustomHttpPattern {

            /**
             * Constructs a new CustomHttpPattern.
             * @param [properties] Properties to set
             */
            constructor(properties?: google.api.ICustomHttpPattern);

            /** CustomHttpPattern kind. */
            public kind: string;

            /** CustomHttpPattern path. */
            public path: string;

            /**
             * Creates a new CustomHttpPattern instance using the specified properties.
             * @param [properties] Properties to set
             * @returns CustomHttpPattern instance
             */
            public static create(properties?: google.api.ICustomHttpPattern): google.api.CustomHttpPattern;

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @param message CustomHttpPattern message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encode(message: google.api.ICustomHttpPattern, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @param message CustomHttpPattern message or plain object to encode
             * @param [writer] Writer to encode to
             * @returns Writer
             */
            public static encodeDelimited(message: google.api.ICustomHttpPattern, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @param reader Reader or buffer to decode from
             * @param [length] Message length if known beforehand
             * @returns CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.api.CustomHttpPattern;

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @param reader Reader or buffer to decode from
             * @returns CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.api.CustomHttpPattern;

            /**
             * Verifies a CustomHttpPattern message.
             * @param message Plain object to verify
             * @returns `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): (string|null);

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @param object Plain object
             * @returns CustomHttpPattern
             */
            public static fromObject(object: { [k: string]: any }): google.api.CustomHttpPattern;

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @param message CustomHttpPattern
             * @param [options] Conversion options
             * @returns Plain object
             */
            public static toObject(message: google.api.CustomHttpPattern, options?: $protobuf.IConversionOptions): { [k: string]: any };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @returns JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }
}

/** Namespace raftpb. */
export namespace raftpb {

    /** EntryType enum. */
    enum EntryType {
        EntryNormal = 0,
        EntryConfChange = 1,
        EntryConfChangeV2 = 2
    }

    /** Properties of an Entry. */
    interface IEntry {

        /** Entry Term */
        Term?: (Long|null);

        /** Entry Index */
        Index?: (Long|null);

        /** Entry Type */
        Type?: (raftpb.EntryType|null);

        /** Entry Data */
        Data?: (Uint8Array|null);
    }

    /** Represents an Entry. */
    class Entry implements IEntry {

        /**
         * Constructs a new Entry.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IEntry);

        /** Entry Term. */
        public Term: Long;

        /** Entry Index. */
        public Index: Long;

        /** Entry Type. */
        public Type: raftpb.EntryType;

        /** Entry Data. */
        public Data: Uint8Array;

        /**
         * Creates a new Entry instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Entry instance
         */
        public static create(properties?: raftpb.IEntry): raftpb.Entry;

        /**
         * Encodes the specified Entry message. Does not implicitly {@link raftpb.Entry.verify|verify} messages.
         * @param message Entry message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IEntry, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Entry message, length delimited. Does not implicitly {@link raftpb.Entry.verify|verify} messages.
         * @param message Entry message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IEntry, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes an Entry message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Entry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Entry;

        /**
         * Decodes an Entry message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Entry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Entry;

        /**
         * Verifies an Entry message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Entry
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Entry;

        /**
         * Creates a plain object from an Entry message. Also converts values to other types if specified.
         * @param message Entry
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.Entry, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Entry to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a SnapshotMetadata. */
    interface ISnapshotMetadata {

        /** SnapshotMetadata conf_state */
        conf_state?: (raftpb.IConfState|null);

        /** SnapshotMetadata index */
        index?: (Long|null);

        /** SnapshotMetadata term */
        term?: (Long|null);
    }

    /** Represents a SnapshotMetadata. */
    class SnapshotMetadata implements ISnapshotMetadata {

        /**
         * Constructs a new SnapshotMetadata.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.ISnapshotMetadata);

        /** SnapshotMetadata conf_state. */
        public conf_state?: (raftpb.IConfState|null);

        /** SnapshotMetadata index. */
        public index: Long;

        /** SnapshotMetadata term. */
        public term: Long;

        /**
         * Creates a new SnapshotMetadata instance using the specified properties.
         * @param [properties] Properties to set
         * @returns SnapshotMetadata instance
         */
        public static create(properties?: raftpb.ISnapshotMetadata): raftpb.SnapshotMetadata;

        /**
         * Encodes the specified SnapshotMetadata message. Does not implicitly {@link raftpb.SnapshotMetadata.verify|verify} messages.
         * @param message SnapshotMetadata message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.ISnapshotMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified SnapshotMetadata message, length delimited. Does not implicitly {@link raftpb.SnapshotMetadata.verify|verify} messages.
         * @param message SnapshotMetadata message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.ISnapshotMetadata, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a SnapshotMetadata message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns SnapshotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.SnapshotMetadata;

        /**
         * Decodes a SnapshotMetadata message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns SnapshotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.SnapshotMetadata;

        /**
         * Verifies a SnapshotMetadata message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a SnapshotMetadata message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns SnapshotMetadata
         */
        public static fromObject(object: { [k: string]: any }): raftpb.SnapshotMetadata;

        /**
         * Creates a plain object from a SnapshotMetadata message. Also converts values to other types if specified.
         * @param message SnapshotMetadata
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.SnapshotMetadata, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this SnapshotMetadata to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a Snapshot. */
    interface ISnapshot {

        /** Snapshot data */
        data?: (Uint8Array|null);

        /** Snapshot metadata */
        metadata?: (raftpb.ISnapshotMetadata|null);
    }

    /** Represents a Snapshot. */
    class Snapshot implements ISnapshot {

        /**
         * Constructs a new Snapshot.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.ISnapshot);

        /** Snapshot data. */
        public data: Uint8Array;

        /** Snapshot metadata. */
        public metadata?: (raftpb.ISnapshotMetadata|null);

        /**
         * Creates a new Snapshot instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Snapshot instance
         */
        public static create(properties?: raftpb.ISnapshot): raftpb.Snapshot;

        /**
         * Encodes the specified Snapshot message. Does not implicitly {@link raftpb.Snapshot.verify|verify} messages.
         * @param message Snapshot message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.ISnapshot, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link raftpb.Snapshot.verify|verify} messages.
         * @param message Snapshot message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.ISnapshot, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Snapshot message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Snapshot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Snapshot;

        /**
         * Decodes a Snapshot message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Snapshot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Snapshot;

        /**
         * Verifies a Snapshot message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Snapshot
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Snapshot;

        /**
         * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
         * @param message Snapshot
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.Snapshot, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Snapshot to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** MessageType enum. */
    enum MessageType {
        MsgHup = 0,
        MsgBeat = 1,
        MsgProp = 2,
        MsgApp = 3,
        MsgAppResp = 4,
        MsgVote = 5,
        MsgVoteResp = 6,
        MsgSnap = 7,
        MsgHeartbeat = 8,
        MsgHeartbeatResp = 9,
        MsgUnreachable = 10,
        MsgSnapStatus = 11,
        MsgCheckQuorum = 12,
        MsgTransferLeader = 13,
        MsgTimeoutNow = 14,
        MsgReadIndex = 15,
        MsgReadIndexResp = 16,
        MsgPreVote = 17,
        MsgPreVoteResp = 18
    }

    /** Properties of a Message. */
    interface IMessage {

        /** Message type */
        type?: (raftpb.MessageType|null);

        /** Message to */
        to?: (Long|null);

        /** Message from */
        from?: (Long|null);

        /** Message term */
        term?: (Long|null);

        /** Message logTerm */
        logTerm?: (Long|null);

        /** Message index */
        index?: (Long|null);

        /** Message entries */
        entries?: (raftpb.IEntry[]|null);

        /** Message commit */
        commit?: (Long|null);

        /** Message snapshot */
        snapshot?: (raftpb.ISnapshot|null);

        /** Message reject */
        reject?: (boolean|null);

        /** Message rejectHint */
        rejectHint?: (Long|null);

        /** Message context */
        context?: (Uint8Array|null);
    }

    /** Represents a Message. */
    class Message implements IMessage {

        /**
         * Constructs a new Message.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IMessage);

        /** Message type. */
        public type: raftpb.MessageType;

        /** Message to. */
        public to: Long;

        /** Message from. */
        public from: Long;

        /** Message term. */
        public term: Long;

        /** Message logTerm. */
        public logTerm: Long;

        /** Message index. */
        public index: Long;

        /** Message entries. */
        public entries: raftpb.IEntry[];

        /** Message commit. */
        public commit: Long;

        /** Message snapshot. */
        public snapshot?: (raftpb.ISnapshot|null);

        /** Message reject. */
        public reject: boolean;

        /** Message rejectHint. */
        public rejectHint: Long;

        /** Message context. */
        public context: Uint8Array;

        /**
         * Creates a new Message instance using the specified properties.
         * @param [properties] Properties to set
         * @returns Message instance
         */
        public static create(properties?: raftpb.IMessage): raftpb.Message;

        /**
         * Encodes the specified Message message. Does not implicitly {@link raftpb.Message.verify|verify} messages.
         * @param message Message message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Message message, length delimited. Does not implicitly {@link raftpb.Message.verify|verify} messages.
         * @param message Message message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IMessage, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Message message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Message;

        /**
         * Decodes a Message message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Message;

        /**
         * Verifies a Message message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns Message
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Message;

        /**
         * Creates a plain object from a Message message. Also converts values to other types if specified.
         * @param message Message
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.Message, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this Message to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a HardState. */
    interface IHardState {

        /** HardState term */
        term?: (Long|null);

        /** HardState vote */
        vote?: (Long|null);

        /** HardState commit */
        commit?: (Long|null);
    }

    /** Represents a HardState. */
    class HardState implements IHardState {

        /**
         * Constructs a new HardState.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IHardState);

        /** HardState term. */
        public term: Long;

        /** HardState vote. */
        public vote: Long;

        /** HardState commit. */
        public commit: Long;

        /**
         * Creates a new HardState instance using the specified properties.
         * @param [properties] Properties to set
         * @returns HardState instance
         */
        public static create(properties?: raftpb.IHardState): raftpb.HardState;

        /**
         * Encodes the specified HardState message. Does not implicitly {@link raftpb.HardState.verify|verify} messages.
         * @param message HardState message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IHardState, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified HardState message, length delimited. Does not implicitly {@link raftpb.HardState.verify|verify} messages.
         * @param message HardState message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IHardState, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a HardState message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns HardState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.HardState;

        /**
         * Decodes a HardState message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns HardState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.HardState;

        /**
         * Verifies a HardState message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a HardState message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns HardState
         */
        public static fromObject(object: { [k: string]: any }): raftpb.HardState;

        /**
         * Creates a plain object from a HardState message. Also converts values to other types if specified.
         * @param message HardState
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.HardState, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this HardState to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** ConfChangeTransition enum. */
    enum ConfChangeTransition {
        ConfChangeTransitionAuto = 0,
        ConfChangeTransitionJointImplicit = 1,
        ConfChangeTransitionJointExplicit = 2
    }

    /** Properties of a ConfState. */
    interface IConfState {

        /** ConfState voters */
        voters?: (Long[]|null);

        /** ConfState learners */
        learners?: (Long[]|null);

        /** ConfState voters_outgoing */
        voters_outgoing?: (Long[]|null);

        /** ConfState learners_next */
        learners_next?: (Long[]|null);

        /** ConfState auto_leave */
        auto_leave?: (boolean|null);
    }

    /** Represents a ConfState. */
    class ConfState implements IConfState {

        /**
         * Constructs a new ConfState.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IConfState);

        /** ConfState voters. */
        public voters: Long[];

        /** ConfState learners. */
        public learners: Long[];

        /** ConfState voters_outgoing. */
        public voters_outgoing: Long[];

        /** ConfState learners_next. */
        public learners_next: Long[];

        /** ConfState auto_leave. */
        public auto_leave: boolean;

        /**
         * Creates a new ConfState instance using the specified properties.
         * @param [properties] Properties to set
         * @returns ConfState instance
         */
        public static create(properties?: raftpb.IConfState): raftpb.ConfState;

        /**
         * Encodes the specified ConfState message. Does not implicitly {@link raftpb.ConfState.verify|verify} messages.
         * @param message ConfState message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IConfState, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfState message, length delimited. Does not implicitly {@link raftpb.ConfState.verify|verify} messages.
         * @param message ConfState message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IConfState, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfState message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns ConfState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfState;

        /**
         * Decodes a ConfState message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns ConfState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfState;

        /**
         * Verifies a ConfState message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a ConfState message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns ConfState
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfState;

        /**
         * Creates a plain object from a ConfState message. Also converts values to other types if specified.
         * @param message ConfState
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.ConfState, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfState to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** ConfChangeType enum. */
    enum ConfChangeType {
        ConfChangeAddNode = 0,
        ConfChangeRemoveNode = 1,
        ConfChangeUpdateNode = 2,
        ConfChangeAddLearnerNode = 3
    }

    /** Properties of a ConfChange. */
    interface IConfChange {

        /** ConfChange type */
        type?: (raftpb.ConfChangeType|null);

        /** ConfChange node_id */
        node_id?: (Long|null);

        /** ConfChange context */
        context?: (Uint8Array|null);

        /** ConfChange id */
        id?: (Long|null);
    }

    /** Represents a ConfChange. */
    class ConfChange implements IConfChange {

        /**
         * Constructs a new ConfChange.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IConfChange);

        /** ConfChange type. */
        public type: raftpb.ConfChangeType;

        /** ConfChange node_id. */
        public node_id: Long;

        /** ConfChange context. */
        public context: Uint8Array;

        /** ConfChange id. */
        public id: Long;

        /**
         * Creates a new ConfChange instance using the specified properties.
         * @param [properties] Properties to set
         * @returns ConfChange instance
         */
        public static create(properties?: raftpb.IConfChange): raftpb.ConfChange;

        /**
         * Encodes the specified ConfChange message. Does not implicitly {@link raftpb.ConfChange.verify|verify} messages.
         * @param message ConfChange message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IConfChange, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfChange message, length delimited. Does not implicitly {@link raftpb.ConfChange.verify|verify} messages.
         * @param message ConfChange message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IConfChange, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfChange message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns ConfChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfChange;

        /**
         * Decodes a ConfChange message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns ConfChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfChange;

        /**
         * Verifies a ConfChange message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a ConfChange message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns ConfChange
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfChange;

        /**
         * Creates a plain object from a ConfChange message. Also converts values to other types if specified.
         * @param message ConfChange
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.ConfChange, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfChange to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a ConfChangeSingle. */
    interface IConfChangeSingle {

        /** ConfChangeSingle type */
        type?: (raftpb.ConfChangeType|null);

        /** ConfChangeSingle node_id */
        node_id?: (Long|null);
    }

    /** Represents a ConfChangeSingle. */
    class ConfChangeSingle implements IConfChangeSingle {

        /**
         * Constructs a new ConfChangeSingle.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IConfChangeSingle);

        /** ConfChangeSingle type. */
        public type: raftpb.ConfChangeType;

        /** ConfChangeSingle node_id. */
        public node_id: Long;

        /**
         * Creates a new ConfChangeSingle instance using the specified properties.
         * @param [properties] Properties to set
         * @returns ConfChangeSingle instance
         */
        public static create(properties?: raftpb.IConfChangeSingle): raftpb.ConfChangeSingle;

        /**
         * Encodes the specified ConfChangeSingle message. Does not implicitly {@link raftpb.ConfChangeSingle.verify|verify} messages.
         * @param message ConfChangeSingle message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IConfChangeSingle, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfChangeSingle message, length delimited. Does not implicitly {@link raftpb.ConfChangeSingle.verify|verify} messages.
         * @param message ConfChangeSingle message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IConfChangeSingle, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfChangeSingle message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns ConfChangeSingle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfChangeSingle;

        /**
         * Decodes a ConfChangeSingle message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns ConfChangeSingle
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfChangeSingle;

        /**
         * Verifies a ConfChangeSingle message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a ConfChangeSingle message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns ConfChangeSingle
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfChangeSingle;

        /**
         * Creates a plain object from a ConfChangeSingle message. Also converts values to other types if specified.
         * @param message ConfChangeSingle
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.ConfChangeSingle, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfChangeSingle to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /** Properties of a ConfChangeV2. */
    interface IConfChangeV2 {

        /** ConfChangeV2 transition */
        transition?: (raftpb.ConfChangeTransition|null);

        /** ConfChangeV2 changes */
        changes?: (raftpb.IConfChangeSingle[]|null);

        /** ConfChangeV2 context */
        context?: (Uint8Array|null);
    }

    /** Represents a ConfChangeV2. */
    class ConfChangeV2 implements IConfChangeV2 {

        /**
         * Constructs a new ConfChangeV2.
         * @param [properties] Properties to set
         */
        constructor(properties?: raftpb.IConfChangeV2);

        /** ConfChangeV2 transition. */
        public transition: raftpb.ConfChangeTransition;

        /** ConfChangeV2 changes. */
        public changes: raftpb.IConfChangeSingle[];

        /** ConfChangeV2 context. */
        public context: Uint8Array;

        /**
         * Creates a new ConfChangeV2 instance using the specified properties.
         * @param [properties] Properties to set
         * @returns ConfChangeV2 instance
         */
        public static create(properties?: raftpb.IConfChangeV2): raftpb.ConfChangeV2;

        /**
         * Encodes the specified ConfChangeV2 message. Does not implicitly {@link raftpb.ConfChangeV2.verify|verify} messages.
         * @param message ConfChangeV2 message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encode(message: raftpb.IConfChangeV2, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfChangeV2 message, length delimited. Does not implicitly {@link raftpb.ConfChangeV2.verify|verify} messages.
         * @param message ConfChangeV2 message or plain object to encode
         * @param [writer] Writer to encode to
         * @returns Writer
         */
        public static encodeDelimited(message: raftpb.IConfChangeV2, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfChangeV2 message from the specified reader or buffer.
         * @param reader Reader or buffer to decode from
         * @param [length] Message length if known beforehand
         * @returns ConfChangeV2
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfChangeV2;

        /**
         * Decodes a ConfChangeV2 message from the specified reader or buffer, length delimited.
         * @param reader Reader or buffer to decode from
         * @returns ConfChangeV2
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfChangeV2;

        /**
         * Verifies a ConfChangeV2 message.
         * @param message Plain object to verify
         * @returns `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): (string|null);

        /**
         * Creates a ConfChangeV2 message from a plain object. Also converts values to their respective internal types.
         * @param object Plain object
         * @returns ConfChangeV2
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfChangeV2;

        /**
         * Creates a plain object from a ConfChangeV2 message. Also converts values to other types if specified.
         * @param message ConfChangeV2
         * @param [options] Conversion options
         * @returns Plain object
         */
        public static toObject(message: raftpb.ConfChangeV2, options?: $protobuf.IConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfChangeV2 to JSON.
         * @returns JSON object
         */
        public toJSON(): { [k: string]: any };
    }
}

/** Namespace io. */
export namespace io {

    /** Namespace prometheus. */
    namespace prometheus {

        /** Namespace client. */
        namespace client {

            /** Properties of a LabelPair. */
            interface ILabelPair {

                /** LabelPair name */
                name?: (string|null);

                /** LabelPair value */
                value?: (string|null);
            }

            /** Represents a LabelPair. */
            class LabelPair implements ILabelPair {

                /**
                 * Constructs a new LabelPair.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.ILabelPair);

                /** LabelPair name. */
                public name: string;

                /** LabelPair value. */
                public value: string;

                /**
                 * Creates a new LabelPair instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns LabelPair instance
                 */
                public static create(properties?: io.prometheus.client.ILabelPair): io.prometheus.client.LabelPair;

                /**
                 * Encodes the specified LabelPair message. Does not implicitly {@link io.prometheus.client.LabelPair.verify|verify} messages.
                 * @param message LabelPair message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.ILabelPair, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LabelPair message, length delimited. Does not implicitly {@link io.prometheus.client.LabelPair.verify|verify} messages.
                 * @param message LabelPair message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.ILabelPair, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LabelPair message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns LabelPair
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.LabelPair;

                /**
                 * Decodes a LabelPair message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns LabelPair
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.LabelPair;

                /**
                 * Verifies a LabelPair message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a LabelPair message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns LabelPair
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.LabelPair;

                /**
                 * Creates a plain object from a LabelPair message. Also converts values to other types if specified.
                 * @param message LabelPair
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.LabelPair, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this LabelPair to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** MetricType enum. */
            enum MetricType {
                COUNTER = 0,
                GAUGE = 1,
                SUMMARY = 2,
                UNTYPED = 3,
                HISTOGRAM = 4
            }

            /** Properties of a Gauge. */
            interface IGauge {

                /** Gauge value */
                value?: (number|null);
            }

            /** Represents a Gauge. */
            class Gauge implements IGauge {

                /**
                 * Constructs a new Gauge.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IGauge);

                /** Gauge value. */
                public value: number;

                /**
                 * Creates a new Gauge instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Gauge instance
                 */
                public static create(properties?: io.prometheus.client.IGauge): io.prometheus.client.Gauge;

                /**
                 * Encodes the specified Gauge message. Does not implicitly {@link io.prometheus.client.Gauge.verify|verify} messages.
                 * @param message Gauge message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IGauge, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Gauge message, length delimited. Does not implicitly {@link io.prometheus.client.Gauge.verify|verify} messages.
                 * @param message Gauge message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IGauge, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Gauge message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Gauge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Gauge;

                /**
                 * Decodes a Gauge message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Gauge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Gauge;

                /**
                 * Verifies a Gauge message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Gauge message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Gauge
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Gauge;

                /**
                 * Creates a plain object from a Gauge message. Also converts values to other types if specified.
                 * @param message Gauge
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Gauge, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Gauge to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Counter. */
            interface ICounter {

                /** Counter value */
                value?: (number|null);
            }

            /** Represents a Counter. */
            class Counter implements ICounter {

                /**
                 * Constructs a new Counter.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.ICounter);

                /** Counter value. */
                public value: number;

                /**
                 * Creates a new Counter instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Counter instance
                 */
                public static create(properties?: io.prometheus.client.ICounter): io.prometheus.client.Counter;

                /**
                 * Encodes the specified Counter message. Does not implicitly {@link io.prometheus.client.Counter.verify|verify} messages.
                 * @param message Counter message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.ICounter, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Counter message, length delimited. Does not implicitly {@link io.prometheus.client.Counter.verify|verify} messages.
                 * @param message Counter message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.ICounter, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Counter message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Counter
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Counter;

                /**
                 * Decodes a Counter message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Counter
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Counter;

                /**
                 * Verifies a Counter message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Counter message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Counter
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Counter;

                /**
                 * Creates a plain object from a Counter message. Also converts values to other types if specified.
                 * @param message Counter
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Counter, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Counter to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Quantile. */
            interface IQuantile {

                /** Quantile quantile */
                quantile?: (number|null);

                /** Quantile value */
                value?: (number|null);
            }

            /** Represents a Quantile. */
            class Quantile implements IQuantile {

                /**
                 * Constructs a new Quantile.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IQuantile);

                /** Quantile quantile. */
                public quantile: number;

                /** Quantile value. */
                public value: number;

                /**
                 * Creates a new Quantile instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Quantile instance
                 */
                public static create(properties?: io.prometheus.client.IQuantile): io.prometheus.client.Quantile;

                /**
                 * Encodes the specified Quantile message. Does not implicitly {@link io.prometheus.client.Quantile.verify|verify} messages.
                 * @param message Quantile message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IQuantile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Quantile message, length delimited. Does not implicitly {@link io.prometheus.client.Quantile.verify|verify} messages.
                 * @param message Quantile message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IQuantile, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Quantile message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Quantile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Quantile;

                /**
                 * Decodes a Quantile message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Quantile
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Quantile;

                /**
                 * Verifies a Quantile message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Quantile message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Quantile
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Quantile;

                /**
                 * Creates a plain object from a Quantile message. Also converts values to other types if specified.
                 * @param message Quantile
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Quantile, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Quantile to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Summary. */
            interface ISummary {

                /** Summary sample_count */
                sample_count?: (Long|null);

                /** Summary sample_sum */
                sample_sum?: (number|null);

                /** Summary quantile */
                quantile?: (io.prometheus.client.IQuantile[]|null);
            }

            /** Represents a Summary. */
            class Summary implements ISummary {

                /**
                 * Constructs a new Summary.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.ISummary);

                /** Summary sample_count. */
                public sample_count: Long;

                /** Summary sample_sum. */
                public sample_sum: number;

                /** Summary quantile. */
                public quantile: io.prometheus.client.IQuantile[];

                /**
                 * Creates a new Summary instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Summary instance
                 */
                public static create(properties?: io.prometheus.client.ISummary): io.prometheus.client.Summary;

                /**
                 * Encodes the specified Summary message. Does not implicitly {@link io.prometheus.client.Summary.verify|verify} messages.
                 * @param message Summary message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.ISummary, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Summary message, length delimited. Does not implicitly {@link io.prometheus.client.Summary.verify|verify} messages.
                 * @param message Summary message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.ISummary, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Summary message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Summary
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Summary;

                /**
                 * Decodes a Summary message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Summary
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Summary;

                /**
                 * Verifies a Summary message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Summary message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Summary
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Summary;

                /**
                 * Creates a plain object from a Summary message. Also converts values to other types if specified.
                 * @param message Summary
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Summary, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Summary to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of an Untyped. */
            interface IUntyped {

                /** Untyped value */
                value?: (number|null);
            }

            /** Represents an Untyped. */
            class Untyped implements IUntyped {

                /**
                 * Constructs a new Untyped.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IUntyped);

                /** Untyped value. */
                public value: number;

                /**
                 * Creates a new Untyped instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Untyped instance
                 */
                public static create(properties?: io.prometheus.client.IUntyped): io.prometheus.client.Untyped;

                /**
                 * Encodes the specified Untyped message. Does not implicitly {@link io.prometheus.client.Untyped.verify|verify} messages.
                 * @param message Untyped message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IUntyped, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Untyped message, length delimited. Does not implicitly {@link io.prometheus.client.Untyped.verify|verify} messages.
                 * @param message Untyped message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IUntyped, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Untyped message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Untyped
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Untyped;

                /**
                 * Decodes an Untyped message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Untyped
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Untyped;

                /**
                 * Verifies an Untyped message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates an Untyped message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Untyped
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Untyped;

                /**
                 * Creates a plain object from an Untyped message. Also converts values to other types if specified.
                 * @param message Untyped
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Untyped, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Untyped to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Histogram. */
            interface IHistogram {

                /** Histogram sample_count */
                sample_count?: (Long|null);

                /** Histogram sample_sum */
                sample_sum?: (number|null);

                /** Histogram bucket */
                bucket?: (io.prometheus.client.IBucket[]|null);
            }

            /** Represents a Histogram. */
            class Histogram implements IHistogram {

                /**
                 * Constructs a new Histogram.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IHistogram);

                /** Histogram sample_count. */
                public sample_count: Long;

                /** Histogram sample_sum. */
                public sample_sum: number;

                /** Histogram bucket. */
                public bucket: io.prometheus.client.IBucket[];

                /**
                 * Creates a new Histogram instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Histogram instance
                 */
                public static create(properties?: io.prometheus.client.IHistogram): io.prometheus.client.Histogram;

                /**
                 * Encodes the specified Histogram message. Does not implicitly {@link io.prometheus.client.Histogram.verify|verify} messages.
                 * @param message Histogram message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IHistogram, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Histogram message, length delimited. Does not implicitly {@link io.prometheus.client.Histogram.verify|verify} messages.
                 * @param message Histogram message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IHistogram, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Histogram message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Histogram
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Histogram;

                /**
                 * Decodes a Histogram message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Histogram
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Histogram;

                /**
                 * Verifies a Histogram message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Histogram message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Histogram
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Histogram;

                /**
                 * Creates a plain object from a Histogram message. Also converts values to other types if specified.
                 * @param message Histogram
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Histogram, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Histogram to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Bucket. */
            interface IBucket {

                /** Bucket cumulative_count */
                cumulative_count?: (Long|null);

                /** Bucket upper_bound */
                upper_bound?: (number|null);
            }

            /** Represents a Bucket. */
            class Bucket implements IBucket {

                /**
                 * Constructs a new Bucket.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IBucket);

                /** Bucket cumulative_count. */
                public cumulative_count: Long;

                /** Bucket upper_bound. */
                public upper_bound: number;

                /**
                 * Creates a new Bucket instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Bucket instance
                 */
                public static create(properties?: io.prometheus.client.IBucket): io.prometheus.client.Bucket;

                /**
                 * Encodes the specified Bucket message. Does not implicitly {@link io.prometheus.client.Bucket.verify|verify} messages.
                 * @param message Bucket message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IBucket, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Bucket message, length delimited. Does not implicitly {@link io.prometheus.client.Bucket.verify|verify} messages.
                 * @param message Bucket message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IBucket, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Bucket message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Bucket
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Bucket;

                /**
                 * Decodes a Bucket message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Bucket
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Bucket;

                /**
                 * Verifies a Bucket message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Bucket
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Bucket;

                /**
                 * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                 * @param message Bucket
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Bucket, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Bucket to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a Metric. */
            interface IMetric {

                /** Metric label */
                label?: (io.prometheus.client.ILabelPair[]|null);

                /** Metric gauge */
                gauge?: (io.prometheus.client.IGauge|null);

                /** Metric counter */
                counter?: (io.prometheus.client.ICounter|null);

                /** Metric summary */
                summary?: (io.prometheus.client.ISummary|null);

                /** Metric untyped */
                untyped?: (io.prometheus.client.IUntyped|null);

                /** Metric histogram */
                histogram?: (io.prometheus.client.IHistogram|null);

                /** Metric timestamp_ms */
                timestamp_ms?: (Long|null);
            }

            /** Represents a Metric. */
            class Metric implements IMetric {

                /**
                 * Constructs a new Metric.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IMetric);

                /** Metric label. */
                public label: io.prometheus.client.ILabelPair[];

                /** Metric gauge. */
                public gauge?: (io.prometheus.client.IGauge|null);

                /** Metric counter. */
                public counter?: (io.prometheus.client.ICounter|null);

                /** Metric summary. */
                public summary?: (io.prometheus.client.ISummary|null);

                /** Metric untyped. */
                public untyped?: (io.prometheus.client.IUntyped|null);

                /** Metric histogram. */
                public histogram?: (io.prometheus.client.IHistogram|null);

                /** Metric timestamp_ms. */
                public timestamp_ms: Long;

                /**
                 * Creates a new Metric instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns Metric instance
                 */
                public static create(properties?: io.prometheus.client.IMetric): io.prometheus.client.Metric;

                /**
                 * Encodes the specified Metric message. Does not implicitly {@link io.prometheus.client.Metric.verify|verify} messages.
                 * @param message Metric message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IMetric, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Metric message, length delimited. Does not implicitly {@link io.prometheus.client.Metric.verify|verify} messages.
                 * @param message Metric message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IMetric, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Metric message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns Metric
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.Metric;

                /**
                 * Decodes a Metric message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns Metric
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.Metric;

                /**
                 * Verifies a Metric message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a Metric message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns Metric
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.Metric;

                /**
                 * Creates a plain object from a Metric message. Also converts values to other types if specified.
                 * @param message Metric
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.Metric, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this Metric to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /** Properties of a MetricFamily. */
            interface IMetricFamily {

                /** MetricFamily name */
                name?: (string|null);

                /** MetricFamily help */
                help?: (string|null);

                /** MetricFamily type */
                type?: (io.prometheus.client.MetricType|null);

                /** MetricFamily metric */
                metric?: (io.prometheus.client.IMetric[]|null);
            }

            /** Represents a MetricFamily. */
            class MetricFamily implements IMetricFamily {

                /**
                 * Constructs a new MetricFamily.
                 * @param [properties] Properties to set
                 */
                constructor(properties?: io.prometheus.client.IMetricFamily);

                /** MetricFamily name. */
                public name: string;

                /** MetricFamily help. */
                public help: string;

                /** MetricFamily type. */
                public type: io.prometheus.client.MetricType;

                /** MetricFamily metric. */
                public metric: io.prometheus.client.IMetric[];

                /**
                 * Creates a new MetricFamily instance using the specified properties.
                 * @param [properties] Properties to set
                 * @returns MetricFamily instance
                 */
                public static create(properties?: io.prometheus.client.IMetricFamily): io.prometheus.client.MetricFamily;

                /**
                 * Encodes the specified MetricFamily message. Does not implicitly {@link io.prometheus.client.MetricFamily.verify|verify} messages.
                 * @param message MetricFamily message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encode(message: io.prometheus.client.IMetricFamily, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MetricFamily message, length delimited. Does not implicitly {@link io.prometheus.client.MetricFamily.verify|verify} messages.
                 * @param message MetricFamily message or plain object to encode
                 * @param [writer] Writer to encode to
                 * @returns Writer
                 */
                public static encodeDelimited(message: io.prometheus.client.IMetricFamily, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MetricFamily message from the specified reader or buffer.
                 * @param reader Reader or buffer to decode from
                 * @param [length] Message length if known beforehand
                 * @returns MetricFamily
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): io.prometheus.client.MetricFamily;

                /**
                 * Decodes a MetricFamily message from the specified reader or buffer, length delimited.
                 * @param reader Reader or buffer to decode from
                 * @returns MetricFamily
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): io.prometheus.client.MetricFamily;

                /**
                 * Verifies a MetricFamily message.
                 * @param message Plain object to verify
                 * @returns `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): (string|null);

                /**
                 * Creates a MetricFamily message from a plain object. Also converts values to their respective internal types.
                 * @param object Plain object
                 * @returns MetricFamily
                 */
                public static fromObject(object: { [k: string]: any }): io.prometheus.client.MetricFamily;

                /**
                 * Creates a plain object from a MetricFamily message. Also converts values to other types if specified.
                 * @param message MetricFamily
                 * @param [options] Conversion options
                 * @returns Plain object
                 */
                public static toObject(message: io.prometheus.client.MetricFamily, options?: $protobuf.IConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetricFamily to JSON.
                 * @returns JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }
}
