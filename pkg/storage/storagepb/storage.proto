// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.storage.storagepb;
option go_package = "github.com/cockroachdb/cockroach/pkg/storage/storagepb";

import "gogoproto/gogo.proto";
import "roachpb/metadata.proto";

enum EncryptionKeySource {
  // Plain key files.
  KeyFiles = 0;
}

// EncryptionKeyFiles is used when plain key files are passed.
message EncryptionKeyFiles {
  string current_key = 1;
  string old_key = 2;
}

// EncryptionOptions defines the per-store encryption options.
message EncryptionOptions {
  // The store key source. Defines which fields are useful.
  EncryptionKeySource key_source = 1;

  // Set if key_source == KeyFiles.
  EncryptionKeyFiles key_files = 2;

  // Default data key rotation in seconds.
  int64 data_key_rotation_period = 3;
}

// ExternalPath is a path with encryption options.
message ExternalPath {
  // The path to the directory.
  string path = 1;
  // The encryption options for the directory. May be nil.
  EncryptionOptions encryption = 2;
}

enum WALFailoverMode {
  // DEFAULT leaves the WAL failover configuration unspecified. Today this is
  // interpreted as DISABLED but future releases may default to another
  // mode.
  DEFAULT = 0;
  // DISABLED leaves WAL failover disabled. Commits to the storage engine
  // observe the latency of a store's primary WAL directly.
  DISABLED = 1;
  // AMONG_STORES enables WAL failover among multiple stores within a node. This
  // setting has no effect if the node has a single store. When a storage engine
  // observes high latency writing to its WAL, it may transparently failover to
  // an arbitrary, predetermined other store's data directory. If successful in
  // syncing log entries to the other store's volume, the batch commit latency
  // is insulated from the effects of momentary disk stalls.
  AMONG_STORES = 2;
  // EXPLICIT_PATH enables WAL failover for a single-store node to an explicitly
  // specified path.
  EXPLICIT_PATH = 3;
}

// WALFailoverConfig configures a node's stores behavior under high write
// latency to their write-ahead logs.
message WALFailover {
  option (gogoproto.goproto_stringer) = false;
  WALFailoverMode mode = 1;
  // Path is the non-store path to which WALs should be written when failing
  // over. It must be nonempty if and only if Mode ==
  // WALFailoverMode_EXPLICIT_PATH.
  ExternalPath path = 2 [ (gogoproto.nullable) = false ];
  // PrevPath is the previously used non-store path. It may be set with Mode ==
  // WALFailoverMode_EXPLICIT_PATH (when changing the secondary path) or
  // WALFailoverMode_DISABLED (when disabling WAL failover after it was
  // previously enabled with WALFailoverMode_EXPLICIT_PATH). It must be empty
  // for other modes. If Mode is WALFailoverMode_DISABLED and previously WAL
  // failover was enabled using WALFailoverMode_AMONG_STORES, then PrevPath must
  // not be set.
  ExternalPath prev_path = 3 [ (gogoproto.nullable) = false ];
}

// SizeSpec are used to specify how much of a file system can be used. It
// can be specified in either a capacity or a percent.
message SizeSpec {
  option (gogoproto.goproto_stringer) = false;
  // Capacity is how much space on the file system to use. if 0 then use the
  // entire disk.
  int64 capacity = 1;
  // Percent can only be set if capacity is 0. If it is set then capacity is
  // computed based on the space on this percent of the disk.
  double percent = 2;
}

// SharedStorage specifies the properties of the shared storage.
message SharedStorage {
  // URI is the base location to read and write shared storage files.
  string uri = 1 [ (gogoproto.customname) = "URI" ];
  // Cache is the size of the secondary cache used to store blocks from
  // disaggregated shared storage.
  SizeSpec cache = 2 [ (gogoproto.nullable) = false ];
}

message ProvisionedRateSpec { int64 bandwidth = 1; }

enum StoreState {
  ACTIVE = 0;
  DECOMMISIONING = 1;
  REMOVED = 2;
}

// StoreSpec is the configuration for a single store. Some properties only apply
// for in-memory stores.
message StoreSpec {
  option (gogoproto.goproto_stringer) = false;
  // An in-memory store keeps the data in memory. However an optional path can
  // be supplied for non-pebble data such as overflow. Memory stores are
  // primarily intended for testing.
  bool in_memory = 1;

  // Root path on the file system where the data for this store lives. Paths for
  // different stores should not overlap.
  string path = 2;

  // Storage and throughput properties that apply to this store. By default the
  // entire disk will be used with unlimited capacity.
  SizeSpec properties = 3 [ (gogoproto.nullable) = false ];

  // Arbitrary tags for this store. These can be used by the allocator for
  // making balancing decisions.
  roachpb.Attributes attributes = 4 [ (gogoproto.nullable) = false ];

  // Encryption options for this disk.
  EncryptionOptions encryption = 5;

  // Arbitrary options which are passed to the underlying engine during
  // construction.
  string options = 6;

  // Ballast is used to prevent an out of space error from preventing the disk
  // from being recovered. By default this is 1% of the space on the drive.
  SizeSpec ballast = 7 [ (gogoproto.nullable) = false ];

  // StickyVFSID is a unique identifier associated with a given store which
  // will preserve the in-memory virtual file system (VFS) even after the
  // storage engine has been closed. This only applies to in-memory storage
  // engine.
  string stickyVFSID = 8;

  // State of this store. By default the state is Active.
  ProvisionedRateSpec provisioned = 9 [ (gogoproto.nullable) = false ];

  // State of this store. By default the state is Active. A decommissioning
  // state means the data will be drained from the drive.
  StoreState state = 10;
}

// NodeConfig is all the node level storage related configurations for this
// node. This structure is persisted to all stores and can be used to bootstrap
// the node.
message NodeConfig {

  // Stores is the list of StoreSpecs for this node.
  repeated StoreSpec stores = 1 [ (gogoproto.nullable) = false ];

  // WALFailover enables and configures automatic WAL failover when latency to
  // a store's primary WAL increases.
  WALFailover wal_failover = 2
      [ (gogoproto.nullable) = false, (gogoproto.customname) = "WALFailover" ];

  // ExternalIODir is the local file path under which remotely-initiated
  // operations that can specify node-local I/O paths (such as BACKUP, RESTORE
  // or IMPORT) can access files. If it is not explicitly set, it is computed
  // based on the store configuration.
  string external_io_dir = 3 [ (gogoproto.customname) = "ExternalIODir" ];

  // SharedStorage is specified to enable disaggregated shared storage. It is
  // enabled if the uri is set.
  SharedStorage shared_storage = 4 [ (gogoproto.nullable) = false ];
}
