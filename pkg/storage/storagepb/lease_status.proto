// Copyright 2017 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.storage;
option go_package = "storagepb";

import "roachpb/data.proto";
import "storage/storagepb/liveness.proto";
import "util/hlc/timestamp.proto";

import "gogoproto/gogo.proto";

enum LeaseState {
  // ERROR indicates that the lease can't be used or acquired.
  ERROR = 0;
  // VALID indicates that the lease can be used.
  VALID = 1;
  // STASIS indicates that the lease has not expired, but can't be used.
  STASIS = 2;
  // EXPIRED indicates that the lease can't be used.
  EXPIRED = 3;
  // PROSCRIBED indicates that the lease's proposed timestamp is earlier than
  // allowed.
  PROSCRIBED = 4;
}

// LeaseStatus holds the lease state, the timestamp at which the state
// is accurate, the lease and optionally the liveness if the lease is
// epoch-based.
message LeaseStatus {
  // Lease which this status describes.
  roachpb.Lease lease = 1 [(gogoproto.nullable) = false];
  // Timestamp that the lease was evaluated at.
  util.hlc.Timestamp timestamp = 2 [(gogoproto.nullable) = false];
  // State of the lease at timestamp.
  LeaseState state = 3;
  // Liveness if this is an epoch-based lease.
  Liveness liveness = 4;
}
