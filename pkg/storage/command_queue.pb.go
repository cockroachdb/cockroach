// Code generated by protoc-gen-gogo.
// source: cockroach/pkg/storage/command_queue.proto
// DO NOT EDIT!

package storage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cockroach_util_hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommandQueueCommand struct {
	Id        int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Key       string                        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	EndKey    string                        `protobuf:"bytes,3,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	Readonly  bool                          `protobuf:"varint,4,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Timestamp *cockroach_util_hlc.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Prereqs   []int64                       `protobuf:"varint,6,rep,packed,name=prereqs" json:"prereqs,omitempty"`
}

func (m *CommandQueueCommand) Reset()                    { *m = CommandQueueCommand{} }
func (m *CommandQueueCommand) String() string            { return proto.CompactTextString(m) }
func (*CommandQueueCommand) ProtoMessage()               {}
func (*CommandQueueCommand) Descriptor() ([]byte, []int) { return fileDescriptorCommandQueue, []int{0} }

// would be called CommandQueue but that's already taken by the struct in command_queue.go
// TODO(vilterp): should we use the same proto to define that struct that we use for
// serialization to the UI?
type CommandQueueSnapshot struct {
	Commands []*CommandQueueCommand `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty"`
}

func (m *CommandQueueSnapshot) Reset()                    { *m = CommandQueueSnapshot{} }
func (m *CommandQueueSnapshot) String() string            { return proto.CompactTextString(m) }
func (*CommandQueueSnapshot) ProtoMessage()               {}
func (*CommandQueueSnapshot) Descriptor() ([]byte, []int) { return fileDescriptorCommandQueue, []int{1} }

type CommandQueuesForReplica struct {
	LocalScope  *CommandQueueSnapshot `protobuf:"bytes,1,opt,name=localScope" json:"localScope,omitempty"`
	GlobalScope *CommandQueueSnapshot `protobuf:"bytes,2,opt,name=globalScope" json:"globalScope,omitempty"`
}

func (m *CommandQueuesForReplica) Reset()         { *m = CommandQueuesForReplica{} }
func (m *CommandQueuesForReplica) String() string { return proto.CompactTextString(m) }
func (*CommandQueuesForReplica) ProtoMessage()    {}
func (*CommandQueuesForReplica) Descriptor() ([]byte, []int) {
	return fileDescriptorCommandQueue, []int{2}
}

func init() {
	proto.RegisterType((*CommandQueueCommand)(nil), "cockroach.storage.CommandQueueCommand")
	proto.RegisterType((*CommandQueueSnapshot)(nil), "cockroach.storage.CommandQueueSnapshot")
	proto.RegisterType((*CommandQueuesForReplica)(nil), "cockroach.storage.CommandQueuesForReplica")
}
func (m *CommandQueueCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandQueueCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(m.Id))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.Readonly {
		dAtA[i] = 0x20
		i++
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Prereqs) > 0 {
		dAtA3 := make([]byte, len(m.Prereqs)*10)
		var j2 int
		for _, num1 := range m.Prereqs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *CommandQueueSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandQueueSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for _, msg := range m.Commands {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCommandQueue(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CommandQueuesForReplica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandQueuesForReplica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LocalScope != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(m.LocalScope.Size()))
		n4, err := m.LocalScope.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GlobalScope != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCommandQueue(dAtA, i, uint64(m.GlobalScope.Size()))
		n5, err := m.GlobalScope.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64CommandQueue(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CommandQueue(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommandQueue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommandQueueCommand) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommandQueue(uint64(m.Id))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommandQueue(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovCommandQueue(uint64(l))
	}
	if m.Readonly {
		n += 2
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovCommandQueue(uint64(l))
	}
	if len(m.Prereqs) > 0 {
		l = 0
		for _, e := range m.Prereqs {
			l += sovCommandQueue(uint64(e))
		}
		n += 1 + sovCommandQueue(uint64(l)) + l
	}
	return n
}

func (m *CommandQueueSnapshot) Size() (n int) {
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovCommandQueue(uint64(l))
		}
	}
	return n
}

func (m *CommandQueuesForReplica) Size() (n int) {
	var l int
	_ = l
	if m.LocalScope != nil {
		l = m.LocalScope.Size()
		n += 1 + l + sovCommandQueue(uint64(l))
	}
	if m.GlobalScope != nil {
		l = m.GlobalScope.Size()
		n += 1 + l + sovCommandQueue(uint64(l))
	}
	return n
}

func sovCommandQueue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommandQueue(x uint64) (n int) {
	return sovCommandQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommandQueueCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommandQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandQueueCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandQueueCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &cockroach_util_hlc.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommandQueue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prereqs = append(m.Prereqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommandQueue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommandQueue
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommandQueue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prereqs = append(m.Prereqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prereqs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommandQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommandQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandQueueSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommandQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandQueueSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandQueueSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &CommandQueueCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommandQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommandQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandQueuesForReplica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommandQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandQueuesForReplica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandQueuesForReplica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalScope == nil {
				m.LocalScope = &CommandQueueSnapshot{}
			}
			if err := m.LocalScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalScope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommandQueue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalScope == nil {
				m.GlobalScope = &CommandQueueSnapshot{}
			}
			if err := m.GlobalScope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommandQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommandQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommandQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommandQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommandQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommandQueue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommandQueue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommandQueue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommandQueue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommandQueue   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cockroach/pkg/storage/command_queue.proto", fileDescriptorCommandQueue)
}

var fileDescriptorCommandQueue = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xe4, 0xfb, 0xfa, 0xc7, 0x91, 0x10, 0x18, 0xa4, 0x46, 0x95, 0x88, 0x42, 0x87,
	0x12, 0x96, 0x44, 0x2a, 0x23, 0x5b, 0x91, 0x40, 0x88, 0x09, 0x97, 0xa9, 0x4b, 0xe5, 0x3a, 0x56,
	0x13, 0xd5, 0x89, 0xdd, 0x24, 0x1d, 0xfa, 0x16, 0xbc, 0x08, 0x4f, 0xc1, 0xd2, 0x91, 0x91, 0x11,
	0xc2, 0x8b, 0xa0, 0xa4, 0x49, 0x9a, 0x0a, 0x24, 0xc4, 0x76, 0x7d, 0xf5, 0x3b, 0xf7, 0xde, 0x73,
	0x0c, 0x2f, 0xa8, 0xa0, 0x8b, 0x48, 0x10, 0xea, 0x39, 0x72, 0x31, 0x77, 0xe2, 0x44, 0x44, 0x64,
	0xce, 0x1c, 0x2a, 0x82, 0x80, 0x84, 0xee, 0x74, 0xb9, 0x62, 0x2b, 0x66, 0xcb, 0x48, 0x24, 0x02,
	0x1d, 0x55, 0xa8, 0x5d, 0x60, 0x3d, 0x73, 0x5f, 0x9d, 0x57, 0x72, 0xe6, 0xb8, 0x24, 0x21, 0x5b,
	0x51, 0x6f, 0xb0, 0x4f, 0xac, 0x12, 0x9f, 0x3b, 0x1e, 0xa7, 0x4e, 0xe2, 0x07, 0x2c, 0x4e, 0x48,
	0x20, 0xb7, 0x5c, 0xff, 0x05, 0xc0, 0xe3, 0xeb, 0xed, 0xd2, 0x87, 0x6c, 0x67, 0x51, 0xa3, 0x03,
	0xa8, 0xf8, 0xae, 0x0e, 0x4c, 0x60, 0xa9, 0x58, 0xf1, 0x5d, 0x74, 0x08, 0xd5, 0x05, 0x5b, 0xeb,
	0x8a, 0x09, 0xac, 0x0e, 0xce, 0x4a, 0xd4, 0x85, 0x2d, 0x16, 0xba, 0xd3, 0xac, 0xab, 0xe6, 0xdd,
	0x26, 0x0b, 0xdd, 0x7b, 0xb6, 0x46, 0x3d, 0xd8, 0x8e, 0x18, 0x71, 0x45, 0xc8, 0xd7, 0xfa, 0x3f,
	0x13, 0x58, 0x6d, 0x5c, 0xbd, 0xd1, 0x15, 0xec, 0x54, 0x17, 0xe8, 0xff, 0x4d, 0x60, 0x69, 0xc3,
	0x53, 0x7b, 0xe7, 0x2f, 0x3b, 0xd3, 0xf6, 0x38, 0xb5, 0x1f, 0x4b, 0x08, 0xef, 0x78, 0xa4, 0xc3,
	0x96, 0x8c, 0x58, 0xc4, 0x96, 0xb1, 0xde, 0x34, 0x55, 0x4b, 0xc5, 0xe5, 0xb3, 0x3f, 0x81, 0x27,
	0x75, 0x13, 0xe3, 0x90, 0xc8, 0xd8, 0x13, 0x09, 0x1a, 0xc1, 0x76, 0x91, 0x68, 0xac, 0x03, 0x53,
	0xb5, 0xb4, 0xe1, 0xc0, 0xfe, 0x96, 0xa6, 0xfd, 0x83, 0x7f, 0x5c, 0xe9, 0xfa, 0xcf, 0x00, 0x76,
	0xeb, 0x44, 0x7c, 0x23, 0x22, 0xcc, 0x24, 0xf7, 0x29, 0x41, 0xb7, 0x10, 0x72, 0x41, 0x09, 0x1f,
	0x53, 0x21, 0x59, 0x9e, 0x96, 0x36, 0x3c, 0xff, 0x65, 0x43, 0x79, 0x1c, 0xae, 0x49, 0xd1, 0x1d,
	0xd4, 0xe6, 0x5c, 0xcc, 0xca, 0x49, 0xca, 0xdf, 0x26, 0xd5, 0xb5, 0xa3, 0xb3, 0xcd, 0x87, 0xd1,
	0xd8, 0xa4, 0x06, 0x78, 0x4d, 0x0d, 0xf0, 0x96, 0x1a, 0xe0, 0x3d, 0x35, 0xc0, 0xd3, 0xa7, 0xd1,
	0x98, 0xb4, 0x8a, 0x21, 0xb3, 0x66, 0xfe, 0xf7, 0x97, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0x8d, 0x87, 0x90, 0x85, 0x02, 0x00, 0x00,
}
