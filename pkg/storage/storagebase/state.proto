// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.storage.storagebase;
option go_package = "storagebase";

import "storage/engine/enginepb/mvcc.proto";
import "roachpb/internal_raft.proto";
import "roachpb/metadata.proto";
import "roachpb/data.proto";
import "util/hlc/timestamp.proto";

import "gogoproto/gogo.proto";

// ReplicaState is the part of the Range Raft state machine which is cached in
// memory and which is manipulated exclusively through consensus.
//
// The struct is also used to transfer state to Replicas in the context of
// proposer-evaluated Raft, in which case it does not represent a complete
// state but instead an update to be applied to an existing state, with each
// field specified in the update overwriting its counterpart on the receiving
// ReplicaState.
//
// For the ReplicaState persisted on the Replica, all optional fields are
// populated (i.e. no nil pointers or enums with the default value).
message ReplicaState {
  option (gogoproto.equal) = true;

  // The highest (and last) index applied to the state machine.
  uint64 raft_applied_index = 1;
  // The highest (and last) lease index applied to the state machine.
  uint64 lease_applied_index = 2;
  // The Range descriptor.
  // The pointer may change, but the referenced RangeDescriptor struct itself
  // must be treated as immutable; it is leaked out of the lock.
  //
  // Changes of the descriptor should always go through one of the
  // (*Replica).setDesc* methods.
  roachpb.RangeDescriptor desc = 3;
  // The latest range lease.
  //
  // Note that this message is both sent over the network and used to model
  // replica state in memory. In memory (storage.Replica.mu.state), the lease
  // is never nil (and never zero-valued), but it may be nil when sent over
  // the network as part of ReplicatedEvalResult.
  roachpb.Lease lease = 4;
  // The truncation state of the Raft log.
  roachpb.RaftTruncatedState truncated_state = 5;
  // gcThreshold is the GC threshold of the Range, typically updated when keys
  // are garbage collected. Reads and writes at timestamps <= this time will
  // not be served.
  util.hlc.Timestamp gc_threshold = 6 [(gogoproto.customname) = "GCThreshold", (gogoproto.moretags) = "cockroachdb:\"randnullable\""];
  storage.engine.enginepb.MVCCStats stats = 7;
  reserved 8;
  // txn_span_gc_threshold is the (maximum) timestamp below which transaction
  // records may have been garbage collected (as measured by txn.LastActive()).
  // Transaction at lower timestamps must not be allowed to write their initial
  // transaction entry.
  util.hlc.Timestamp txn_span_gc_threshold = 9 [(gogoproto.customname) = "TxnSpanGCThreshold", (gogoproto.moretags) = "cockroachdb:\"randnullable\""];
  reserved 10;
  // using_applied_state_key specifies whether the Range has been upgraded
  // to begin using the RangeAppliedState key. This key holds a combination
  // of the Raft applied index, the lease applied index, and the MVCC stats.
  //
  // When set to true in a ReplicatedEvalResult, the flag indicates that the
  // range should begin using the RangeAppliedState key. Handling of this flag
  // is idempotent by Replica state machines, meaning that it is ok for multiple
  // Raft commands to set it to true.
  bool using_applied_state_key = 11;
}

// RangeInfo is used for reporting status information about a range out through
// the status server.
message RangeInfo {
  option (gogoproto.equal) = true;

  ReplicaState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // The highest (and last) index in the Raft log.
  uint64 last_index = 2;
  uint64 num_pending = 3;
  uint64 num_remote_pending = 9;
  reserved 4; // previously last verification timestamp for verify queue.
  uint64 num_dropped = 5;
  // raft_log_size may be initially inaccurate after a server restart.
  // See storage.Replica.mu.raftLogSize.
  int64 raft_log_size = 6;
  // Approximately the amount of quota available.
  int64 approximate_proposal_quota = 7;
  // The max size the range can grow to before it will be split.
  int64 range_max_bytes = 8;
}

// CommandQueueSnapshot is a snapshot of the command queue graph for rendering
// on an admin UI debug page. While the actual CommandQueue uses interval trees
// for fast mutation and lookups, all the UI needs is a simple map of commands.
message CommandQueuesSnapshot {
  message Command {
    int64 id = 1;
    string key = 2;
    string end_key = 3;
    bool readonly = 4;
    util.hlc.Timestamp timestamp = 5 [(gogoproto.nullable) = false];
    repeated int64 prereqs = 6;
  }

  // Timestamp in nanoseconds when this snapshot was taken.
  util.hlc.Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  // localScope and globalScope are maps from command ids to commands.
  map<int64, Command> localScope = 2 [(gogoproto.nullable) = false];
  map<int64, Command> globalScope = 3 [(gogoproto.nullable) = false];
}
