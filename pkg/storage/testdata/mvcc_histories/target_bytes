## Test opts.TargetBytes.

# First, put some old data that we'll shadow.
run ok
with ts=1,0
  put      k=a v=nevergoingtobeseen
  put      k=e v=sameasabove
  put      k=aa v=willbetombstoned
del        k=aa ts=250,1
----
>> at end:
data: "a"/1.000000000,0 -> /BYTES/nevergoingtobeseen
data: "aa"/250.000000000,1 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/willbetombstoned
data: "e"/1.000000000,0 -> /BYTES/sameasabove

run ok
with ts=123,45
  put      k=a v=abcdef
  put      k=c v=ghijkllkjihg
  put      k=e v=mnopqr
----
>> at end:
data: "a"/123.000000000,45 -> /BYTES/abcdef
data: "a"/1.000000000,0 -> /BYTES/nevergoingtobeseen
data: "aa"/250.000000000,1 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/willbetombstoned
data: "c"/123.000000000,45 -> /BYTES/ghijkllkjihg
data: "e"/123.000000000,45 -> /BYTES/mnopqr
data: "e"/1.000000000,0 -> /BYTES/sameasabove

# Scans without or with a large target size return all results.

run ok
with ts=300,0 k=a end=z
  scan
  scan reverse=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "a" -> /BYTES/abcdef @123.000000000,45

run ok
with ts=300,0 k=a end=z targetbytes=0
  scan
  scan reverse=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "a" -> /BYTES/abcdef @123.000000000,45

run ok
with ts=300,0 k=a end=z targetbytes=10000000
  scan
  scan reverse=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: 108 bytes (target 10000000)
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: 108 bytes (target 10000000)

# Scans with target size -1 return no results.
run ok
with ts=300,0 k=a end=z targetbytes=-1
  scan
  scan reverse=true
----
scan: resume span ["a","z")
scan: "a"-"z" -> <no data>
scan: resume span ["a","z")
scan: "a"-"z" -> <no data>

run ok
# Target size one byte returns one result (overshooting instead of returning nothing).
# Upping the target size accordingly results in more rows.
# In all cases, we're seeing resume spans iff the byte target had an effect.
#
# a@123,45 -> abcdef clocks in at 34 bytes as follows:
#
#    8 bytes size buf
# + 14 key timestamp component
# +  6 key bytes component
# +  6 value bytes
#
# c@123,45 similarly accounts for 40 bytes.

scan     k=a end=z ts=300,0 targetbytes=1
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: resume span ["aa","z")
scan: 34 bytes (target 1)

run ok
scan     k=a end=z ts=300,0 targetbytes=34
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: resume span ["aa","z")
scan: 34 bytes (target 34)

run ok
scan     k=a end=z ts=300,0 targetbytes=35
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["e","z")
scan: 74 bytes (target 35)

run ok
scan     k=a end=z ts=300,0 targetbytes=74
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["e","z")
scan: 74 bytes (target 74)

run ok
scan     k=a end=z ts=300,0 targetbytes=75
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: 108 bytes (target 75)

# Works just the same when not starting on an existing key.
run ok
scan     k=b end=z ts=300 targetbytes=1
----
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["e","z")
scan: 40 bytes (target 1)

# Reverse scans.

run ok
scan     k=a end=z ts=300,0 targetbytes=1 reverse=true
----
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: resume span ["a","c\x00")
scan: 34 bytes (target 1)

run ok
scan     k=a end=z ts=300,0 targetbytes=34 reverse=true
----
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: resume span ["a","c\x00")
scan: 34 bytes (target 34)

run ok
scan     k=a end=z ts=300,0 targetbytes=35 reverse=true
----
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["a","aa\x00")
scan: 74 bytes (target 35)

run ok
scan     k=a end=z ts=300,0 targetbytes=74 reverse=true
----
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["a","aa\x00")
scan: 74 bytes (target 74)

run ok
scan     k=a end=z ts=300,0 targetbytes=75 reverse=true
----
scan: "e" -> /BYTES/mnopqr @123.000000000,45
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: 108 bytes (target 75)

# Scans that return the tombstone (at aa@250,1). The kv pair at a has 34 bytes,
# aa has 24 (just a key).

run ok
scan     k=a end=z ts=300,0 targetbytes=34 tombstones=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: resume span ["aa","z")
scan: 34 bytes (target 34)

run ok
scan     k=a end=z ts=300,0 targetbytes=35 tombstones=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: resume span ["c","z")
scan: 58 bytes (target 35)

run ok
scan     k=a end=z ts=300,0 targetbytes=58 tombstones=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: resume span ["c","z")
scan: 58 bytes (target 58)

run ok
scan     k=a end=z ts=300,0 targetbytes=59 tombstones=true
----
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["e","z")
scan: 98 bytes (target 59)

# ... and similarly in reverse.

run ok
scan    k=a end=d ts=300,0 targetbytes=40 reverse=true tombstones=true
----
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: resume span ["a","aa\x00")
scan: 40 bytes (target 40)

run ok
scan    k=a end=d ts=300,0 targetbytes=41 reverse=true tombstones=true
----
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: resume span ["a","a\x00")
scan: 64 bytes (target 41)

run ok
scan    k=a end=d ts=300,0 targetbytes=64 reverse=true tombstones=true
----
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: resume span ["a","a\x00")
scan: 64 bytes (target 64)

run ok
scan    k=a end=d ts=300,0 targetbytes=65 reverse=true tombstones=true
----
scan: "c" -> /BYTES/ghijkllkjihg @123.000000000,45
scan: "aa" -> /<empty> @250.000000000,1
scan: "a" -> /BYTES/abcdef @123.000000000,45
scan: 98 bytes (target 65)

# Regression test for a bug simiar to #46652: Test appropriate termination when
# the TargetBytes-th kv pair is in the intent history.

run ok
with t=A ts=11,0 targetbytes=32
  txn_begin
  txn_step  seq=10
  put       k=k  v=a
  put       k=l  v=a
  put       k=m  v=a
  put       k=n  v=a
  txn_step  seq=20
  put       k=k  v=b
  put       k=l  v=b
  put       k=m  v=b
  put       k=n  v=b
  txn_step  seq=30
  put       k=k  v=c
  put       k=l  v=c
  put       k=m  v=c
  put       k=n  v=c
  txn_step  seq=20
  scan      k=k end=o
  scan      k=k end=o reverse=true
----
scan: "k" -> /BYTES/b @11.000000000,0
scan: "l" -> /BYTES/b @11.000000000,0
scan: resume span ["m","o")
scan: 50 bytes (target 32)
scan: "n" -> /BYTES/b @11.000000000,0
scan: "m" -> /BYTES/b @11.000000000,0
scan: resume span ["k","l\x00")
scan: 50 bytes (target 32)
>> at end:
txn: "A" meta={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=20} lock=true stat=PENDING rts=11.000000000,0 wto=false gul=0,0
data: "a"/123.000000000,45 -> /BYTES/abcdef
data: "a"/1.000000000,0 -> /BYTES/nevergoingtobeseen
data: "aa"/250.000000000,1 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/willbetombstoned
data: "c"/123.000000000,45 -> /BYTES/ghijkllkjihg
data: "e"/123.000000000,45 -> /BYTES/mnopqr
data: "e"/1.000000000,0 -> /BYTES/sameasabove
meta: "k"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "k"/11.000000000,0 -> /BYTES/c
meta: "l"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "l"/11.000000000,0 -> /BYTES/c
meta: "m"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "m"/11.000000000,0 -> /BYTES/c
meta: "n"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "n"/11.000000000,0 -> /BYTES/c
