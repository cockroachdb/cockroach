# Test opts.MaxKeys.

# Put some test data.
run ok
with ts=1,0
  put      k=a v=val-a
  put      k=aa v=val-aa
  put      k=c v=val-c
  put      k=e v=val-e
del        k=aa ts=2,0
----
>> at end:
data: "a"/1.000000000,0 -> /BYTES/val-a
data: "aa"/2.000000000,0 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/val-aa
data: "c"/1.000000000,0 -> /BYTES/val-c
data: "e"/1.000000000,0 -> /BYTES/val-e

# Limit 1 works.
run ok
with ts=300,0 k=a end=z max=1
  scan
  scan reverse=true
----
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: resume span ["aa","z")
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: resume span ["a","c\x00")

# Limit -1 works: nothing is returned, go straight to resume span. We use this
# when executing the remaining scans in a batch after already exhausting the
# batch-wide allowable number of rows returned.
run ok
with ts=300,0 k=a end=z max=-1
  scan
  scan reverse=true
----
scan: resume span ["a","z")
scan: "a"-"z" -> <no data>
scan: resume span ["a","z")
scan: "a"-"z" -> <no data>

# Limit and tombstones: the tombstones count.
run ok
with ts=300,0 k=a end=z max=2 tombstones=true
  scan
----
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "aa" -> /<empty> @2.000000000,0
scan: resume span ["c","z")

# Ditto in reverse.
run ok
with ts=300,0 k=a end=d max=2 tombstones=true reverse=true
  scan
----
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "aa" -> /<empty> @2.000000000,0
scan: resume span ["a","a\x00")

# No limit = zero limit = infinity limit (zero is preferred).
run ok
with ts=300,0 k=a end=z
  scan
  scan reverse=true
  scan max=0
  scan reverse=true max=0
  scan max=99999
  scan reverse=true max=9999
----
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "a" -> /BYTES/val-a @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "e" -> /BYTES/val-e @1.000000000,0
scan: "c" -> /BYTES/val-c @1.000000000,0
scan: "a" -> /BYTES/val-a @1.000000000,0

# Regression test for #46652: Test appropriate termination when the MaxKeys-th
# key is in the intent history.

run ok
with t=A ts=11,0 max=3
  txn_begin
  txn_step  seq=10
  put       k=k  v=a
  put       k=l  v=a
  put       k=m  v=a
  put       k=n  v=a
  txn_step  seq=20
  put       k=k  v=b
  put       k=l  v=b
  put       k=m  v=b
  put       k=n  v=b
  txn_step  seq=30
  put       k=k  v=c
  put       k=l  v=c
  put       k=m  v=c
  put       k=n  v=c
  txn_step  seq=20
  scan      k=k end=o
  scan      k=k end=o reverse=true
----
scan: "k" -> /BYTES/b @11.000000000,0
scan: "l" -> /BYTES/b @11.000000000,0
scan: "m" -> /BYTES/b @11.000000000,0
scan: resume span ["n","o")
scan: "n" -> /BYTES/b @11.000000000,0
scan: "m" -> /BYTES/b @11.000000000,0
scan: "l" -> /BYTES/b @11.000000000,0
scan: resume span ["k","k\x00")
>> at end:
txn: "A" meta={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=20} lock=true stat=PENDING rts=11.000000000,0 wto=false gul=0,0
data: "a"/1.000000000,0 -> /BYTES/val-a
data: "aa"/2.000000000,0 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/val-aa
data: "c"/1.000000000,0 -> /BYTES/val-c
data: "e"/1.000000000,0 -> /BYTES/val-e
meta: "k"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "k"/11.000000000,0 -> /BYTES/c
meta: "l"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "l"/11.000000000,0 -> /BYTES/c
meta: "m"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "m"/11.000000000,0 -> /BYTES/c
meta: "n"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} ts=11.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "n"/11.000000000,0 -> /BYTES/c

run ok
with t=A ts=11,0 max=3
  txn_step  seq=30
  resolve_intent k=k status=COMMITTED
  resolve_intent k=l status=COMMITTED
  resolve_intent k=m status=COMMITTED
  resolve_intent k=n status=COMMITTED
----
>> at end:
txn: "A" meta={id=00000000 key=/Min pri=0.00000000 epo=0 ts=11.000000000,0 min=0,0 seq=30} lock=true stat=PENDING rts=11.000000000,0 wto=false gul=0,0
data: "a"/1.000000000,0 -> /BYTES/val-a
data: "aa"/2.000000000,0 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/val-aa
data: "c"/1.000000000,0 -> /BYTES/val-c
data: "e"/1.000000000,0 -> /BYTES/val-e
data: "k"/11.000000000,0 -> /BYTES/c
data: "l"/11.000000000,0 -> /BYTES/c
data: "m"/11.000000000,0 -> /BYTES/c
data: "n"/11.000000000,0 -> /BYTES/c

# Same case as above, except with a committed value at the key after MaxKeys.

run ok
with t=B ts=12,0 max=3
  txn_begin
  txn_step  seq=10
  put       k=k  v=a
  put       k=l  v=a
  put       k=m  v=a
  txn_step  seq=20
  put       k=k  v=b
  put       k=l  v=b
  put       k=m  v=b
  txn_step  seq=30
  put       k=k  v=c
  put       k=l  v=c
  put       k=m  v=c
  txn_step  seq=20
  scan      k=k end=o
----
scan: "k" -> /BYTES/b @12.000000000,0
scan: "l" -> /BYTES/b @12.000000000,0
scan: "m" -> /BYTES/b @12.000000000,0
scan: resume span ["n","o")
>> at end:
txn: "B" meta={id=00000000 key=/Min pri=0.00000000 epo=0 ts=12.000000000,0 min=0,0 seq=20} lock=true stat=PENDING rts=12.000000000,0 wto=false gul=0,0
data: "a"/1.000000000,0 -> /BYTES/val-a
data: "aa"/2.000000000,0 -> /<empty>
data: "aa"/1.000000000,0 -> /BYTES/val-aa
data: "c"/1.000000000,0 -> /BYTES/val-c
data: "e"/1.000000000,0 -> /BYTES/val-e
meta: "k"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=12.000000000,0 min=0,0 seq=30} ts=12.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "k"/12.000000000,0 -> /BYTES/c
data: "k"/11.000000000,0 -> /BYTES/c
meta: "l"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=12.000000000,0 min=0,0 seq=30} ts=12.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "l"/12.000000000,0 -> /BYTES/c
data: "l"/11.000000000,0 -> /BYTES/c
meta: "m"/0,0 -> txn={id=00000000 key=/Min pri=0.00000000 epo=0 ts=12.000000000,0 min=0,0 seq=30} ts=12.000000000,0 del=false klen=12 vlen=6 ih={{10 /BYTES/a}{20 /BYTES/b}}
data: "m"/12.000000000,0 -> /BYTES/c
data: "m"/11.000000000,0 -> /BYTES/c
data: "n"/11.000000000,0 -> /BYTES/c
