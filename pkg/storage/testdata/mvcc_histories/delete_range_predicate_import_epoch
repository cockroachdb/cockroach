# Tests MVCC Del Range with import epoch predicate
#
# Set up some point keys (some with ,importEpoch), and point tombstones x
#
# 7
# 6
# 5
# 4  x              d4,2           f4,2
# 3       b3,1
# 2  a2        c2,2           e2          g2
# 1                 d1,2
# 0
#    a    b    c    d         e     f     g
run ok
put k=a ts=2 v=a2
del k=a ts=4
importput k=b ts=3 v=b3 epoch=2
importput put k=c ts=2 v=c2 epoch=1
importput put k=d ts=1 v=d1 epoch=2
importput put k=d ts=4 v=d4 epoch=2
put k=e ts=2 v=e2
importput k=f ts=4 v=f4 epoch=2
put k=g ts=2 v=g2
----
>> at end:
data: "a"/4.000000000,0 -> /<empty>
data: "a"/2.000000000,0 -> /BYTES/a2
data: "b"/3.000000000,0 -> {importEpoch=2}/BYTES/b3
data: "c"/2.000000000,0 -> {importEpoch=1}/BYTES/c2
data: "d"/4.000000000,0 -> {importEpoch=2}/BYTES/d4
data: "d"/1.000000000,0 -> {importEpoch=2}/BYTES/d1
data: "e"/2.000000000,0 -> /BYTES/e2
data: "f"/4.000000000,0 -> {importEpoch=2}/BYTES/f4
data: "g"/2.000000000,0 -> /BYTES/g2

# Assert the command fails if a new importEpoch is found
run stats error
del_range_pred k=a end=g ts=5 importEpoch=1
----
>> del_range_pred k=a end=g ts=5 importEpoch=1
stats: no change
>> at end:
data: "a"/4.000000000,0 -> /<empty>
data: "a"/2.000000000,0 -> /BYTES/a2
data: "b"/3.000000000,0 -> {importEpoch=2}/BYTES/b3
data: "c"/2.000000000,0 -> {importEpoch=1}/BYTES/c2
data: "d"/4.000000000,0 -> {importEpoch=2}/BYTES/d4
data: "d"/1.000000000,0 -> {importEpoch=2}/BYTES/d1
data: "e"/2.000000000,0 -> /BYTES/e2
data: "f"/4.000000000,0 -> {importEpoch=2}/BYTES/f4
data: "g"/2.000000000,0 -> /BYTES/g2
stats: key_count=7 key_bytes=122 val_count=9 val_bytes=101 live_count=6 live_bytes=162 gc_bytes_age=5856
error: (*assert.withAssertionFailure:) Encountered MVCCValue with newer ImportEpoch (2) than the predicate filter (1)

# PredicateImport Epoch should only delete keys that have the matching predicate
# Note that only point tombstones are created because no run is greater than or equal to
# rangeThreshold=2.
run stats ok
del_range_pred k=a end=g ts=5 importEpoch=2 rangeThreshold=2
----
>> del_range_pred k=a end=g ts=5 importEpoch=2 rangeThreshold=2
stats: key_bytes=+36 val_count=+3 live_count=-3 live_bytes=-90 gc_bytes_age=+11970
>> at end:
data: "a"/4.000000000,0 -> /<empty>
data: "a"/2.000000000,0 -> /BYTES/a2
data: "b"/5.000000000,0 -> /<empty>
data: "b"/3.000000000,0 -> {importEpoch=2}/BYTES/b3
data: "c"/2.000000000,0 -> {importEpoch=1}/BYTES/c2
data: "d"/5.000000000,0 -> /<empty>
data: "d"/4.000000000,0 -> {importEpoch=2}/BYTES/d4
data: "d"/1.000000000,0 -> {importEpoch=2}/BYTES/d1
data: "e"/2.000000000,0 -> /BYTES/e2
data: "f"/5.000000000,0 -> /<empty>
data: "f"/4.000000000,0 -> {importEpoch=2}/BYTES/f4
data: "g"/2.000000000,0 -> /BYTES/g2
stats: key_count=7 key_bytes=158 val_count=12 val_bytes=101 live_count=3 live_bytes=72 gc_bytes_age=17826

# Issue a few more import puts
run ok
importput k=b ts=6 v=b6 epoch=3
importput put k=c ts=6 v=c6 epoch=4
importput put k=d ts=6 v=d6 epoch=4
importput put k=f ts=6 v=f6 epoch=4
----
>> at end:
data: "a"/4.000000000,0 -> /<empty>
data: "a"/2.000000000,0 -> /BYTES/a2
data: "b"/6.000000000,0 -> {importEpoch=3}/BYTES/b6
data: "b"/5.000000000,0 -> /<empty>
data: "b"/3.000000000,0 -> {importEpoch=2}/BYTES/b3
data: "c"/6.000000000,0 -> {importEpoch=4}/BYTES/c6
data: "c"/2.000000000,0 -> {importEpoch=1}/BYTES/c2
data: "d"/6.000000000,0 -> {importEpoch=4}/BYTES/d6
data: "d"/5.000000000,0 -> /<empty>
data: "d"/4.000000000,0 -> {importEpoch=2}/BYTES/d4
data: "d"/1.000000000,0 -> {importEpoch=2}/BYTES/d1
data: "e"/2.000000000,0 -> /BYTES/e2
data: "f"/6.000000000,0 -> {importEpoch=4}/BYTES/f6
data: "f"/5.000000000,0 -> /<empty>
data: "f"/4.000000000,0 -> {importEpoch=2}/BYTES/f4
data: "g"/2.000000000,0 -> /BYTES/g2

# Assert range tombstones are created at every imported key, since
# the rangeThreshold is set 1,
run stats ok
del_range_pred k=a end=g ts=7 importEpoch=4 rangeThreshold=1
----
>> del_range_pred k=a end=g ts=7 importEpoch=4 rangeThreshold=1
stats: range_key_count=+2 range_key_bytes=+28 range_val_count=+2 live_count=-3 live_bytes=-90 gc_bytes_age=+10974
>> at end:
rangekey: {c-d\x00}/[7.000000000,0=/<empty>]
rangekey: f{-\x00}/[7.000000000,0=/<empty>]
data: "a"/4.000000000,0 -> /<empty>
data: "a"/2.000000000,0 -> /BYTES/a2
data: "b"/6.000000000,0 -> {importEpoch=3}/BYTES/b6
data: "b"/5.000000000,0 -> /<empty>
data: "b"/3.000000000,0 -> {importEpoch=2}/BYTES/b3
data: "c"/6.000000000,0 -> {importEpoch=4}/BYTES/c6
data: "c"/2.000000000,0 -> {importEpoch=1}/BYTES/c2
data: "d"/6.000000000,0 -> {importEpoch=4}/BYTES/d6
data: "d"/5.000000000,0 -> /<empty>
data: "d"/4.000000000,0 -> {importEpoch=2}/BYTES/d4
data: "d"/1.000000000,0 -> {importEpoch=2}/BYTES/d1
data: "e"/2.000000000,0 -> /BYTES/e2
data: "f"/6.000000000,0 -> {importEpoch=4}/BYTES/f6
data: "f"/5.000000000,0 -> /<empty>
data: "f"/4.000000000,0 -> {importEpoch=2}/BYTES/f4
data: "g"/2.000000000,0 -> /BYTES/g2
stats: key_count=7 key_bytes=206 val_count=16 val_bytes=165 range_key_count=2 range_key_bytes=28 range_val_count=2 live_count=3 live_bytes=72 gc_bytes_age=30862
