# TODO(erikgrinaker): Test this with existing range keys too.
# TODO(erikgrinaker): Conflict and intent tests.
# TODO(erikgrinaker): Instead of duplicating the data set, we can use
# clear_range to clear the revert_range write timestamp. However, this requires
# support for clearing range keys in MVCCClearTimeRange.

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=a end=z ts=5 revertTS=1 deleteRangeThreshold=2
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
scan: "a" -> /BYTES/1 @5.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/1 @5.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /BYTES/2 @2.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
range key: {e-z}/5.000000000,0 -> []
data: "a"/5.000000000,0 -> /BYTES/1
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/5.000000000,0 -> /BYTES/1
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=a end=z ts=5 revertTS=2 deleteRangeThreshold=2
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
scan: "a" -> /BYTES/2 @2.000000000,0
scan: "b" -> /BYTES/2 @5.000000000,0
scan: "c" -> /BYTES/3 @3.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /BYTES/2 @2.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
range key: {c-z}/5.000000000,0 -> []
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/5.000000000,0 -> /BYTES/2
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=a end=z ts=5 revertTS=3 deleteRangeThreshold=2
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
scan: "a" -> /BYTES/2 @2.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/3 @3.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /BYTES/2 @2.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=c end=z ts=5 revertTS=1 deleteRangeThreshold=2 maxBatchSize=1
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
revert_range: resume span ["e","z")
scan: "a" -> /BYTES/2 @2.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/1 @5.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /BYTES/2 @2.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/5.000000000,0 -> /BYTES/1
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=a end=z ts=5 revertTS=1 deleteRangeThreshold=10 maxBatchSize=3
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
revert_range: resume span ["g","z")
scan: "a" -> /BYTES/1 @5.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/1 @5.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /<empty> @5.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
data: "a"/5.000000000,0 -> /BYTES/1
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/5.000000000,0 -> /BYTES/1
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/5.000000000,0 -> /<empty>
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=a end=z ts=5 revertTS=1 deleteRangeThreshold=2 maxBatchSize=3
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
revert_range: resume span ["g","z")
scan: "a" -> /BYTES/1 @5.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/1 @5.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /<empty> @5.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
data: "a"/5.000000000,0 -> /BYTES/1
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/5.000000000,0 -> /BYTES/1
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/5.000000000,0 -> /<empty>
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3

run ok
clear_range k=a end=z
put k=a v=1 ts=1
put k=a v=2 ts=2
put k=b v=2 ts=2
del k=b ts=3
put k=c v=1 ts=1
del k=c ts=2
put k=c v=3 ts=3
put k=d v=1 ts=1
put k=e v=2 ts=2
del k=f ts=1
put k=g v=3 ts=3
revert_range k=c end=z ts=5 revertTS=1 deleteRangeThreshold=3 maxBatchBytes=1
scan ts=5 k=a end=z # NB: does not respect range tombstones yet
----
revert_range: resume span ["e","z")
scan: "a" -> /BYTES/2 @2.000000000,0
scan: "b" -> /<empty> @3.000000000,0
scan: "c" -> /BYTES/1 @5.000000000,0
scan: "d" -> /BYTES/1 @1.000000000,0
scan: "e" -> /BYTES/2 @2.000000000,0
scan: "f" -> /<empty> @1.000000000,0
scan: "g" -> /BYTES/3 @3.000000000,0
>> at end:
data: "a"/2.000000000,0 -> /BYTES/2
data: "a"/1.000000000,0 -> /BYTES/1
data: "b"/3.000000000,0 -> /<empty>
data: "b"/2.000000000,0 -> /BYTES/2
data: "c"/5.000000000,0 -> /BYTES/1
data: "c"/3.000000000,0 -> /BYTES/3
data: "c"/2.000000000,0 -> /<empty>
data: "c"/1.000000000,0 -> /BYTES/1
data: "d"/1.000000000,0 -> /BYTES/1
data: "e"/2.000000000,0 -> /BYTES/2
data: "f"/1.000000000,0 -> /<empty>
data: "g"/3.000000000,0 -> /BYTES/3
