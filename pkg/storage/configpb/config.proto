// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.storage.configpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/storage/configpb";

import "gogoproto/gogo.proto";
import "roachpb/metadata.proto";

enum WALFailoverMode {
  // WALFailoverDefault leaves the WAL failover configuration unspecified. Today
  // this is interpreted as FailoverDisabled but future releases may default to
  // another mode.
  WALFailoverDefault = 0;
  // WALFailoverDisabled leaves WAL failover disabled. Commits to the
  // storage engine observe the latency of a store's primary WAL directly.
  WALFailoverDisabled = 1;
  // WALFailoverAmongStores enables WAL failover among multiple
  // stores within a node. This setting has no effect if the node
  // has a single store. When a storage engine observes high latency
  // writing to its WAL, it may transparently failover to an
  // arbitrary, predetermined other store's data directory. If
  // successful in syncing log entries to the other store's volume,
  // the batch commit latency is insulated from the effects of
  // momentary disk stalls.
  WALFailoverAmongStores = 2;
  // WALFailoverExplicitPath enables WAL failover for a single-store node to
  // an explicitly specified path.
  WALFailoverExplicitPath = 3;
}

// WALFailoverConfig configures a node's stores behavior under high write
// latency to their write-ahead logs.
message WALFailover {
  option (gogoproto.equal) = true;
  WALFailoverMode Mode = 1;
  // Path is the non-store path to which WALs should be written when failing
  // over. It must be nonempty if and only if Mode ==
  // WALFailoverExplicitPath.
  EncryptedPath Path = 2;
  // PrevPath is the previously used non-store path. It may be set
  // with Mode == WALFailoverExplicitPath (when changing the
  // secondary path) or WALFailoverDisabled (when disabling WAL
  // failover after it was previously enabled with
  // WALFailoverExplicitPath). It must be empty for other modes. If
  // Mode is WALFailoverDisabled and previously WAL failover was
  // enabled using WALFailoverAmongStores, then PrevPath must not be
  // set.
  EncryptedPath PrevPath = 3;
}

enum EncryptionKeySource {
  // Plain key files.
  KeyFiles = 0;
}

message EncryptedPath {
  option (gogoproto.equal) = true;
  string path = 1;
  EncryptionOptions encryption = 2;
}

// EncryptionKeyFiles is used when plain key files are passed.
message EncryptionKeyFiles {
  option (gogoproto.equal) = true;
  string current_key = 1;
  string old_key = 2;
}

// EncryptionOptions defines the per-store encryption options.
message EncryptionOptions {
  option (gogoproto.equal) = true;
  // The store key source. Defines which fields are useful.
  EncryptionKeySource key_source = 1;

  // Set if key_source == KeyFiles.
  EncryptionKeyFiles key_files = 2;

  // Default data key rotation in seconds.
  int64 data_key_rotation_period = 3;
}

message DiskProperties {
  option (gogoproto.equal) = true;
  int64 capacity = 1;
  double percent = 2;
}

message ProvisionedCapacity {
  option (gogoproto.equal) = true;
  int64 bandwidth = 1;
}

message SharedStorage {
  option (gogoproto.equal) = true;
  string uri = 1;
  string user = 2;
  DiskProperties cache = 3 [ (gogoproto.nullable) = false ];
}

enum StoreState {
  Active = 0;
  Decommisioning = 1;
  Removed = 2;
}

// Store is the configuration for a single store. Some properties only apply for
// in-memory stores.
message Store {
  option (gogoproto.equal) = true;
  // An in-memory store keeps the data in memory. However an optional path can
  // be supplied for non-pebble data such as overflow. Memory stores are
  // primarily intended for testing.
  bool inMemory = 1;

  // Root path on the file system where the data for this store lives. Paths for
  // different stores should not overlap.
  string path = 2;

  // Storage and throughput properties that apply to this store. By default the
  // entire disk will be used with unlimited capacity.
  DiskProperties properties = 3 [ (gogoproto.nullable) = false ];

  // Arbitrary tags for this store. These can be used by the allocator for
  // making balancing decisions.
  roachpb.Attributes attributes = 4 [ (gogoproto.nullable) = false ];

  // Encryption options for this disk.
  EncryptionOptions encryption = 5 [ (gogoproto.nullable) = false ];

  // Arbitrary options which are passed to the underlying engine during
  // construction.
  string options = 6;

  // Ballast is used to prevent an out of space error from preventing the disk
  // from being recovered. By default this is 1% of the space on the drive.
  DiskProperties ballast = 7 [ (gogoproto.nullable) = false ];

  // StickyVFSID is a unique identifier associated with a given store which
  // will preserve the in-memory virtual file system (VFS) even after the
  // storage engine has been closed. This only applies to in-memory storage
  // engine.
  string stickyVFSID = 8;

  // State of this store. By default the state is Active.
  ProvisionedCapacity provisioned = 9 [ (gogoproto.nullable) = false ];

  // State of this store. By default the state is Active. A decommisioning state
  // means the data will be drained from the drive.
  StoreState state = 10;
}

message Storage {
  option (gogoproto.equal) = true;
  repeated Store stores = 1 [ (gogoproto.nullable) = false ];
  WALFailover walFailover = 2 [ (gogoproto.nullable) = false ];
  string externalIODir = 3;
  SharedStorage sharedStorage = 4;
}