// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/engine/enginepb/compact.proto

/*
	Package enginepb is a generated protocol buffer package.

	It is generated from these files:
		storage/engine/enginepb/compact.proto
		storage/engine/enginepb/mvcc.proto
		storage/engine/enginepb/mvcc3.proto
		storage/engine/enginepb/registry.proto
		storage/engine/enginepb/rocksdb.proto

	It has these top-level messages:
		Compaction
		MVCCMetadata
		MVCCStats
		TxnMeta
		MVCCNetworkStats
		Registry
		FileEntry
		SSTUserProperties
		SSTUserPropertiesCollection
*/
package enginepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Compaction struct {
	// cleared indicates that the key span has been completely deleted,
	// and will not be re-used. This is a hint to the compactor to more
	// efficiently reclaim space.
	Cleared bool `protobuf:"varint,1,opt,name=cleared,proto3" json:"cleared,omitempty"`
	// bytes indicates the expected space reclamation from compaction.
	Bytes int64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// suggested_at is nanoseconds since the epoch.
	SuggestedAtNanos int64 `protobuf:"varint,3,opt,name=suggested_at_nanos,json=suggestedAtNanos,proto3" json:"suggested_at_nanos,omitempty"`
}

func (m *Compaction) Reset()                    { *m = Compaction{} }
func (m *Compaction) String() string            { return proto.CompactTextString(m) }
func (*Compaction) ProtoMessage()               {}
func (*Compaction) Descriptor() ([]byte, []int) { return fileDescriptorCompact, []int{0} }

func init() {
	proto.RegisterType((*Compaction)(nil), "cockroach.storage.engine.enginepb.Compaction")
}
func (this *Compaction) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Compaction)
	if !ok {
		that2, ok := that.(Compaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Cleared != that1.Cleared {
		return false
	}
	if this.Bytes != that1.Bytes {
		return false
	}
	if this.SuggestedAtNanos != that1.SuggestedAtNanos {
		return false
	}
	return true
}
func (m *Compaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cleared {
		dAtA[i] = 0x8
		i++
		if m.Cleared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompact(dAtA, i, uint64(m.Bytes))
	}
	if m.SuggestedAtNanos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompact(dAtA, i, uint64(m.SuggestedAtNanos))
	}
	return i, nil
}

func encodeVarintCompact(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Compaction) Size() (n int) {
	var l int
	_ = l
	if m.Cleared {
		n += 2
	}
	if m.Bytes != 0 {
		n += 1 + sovCompact(uint64(m.Bytes))
	}
	if m.SuggestedAtNanos != 0 {
		n += 1 + sovCompact(uint64(m.SuggestedAtNanos))
	}
	return n
}

func sovCompact(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompact(x uint64) (n int) {
	return sovCompact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Compaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cleared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cleared = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAtNanos", wireType)
			}
			m.SuggestedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuggestedAtNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompact
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompact
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompact(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompact = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompact   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("storage/engine/enginepb/compact.proto", fileDescriptorCompact) }

var fileDescriptorCompact = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0xd5, 0x4f, 0xcd, 0x4b, 0xcf, 0xcc, 0x83, 0x51, 0x05, 0x49, 0xfa, 0xc9, 0xf9,
	0xb9, 0x05, 0x89, 0xc9, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x8a, 0xc9, 0xf9, 0xc9,
	0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0x50, 0x0d, 0x7a, 0x10, 0x95, 0x7a, 0x30, 0x0d, 0x52,
	0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0xd5, 0xfa, 0x20, 0x16, 0x44, 0xa3, 0x52, 0x01, 0x17, 0x97,
	0x33, 0xc4, 0xa4, 0xcc, 0xfc, 0x3c, 0x21, 0x09, 0x2e, 0xf6, 0xe4, 0x9c, 0xd4, 0xc4, 0xa2, 0xd4,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x18, 0x57, 0x48, 0x84, 0x8b, 0x35, 0xa9, 0xb2,
	0x24, 0xb5, 0x58, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x08, 0xc2, 0x11, 0xd2, 0xe1, 0x12, 0x2a,
	0x2e, 0x4d, 0x4f, 0x4f, 0x2d, 0x2e, 0x49, 0x4d, 0x89, 0x4f, 0x2c, 0x89, 0xcf, 0x4b, 0xcc, 0xcb,
	0x2f, 0x96, 0x60, 0x06, 0x2b, 0x11, 0x80, 0xcb, 0x38, 0x96, 0xf8, 0x81, 0xc4, 0xad, 0x58, 0x5e,
	0x2c, 0x90, 0x67, 0x74, 0x92, 0x38, 0xf1, 0x50, 0x8e, 0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f,
	0xe4, 0x18, 0x6f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x24,
	0x36, 0xb0, 0x93, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0xe1, 0xc8, 0x4f, 0xf4, 0x00,
	0x00, 0x00,
}
