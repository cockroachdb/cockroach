// Code generated by protoc-gen-gogo.
// source: cockroach/pkg/storage/engine/enginepb/mvcc_network_stats.proto
// DO NOT EDIT!

package enginepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// MVCCNetworkStats needs to be convertible to MVCCStats. The fields
// and encodings are identical, except we're using proto3 vs
// proto2. Zero-valued primitive types will not be encoded on the
// wire.
type MVCCNetworkStats struct {
	ContainsEstimates bool  `protobuf:"varint,14,opt,name=contains_estimates,json=containsEstimates,proto3" json:"contains_estimates,omitempty"`
	LastUpdateNanos   int64 `protobuf:"fixed64,1,opt,name=last_update_nanos,json=lastUpdateNanos,proto3" json:"last_update_nanos,omitempty"`
	IntentAge         int64 `protobuf:"fixed64,2,opt,name=intent_age,json=intentAge,proto3" json:"intent_age,omitempty"`
	GCBytesAge        int64 `protobuf:"fixed64,3,opt,name=gc_bytes_age,json=gcBytesAge,proto3" json:"gc_bytes_age,omitempty"`
	LiveBytes         int64 `protobuf:"fixed64,4,opt,name=live_bytes,json=liveBytes,proto3" json:"live_bytes,omitempty"`
	LiveCount         int64 `protobuf:"fixed64,5,opt,name=live_count,json=liveCount,proto3" json:"live_count,omitempty"`
	KeyBytes          int64 `protobuf:"fixed64,6,opt,name=key_bytes,json=keyBytes,proto3" json:"key_bytes,omitempty"`
	KeyCount          int64 `protobuf:"fixed64,7,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	ValBytes          int64 `protobuf:"fixed64,8,opt,name=val_bytes,json=valBytes,proto3" json:"val_bytes,omitempty"`
	ValCount          int64 `protobuf:"fixed64,9,opt,name=val_count,json=valCount,proto3" json:"val_count,omitempty"`
	IntentBytes       int64 `protobuf:"fixed64,10,opt,name=intent_bytes,json=intentBytes,proto3" json:"intent_bytes,omitempty"`
	IntentCount       int64 `protobuf:"fixed64,11,opt,name=intent_count,json=intentCount,proto3" json:"intent_count,omitempty"`
	SysBytes          int64 `protobuf:"fixed64,12,opt,name=sys_bytes,json=sysBytes,proto3" json:"sys_bytes,omitempty"`
	SysCount          int64 `protobuf:"fixed64,13,opt,name=sys_count,json=sysCount,proto3" json:"sys_count,omitempty"`
}

func (m *MVCCNetworkStats) Reset()                    { *m = MVCCNetworkStats{} }
func (m *MVCCNetworkStats) String() string            { return proto.CompactTextString(m) }
func (*MVCCNetworkStats) ProtoMessage()               {}
func (*MVCCNetworkStats) Descriptor() ([]byte, []int) { return fileDescriptorMvccNetworkStats, []int{0} }

func init() {
	proto.RegisterType((*MVCCNetworkStats)(nil), "cockroach.storage.engine.enginepb.MVCCNetworkStats")
}
func (this *MVCCNetworkStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MVCCNetworkStats)
	if !ok {
		that2, ok := that.(MVCCNetworkStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ContainsEstimates != that1.ContainsEstimates {
		return false
	}
	if this.LastUpdateNanos != that1.LastUpdateNanos {
		return false
	}
	if this.IntentAge != that1.IntentAge {
		return false
	}
	if this.GCBytesAge != that1.GCBytesAge {
		return false
	}
	if this.LiveBytes != that1.LiveBytes {
		return false
	}
	if this.LiveCount != that1.LiveCount {
		return false
	}
	if this.KeyBytes != that1.KeyBytes {
		return false
	}
	if this.KeyCount != that1.KeyCount {
		return false
	}
	if this.ValBytes != that1.ValBytes {
		return false
	}
	if this.ValCount != that1.ValCount {
		return false
	}
	if this.IntentBytes != that1.IntentBytes {
		return false
	}
	if this.IntentCount != that1.IntentCount {
		return false
	}
	if this.SysBytes != that1.SysBytes {
		return false
	}
	if this.SysCount != that1.SysCount {
		return false
	}
	return true
}
func (m *MVCCNetworkStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MVCCNetworkStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastUpdateNanos != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.LastUpdateNanos))
	}
	if m.IntentAge != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.IntentAge))
	}
	if m.GCBytesAge != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.GCBytesAge))
	}
	if m.LiveBytes != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.LiveBytes))
	}
	if m.LiveCount != 0 {
		dAtA[i] = 0x29
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.LiveCount))
	}
	if m.KeyBytes != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.KeyBytes))
	}
	if m.KeyCount != 0 {
		dAtA[i] = 0x39
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.KeyCount))
	}
	if m.ValBytes != 0 {
		dAtA[i] = 0x41
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.ValBytes))
	}
	if m.ValCount != 0 {
		dAtA[i] = 0x49
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.ValCount))
	}
	if m.IntentBytes != 0 {
		dAtA[i] = 0x51
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.IntentBytes))
	}
	if m.IntentCount != 0 {
		dAtA[i] = 0x59
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.IntentCount))
	}
	if m.SysBytes != 0 {
		dAtA[i] = 0x61
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.SysBytes))
	}
	if m.SysCount != 0 {
		dAtA[i] = 0x69
		i++
		i = encodeFixed64MvccNetworkStats(dAtA, i, uint64(m.SysCount))
	}
	if m.ContainsEstimates {
		dAtA[i] = 0x70
		i++
		if m.ContainsEstimates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64MvccNetworkStats(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MvccNetworkStats(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMvccNetworkStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MVCCNetworkStats) Size() (n int) {
	var l int
	_ = l
	if m.LastUpdateNanos != 0 {
		n += 9
	}
	if m.IntentAge != 0 {
		n += 9
	}
	if m.GCBytesAge != 0 {
		n += 9
	}
	if m.LiveBytes != 0 {
		n += 9
	}
	if m.LiveCount != 0 {
		n += 9
	}
	if m.KeyBytes != 0 {
		n += 9
	}
	if m.KeyCount != 0 {
		n += 9
	}
	if m.ValBytes != 0 {
		n += 9
	}
	if m.ValCount != 0 {
		n += 9
	}
	if m.IntentBytes != 0 {
		n += 9
	}
	if m.IntentCount != 0 {
		n += 9
	}
	if m.SysBytes != 0 {
		n += 9
	}
	if m.SysCount != 0 {
		n += 9
	}
	if m.ContainsEstimates {
		n += 2
	}
	return n
}

func sovMvccNetworkStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMvccNetworkStats(x uint64) (n int) {
	return sovMvccNetworkStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MVCCNetworkStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMvccNetworkStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MVCCNetworkStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MVCCNetworkStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateNanos", wireType)
			}
			m.LastUpdateNanos = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LastUpdateNanos = int64(dAtA[iNdEx-8])
			m.LastUpdateNanos |= int64(dAtA[iNdEx-7]) << 8
			m.LastUpdateNanos |= int64(dAtA[iNdEx-6]) << 16
			m.LastUpdateNanos |= int64(dAtA[iNdEx-5]) << 24
			m.LastUpdateNanos |= int64(dAtA[iNdEx-4]) << 32
			m.LastUpdateNanos |= int64(dAtA[iNdEx-3]) << 40
			m.LastUpdateNanos |= int64(dAtA[iNdEx-2]) << 48
			m.LastUpdateNanos |= int64(dAtA[iNdEx-1]) << 56
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentAge", wireType)
			}
			m.IntentAge = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IntentAge = int64(dAtA[iNdEx-8])
			m.IntentAge |= int64(dAtA[iNdEx-7]) << 8
			m.IntentAge |= int64(dAtA[iNdEx-6]) << 16
			m.IntentAge |= int64(dAtA[iNdEx-5]) << 24
			m.IntentAge |= int64(dAtA[iNdEx-4]) << 32
			m.IntentAge |= int64(dAtA[iNdEx-3]) << 40
			m.IntentAge |= int64(dAtA[iNdEx-2]) << 48
			m.IntentAge |= int64(dAtA[iNdEx-1]) << 56
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCBytesAge", wireType)
			}
			m.GCBytesAge = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.GCBytesAge = int64(dAtA[iNdEx-8])
			m.GCBytesAge |= int64(dAtA[iNdEx-7]) << 8
			m.GCBytesAge |= int64(dAtA[iNdEx-6]) << 16
			m.GCBytesAge |= int64(dAtA[iNdEx-5]) << 24
			m.GCBytesAge |= int64(dAtA[iNdEx-4]) << 32
			m.GCBytesAge |= int64(dAtA[iNdEx-3]) << 40
			m.GCBytesAge |= int64(dAtA[iNdEx-2]) << 48
			m.GCBytesAge |= int64(dAtA[iNdEx-1]) << 56
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveBytes", wireType)
			}
			m.LiveBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LiveBytes = int64(dAtA[iNdEx-8])
			m.LiveBytes |= int64(dAtA[iNdEx-7]) << 8
			m.LiveBytes |= int64(dAtA[iNdEx-6]) << 16
			m.LiveBytes |= int64(dAtA[iNdEx-5]) << 24
			m.LiveBytes |= int64(dAtA[iNdEx-4]) << 32
			m.LiveBytes |= int64(dAtA[iNdEx-3]) << 40
			m.LiveBytes |= int64(dAtA[iNdEx-2]) << 48
			m.LiveBytes |= int64(dAtA[iNdEx-1]) << 56
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveCount", wireType)
			}
			m.LiveCount = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.LiveCount = int64(dAtA[iNdEx-8])
			m.LiveCount |= int64(dAtA[iNdEx-7]) << 8
			m.LiveCount |= int64(dAtA[iNdEx-6]) << 16
			m.LiveCount |= int64(dAtA[iNdEx-5]) << 24
			m.LiveCount |= int64(dAtA[iNdEx-4]) << 32
			m.LiveCount |= int64(dAtA[iNdEx-3]) << 40
			m.LiveCount |= int64(dAtA[iNdEx-2]) << 48
			m.LiveCount |= int64(dAtA[iNdEx-1]) << 56
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyBytes", wireType)
			}
			m.KeyBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.KeyBytes = int64(dAtA[iNdEx-8])
			m.KeyBytes |= int64(dAtA[iNdEx-7]) << 8
			m.KeyBytes |= int64(dAtA[iNdEx-6]) << 16
			m.KeyBytes |= int64(dAtA[iNdEx-5]) << 24
			m.KeyBytes |= int64(dAtA[iNdEx-4]) << 32
			m.KeyBytes |= int64(dAtA[iNdEx-3]) << 40
			m.KeyBytes |= int64(dAtA[iNdEx-2]) << 48
			m.KeyBytes |= int64(dAtA[iNdEx-1]) << 56
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.KeyCount = int64(dAtA[iNdEx-8])
			m.KeyCount |= int64(dAtA[iNdEx-7]) << 8
			m.KeyCount |= int64(dAtA[iNdEx-6]) << 16
			m.KeyCount |= int64(dAtA[iNdEx-5]) << 24
			m.KeyCount |= int64(dAtA[iNdEx-4]) << 32
			m.KeyCount |= int64(dAtA[iNdEx-3]) << 40
			m.KeyCount |= int64(dAtA[iNdEx-2]) << 48
			m.KeyCount |= int64(dAtA[iNdEx-1]) << 56
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValBytes", wireType)
			}
			m.ValBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ValBytes = int64(dAtA[iNdEx-8])
			m.ValBytes |= int64(dAtA[iNdEx-7]) << 8
			m.ValBytes |= int64(dAtA[iNdEx-6]) << 16
			m.ValBytes |= int64(dAtA[iNdEx-5]) << 24
			m.ValBytes |= int64(dAtA[iNdEx-4]) << 32
			m.ValBytes |= int64(dAtA[iNdEx-3]) << 40
			m.ValBytes |= int64(dAtA[iNdEx-2]) << 48
			m.ValBytes |= int64(dAtA[iNdEx-1]) << 56
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValCount", wireType)
			}
			m.ValCount = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.ValCount = int64(dAtA[iNdEx-8])
			m.ValCount |= int64(dAtA[iNdEx-7]) << 8
			m.ValCount |= int64(dAtA[iNdEx-6]) << 16
			m.ValCount |= int64(dAtA[iNdEx-5]) << 24
			m.ValCount |= int64(dAtA[iNdEx-4]) << 32
			m.ValCount |= int64(dAtA[iNdEx-3]) << 40
			m.ValCount |= int64(dAtA[iNdEx-2]) << 48
			m.ValCount |= int64(dAtA[iNdEx-1]) << 56
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentBytes", wireType)
			}
			m.IntentBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IntentBytes = int64(dAtA[iNdEx-8])
			m.IntentBytes |= int64(dAtA[iNdEx-7]) << 8
			m.IntentBytes |= int64(dAtA[iNdEx-6]) << 16
			m.IntentBytes |= int64(dAtA[iNdEx-5]) << 24
			m.IntentBytes |= int64(dAtA[iNdEx-4]) << 32
			m.IntentBytes |= int64(dAtA[iNdEx-3]) << 40
			m.IntentBytes |= int64(dAtA[iNdEx-2]) << 48
			m.IntentBytes |= int64(dAtA[iNdEx-1]) << 56
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentCount", wireType)
			}
			m.IntentCount = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.IntentCount = int64(dAtA[iNdEx-8])
			m.IntentCount |= int64(dAtA[iNdEx-7]) << 8
			m.IntentCount |= int64(dAtA[iNdEx-6]) << 16
			m.IntentCount |= int64(dAtA[iNdEx-5]) << 24
			m.IntentCount |= int64(dAtA[iNdEx-4]) << 32
			m.IntentCount |= int64(dAtA[iNdEx-3]) << 40
			m.IntentCount |= int64(dAtA[iNdEx-2]) << 48
			m.IntentCount |= int64(dAtA[iNdEx-1]) << 56
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysBytes", wireType)
			}
			m.SysBytes = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SysBytes = int64(dAtA[iNdEx-8])
			m.SysBytes |= int64(dAtA[iNdEx-7]) << 8
			m.SysBytes |= int64(dAtA[iNdEx-6]) << 16
			m.SysBytes |= int64(dAtA[iNdEx-5]) << 24
			m.SysBytes |= int64(dAtA[iNdEx-4]) << 32
			m.SysBytes |= int64(dAtA[iNdEx-3]) << 40
			m.SysBytes |= int64(dAtA[iNdEx-2]) << 48
			m.SysBytes |= int64(dAtA[iNdEx-1]) << 56
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysCount", wireType)
			}
			m.SysCount = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			m.SysCount = int64(dAtA[iNdEx-8])
			m.SysCount |= int64(dAtA[iNdEx-7]) << 8
			m.SysCount |= int64(dAtA[iNdEx-6]) << 16
			m.SysCount |= int64(dAtA[iNdEx-5]) << 24
			m.SysCount |= int64(dAtA[iNdEx-4]) << 32
			m.SysCount |= int64(dAtA[iNdEx-3]) << 40
			m.SysCount |= int64(dAtA[iNdEx-2]) << 48
			m.SysCount |= int64(dAtA[iNdEx-1]) << 56
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainsEstimates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMvccNetworkStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContainsEstimates = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMvccNetworkStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMvccNetworkStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMvccNetworkStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMvccNetworkStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMvccNetworkStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMvccNetworkStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMvccNetworkStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMvccNetworkStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMvccNetworkStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMvccNetworkStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMvccNetworkStats   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cockroach/pkg/storage/engine/enginepb/mvcc_network_stats.proto", fileDescriptorMvccNetworkStats)
}

var fileDescriptorMvccNetworkStats = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xb1, 0xae, 0xd3, 0x30,
	0x18, 0x85, 0x6b, 0x5a, 0x4a, 0xeb, 0x96, 0xd2, 0x46, 0x0c, 0x11, 0x88, 0xb4, 0x65, 0xaa, 0x90,
	0x48, 0x90, 0xd8, 0x18, 0x90, 0xda, 0x08, 0x31, 0xd1, 0xa1, 0x08, 0xd6, 0xc8, 0x35, 0x96, 0x89,
	0x92, 0xda, 0x51, 0xec, 0x06, 0xe5, 0x2d, 0x78, 0x04, 0x1e, 0xa7, 0x23, 0x23, 0x13, 0x82, 0xb0,
	0xf0, 0x04, 0x77, 0xbe, 0xb2, 0xff, 0xc4, 0xbd, 0x53, 0xad, 0xf3, 0x9d, 0xef, 0xfc, 0x52, 0x15,
	0xfc, 0x96, 0x4a, 0x9a, 0x95, 0x92, 0xd0, 0xaf, 0x51, 0x91, 0xf1, 0x48, 0x69, 0x59, 0x12, 0xce,
	0x22, 0x26, 0x78, 0x2a, 0xba, 0x9f, 0xe2, 0x18, 0x9d, 0x2a, 0x4a, 0x13, 0xc1, 0xf4, 0x37, 0x59,
	0x66, 0x89, 0xd2, 0x44, 0xab, 0xb0, 0x28, 0xa5, 0x96, 0xde, 0xda, 0xf9, 0x61, 0xeb, 0x86, 0x20,
	0x85, 0x9d, 0xfb, 0xe4, 0x31, 0x97, 0x5c, 0xda, 0x76, 0x64, 0x5e, 0x20, 0x3e, 0xbf, 0xe9, 0xe3,
	0xf9, 0x87, 0xcf, 0x71, 0xbc, 0x87, 0xd1, 0x8f, 0x66, 0xd3, 0x7b, 0x81, 0x17, 0x39, 0x51, 0x3a,
	0x39, 0x17, 0x5f, 0x88, 0x66, 0x89, 0x20, 0x42, 0x2a, 0x1f, 0xad, 0xd0, 0x66, 0x7e, 0x78, 0x64,
	0xc0, 0x27, 0x9b, 0xef, 0x4d, 0xec, 0x3d, 0xc3, 0x38, 0x15, 0x9a, 0x09, 0x9d, 0x10, 0xce, 0xfc,
	0x7b, 0xb6, 0x34, 0x86, 0x64, 0xcb, 0x99, 0xf7, 0x0a, 0x4f, 0x39, 0x4d, 0x8e, 0xb5, 0x66, 0xca,
	0x16, 0xfa, 0xa6, 0xb0, 0x9b, 0x35, 0xbf, 0x97, 0xf8, 0x7d, 0xbc, 0x33, 0xf1, 0x96, 0xb3, 0x03,
	0xe6, 0xb4, 0x7b, 0x9b, 0xc1, 0x3c, 0xad, 0x18, 0x38, 0xfe, 0x00, 0x06, 0x4d, 0x62, 0x1b, 0x0e,
	0x53, 0x79, 0x16, 0xda, 0xbf, 0x7f, 0xc5, 0xb1, 0x09, 0xbc, 0xa7, 0x78, 0x9c, 0xb1, 0xba, 0x95,
	0x87, 0x96, 0x8e, 0x32, 0x56, 0x83, 0xdb, 0x42, 0x50, 0x1f, 0x38, 0xe8, 0xcc, 0x8a, 0xe4, 0xad,
	0x39, 0x02, 0x58, 0x91, 0xdc, 0x99, 0x06, 0x82, 0x39, 0x76, 0x10, 0xcc, 0x35, 0x9e, 0xb6, 0x7f,
	0x01, 0xc8, 0xd8, 0xf2, 0x09, 0x64, 0xe0, 0x5f, 0x2b, 0x30, 0x31, 0xb9, 0x5b, 0x71, 0xf7, 0x55,
	0xad, 0xda, 0x89, 0x29, 0x9c, 0x50, 0xb5, 0x72, 0xf7, 0x0d, 0x04, 0xf9, 0xa1, 0x83, 0x60, 0xbe,
	0xc4, 0x1e, 0x95, 0x42, 0x93, 0x54, 0xa8, 0x84, 0x29, 0x9d, 0x9e, 0x88, 0x99, 0x98, 0xad, 0xd0,
	0x66, 0x74, 0x58, 0x74, 0xe4, 0x5d, 0x07, 0xde, 0x0c, 0xfe, 0xff, 0x58, 0xa2, 0x9d, 0x7f, 0xf9,
	0x1b, 0xf4, 0x2e, 0x4d, 0x80, 0x7e, 0x36, 0x01, 0xfa, 0xd5, 0x04, 0xe8, 0x4f, 0x13, 0xa0, 0xef,
	0xff, 0x82, 0xde, 0x71, 0x68, 0xbf, 0x8c, 0xd7, 0xb7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x20,
	0x74, 0x55, 0x94, 0x02, 0x00, 0x00,
}
