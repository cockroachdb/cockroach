// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/engine/enginepb/file_registry.proto

/*
	Package enginepb is a generated protocol buffer package.

	It is generated from these files:
		storage/engine/enginepb/file_registry.proto
		storage/engine/enginepb/mvcc.proto
		storage/engine/enginepb/mvcc3.proto
		storage/engine/enginepb/rocksdb.proto

	It has these top-level messages:
		FileRegistry
		FileEntry
		MVCCMetadata
		MVCCStats
		TxnMeta
		MVCCNetworkStats
		SSTUserProperties
		SSTUserPropertiesCollection
*/
package enginepb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegistryVersion int32

const (
	// The only version so far.
	RegistryVersion_Base RegistryVersion = 0
)

var RegistryVersion_name = map[int32]string{
	0: "Base",
}
var RegistryVersion_value = map[string]int32{
	"Base": 0,
}

func (x RegistryVersion) String() string {
	return proto.EnumName(RegistryVersion_name, int32(x))
}
func (RegistryVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptorFileRegistry, []int{0} }

// EnvLevel determines which rocksdb::Env is used.
type EnvLevel int32

const (
	// The default Env when no encryption is used.
	// File using Plaintext are not recorded in the file registry.
	EnvLevel_Plaintext EnvLevel = 0
	// The Env using store-level keys.
	// Used only to read/write the data key registry.
	EnvLevel_Store EnvLevel = 1
	// The Env using data-level keys.
	// Used as the default rocksdb Env when encryption is enabled.
	EnvLevel_Data EnvLevel = 2
)

var EnvLevel_name = map[int32]string{
	0: "Plaintext",
	1: "Store",
	2: "Data",
}
var EnvLevel_value = map[string]int32{
	"Plaintext": 0,
	"Store":     1,
	"Data":      2,
}

func (x EnvLevel) String() string {
	return proto.EnumName(EnvLevel_name, int32(x))
}
func (EnvLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptorFileRegistry, []int{1} }

// Registry describes how a files are handled. This includes the
// rockdb::Env responsible for each file as well as opaque env details.
type FileRegistry struct {
	// version is currently always Base.
	Version RegistryVersion `protobuf:"varint,1,opt,name=version,proto3,enum=cockroach.storage.engine.enginepb.RegistryVersion" json:"version,omitempty"`
	// Map of filename -> FileEntry.
	// Filename is relative to the rocksdb dir if the file is inside it.
	// Otherwise it is an absolute path.
	// TODO(mberhault): figure out if we need anything special for Windows.
	Files map[string]*FileEntry `protobuf:"bytes,2,rep,name=files" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FileRegistry) Reset()                    { *m = FileRegistry{} }
func (m *FileRegistry) String() string            { return proto.CompactTextString(m) }
func (*FileRegistry) ProtoMessage()               {}
func (*FileRegistry) Descriptor() ([]byte, []int) { return fileDescriptorFileRegistry, []int{0} }

type FileEntry struct {
	// Env level identifies which rocksdb::Env is responsible for this file.
	EnvLevel EnvLevel `protobuf:"varint,1,opt,name=env_level,json=envLevel,proto3,enum=cockroach.storage.engine.enginepb.EnvLevel" json:"env_level,omitempty"`
	// Env-specific fields for non-0 env. These are known by CCL code only.
	// This is a serialized protobuf. We cannot use protobuf.Any since we use
	// MessageLite in C++.
	EncryptionSettings []byte `protobuf:"bytes,2,opt,name=encryption_settings,json=encryptionSettings,proto3" json:"encryption_settings,omitempty"`
}

func (m *FileEntry) Reset()                    { *m = FileEntry{} }
func (m *FileEntry) String() string            { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()               {}
func (*FileEntry) Descriptor() ([]byte, []int) { return fileDescriptorFileRegistry, []int{1} }

func init() {
	proto.RegisterType((*FileRegistry)(nil), "cockroach.storage.engine.enginepb.FileRegistry")
	proto.RegisterType((*FileEntry)(nil), "cockroach.storage.engine.enginepb.FileEntry")
	proto.RegisterEnum("cockroach.storage.engine.enginepb.RegistryVersion", RegistryVersion_name, RegistryVersion_value)
	proto.RegisterEnum("cockroach.storage.engine.enginepb.EnvLevel", EnvLevel_name, EnvLevel_value)
}
func (m *FileRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileRegistry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFileRegistry(dAtA, i, uint64(m.Version))
	}
	if len(m.Files) > 0 {
		keysForFiles := make([]string, 0, len(m.Files))
		for k := range m.Files {
			keysForFiles = append(keysForFiles, string(k))
		}
		sortkeys.Strings(keysForFiles)
		for _, k := range keysForFiles {
			dAtA[i] = 0x12
			i++
			v := m.Files[string(k)]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFileRegistry(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFileRegistry(uint64(len(k))) + msgSize
			i = encodeVarintFileRegistry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFileRegistry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFileRegistry(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *FileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFileRegistry(dAtA, i, uint64(m.EnvLevel))
	}
	if len(m.EncryptionSettings) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.EncryptionSettings)))
		i += copy(dAtA[i:], m.EncryptionSettings)
	}
	return i, nil
}

func encodeVarintFileRegistry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FileRegistry) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFileRegistry(uint64(m.Version))
	}
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FileEntry) Size() (n int) {
	var l int
	_ = l
	if m.EnvLevel != 0 {
		n += 1 + sovFileRegistry(uint64(m.EnvLevel))
	}
	l = len(m.EncryptionSettings)
	if l > 0 {
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}

func sovFileRegistry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFileRegistry(x uint64) (n int) {
	return sovFileRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (RegistryVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = make(map[string]*FileEntry)
			}
			var mapkey string
			var mapvalue *FileEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FileEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Files[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvLevel", wireType)
			}
			m.EnvLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvLevel |= (EnvLevel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionSettings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionSettings = append(m.EncryptionSettings[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptionSettings == nil {
				m.EncryptionSettings = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFileRegistry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFileRegistry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFileRegistry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFileRegistry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileRegistry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("storage/engine/enginepb/file_registry.proto", fileDescriptorFileRegistry)
}

var fileDescriptorFileRegistry = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xbf, 0x8e, 0xda, 0x40,
	0x10, 0xc6, 0xbd, 0x26, 0x24, 0xf6, 0x40, 0x12, 0x6b, 0x93, 0x02, 0x11, 0xc9, 0x22, 0x54, 0x08,
	0x22, 0x5b, 0x72, 0x9a, 0x88, 0x12, 0x85, 0x28, 0x05, 0x05, 0x32, 0x52, 0x8a, 0x34, 0xc8, 0x58,
	0x83, 0xb3, 0xc2, 0xda, 0x45, 0xbb, 0x1b, 0x2b, 0x7e, 0x81, 0xd4, 0xa9, 0xf2, 0x4c, 0x94, 0x57,
	0x5e, 0x79, 0xe7, 0x7b, 0x91, 0x93, 0xff, 0x1d, 0xa7, 0x6b, 0x8e, 0x6a, 0x67, 0x77, 0xe6, 0xf7,
	0x7d, 0x9f, 0x46, 0x0b, 0x33, 0xa5, 0x85, 0x8c, 0x12, 0xf4, 0x91, 0x27, 0x8c, 0xb7, 0xc7, 0x71,
	0xe7, 0xef, 0x59, 0x8a, 0x5b, 0x89, 0x09, 0x53, 0x5a, 0xe6, 0xde, 0x51, 0x0a, 0x2d, 0xe8, 0xc7,
	0x58, 0xc4, 0x07, 0x29, 0xa2, 0xf8, 0x97, 0xd7, 0x60, 0x5e, 0x3d, 0xef, 0xb5, 0xd8, 0xf0, 0x7d,
	0x22, 0x12, 0x51, 0x4d, 0xfb, 0x65, 0x55, 0x83, 0xe3, 0xff, 0x26, 0xf4, 0xbf, 0xb1, 0x14, 0xc3,
	0x46, 0x8f, 0xae, 0xe0, 0x55, 0x86, 0x52, 0x31, 0xc1, 0x07, 0x64, 0x44, 0x26, 0x6f, 0x82, 0xc0,
	0x7b, 0x56, 0xdb, 0x6b, 0xe9, 0x1f, 0x35, 0x19, 0xb6, 0x12, 0x74, 0x0d, 0xdd, 0x32, 0xae, 0x1a,
	0x98, 0xa3, 0xce, 0xa4, 0x17, 0xcc, 0x2f, 0xd0, 0x7a, 0x9c, 0xa6, 0xba, 0xa8, 0x25, 0xd7, 0x32,
	0x0f, 0x6b, 0xa1, 0xe1, 0x1e, 0xe0, 0xfc, 0x48, 0x1d, 0xe8, 0x1c, 0x30, 0xaf, 0x92, 0xda, 0x61,
	0x59, 0xd2, 0x05, 0x74, 0xb3, 0x28, 0xfd, 0x8d, 0x03, 0x73, 0x44, 0x26, 0xbd, 0xe0, 0xd3, 0x85,
	0x8e, 0x8d, 0x47, 0x85, 0xce, 0xcd, 0x2f, 0x64, 0xfc, 0x97, 0x80, 0xfd, 0xd0, 0xa0, 0xdf, 0xc1,
	0x46, 0x9e, 0x6d, 0x53, 0xcc, 0x30, 0x6d, 0xf6, 0x32, 0xbb, 0x40, 0x79, 0xc9, 0xb3, 0x55, 0x89,
	0x84, 0x16, 0x36, 0x15, 0xf5, 0xe1, 0x1d, 0xf2, 0x58, 0xe6, 0x47, 0xcd, 0x04, 0xdf, 0x2a, 0xd4,
	0x9a, 0xf1, 0x44, 0x55, 0x69, 0xfb, 0x21, 0x3d, 0xb7, 0x36, 0x4d, 0x67, 0xfa, 0x01, 0xde, 0x3e,
	0x59, 0x2f, 0xb5, 0xe0, 0xc5, 0x22, 0x52, 0xe8, 0x18, 0x53, 0x0f, 0xac, 0xd6, 0x83, 0xbe, 0x06,
	0x7b, 0x9d, 0x46, 0x8c, 0x6b, 0xfc, 0xa3, 0x1d, 0x83, 0xda, 0xd0, 0xdd, 0x68, 0x21, 0xd1, 0x21,
	0xe5, 0xfc, 0xd7, 0x48, 0x47, 0x8e, 0xb9, 0x18, 0x9f, 0x6e, 0x5d, 0xe3, 0x54, 0xb8, 0xe4, 0xaa,
	0x70, 0xc9, 0x75, 0xe1, 0x92, 0x9b, 0xc2, 0x25, 0xff, 0xee, 0x5c, 0xe3, 0xa7, 0xd5, 0x86, 0xde,
	0xbd, 0xac, 0x7e, 0xc6, 0xe7, 0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x98, 0xdc, 0x52, 0x81,
	0x02, 0x00, 0x00,
}
