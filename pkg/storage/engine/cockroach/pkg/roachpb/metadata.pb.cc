// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/roachpb/metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/pkg/roachpb/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto() {
  Attributes_default_instance_.Shutdown();
  ReplicaDescriptor_default_instance_.Shutdown();
  ReplicaIdent_default_instance_.Shutdown();
  RangeDescriptor_default_instance_.Shutdown();
  StoreCapacity_default_instance_.Shutdown();
  NodeDescriptor_default_instance_.Shutdown();
  StoreDescriptor_default_instance_.Shutdown();
  StoreDeadReplicas_default_instance_.Shutdown();
  Locality_default_instance_.Shutdown();
  Tier_default_instance_.Shutdown();
}

void protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::util::protobuf_InitDefaults_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  Attributes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReplicaDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ReplicaIdent_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RangeDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StoreCapacity_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StoreDescriptor_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StoreDeadReplicas_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Locality_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Tier_default_instance_.DefaultConstruct();
  Attributes_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReplicaDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReplicaIdent_default_instance_.get_mutable()->InitAsDefaultInstance();
  RangeDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreCapacity_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreDeadReplicas_default_instance_.get_mutable()->InitAsDefaultInstance();
  Locality_default_instance_.get_mutable()->InitAsDefaultInstance();
  Tier_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_once_);
void protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_once_,
                 &protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl);
}
void protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  ::cockroach::util::protobuf_AddDesc_cockroach_2fpkg_2futil_2funresolved_5faddr_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_once_);
void protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_once_,
                 &protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fpkg_2froachpb_2fmetadata_2eproto {
  StaticDescriptorInitializer_cockroach_2fpkg_2froachpb_2fmetadata_2eproto() {
    protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  }
} static_descriptor_initializer_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForAttributes(
    Attributes* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attributes::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attributes::Attributes()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Attributes)
}

void Attributes::InitAsDefaultInstance() {
}

Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Attributes)
}

void Attributes::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Attributes& Attributes::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Attributes> Attributes_default_instance_;

Attributes* Attributes::New(::google::protobuf::Arena* arena) const {
  Attributes* n = new Attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attributes::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Attributes)
  attrs_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForAttributes, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Attributes)
}

size_t Attributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Attributes)
  size_t total_size = 0;

  // repeated string attrs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attrs_size());
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Attributes*>(&from));
}

void Attributes::MergeFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Attributes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Attributes::UnsafeMergeFrom(const Attributes& from) {
  GOOGLE_DCHECK(&from != this);
  attrs_.UnsafeMergeFrom(from.attrs_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Attributes::CopyFrom(const Attributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Attributes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Attributes::IsInitialized() const {

  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attributes::InternalSwap(Attributes* other) {
  attrs_.UnsafeArenaSwap(&other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Attributes::GetTypeName() const {
  return "cockroach.roachpb.Attributes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attributes

// repeated string attrs = 1;
int Attributes::attrs_size() const {
  return attrs_.size();
}
void Attributes::clear_attrs() {
  attrs_.Clear();
}
const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Attributes.attrs)
  return attrs_.Get(index);
}
::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Mutable(index);
}
void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Attributes.attrs)
}
void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Attributes.attrs)
}
::std::string* Attributes::add_attrs() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Add();
}
void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Attributes.attrs)
}
void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.Attributes.attrs)
}
void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.Attributes.attrs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Attributes.attrs)
  return attrs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Attributes.attrs)
  return &attrs_;
}

inline const Attributes* Attributes::internal_default_instance() {
  return &Attributes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReplicaDescriptor(
    ReplicaDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaDescriptor::kNodeIdFieldNumber;
const int ReplicaDescriptor::kStoreIdFieldNumber;
const int ReplicaDescriptor::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaDescriptor::ReplicaDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::InitAsDefaultInstance() {
}

ReplicaDescriptor::ReplicaDescriptor(const ReplicaDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&replica_id_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(replica_id_));
}

ReplicaDescriptor::~ReplicaDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaDescriptor)
  SharedDtor();
}

void ReplicaDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplicaDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplicaDescriptor& ReplicaDescriptor::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReplicaDescriptor> ReplicaDescriptor_default_instance_;

ReplicaDescriptor* ReplicaDescriptor::New(::google::protobuf::Arena* arena) const {
  ReplicaDescriptor* n = new ReplicaDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReplicaDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplicaDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, replica_id_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReplicaDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForReplicaDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replica_id;
        break;
      }

      // optional int32 replica_id = 3;
      case 3: {
        if (tag == 24) {
         parse_replica_id:
          set_has_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaDescriptor)
  return false;
#undef DO_
}

void ReplicaDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  // optional int32 replica_id = 3;
  if (has_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replica_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaDescriptor)
}

size_t ReplicaDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaDescriptor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional int32 replica_id = 3;
    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaDescriptor*>(&from));
}

void ReplicaDescriptor::MergeFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReplicaDescriptor::UnsafeMergeFrom(const ReplicaDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_replica_id()) {
      set_replica_id(from.replica_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReplicaDescriptor::CopyFrom(const ReplicaDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReplicaDescriptor::IsInitialized() const {

  return true;
}

void ReplicaDescriptor::Swap(ReplicaDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaDescriptor::InternalSwap(ReplicaDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplicaDescriptor::GetTypeName() const {
  return "cockroach.roachpb.ReplicaDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaDescriptor

// optional int32 node_id = 1;
bool ReplicaDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 ReplicaDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.node_id)
  return node_id_;
}
void ReplicaDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.node_id)
}

// optional int32 store_id = 2;
bool ReplicaDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 ReplicaDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.store_id)
  return store_id_;
}
void ReplicaDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.store_id)
}

// optional int32 replica_id = 3;
bool ReplicaDescriptor::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplicaDescriptor::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplicaDescriptor::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplicaDescriptor::clear_replica_id() {
  replica_id_ = 0;
  clear_has_replica_id();
}
::google::protobuf::int32 ReplicaDescriptor::replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.replica_id)
  return replica_id_;
}
void ReplicaDescriptor::set_replica_id(::google::protobuf::int32 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.replica_id)
}

inline const ReplicaDescriptor* ReplicaDescriptor::internal_default_instance() {
  return &ReplicaDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForReplicaIdent(
    ReplicaIdent* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaIdent::kRangeIdFieldNumber;
const int ReplicaIdent::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaIdent::ReplicaIdent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaIdent)
}

void ReplicaIdent::InitAsDefaultInstance() {
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
}

ReplicaIdent::ReplicaIdent(const ReplicaIdent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaIdent)
}

void ReplicaIdent::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replica_ = NULL;
  range_id_ = GOOGLE_LONGLONG(0);
}

ReplicaIdent::~ReplicaIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaIdent)
  SharedDtor();
}

void ReplicaIdent::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ReplicaIdent_default_instance_.get()) {
    delete replica_;
  }
}

void ReplicaIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReplicaIdent& ReplicaIdent::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReplicaIdent> ReplicaIdent_default_instance_;

ReplicaIdent* ReplicaIdent::New(::google::protobuf::Arena* arena) const {
  ReplicaIdent* n = new ReplicaIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ReplicaIdent)
  if (_has_bits_[0 / 32] & 3u) {
    range_id_ = GOOGLE_LONGLONG(0);
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ReplicaIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForReplicaIdent, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replica;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
      case 2: {
        if (tag == 18) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaIdent)
  return false;
#undef DO_
}

void ReplicaIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaIdent)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->replica_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaIdent)
}

size_t ReplicaIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ReplicaIdent)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 range_id = 1;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReplicaIdent*>(&from));
}

void ReplicaIdent::MergeFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ReplicaIdent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReplicaIdent::UnsafeMergeFrom(const ReplicaIdent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ReplicaIdent::CopyFrom(const ReplicaIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ReplicaIdent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReplicaIdent::IsInitialized() const {

  return true;
}

void ReplicaIdent::Swap(ReplicaIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaIdent::InternalSwap(ReplicaIdent* other) {
  std::swap(range_id_, other->range_id_);
  std::swap(replica_, other->replica_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ReplicaIdent::GetTypeName() const {
  return "cockroach.roachpb.ReplicaIdent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaIdent

// optional int64 range_id = 1;
bool ReplicaIdent::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaIdent::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaIdent::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaIdent::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
::google::protobuf::int64 ReplicaIdent::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.range_id)
  return range_id_;
}
void ReplicaIdent::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaIdent.range_id)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
bool ReplicaIdent::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaIdent::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaIdent::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaIdent::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& ReplicaIdent::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.replica)
  return replica_ != NULL ? *replica_
                         : *::cockroach::roachpb::ReplicaDescriptor::internal_default_instance();
}
::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaIdent.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReplicaIdent.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void ReplicaIdent::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaIdent.replica)
}

inline const ReplicaIdent* ReplicaIdent::internal_default_instance() {
  return &ReplicaIdent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRangeDescriptor(
    RangeDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDescriptor::kRangeIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
const int RangeDescriptor::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::InitAsDefaultInstance() {
}

RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_id_, 0, reinterpret_cast<char*>(&next_replica_id_) -
    reinterpret_cast<char*>(&range_id_) + sizeof(next_replica_id_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RangeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RangeDescriptor& RangeDescriptor::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RangeDescriptor> RangeDescriptor_default_instance_;

RangeDescriptor* RangeDescriptor::New(::google::protobuf::Arena* arena) const {
  RangeDescriptor* n = new RangeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.RangeDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RangeDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RangeDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(range_id_, next_replica_id_);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  replicas_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForRangeDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_range_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replicas;
        break;
      }

      // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
      case 4: {
        if (tag == 34) {
         parse_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_next_replica_id;
        break;
      }

      // optional int32 next_replica_id = 5;
      case 5: {
        if (tag == 40) {
         parse_next_replica_id:
          set_has_next_replica_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeDescriptor)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->replicas(i), output);
  }

  // optional int32 next_replica_id = 5;
  if (has_next_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_replica_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeDescriptor)
}

size_t RangeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.RangeDescriptor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional int64 range_id = 1;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional int32 next_replica_id = 5;
    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RangeDescriptor*>(&from));
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.RangeDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RangeDescriptor::UnsafeMergeFrom(const RangeDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  replicas_.MergeFrom(from.replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (from.has_next_replica_id()) {
      set_next_replica_id(from.next_replica_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.RangeDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {

  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  std::swap(range_id_, other->range_id_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(next_replica_id_, other->next_replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RangeDescriptor::GetTypeName() const {
  return "cockroach.roachpb.RangeDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeDescriptor

// optional int64 range_id = 1;
bool RangeDescriptor::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeDescriptor::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeDescriptor::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeDescriptor::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
::google::protobuf::int64 RangeDescriptor::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.range_id)
  return range_id_;
}
void RangeDescriptor::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.range_id)
}

// optional bytes start_key = 2;
bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.start_key)
}
void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.start_key)
}
void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.start_key)
}
::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeDescriptor::release_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.end_key)
}
void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.end_key)
}
void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.end_key)
}
::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RangeDescriptor::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.end_key)
}

// repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.RangeDescriptor.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_;
}

// optional int32 next_replica_id = 5;
bool RangeDescriptor::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RangeDescriptor::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RangeDescriptor::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RangeDescriptor::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
::google::protobuf::int32 RangeDescriptor::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.next_replica_id)
  return next_replica_id_;
}
void RangeDescriptor::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.next_replica_id)
}

inline const RangeDescriptor* RangeDescriptor::internal_default_instance() {
  return &RangeDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStoreCapacity(
    StoreCapacity* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreCapacity::kCapacityFieldNumber;
const int StoreCapacity::kAvailableFieldNumber;
const int StoreCapacity::kRangeCountFieldNumber;
const int StoreCapacity::kLeaseCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreCapacity::StoreCapacity()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreCapacity)
}

void StoreCapacity::InitAsDefaultInstance() {
}

StoreCapacity::StoreCapacity(const StoreCapacity& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreCapacity)
}

void StoreCapacity::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, reinterpret_cast<char*>(&lease_count_) -
    reinterpret_cast<char*>(&capacity_) + sizeof(lease_count_));
}

StoreCapacity::~StoreCapacity() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreCapacity)
  SharedDtor();
}

void StoreCapacity::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreCapacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreCapacity& StoreCapacity::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreCapacity> StoreCapacity_default_instance_;

StoreCapacity* StoreCapacity::New(::google::protobuf::Arena* arena) const {
  StoreCapacity* n = new StoreCapacity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreCapacity::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreCapacity)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoreCapacity, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreCapacity*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(capacity_, lease_count_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForStoreCapacity, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreCapacity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 capacity = 1;
      case 1: {
        if (tag == 8) {
          set_has_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional int64 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range_count;
        break;
      }

      // optional int32 range_count = 3;
      case 3: {
        if (tag == 24) {
         parse_range_count:
          set_has_range_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lease_count;
        break;
      }

      // optional int32 lease_count = 4;
      case 4: {
        if (tag == 32) {
         parse_lease_count:
          set_has_lease_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreCapacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreCapacity)
  return false;
#undef DO_
}

void StoreCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreCapacity)
  // optional int64 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  // optional int64 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  // optional int32 range_count = 3;
  if (has_range_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_count(), output);
  }

  // optional int32 lease_count = 4;
  if (has_lease_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lease_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreCapacity)
}

size_t StoreCapacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreCapacity)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    // optional int64 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->available());
    }

    // optional int32 range_count = 3;
    if (has_range_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_count());
    }

    // optional int32 lease_count = 4;
    if (has_lease_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lease_count());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCapacity::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreCapacity*>(&from));
}

void StoreCapacity::MergeFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreCapacity)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreCapacity::UnsafeMergeFrom(const StoreCapacity& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_range_count()) {
      set_range_count(from.range_count());
    }
    if (from.has_lease_count()) {
      set_lease_count(from.lease_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StoreCapacity::CopyFrom(const StoreCapacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreCapacity)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreCapacity::IsInitialized() const {

  return true;
}

void StoreCapacity::Swap(StoreCapacity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreCapacity::InternalSwap(StoreCapacity* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(available_, other->available_);
  std::swap(range_count_, other->range_count_);
  std::swap(lease_count_, other->lease_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreCapacity::GetTypeName() const {
  return "cockroach.roachpb.StoreCapacity";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreCapacity

// optional int64 capacity = 1;
bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.capacity)
  return capacity_;
}
void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.capacity)
}

// optional int64 available = 2;
bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.available)
  return available_;
}
void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.available)
}

// optional int32 range_count = 3;
bool StoreCapacity::has_range_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreCapacity::set_has_range_count() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreCapacity::clear_has_range_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreCapacity::clear_range_count() {
  range_count_ = 0;
  clear_has_range_count();
}
::google::protobuf::int32 StoreCapacity::range_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.range_count)
  return range_count_;
}
void StoreCapacity::set_range_count(::google::protobuf::int32 value) {
  set_has_range_count();
  range_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.range_count)
}

// optional int32 lease_count = 4;
bool StoreCapacity::has_lease_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreCapacity::set_has_lease_count() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreCapacity::clear_has_lease_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreCapacity::clear_lease_count() {
  lease_count_ = 0;
  clear_has_lease_count();
}
::google::protobuf::int32 StoreCapacity::lease_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.lease_count)
  return lease_count_;
}
void StoreCapacity::set_lease_count(::google::protobuf::int32 value) {
  set_has_lease_count();
  lease_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.lease_count)
}

inline const StoreCapacity* StoreCapacity::internal_default_instance() {
  return &StoreCapacity_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForNodeDescriptor(
    NodeDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDescriptor::kNodeIdFieldNumber;
const int NodeDescriptor::kAddressFieldNumber;
const int NodeDescriptor::kAttrsFieldNumber;
const int NodeDescriptor::kLocalityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDescriptor::NodeDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NodeDescriptor)
}

void NodeDescriptor::InitAsDefaultInstance() {
  address_ = const_cast< ::cockroach::util::UnresolvedAddr*>(
      ::cockroach::util::UnresolvedAddr::internal_default_instance());
  attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(
      ::cockroach::roachpb::Attributes::internal_default_instance());
  locality_ = const_cast< ::cockroach::roachpb::Locality*>(
      ::cockroach::roachpb::Locality::internal_default_instance());
}

NodeDescriptor::NodeDescriptor(const NodeDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NodeDescriptor)
}

void NodeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = NULL;
  attrs_ = NULL;
  locality_ = NULL;
  node_id_ = 0;
}

NodeDescriptor::~NodeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NodeDescriptor)
  SharedDtor();
}

void NodeDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &NodeDescriptor_default_instance_.get()) {
    delete address_;
    delete attrs_;
    delete locality_;
  }
}

void NodeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeDescriptor& NodeDescriptor::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeDescriptor> NodeDescriptor_default_instance_;

NodeDescriptor* NodeDescriptor::New(::google::protobuf::Arena* arena) const {
  NodeDescriptor* n = new NodeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.NodeDescriptor)
  if (_has_bits_[0 / 32] & 15u) {
    node_id_ = 0;
    if (has_address()) {
      if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
    }
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
    }
    if (has_locality()) {
      if (locality_ != NULL) locality_->::cockroach::roachpb::Locality::Clear();
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForNodeDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NodeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .cockroach.util.UnresolvedAddr address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // optional .cockroach.roachpb.Attributes attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_locality;
        break;
      }

      // optional .cockroach.roachpb.Locality locality = 4;
      case 4: {
        if (tag == 34) {
         parse_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NodeDescriptor)
  return false;
#undef DO_
}

void NodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NodeDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional .cockroach.util.UnresolvedAddr address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->address_, output);
  }

  // optional .cockroach.roachpb.Attributes attrs = 3;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->attrs_, output);
  }

  // optional .cockroach.roachpb.Locality locality = 4;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->locality_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NodeDescriptor)
}

size_t NodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.NodeDescriptor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional .cockroach.util.UnresolvedAddr address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional .cockroach.roachpb.Attributes attrs = 3;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    // optional .cockroach.roachpb.Locality locality = 4;
    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->locality_);
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeDescriptor*>(&from));
}

void NodeDescriptor::MergeFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.NodeDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeDescriptor::UnsafeMergeFrom(const NodeDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_address()) {
      mutable_address()->::cockroach::util::UnresolvedAddr::MergeFrom(from.address());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (from.has_locality()) {
      mutable_locality()->::cockroach::roachpb::Locality::MergeFrom(from.locality());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NodeDescriptor::CopyFrom(const NodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.NodeDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeDescriptor::IsInitialized() const {

  return true;
}

void NodeDescriptor::Swap(NodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDescriptor::InternalSwap(NodeDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(address_, other->address_);
  std::swap(attrs_, other->attrs_);
  std::swap(locality_, other->locality_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NodeDescriptor::GetTypeName() const {
  return "cockroach.roachpb.NodeDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDescriptor

// optional int32 node_id = 1;
bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.node_id)
  return node_id_;
}
void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NodeDescriptor.node_id)
}

// optional .cockroach.util.UnresolvedAddr address = 2;
bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
  clear_has_address();
}
const ::cockroach::util::UnresolvedAddr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.address)
  return address_ != NULL ? *address_
                         : *::cockroach::util::UnresolvedAddr::internal_default_instance();
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::cockroach::util::UnresolvedAddr;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.address)
  return address_;
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::release_address() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.address)
  clear_has_address();
  ::cockroach::util::UnresolvedAddr* temp = address_;
  address_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_address(::cockroach::util::UnresolvedAddr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.address)
}

// optional .cockroach.roachpb.Attributes attrs = 3;
bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
::cockroach::roachpb::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* NodeDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.attrs)
}

// optional .cockroach.roachpb.Locality locality = 4;
bool NodeDescriptor::has_locality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeDescriptor::set_has_locality() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeDescriptor::clear_has_locality() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeDescriptor::clear_locality() {
  if (locality_ != NULL) locality_->::cockroach::roachpb::Locality::Clear();
  clear_has_locality();
}
const ::cockroach::roachpb::Locality& NodeDescriptor::locality() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.locality)
  return locality_ != NULL ? *locality_
                         : *::cockroach::roachpb::Locality::internal_default_instance();
}
::cockroach::roachpb::Locality* NodeDescriptor::mutable_locality() {
  set_has_locality();
  if (locality_ == NULL) {
    locality_ = new ::cockroach::roachpb::Locality;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.locality)
  return locality_;
}
::cockroach::roachpb::Locality* NodeDescriptor::release_locality() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.locality)
  clear_has_locality();
  ::cockroach::roachpb::Locality* temp = locality_;
  locality_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_locality(::cockroach::roachpb::Locality* locality) {
  delete locality_;
  locality_ = locality;
  if (locality) {
    set_has_locality();
  } else {
    clear_has_locality();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.locality)
}

inline const NodeDescriptor* NodeDescriptor::internal_default_instance() {
  return &NodeDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStoreDescriptor(
    StoreDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDescriptor::kStoreIdFieldNumber;
const int StoreDescriptor::kAttrsFieldNumber;
const int StoreDescriptor::kNodeFieldNumber;
const int StoreDescriptor::kCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreDescriptor)
}

void StoreDescriptor::InitAsDefaultInstance() {
  attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(
      ::cockroach::roachpb::Attributes::internal_default_instance());
  node_ = const_cast< ::cockroach::roachpb::NodeDescriptor*>(
      ::cockroach::roachpb::NodeDescriptor::internal_default_instance());
  capacity_ = const_cast< ::cockroach::roachpb::StoreCapacity*>(
      ::cockroach::roachpb::StoreCapacity::internal_default_instance());
}

StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attrs_ = NULL;
  node_ = NULL;
  capacity_ = NULL;
  store_id_ = 0;
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &StoreDescriptor_default_instance_.get()) {
    delete attrs_;
    delete node_;
    delete capacity_;
  }
}

void StoreDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreDescriptor& StoreDescriptor::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreDescriptor> StoreDescriptor_default_instance_;

StoreDescriptor* StoreDescriptor::New(::google::protobuf::Arena* arena) const {
  StoreDescriptor* n = new StoreDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreDescriptor)
  if (_has_bits_[0 / 32] & 15u) {
    store_id_ = 0;
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
    }
    if (has_node()) {
      if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
    }
    if (has_capacity()) {
      if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForStoreDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 store_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // optional .cockroach.roachpb.Attributes attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }

      // optional .cockroach.roachpb.NodeDescriptor node = 3;
      case 3: {
        if (tag == 26) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_capacity;
        break;
      }

      // optional .cockroach.roachpb.StoreCapacity capacity = 4;
      case 4: {
        if (tag == 34) {
         parse_capacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreDescriptor)
  return false;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreDescriptor)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // optional .cockroach.roachpb.Attributes attrs = 2;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->attrs_, output);
  }

  // optional .cockroach.roachpb.NodeDescriptor node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->node_, output);
  }

  // optional .cockroach.roachpb.StoreCapacity capacity = 4;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->capacity_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreDescriptor)
}

size_t StoreDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreDescriptor)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional .cockroach.roachpb.Attributes attrs = 2;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    // optional .cockroach.roachpb.NodeDescriptor node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_);
    }

    // optional .cockroach.roachpb.StoreCapacity capacity = 4;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capacity_);
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDescriptor*>(&from));
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreDescriptor::UnsafeMergeFrom(const StoreDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (from.has_node()) {
      mutable_node()->::cockroach::roachpb::NodeDescriptor::MergeFrom(from.node());
    }
    if (from.has_capacity()) {
      mutable_capacity()->::cockroach::roachpb::StoreCapacity::MergeFrom(from.capacity());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {

  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  std::swap(store_id_, other->store_id_);
  std::swap(attrs_, other->attrs_);
  std::swap(node_, other->node_);
  std::swap(capacity_, other->capacity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreDescriptor::GetTypeName() const {
  return "cockroach.roachpb.StoreDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDescriptor

// optional int32 store_id = 1;
bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.store_id)
  return store_id_;
}
void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDescriptor.store_id)
}

// optional .cockroach.roachpb.Attributes attrs = 2;
bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
::cockroach::roachpb::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* StoreDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.attrs)
}

// optional .cockroach.roachpb.NodeDescriptor node = 3;
bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
  clear_has_node();
}
const ::cockroach::roachpb::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.node)
  return node_ != NULL ? *node_
                         : *::cockroach::roachpb::NodeDescriptor::internal_default_instance();
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cockroach::roachpb::NodeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.node)
  return node_;
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::release_node() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.node)
  clear_has_node();
  ::cockroach::roachpb::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_node(::cockroach::roachpb::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.node)
}

// optional .cockroach.roachpb.StoreCapacity capacity = 4;
bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
  clear_has_capacity();
}
const ::cockroach::roachpb::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_
                         : *::cockroach::roachpb::StoreCapacity::internal_default_instance();
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) {
    capacity_ = new ::cockroach::roachpb::StoreCapacity;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_;
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::release_capacity() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.capacity)
  clear_has_capacity();
  ::cockroach::roachpb::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_capacity(::cockroach::roachpb::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.capacity)
}

inline const StoreDescriptor* StoreDescriptor::internal_default_instance() {
  return &StoreDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStoreDeadReplicas(
    StoreDeadReplicas* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDeadReplicas::kStoreIdFieldNumber;
const int StoreDeadReplicas::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDeadReplicas::StoreDeadReplicas()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreDeadReplicas)
}

void StoreDeadReplicas::InitAsDefaultInstance() {
}

StoreDeadReplicas::StoreDeadReplicas(const StoreDeadReplicas& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreDeadReplicas)
}

void StoreDeadReplicas::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  store_id_ = 0;
}

StoreDeadReplicas::~StoreDeadReplicas() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreDeadReplicas)
  SharedDtor();
}

void StoreDeadReplicas::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StoreDeadReplicas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreDeadReplicas& StoreDeadReplicas::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreDeadReplicas> StoreDeadReplicas_default_instance_;

StoreDeadReplicas* StoreDeadReplicas::New(::google::protobuf::Arena* arena) const {
  StoreDeadReplicas* n = new StoreDeadReplicas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDeadReplicas::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreDeadReplicas)
  store_id_ = 0;
  replicas_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreDeadReplicas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForStoreDeadReplicas, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreDeadReplicas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 store_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_store_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replicas;
        break;
      }

      // repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
      case 2: {
        if (tag == 18) {
         parse_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreDeadReplicas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreDeadReplicas)
  return false;
#undef DO_
}

void StoreDeadReplicas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreDeadReplicas)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->replicas(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreDeadReplicas)
}

size_t StoreDeadReplicas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreDeadReplicas)
  size_t total_size = 0;

  // optional int32 store_id = 1;
  if (has_store_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->store_id());
  }

  // repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
  {
    unsigned int count = this->replicas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(i));
    }
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDeadReplicas::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreDeadReplicas*>(&from));
}

void StoreDeadReplicas::MergeFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreDeadReplicas)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreDeadReplicas::UnsafeMergeFrom(const StoreDeadReplicas& from) {
  GOOGLE_DCHECK(&from != this);
  replicas_.MergeFrom(from.replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StoreDeadReplicas::CopyFrom(const StoreDeadReplicas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreDeadReplicas)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreDeadReplicas::IsInitialized() const {

  return true;
}

void StoreDeadReplicas::Swap(StoreDeadReplicas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDeadReplicas::InternalSwap(StoreDeadReplicas* other) {
  std::swap(store_id_, other->store_id_);
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreDeadReplicas::GetTypeName() const {
  return "cockroach.roachpb.StoreDeadReplicas";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDeadReplicas

// optional int32 store_id = 1;
bool StoreDeadReplicas::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDeadReplicas::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDeadReplicas::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDeadReplicas::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
::google::protobuf::int32 StoreDeadReplicas::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.store_id)
  return store_id_;
}
void StoreDeadReplicas::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDeadReplicas.store_id)
}

// repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
int StoreDeadReplicas::replicas_size() const {
  return replicas_.size();
}
void StoreDeadReplicas::clear_replicas() {
  replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaIdent& StoreDeadReplicas::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Get(index);
}
::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >*
StoreDeadReplicas::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >&
StoreDeadReplicas::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_;
}

inline const StoreDeadReplicas* StoreDeadReplicas::internal_default_instance() {
  return &StoreDeadReplicas_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLocality(
    Locality* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locality::kTiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locality::Locality()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Locality)
}

void Locality::InitAsDefaultInstance() {
}

Locality::Locality(const Locality& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Locality)
}

void Locality::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Locality::~Locality() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Locality)
  SharedDtor();
}

void Locality::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Locality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Locality& Locality::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Locality> Locality_default_instance_;

Locality* Locality::New(::google::protobuf::Arena* arena) const {
  Locality* n = new Locality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Locality::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Locality)
  tiers_.Clear();
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Locality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForLocality, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Locality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.roachpb.Tier tiers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tiers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Locality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Locality)
  return false;
#undef DO_
}

void Locality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Locality)
  // repeated .cockroach.roachpb.Tier tiers = 1;
  for (unsigned int i = 0, n = this->tiers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tiers(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Locality)
}

size_t Locality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Locality)
  size_t total_size = 0;

  // repeated .cockroach.roachpb.Tier tiers = 1;
  {
    unsigned int count = this->tiers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiers(i));
    }
  }

  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Locality::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Locality*>(&from));
}

void Locality::MergeFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Locality)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Locality::UnsafeMergeFrom(const Locality& from) {
  GOOGLE_DCHECK(&from != this);
  tiers_.MergeFrom(from.tiers_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Locality::CopyFrom(const Locality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Locality)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Locality::IsInitialized() const {

  return true;
}

void Locality::Swap(Locality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Locality::InternalSwap(Locality* other) {
  tiers_.UnsafeArenaSwap(&other->tiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Locality::GetTypeName() const {
  return "cockroach.roachpb.Locality";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Locality

// repeated .cockroach.roachpb.Tier tiers = 1;
int Locality::tiers_size() const {
  return tiers_.size();
}
void Locality::clear_tiers() {
  tiers_.Clear();
}
const ::cockroach::roachpb::Tier& Locality::tiers(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Locality.tiers)
  return tiers_.Get(index);
}
::cockroach::roachpb::Tier* Locality::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Locality.tiers)
  return tiers_.Mutable(index);
}
::cockroach::roachpb::Tier* Locality::add_tiers() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Locality.tiers)
  return tiers_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >*
Locality::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Locality.tiers)
  return &tiers_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >&
Locality::tiers() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Locality.tiers)
  return tiers_;
}

inline const Locality* Locality::internal_default_instance() {
  return &Locality_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTier(
    Tier* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tier::kKeyFieldNumber;
const int Tier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tier::Tier()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Tier)
}

void Tier::InitAsDefaultInstance() {
}

Tier::Tier(const Tier& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Tier)
}

void Tier::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Tier)
  SharedDtor();
}

void Tier::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Tier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Tier& Tier::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Tier> Tier_default_instance_;

Tier* Tier::New(::google::protobuf::Arena* arena) const {
  Tier* n = new Tier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Tier)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTier, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Tier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Tier)
  return false;
#undef DO_
}

void Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Tier)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Tier)
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Tier)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tier::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Tier*>(&from));
}

void Tier::MergeFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Tier)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Tier::UnsafeMergeFrom(const Tier& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Tier)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Tier::IsInitialized() const {

  return true;
}

void Tier::Swap(Tier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tier::InternalSwap(Tier* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Tier::GetTypeName() const {
  return "cockroach.roachpb.Tier";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Tier

// optional string key = 1;
bool Tier::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Tier::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Tier::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Tier::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& Tier::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.key)
}
void Tier::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.key)
}
void Tier::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.key)
}
::std::string* Tier::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tier::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.key)
}

// optional string value = 2;
bool Tier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Tier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Tier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Tier::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& Tier::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.value)
}
void Tier::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.value)
}
void Tier::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.value)
}
::std::string* Tier::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Tier::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Tier::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.value)
}

inline const Tier* Tier::internal_default_instance() {
  return &Tier_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
