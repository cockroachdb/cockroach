// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/roachpb/metadata.proto

#ifndef PROTOBUF_cockroach_2fpkg_2froachpb_2fmetadata_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fpkg_2froachpb_2fmetadata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "cockroach/pkg/util/unresolved_addr.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
void protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

class Attributes;
class Locality;
class NodeDescriptor;
class RangeDescriptor;
class ReplicaDescriptor;
class ReplicaIdent;
class StoreCapacity;
class StoreDeadReplicas;
class StoreDescriptor;
class Tier;

// ===================================================================

class Attributes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.Attributes) */ {
 public:
  Attributes();
  virtual ~Attributes();

  Attributes(const Attributes& from);

  inline Attributes& operator=(const Attributes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Attributes& default_instance();

  static const Attributes* internal_default_instance();

  void Swap(Attributes* other);

  // implements Message ----------------------------------------------

  inline Attributes* New() const { return New(NULL); }

  Attributes* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Attributes& from);
  void MergeFrom(const Attributes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attributes* other);
  void UnsafeMergeFrom(const Attributes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string attrs = 1;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 1;
  const ::std::string& attrs(int index) const;
  ::std::string* mutable_attrs(int index);
  void set_attrs(int index, const ::std::string& value);
  void set_attrs(int index, const char* value);
  void set_attrs(int index, const char* value, size_t size);
  ::std::string* add_attrs();
  void add_attrs(const ::std::string& value);
  void add_attrs(const char* value);
  void add_attrs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attrs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attrs();

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Attributes)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attrs_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Attributes> Attributes_default_instance_;

// -------------------------------------------------------------------

class ReplicaDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReplicaDescriptor) */ {
 public:
  ReplicaDescriptor();
  virtual ~ReplicaDescriptor();

  ReplicaDescriptor(const ReplicaDescriptor& from);

  inline ReplicaDescriptor& operator=(const ReplicaDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ReplicaDescriptor& default_instance();

  static const ReplicaDescriptor* internal_default_instance();

  void Swap(ReplicaDescriptor* other);

  // implements Message ----------------------------------------------

  inline ReplicaDescriptor* New() const { return New(NULL); }

  ReplicaDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ReplicaDescriptor& from);
  void MergeFrom(const ReplicaDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicaDescriptor* other);
  void UnsafeMergeFrom(const ReplicaDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 2;
  bool has_store_id() const;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  ::google::protobuf::int32 store_id() const;
  void set_store_id(::google::protobuf::int32 value);

  // optional int32 replica_id = 3;
  bool has_replica_id() const;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 3;
  ::google::protobuf::int32 replica_id() const;
  void set_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicaDescriptor)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_replica_id();
  inline void clear_has_replica_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  ::google::protobuf::int32 replica_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReplicaDescriptor> ReplicaDescriptor_default_instance_;

// -------------------------------------------------------------------

class ReplicaIdent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.ReplicaIdent) */ {
 public:
  ReplicaIdent();
  virtual ~ReplicaIdent();

  ReplicaIdent(const ReplicaIdent& from);

  inline ReplicaIdent& operator=(const ReplicaIdent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ReplicaIdent& default_instance();

  static const ReplicaIdent* internal_default_instance();

  void Swap(ReplicaIdent* other);

  // implements Message ----------------------------------------------

  inline ReplicaIdent* New() const { return New(NULL); }

  ReplicaIdent* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ReplicaIdent& from);
  void MergeFrom(const ReplicaIdent& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicaIdent* other);
  void UnsafeMergeFrom(const ReplicaIdent& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 range_id = 1;
  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicaIdent)
 private:
  inline void set_has_range_id();
  inline void clear_has_range_id();
  inline void set_has_replica();
  inline void clear_has_replica();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  ::google::protobuf::int64 range_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReplicaIdent> ReplicaIdent_default_instance_;

// -------------------------------------------------------------------

class RangeDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.RangeDescriptor) */ {
 public:
  RangeDescriptor();
  virtual ~RangeDescriptor();

  RangeDescriptor(const RangeDescriptor& from);

  inline RangeDescriptor& operator=(const RangeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RangeDescriptor& default_instance();

  static const RangeDescriptor* internal_default_instance();

  void Swap(RangeDescriptor* other);

  // implements Message ----------------------------------------------

  inline RangeDescriptor* New() const { return New(NULL); }

  RangeDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RangeDescriptor& from);
  void MergeFrom(const RangeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeDescriptor* other);
  void UnsafeMergeFrom(const RangeDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 range_id = 1;
  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // optional bytes start_key = 2;
  bool has_start_key() const;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 2;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 3;
  bool has_end_key() const;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 3;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 4;
  const ::cockroach::roachpb::ReplicaDescriptor& replicas(int index) const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replicas(int index);
  ::cockroach::roachpb::ReplicaDescriptor* add_replicas();
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
      mutable_replicas();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
      replicas() const;

  // optional int32 next_replica_id = 5;
  bool has_next_replica_id() const;
  void clear_next_replica_id();
  static const int kNextReplicaIdFieldNumber = 5;
  ::google::protobuf::int32 next_replica_id() const;
  void set_next_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeDescriptor)
 private:
  inline void set_has_range_id();
  inline void clear_has_range_id();
  inline void set_has_start_key();
  inline void clear_has_start_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();
  inline void set_has_next_replica_id();
  inline void clear_has_next_replica_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor > replicas_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::google::protobuf::int64 range_id_;
  ::google::protobuf::int32 next_replica_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RangeDescriptor> RangeDescriptor_default_instance_;

// -------------------------------------------------------------------

class StoreCapacity : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.StoreCapacity) */ {
 public:
  StoreCapacity();
  virtual ~StoreCapacity();

  StoreCapacity(const StoreCapacity& from);

  inline StoreCapacity& operator=(const StoreCapacity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StoreCapacity& default_instance();

  static const StoreCapacity* internal_default_instance();

  void Swap(StoreCapacity* other);

  // implements Message ----------------------------------------------

  inline StoreCapacity* New() const { return New(NULL); }

  StoreCapacity* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StoreCapacity& from);
  void MergeFrom(const StoreCapacity& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreCapacity* other);
  void UnsafeMergeFrom(const StoreCapacity& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 capacity = 1;
  bool has_capacity() const;
  void clear_capacity();
  static const int kCapacityFieldNumber = 1;
  ::google::protobuf::int64 capacity() const;
  void set_capacity(::google::protobuf::int64 value);

  // optional int64 available = 2;
  bool has_available() const;
  void clear_available();
  static const int kAvailableFieldNumber = 2;
  ::google::protobuf::int64 available() const;
  void set_available(::google::protobuf::int64 value);

  // optional int32 range_count = 3;
  bool has_range_count() const;
  void clear_range_count();
  static const int kRangeCountFieldNumber = 3;
  ::google::protobuf::int32 range_count() const;
  void set_range_count(::google::protobuf::int32 value);

  // optional int32 lease_count = 4;
  bool has_lease_count() const;
  void clear_lease_count();
  static const int kLeaseCountFieldNumber = 4;
  ::google::protobuf::int32 lease_count() const;
  void set_lease_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.StoreCapacity)
 private:
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_range_count();
  inline void clear_has_range_count();
  inline void set_has_lease_count();
  inline void clear_has_lease_count();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 capacity_;
  ::google::protobuf::int64 available_;
  ::google::protobuf::int32 range_count_;
  ::google::protobuf::int32 lease_count_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StoreCapacity> StoreCapacity_default_instance_;

// -------------------------------------------------------------------

class NodeDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.NodeDescriptor) */ {
 public:
  NodeDescriptor();
  virtual ~NodeDescriptor();

  NodeDescriptor(const NodeDescriptor& from);

  inline NodeDescriptor& operator=(const NodeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const NodeDescriptor& default_instance();

  static const NodeDescriptor* internal_default_instance();

  void Swap(NodeDescriptor* other);

  // implements Message ----------------------------------------------

  inline NodeDescriptor* New() const { return New(NULL); }

  NodeDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NodeDescriptor& from);
  void MergeFrom(const NodeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeDescriptor* other);
  void UnsafeMergeFrom(const NodeDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // optional .cockroach.util.UnresolvedAddr address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::cockroach::util::UnresolvedAddr& address() const;
  ::cockroach::util::UnresolvedAddr* mutable_address();
  ::cockroach::util::UnresolvedAddr* release_address();
  void set_allocated_address(::cockroach::util::UnresolvedAddr* address);

  // optional .cockroach.roachpb.Attributes attrs = 3;
  bool has_attrs() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 3;
  const ::cockroach::roachpb::Attributes& attrs() const;
  ::cockroach::roachpb::Attributes* mutable_attrs();
  ::cockroach::roachpb::Attributes* release_attrs();
  void set_allocated_attrs(::cockroach::roachpb::Attributes* attrs);

  // optional .cockroach.roachpb.Locality locality = 4;
  bool has_locality() const;
  void clear_locality();
  static const int kLocalityFieldNumber = 4;
  const ::cockroach::roachpb::Locality& locality() const;
  ::cockroach::roachpb::Locality* mutable_locality();
  ::cockroach::roachpb::Locality* release_locality();
  void set_allocated_locality(::cockroach::roachpb::Locality* locality);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NodeDescriptor)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_attrs();
  inline void clear_has_attrs();
  inline void set_has_locality();
  inline void clear_has_locality();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::util::UnresolvedAddr* address_;
  ::cockroach::roachpb::Attributes* attrs_;
  ::cockroach::roachpb::Locality* locality_;
  ::google::protobuf::int32 node_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeDescriptor> NodeDescriptor_default_instance_;

// -------------------------------------------------------------------

class StoreDescriptor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.StoreDescriptor) */ {
 public:
  StoreDescriptor();
  virtual ~StoreDescriptor();

  StoreDescriptor(const StoreDescriptor& from);

  inline StoreDescriptor& operator=(const StoreDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StoreDescriptor& default_instance();

  static const StoreDescriptor* internal_default_instance();

  void Swap(StoreDescriptor* other);

  // implements Message ----------------------------------------------

  inline StoreDescriptor* New() const { return New(NULL); }

  StoreDescriptor* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StoreDescriptor& from);
  void MergeFrom(const StoreDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreDescriptor* other);
  void UnsafeMergeFrom(const StoreDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 store_id = 1;
  bool has_store_id() const;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  ::google::protobuf::int32 store_id() const;
  void set_store_id(::google::protobuf::int32 value);

  // optional .cockroach.roachpb.Attributes attrs = 2;
  bool has_attrs() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  const ::cockroach::roachpb::Attributes& attrs() const;
  ::cockroach::roachpb::Attributes* mutable_attrs();
  ::cockroach::roachpb::Attributes* release_attrs();
  void set_allocated_attrs(::cockroach::roachpb::Attributes* attrs);

  // optional .cockroach.roachpb.NodeDescriptor node = 3;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 3;
  const ::cockroach::roachpb::NodeDescriptor& node() const;
  ::cockroach::roachpb::NodeDescriptor* mutable_node();
  ::cockroach::roachpb::NodeDescriptor* release_node();
  void set_allocated_node(::cockroach::roachpb::NodeDescriptor* node);

  // optional .cockroach.roachpb.StoreCapacity capacity = 4;
  bool has_capacity() const;
  void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  const ::cockroach::roachpb::StoreCapacity& capacity() const;
  ::cockroach::roachpb::StoreCapacity* mutable_capacity();
  ::cockroach::roachpb::StoreCapacity* release_capacity();
  void set_allocated_capacity(::cockroach::roachpb::StoreCapacity* capacity);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.StoreDescriptor)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_attrs();
  inline void clear_has_attrs();
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_capacity();
  inline void clear_has_capacity();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::cockroach::roachpb::Attributes* attrs_;
  ::cockroach::roachpb::NodeDescriptor* node_;
  ::cockroach::roachpb::StoreCapacity* capacity_;
  ::google::protobuf::int32 store_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StoreDescriptor> StoreDescriptor_default_instance_;

// -------------------------------------------------------------------

class StoreDeadReplicas : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.StoreDeadReplicas) */ {
 public:
  StoreDeadReplicas();
  virtual ~StoreDeadReplicas();

  StoreDeadReplicas(const StoreDeadReplicas& from);

  inline StoreDeadReplicas& operator=(const StoreDeadReplicas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StoreDeadReplicas& default_instance();

  static const StoreDeadReplicas* internal_default_instance();

  void Swap(StoreDeadReplicas* other);

  // implements Message ----------------------------------------------

  inline StoreDeadReplicas* New() const { return New(NULL); }

  StoreDeadReplicas* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const StoreDeadReplicas& from);
  void MergeFrom(const StoreDeadReplicas& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreDeadReplicas* other);
  void UnsafeMergeFrom(const StoreDeadReplicas& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 store_id = 1;
  bool has_store_id() const;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 1;
  ::google::protobuf::int32 store_id() const;
  void set_store_id(::google::protobuf::int32 value);

  // repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 2;
  const ::cockroach::roachpb::ReplicaIdent& replicas(int index) const;
  ::cockroach::roachpb::ReplicaIdent* mutable_replicas(int index);
  ::cockroach::roachpb::ReplicaIdent* add_replicas();
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >*
      mutable_replicas();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >&
      replicas() const;

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.StoreDeadReplicas)
 private:
  inline void set_has_store_id();
  inline void clear_has_store_id();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent > replicas_;
  ::google::protobuf::int32 store_id_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StoreDeadReplicas> StoreDeadReplicas_default_instance_;

// -------------------------------------------------------------------

class Locality : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.Locality) */ {
 public:
  Locality();
  virtual ~Locality();

  Locality(const Locality& from);

  inline Locality& operator=(const Locality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Locality& default_instance();

  static const Locality* internal_default_instance();

  void Swap(Locality* other);

  // implements Message ----------------------------------------------

  inline Locality* New() const { return New(NULL); }

  Locality* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Locality& from);
  void MergeFrom(const Locality& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Locality* other);
  void UnsafeMergeFrom(const Locality& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cockroach.roachpb.Tier tiers = 1;
  int tiers_size() const;
  void clear_tiers();
  static const int kTiersFieldNumber = 1;
  const ::cockroach::roachpb::Tier& tiers(int index) const;
  ::cockroach::roachpb::Tier* mutable_tiers(int index);
  ::cockroach::roachpb::Tier* add_tiers();
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >*
      mutable_tiers();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >&
      tiers() const;

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Locality)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier > tiers_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Locality> Locality_default_instance_;

// -------------------------------------------------------------------

class Tier : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:cockroach.roachpb.Tier) */ {
 public:
  Tier();
  virtual ~Tier();

  Tier(const Tier& from);

  inline Tier& operator=(const Tier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Tier& default_instance();

  static const Tier* internal_default_instance();

  void Swap(Tier* other);

  // implements Message ----------------------------------------------

  inline Tier* New() const { return New(NULL); }

  Tier* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Tier& from);
  void MergeFrom(const Tier& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tier* other);
  void UnsafeMergeFrom(const Tier& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Tier)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_InitDefaults_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void  protobuf_AddDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto_impl();
  friend void protobuf_AssignDesc_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fpkg_2froachpb_2fmetadata_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Tier> Tier_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Attributes

// repeated string attrs = 1;
inline int Attributes::attrs_size() const {
  return attrs_.size();
}
inline void Attributes::clear_attrs() {
  attrs_.Clear();
}
inline const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Attributes.attrs)
  return attrs_.Get(index);
}
inline ::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Mutable(index);
}
inline void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
inline void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Attributes.attrs)
}
inline void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Attributes.attrs)
}
inline ::std::string* Attributes::add_attrs() {
  // @@protoc_insertion_point(field_add_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Add();
}
inline void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.Attributes.attrs)
}
inline void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.Attributes.attrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Attributes.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Attributes.attrs)
  return &attrs_;
}

inline const Attributes* Attributes::internal_default_instance() {
  return &Attributes_default_instance_.get();
}
// -------------------------------------------------------------------

// ReplicaDescriptor

// optional int32 node_id = 1;
inline bool ReplicaDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 ReplicaDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.node_id)
  return node_id_;
}
inline void ReplicaDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.node_id)
}

// optional int32 store_id = 2;
inline bool ReplicaDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicaDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicaDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicaDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 ReplicaDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.store_id)
  return store_id_;
}
inline void ReplicaDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.store_id)
}

// optional int32 replica_id = 3;
inline bool ReplicaDescriptor::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplicaDescriptor::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplicaDescriptor::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplicaDescriptor::clear_replica_id() {
  replica_id_ = 0;
  clear_has_replica_id();
}
inline ::google::protobuf::int32 ReplicaDescriptor::replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.replica_id)
  return replica_id_;
}
inline void ReplicaDescriptor::set_replica_id(::google::protobuf::int32 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.replica_id)
}

inline const ReplicaDescriptor* ReplicaDescriptor::internal_default_instance() {
  return &ReplicaDescriptor_default_instance_.get();
}
// -------------------------------------------------------------------

// ReplicaIdent

// optional int64 range_id = 1;
inline bool ReplicaIdent::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaIdent::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaIdent::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaIdent::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 ReplicaIdent::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.range_id)
  return range_id_;
}
inline void ReplicaIdent::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaIdent.range_id)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
inline bool ReplicaIdent::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicaIdent::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicaIdent::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicaIdent::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& ReplicaIdent::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaIdent.replica)
  return replica_ != NULL ? *replica_
                         : *::cockroach::roachpb::ReplicaDescriptor::internal_default_instance();
}
inline ::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaIdent.replica)
  return replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* ReplicaIdent::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ReplicaIdent.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void ReplicaIdent::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaIdent.replica)
}

inline const ReplicaIdent* ReplicaIdent::internal_default_instance() {
  return &ReplicaIdent_default_instance_.get();
}
// -------------------------------------------------------------------

// RangeDescriptor

// optional int64 range_id = 1;
inline bool RangeDescriptor::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeDescriptor::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeDescriptor::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeDescriptor::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 RangeDescriptor::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.range_id)
  return range_id_;
}
inline void RangeDescriptor::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.range_id)
}

// optional bytes start_key = 2;
inline bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
inline const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.start_key)
}
inline void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.start_key)
}
inline ::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeDescriptor::release_start_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.start_key)
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
inline bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
inline const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.end_key)
}
inline void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.end_key)
}
inline ::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeDescriptor::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.RangeDescriptor.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.end_key)
}

// repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
inline int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
inline void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
inline ::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
inline ::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.RangeDescriptor.replicas)
  return &replicas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_;
}

// optional int32 next_replica_id = 5;
inline bool RangeDescriptor::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RangeDescriptor::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RangeDescriptor::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RangeDescriptor::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
inline ::google::protobuf::int32 RangeDescriptor::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.next_replica_id)
  return next_replica_id_;
}
inline void RangeDescriptor::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.next_replica_id)
}

inline const RangeDescriptor* RangeDescriptor::internal_default_instance() {
  return &RangeDescriptor_default_instance_.get();
}
// -------------------------------------------------------------------

// StoreCapacity

// optional int64 capacity = 1;
inline bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
inline ::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.capacity)
  return capacity_;
}
inline void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.capacity)
}

// optional int64 available = 2;
inline bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
inline ::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.available)
  return available_;
}
inline void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.available)
}

// optional int32 range_count = 3;
inline bool StoreCapacity::has_range_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreCapacity::set_has_range_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreCapacity::clear_has_range_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreCapacity::clear_range_count() {
  range_count_ = 0;
  clear_has_range_count();
}
inline ::google::protobuf::int32 StoreCapacity::range_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.range_count)
  return range_count_;
}
inline void StoreCapacity::set_range_count(::google::protobuf::int32 value) {
  set_has_range_count();
  range_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.range_count)
}

// optional int32 lease_count = 4;
inline bool StoreCapacity::has_lease_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreCapacity::set_has_lease_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreCapacity::clear_has_lease_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreCapacity::clear_lease_count() {
  lease_count_ = 0;
  clear_has_lease_count();
}
inline ::google::protobuf::int32 StoreCapacity::lease_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.lease_count)
  return lease_count_;
}
inline void StoreCapacity::set_lease_count(::google::protobuf::int32 value) {
  set_has_lease_count();
  lease_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.lease_count)
}

inline const StoreCapacity* StoreCapacity::internal_default_instance() {
  return &StoreCapacity_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeDescriptor

// optional int32 node_id = 1;
inline bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.node_id)
  return node_id_;
}
inline void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NodeDescriptor.node_id)
}

// optional .cockroach.util.UnresolvedAddr address = 2;
inline bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
  clear_has_address();
}
inline const ::cockroach::util::UnresolvedAddr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.address)
  return address_ != NULL ? *address_
                         : *::cockroach::util::UnresolvedAddr::internal_default_instance();
}
inline ::cockroach::util::UnresolvedAddr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::cockroach::util::UnresolvedAddr;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.address)
  return address_;
}
inline ::cockroach::util::UnresolvedAddr* NodeDescriptor::release_address() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.address)
  clear_has_address();
  ::cockroach::util::UnresolvedAddr* temp = address_;
  address_ = NULL;
  return temp;
}
inline void NodeDescriptor::set_allocated_address(::cockroach::util::UnresolvedAddr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.address)
}

// optional .cockroach.roachpb.Attributes attrs = 3;
inline bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
inline const ::cockroach::roachpb::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
inline ::cockroach::roachpb::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_;
}
inline ::cockroach::roachpb::Attributes* NodeDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void NodeDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.attrs)
}

// optional .cockroach.roachpb.Locality locality = 4;
inline bool NodeDescriptor::has_locality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeDescriptor::set_has_locality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeDescriptor::clear_has_locality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeDescriptor::clear_locality() {
  if (locality_ != NULL) locality_->::cockroach::roachpb::Locality::Clear();
  clear_has_locality();
}
inline const ::cockroach::roachpb::Locality& NodeDescriptor::locality() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.locality)
  return locality_ != NULL ? *locality_
                         : *::cockroach::roachpb::Locality::internal_default_instance();
}
inline ::cockroach::roachpb::Locality* NodeDescriptor::mutable_locality() {
  set_has_locality();
  if (locality_ == NULL) {
    locality_ = new ::cockroach::roachpb::Locality;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.locality)
  return locality_;
}
inline ::cockroach::roachpb::Locality* NodeDescriptor::release_locality() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.NodeDescriptor.locality)
  clear_has_locality();
  ::cockroach::roachpb::Locality* temp = locality_;
  locality_ = NULL;
  return temp;
}
inline void NodeDescriptor::set_allocated_locality(::cockroach::roachpb::Locality* locality) {
  delete locality_;
  locality_ = locality;
  if (locality) {
    set_has_locality();
  } else {
    clear_has_locality();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.locality)
}

inline const NodeDescriptor* NodeDescriptor::internal_default_instance() {
  return &NodeDescriptor_default_instance_.get();
}
// -------------------------------------------------------------------

// StoreDescriptor

// optional int32 store_id = 1;
inline bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.store_id)
  return store_id_;
}
inline void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDescriptor.store_id)
}

// optional .cockroach.roachpb.Attributes attrs = 2;
inline bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
inline const ::cockroach::roachpb::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_
                         : *::cockroach::roachpb::Attributes::internal_default_instance();
}
inline ::cockroach::roachpb::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_;
}
inline ::cockroach::roachpb::Attributes* StoreDescriptor::release_attrs() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.attrs)
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.attrs)
}

// optional .cockroach.roachpb.NodeDescriptor node = 3;
inline bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
  clear_has_node();
}
inline const ::cockroach::roachpb::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.node)
  return node_ != NULL ? *node_
                         : *::cockroach::roachpb::NodeDescriptor::internal_default_instance();
}
inline ::cockroach::roachpb::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cockroach::roachpb::NodeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.node)
  return node_;
}
inline ::cockroach::roachpb::NodeDescriptor* StoreDescriptor::release_node() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.node)
  clear_has_node();
  ::cockroach::roachpb::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_node(::cockroach::roachpb::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.node)
}

// optional .cockroach.roachpb.StoreCapacity capacity = 4;
inline bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
  clear_has_capacity();
}
inline const ::cockroach::roachpb::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_
                         : *::cockroach::roachpb::StoreCapacity::internal_default_instance();
}
inline ::cockroach::roachpb::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) {
    capacity_ = new ::cockroach::roachpb::StoreCapacity;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_;
}
inline ::cockroach::roachpb::StoreCapacity* StoreDescriptor::release_capacity() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreDescriptor.capacity)
  clear_has_capacity();
  ::cockroach::roachpb::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
inline void StoreDescriptor::set_allocated_capacity(::cockroach::roachpb::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.capacity)
}

inline const StoreDescriptor* StoreDescriptor::internal_default_instance() {
  return &StoreDescriptor_default_instance_.get();
}
// -------------------------------------------------------------------

// StoreDeadReplicas

// optional int32 store_id = 1;
inline bool StoreDeadReplicas::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreDeadReplicas::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreDeadReplicas::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreDeadReplicas::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 StoreDeadReplicas::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.store_id)
  return store_id_;
}
inline void StoreDeadReplicas::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDeadReplicas.store_id)
}

// repeated .cockroach.roachpb.ReplicaIdent replicas = 2;
inline int StoreDeadReplicas::replicas_size() const {
  return replicas_.size();
}
inline void StoreDeadReplicas::clear_replicas() {
  replicas_.Clear();
}
inline const ::cockroach::roachpb::ReplicaIdent& StoreDeadReplicas::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Get(index);
}
inline ::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Mutable(index);
}
inline ::cockroach::roachpb::ReplicaIdent* StoreDeadReplicas::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >*
StoreDeadReplicas::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return &replicas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaIdent >&
StoreDeadReplicas::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.StoreDeadReplicas.replicas)
  return replicas_;
}

inline const StoreDeadReplicas* StoreDeadReplicas::internal_default_instance() {
  return &StoreDeadReplicas_default_instance_.get();
}
// -------------------------------------------------------------------

// Locality

// repeated .cockroach.roachpb.Tier tiers = 1;
inline int Locality::tiers_size() const {
  return tiers_.size();
}
inline void Locality::clear_tiers() {
  tiers_.Clear();
}
inline const ::cockroach::roachpb::Tier& Locality::tiers(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Locality.tiers)
  return tiers_.Get(index);
}
inline ::cockroach::roachpb::Tier* Locality::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Locality.tiers)
  return tiers_.Mutable(index);
}
inline ::cockroach::roachpb::Tier* Locality::add_tiers() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Locality.tiers)
  return tiers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >*
Locality::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Locality.tiers)
  return &tiers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Tier >&
Locality::tiers() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Locality.tiers)
  return tiers_;
}

inline const Locality* Locality::internal_default_instance() {
  return &Locality_default_instance_.get();
}
// -------------------------------------------------------------------

// Tier

// optional string key = 1;
inline bool Tier::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tier::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tier::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tier::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Tier::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tier::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.key)
}
inline void Tier::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.key)
}
inline void Tier::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.key)
}
inline ::std::string* Tier::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tier::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tier::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.key)
}

// optional string value = 2;
inline bool Tier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tier::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Tier::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Tier.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tier::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Tier.value)
}
inline void Tier::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Tier.value)
}
inline void Tier::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Tier.value)
}
inline ::std::string* Tier::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Tier.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tier::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Tier.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tier::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Tier.value)
}

inline const Tier* Tier::internal_default_instance() {
  return &Tier_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fpkg_2froachpb_2fmetadata_2eproto__INCLUDED
