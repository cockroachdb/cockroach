// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/pkg/util/hlc/timestamp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/pkg/util/hlc/timestamp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
namespace hlc {

void protobuf_ShutdownFile_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto() {
  Timestamp_default_instance_.Shutdown();
}

void protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Timestamp_default_instance_.DefaultConstruct();
  Timestamp_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_once_);
void protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_once_,
                 &protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_impl);
}
void protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_once_);
void protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_once_,
                 &protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto {
  StaticDescriptorInitializer_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto() {
    protobuf_AddDesc_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto();
  }
} static_descriptor_initializer_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForTimestamp(
    Timestamp* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kWallTimeFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.hlc.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.util.hlc.Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&wall_time_, 0, reinterpret_cast<char*>(&logical_) -
    reinterpret_cast<char*>(&wall_time_) + sizeof(logical_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:cockroach.util.hlc.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Timestamp& Timestamp::default_instance() {
  protobuf_InitDefaults_cockroach_2fpkg_2futil_2fhlc_2ftimestamp_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Timestamp> Timestamp_default_instance_;

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.hlc.Timestamp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Timestamp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Timestamp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wall_time_, logical_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForTimestamp, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.util.hlc.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 wall_time = 1;
      case 1: {
        if (tag == 8) {
          set_has_wall_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wall_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logical;
        break;
      }

      // optional int32 logical = 2;
      case 2: {
        if (tag == 16) {
         parse_logical:
          set_has_logical();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logical_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.hlc.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.hlc.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.hlc.Timestamp)
  // optional int64 wall_time = 1;
  if (has_wall_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wall_time(), output);
  }

  // optional int32 logical = 2;
  if (has_logical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logical(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.util.hlc.Timestamp)
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.hlc.Timestamp)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 wall_time = 1;
    if (has_wall_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wall_time());
    }

    // optional int32 logical = 2;
    if (has_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logical());
    }

  }
  total_size += unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Timestamp*>(&from));
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.hlc.Timestamp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Timestamp::UnsafeMergeFrom(const Timestamp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wall_time()) {
      set_wall_time(from.wall_time());
    }
    if (from.has_logical()) {
      set_logical(from.logical());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.hlc.Timestamp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  std::swap(wall_time_, other->wall_time_);
  std::swap(logical_, other->logical_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Timestamp::GetTypeName() const {
  return "cockroach.util.hlc.Timestamp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// optional int64 wall_time = 1;
bool Timestamp::has_wall_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Timestamp::set_has_wall_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Timestamp::clear_has_wall_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Timestamp::clear_wall_time() {
  wall_time_ = GOOGLE_LONGLONG(0);
  clear_has_wall_time();
}
::google::protobuf::int64 Timestamp::wall_time() const {
  // @@protoc_insertion_point(field_get:cockroach.util.hlc.Timestamp.wall_time)
  return wall_time_;
}
void Timestamp::set_wall_time(::google::protobuf::int64 value) {
  set_has_wall_time();
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.hlc.Timestamp.wall_time)
}

// optional int32 logical = 2;
bool Timestamp::has_logical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Timestamp::set_has_logical() {
  _has_bits_[0] |= 0x00000002u;
}
void Timestamp::clear_has_logical() {
  _has_bits_[0] &= ~0x00000002u;
}
void Timestamp::clear_logical() {
  logical_ = 0;
  clear_has_logical();
}
::google::protobuf::int32 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:cockroach.util.hlc.Timestamp.logical)
  return logical_;
}
void Timestamp::set_logical(::google::protobuf::int32 value) {
  set_has_logical();
  logical_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.hlc.Timestamp.logical)
}

inline const Timestamp* Timestamp::internal_default_instance() {
  return &Timestamp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hlc
}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
