// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/api.proto

package storage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
import enginepb "github.com/cockroachdb/cockroach/pkg/storage/engine/enginepb"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
import github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StoreRequestHeader locates a Store on a Node.
type StoreRequestHeader struct {
	NodeID               github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID              github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
}

func (m *StoreRequestHeader) Reset()         { *m = StoreRequestHeader{} }
func (m *StoreRequestHeader) String() string { return proto.CompactTextString(m) }
func (*StoreRequestHeader) ProtoMessage()    {}
func (*StoreRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{0}
}
func (m *StoreRequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *StoreRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreRequestHeader.Merge(dst, src)
}
func (m *StoreRequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *StoreRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_StoreRequestHeader proto.InternalMessageInfo

// A CollectChecksumRequest asks the addressed replica for the result of a
// roachpb.ComputeChecksumRequest.
type CollectChecksumRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// checksum_id identifies the corresponding roachpb.ComputeChecksumRequest.
	ChecksumID           github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,3,opt,name=checksum_id,json=checksumId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"checksum_id"`
	Checksum             []byte                                              `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
}

func (m *CollectChecksumRequest) Reset()         { *m = CollectChecksumRequest{} }
func (m *CollectChecksumRequest) String() string { return proto.CompactTextString(m) }
func (*CollectChecksumRequest) ProtoMessage()    {}
func (*CollectChecksumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{1}
}
func (m *CollectChecksumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectChecksumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CollectChecksumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectChecksumRequest.Merge(dst, src)
}
func (m *CollectChecksumRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectChecksumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectChecksumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectChecksumRequest proto.InternalMessageInfo

type CollectChecksumResponse struct {
	// The checksum is the sha512 hash of the requested computation. It is empty
	// if the computation failed.
	Checksum []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// snapshot is set if the roachpb.ComputeChecksumRequest had snapshot = true
	// and the response checksum is different from the request checksum.
	//
	// TODO(tschottdorf): with larger ranges, this is no longer tenable.
	// See https://github.com/cockroachdb/cockroach/issues/21128.
	Snapshot *roachpb.RaftSnapshotData `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// delta carries the stats of the range minus the recomputed stats.
	Delta enginepb.MVCCStatsDelta `protobuf:"bytes,3,opt,name=delta,proto3" json:"delta"`
	// persisted carries the persisted stats of the replica.
	Persisted            enginepb.MVCCStats `protobuf:"bytes,4,opt,name=persisted,proto3" json:"persisted"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
}

func (m *CollectChecksumResponse) Reset()         { *m = CollectChecksumResponse{} }
func (m *CollectChecksumResponse) String() string { return proto.CompactTextString(m) }
func (*CollectChecksumResponse) ProtoMessage()    {}
func (*CollectChecksumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{2}
}
func (m *CollectChecksumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectChecksumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CollectChecksumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectChecksumResponse.Merge(dst, src)
}
func (m *CollectChecksumResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectChecksumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectChecksumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectChecksumResponse proto.InternalMessageInfo

// WaitForApplicationRequest blocks until the addressed replica has applied the
// command with the specified lease index.
type WaitForApplicationRequest struct {
	StoreRequestHeader   `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID              github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	LeaseIndex           uint64                                               `protobuf:"varint,3,opt,name=lease_index,json=leaseIndex,proto3" json:"lease_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
}

func (m *WaitForApplicationRequest) Reset()         { *m = WaitForApplicationRequest{} }
func (m *WaitForApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForApplicationRequest) ProtoMessage()    {}
func (*WaitForApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{3}
}
func (m *WaitForApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *WaitForApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForApplicationRequest.Merge(dst, src)
}
func (m *WaitForApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *WaitForApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForApplicationRequest proto.InternalMessageInfo

type WaitForApplicationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *WaitForApplicationResponse) Reset()         { *m = WaitForApplicationResponse{} }
func (m *WaitForApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForApplicationResponse) ProtoMessage()    {}
func (*WaitForApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{4}
}
func (m *WaitForApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *WaitForApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForApplicationResponse.Merge(dst, src)
}
func (m *WaitForApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaitForApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForApplicationResponse proto.InternalMessageInfo

type WaitForReplicaInitRequest struct {
	StoreRequestHeader   `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID              github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
}

func (m *WaitForReplicaInitRequest) Reset()         { *m = WaitForReplicaInitRequest{} }
func (m *WaitForReplicaInitRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForReplicaInitRequest) ProtoMessage()    {}
func (*WaitForReplicaInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{5}
}
func (m *WaitForReplicaInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForReplicaInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *WaitForReplicaInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForReplicaInitRequest.Merge(dst, src)
}
func (m *WaitForReplicaInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *WaitForReplicaInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForReplicaInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForReplicaInitRequest proto.InternalMessageInfo

type WaitForReplicaInitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
}

func (m *WaitForReplicaInitResponse) Reset()         { *m = WaitForReplicaInitResponse{} }
func (m *WaitForReplicaInitResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForReplicaInitResponse) ProtoMessage()    {}
func (*WaitForReplicaInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_10afb58ece073b39, []int{6}
}
func (m *WaitForReplicaInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForReplicaInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *WaitForReplicaInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForReplicaInitResponse.Merge(dst, src)
}
func (m *WaitForReplicaInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaitForReplicaInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForReplicaInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForReplicaInitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreRequestHeader)(nil), "cockroach.storage.StoreRequestHeader")
	proto.RegisterType((*CollectChecksumRequest)(nil), "cockroach.storage.CollectChecksumRequest")
	proto.RegisterType((*CollectChecksumResponse)(nil), "cockroach.storage.CollectChecksumResponse")
	proto.RegisterType((*WaitForApplicationRequest)(nil), "cockroach.storage.WaitForApplicationRequest")
	proto.RegisterType((*WaitForApplicationResponse)(nil), "cockroach.storage.WaitForApplicationResponse")
	proto.RegisterType((*WaitForReplicaInitRequest)(nil), "cockroach.storage.WaitForReplicaInitRequest")
	proto.RegisterType((*WaitForReplicaInitResponse)(nil), "cockroach.storage.WaitForReplicaInitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PerReplicaClient is the client API for PerReplica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PerReplicaClient interface {
	CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error)
	WaitForApplication(ctx context.Context, in *WaitForApplicationRequest, opts ...grpc.CallOption) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest, opts ...grpc.CallOption) (*WaitForReplicaInitResponse, error)
}

type perReplicaClient struct {
	cc *grpc.ClientConn
}

func NewPerReplicaClient(cc *grpc.ClientConn) PerReplicaClient {
	return &perReplicaClient{cc}
}

func (c *perReplicaClient) CollectChecksum(ctx context.Context, in *CollectChecksumRequest, opts ...grpc.CallOption) (*CollectChecksumResponse, error) {
	out := new(CollectChecksumResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/CollectChecksum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perReplicaClient) WaitForApplication(ctx context.Context, in *WaitForApplicationRequest, opts ...grpc.CallOption) (*WaitForApplicationResponse, error) {
	out := new(WaitForApplicationResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perReplicaClient) WaitForReplicaInit(ctx context.Context, in *WaitForReplicaInitRequest, opts ...grpc.CallOption) (*WaitForReplicaInitResponse, error) {
	out := new(WaitForReplicaInitResponse)
	err := c.cc.Invoke(ctx, "/cockroach.storage.PerReplica/WaitForReplicaInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerReplicaServer is the server API for PerReplica service.
type PerReplicaServer interface {
	CollectChecksum(context.Context, *CollectChecksumRequest) (*CollectChecksumResponse, error)
	WaitForApplication(context.Context, *WaitForApplicationRequest) (*WaitForApplicationResponse, error)
	WaitForReplicaInit(context.Context, *WaitForReplicaInitRequest) (*WaitForReplicaInitResponse, error)
}

func RegisterPerReplicaServer(s *grpc.Server, srv PerReplicaServer) {
	s.RegisterService(&_PerReplica_serviceDesc, srv)
}

func _PerReplica_CollectChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectChecksumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).CollectChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/CollectChecksum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).CollectChecksum(ctx, req.(*CollectChecksumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerReplica_WaitForApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).WaitForApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/WaitForApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).WaitForApplication(ctx, req.(*WaitForApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerReplica_WaitForReplicaInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForReplicaInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerReplicaServer).WaitForReplicaInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.storage.PerReplica/WaitForReplicaInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerReplicaServer).WaitForReplicaInit(ctx, req.(*WaitForReplicaInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PerReplica_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.storage.PerReplica",
	HandlerType: (*PerReplicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectChecksum",
			Handler:    _PerReplica_CollectChecksum_Handler,
		},
		{
			MethodName: "WaitForApplication",
			Handler:    _PerReplica_WaitForApplication_Handler,
		},
		{
			MethodName: "WaitForReplicaInit",
			Handler:    _PerReplica_WaitForReplicaInit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage/api.proto",
}

func (m *StoreRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StoreID))
	}
	return i, nil
}

func (m *CollectChecksumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectChecksumRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.StoreRequestHeader.Size()))
	n1, err := m.StoreRequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.RangeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ChecksumID.Size()))
	n2, err := m.ChecksumID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Checksum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	return i, nil
}

func (m *CollectChecksumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectChecksumResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	if m.Snapshot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Snapshot.Size()))
		n3, err := m.Snapshot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Delta.Size()))
	n4, err := m.Delta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Persisted.Size()))
	n5, err := m.Persisted.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *WaitForApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.StoreRequestHeader.Size()))
	n6, err := m.StoreRequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.RangeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
	}
	if m.LeaseIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LeaseIndex))
	}
	return i, nil
}

func (m *WaitForApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WaitForReplicaInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForReplicaInitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.StoreRequestHeader.Size()))
	n7, err := m.StoreRequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.RangeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
	}
	return i, nil
}

func (m *WaitForReplicaInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForReplicaInitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StoreRequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovApi(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovApi(uint64(m.StoreID))
	}
	return n
}

func (m *CollectChecksumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	l = m.ChecksumID.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CollectChecksumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Delta.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Persisted.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *WaitForApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	if m.LeaseIndex != 0 {
		n += 1 + sovApi(uint64(m.LeaseIndex))
	}
	return n
}

func (m *WaitForApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WaitForReplicaInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	return n
}

func (m *WaitForReplicaInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= (github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChecksumID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &roachpb.RaftSnapshotData{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Persisted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseIndex", wireType)
			}
			m.LeaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForReplicaInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForReplicaInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForReplicaInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForReplicaInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForReplicaInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForReplicaInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("storage/api.proto", fileDescriptor_api_10afb58ece073b39) }

var fileDescriptor_api_10afb58ece073b39 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x95, 0xc1, 0x6f, 0xd3, 0x3e,
	0x14, 0xc7, 0x9b, 0x6e, 0x6b, 0xfb, 0x73, 0x7f, 0x12, 0x9a, 0x85, 0xc6, 0x28, 0x28, 0x99, 0x32,
	0x4d, 0x1a, 0x08, 0x12, 0xd1, 0x71, 0x47, 0x6b, 0x2b, 0x20, 0x87, 0xa1, 0x29, 0xd3, 0x40, 0xda,
	0x81, 0xc9, 0x8d, 0xbd, 0xd4, 0x5b, 0x16, 0x87, 0xd8, 0x45, 0xfc, 0x19, 0xdc, 0xf8, 0x87, 0x38,
	0x8c, 0x5b, 0x8f, 0x88, 0x43, 0x05, 0x99, 0xf8, 0x27, 0x38, 0x21, 0x3b, 0x4e, 0xbb, 0xd1, 0x30,
	0x75, 0xdc, 0x76, 0xaa, 0xfd, 0xfc, 0xde, 0xf7, 0xf9, 0xf3, 0xf5, 0x6b, 0x0b, 0x96, 0xb9, 0x60,
	0x29, 0x0a, 0x89, 0x8b, 0x12, 0xea, 0x24, 0x29, 0x13, 0x0c, 0x2e, 0x07, 0x2c, 0x38, 0x49, 0x19,
	0x0a, 0x06, 0x8e, 0x3e, 0x6c, 0xdd, 0x53, 0xdb, 0xa4, 0xef, 0xd2, 0x58, 0x90, 0x34, 0x46, 0xd1,
	0x61, 0x8a, 0x8e, 0x44, 0x9e, 0xdf, 0x5a, 0x29, 0x0e, 0x4f, 0x89, 0x40, 0x18, 0x09, 0xa4, 0xe3,
	0x76, 0x21, 0x4d, 0xe2, 0x90, 0xc6, 0xc5, 0x87, 0xcc, 0x7b, 0x1f, 0x04, 0x3a, 0x67, 0xfd, 0xaa,
	0x9c, 0x2d, 0x9d, 0x74, 0x3b, 0x64, 0x21, 0x53, 0x4b, 0x57, 0xae, 0xf2, 0xa8, 0x3d, 0x32, 0x00,
	0xdc, 0x13, 0x2c, 0x25, 0x3e, 0x79, 0x37, 0x24, 0x5c, 0xbc, 0x24, 0x08, 0x93, 0x14, 0x1e, 0x80,
	0x7a, 0xcc, 0x30, 0x39, 0xa4, 0x78, 0xd5, 0x58, 0x33, 0x36, 0x97, 0x3a, 0xdb, 0xd9, 0xd8, 0xaa,
	0xbd, 0x62, 0x98, 0x78, 0xbd, 0x5f, 0x63, 0x6b, 0x2b, 0xa4, 0x62, 0x30, 0xec, 0x3b, 0x01, 0x3b,
	0x75, 0x27, 0x9c, 0xb8, 0x3f, 0x5d, 0xbb, 0xc9, 0x49, 0xe8, 0x6a, 0x22, 0x27, 0x2f, 0xf3, 0x6b,
	0x52, 0xd1, 0xc3, 0xf0, 0x2d, 0x68, 0xc8, 0xfb, 0x2a, 0xf1, 0xaa, 0x12, 0xef, 0x66, 0x63, 0xab,
	0xae, 0x6e, 0xa1, 0xd4, 0x9f, 0x5e, 0x4b, 0x5d, 0xd7, 0xf9, 0x75, 0x25, 0xea, 0x61, 0xfb, 0x4b,
	0x15, 0xac, 0x74, 0x59, 0x14, 0x91, 0x40, 0x74, 0x07, 0x24, 0x38, 0xe1, 0xc3, 0x53, 0x0d, 0x07,
	0x5f, 0x80, 0xda, 0x40, 0x01, 0x2a, 0xaa, 0x66, 0x7b, 0xc3, 0x99, 0x79, 0x25, 0x67, 0xd6, 0x8d,
	0x4e, 0xe3, 0x6c, 0x6c, 0x55, 0x46, 0x63, 0xcb, 0xf0, 0x75, 0xb9, 0x64, 0x48, 0x51, 0x1c, 0x4e,
	0x18, 0x16, 0x72, 0x06, 0x5f, 0xc6, 0xfe, 0x81, 0x41, 0xd7, 0xf9, 0x75, 0x25, 0xea, 0x61, 0x78,
	0x0c, 0x9a, 0x81, 0xbe, 0xbb, 0x6c, 0xb1, 0xb0, 0x66, 0x6c, 0xfe, 0xdf, 0xf1, 0xe4, 0x35, 0xbe,
	0xcd, 0xeb, 0xfe, 0x50, 0xd0, 0xc8, 0x1d, 0x0e, 0x29, 0x76, 0xf6, 0xf7, 0xbd, 0x5e, 0x36, 0xb6,
	0x40, 0xe1, 0x86, 0xd7, 0xf3, 0x41, 0xa1, 0xee, 0x61, 0xd8, 0x02, 0x8d, 0x62, 0xb7, 0xba, 0x28,
	0x1b, 0xf9, 0x93, 0xbd, 0xfd, 0xa9, 0x0a, 0xee, 0xcc, 0x78, 0xc9, 0x13, 0x16, 0x73, 0x72, 0xa9,
	0xce, 0xb8, 0x5c, 0x07, 0x9f, 0x81, 0x06, 0x8f, 0x51, 0xc2, 0x07, 0x4c, 0x28, 0x7f, 0x9a, 0xed,
	0xf5, 0x0b, 0x56, 0x4f, 0xb1, 0x8f, 0xc4, 0x9e, 0x4e, 0xeb, 0x21, 0x81, 0xfc, 0x49, 0x11, 0xdc,
	0x01, 0x4b, 0x98, 0x44, 0x02, 0x29, 0xf4, 0x66, 0xfb, 0x49, 0xc9, 0x43, 0xe5, 0x53, 0xee, 0x14,
	0xc3, 0xee, 0xec, 0xbc, 0xee, 0x76, 0xf7, 0x04, 0x12, 0xbc, 0x27, 0x0b, 0x3b, 0x8b, 0xd2, 0x2d,
	0x3f, 0x57, 0x81, 0xbb, 0xe0, 0xbf, 0x84, 0xa4, 0x9c, 0x72, 0x41, 0xb0, 0x82, 0x6c, 0xb6, 0x1f,
	0x5d, 0x47, 0x52, 0xab, 0x4d, 0x45, 0xec, 0x9f, 0x06, 0xb8, 0xfb, 0x06, 0x51, 0xf1, 0x9c, 0xa5,
	0xdb, 0x49, 0x12, 0xd1, 0x00, 0x09, 0xca, 0xe2, 0x1b, 0x37, 0x68, 0x16, 0x68, 0x46, 0x04, 0x71,
	0x72, 0x48, 0x63, 0x4c, 0x3e, 0x28, 0xb7, 0x17, 0x7d, 0xa0, 0x42, 0x9e, 0x8c, 0xd8, 0xf7, 0x41,
	0xab, 0x0c, 0x33, 0x9f, 0x01, 0xfb, 0xf3, 0xd4, 0x05, 0x9f, 0xa8, 0x63, 0x2f, 0xa6, 0xe2, 0xa6,
	0xb9, 0x70, 0x01, 0xf2, 0x12, 0x45, 0x0e, 0xd9, 0xce, 0xaa, 0x00, 0xec, 0x92, 0xe2, 0x08, 0x1e,
	0x83, 0x5b, 0x7f, 0x7c, 0x25, 0xe0, 0x83, 0x12, 0xb0, 0xf2, 0x9f, 0xa0, 0xd6, 0xc3, 0x79, 0x52,
	0xb5, 0xbb, 0x15, 0xc8, 0x01, 0x9c, 0x75, 0x1f, 0x96, 0x8d, 0xee, 0x5f, 0x67, 0xb1, 0xf5, 0x78,
	0xce, 0xec, 0x92, 0xa6, 0x17, 0xdc, 0xb8, 0xaa, 0xe9, 0xec, 0xd3, 0x5f, 0xd5, 0xb4, 0xc4, 0x62,
	0xbb, 0xd2, 0xd9, 0x38, 0xfb, 0x61, 0x56, 0xce, 0x32, 0xd3, 0x18, 0x65, 0xa6, 0xf1, 0x35, 0x33,
	0x8d, 0xef, 0x99, 0x69, 0x7c, 0x3c, 0x37, 0x2b, 0xa3, 0x73, 0xb3, 0x72, 0x50, 0xd7, 0x1a, 0xfd,
	0x9a, 0xfa, 0xdb, 0xda, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x80, 0x8f, 0xfd, 0x72, 0x07,
	0x00, 0x00,
}
