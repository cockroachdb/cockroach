// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.storage;
option go_package = "storage";

import "util/hlc/legacy_timestamp.proto";
import "gogoproto/gogo.proto";

// Liveness holds information about a node's latest heartbeat and epoch.
//
// NOTE: Care must be taken when changing the encoding of this proto
// because it is used as part of conditional put operations. 
message Liveness {
  option (gogoproto.populate) = true;

  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Epoch is a monotonically-increasing value for node liveness. It
  // may be incremented if the liveness record expires (current time
  // is later than the expiration timestamp).
  int64 epoch = 2;
  // The timestamp at which this liveness record expires.
  util.hlc.LegacyTimestamp expiration = 3 [(gogoproto.nullable) = false];
  bool draining = 4;
  bool decommissioning = 5;
}

// NodeLivenessStatus describes the status of a node from the perspective of the
// liveness system.
enum NodeLivenessStatus {
  UNKNOWN = 0;
  // DEAD indicates the node is considered dead.
  DEAD = 1;
  // UNAVAILABLE indicates that the node is unavailable - it has not updated its
  // liveness record recently enough to be considered live, but has not been
  // unavailable long enough to be considered dead.
  UNAVAILABLE = 2;
  // LIVE indicates a live node.
  LIVE = 3;
  // DECOMMISSIONING indicates a node that is in the decommissioning process.
  DECOMMISSIONING = 4;
  // DECOMMISSIONED indicates a node that has finished the decommissioning
  // process.
  DECOMMISSIONED = 5;
}
