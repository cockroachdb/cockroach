// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/enginepb/file_registry.proto

package enginepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegistryVersion defines the version of a registry. Newly added versions
// should be larger than all currently and previously existing versions.
type RegistryVersion int32

const (
	// The initial version of the file registry that wrote a marshaled
	// FileRegistry proto to the COCKROACHDB_REGISTRY file on disk every time
	// it was updated.
	// TODO(ayang): replace with "reserved 0;" when we deprecate the old registry
	RegistryVersion_Base RegistryVersion = 0
	// The current version of the file registry that writes incremental
	// updates to the COCKROACHDB_ENCRYPTION_REGISTRY file on disk using
	// pebble's record writer.
	RegistryVersion_Records RegistryVersion = 1
)

var RegistryVersion_name = map[int32]string{
	0: "Base",
	1: "Records",
}

var RegistryVersion_value = map[string]int32{
	"Base":    0,
	"Records": 1,
}

func (x RegistryVersion) String() string {
	return proto.EnumName(RegistryVersion_name, int32(x))
}

func (RegistryVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{0}
}

// EnvType determines which rocksdb::Env is used and for what purpose.
type EnvType int32

const (
	// The default Env when no encryption is used.
	// File using Plaintext are not recorded in the file registry.
	EnvType_Plaintext EnvType = 0
	// The Env using store-level keys.
	// Used only to read/write the data key registry.
	EnvType_Store EnvType = 1
	// The Env using data-level keys.
	// Used as the default rocksdb Env when encryption is enabled.
	EnvType_Data EnvType = 2
)

var EnvType_name = map[int32]string{
	0: "Plaintext",
	1: "Store",
	2: "Data",
}

var EnvType_value = map[string]int32{
	"Plaintext": 0,
	"Store":     1,
	"Data":      2,
}

func (x EnvType) String() string {
	return proto.EnumName(EnvType_name, int32(x))
}

func (EnvType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{1}
}

// Registry describes how a files are handled. This includes the
// rockdb::Env responsible for each file as well as opaque env details.
type FileRegistry struct {
	// The version of the file registry.
	Version RegistryVersion `protobuf:"varint,1,opt,name=version,proto3,enum=cockroach.storage.enginepb.RegistryVersion" json:"version,omitempty"`
	// Map of filename -> FileEntry.
	// Filename is relative to the rocksdb dir if the file is inside it.
	// Otherwise it is an absolute path.
	// TODO(mberhault): figure out if we need anything special for Windows.
	Files map[string]*FileEntry `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FileRegistry) Reset()         { *m = FileRegistry{} }
func (m *FileRegistry) String() string { return proto.CompactTextString(m) }
func (*FileRegistry) ProtoMessage()    {}
func (*FileRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{0}
}
func (m *FileRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRegistry.Merge(m, src)
}
func (m *FileRegistry) XXX_Size() int {
	return m.Size()
}
func (m *FileRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_FileRegistry proto.InternalMessageInfo

type FileEntry struct {
	// Env type identifies which rocksdb::Env is responsible for this file.
	EnvType EnvType `protobuf:"varint,1,opt,name=env_type,json=envType,proto3,enum=cockroach.storage.enginepb.EnvType" json:"env_type,omitempty"`
	// Env-specific fields for non-0 env. These are known by CCL code only.
	// This is a serialized protobuf. We cannot use protobuf.Any since we use
	// MessageLite in C++.
	EncryptionSettings []byte `protobuf:"bytes,2,opt,name=encryption_settings,json=encryptionSettings,proto3" json:"encryption_settings,omitempty"`
}

func (m *FileEntry) Reset()         { *m = FileEntry{} }
func (m *FileEntry) String() string { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()    {}
func (*FileEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{1}
}
func (m *FileEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEntry.Merge(m, src)
}
func (m *FileEntry) XXX_Size() int {
	return m.Size()
}
func (m *FileEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEntry.DiscardUnknown(m)
}

var xxx_messageInfo_FileEntry proto.InternalMessageInfo

type RegistryHeader struct {
	// The version of the file registry.
	Version RegistryVersion `protobuf:"varint,1,opt,name=version,proto3,enum=cockroach.storage.enginepb.RegistryVersion" json:"version,omitempty"`
}

func (m *RegistryHeader) Reset()         { *m = RegistryHeader{} }
func (m *RegistryHeader) String() string { return proto.CompactTextString(m) }
func (*RegistryHeader) ProtoMessage()    {}
func (*RegistryHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{2}
}
func (m *RegistryHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryHeader.Merge(m, src)
}
func (m *RegistryHeader) XXX_Size() int {
	return m.Size()
}
func (m *RegistryHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryHeader.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryHeader proto.InternalMessageInfo

type RegistryUpdate struct {
	// Types that are valid to be assigned to Operation:
	//	*RegistryUpdate_Set
	//	*RegistryUpdate_Remove
	//	*RegistryUpdate_Rename
	//	*RegistryUpdate_Snapshot
	Operation isRegistryUpdate_Operation `protobuf_oneof:"operation"`
}

func (m *RegistryUpdate) Reset()         { *m = RegistryUpdate{} }
func (m *RegistryUpdate) String() string { return proto.CompactTextString(m) }
func (*RegistryUpdate) ProtoMessage()    {}
func (*RegistryUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{3}
}
func (m *RegistryUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryUpdate.Merge(m, src)
}
func (m *RegistryUpdate) XXX_Size() int {
	return m.Size()
}
func (m *RegistryUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryUpdate proto.InternalMessageInfo

type isRegistryUpdate_Operation interface {
	isRegistryUpdate_Operation()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RegistryUpdate_Set struct {
	Set *RegistryOpSet `protobuf:"bytes,1,opt,name=set,proto3,oneof" json:"set,omitempty"`
}
type RegistryUpdate_Remove struct {
	Remove *RegistryOpRemove `protobuf:"bytes,2,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
}
type RegistryUpdate_Rename struct {
	Rename *RegistryOpRename `protobuf:"bytes,3,opt,name=rename,proto3,oneof" json:"rename,omitempty"`
}
type RegistryUpdate_Snapshot struct {
	Snapshot *RegistryOpSnapshot `protobuf:"bytes,4,opt,name=snapshot,proto3,oneof" json:"snapshot,omitempty"`
}

func (*RegistryUpdate_Set) isRegistryUpdate_Operation()      {}
func (*RegistryUpdate_Remove) isRegistryUpdate_Operation()   {}
func (*RegistryUpdate_Rename) isRegistryUpdate_Operation()   {}
func (*RegistryUpdate_Snapshot) isRegistryUpdate_Operation() {}

func (m *RegistryUpdate) GetOperation() isRegistryUpdate_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *RegistryUpdate) GetSet() *RegistryOpSet {
	if x, ok := m.GetOperation().(*RegistryUpdate_Set); ok {
		return x.Set
	}
	return nil
}

func (m *RegistryUpdate) GetRemove() *RegistryOpRemove {
	if x, ok := m.GetOperation().(*RegistryUpdate_Remove); ok {
		return x.Remove
	}
	return nil
}

func (m *RegistryUpdate) GetRename() *RegistryOpRename {
	if x, ok := m.GetOperation().(*RegistryUpdate_Rename); ok {
		return x.Rename
	}
	return nil
}

func (m *RegistryUpdate) GetSnapshot() *RegistryOpSnapshot {
	if x, ok := m.GetOperation().(*RegistryUpdate_Snapshot); ok {
		return x.Snapshot
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RegistryUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RegistryUpdate_Set)(nil),
		(*RegistryUpdate_Remove)(nil),
		(*RegistryUpdate_Rename)(nil),
		(*RegistryUpdate_Snapshot)(nil),
	}
}

type RegistryOpSet struct {
	// Name of the file.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Corresponding file entry.
	Entry *FileEntry `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *RegistryOpSet) Reset()         { *m = RegistryOpSet{} }
func (m *RegistryOpSet) String() string { return proto.CompactTextString(m) }
func (*RegistryOpSet) ProtoMessage()    {}
func (*RegistryOpSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{4}
}
func (m *RegistryOpSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryOpSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryOpSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryOpSet.Merge(m, src)
}
func (m *RegistryOpSet) XXX_Size() int {
	return m.Size()
}
func (m *RegistryOpSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryOpSet.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryOpSet proto.InternalMessageInfo

type RegistryOpRemove struct {
	// Name of the file(s).
	Filenames []string `protobuf:"bytes,1,rep,name=filenames,proto3" json:"filenames,omitempty"`
}

func (m *RegistryOpRemove) Reset()         { *m = RegistryOpRemove{} }
func (m *RegistryOpRemove) String() string { return proto.CompactTextString(m) }
func (*RegistryOpRemove) ProtoMessage()    {}
func (*RegistryOpRemove) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{5}
}
func (m *RegistryOpRemove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryOpRemove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryOpRemove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryOpRemove.Merge(m, src)
}
func (m *RegistryOpRemove) XXX_Size() int {
	return m.Size()
}
func (m *RegistryOpRemove) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryOpRemove.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryOpRemove proto.InternalMessageInfo

type RegistryOpRename struct {
	// Name of the source file.
	SrcFilename string `protobuf:"bytes,1,opt,name=src_filename,json=srcFilename,proto3" json:"src_filename,omitempty"`
	// Name of the destination file.
	DstFilename string `protobuf:"bytes,2,opt,name=dst_filename,json=dstFilename,proto3" json:"dst_filename,omitempty"`
}

func (m *RegistryOpRename) Reset()         { *m = RegistryOpRename{} }
func (m *RegistryOpRename) String() string { return proto.CompactTextString(m) }
func (*RegistryOpRename) ProtoMessage()    {}
func (*RegistryOpRename) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{6}
}
func (m *RegistryOpRename) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryOpRename) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryOpRename) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryOpRename.Merge(m, src)
}
func (m *RegistryOpRename) XXX_Size() int {
	return m.Size()
}
func (m *RegistryOpRename) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryOpRename.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryOpRename proto.InternalMessageInfo

type RegistryOpSnapshot struct {
	Files map[string]*FileEntry `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RegistryOpSnapshot) Reset()         { *m = RegistryOpSnapshot{} }
func (m *RegistryOpSnapshot) String() string { return proto.CompactTextString(m) }
func (*RegistryOpSnapshot) ProtoMessage()    {}
func (*RegistryOpSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c23ce5e71079250, []int{7}
}
func (m *RegistryOpSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryOpSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RegistryOpSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryOpSnapshot.Merge(m, src)
}
func (m *RegistryOpSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *RegistryOpSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryOpSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryOpSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.storage.enginepb.RegistryVersion", RegistryVersion_name, RegistryVersion_value)
	proto.RegisterEnum("cockroach.storage.enginepb.EnvType", EnvType_name, EnvType_value)
	proto.RegisterType((*FileRegistry)(nil), "cockroach.storage.enginepb.FileRegistry")
	proto.RegisterMapType((map[string]*FileEntry)(nil), "cockroach.storage.enginepb.FileRegistry.FilesEntry")
	proto.RegisterType((*FileEntry)(nil), "cockroach.storage.enginepb.FileEntry")
	proto.RegisterType((*RegistryHeader)(nil), "cockroach.storage.enginepb.RegistryHeader")
	proto.RegisterType((*RegistryUpdate)(nil), "cockroach.storage.enginepb.RegistryUpdate")
	proto.RegisterType((*RegistryOpSet)(nil), "cockroach.storage.enginepb.RegistryOpSet")
	proto.RegisterType((*RegistryOpRemove)(nil), "cockroach.storage.enginepb.RegistryOpRemove")
	proto.RegisterType((*RegistryOpRename)(nil), "cockroach.storage.enginepb.RegistryOpRename")
	proto.RegisterType((*RegistryOpSnapshot)(nil), "cockroach.storage.enginepb.RegistryOpSnapshot")
	proto.RegisterMapType((map[string]*FileEntry)(nil), "cockroach.storage.enginepb.RegistryOpSnapshot.FilesEntry")
}

func init() {
	proto.RegisterFile("storage/enginepb/file_registry.proto", fileDescriptor_1c23ce5e71079250)
}

var fileDescriptor_1c23ce5e71079250 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xbd, 0x4e, 0xdb, 0xc4, 0x93, 0xb4, 0x3f, 0x6b, 0x7f, 0x1c, 0xa2, 0x08, 0x59, 0xa9,
	0x01, 0x29, 0x14, 0x48, 0x50, 0x7a, 0xe1, 0x8f, 0xe0, 0x50, 0xd1, 0x2a, 0x48, 0x48, 0x45, 0x5b,
	0xfe, 0x89, 0x4b, 0xb4, 0x75, 0x86, 0xd4, 0x6a, 0xba, 0x6b, 0xed, 0x2e, 0x11, 0x91, 0xb8, 0xf0,
	0x06, 0x3c, 0x0f, 0x0f, 0x80, 0x7a, 0xec, 0xb1, 0x47, 0x48, 0x5f, 0x04, 0x79, 0x6d, 0x37, 0xb4,
	0x88, 0xd2, 0x48, 0x48, 0xdc, 0xc6, 0xbb, 0xf3, 0xfd, 0xec, 0x77, 0x67, 0x67, 0x0c, 0xd7, 0xb5,
	0x91, 0x8a, 0x0f, 0xb1, 0x83, 0x62, 0x18, 0x0b, 0x4c, 0x76, 0x3b, 0xef, 0xe2, 0x11, 0xf6, 0x15,
	0x0e, 0x63, 0x6d, 0xd4, 0xa4, 0x9d, 0x28, 0x69, 0x24, 0x6d, 0x44, 0x32, 0xda, 0x57, 0x92, 0x47,
	0x7b, 0xed, 0x3c, 0xbf, 0x5d, 0xe4, 0x37, 0xae, 0x0c, 0xe5, 0x50, 0xda, 0xb4, 0x4e, 0x1a, 0x65,
	0x8a, 0xf0, 0x93, 0x0b, 0xb5, 0xad, 0x78, 0x84, 0x2c, 0x07, 0xd1, 0x4d, 0x28, 0x8f, 0x51, 0xe9,
	0x58, 0x8a, 0x3a, 0x69, 0x92, 0xd6, 0x4a, 0xf7, 0x56, 0xfb, 0xf7, 0xd0, 0x76, 0x21, 0x7b, 0x95,
	0x49, 0x58, 0xa1, 0xa5, 0x4f, 0x61, 0x31, 0x35, 0xa8, 0xeb, 0x6e, 0xb3, 0xd4, 0xaa, 0x76, 0xd7,
	0x2f, 0x82, 0xfc, 0x7c, 0xbe, 0xfd, 0xd0, 0x9b, 0xc2, 0xa8, 0x09, 0xcb, 0x08, 0x8d, 0x3e, 0xc0,
	0x6c, 0x91, 0xfa, 0x50, 0xda, 0xc7, 0x89, 0xf5, 0xe6, 0xb1, 0x34, 0xa4, 0x0f, 0x61, 0x71, 0xcc,
	0x47, 0xef, 0xb1, 0xee, 0x36, 0x49, 0xab, 0xda, 0xbd, 0xf1, 0xa7, 0xa3, 0x72, 0xb8, 0xd5, 0x3c,
	0x70, 0xef, 0x91, 0xf0, 0x23, 0x78, 0xa7, 0xeb, 0xf4, 0x31, 0x54, 0x50, 0x8c, 0xfb, 0x66, 0x92,
	0x60, 0x5e, 0x80, 0x6b, 0x17, 0x01, 0x37, 0xc5, 0xf8, 0xc5, 0x24, 0x41, 0x56, 0xc6, 0x2c, 0xa0,
	0x1d, 0xf8, 0x1f, 0x45, 0xa4, 0x26, 0x89, 0x89, 0xa5, 0xe8, 0x6b, 0x34, 0x26, 0x16, 0x43, 0x6d,
	0xbd, 0xd5, 0x18, 0x9d, 0x6d, 0xed, 0xe4, 0x3b, 0xe1, 0x6b, 0x58, 0x29, 0x2e, 0xdf, 0x43, 0x3e,
	0x40, 0xf5, 0x97, 0x9e, 0x20, 0xfc, 0xe2, 0xce, 0xc8, 0x2f, 0x93, 0x01, 0x37, 0x48, 0x1f, 0x41,
	0x49, 0xa3, 0xb1, 0xd4, 0x6a, 0xf7, 0xe6, 0x65, 0xa8, 0xdb, 0xc9, 0x0e, 0x9a, 0x9e, 0xc3, 0x52,
	0x1d, 0xdd, 0x82, 0x25, 0x85, 0x07, 0x72, 0x5c, 0x94, 0xfa, 0xf6, 0xe5, 0x08, 0xcc, 0x6a, 0x7a,
	0x0e, 0xcb, 0xd5, 0x19, 0x47, 0xf0, 0x03, 0xac, 0x97, 0xe6, 0xe3, 0xa4, 0x9a, 0x8c, 0x93, 0x46,
	0xf4, 0x19, 0x54, 0xb4, 0xe0, 0x89, 0xde, 0x93, 0xa6, 0xbe, 0x60, 0x49, 0xed, 0x4b, 0xde, 0x29,
	0x57, 0xf5, 0x1c, 0x76, 0x4a, 0xd8, 0xa8, 0x82, 0x27, 0x13, 0x54, 0x3c, 0x7d, 0x9d, 0x70, 0x0f,
	0x96, 0xcf, 0x94, 0x80, 0x36, 0xa0, 0x92, 0xb6, 0xa3, 0x75, 0x9d, 0x35, 0xdf, 0xe9, 0x77, 0xda,
	0x81, 0x98, 0x36, 0xcf, 0x9c, 0x1d, 0x68, 0x35, 0xe1, 0x5d, 0xf0, 0xcf, 0x97, 0x8a, 0x5e, 0x05,
	0xaf, 0x80, 0xeb, 0x3a, 0x69, 0x96, 0x5a, 0x1e, 0x9b, 0x2d, 0x84, 0x6f, 0xce, 0x2a, 0xac, 0x85,
	0x55, 0xa8, 0x69, 0x15, 0xf5, 0xcf, 0x59, 0xac, 0x6a, 0x15, 0x6d, 0x15, 0x2e, 0x57, 0xa1, 0x36,
	0xd0, 0x66, 0x96, 0xe2, 0x66, 0x29, 0x03, 0x6d, 0x8a, 0x94, 0xf0, 0x2b, 0x01, 0xfa, 0x6b, 0x95,
	0xe8, 0x76, 0x31, 0xcc, 0xc4, 0x0e, 0xf3, 0xfd, 0xf9, 0x8a, 0xfc, 0x0f, 0x46, 0x7a, 0xad, 0x05,
	0xff, 0x9d, 0x9b, 0x0b, 0x5a, 0x81, 0x85, 0x0d, 0xae, 0xd1, 0x77, 0x68, 0x15, 0xca, 0x0c, 0x23,
	0xa9, 0x06, 0xda, 0x27, 0x6b, 0x77, 0xa0, 0x9c, 0xcf, 0x30, 0x5d, 0x06, 0xef, 0xf9, 0x88, 0xc7,
	0xc2, 0xe0, 0x07, 0xe3, 0x3b, 0xd4, 0x83, 0xc5, 0x1d, 0x23, 0x15, 0xfa, 0x24, 0xd5, 0x3e, 0xe1,
	0x86, 0xfb, 0xee, 0xc6, 0xda, 0xe1, 0xf7, 0xc0, 0x39, 0x9c, 0x06, 0xe4, 0x68, 0x1a, 0x90, 0xe3,
	0x69, 0x40, 0xbe, 0x4d, 0x03, 0xf2, 0xf9, 0x24, 0x70, 0x8e, 0x4e, 0x02, 0xe7, 0xf8, 0x24, 0x70,
	0xde, 0x56, 0x0a, 0x67, 0xbb, 0x4b, 0xf6, 0x17, 0xbb, 0xfe, 0x23, 0x00, 0x00, 0xff, 0xff, 0x07,
	0xee, 0x36, 0x5d, 0xbc, 0x05, 0x00, 0x00,
}

func (m *FileRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		keysForFiles := make([]string, 0, len(m.Files))
		for k := range m.Files {
			keysForFiles = append(keysForFiles, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForFiles)
		for iNdEx := len(keysForFiles) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Files[string(keysForFiles[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFileRegistry(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForFiles[iNdEx])
			copy(dAtA[i:], keysForFiles[iNdEx])
			i = encodeVarintFileRegistry(dAtA, i, uint64(len(keysForFiles[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFileRegistry(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintFileRegistry(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptionSettings) > 0 {
		i -= len(m.EncryptionSettings)
		copy(dAtA[i:], m.EncryptionSettings)
		i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.EncryptionSettings)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnvType != 0 {
		i = encodeVarintFileRegistry(dAtA, i, uint64(m.EnvType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegistryHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintFileRegistry(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegistryUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		{
			size := m.Operation.Size()
			i -= size
			if _, err := m.Operation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegistryUpdate_Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdate_Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Set != nil {
		{
			size, err := m.Set.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *RegistryUpdate_Remove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdate_Remove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Remove != nil {
		{
			size, err := m.Remove.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RegistryUpdate_Rename) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdate_Rename) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rename != nil {
		{
			size, err := m.Rename.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RegistryUpdate_Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdate_Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RegistryOpSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryOpSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryOpSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFileRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryOpRemove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryOpRemove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryOpRemove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filenames) > 0 {
		for iNdEx := len(m.Filenames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Filenames[iNdEx])
			copy(dAtA[i:], m.Filenames[iNdEx])
			i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.Filenames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegistryOpRename) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryOpRename) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryOpRename) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstFilename) > 0 {
		i -= len(m.DstFilename)
		copy(dAtA[i:], m.DstFilename)
		i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.DstFilename)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcFilename) > 0 {
		i -= len(m.SrcFilename)
		copy(dAtA[i:], m.SrcFilename)
		i = encodeVarintFileRegistry(dAtA, i, uint64(len(m.SrcFilename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryOpSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryOpSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryOpSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Files) > 0 {
		keysForFiles := make([]string, 0, len(m.Files))
		for k := range m.Files {
			keysForFiles = append(keysForFiles, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForFiles)
		for iNdEx := len(keysForFiles) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Files[string(keysForFiles[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFileRegistry(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForFiles[iNdEx])
			copy(dAtA[i:], keysForFiles[iNdEx])
			i = encodeVarintFileRegistry(dAtA, i, uint64(len(keysForFiles[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFileRegistry(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFileRegistry(uint64(m.Version))
	}
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FileEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnvType != 0 {
		n += 1 + sovFileRegistry(uint64(m.EnvType))
	}
	l = len(m.EncryptionSettings)
	if l > 0 {
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}

func (m *RegistryHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovFileRegistry(uint64(m.Version))
	}
	return n
}

func (m *RegistryUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		n += m.Operation.Size()
	}
	return n
}

func (m *RegistryUpdate_Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}
func (m *RegistryUpdate_Remove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}
func (m *RegistryUpdate_Rename) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rename != nil {
		l = m.Rename.Size()
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}
func (m *RegistryUpdate_Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}
func (m *RegistryOpSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}

func (m *RegistryOpRemove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filenames) > 0 {
		for _, s := range m.Filenames {
			l = len(s)
			n += 1 + l + sovFileRegistry(uint64(l))
		}
	}
	return n
}

func (m *RegistryOpRename) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcFilename)
	if l > 0 {
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	l = len(m.DstFilename)
	if l > 0 {
		n += 1 + l + sovFileRegistry(uint64(l))
	}
	return n
}

func (m *RegistryOpSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Files) > 0 {
		for k, v := range m.Files {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFileRegistry(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFileRegistry(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFileRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func sovFileRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileRegistry(x uint64) (n int) {
	return sovFileRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= RegistryVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = make(map[string]*FileEntry)
			}
			var mapkey string
			var mapvalue *FileEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FileEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Files[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvType", wireType)
			}
			m.EnvType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvType |= EnvType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionSettings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionSettings = append(m.EncryptionSettings[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptionSettings == nil {
				m.EncryptionSettings = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= RegistryVersion(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Set", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistryOpSet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &RegistryUpdate_Set{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistryOpRemove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &RegistryUpdate_Remove{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistryOpRename{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &RegistryUpdate_Rename{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistryOpSnapshot{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &RegistryUpdate_Snapshot{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryOpSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryOpSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryOpSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &FileEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryOpRemove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryOpRemove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryOpRemove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filenames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filenames = append(m.Filenames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryOpRename) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryOpRename: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryOpRename: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcFilename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstFilename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstFilename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryOpSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryOpSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryOpSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFileRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = make(map[string]*FileEntry)
			}
			var mapkey string
			var mapvalue *FileEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFileRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFileRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFileRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FileEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFileRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFileRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Files[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileRegistry = fmt.Errorf("proto: unexpected end of group")
)
