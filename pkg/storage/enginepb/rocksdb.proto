// Copyright 2016 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.storage.enginepb;
option go_package = "github.com/cockroachdb/cockroach/pkg/storage/enginepb";

import "util/hlc/timestamp.proto";
import "gogoproto/gogo.proto";

message SSTableMetricsInfo {
  // level the lsm tree level the sstable is found in
  int32 level = 1;
  // table_id is the sstable's file number
  uint64 table_id = 2 [(gogoproto.customname) = "TableID"];
  // table_info_json contains sstable properties, encoded as JSON
  bytes table_info_json = 3 [(gogoproto.customname) = "TableInfoJSON"];
  // approximate_span_bytes represents the total number of bytes that overlap the given keyspan
  bytes approximate_span_bytes = 4 [(gogoproto.customname) = "ApproximateSpanBytes"];
}

// SSTUserProperties contains the user-added properties of a single sstable.
message SSTUserProperties {
    string path = 1;
    // ts_min is the minimum mvcc timestamp present in this sstable.
    util.hlc.Timestamp ts_min = 2;
    // ts_max is the maximum mvcc timestamp present in this sstable.
    util.hlc.Timestamp ts_max = 3;
}

// SSTUserPropertiesCollection contains the user-added properties of every
// sstable in a RocksDB instance.
message SSTUserPropertiesCollection {
    repeated SSTUserProperties sst = 1 [(gogoproto.nullable) = false];
    string error = 2;
}

// HistogramData holds the relevant metrics returned by a call to
// `rocksdb::Statistics::histogramData()`.
message HistogramData {
  double mean = 1;
  double p50 = 2;
  double p95 = 3;
  double p99 = 4;
  double max = 5;
  uint64 count = 6;
  uint64 sum = 7;
}

// TickersAndHistograms holds maps from ticker/histogram name to its value for
// all stats measured by a `rocksdb::Statistics` object.
message TickersAndHistograms {
  map<string, uint64> tickers = 1;
  map<string, HistogramData> histograms = 2 [(gogoproto.nullable) = false];
}
