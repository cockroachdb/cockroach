// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/protectedts/ptpb/protectedts.proto

package ptpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
import hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ProtectionMode defines the semantics of a Record.
type ProtectionMode int32

const (
	// PROTECT_AT ensures that data values which are live at the specified
	// timestamp will be protected but newer data which is no longer live
	// can be GC'd.
	PROTECT_AT ProtectionMode = 0
	// PROTECT_AFTER ensures that all data values live at or after the specified
	// timestamp will be protected from GC.
	PROTECT_AFTER ProtectionMode = 1
)

var ProtectionMode_name = map[int32]string{
	0: "PROTECT_AT",
	1: "PROTECT_AFTER",
}
var ProtectionMode_value = map[string]int32{
	"PROTECT_AT":    0,
	"PROTECT_AFTER": 1,
}

func (x ProtectionMode) String() string {
	return proto.EnumName(ProtectionMode_name, int32(x))
}
func (ProtectionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_protectedts_35cd7c9d0cc21aae, []int{0}
}

// Metadata is the system metadata.
// TODO(ajwerner): consider renaming to SystemMetadata.
type Metadata struct {
	// Version is incremented whenever a Record is created or removed.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// NumRecords is the number of records which exist in the subsystem.
	NumRecords uint64 `protobuf:"varint,2,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	// NumSpans is the number of spans currently being protected by the
	// protectedts subsystem.
	NumSpans uint64 `protobuf:"varint,3,opt,name=num_spans,json=numSpans,proto3" json:"num_spans,omitempty"`
	// total_bytes is the number of bytes currently in use by records
	// to store their spans and metadata.
	TotalBytes uint64 `protobuf:"varint,4,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_protectedts_35cd7c9d0cc21aae, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

// Record corresponds to a protected timestamp.
type Record struct {
	// ID uniquely identifies this row.
	ID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"id"`
	// Timestamp is the timestamp which is protected.
	Timestamp hlc.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp"`
	// Mode specifies whether this record protects all values live at timestamp
	// or all values live at or after that timestamp.
	Mode ProtectionMode `protobuf:"varint,3,opt,name=mode,proto3,enum=cockroach.protectedts.ProtectionMode" json:"mode,omitempty"`
	// MetaType is used to help interpret the value in meta.
	MetaType string `protobuf:"bytes,4,opt,name=meta_type,json=metaType,proto3" json:"meta_type,omitempty"`
	// Meta is client-provided metadata about the record.
	Meta     []byte         `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	Verified bool           `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	Spans    []roachpb.Span `protobuf:"bytes,7,rep,name=spans,proto3" json:"spans"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_protectedts_35cd7c9d0cc21aae, []int{1}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(dst, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

// Spans are the spans which this record protects.
type Spans struct {
	Spans []roachpb.Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans"`
}

func (m *Spans) Reset()         { *m = Spans{} }
func (m *Spans) String() string { return proto.CompactTextString(m) }
func (*Spans) ProtoMessage()    {}
func (*Spans) Descriptor() ([]byte, []int) {
	return fileDescriptor_protectedts_35cd7c9d0cc21aae, []int{2}
}
func (m *Spans) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Spans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spans.Merge(dst, src)
}
func (m *Spans) XXX_Size() int {
	return m.Size()
}
func (m *Spans) XXX_DiscardUnknown() {
	xxx_messageInfo_Spans.DiscardUnknown(m)
}

var xxx_messageInfo_Spans proto.InternalMessageInfo

// State is the complete system state.
type State struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Records  []Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_protectedts_35cd7c9d0cc21aae, []int{3}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(dst, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Metadata)(nil), "cockroach.protectedts.Metadata")
	proto.RegisterType((*Record)(nil), "cockroach.protectedts.Record")
	proto.RegisterType((*Spans)(nil), "cockroach.protectedts.Spans")
	proto.RegisterType((*State)(nil), "cockroach.protectedts.State")
	proto.RegisterEnum("cockroach.protectedts.ProtectionMode", ProtectionMode_name, ProtectionMode_value)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(m.Version))
	}
	if m.NumRecords != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(m.NumRecords))
	}
	if m.NumSpans != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(m.NumSpans))
	}
	if m.TotalBytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(m.TotalBytes))
	}
	return i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtectedts(dAtA, i, uint64(m.ID.Size()))
	n1, err := m.ID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintProtectedts(dAtA, i, uint64(m.Timestamp.Size()))
	n2, err := m.Timestamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Mode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(m.Mode))
	}
	if len(m.MetaType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(len(m.MetaType)))
		i += copy(dAtA[i:], m.MetaType)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProtectedts(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if m.Verified {
		dAtA[i] = 0x30
		i++
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintProtectedts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Spans) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spans) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, msg := range m.Spans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtectedts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintProtectedts(dAtA, i, uint64(m.Metadata.Size()))
	n3, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProtectedts(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintProtectedts(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovProtectedts(uint64(m.Version))
	}
	if m.NumRecords != 0 {
		n += 1 + sovProtectedts(uint64(m.NumRecords))
	}
	if m.NumSpans != 0 {
		n += 1 + sovProtectedts(uint64(m.NumSpans))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovProtectedts(uint64(m.TotalBytes))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovProtectedts(uint64(l))
	l = m.Timestamp.Size()
	n += 1 + l + sovProtectedts(uint64(l))
	if m.Mode != 0 {
		n += 1 + sovProtectedts(uint64(m.Mode))
	}
	l = len(m.MetaType)
	if l > 0 {
		n += 1 + l + sovProtectedts(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovProtectedts(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	return n
}

func (m *Spans) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovProtectedts(uint64(l))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	return n
}

func sovProtectedts(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtectedts(x uint64) (n int) {
	return sovProtectedts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSpans", wireType)
			}
			m.NumSpans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSpans |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (ProtectionMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Spans) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spans: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spans: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtectedts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtectedts
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtectedts
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtectedts(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtectedts = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtectedts   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("storage/protectedts/ptpb/protectedts.proto", fileDescriptor_protectedts_35cd7c9d0cc21aae)
}

var fileDescriptor_protectedts_35cd7c9d0cc21aae = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x8f, 0xd2, 0x40,
	0x14, 0xef, 0xb0, 0x05, 0xca, 0xa0, 0x64, 0x9d, 0x68, 0x6c, 0x50, 0x5b, 0x42, 0xa2, 0x21, 0x7b,
	0x68, 0x13, 0x38, 0x6d, 0xa2, 0x07, 0x70, 0x31, 0xd9, 0xc3, 0xc6, 0xb5, 0xdb, 0xbd, 0x78, 0x21,
	0xd3, 0x76, 0x2c, 0x93, 0xa5, 0x9d, 0xa6, 0x9d, 0x6e, 0xc2, 0xd9, 0x8b, 0x17, 0x13, 0xbf, 0x83,
	0x5f, 0x86, 0x23, 0xc7, 0x8d, 0x26, 0x44, 0xe1, 0x8b, 0x98, 0x99, 0x42, 0x41, 0xa3, 0x07, 0x6f,
	0xef, 0xdf, 0xef, 0xcd, 0xfb, 0xfd, 0xde, 0x1b, 0x78, 0x92, 0x71, 0x96, 0xe2, 0x90, 0xd8, 0x49,
	0xca, 0x38, 0xf1, 0x39, 0x09, 0x78, 0x66, 0x27, 0x3c, 0xf1, 0x0e, 0x03, 0x96, 0xb0, 0x19, 0x7a,
	0xe4, 0x33, 0xff, 0x26, 0x65, 0xd8, 0x9f, 0x5a, 0x07, 0xc9, 0xf6, 0xc3, 0x90, 0x85, 0x4c, 0x56,
	0xd8, 0xc2, 0x2a, 0x8a, 0xdb, 0x4f, 0x43, 0xc6, 0xc2, 0x19, 0xb1, 0x71, 0x42, 0x6d, 0x1c, 0xc7,
	0x8c, 0x63, 0x4e, 0x59, 0xbc, 0x6d, 0xd5, 0x46, 0xb2, 0x4d, 0xe2, 0xd9, 0x01, 0xe6, 0x78, 0x1b,
	0xd3, 0x73, 0x4e, 0x67, 0xf6, 0x74, 0xe6, 0xdb, 0x9c, 0x46, 0x24, 0xe3, 0x38, 0x4a, 0x8a, 0x4c,
	0xf7, 0x23, 0x80, 0xda, 0x05, 0xe1, 0x58, 0x14, 0x23, 0x1d, 0xd6, 0x6f, 0x49, 0x9a, 0x51, 0x16,
	0xeb, 0xa0, 0x03, 0x7a, 0xaa, 0xb3, 0x73, 0x91, 0x09, 0x9b, 0x71, 0x1e, 0x4d, 0x52, 0xe2, 0xb3,
	0x34, 0xc8, 0xf4, 0x8a, 0xcc, 0xc2, 0x38, 0x8f, 0x9c, 0x22, 0x82, 0x9e, 0xc0, 0x86, 0x28, 0xc8,
	0x12, 0x1c, 0x67, 0xfa, 0x91, 0x4c, 0x6b, 0x71, 0x1e, 0x5d, 0x09, 0x5f, 0xa0, 0x39, 0xe3, 0x78,
	0x36, 0xf1, 0xe6, 0x9c, 0x64, 0xba, 0x5a, 0xa0, 0x65, 0x68, 0x24, 0x22, 0xdd, 0xef, 0x15, 0x58,
	0x2b, 0x3a, 0xa1, 0x77, 0xb0, 0x42, 0x03, 0xf9, 0xfc, 0xbd, 0xd1, 0x70, 0xb1, 0x32, 0x95, 0x6f,
	0x2b, 0x73, 0x10, 0x52, 0x3e, 0xcd, 0x3d, 0xcb, 0x67, 0x91, 0x5d, 0x0a, 0x15, 0x78, 0x7b, 0xdb,
	0x4e, 0x6e, 0x42, 0x5b, 0x72, 0xcc, 0x73, 0x1a, 0x58, 0xd7, 0xd7, 0xe7, 0x67, 0xeb, 0x95, 0x59,
	0x39, 0x3f, 0x73, 0x2a, 0x34, 0x40, 0x43, 0xd8, 0x28, 0x69, 0xcb, 0xd1, 0x9b, 0xfd, 0x67, 0xd6,
	0x5e, 0x70, 0x81, 0xb3, 0xa6, 0x33, 0xdf, 0x72, 0x77, 0x45, 0x23, 0x55, 0x3c, 0xec, 0xec, 0x51,
	0xe8, 0x14, 0xaa, 0x11, 0x0b, 0x88, 0x64, 0xd6, 0xea, 0x3f, 0xb7, 0xfe, 0xba, 0x2e, 0xeb, 0xb2,
	0xb0, 0x29, 0x8b, 0x2f, 0x58, 0x40, 0x1c, 0x09, 0x11, 0xca, 0x44, 0x84, 0xe3, 0x09, 0x9f, 0x27,
	0x44, 0x52, 0x6f, 0x38, 0x9a, 0x08, 0xb8, 0xf3, 0x84, 0x20, 0x04, 0x55, 0x61, 0xeb, 0x55, 0xc1,
	0xd7, 0x91, 0x36, 0x6a, 0x43, 0xed, 0x96, 0xa4, 0xf4, 0x03, 0x25, 0x81, 0x5e, 0xeb, 0x80, 0x9e,
	0xe6, 0x94, 0x3e, 0x1a, 0xc0, 0x6a, 0x21, 0x71, 0xbd, 0x73, 0xd4, 0x6b, 0xf6, 0x1f, 0x1f, 0x0c,
	0xb2, 0x5d, 0xbb, 0x25, 0x24, 0xdf, 0x12, 0x28, 0x6a, 0xbb, 0x2f, 0x61, 0xb5, 0xd8, 0x43, 0x89,
	0x06, 0xff, 0x81, 0xfe, 0x0c, 0x60, 0xf5, 0x8a, 0x63, 0x4e, 0xd0, 0x18, 0xca, 0xc1, 0xc5, 0xa9,
	0xc8, 0x05, 0x35, 0xfb, 0xe6, 0x3f, 0x84, 0xd8, 0x5d, 0xd4, 0x48, 0x13, 0x9d, 0x96, 0x2b, 0x13,
	0x38, 0x25, 0x14, 0xbd, 0x82, 0xf5, 0xfd, 0x1d, 0x1d, 0xfd, 0xb1, 0x8c, 0xc3, 0x2e, 0xc5, 0x45,
	0x6c, 0xa7, 0xd9, 0x61, 0x4e, 0x4e, 0x61, 0xeb, 0x77, 0x9d, 0x51, 0x0b, 0xc2, 0x4b, 0xe7, 0xad,
	0x3b, 0x7e, 0xed, 0x4e, 0x86, 0xee, 0xb1, 0x82, 0x1e, 0xc0, 0xfb, 0xa5, 0xff, 0xc6, 0x1d, 0x3b,
	0xc7, 0xa0, 0xad, 0x7e, 0xfa, 0x6a, 0x28, 0xa3, 0x17, 0x8b, 0x9f, 0x86, 0xb2, 0x58, 0x1b, 0x60,
	0xb9, 0x36, 0xc0, 0xdd, 0xda, 0x00, 0x3f, 0xd6, 0x06, 0xf8, 0xb2, 0x31, 0x94, 0xe5, 0xc6, 0x50,
	0xee, 0x36, 0x86, 0xf2, 0x5e, 0x15, 0xff, 0xd3, 0xab, 0xc9, 0xbf, 0x31, 0xf8, 0x15, 0x00, 0x00,
	0xff, 0xff, 0xcc, 0xee, 0x83, 0x54, 0xc2, 0x03, 0x00, 0x00,
}
