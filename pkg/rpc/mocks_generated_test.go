// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/rpc (interfaces: Dialbacker)

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	reflect "reflect"

	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDialbacker is a mock of Dialbacker interface.
type MockDialbacker struct {
	ctrl     *gomock.Controller
	recorder *MockDialbackerMockRecorder
}

// MockDialbackerMockRecorder is the mock recorder for MockDialbacker.
type MockDialbackerMockRecorder struct {
	mock *MockDialbacker
}

// NewMockDialbacker creates a new mock instance.
func NewMockDialbacker(ctrl *gomock.Controller) *MockDialbacker {
	mock := &MockDialbacker{ctrl: ctrl}
	mock.recorder = &MockDialbackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialbacker) EXPECT() *MockDialbackerMockRecorder {
	return m.recorder
}

// GRPCDialNode mocks base method.
func (m *MockDialbacker) GRPCDialNode(arg0 string, arg1 roachpb.NodeID, arg2 ConnectionClass) *Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCDialNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Connection)
	return ret0
}

// GRPCDialNode indicates an expected call of GRPCDialNode.
func (mr *MockDialbackerMockRecorder) GRPCDialNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCDialNode", reflect.TypeOf((*MockDialbacker)(nil).GRPCDialNode), arg0, arg1, arg2)
}

// GRPCUnvalidatedDial mocks base method.
func (m *MockDialbacker) GRPCUnvalidatedDial(arg0 string) *Connection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GRPCUnvalidatedDial", arg0)
	ret0, _ := ret[0].(*Connection)
	return ret0
}

// GRPCUnvalidatedDial indicates an expected call of GRPCUnvalidatedDial.
func (mr *MockDialbackerMockRecorder) GRPCUnvalidatedDial(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GRPCUnvalidatedDial", reflect.TypeOf((*MockDialbacker)(nil).GRPCUnvalidatedDial), arg0)
}

// grpcDialRaw mocks base method.
func (m *MockDialbacker) grpcDialRaw(arg0 context.Context, arg1 string, arg2 ConnectionClass, arg3 ...grpc.DialOption) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "grpcDialRaw", varargs...)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// grpcDialRaw indicates an expected call of grpcDialRaw.
func (mr *MockDialbackerMockRecorder) grpcDialRaw(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "grpcDialRaw", reflect.TypeOf((*MockDialbacker)(nil).grpcDialRaw), varargs...)
}

// wrapCtx mocks base method.
func (m *MockDialbacker) wrapCtx(arg0 context.Context, arg1 string, arg2 roachpb.NodeID, arg3 ConnectionClass) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "wrapCtx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// wrapCtx indicates an expected call of wrapCtx.
func (mr *MockDialbackerMockRecorder) wrapCtx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wrapCtx", reflect.TypeOf((*MockDialbacker)(nil).wrapCtx), arg0, arg1, arg2, arg3)
}
