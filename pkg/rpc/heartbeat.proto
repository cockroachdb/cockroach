// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto2";
package cockroach.rpc;
option go_package = "rpc";

import "roachpb/metadata.proto";
import "gogoproto/gogo.proto";

// RemoteOffset keeps track of this client's estimate of its offset from a
// remote server. Uncertainty is the maximum error in the reading of this
// offset, so that the real offset should be in the interval
// [Offset - Uncertainty, Offset + Uncertainty]. If the last heartbeat timed
// out, Offset = 0.
//
// Offset and Uncertainty are measured using the remote clock reading technique
// described in http://se.inf.tu-dresden.de/pubs/papers/SRDS1994.pdf, page 6.
message RemoteOffset {
  option (gogoproto.goproto_stringer) = false;

  // The estimated offset from the remote server, in nanoseconds.
  optional int64 offset = 1 [(gogoproto.nullable) = false];
  // The maximum error of the measured offset, in nanoseconds.
  optional int64 uncertainty = 2 [(gogoproto.nullable) = false];
  // Measurement time, in nanoseconds from unix epoch.
  optional int64 measured_at = 3 [(gogoproto.nullable) = false];
}

// A PingRequest specifies the string to echo in response.
// Fields are exported so that they will be serialized in the rpc call.
message PingRequest {
  // Echo this string with PingResponse.
  optional string ping = 1 [(gogoproto.nullable) = false];
  // The last offset the client measured with the server.
  optional RemoteOffset offset = 2 [(gogoproto.nullable) = false];
  // The address of the client.
  optional string addr = 3 [(gogoproto.nullable) = false];
  // The configured maximum clock offset (in nanoseconds) on the server.
  optional int64 max_offset_nanos = 4 [(gogoproto.nullable) = false];
  // Cluster ID to prevent connections between nodes in different clusters.
  optional bytes cluster_id = 5 [
    (gogoproto.customname) = "ClusterID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID"];
  optional roachpb.Version server_version = 6 [(gogoproto.nullable) = false];
  // Node ID to prevent connections from being misrouted to an invalid node inside the cluster.
  optional int32 node_id = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "NodeID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
}

// A PingResponse contains the echoed ping request string.
message PingResponse {
  // An echo of value sent with PingRequest.
  optional string pong = 1 [(gogoproto.nullable) = false];
  optional int64 server_time = 2 [(gogoproto.nullable) = false];
  optional roachpb.Version server_version = 3 [(gogoproto.nullable) = false];
  // Cluster name to prevent joining a new node to the wrong cluster.
  optional string cluster_name = 4 [(gogoproto.nullable) = false];
  // Skip cluster name check if either side's name is empty / not configured.
  optional bool disable_cluster_name_verification = 5 [(gogoproto.nullable) = false];
}

service Heartbeat {
  rpc Ping (PingRequest) returns (PingResponse) {}
}
service TestingHeartbeatStream {
  rpc PingStream (stream PingRequest) returns (stream PingResponse) {}
}
