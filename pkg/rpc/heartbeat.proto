// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto2";
package cockroach.rpc;
option go_package = "github.com/cockroachdb/cockroach/pkg/rpc";

import "roachpb/metadata.proto";
import "gogoproto/gogo.proto";

// RemoteOffset keeps track of this client's estimate of its offset from a
// remote server. Uncertainty is the maximum error in the reading of this
// offset, so that the real offset should be in the interval
// [Offset - Uncertainty, Offset + Uncertainty]. If the last heartbeat timed
// out, Offset = 0.
//
// Offset and Uncertainty are measured using the remote clock reading technique
// described in http://se.inf.tu-dresden.de/pubs/papers/SRDS1994.pdf, page 6.
message RemoteOffset {
  option (gogoproto.goproto_stringer) = false;

  // The estimated offset from the remote server, in nanoseconds.
  optional int64 offset = 1 [(gogoproto.nullable) = false];
  // The maximum error of the measured offset, in nanoseconds.
  optional int64 uncertainty = 2 [(gogoproto.nullable) = false];
  // Measurement time, in nanoseconds from unix epoch.
  optional int64 measured_at = 3 [(gogoproto.nullable) = false];
}

// A PingRequest specifies the string to echo in response.
// Fields are exported so that they will be serialized in the rpc call.
message PingRequest {
  // Echo this string with PingResponse.
  optional string ping = 1 [(gogoproto.nullable) = false];
  // The last offset the client measured with the server.
  optional RemoteOffset offset = 2 [(gogoproto.nullable) = false];
  // The advertised address of the client.
  optional string origin_addr = 3 [(gogoproto.nullable) = false];
  // Cluster ID to prevent connections between nodes in different clusters.
  optional bytes origin_cluster_id = 5 [
    (gogoproto.customname) = "ClusterID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID"];
  optional roachpb.Version server_version = 6 [(gogoproto.nullable) = false];
  // NodeID the originator of the request wishes to connect to.
  // This helps prevent connections from being misrouted when addresses are reused.
  optional int32 target_node_id = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "TargetNodeID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // NodeID of the originator of the PingRequest.
  optional int32 origin_node_id = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "OriginNodeID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];

  // The mapping of locality addresses for this node. These are used by the
  // receiver of the node to initiate a dialback connection. This same
  // information is also sent over gossip, but the first ping is sent prior to
  // gossip being available, so it is included here also.
  repeated cockroach.roachpb.LocalityAddress locality_address = 9 [(gogoproto.nullable) = false];


  enum DialbackType {
    // The recipient should send a PingResponse without checking if there is a
    // reverse connection.
    NONE = 0;
    // If there is already an established reverse connection, respond
    // immediately, otherwise create a reverse connection and wait until this
    // connection is successfully established before responding.
    BLOCKING = 1;
    // If there is already an established reverse connection, respond
    // immediately, otherwise if there is no reverse connection, attempt to
    // create one asynchronously.  If that fails to connect, then respond with
    // failure to the next PingRequest on this connection.
    NON_BLOCKING = 2;
  }
  // What type of dialback is requested for the recipient of this PingRequest
  // NB: A node that receives this request without this field (from a
  // pre-dialback client) set will treat it as NONE mode and not attempt
  // dialback.
  // A node that sets this field to a server that doesn't understand it will
  // result in it being ignored.
  // As this is just an additional validation, both these behaviors are OK.
  optional DialbackType needs_dialback = 10 [(gogoproto.nullable) = false];

  reserved 4;
}

// A PingResponse contains the echoed ping request string.
message PingResponse {
  // An echo of value sent with PingRequest.
  optional string pong = 1 [(gogoproto.nullable) = false];
  // A clock reading from the server, in nanos since epoch.
  optional int64 server_time = 2 [(gogoproto.nullable) = false];
  optional roachpb.Version server_version = 3 [(gogoproto.nullable) = false];
  // Cluster name to prevent joining a new node to the wrong cluster.
  optional string cluster_name = 4 [(gogoproto.nullable) = false];
  // Skip cluster name check if either side's name is empty / not configured.
  optional bool disable_cluster_name_verification = 5 [(gogoproto.nullable) = false];
}

service Heartbeat {
  rpc Ping (PingRequest) returns (PingResponse) {}
}
service TestingHeartbeatStream {
  rpc PingStream (stream PingRequest) returns (stream PingResponse) {}
}
