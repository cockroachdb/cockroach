// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geo/geopb/geopb.proto

package geopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ShapeType is the type of a spatial object. Each of these corresponds to a
// different representation and serialization format. For example, a Point is a
// pair of float64s (or more than that for geometries with Z or N), a LineString
// is an ordered series of Points, etc.
type ShapeType int32

const (
	ShapeType_Unknown         ShapeType = 0
	ShapeType_Point           ShapeType = 1
	ShapeType_LineString      ShapeType = 2
	ShapeType_Polygon         ShapeType = 3
	ShapeType_MultiPoint      ShapeType = 4
	ShapeType_MultiLineString ShapeType = 5
	ShapeType_MultiPolygon    ShapeType = 6
)

var ShapeType_name = map[int32]string{
	0: "Unknown",
	1: "Point",
	2: "LineString",
	3: "Polygon",
	4: "MultiPoint",
	5: "MultiLineString",
	6: "MultiPolygon",
}
var ShapeType_value = map[string]int32{
	"Unknown":         0,
	"Point":           1,
	"LineString":      2,
	"Polygon":         3,
	"MultiPoint":      4,
	"MultiLineString": 5,
	"MultiPolygon":    6,
}

func (x ShapeType) String() string {
	return proto.EnumName(ShapeType_name, int32(x))
}
func (ShapeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_geopb_f69f20209fb50ee8, []int{0}
}

func init() {
	proto.RegisterEnum("cockroach.geopb.ShapeType", ShapeType_name, ShapeType_value)
}

func init() { proto.RegisterFile("geo/geopb/geopb.proto", fileDescriptor_geopb_f69f20209fb50ee8) }

var fileDescriptor_geopb_f69f20209fb50ee8 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x4f, 0xcd, 0xd7,
	0x4f, 0x4f, 0xcd, 0x2f, 0x48, 0x82, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xfc, 0xc9,
	0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0x60, 0x61, 0xad, 0x72, 0x2e, 0xce, 0xe0,
	0x8c, 0xc4, 0x82, 0xd4, 0x90, 0xca, 0x82, 0x54, 0x21, 0x6e, 0x2e, 0xf6, 0xd0, 0xbc, 0xec, 0xbc,
	0xfc, 0xf2, 0x3c, 0x01, 0x06, 0x21, 0x4e, 0x2e, 0xd6, 0x80, 0xfc, 0xcc, 0xbc, 0x12, 0x01, 0x46,
	0x21, 0x3e, 0x2e, 0x2e, 0x9f, 0xcc, 0xbc, 0xd4, 0xe0, 0x92, 0xa2, 0xcc, 0xbc, 0x74, 0x01, 0x26,
	0x90, 0xba, 0x80, 0xfc, 0x9c, 0xca, 0xf4, 0xfc, 0x3c, 0x01, 0x66, 0x90, 0xa4, 0x6f, 0x69, 0x4e,
	0x49, 0x26, 0x44, 0x31, 0x8b, 0x90, 0x30, 0x17, 0x3f, 0x98, 0x8f, 0xa4, 0x83, 0x55, 0x48, 0x80,
	0x8b, 0x07, 0xaa, 0x08, 0xa2, 0x8d, 0xcd, 0x49, 0xfd, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4,
	0x18, 0x2f, 0x3c, 0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x15, 0xec, 0xc2, 0x24,
	0x36, 0xb0, 0xcb, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x0a, 0x87, 0x06, 0xd2, 0x00,
	0x00, 0x00,
}
