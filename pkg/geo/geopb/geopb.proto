// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.geopb;
option go_package = "geopb";

import "gogoproto/gogo.proto";

// ShapeType is the type of a spatial shape. Each of these corresponds to a
// different representation and serialization format. For example, a Point is a
// pair of doubles (or more than that for geometries with Z or N), a LineString
// is an ordered series of Points, etc.
enum ShapeType {
  Unset = 0;

  Point = 1;
  LineString = 2;
  Polygon = 3;
  MultiPoint = 4;
  MultiLineString = 5;
  MultiPolygon = 6;
  // Geometry can contain any type.
  Geometry = 7;
  // GeometryCollection can contain a list of any above type except for Geometry.
  GeometryCollection = 8;
}

// Shape represents a single shape.
message Shape {
  // Coords is a flat representation of individual components of the SpatialObject.
  // They may be split up by the Ends variable.
  repeated double coords = 1;
  // Ends denotes when to split up coords array.
  // For example, for Polygons, there may be multiple rings. Ends is the index to slice
  // at to get each ring.
  repeated int64 ends = 2 [(gogoproto.casttype)="int"];
  // EndsEnds denotes when to split up the ends array.
  // For example, for MultiPolygons, there are multiple ends for multiple rings.
  // EndsEnds is the index to slice at of the last element of each polygon.
  repeated int64 ends_ends = 3 [(gogoproto.casttype)="int"];
}

// GeometryCollectionShape represents a GeometryCollection shape.
message GeometryCollectionShape {
  message GeometryCollectionSubShape {
    Shape shape = 1 [(gogoproto.nullable)=false];
    ShapeType shape_type = 2;
  }
  // Shapes represents all the shapes for a GeometryCollection.
  repeated GeometryCollectionSubShape shapes = 1 [(gogoproto.nullable)=false];
}

// SpatialObjectType represents the type of the SpatialObject.
enum SpatialObjectType {
  Unknown = 0;

  GeographyType = 1;
  GeometryType = 2;
}

// SpatialObject represents a serialization of a Geospatial type.
message SpatialObject {
  // Type is the type of the SpatialObject.
  SpatialObjectType type = 1;
  // SerializedShape is the serialized Shape or GeometryCollection representation of the Shape.
  // This is not included to avoid the potentially expensive deserialization of the Shape.
  bytes serialized_shape = 2;
  // SRID is the denormalized SRID derived from the EWKB.
  int32 srid = 3 [(gogoproto.customname)="SRID",(gogoproto.casttype)="SRID"];
  // ShapeType is denormalized ShapeType derived from the EWKB.
  ShapeType shape_type = 4;
  // BoundingBox is the bounding box of the SpatialObject.
  BoundingBox bounding_box = 5;
}

// BoundingBox represents the bounding box of a Geospatial type.
// Note the lo coordinates can be higher in value than the hi coordinates
// for spherical geometries.
// NOTE: Do not use these to compare bounding boxes. Use the library functions
// provided in the geo package to perform these calculations.
message BoundingBox {
  double lo_x = 1;
  double hi_x = 2;
  double lo_y = 3;
  double hi_y = 4;
}
