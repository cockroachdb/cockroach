// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.geopb;
option go_package = "geopb";

import "gogoproto/gogo.proto";

// ShapeType is the type of a spatial shape. Each of these corresponds to a
// different representation and serialization format. For example, a Point is a
// pair of doubles (or more than that for geometries with Z or N), a LineString
// is an ordered series of Points, etc.
enum ShapeType {
  Unset = 0;

  Point = 1;
  LineString = 2;
  Polygon = 3;
  MultiPoint = 4;
  MultiLineString = 5;
  MultiPolygon = 6;
  // Geometry can contain any type.
  Geometry = 7;
  // GeometryCollection can contain a list of any above type except for Geometry.
  GeometryCollection = 8;

  // Reserve (1 << 29) as M flag.
  reserved 536870912;

  // Reserve (1 << 30) as Z flag.
  reserved 1073741824;

  PointM = 536870913;
  LineStringM = 536870914;
  PolygonM = 536870915;
  MultiPointM = 536870916;
  MultiLineStringM = 536870917;
  MultiPolygonM = 536870918;
  GeometryM = 536870919;
  GeometryCollectionM = 536870920;

  PointZ = 1073741825;
  LineStringZ = 1073741826;
  PolygonZ = 1073741827;
  MultiPointZ = 1073741828;
  MultiLineStringZ = 1073741829;
  MultiPolygonZ = 1073741830;
  GeometryZ = 1073741831;
  GeometryCollectionZ = 1073741832;

  PointZM = 1610612737;
  LineStringZM = 1610612738;
  PolygonZM = 1610612739;
  MultiPointZM = 1610612740;
  MultiLineStringZM = 1610612741;
  MultiPolygonZM = 1610612742;
  GeometryZM = 1610612743;
  GeometryCollectionZM = 1610612744;
}

// SpatialObjectType represents the type of the SpatialObject.
enum SpatialObjectType {
  Unknown = 0;

  GeographyType = 1;
  GeometryType = 2;
}

// SpatialObject represents a serialization of a Geospatial type.
message SpatialObject {
  // Type is the type of the SpatialObject.
  SpatialObjectType type = 1;
  // EWKB is the EWKB representation of the spatial object.
  bytes ewkb = 2 [(gogoproto.customname)="EWKB",(gogoproto.casttype)="EWKB"];
  // SRID is the denormalized SRID derived from the EWKB.
  int32 srid = 3 [(gogoproto.customname)="SRID",(gogoproto.casttype)="SRID"];
  // ShapeType is denormalized ShapeType derived from the EWKB.
  ShapeType shape_type = 4;
  // BoundingBox is the bounding box of the SpatialObject.
  BoundingBox bounding_box = 5;
}

// BoundingBox represents the bounding box of a Geospatial type.
// Note the lo coordinates can be higher in value than the hi coordinates
// for spherical geometries.
// NOTE: Do not use these to compare bounding boxes. Use the library functions
// provided in the geo package to perform these calculations.
message BoundingBox {
  double lo_x = 1;
  double hi_x = 2;
  double lo_y = 3;
  double hi_y = 4;
}
