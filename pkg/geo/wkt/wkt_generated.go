// Code generated by goyacc -o wkt_generated.go -p wkt wkt.y. DO NOT EDIT.

//line wkt.y:12

package wkt

import __yyfmt__ "fmt"

//line wkt.y:13

import "github.com/twpayne/go-geom"

func isValidLineString(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 2*stride {
		wktlex.(*wktLex).Error("syntax error: non-empty linestring with only one point")
		return false
	}
	return true
}

func isValidPolygonRing(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 4*stride {
		wktlex.(*wktLex).Error("syntax error: polygon ring doesn't have enough points")
		return false
	}
	for i := 0; i < stride; i++ {
		if flatCoords[i] != flatCoords[len(flatCoords)-stride+i] {
			wktlex.(*wktLex).Error("syntax error: polygon ring not closed")
			return false
		}
	}
	return true
}

type geomFlatCoordsRepr struct {
	flatCoords []float64
	ends       []int
}

func makeGeomFlatCoordsRepr(flatCoords []float64) geomFlatCoordsRepr {
	return geomFlatCoordsRepr{flatCoords: flatCoords, ends: []int{len(flatCoords)}}
}

func appendGeomFlatCoordsReprs(p1 geomFlatCoordsRepr, p2 geomFlatCoordsRepr) geomFlatCoordsRepr {
	if len(p1.ends) > 0 {
		p1LastEnd := p1.ends[len(p1.ends)-1]
		for i, _ := range p2.ends {
			p2.ends[i] += p1LastEnd
		}
	}
	return geomFlatCoordsRepr{flatCoords: append(p1.flatCoords, p2.flatCoords...), ends: append(p1.ends, p2.ends...)}
}

type multiPolygonFlatCoordsRepr struct {
	flatCoords []float64
	endss      [][]int
}

func makeMultiPolygonFlatCoordsRepr(p geomFlatCoordsRepr) multiPolygonFlatCoordsRepr {
	if p.flatCoords == nil {
		return multiPolygonFlatCoordsRepr{flatCoords: nil, endss: [][]int{nil}}
	}
	return multiPolygonFlatCoordsRepr{flatCoords: p.flatCoords, endss: [][]int{p.ends}}
}

func appendMultiPolygonFlatCoordsRepr(
	p1 multiPolygonFlatCoordsRepr, p2 multiPolygonFlatCoordsRepr,
) multiPolygonFlatCoordsRepr {
	p1LastEndsLastEnd := 0
	for i := len(p1.endss) - 1; i >= 0; i-- {
		if len(p1.endss[i]) > 0 {
			p1LastEndsLastEnd = p1.endss[i][len(p1.endss[i])-1]
			break
		}
	}
	if p1LastEndsLastEnd > 0 {
		for i, _ := range p2.endss {
			for j, _ := range p2.endss[i] {
				p2.endss[i][j] += p1LastEndsLastEnd
			}
		}
	}
	return multiPolygonFlatCoordsRepr{
		flatCoords: append(p1.flatCoords, p2.flatCoords...), endss: append(p1.endss, p2.endss...),
	}
}

func makeGeomCollection(wktlex wktLexer, gs []geom.T, layout geom.Layout) *geom.GeometryCollection {
	if len(gs) == 0 {
		return geom.NewGeometryCollection()
	}
	if layout == geom.NoLayout {
		layout = gs[0].Layout()
	}

	for _, g := range gs {
		_, ok := g.(*geom.GeometryCollection)
		if !ok && g.Layout() != layout {
			wktlex.(*wktLex).Error("syntax error: geometry collection has mixed dimensionality")
			return nil
		}
	}

	newCollection := geom.NewGeometryCollection()
	err := newCollection.Push(gs...)
	if err != nil {
		wktlex.(*wktLex).setError(err)
		return nil
	}
	return newCollection
}

//line wkt.y:119
type wktSymType struct {
	yys               int
	str               string
	geom              geom.T
	coord             float64
	coordList         []float64
	flatRepr          geomFlatCoordsRepr
	multiPolyFlatRepr multiPolygonFlatCoordsRepr
	geomList          []geom.T
}

const POINT = 57346
const POINTM = 57347
const POINTZ = 57348
const POINTZM = 57349
const LINESTRING = 57350
const LINESTRINGM = 57351
const LINESTRINGZ = 57352
const LINESTRINGZM = 57353
const POLYGON = 57354
const POLYGONM = 57355
const POLYGONZ = 57356
const POLYGONZM = 57357
const MULTIPOINT = 57358
const MULTIPOINTM = 57359
const MULTIPOINTZ = 57360
const MULTIPOINTZM = 57361
const MULTILINESTRING = 57362
const MULTILINESTRINGM = 57363
const MULTILINESTRINGZ = 57364
const MULTILINESTRINGZM = 57365
const MULTIPOLYGON = 57366
const MULTIPOLYGONM = 57367
const MULTIPOLYGONZ = 57368
const MULTIPOLYGONZM = 57369
const GEOMETRYCOLLECTION = 57370
const GEOMETRYCOLLECTIONM = 57371
const GEOMETRYCOLLECTIONZ = 57372
const GEOMETRYCOLLECTIONZM = 57373
const EMPTY = 57374
const NUM = 57375

var wktToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"POINT",
	"POINTM",
	"POINTZ",
	"POINTZM",
	"LINESTRING",
	"LINESTRINGM",
	"LINESTRINGZ",
	"LINESTRINGZM",
	"POLYGON",
	"POLYGONM",
	"POLYGONZ",
	"POLYGONZM",
	"MULTIPOINT",
	"MULTIPOINTM",
	"MULTIPOINTZ",
	"MULTIPOINTZM",
	"MULTILINESTRING",
	"MULTILINESTRINGM",
	"MULTILINESTRINGZ",
	"MULTILINESTRINGZM",
	"MULTIPOLYGON",
	"MULTIPOLYGONM",
	"MULTIPOLYGONZ",
	"MULTIPOLYGONZM",
	"GEOMETRYCOLLECTION",
	"GEOMETRYCOLLECTIONM",
	"GEOMETRYCOLLECTIONZ",
	"GEOMETRYCOLLECTIONZM",
	"EMPTY",
	"NUM",
	"'('",
	"')'",
	"','",
}

var wktStatenames = [...]string{}

const wktEofCode = 1
const wktErrCode = 2
const wktInitialStackSize = 16

//line yacctab:1
var wktExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const wktPrivate = 57344

const wktLast = 348

var wktAct = [...]int{
	56, 110, 192, 199, 2, 196, 195, 190, 170, 173,
	191, 174, 169, 168, 147, 148, 179, 153, 152, 57,
	127, 198, 134, 149, 139, 189, 167, 146, 158, 258,
	255, 257, 255, 256, 255, 254, 255, 252, 253, 251,
	250, 205, 58, 249, 250, 126, 247, 248, 125, 245,
	246, 243, 244, 241, 242, 240, 239, 238, 239, 236,
	237, 119, 234, 235, 204, 141, 232, 233, 111, 230,
	231, 111, 203, 128, 229, 228, 227, 228, 225, 226,
	223, 224, 267, 143, 120, 221, 222, 120, 219, 220,
	217, 218, 129, 215, 216, 129, 80, 135, 162, 136,
	183, 160, 159, 181, 175, 138, 197, 75, 180, 112,
	188, 154, 80, 150, 188, 130, 75, 112, 213, 214,
	171, 211, 212, 130, 188, 121, 282, 193, 200, 201,
	202, 209, 210, 121, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 67, 145, 115, 51, 145, 114, 46, 145,
	263, 271, 145, 113, 43, 166, 166, 67, 62, 166,
	62, 267, 115, 51, 114, 46, 188, 166, 72, 59,
	104, 102, 103, 101, 100, 98, 99, 97, 96, 94,
	95, 93, 92, 90, 91, 89, 88, 86, 87, 85,
	59, 84, 262, 83, 82, 108, 81, 128, 79, 77,
	80, 75, 107, 74, 143, 75, 71, 66, 72, 67,
	64, 61, 62, 62, 55, 106, 59, 264, 129, 105,
	272, 269, 162, 274, 273, 270, 138, 183, 277, 278,
	275, 175, 280, 279, 284, 154, 197, 283, 285, 287,
	286, 281, 276, 130, 268, 266, 50, 109, 51, 119,
	48, 45, 46, 46, 42, 185, 43, 263, 289, 288,
	265, 115, 114, 128, 261, 260, 259, 208, 207, 206,
	113, 184, 163, 144, 70, 186, 38, 78, 164, 1,
	165, 187, 194, 176, 39, 178, 142, 53, 60, 63,
	69, 73, 76, 54, 68, 52, 65, 41, 140, 177,
	49, 182, 161, 172, 155, 157, 156, 151, 131, 40,
	44, 47, 133, 132, 124, 123, 122, 118, 117, 116,
	137, 9, 8, 7, 6, 5, 4, 3,
}

var wktPact = [...]int{
	130, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	242, 239, 238, 234, 202, 199, 198, 195, 194, 191,
	187, 186, 182, 179, 175, 174, 171, 170, 167, 166,
	163, 162, 159, 158, 205, 201, 188, 181, 235, -1000,
	-1000, -1000, -1000, 257, -1000, -1000, 249, -1000, -1000, -1000,
	-1000, 248, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 257,
	-1000, -1000, 249, -1000, -1000, -1000, -1000, 248, -1000, -1000,
	-1000, -1000, 176, -1000, -1000, 146, -1000, -1000, -1000, -1000,
	128, 140, -1000, 134, -1000, 134, -1000, 131, -1000, 155,
	-1000, 144, -1000, 144, -1000, 143, -1000, 154, -1000, 82,
	-1000, 82, -1000, 78, -1000, 130, 130, 130, 130, -1000,
	37, 29, 6, 256, 255, 254, 96, 86, 83, -1000,
	-1000, -1000, 58, 55, 53, -1000, -1000, -1000, -1000, -1000,
	-1000, 50, 45, 43, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, -1000, -1000, -1000,
	39, 34, -1000, -1000, -1000, 31, 27, 24, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 22, -1000, -1000,
	-1000, 20, 18, -1000, -1000, -1000, 16, 14, 11, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8,
	-1000, -1000, -1000, 4, 2, -1000, -1000, -1000, 0, -1000,
	-2, -4, -6, -1000, -1000, -1000, 253, 252, 251, -1000,
	244, -1000, 249, -1000, 248, -1000, 48, -1000, 146, -1000,
	128, -1000, 137, -1000, 151, -1000, 149, -1000, 134, -1000,
	-1000, 131, -1000, 147, -1000, 146, -1000, 128, -1000, 144,
	-1000, -1000, 143, -1000, 92, -1000, 73, -1000, 62, -1000,
	82, -1000, -1000, 78, -1000, 130, -1000, -1000, -1000, 246,
	-1000, 246, -1000, 245, -1000, -1000, -1000, 244, -1000, -1000,
	-1000, 244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var wktPgo = [...]int{
	0, 3, 347, 346, 345, 344, 343, 342, 341, 21,
	1, 24, 65, 340, 15, 17, 293, 318, 306, 339,
	338, 337, 0, 19, 42, 300, 292, 298, 295, 291,
	275, 48, 45, 20, 336, 335, 334, 333, 332, 22,
	14, 18, 328, 27, 327, 326, 325, 324, 26, 323,
	322, 12, 11, 28, 13, 9, 321, 10, 5, 319,
	305, 16, 7, 6, 303, 25, 302, 23, 8, 301,
	2, 299, 296,
}

var wktR1 = [...]int{
	0, 71, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 8, 8, 8, 72, 72, 72, 72, 9, 9,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	59, 59, 60, 60, 64, 64, 65, 65, 66, 66,
	61, 61, 62, 62, 63, 63, 56, 57, 58, 70,
	28, 29, 30, 69, 34, 34, 35, 35, 36, 36,
	31, 32, 33, 45, 45, 46, 46, 47, 47, 48,
	48, 49, 49, 53, 53, 54, 54, 55, 55, 50,
	51, 52, 25, 26, 27, 22, 23, 24, 68, 19,
	19, 20, 20, 21, 21, 37, 37, 38, 38, 42,
	42, 43, 43, 44, 44, 39, 39, 40, 40, 41,
	41, 13, 13, 14, 14, 15, 15, 67, 16, 17,
	18, 10, 11, 12,
}

var wktR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 4, 2, 1, 1, 1, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	4, 4, 4, 4, 4, 4, 2, 2, 2, 2,
	4, 4, 4, 4, 4, 4, 2, 2, 2, 2,
	4, 4, 4, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 1, 3, 1, 3, 1, 3, 1,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 2, 3, 4,
}

var wktChk = [...]int{
	-1000, -71, -1, -2, -3, -4, -5, -6, -7, -8,
	4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, -72, -16,
	-17, -18, 32, 34, -17, 32, 34, -17, 32, -18,
	32, 34, -25, -26, -27, 32, -22, -23, -24, 34,
	-26, 32, 34, -26, 32, -27, 32, 34, -28, -29,
	-30, 32, 34, -29, 32, 34, -29, 32, -30, 32,
	34, 34, 32, 34, 32, 34, 32, 34, 32, 34,
	32, 34, 32, 34, 32, 34, 32, 34, 32, 34,
	32, 34, 32, 34, 32, 34, 34, 34, 34, 32,
	-10, -11, -12, 33, 33, 33, -19, -20, -21, -10,
	-11, -12, -34, -35, -36, -31, -32, -33, -22, -23,
	-24, -42, -37, -38, -39, -14, -15, -13, -67, -11,
	-17, -12, -18, -10, -16, 32, -43, -40, -14, -67,
	-43, -44, -41, -15, -67, -47, -45, -46, -53, -51,
	-52, -50, -68, -26, -27, -25, 32, -48, -54, -51,
	-68, -48, -49, -55, -52, -68, -64, -59, -60, -61,
	-57, -58, -56, -70, -29, -30, -28, -69, 32, -65,
	-62, -57, -70, -65, -66, -63, -58, -70, -9, -1,
	-9, -9, -9, 35, 35, 35, 33, 33, 33, 35,
	36, 35, 36, 35, 36, 35, 36, 35, 36, 35,
	36, 35, 36, 35, 36, 35, 36, 35, 36, 35,
	35, 36, 35, 36, 35, 36, 35, 36, 35, 36,
	35, 35, 36, 35, 36, 35, 36, 35, 36, 35,
	36, 35, 35, 36, 35, 36, 35, 35, 35, 33,
	33, 33, -10, 33, -11, -12, -31, 34, -32, -33,
	-39, 34, -14, -15, -40, -41, -53, -51, -52, -54,
	-55, -61, 34, -57, -58, -62, -63, -1, 33, 33,
}

var wktDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 15, 16, 17, 0, 20,
	21, 22, 26, 0, 23, 27, 0, 24, 28, 25,
	29, 0, 30, 31, 32, 36, 132, 133, 134, 0,
	33, 37, 0, 34, 38, 35, 39, 0, 40, 41,
	42, 46, 0, 43, 47, 0, 44, 48, 45, 49,
	0, 0, 56, 0, 57, 0, 58, 0, 59, 0,
	66, 0, 67, 0, 68, 0, 69, 0, 76, 0,
	77, 0, 78, 0, 79, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	142, 144, 0, 0, 0, 105, 107, 109, 110, 111,
	112, 0, 0, 0, 150, 146, 148, 155, 156, 163,
	164, 165, 166, 161, 162, 167, 0, 152, 157, 158,
	0, 0, 154, 159, 160, 0, 0, 0, 118, 114,
	116, 123, 124, 130, 131, 129, 138, 0, 120, 125,
	126, 0, 0, 122, 127, 128, 0, 0, 0, 85,
	81, 83, 90, 91, 97, 98, 96, 99, 103, 0,
	87, 92, 93, 0, 0, 89, 94, 95, 0, 19,
	0, 0, 0, 168, 169, 170, 171, 0, 0, 135,
	0, 136, 0, 137, 0, 100, 0, 101, 0, 102,
	0, 50, 0, 51, 0, 52, 0, 53, 0, 54,
	55, 0, 60, 0, 61, 0, 62, 0, 63, 0,
	64, 65, 0, 70, 0, 71, 0, 72, 0, 73,
	0, 74, 75, 0, 9, 0, 10, 11, 12, 172,
	172, 0, 139, 0, 141, 143, 104, 0, 106, 108,
	149, 0, 145, 147, 151, 153, 117, 113, 115, 119,
	121, 84, 0, 80, 82, 86, 88, 18, 173, 171,
}

var wktTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	34, 35, 3, 3, 36,
}

var wktTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33,
}

var wktTok3 = [...]int{
	0,
}

var wktErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	wktDebug        = 0
	wktErrorVerbose = true
)

type wktLexer interface {
	Lex(lval *wktSymType) int
	Error(s string)
}

type wktParser interface {
	Parse(wktLexer) int
	Lookahead() int
}

type wktParserImpl struct {
	lval  wktSymType
	stack [wktInitialStackSize]wktSymType
	char  int
}

func (p *wktParserImpl) Lookahead() int {
	return p.char
}

func wktNewParser() wktParser {
	return &wktParserImpl{}
}

const wktFlag = -1000

func wktTokname(c int) string {
	if c >= 1 && c-1 < len(wktToknames) {
		if wktToknames[c-1] != "" {
			return wktToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func wktStatname(s int) string {
	if s >= 0 && s < len(wktStatenames) {
		if wktStatenames[s] != "" {
			return wktStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func wktErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !wktErrorVerbose {
		return "syntax error"
	}

	for _, e := range wktErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + wktTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := wktPact[state]
	for tok := TOKSTART; tok-1 < len(wktToknames); tok++ {
		if n := base + tok; n >= 0 && n < wktLast && wktChk[wktAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if wktDef[state] == -2 {
		i := 0
		for wktExca[i] != -1 || wktExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; wktExca[i] >= 0; i += 2 {
			tok := wktExca[i]
			if tok < TOKSTART || wktExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if wktExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += wktTokname(tok)
	}
	return res
}

func wktlex1(lex wktLexer, lval *wktSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = wktTok1[0]
		goto out
	}
	if char < len(wktTok1) {
		token = wktTok1[char]
		goto out
	}
	if char >= wktPrivate {
		if char < wktPrivate+len(wktTok2) {
			token = wktTok2[char-wktPrivate]
			goto out
		}
	}
	for i := 0; i < len(wktTok3); i += 2 {
		token = wktTok3[i+0]
		if token == char {
			token = wktTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = wktTok2[1] /* unknown char */
	}
	if wktDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", wktTokname(token), uint(char))
	}
	return char, token
}

func wktParse(wktlex wktLexer) int {
	return wktNewParser().Parse(wktlex)
}

func (wktrcvr *wktParserImpl) Parse(wktlex wktLexer) int {
	var wktn int
	var wktVAL wktSymType
	var wktDollar []wktSymType
	_ = wktDollar // silence set and not used
	wktS := wktrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	wktstate := 0
	wktrcvr.char = -1
	wkttoken := -1 // wktrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		wktstate = -1
		wktrcvr.char = -1
		wkttoken = -1
	}()
	wktp := -1
	goto wktstack

ret0:
	return 0

ret1:
	return 1

wktstack:
	/* put a state and value onto the stack */
	if wktDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", wktTokname(wkttoken), wktStatname(wktstate))
	}

	wktp++
	if wktp >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktS[wktp] = wktVAL
	wktS[wktp].yys = wktstate

wktnewstate:
	wktn = wktPact[wktstate]
	if wktn <= wktFlag {
		goto wktdefault /* simple state */
	}
	if wktrcvr.char < 0 {
		wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
	}
	wktn += wkttoken
	if wktn < 0 || wktn >= wktLast {
		goto wktdefault
	}
	wktn = wktAct[wktn]
	if wktChk[wktn] == wkttoken { /* valid shift */
		wktrcvr.char = -1
		wkttoken = -1
		wktVAL = wktrcvr.lval
		wktstate = wktn
		if Errflag > 0 {
			Errflag--
		}
		goto wktstack
	}

wktdefault:
	/* default state action */
	wktn = wktDef[wktstate]
	if wktn == -2 {
		if wktrcvr.char < 0 {
			wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if wktExca[xi+0] == -1 && wktExca[xi+1] == wktstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			wktn = wktExca[xi+0]
			if wktn < 0 || wktn == wkttoken {
				break
			}
		}
		wktn = wktExca[xi+1]
		if wktn < 0 {
			goto ret0
		}
	}
	if wktn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			wktlex.Error(wktErrorMessage(wktstate, wkttoken))
			Nerrs++
			if wktDebug >= 1 {
				__yyfmt__.Printf("%s", wktStatname(wktstate))
				__yyfmt__.Printf(" saw %s\n", wktTokname(wkttoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for wktp >= 0 {
				wktn = wktPact[wktS[wktp].yys] + wktErrCode
				if wktn >= 0 && wktn < wktLast {
					wktstate = wktAct[wktn] /* simulate a shift of "error" */
					if wktChk[wktstate] == wktErrCode {
						goto wktstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if wktDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", wktS[wktp].yys)
				}
				wktp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if wktDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", wktTokname(wkttoken))
			}
			if wkttoken == wktEofCode {
				goto ret1
			}
			wktrcvr.char = -1
			wkttoken = -1
			goto wktnewstate /* try again in the same state */
		}
	}

	/* reduction by production wktn */
	if wktDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", wktn, wktStatname(wktstate))
	}

	wktnt := wktn
	wktpt := wktp
	_ = wktpt // guard against "declared and not used"

	wktp -= wktR2[wktn]
	// wktp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if wktp+1 >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktVAL = wktS[wktp+1]

	/* consult goto table to find next state */
	wktn = wktR1[wktn]
	wktg := wktPgo[wktn]
	wktj := wktg + wktS[wktp].yys + 1

	if wktj >= wktLast {
		wktstate = wktAct[wktg]
	} else {
		wktstate = wktAct[wktj]
		if wktChk[wktstate] != -wktn {
			wktstate = wktAct[wktg]
		}
	}
	// dummy call; replaced with literal code
	switch wktnt {

	case 1:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:206
		{
			wktlex.(*wktLex).ret = wktDollar[1].geom
		}
	case 9:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:221
		{
			newCollection := makeGeomCollection(wktlex, wktDollar[3].geomList, geom.NoLayout)
			if newCollection == nil {
				return 1
			}
			wktVAL.geom = newCollection
		}
	case 10:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:229
		{
			newCollection := makeGeomCollection(wktlex, wktDollar[3].geomList, geom.XYM)
			if newCollection == nil {
				return 1
			}
			wktVAL.geom = newCollection
		}
	case 11:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:237
		{
			newCollection := makeGeomCollection(wktlex, wktDollar[3].geomList, geom.XYZ)
			if newCollection == nil {
				return 1
			}
			wktVAL.geom = newCollection
		}
	case 12:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:245
		{
			newCollection := makeGeomCollection(wktlex, wktDollar[3].geomList, geom.XYZM)
			if newCollection == nil {
				return 1
			}
			wktVAL.geom = newCollection
		}
	case 13:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:253
		{
			wktVAL.geom = geom.NewGeometryCollection()
		}
	case 18:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:265
		{
			wktVAL.geomList = append(wktDollar[1].geomList, wktDollar[3].geom)
		}
	case 19:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:269
		{
			wktVAL.geomList = []geom.T{wktDollar[1].geom}
		}
	case 20:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:275
		{
			wktVAL.geom = geom.NewPointFlat(geom.XY, wktDollar[2].coordList)
		}
	case 21:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:279
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 22:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:283
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 23:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:287
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYM, wktDollar[2].coordList)
		}
	case 24:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:291
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 25:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:295
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 26:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:299
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XY)
		}
	case 27:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:303
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYM)
		}
	case 28:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:307
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZ)
		}
	case 29:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:311
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZM)
		}
	case 30:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:317
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XY, wktDollar[2].coordList)
		}
	case 31:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:321
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 32:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:325
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 33:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:329
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYM, wktDollar[2].coordList)
		}
	case 34:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:333
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 35:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:337
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 36:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:341
		{
			wktVAL.geom = geom.NewLineString(geom.XY)
		}
	case 37:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:345
		{
			wktVAL.geom = geom.NewLineString(geom.XYM)
		}
	case 38:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:349
		{
			wktVAL.geom = geom.NewLineString(geom.XYZ)
		}
	case 39:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:353
		{
			wktVAL.geom = geom.NewLineString(geom.XYZM)
		}
	case 40:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:359
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XY, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 41:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:363
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZ, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 42:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:367
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZM, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 43:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:371
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYM, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 44:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:375
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZ, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 45:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:379
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZM, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 46:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:383
		{
			wktVAL.geom = geom.NewPolygon(geom.XY)
		}
	case 47:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:387
		{
			wktVAL.geom = geom.NewPolygon(geom.XYM)
		}
	case 48:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:391
		{
			wktVAL.geom = geom.NewPolygon(geom.XYZ)
		}
	case 49:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:395
		{
			wktVAL.geom = geom.NewPolygon(geom.XYZM)
		}
	case 50:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:401
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XY, wktDollar[3].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[3].flatRepr.ends))
		}
	case 51:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:405
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XYZ, wktDollar[3].coordList)
		}
	case 52:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:409
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XYZM, wktDollar[3].coordList)
		}
	case 53:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:413
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XYM, wktDollar[3].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[3].flatRepr.ends))
		}
	case 54:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:417
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XYZ, wktDollar[3].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[3].flatRepr.ends))
		}
	case 55:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:421
		{
			wktVAL.geom = geom.NewMultiPointFlat(geom.XYZM, wktDollar[3].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[3].flatRepr.ends))
		}
	case 56:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:425
		{
			wktVAL.geom = geom.NewMultiPoint(geom.XY)
		}
	case 57:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:429
		{
			wktVAL.geom = geom.NewMultiPoint(geom.XYM)
		}
	case 58:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:433
		{
			wktVAL.geom = geom.NewMultiPoint(geom.XYZ)
		}
	case 59:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:437
		{
			wktVAL.geom = geom.NewMultiPoint(geom.XYZM)
		}
	case 60:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:443
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XY, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 61:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:447
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XYZ, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 62:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:451
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XYZM, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 63:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:455
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XYM, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 64:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:459
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XYZ, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 65:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:463
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(geom.XYZM, wktDollar[3].flatRepr.flatCoords, wktDollar[3].flatRepr.ends)
		}
	case 66:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:467
		{
			wktVAL.geom = geom.NewMultiLineString(geom.XY)
		}
	case 67:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:471
		{
			wktVAL.geom = geom.NewMultiLineString(geom.XYM)
		}
	case 68:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:475
		{
			wktVAL.geom = geom.NewMultiLineString(geom.XYZ)
		}
	case 69:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:479
		{
			wktVAL.geom = geom.NewMultiLineString(geom.XYZM)
		}
	case 70:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:485
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XY, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 71:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:489
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XYZ, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 72:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:493
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XYZM, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 73:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:497
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XYM, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 74:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:501
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XYZ, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 75:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:505
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(geom.XYZM, wktDollar[3].multiPolyFlatRepr.flatCoords, wktDollar[3].multiPolyFlatRepr.endss)
		}
	case 76:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:509
		{
			wktVAL.geom = geom.NewMultiPolygon(geom.XY)
		}
	case 77:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:513
		{
			wktVAL.geom = geom.NewMultiPolygon(geom.XYM)
		}
	case 78:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:517
		{
			wktVAL.geom = geom.NewMultiPolygon(geom.XYZ)
		}
	case 79:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:521
		{
			wktVAL.geom = geom.NewMultiPolygon(geom.XYZM)
		}
	case 80:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:527
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 82:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:534
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 84:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:541
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 86:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:548
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 88:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:555
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 96:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:574
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 97:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:580
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 98:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:586
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 99:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:592
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 100:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:598
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 101:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:604
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 102:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:610
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 103:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:616
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(nil)
		}
	case 104:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:622
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 106:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:629
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 108:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:636
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 110:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:643
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 2) {
				return 1
			}
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 111:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:652
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 3) {
				return 1
			}
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 112:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:661
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 4) {
				return 1
			}
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 113:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:672
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 115:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:679
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 117:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:686
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 119:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:693
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 121:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:700
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 129:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:719
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 130:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:725
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 131:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:731
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 132:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:737
		{
			if !isValidLineString(wktlex, wktDollar[1].coordList, 2) {
				return 1
			}
		}
	case 133:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:745
		{
			if !isValidLineString(wktlex, wktDollar[1].coordList, 3) {
				return 1
			}
		}
	case 134:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:753
		{
			if !isValidLineString(wktlex, wktDollar[1].coordList, 4) {
				return 1
			}
		}
	case 135:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:761
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 136:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:767
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 137:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:773
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 138:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:779
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(nil)
		}
	case 139:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:785
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 141:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:792
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 143:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:799
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 145:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:808
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 147:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:815
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 149:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:822
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 151:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:829
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 153:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:836
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 155:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:843
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 157:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:850
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 159:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:857
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 167:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:876
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(nil)
		}
	case 168:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:882
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 169:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:888
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 170:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:894
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 171:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:900
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord}
		}
	case 172:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:906
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord, wktDollar[3].coord}
		}
	case 173:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:912
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord, wktDollar[3].coord, wktDollar[4].coord}
		}
	}
	goto wktstack /* stack new state and value */
}
