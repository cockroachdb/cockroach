// Code generated by goyacc -o wkt_generated.go -p wkt wkt.y. DO NOT EDIT.

//line wkt.y:12

package wkt

import __yyfmt__ "fmt"

//line wkt.y:13

import "github.com/twpayne/go-geom"

//line wkt.y:19
type wktSymType struct {
	yys       int
	str       string
	geom      geom.T
	coord     float64
	coordList []float64
}

const POINT = 57346
const POINTZ = 57347
const POINTM = 57348
const POINTZM = 57349
const EMPTY = 57350
const NUM = 57351

var wktToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"POINT",
	"POINTZ",
	"POINTM",
	"POINTZM",
	"EMPTY",
	"NUM",
	"'('",
	"')'",
}

var wktStatenames = [...]string{}

const wktEofCode = 1
const wktErrCode = 2
const wktInitialStackSize = 16

//line yacctab:1
var wktExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const wktPrivate = 57344

const wktLast = 39

var wktAct = [...]int{
	32, 28, 31, 27, 33, 31, 19, 17, 20, 15,
	14, 11, 15, 12, 4, 5, 6, 7, 32, 1,
	30, 29, 26, 25, 24, 23, 22, 21, 10, 8,
	3, 9, 2, 0, 0, 0, 18, 13, 16,
}

var wktPact = [...]int{
	10, -1000, -1000, -1000, 3, 2, -1, -2, -1000, -1000,
	-1000, -1000, 18, -1000, -1000, 17, -1000, -1000, -1000, -1000,
	16, 15, 14, 13, -8, 12, 11, -1000, -9, -6,
	9, -1000, -7, -1000,
}

var wktPgo = [...]int{
	0, 32, 30, 29, 31, 28, 19,
}

var wktR1 = [...]int{
	0, 6, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 3, 4, 5,
}

var wktR2 = [...]int{
	0, 1, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 4, 5, 6,
}

var wktChk = [...]int{
	-1000, -6, -1, -2, 4, 5, 6, 7, -3, -4,
	-5, 8, 10, -4, 8, 10, -4, 8, -5, 8,
	10, 9, 9, 9, 9, 9, 9, 11, 9, 9,
	9, 11, 9, 11,
}

var wktDef = [...]int{
	0, -2, 1, 2, 0, 0, 0, 0, 3, 4,
	5, 9, 0, 6, 10, 0, 7, 11, 8, 12,
	0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
	0, 14, 0, 15,
}

var wktTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	10, 11,
}

var wktTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9,
}

var wktTok3 = [...]int{
	0,
}

var wktErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	wktDebug        = 0
	wktErrorVerbose = false
)

type wktLexer interface {
	Lex(lval *wktSymType) int
	Error(s string)
}

type wktParser interface {
	Parse(wktLexer) int
	Lookahead() int
}

type wktParserImpl struct {
	lval  wktSymType
	stack [wktInitialStackSize]wktSymType
	char  int
}

func (p *wktParserImpl) Lookahead() int {
	return p.char
}

func wktNewParser() wktParser {
	return &wktParserImpl{}
}

const wktFlag = -1000

func wktTokname(c int) string {
	if c >= 1 && c-1 < len(wktToknames) {
		if wktToknames[c-1] != "" {
			return wktToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func wktStatname(s int) string {
	if s >= 0 && s < len(wktStatenames) {
		if wktStatenames[s] != "" {
			return wktStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func wktErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !wktErrorVerbose {
		return "syntax error"
	}

	for _, e := range wktErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + wktTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := wktPact[state]
	for tok := TOKSTART; tok-1 < len(wktToknames); tok++ {
		if n := base + tok; n >= 0 && n < wktLast && wktChk[wktAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if wktDef[state] == -2 {
		i := 0
		for wktExca[i] != -1 || wktExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; wktExca[i] >= 0; i += 2 {
			tok := wktExca[i]
			if tok < TOKSTART || wktExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if wktExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += wktTokname(tok)
	}
	return res
}

func wktlex1(lex wktLexer, lval *wktSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = wktTok1[0]
		goto out
	}
	if char < len(wktTok1) {
		token = wktTok1[char]
		goto out
	}
	if char >= wktPrivate {
		if char < wktPrivate+len(wktTok2) {
			token = wktTok2[char-wktPrivate]
			goto out
		}
	}
	for i := 0; i < len(wktTok3); i += 2 {
		token = wktTok3[i+0]
		if token == char {
			token = wktTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = wktTok2[1] /* unknown char */
	}
	if wktDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", wktTokname(token), uint(char))
	}
	return char, token
}

func wktParse(wktlex wktLexer) int {
	return wktNewParser().Parse(wktlex)
}

func (wktrcvr *wktParserImpl) Parse(wktlex wktLexer) int {
	var wktn int
	var wktVAL wktSymType
	var wktDollar []wktSymType
	_ = wktDollar // silence set and not used
	wktS := wktrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	wktstate := 0
	wktrcvr.char = -1
	wkttoken := -1 // wktrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		wktstate = -1
		wktrcvr.char = -1
		wkttoken = -1
	}()
	wktp := -1
	goto wktstack

ret0:
	return 0

ret1:
	return 1

wktstack:
	/* put a state and value onto the stack */
	if wktDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", wktTokname(wkttoken), wktStatname(wktstate))
	}

	wktp++
	if wktp >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktS[wktp] = wktVAL
	wktS[wktp].yys = wktstate

wktnewstate:
	wktn = wktPact[wktstate]
	if wktn <= wktFlag {
		goto wktdefault /* simple state */
	}
	if wktrcvr.char < 0 {
		wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
	}
	wktn += wkttoken
	if wktn < 0 || wktn >= wktLast {
		goto wktdefault
	}
	wktn = wktAct[wktn]
	if wktChk[wktn] == wkttoken { /* valid shift */
		wktrcvr.char = -1
		wkttoken = -1
		wktVAL = wktrcvr.lval
		wktstate = wktn
		if Errflag > 0 {
			Errflag--
		}
		goto wktstack
	}

wktdefault:
	/* default state action */
	wktn = wktDef[wktstate]
	if wktn == -2 {
		if wktrcvr.char < 0 {
			wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if wktExca[xi+0] == -1 && wktExca[xi+1] == wktstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			wktn = wktExca[xi+0]
			if wktn < 0 || wktn == wkttoken {
				break
			}
		}
		wktn = wktExca[xi+1]
		if wktn < 0 {
			goto ret0
		}
	}
	if wktn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			wktlex.Error(wktErrorMessage(wktstate, wkttoken))
			Nerrs++
			if wktDebug >= 1 {
				__yyfmt__.Printf("%s", wktStatname(wktstate))
				__yyfmt__.Printf(" saw %s\n", wktTokname(wkttoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for wktp >= 0 {
				wktn = wktPact[wktS[wktp].yys] + wktErrCode
				if wktn >= 0 && wktn < wktLast {
					wktstate = wktAct[wktn] /* simulate a shift of "error" */
					if wktChk[wktstate] == wktErrCode {
						goto wktstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if wktDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", wktS[wktp].yys)
				}
				wktp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if wktDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", wktTokname(wkttoken))
			}
			if wkttoken == wktEofCode {
				goto ret1
			}
			wktrcvr.char = -1
			wkttoken = -1
			goto wktnewstate /* try again in the same state */
		}
	}

	/* reduction by production wktn */
	if wktDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", wktn, wktStatname(wktstate))
	}

	wktnt := wktn
	wktpt := wktp
	_ = wktpt // guard against "declared and not used"

	wktp -= wktR2[wktn]
	// wktp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if wktp+1 >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktVAL = wktS[wktp+1]

	/* consult goto table to find next state */
	wktn = wktR1[wktn]
	wktg := wktPgo[wktn]
	wktj := wktg + wktS[wktp].yys + 1

	if wktj >= wktLast {
		wktstate = wktAct[wktg]
	} else {
		wktstate = wktAct[wktj]
		if wktChk[wktstate] != -wktn {
			wktstate = wktAct[wktg]
		}
	}
	// dummy call; replaced with literal code
	switch wktnt {

	case 1:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:39
		{
			wktlex.(*wktLex).ret = wktDollar[1].geom
		}
	case 3:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:48
		{
			wktVAL.geom = geom.NewPointFlat(geom.XY, wktDollar[2].coordList)
		}
	case 4:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:52
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 5:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:56
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 6:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:60
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 7:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:64
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYM, wktDollar[2].coordList)
		}
	case 8:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:68
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 9:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:72
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XY)
		}
	case 10:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:76
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZ)
		}
	case 11:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:80
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYM)
		}
	case 12:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:84
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZM)
		}
	case 13:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:90
		{
			wktVAL.coordList = []float64{wktDollar[2].coord, wktDollar[3].coord}
		}
	case 14:
		wktDollar = wktS[wktpt-5 : wktpt+1]
//line wkt.y:96
		{
			wktVAL.coordList = []float64{wktDollar[2].coord, wktDollar[3].coord, wktDollar[4].coord}
		}
	case 15:
		wktDollar = wktS[wktpt-6 : wktpt+1]
//line wkt.y:102
		{
			wktVAL.coordList = []float64{wktDollar[2].coord, wktDollar[3].coord, wktDollar[4].coord, wktDollar[5].coord}
		}
	}
	goto wktstack /* stack new state and value */
}
