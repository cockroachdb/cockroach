// Code generated by goyacc -o wkt_generated.go -p wkt wkt.y. DO NOT EDIT.

//line wkt.y:12

package wkt

import __yyfmt__ "fmt"

//line wkt.y:13

import "github.com/twpayne/go-geom"

func isValidLineString(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 2*stride {
		wktlex.(*wktLex).setParseError("non-empty linestring with only one point", "minimum number of points is 2")
		return false
	}
	return true
}

func isValidPolygonRing(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 4*stride {
		wktlex.(*wktLex).setParseError("polygon ring doesn't have enough points", "minimum number of points is 4")
		return false
	}
	for i := 0; i < stride; i++ {
		if flatCoords[i] != flatCoords[len(flatCoords)-stride+i] {
			wktlex.(*wktLex).setParseError("polygon ring not closed", "ensure first and last point are the same")
			return false
		}
	}
	return true
}

type geomFlatCoordsRepr struct {
	flatCoords []float64
	ends       []int
}

func makeGeomFlatCoordsRepr(flatCoords []float64) geomFlatCoordsRepr {
	return geomFlatCoordsRepr{flatCoords: flatCoords, ends: []int{len(flatCoords)}}
}

func appendGeomFlatCoordsReprs(p1 geomFlatCoordsRepr, p2 geomFlatCoordsRepr) geomFlatCoordsRepr {
	if len(p1.ends) > 0 {
		p1LastEnd := p1.ends[len(p1.ends)-1]
		for i, _ := range p2.ends {
			p2.ends[i] += p1LastEnd
		}
	}
	return geomFlatCoordsRepr{flatCoords: append(p1.flatCoords, p2.flatCoords...), ends: append(p1.ends, p2.ends...)}
}

type multiPolygonFlatCoordsRepr struct {
	flatCoords []float64
	endss      [][]int
}

func makeMultiPolygonFlatCoordsRepr(p geomFlatCoordsRepr) multiPolygonFlatCoordsRepr {
	if p.flatCoords == nil {
		return multiPolygonFlatCoordsRepr{flatCoords: nil, endss: [][]int{nil}}
	}
	return multiPolygonFlatCoordsRepr{flatCoords: p.flatCoords, endss: [][]int{p.ends}}
}

func appendMultiPolygonFlatCoordsRepr(
	p1 multiPolygonFlatCoordsRepr, p2 multiPolygonFlatCoordsRepr,
) multiPolygonFlatCoordsRepr {
	p1LastEndsLastEnd := 0
	for i := len(p1.endss) - 1; i >= 0; i-- {
		if len(p1.endss[i]) > 0 {
			p1LastEndsLastEnd = p1.endss[i][len(p1.endss[i])-1]
			break
		}
	}
	if p1LastEndsLastEnd > 0 {
		for i, _ := range p2.endss {
			for j, _ := range p2.endss[i] {
				p2.endss[i][j] += p1LastEndsLastEnd
			}
		}
	}
	return multiPolygonFlatCoordsRepr{
		flatCoords: append(p1.flatCoords, p2.flatCoords...), endss: append(p1.endss, p2.endss...),
	}
}

//line wkt.y:94
type wktSymType struct {
	yys               int
	str               string
	geom              geom.T
	coord             float64
	coordList         []float64
	flatRepr          geomFlatCoordsRepr
	multiPolyFlatRepr multiPolygonFlatCoordsRepr
}

const POINT = 57346
const POINTM = 57347
const POINTZ = 57348
const POINTZM = 57349
const LINESTRING = 57350
const LINESTRINGM = 57351
const LINESTRINGZ = 57352
const LINESTRINGZM = 57353
const POLYGON = 57354
const POLYGONM = 57355
const POLYGONZ = 57356
const POLYGONZM = 57357
const MULTIPOINT = 57358
const MULTIPOINTM = 57359
const MULTIPOINTZ = 57360
const MULTIPOINTZM = 57361
const MULTILINESTRING = 57362
const MULTILINESTRINGM = 57363
const MULTILINESTRINGZ = 57364
const MULTILINESTRINGZM = 57365
const MULTIPOLYGON = 57366
const MULTIPOLYGONM = 57367
const MULTIPOLYGONZ = 57368
const MULTIPOLYGONZM = 57369
const EMPTY = 57370
const NUM = 57371

var wktToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"POINT",
	"POINTM",
	"POINTZ",
	"POINTZM",
	"LINESTRING",
	"LINESTRINGM",
	"LINESTRINGZ",
	"LINESTRINGZM",
	"POLYGON",
	"POLYGONM",
	"POLYGONZ",
	"POLYGONZM",
	"MULTIPOINT",
	"MULTIPOINTM",
	"MULTIPOINTZ",
	"MULTIPOINTZM",
	"MULTILINESTRING",
	"MULTILINESTRINGM",
	"MULTILINESTRINGZ",
	"MULTILINESTRINGZM",
	"MULTIPOLYGON",
	"MULTIPOLYGONM",
	"MULTIPOLYGONZ",
	"MULTIPOLYGONZM",
	"EMPTY",
	"NUM",
	"'('",
	"')'",
	"','",
}

var wktStatenames = [...]string{}

const wktEofCode = 1
const wktErrCode = 2
const wktInitialStackSize = 16

//line yacctab:1
var wktExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const wktPrivate = 57344

const wktLast = 158

var wktAct = [...]int{
	92, 48, 106, 84, 109, 104, 89, 85, 113, 96,
	46, 51, 55, 99, 54, 61, 94, 81, 66, 83,
	50, 71, 129, 130, 52, 78, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	127, 128, 125, 126, 53, 72, 123, 124, 121, 122,
	87, 76, 119, 120, 70, 87, 102, 97, 117, 118,
	87, 112, 107, 111, 68, 101, 115, 116, 65, 63,
	91, 79, 49, 74, 47, 49, 49, 56, 53, 49,
	60, 47, 58, 74, 114, 49, 86, 20, 19, 18,
	17, 16, 15, 14, 13, 12, 45, 11, 10, 9,
	1, 69, 67, 108, 103, 110, 105, 64, 62, 98,
	93, 100, 87, 95, 131, 59, 87, 102, 97, 134,
	87, 112, 107, 111, 137, 138, 101, 57, 133, 88,
	136, 135, 91, 79, 132, 80, 90, 82, 77, 75,
	73, 8, 7, 6, 5, 4, 3, 2,
}

var wktPact = [...]int{
	22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 61,
	58, 57, 62, 60, 67, 49, 48, 67, 44, 34,
	67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 64, -1000, -1000,
	-1000, -1000, -1000, 64, -1000, -1000, 24, -1000, 54, -1000,
	54, -1000, -1000, 58, -1000, 58, -1000, -1000, 57, -1000,
	57, -1000, -23, 65, -1000, 45, -1000, 37, -1000, -1000,
	31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 27, -1000,
	-1000, -1000, -1000, 25, -1000, -1000, -1000, -1000, 21, -1000,
	-1000, -1000, -1000, 19, -1000, -1000, -1000, -1000, -9, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 64, -1000, 24, -1000,
	54, -1000, 54, -1000, 58, -1000, 58, -1000, 57, -1000,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var wktPgo = [...]int{
	0, 157, 156, 155, 154, 153, 152, 151, 0, 3,
	1, 150, 7, 96, 149, 24, 9, 25, 148, 2,
	19, 147, 146, 17, 6, 145, 139, 137, 125, 123,
	121, 16, 13, 120, 119, 118, 117, 116, 115, 5,
	4, 114, 113, 112, 111, 110, 109, 108, 107, 105,
	104, 103, 102, 101, 100, 99, 98, 97,
}

var wktR1 = [...]int{
	0, 45, 1, 1, 1, 1, 1, 1, 2, 2,
	46, 46, 46, 46, 3, 3, 47, 47, 47, 47,
	4, 4, 48, 48, 48, 48, 5, 5, 5, 51,
	51, 49, 50, 50, 50, 6, 6, 6, 54, 54,
	52, 53, 53, 53, 7, 7, 7, 57, 57, 55,
	56, 56, 56, 43, 44, 42, 42, 41, 41, 39,
	40, 37, 37, 38, 38, 35, 36, 33, 33, 34,
	34, 31, 32, 29, 29, 30, 30, 27, 28, 25,
	25, 26, 26, 23, 24, 21, 21, 22, 22, 20,
	20, 19, 18, 18, 17, 16, 15, 14, 14, 13,
	12, 11, 11, 8, 9, 10,
}

var wktR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 3, 3, 1, 3,
	1, 2, 1, 1, 1, 1,
}

var wktChk = [...]int{
	-1000, -45, -1, -2, -3, -4, -5, -6, -7, -46,
	-47, -48, -49, -50, -51, -52, -53, -54, -55, -56,
	-57, 4, 5, 6, 7, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
	23, 24, 25, 26, 27, -13, -8, 30, -10, 28,
	-16, -8, -15, 30, -19, -8, 30, -27, 30, -28,
	30, -8, -35, 30, -36, 30, -8, -43, 30, -44,
	30, -8, -12, -11, 29, -14, -12, -18, -17, -15,
	-25, -23, -21, -20, -9, -12, -13, -10, -26, -24,
	-22, -20, -8, -33, -31, -29, -16, -9, -34, -32,
	-30, -16, -8, -41, -39, -37, -19, -9, -42, -40,
	-38, -19, -8, 31, 29, 31, 32, 31, 32, 31,
	32, 31, 32, 31, 32, 31, 32, 31, 32, 31,
	32, -12, -17, -23, -24, -31, -32, -39, -40,
}

var wktDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 0,
	0, 0, 29, 30, 0, 38, 39, 0, 47, 48,
	0, 10, 11, 12, 13, 16, 17, 18, 19, 22,
	23, 24, 25, 31, 32, 33, 34, 40, 41, 42,
	43, 49, 50, 51, 52, 8, 9, 0, 103, 105,
	14, 15, 95, 0, 20, 21, 0, 26, 0, 27,
	0, 28, 35, 0, 36, 0, 37, 44, 0, 45,
	0, 46, 0, 100, 102, 0, 98, 0, 93, 94,
	0, 80, 83, 85, 86, 89, 90, 104, 0, 82,
	84, 87, 88, 0, 68, 71, 73, 74, 0, 70,
	72, 75, 76, 0, 58, 59, 61, 62, 0, 56,
	60, 63, 64, 99, 101, 96, 0, 91, 0, 77,
	0, 78, 0, 65, 0, 66, 0, 53, 0, 54,
	0, 97, 92, 79, 81, 67, 69, 57, 55,
}

var wktTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	30, 31, 3, 3, 32,
}

var wktTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29,
}

var wktTok3 = [...]int{
	0,
}

var wktErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	wktDebug        = 0
	wktErrorVerbose = true
)

type wktLexer interface {
	Lex(lval *wktSymType) int
	Error(s string)
}

type wktParser interface {
	Parse(wktLexer) int
	Lookahead() int
}

type wktParserImpl struct {
	lval  wktSymType
	stack [wktInitialStackSize]wktSymType
	char  int
}

func (p *wktParserImpl) Lookahead() int {
	return p.char
}

func wktNewParser() wktParser {
	return &wktParserImpl{}
}

const wktFlag = -1000

func wktTokname(c int) string {
	if c >= 1 && c-1 < len(wktToknames) {
		if wktToknames[c-1] != "" {
			return wktToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func wktStatname(s int) string {
	if s >= 0 && s < len(wktStatenames) {
		if wktStatenames[s] != "" {
			return wktStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func wktErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !wktErrorVerbose {
		return "syntax error"
	}

	for _, e := range wktErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + wktTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := wktPact[state]
	for tok := TOKSTART; tok-1 < len(wktToknames); tok++ {
		if n := base + tok; n >= 0 && n < wktLast && wktChk[wktAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if wktDef[state] == -2 {
		i := 0
		for wktExca[i] != -1 || wktExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; wktExca[i] >= 0; i += 2 {
			tok := wktExca[i]
			if tok < TOKSTART || wktExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if wktExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += wktTokname(tok)
	}
	return res
}

func wktlex1(lex wktLexer, lval *wktSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = wktTok1[0]
		goto out
	}
	if char < len(wktTok1) {
		token = wktTok1[char]
		goto out
	}
	if char >= wktPrivate {
		if char < wktPrivate+len(wktTok2) {
			token = wktTok2[char-wktPrivate]
			goto out
		}
	}
	for i := 0; i < len(wktTok3); i += 2 {
		token = wktTok3[i+0]
		if token == char {
			token = wktTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = wktTok2[1] /* unknown char */
	}
	if wktDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", wktTokname(token), uint(char))
	}
	return char, token
}

func wktParse(wktlex wktLexer) int {
	return wktNewParser().Parse(wktlex)
}

func (wktrcvr *wktParserImpl) Parse(wktlex wktLexer) int {
	var wktn int
	var wktVAL wktSymType
	var wktDollar []wktSymType
	_ = wktDollar // silence set and not used
	wktS := wktrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	wktstate := 0
	wktrcvr.char = -1
	wkttoken := -1 // wktrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		wktstate = -1
		wktrcvr.char = -1
		wkttoken = -1
	}()
	wktp := -1
	goto wktstack

ret0:
	return 0

ret1:
	return 1

wktstack:
	/* put a state and value onto the stack */
	if wktDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", wktTokname(wkttoken), wktStatname(wktstate))
	}

	wktp++
	if wktp >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktS[wktp] = wktVAL
	wktS[wktp].yys = wktstate

wktnewstate:
	wktn = wktPact[wktstate]
	if wktn <= wktFlag {
		goto wktdefault /* simple state */
	}
	if wktrcvr.char < 0 {
		wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
	}
	wktn += wkttoken
	if wktn < 0 || wktn >= wktLast {
		goto wktdefault
	}
	wktn = wktAct[wktn]
	if wktChk[wktn] == wkttoken { /* valid shift */
		wktrcvr.char = -1
		wkttoken = -1
		wktVAL = wktrcvr.lval
		wktstate = wktn
		if Errflag > 0 {
			Errflag--
		}
		goto wktstack
	}

wktdefault:
	/* default state action */
	wktn = wktDef[wktstate]
	if wktn == -2 {
		if wktrcvr.char < 0 {
			wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if wktExca[xi+0] == -1 && wktExca[xi+1] == wktstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			wktn = wktExca[xi+0]
			if wktn < 0 || wktn == wkttoken {
				break
			}
		}
		wktn = wktExca[xi+1]
		if wktn < 0 {
			goto ret0
		}
	}
	if wktn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			wktlex.Error(wktErrorMessage(wktstate, wkttoken))
			Nerrs++
			if wktDebug >= 1 {
				__yyfmt__.Printf("%s", wktStatname(wktstate))
				__yyfmt__.Printf(" saw %s\n", wktTokname(wkttoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for wktp >= 0 {
				wktn = wktPact[wktS[wktp].yys] + wktErrCode
				if wktn >= 0 && wktn < wktLast {
					wktstate = wktAct[wktn] /* simulate a shift of "error" */
					if wktChk[wktstate] == wktErrCode {
						goto wktstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if wktDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", wktS[wktp].yys)
				}
				wktp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if wktDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", wktTokname(wkttoken))
			}
			if wkttoken == wktEofCode {
				goto ret1
			}
			wktrcvr.char = -1
			wkttoken = -1
			goto wktnewstate /* try again in the same state */
		}
	}

	/* reduction by production wktn */
	if wktDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", wktn, wktStatname(wktstate))
	}

	wktnt := wktn
	wktpt := wktp
	_ = wktpt // guard against "declared and not used"

	wktp -= wktR2[wktn]
	// wktp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if wktp+1 >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktVAL = wktS[wktp+1]

	/* consult goto table to find next state */
	wktn = wktR1[wktn]
	wktg := wktPgo[wktn]
	wktj := wktg + wktS[wktp].yys + 1

	if wktj >= wktLast {
		wktstate = wktAct[wktg]
	} else {
		wktstate = wktAct[wktj]
		if wktChk[wktstate] != -wktn {
			wktstate = wktAct[wktg]
		}
	}
	// dummy call; replaced with literal code
	switch wktnt {

	case 1:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:176
		{
			wktlex.(*wktLex).ret = wktDollar[1].geom
		}
	case 8:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:190
		{
			wktVAL.geom = geom.NewPointFlat(wktlex.(*wktLex).curLayout, wktDollar[2].coordList)
		}
	case 9:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:194
		{
			wktVAL.geom = geom.NewPointEmpty(wktlex.(*wktLex).curLayout)
		}
	case 10:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:200
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 11:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:207
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 12:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:214
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 13:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:221
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 14:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:230
		{
			wktVAL.geom = geom.NewLineStringFlat(wktlex.(*wktLex).curLayout, wktDollar[2].coordList)
		}
	case 15:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:234
		{
			wktVAL.geom = geom.NewLineString(wktlex.(*wktLex).curLayout)
		}
	case 16:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:240
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 17:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:247
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 18:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:254
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 19:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:261
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 20:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:270
		{
			wktVAL.geom = geom.NewPolygonFlat(wktlex.(*wktLex).curLayout, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 21:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:274
		{
			wktVAL.geom = geom.NewPolygon(wktlex.(*wktLex).curLayout)
		}
	case 22:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:280
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 23:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:287
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 24:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:294
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 25:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:301
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 26:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:310
		{
			wktVAL.geom = geom.NewMultiPointFlat(
				wktlex.(*wktLex).curLayout, wktDollar[2].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[2].flatRepr.ends),
			)
		}
	case 27:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:316
		{
			wktVAL.geom = geom.NewMultiPointFlat(
				wktlex.(*wktLex).curLayout, wktDollar[2].flatRepr.flatCoords, geom.NewMultiPointFlatOptionWithEnds(wktDollar[2].flatRepr.ends),
			)
		}
	case 28:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:322
		{
			wktVAL.geom = geom.NewMultiPoint(wktlex.(*wktLex).curLayout)
		}
	case 31:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:332
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 32:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:341
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 33:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:348
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 34:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:355
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 35:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:364
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(wktlex.(*wktLex).curLayout, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 36:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:368
		{
			wktVAL.geom = geom.NewMultiLineStringFlat(wktlex.(*wktLex).curLayout, wktDollar[2].flatRepr.flatCoords, wktDollar[2].flatRepr.ends)
		}
	case 37:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:372
		{
			wktVAL.geom = geom.NewMultiLineString(wktlex.(*wktLex).curLayout)
		}
	case 40:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:382
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 41:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:391
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 42:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:398
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 43:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:405
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 44:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:414
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(wktlex.(*wktLex).curLayout, wktDollar[2].multiPolyFlatRepr.flatCoords, wktDollar[2].multiPolyFlatRepr.endss)
		}
	case 45:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:418
		{
			wktVAL.geom = geom.NewMultiPolygonFlat(wktlex.(*wktLex).curLayout, wktDollar[2].multiPolyFlatRepr.flatCoords, wktDollar[2].multiPolyFlatRepr.endss)
		}
	case 46:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:422
		{
			wktVAL.geom = geom.NewMultiPolygon(wktlex.(*wktLex).curLayout)
		}
	case 49:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:432
		{
			ok := wktlex.(*wktLex).setLayout(geom.NoLayout)
			if !ok {
				return 1
			}
		}
	case 50:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:441
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYM)
			if !ok {
				return 1
			}
		}
	case 51:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:448
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZ)
			if !ok {
				return 1
			}
		}
	case 52:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:455
		{
			ok := wktlex.(*wktLex).setLayout(geom.XYZM)
			if !ok {
				return 1
			}
		}
	case 53:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:464
		{
			wktVAL.multiPolyFlatRepr = wktDollar[2].multiPolyFlatRepr
		}
	case 54:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:470
		{
			wktVAL.multiPolyFlatRepr = wktDollar[2].multiPolyFlatRepr
		}
	case 55:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:476
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 57:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:483
		{
			wktVAL.multiPolyFlatRepr = appendMultiPolygonFlatCoordsRepr(wktDollar[1].multiPolyFlatRepr, wktDollar[3].multiPolyFlatRepr)
		}
	case 59:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:490
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 60:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:496
		{
			wktVAL.multiPolyFlatRepr = makeMultiPolygonFlatCoordsRepr(wktDollar[1].flatRepr)
		}
	case 62:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:503
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 64:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:510
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 65:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:516
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 66:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:522
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 67:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:528
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 69:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:535
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 71:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:542
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 72:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:548
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 77:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:562
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 78:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:568
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 79:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:574
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 81:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:581
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 83:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:588
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 84:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:594
		{
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 91:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:612
		{
			wktVAL.flatRepr = wktDollar[2].flatRepr
		}
	case 92:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:618
		{
			wktVAL.flatRepr = appendGeomFlatCoordsReprs(wktDollar[1].flatRepr, wktDollar[3].flatRepr)
		}
	case 94:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:625
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, wktlex.(*wktLex).curLayout.Stride()) {
				return 1
			}
			wktVAL.flatRepr = makeGeomFlatCoordsRepr(wktDollar[1].coordList)
		}
	case 95:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:634
		{
			if !isValidLineString(wktlex, wktDollar[1].coordList, wktlex.(*wktLex).curLayout.Stride()) {
				return 1
			}
		}
	case 96:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:642
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 97:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:648
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 99:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:655
		{
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 100:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:661
		{
			switch len(wktDollar[1].coordList) {
			case 1:
				wktlex.(*wktLex).setParseError("not enough coordinates", "each point needs at least 2 coords")
				return 1
			case 2, 3, 4:
				ok := wktlex.(*wktLex).validateStrideAndSetLayoutIfNoLayout(len(wktDollar[1].coordList))
				if !ok {
					return 1
				}
			default:
				wktlex.(*wktLex).setParseError("too many coordinates", "each point can have at most 4 coords")
				return 1
			}
		}
	case 101:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:679
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[2].coord)
		}
	case 102:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:683
		{
			wktVAL.coordList = []float64{wktDollar[1].coord}
		}
	case 103:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:689
		{
			wktlex.(*wktLex).setLayoutIfNoLayout(geom.XY)
		}
	case 104:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:695
		{
			ok := wktlex.(*wktLex).setLayoutEmptyInCollection()
			if !ok {
				return 1
			}
		}
	case 105:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:704
		{
			wktVAL.coordList = []float64(nil)
		}
	}
	goto wktstack /* stack new state and value */
}
