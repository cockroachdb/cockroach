// Code generated by goyacc -o wkt_generated.go -p wkt wkt.y. DO NOT EDIT.

//line wkt.y:12

package wkt

import __yyfmt__ "fmt"

//line wkt.y:13

import "github.com/twpayne/go-geom"

func isValidLinestring(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 2*stride {
		wktlex.(*wktLex).Error("syntax error: non-empty linestring with only one point")
		return false
	}
	return true
}

func isValidPolygonRing(wktlex wktLexer, flatCoords []float64, stride int) bool {
	if len(flatCoords) < 4*stride {
		wktlex.(*wktLex).Error("syntax error: polygon ring doesn't have enough points")
		return false
	}
	for i := 0; i < stride; i++ {
		if flatCoords[i] != flatCoords[len(flatCoords)-stride+i] {
			wktlex.(*wktLex).Error("syntax error: polygon ring not closed")
			return false
		}
	}
	return true
}

type geomPair struct {
	flatCoords []float64
	ends       []int
}

//line wkt.y:46
type wktSymType struct {
	yys       int
	str       string
	geom      geom.T
	coord     float64
	coordList []float64
	pair      geomPair
}

const POINT = 57346
const POINTM = 57347
const POINTZ = 57348
const POINTZM = 57349
const LINESTRING = 57350
const LINESTRINGM = 57351
const LINESTRINGZ = 57352
const LINESTRINGZM = 57353
const POLYGON = 57354
const POLYGONM = 57355
const POLYGONZ = 57356
const POLYGONZM = 57357
const EMPTY = 57358
const NUM = 57359

var wktToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"POINT",
	"POINTM",
	"POINTZ",
	"POINTZM",
	"LINESTRING",
	"LINESTRINGM",
	"LINESTRINGZ",
	"LINESTRINGZM",
	"POLYGON",
	"POLYGONM",
	"POLYGONZ",
	"POLYGONZM",
	"EMPTY",
	"NUM",
	"'('",
	"')'",
	"','",
}

var wktStatenames = [...]string{}

const wktEofCode = 1
const wktErrCode = 2
const wktInitialStackSize = 16

//line yacctab:1
var wktExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const wktPrivate = 57344

const wktLast = 120

var wktAct = [...]int{
	67, 66, 65, 58, 56, 64, 63, 61, 57, 6,
	7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
	17, 60, 97, 94, 88, 85, 49, 96, 92, 95,
	92, 87, 54, 93, 94, 91, 92, 89, 90, 86,
	48, 84, 51, 83, 53, 81, 80, 78, 71, 76,
	72, 73, 75, 74, 46, 44, 45, 43, 42, 40,
	41, 39, 37, 35, 38, 33, 32, 29, 33, 30,
	25, 23, 24, 22, 21, 19, 20, 18, 59, 38,
	33, 106, 30, 102, 110, 109, 55, 52, 100, 99,
	98, 101, 104, 105, 107, 108, 103, 47, 82, 79,
	77, 50, 70, 68, 1, 62, 69, 5, 4, 3,
	2, 0, 0, 28, 26, 0, 36, 27, 31, 34,
}

var wktPact = [...]int{
	5, -1000, -1000, -1000, -1000, -1000, 59, 58, 55, 54,
	51, 50, 47, 46, 43, 42, 39, 38, 84, -1000,
	70, -1000, 70, -1000, 69, -1000, -1000, -1000, -1000, -1000,
	84, -1000, -1000, 70, -1000, -1000, -1000, -1000, 69, 64,
	-1000, 62, -1000, 62, -1000, 61, -1000, 34, 33, 30,
	83, 28, 82, 27, 26, 81, 24, 22, 6, 19,
	11, 4, 18, 16, 14, -1000, -1000, -1000, -1000, -1000,
	-1000, 10, 8, 3, -1000, -1000, -1000, 73, -1000, 72,
	-1000, -1000, 71, -1000, -1000, -1000, 66, 70, 69, -1000,
	63, -1000, 62, -1000, 61, -1000, -1000, -1000, 68, -1000,
	68, -1000, 67, -1000, -1000, -1000, 66, -1000, -1000, -1000,
	-1000,
}

var wktPgo = [...]int{
	0, 110, 109, 108, 107, 78, 21, 7, 4, 8,
	3, 103, 106, 102, 2, 1, 0, 105, 6, 5,
	104,
}

var wktR1 = [...]int{
	0, 20, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 17, 17, 18, 18, 19,
	19, 14, 15, 16, 11, 12, 13, 8, 8, 9,
	9, 10, 10, 5, 6, 7,
}

var wktR2 = [...]int{
	0, 1, 1, 1, 1, 4, 4, 4, 4, 4,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 4, 4, 4, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 1, 3,
	1, 1, 1, 1, 3, 3, 3, 3, 1, 3,
	1, 3, 1, 2, 3, 4,
}

var wktChk = [...]int{
	-1000, -20, -1, -2, -3, -4, 4, 5, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 18, 16,
	18, 16, 18, 16, 18, 16, -11, -12, -13, 16,
	18, -12, 16, 18, -12, 16, -13, 16, 18, 18,
	16, 18, 16, 18, 16, 18, 16, -5, -6, -7,
	17, -6, 17, -6, -7, 17, -8, -9, -10, -5,
	-6, -7, -17, -18, -19, -14, -15, -16, -11, -12,
	-13, -18, -18, -19, 19, 19, 19, 17, 19, 17,
	19, 19, 17, 19, 19, 19, 20, 20, 20, 19,
	20, 19, 20, 19, 20, 19, 19, 19, 17, 17,
	17, -8, 17, -9, -10, -14, 18, -15, -16, 17,
	17,
}

var wktDef = [...]int{
	0, -2, 1, 2, 3, 4, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	0, 12, 0, 13, 0, 14, 15, 16, 17, 21,
	0, 18, 22, 0, 19, 23, 20, 24, 0, 0,
	31, 0, 32, 0, 33, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	50, 52, 0, 0, 0, 36, 38, 40, 41, 42,
	43, 0, 0, 0, 5, 6, 7, 53, 8, 0,
	9, 10, 0, 44, 45, 46, 0, 0, 0, 25,
	0, 26, 0, 27, 0, 28, 29, 30, 54, 54,
	0, 47, 0, 49, 51, 35, 0, 37, 39, 55,
	53,
}

var wktTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	18, 19, 3, 3, 20,
}

var wktTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17,
}

var wktTok3 = [...]int{
	0,
}

var wktErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	wktDebug        = 0
	wktErrorVerbose = true
)

type wktLexer interface {
	Lex(lval *wktSymType) int
	Error(s string)
}

type wktParser interface {
	Parse(wktLexer) int
	Lookahead() int
}

type wktParserImpl struct {
	lval  wktSymType
	stack [wktInitialStackSize]wktSymType
	char  int
}

func (p *wktParserImpl) Lookahead() int {
	return p.char
}

func wktNewParser() wktParser {
	return &wktParserImpl{}
}

const wktFlag = -1000

func wktTokname(c int) string {
	if c >= 1 && c-1 < len(wktToknames) {
		if wktToknames[c-1] != "" {
			return wktToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func wktStatname(s int) string {
	if s >= 0 && s < len(wktStatenames) {
		if wktStatenames[s] != "" {
			return wktStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func wktErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !wktErrorVerbose {
		return "syntax error"
	}

	for _, e := range wktErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + wktTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := wktPact[state]
	for tok := TOKSTART; tok-1 < len(wktToknames); tok++ {
		if n := base + tok; n >= 0 && n < wktLast && wktChk[wktAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if wktDef[state] == -2 {
		i := 0
		for wktExca[i] != -1 || wktExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; wktExca[i] >= 0; i += 2 {
			tok := wktExca[i]
			if tok < TOKSTART || wktExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if wktExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += wktTokname(tok)
	}
	return res
}

func wktlex1(lex wktLexer, lval *wktSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = wktTok1[0]
		goto out
	}
	if char < len(wktTok1) {
		token = wktTok1[char]
		goto out
	}
	if char >= wktPrivate {
		if char < wktPrivate+len(wktTok2) {
			token = wktTok2[char-wktPrivate]
			goto out
		}
	}
	for i := 0; i < len(wktTok3); i += 2 {
		token = wktTok3[i+0]
		if token == char {
			token = wktTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = wktTok2[1] /* unknown char */
	}
	if wktDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", wktTokname(token), uint(char))
	}
	return char, token
}

func wktParse(wktlex wktLexer) int {
	return wktNewParser().Parse(wktlex)
}

func (wktrcvr *wktParserImpl) Parse(wktlex wktLexer) int {
	var wktn int
	var wktVAL wktSymType
	var wktDollar []wktSymType
	_ = wktDollar // silence set and not used
	wktS := wktrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	wktstate := 0
	wktrcvr.char = -1
	wkttoken := -1 // wktrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		wktstate = -1
		wktrcvr.char = -1
		wkttoken = -1
	}()
	wktp := -1
	goto wktstack

ret0:
	return 0

ret1:
	return 1

wktstack:
	/* put a state and value onto the stack */
	if wktDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", wktTokname(wkttoken), wktStatname(wktstate))
	}

	wktp++
	if wktp >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktS[wktp] = wktVAL
	wktS[wktp].yys = wktstate

wktnewstate:
	wktn = wktPact[wktstate]
	if wktn <= wktFlag {
		goto wktdefault /* simple state */
	}
	if wktrcvr.char < 0 {
		wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
	}
	wktn += wkttoken
	if wktn < 0 || wktn >= wktLast {
		goto wktdefault
	}
	wktn = wktAct[wktn]
	if wktChk[wktn] == wkttoken { /* valid shift */
		wktrcvr.char = -1
		wkttoken = -1
		wktVAL = wktrcvr.lval
		wktstate = wktn
		if Errflag > 0 {
			Errflag--
		}
		goto wktstack
	}

wktdefault:
	/* default state action */
	wktn = wktDef[wktstate]
	if wktn == -2 {
		if wktrcvr.char < 0 {
			wktrcvr.char, wkttoken = wktlex1(wktlex, &wktrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if wktExca[xi+0] == -1 && wktExca[xi+1] == wktstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			wktn = wktExca[xi+0]
			if wktn < 0 || wktn == wkttoken {
				break
			}
		}
		wktn = wktExca[xi+1]
		if wktn < 0 {
			goto ret0
		}
	}
	if wktn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			wktlex.Error(wktErrorMessage(wktstate, wkttoken))
			Nerrs++
			if wktDebug >= 1 {
				__yyfmt__.Printf("%s", wktStatname(wktstate))
				__yyfmt__.Printf(" saw %s\n", wktTokname(wkttoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for wktp >= 0 {
				wktn = wktPact[wktS[wktp].yys] + wktErrCode
				if wktn >= 0 && wktn < wktLast {
					wktstate = wktAct[wktn] /* simulate a shift of "error" */
					if wktChk[wktstate] == wktErrCode {
						goto wktstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if wktDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", wktS[wktp].yys)
				}
				wktp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if wktDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", wktTokname(wkttoken))
			}
			if wkttoken == wktEofCode {
				goto ret1
			}
			wktrcvr.char = -1
			wkttoken = -1
			goto wktnewstate /* try again in the same state */
		}
	}

	/* reduction by production wktn */
	if wktDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", wktn, wktStatname(wktstate))
	}

	wktnt := wktn
	wktpt := wktp
	_ = wktpt // guard against "declared and not used"

	wktp -= wktR2[wktn]
	// wktp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if wktp+1 >= len(wktS) {
		nyys := make([]wktSymType, len(wktS)*2)
		copy(nyys, wktS)
		wktS = nyys
	}
	wktVAL = wktS[wktp+1]

	/* consult goto table to find next state */
	wktn = wktR1[wktn]
	wktg := wktPgo[wktn]
	wktj := wktg + wktS[wktp].yys + 1

	if wktj >= wktLast {
		wktstate = wktAct[wktg]
	} else {
		wktstate = wktAct[wktj]
		if wktChk[wktstate] != -wktn {
			wktstate = wktAct[wktg]
		}
	}
	// dummy call; replaced with literal code
	switch wktnt {

	case 1:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:73
		{
			wktlex.(*wktLex).ret = wktDollar[1].geom
		}
	case 5:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:84
		{
			wktVAL.geom = geom.NewPointFlat(geom.XY, wktDollar[3].coordList)
		}
	case 6:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:88
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[3].coordList)
		}
	case 7:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:92
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[3].coordList)
		}
	case 8:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:96
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYM, wktDollar[3].coordList)
		}
	case 9:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:100
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZ, wktDollar[3].coordList)
		}
	case 10:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:104
		{
			wktVAL.geom = geom.NewPointFlat(geom.XYZM, wktDollar[3].coordList)
		}
	case 11:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:108
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XY)
		}
	case 12:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:112
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYM)
		}
	case 13:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:116
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZ)
		}
	case 14:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:120
		{
			wktVAL.geom = geom.NewPointEmpty(geom.XYZM)
		}
	case 15:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:126
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XY, wktDollar[2].coordList)
		}
	case 16:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:130
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 17:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:134
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 18:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:138
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYM, wktDollar[2].coordList)
		}
	case 19:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:142
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZ, wktDollar[2].coordList)
		}
	case 20:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:146
		{
			wktVAL.geom = geom.NewLineStringFlat(geom.XYZM, wktDollar[2].coordList)
		}
	case 21:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:150
		{
			wktVAL.geom = geom.NewLineString(geom.XY)
		}
	case 22:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:154
		{
			wktVAL.geom = geom.NewLineString(geom.XYM)
		}
	case 23:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:158
		{
			wktVAL.geom = geom.NewLineString(geom.XYZ)
		}
	case 24:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:162
		{
			wktVAL.geom = geom.NewLineString(geom.XYZM)
		}
	case 25:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:168
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XY, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 26:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:172
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZ, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 27:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:176
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZM, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 28:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:180
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYM, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 29:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:184
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZ, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 30:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:188
		{
			wktVAL.geom = geom.NewPolygonFlat(geom.XYZM, wktDollar[3].pair.flatCoords, wktDollar[3].pair.ends)
		}
	case 31:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:192
		{
			wktVAL.geom = geom.NewPolygon(geom.XY)
		}
	case 32:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:196
		{
			wktVAL.geom = geom.NewPolygon(geom.XYM)
		}
	case 33:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:200
		{
			wktVAL.geom = geom.NewPolygon(geom.XYZ)
		}
	case 34:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:204
		{
			wktVAL.geom = geom.NewPolygon(geom.XYZM)
		}
	case 35:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:210
		{
			wktVAL.pair = geomPair{append(wktDollar[1].pair.flatCoords, wktDollar[3].pair.flatCoords...), append(wktDollar[1].pair.ends, wktDollar[1].pair.ends[len(wktDollar[1].pair.ends)-1]+wktDollar[3].pair.ends[0])}
		}
	case 37:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:217
		{
			wktVAL.pair = geomPair{append(wktDollar[1].pair.flatCoords, wktDollar[3].pair.flatCoords...), append(wktDollar[1].pair.ends, wktDollar[1].pair.ends[len(wktDollar[1].pair.ends)-1]+wktDollar[3].pair.ends[0])}
		}
	case 39:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:224
		{
			wktVAL.pair = geomPair{append(wktDollar[1].pair.flatCoords, wktDollar[3].pair.flatCoords...), append(wktDollar[1].pair.ends, wktDollar[1].pair.ends[len(wktDollar[1].pair.ends)-1]+wktDollar[3].pair.ends[0])}
		}
	case 41:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:231
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 2) {
				return 1
			}
			wktVAL.pair = geomPair{wktDollar[1].coordList, []int{len(wktDollar[1].coordList)}}
		}
	case 42:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:240
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 3) {
				return 1
			}
			wktVAL.pair = geomPair{wktDollar[1].coordList, []int{len(wktDollar[1].coordList)}}
		}
	case 43:
		wktDollar = wktS[wktpt-1 : wktpt+1]
//line wkt.y:249
		{
			if !isValidPolygonRing(wktlex, wktDollar[1].coordList, 4) {
				return 1
			}
			wktVAL.pair = geomPair{wktDollar[1].coordList, []int{len(wktDollar[1].coordList)}}
		}
	case 44:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:258
		{
			if !isValidLinestring(wktlex, wktDollar[2].coordList, 2) {
				return 1
			}
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 45:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:267
		{
			if !isValidLinestring(wktlex, wktDollar[2].coordList, 3) {
				return 1
			}
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 46:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:276
		{
			if !isValidLinestring(wktlex, wktDollar[2].coordList, 4) {
				return 1
			}
			wktVAL.coordList = wktDollar[2].coordList
		}
	case 47:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:285
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 49:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:292
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 51:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:299
		{
			wktVAL.coordList = append(wktDollar[1].coordList, wktDollar[3].coordList...)
		}
	case 53:
		wktDollar = wktS[wktpt-2 : wktpt+1]
//line wkt.y:306
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord}
		}
	case 54:
		wktDollar = wktS[wktpt-3 : wktpt+1]
//line wkt.y:312
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord, wktDollar[3].coord}
		}
	case 55:
		wktDollar = wktS[wktpt-4 : wktpt+1]
//line wkt.y:318
		{
			wktVAL.coordList = []float64{wktDollar[1].coord, wktDollar[2].coord, wktDollar[3].coord, wktDollar[4].coord}
		}
	}
	goto wktstack /* stack new state and value */
}
