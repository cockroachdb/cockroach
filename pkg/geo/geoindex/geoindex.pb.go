// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: geo/geoindex/geoindex.proto

package geoindex

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Config is the required information to tune one instance of a geospatial
// index. Each SQL index should have its own copy of this and they can be
// different from index to index.
//
// At the moment, only one major indexing strategy is implemented (s2 cells),
// but room for future expansion is intentionally left here.
type Config struct {
	S2 *S2Config `protobuf:"bytes,1,opt,name=s2,proto3" json:"s2,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_geoindex_cee20324c4e86c2f, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(dst, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

// S2Config is the required information to tune one instance of an s2 cell
// backed geospatial index.
type S2Config struct {
	// MinLevel is the minimum cell level stored in the index. If left unset, it
	// defaults to WIP.
	MinLevel int32 `protobuf:"varint,1,opt,name=min_level,json=minLevel,proto3" json:"min_level,omitempty"`
	// MaxLevel is the maximum cell level stored in the index. If left unset, it
	// defaults to WIP.
	MaxLevel int32 `protobuf:"varint,2,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	// LevelMod is WIP. `MaxLevel-MinLevel` must be an exact multiple of LevelMod.
	// If left unset, it defaults to 1.
	LevelMod int32 `protobuf:"varint,3,opt,name=level_mod,json=levelMod,proto3" json:"level_mod,omitempty"`
	// MaxCells is a soft hint for the maximum number of entries used to store a
	// single geospatial object.
	//
	// WIP Add a hard limit which returns a SQL error if hit and rename this to
	// make it more clear that it's a soft limit.
	MaxCells int32 `protobuf:"varint,4,opt,name=max_cells,json=maxCells,proto3" json:"max_cells,omitempty"`
}

func (m *S2Config) Reset()         { *m = S2Config{} }
func (m *S2Config) String() string { return proto.CompactTextString(m) }
func (*S2Config) ProtoMessage()    {}
func (*S2Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_geoindex_cee20324c4e86c2f, []int{1}
}
func (m *S2Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *S2Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2Config.Merge(dst, src)
}
func (m *S2Config) XXX_Size() int {
	return m.Size()
}
func (m *S2Config) XXX_DiscardUnknown() {
	xxx_messageInfo_S2Config.DiscardUnknown(m)
}

var xxx_messageInfo_S2Config proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Config)(nil), "cockroach.geo.geoindex.Config")
	proto.RegisterType((*S2Config)(nil), "cockroach.geo.geoindex.S2Config")
}
func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.S2 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGeoindex(dAtA, i, uint64(m.S2.Size()))
		n1, err := m.S2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGeoindex(dAtA, i, uint64(m.MinLevel))
	}
	if m.MaxLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGeoindex(dAtA, i, uint64(m.MaxLevel))
	}
	if m.LevelMod != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGeoindex(dAtA, i, uint64(m.LevelMod))
	}
	if m.MaxCells != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGeoindex(dAtA, i, uint64(m.MaxCells))
	}
	return i, nil
}

func encodeVarintGeoindex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.S2 != nil {
		l = m.S2.Size()
		n += 1 + l + sovGeoindex(uint64(l))
	}
	return n
}

func (m *S2Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLevel != 0 {
		n += 1 + sovGeoindex(uint64(m.MinLevel))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovGeoindex(uint64(m.MaxLevel))
	}
	if m.LevelMod != 0 {
		n += 1 + sovGeoindex(uint64(m.LevelMod))
	}
	if m.MaxCells != 0 {
		n += 1 + sovGeoindex(uint64(m.MaxCells))
	}
	return n
}

func sovGeoindex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGeoindex(x uint64) (n int) {
	return sovGeoindex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Config) GetValue() interface{} {
	if this.S2 != nil {
		return this.S2
	}
	return nil
}

func (this *Config) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *S2Config:
		this.S2 = vt
	default:
		return false
	}
	return true
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeoindex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGeoindex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S2 == nil {
				m.S2 = &S2Config{}
			}
			if err := m.S2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGeoindex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeoindex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGeoindex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelMod", wireType)
			}
			m.LevelMod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelMod |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCells", wireType)
			}
			m.MaxCells = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCells |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGeoindex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGeoindex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGeoindex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGeoindex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGeoindex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGeoindex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGeoindex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGeoindex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGeoindex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGeoindex   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("geo/geoindex/geoindex.proto", fileDescriptor_geoindex_cee20324c4e86c2f)
}

var fileDescriptor_geoindex_cee20324c4e86c2f = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4f, 0xcd, 0xd7,
	0x4f, 0x4f, 0xcd, 0xcf, 0xcc, 0x4b, 0x49, 0xad, 0x80, 0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0xc4, 0x92, 0xf3, 0x93, 0xb3, 0x8b, 0xf2, 0x13, 0x93, 0x33, 0xf4, 0xd2, 0x53, 0xf3, 0xf5,
	0x60, 0xb2, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x25, 0xfa, 0x20, 0x16, 0x44, 0xb5, 0x92,
	0x03, 0x17, 0x9b, 0x73, 0x7e, 0x5e, 0x5a, 0x66, 0xba, 0x90, 0x01, 0x17, 0x53, 0xb1, 0x91, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x82, 0x1e, 0x76, 0x43, 0xf4, 0x82, 0x8d, 0x20, 0xaa, 0x83,
	0x98, 0x8a, 0x8d, 0xac, 0x58, 0x4e, 0x2c, 0x90, 0x67, 0x54, 0xaa, 0xe3, 0xe2, 0x80, 0x89, 0x0a,
	0x49, 0x73, 0x71, 0xe6, 0x66, 0xe6, 0xc5, 0xe7, 0xa4, 0x96, 0xa5, 0xe6, 0x80, 0x8d, 0x62, 0x0d,
	0xe2, 0xc8, 0xcd, 0xcc, 0xf3, 0x01, 0xf1, 0xc1, 0x92, 0x89, 0x15, 0x50, 0x49, 0x26, 0xa8, 0x64,
	0x62, 0x05, 0x5c, 0x12, 0x2c, 0x11, 0x9f, 0x9b, 0x9f, 0x22, 0xc1, 0x0c, 0x91, 0x04, 0x0b, 0xf8,
	0xe6, 0xa7, 0xc0, 0x74, 0x26, 0xa7, 0xe6, 0xe4, 0x14, 0x4b, 0xb0, 0xc0, 0x75, 0x3a, 0x83, 0xf8,
	0x4e, 0x5a, 0x27, 0x1e, 0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x8d,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x1c, 0x30, 0xe7, 0x27, 0xb1, 0x81, 0x3d, 0x6d, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xe3, 0xfb, 0xd0, 0x34, 0x41, 0x01, 0x00, 0x00,
}
