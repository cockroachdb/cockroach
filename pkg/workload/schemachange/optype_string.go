// Code generated by "stringer"; DO NOT EDIT.

package schemachange

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[insertRow-0]
	_ = x[selectStmt-1]
	_ = x[validate-2]
	_ = x[renameIndex-3]
	_ = x[renameSequence-4]
	_ = x[renameTable-5]
	_ = x[renameView-6]
	_ = x[alterDatabaseAddRegion-7]
	_ = x[alterDatabasePrimaryRegion-8]
	_ = x[alterDatabaseSurvivalGoal-9]
	_ = x[alterDatabaseAddSuperRegion-10]
	_ = x[alterDatabaseDropSuperRegion-11]
	_ = x[alterTableAddColumn-12]
	_ = x[alterTableAddConstraint-13]
	_ = x[alterTableAddConstraintForeignKey-14]
	_ = x[alterTableAddConstraintUnique-15]
	_ = x[alterTableAlterColumnType-16]
	_ = x[alterTableAlterPrimaryKey-17]
	_ = x[alterTableDropColumn-18]
	_ = x[alterTableDropColumnDefault-19]
	_ = x[alterTableDropConstraint-20]
	_ = x[alterTableDropNotNull-21]
	_ = x[alterTableDropStored-22]
	_ = x[alterTableLocality-23]
	_ = x[alterTableRenameColumn-24]
	_ = x[alterTableSetColumnDefault-25]
	_ = x[alterTableSetColumnNotNull-26]
	_ = x[alterTypeDropValue-27]
	_ = x[createTypeEnum-28]
	_ = x[createIndex-29]
	_ = x[createSchema-30]
	_ = x[createSequence-31]
	_ = x[createTable-32]
	_ = x[createTableAs-33]
	_ = x[createView-34]
	_ = x[dropIndex-35]
	_ = x[dropSchema-36]
	_ = x[dropSequence-37]
	_ = x[dropTable-38]
	_ = x[dropView-39]
}

func (i opType) String() string {
	switch i {
	case insertRow:
		return "insertRow"
	case selectStmt:
		return "selectStmt"
	case validate:
		return "validate"
	case renameIndex:
		return "renameIndex"
	case renameSequence:
		return "renameSequence"
	case renameTable:
		return "renameTable"
	case renameView:
		return "renameView"
	case alterDatabaseAddRegion:
		return "alterDatabaseAddRegion"
	case alterDatabasePrimaryRegion:
		return "alterDatabasePrimaryRegion"
	case alterDatabaseSurvivalGoal:
		return "alterDatabaseSurvivalGoal"
	case alterDatabaseAddSuperRegion:
		return "alterDatabaseAddSuperRegion"
	case alterDatabaseDropSuperRegion:
		return "alterDatabaseDropSuperRegion"
	case alterTableAddColumn:
		return "alterTableAddColumn"
	case alterTableAddConstraint:
		return "alterTableAddConstraint"
	case alterTableAddConstraintForeignKey:
		return "alterTableAddConstraintForeignKey"
	case alterTableAddConstraintUnique:
		return "alterTableAddConstraintUnique"
	case alterTableAlterColumnType:
		return "alterTableAlterColumnType"
	case alterTableAlterPrimaryKey:
		return "alterTableAlterPrimaryKey"
	case alterTableDropColumn:
		return "alterTableDropColumn"
	case alterTableDropColumnDefault:
		return "alterTableDropColumnDefault"
	case alterTableDropConstraint:
		return "alterTableDropConstraint"
	case alterTableDropNotNull:
		return "alterTableDropNotNull"
	case alterTableDropStored:
		return "alterTableDropStored"
	case alterTableLocality:
		return "alterTableLocality"
	case alterTableRenameColumn:
		return "alterTableRenameColumn"
	case alterTableSetColumnDefault:
		return "alterTableSetColumnDefault"
	case alterTableSetColumnNotNull:
		return "alterTableSetColumnNotNull"
	case alterTypeDropValue:
		return "alterTypeDropValue"
	case createTypeEnum:
		return "createTypeEnum"
	case createIndex:
		return "createIndex"
	case createSchema:
		return "createSchema"
	case createSequence:
		return "createSequence"
	case createTable:
		return "createTable"
	case createTableAs:
		return "createTableAs"
	case createView:
		return "createView"
	case dropIndex:
		return "dropIndex"
	case dropSchema:
		return "dropSchema"
	case dropSequence:
		return "dropSequence"
	case dropTable:
		return "dropTable"
	case dropView:
		return "dropView"
	default:
		return "opType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
