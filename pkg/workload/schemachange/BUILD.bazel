load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "schemachange",
    srcs = [
        "deck.go",
        "error_code_set.go",
        "error_screening.go",
        "operation_generator.go",
        "schemachange.go",
        "txstatus_string.go",
        "type_resolver.go",
        # ":gen-txstatus-stringer", # keep
        ":gen-optype-stringer", # keep
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/workload/schemachange",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/security",
        "//pkg/sql/catalog/colinfo",
        "//pkg/sql/parser",
        "//pkg/sql/pgwire/pgcode",
        "//pkg/sql/pgwire/pgerror",
        "//pkg/sql/rowenc",
        "//pkg/sql/sem/tree",
        "//pkg/sql/types",
        "//pkg/util/encoding",
        "//pkg/util/syncutil",
        "//pkg/util/timeutil",
        "//pkg/workload",
        "//pkg/workload/histogram",
        "@com_github_cockroachdb_errors//:errors",
        "@com_github_jackc_pgx//:pgx",
        "@com_github_lib_pq//oid",
        "@com_github_spf13_pflag//:pflag",
    ],
)

genrule(
    name = "gen-optype-stringer",
    srcs = [
        "operation_generator.go",
    ],
    outs = ["optype_string.go"],
    cmd = """
       env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
       $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type=opType $<
    """,
    tools = [
        "@go_sdk//:bin/go",
        "@org_golang_x_tools//cmd/stringer",
    ],
)

# genrule(
#     name = "gen-txstatus-stringer",
#     srcs = [
#         "schemachange.go",
#     ],
#     outs = ["txstatus_string.go"],
#     cmd = """
#        env PATH=`dirname $(location @go_sdk//:bin/go)` HOME=$(GENDIR) \
#        $(location @org_golang_x_tools//cmd/stringer:stringer) -output=$@ -type TxStatus $<
#     """,
#     tools = [
#         "@go_sdk//:bin/go",
#         "@org_golang_x_tools//cmd/stringer",
#     ],
# )
