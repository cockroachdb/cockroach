-- 2.1-sql-20 is a library of significant queries for benchmarking SQL execution
-- during the 2.1 release cycle. These are intended to be run against the TPC-H
-- dataset.
--
-- To load the data:
--   > CREATE DATABASE tpch;
--   > RESTORE workload.* FROM 'gs://cockroach-fixtures/workload/tpch/scalefactor=1/backup' WITH into_db = 'tpch';
--
-- To run the queries using the querybench workload:
--   $ workload run querybench --concurrency 1 --max-ops 20 --db tpch --query-file 2.1-sql-20
--
-- Table sizes:
--   supplier:    10,000 rows
--   customer:   150,000 rows
--   lineitem: 6,001,215 rows

-- COUNT(*)
SELECT COUNT(*) FROM lineitem;

-- COUNT(*) with filter on non-indexed column
SELECT COUNT(*) FROM lineitem WHERE l_linenumber = 1;

-- SELECT *
SELECT * FROM supplier;

-- SELECT * ordered on non-indexed column
SELECT * FROM supplier ORDER BY s_address;

-- GROUP BY with COUNT
SELECT l_linenumber, COUNT(*) FROM lineitem GROUP BY 1 ORDER BY 1;

-- GROUP BY with MAX
SELECT l_linenumber, MAX(l_quantity) FROM lineitem GROUP BY 1 ORDER BY 1;

-- GROUP BY with SUM
SELECT l_linenumber, SUM(l_quantity) FROM lineitem GROUP BY 1 ORDER BY 1;

-- DISTINCT
SELECT COUNT(DISTINCT l_suppkey) FROM lineitem;

-- Hash join
SELECT COUNT(*) FROM lineitem JOIN supplier ON l_suppkey = s_suppkey;

-- Merge join
SELECT COUNT(*) FROM lineitem@l_sk JOIN supplier@s_sk ON l_suppkey = s_suppkey;

-- Index join
SELECT COUNT(c_name) FROM customer@c_ck;

-- Filter with expression evaluation
SELECT COUNT(*) FROM lineitem WHERE l_discount * l_extendedprice > 10000;

-- Hash join with expression evaluation
SELECT COUNT(*) FROM supplier s1 JOIN supplier s2 ON s1.s_suppkey + 1 = s2.s_suppkey;
