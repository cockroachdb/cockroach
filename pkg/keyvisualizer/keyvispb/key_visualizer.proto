// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.


syntax = "proto3";
package cockroach.keyvisualizer.keyvispb;
option go_package = "keyvispb";

import "kv/kvserver/spanstats/spanstatspb/span_stats.proto";
import "roachpb/data.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";



message SaveBoundariesRequest {
  roachpb.TenantID tenant = 1;
  repeated roachpb.Span boundaries = 2;
}
message SaveBoundariesResponse {}

message GetSamplesRequest {
  roachpb.TenantID tenant = 1;

  // A node_id of 0 indicates the server should issue a fan-out to all nodes.
  int32 node_id = 2 [
    (gogoproto.customname) = "NodeID",
    (gogoproto.casttype) =
        "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"
  ];
}

message GetSamplesResponse {
  repeated kv.kvserver.spanstats.spanstatspb.Sample samples = 1;
}

message GetTenantRangesRequest {
  roachpb.TenantID tenant = 1;
}

message GetTenantRangesResponse {
  repeated roachpb.Span ranges = 1;
}

// The KeyVisualizer Service defines the RPCs that cross the Tenant / KV
// boundary. A spanstatspb.Sample contains the statistics collected on
// behalf of a tenant during a collection period.
service KeyVisualizer {

  // GetTenantRanges gets the tenant's ranges from KV as a set of roachpb.Spans
  rpc GetTenantRanges(GetTenantRangesRequest) returns
    (GetTenantRangesResponse) {}

  // SaveBoundaries tells KV about the key spans that the tenant wants
  // statistics for.
  rpc SaveBoundaries(SaveBoundariesRequest) returns (SaveBoundariesResponse) {}

  // GetSamples gets the tenant's collected statistics from KV. It
  // initiates a fan-out to all stores when GetSamplesRequest.node_id is set
  // to 0. Otherwise, it returns samples obtained from stores on the desired
  // node.
  rpc GetSamples(GetSamplesRequest) returns (GetSamplesResponse) {}

}
