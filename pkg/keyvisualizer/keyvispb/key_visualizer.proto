// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.


syntax = "proto3";
package cockroach.keyvisualizer.keyvispb;
option go_package = "keyvispb";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "util/hlc/timestamp.proto";
import "roachpb/data.proto";

message SpanStats {
  roachpb.Span span = 1;
  uint64 batch_requests = 2;
}

message Sample {
  util.hlc.Timestamp sample_time = 1;
  repeated SpanStats span_stats = 2;
}

message Boundaries {
  roachpb.TenantID tenant = 1;
  repeated roachpb.Span spans = 2;
}

message SaveBoundariesRequest {
  Boundaries boundaries = 1;
}
message SaveBoundariesResponse {}

message GetSamplesRequest {
  roachpb.TenantID tenant = 1;
  util.hlc.Timestamp start = 2 [(gogoproto.nullable) = false];
  util.hlc.Timestamp end = 3 [(gogoproto.nullable) = false];
}

message GetSamplesResponse {
  repeated Sample samples = 1;
}

message CommonSpan {
  uint64 id = 1;
  roachpb.Span span = 2;
}

message Bucket {
  util.hlc.Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  uint64 span_id = 2;
  uint64 batch_requests = 3;
}

message GetKeyVisSamplesRequest {
  util.hlc.Timestamp start = 1 [(gogoproto.nullable) = false];
  util.hlc.Timestamp end = 2 [(gogoproto.nullable) = false];
}

message GetKeyVisSamplesResponse {
  message KeyVisSample {
    util.hlc.Timestamp timestamp = 1 [(gogoproto.nullable) = false];
    repeated Bucket buckets = 2;
  }

  repeated CommonSpan spans = 1;
  repeated KeyVisSample samples = 2;
}

service KeyVisualizer {

  // SaveBoundaries is issued by the tenant. The responding node is
  // responsible for persisting these boundaries to a system table, so that
  // all stores may be notified about a tenant's updated collection boundaries
  // via rangefeed.
  rpc SaveBoundaries(SaveBoundariesRequest) returns (SaveBoundariesResponse) {}

  // GetSamplesFromAllNodes is issued by the tenant.
  rpc GetSamplesFromAllNodes(GetSamplesRequest) returns (GetSamplesResponse) {}

  // GetSamplesFromNode is issued as part of the fan-out to collect samples
  // from all stores across the cluster. It is issued by the node that serves
  // the `GetSamplesFromAllNodes` rpc.
  rpc GetSamplesFromNode(GetSamplesRequest) returns (GetSamplesResponse) {}

  // GetKeyVisSamples is issued by the Browser. It returns a space-efficient
  // representation of samples collected between `start` and `end`.
  rpc GetKeyVisSamples(GetKeyVisSamplesRequest) returns
    (GetKeyVisSamplesResponse) {
    option (google.api.http) = {
      get : "/_keyvis/v1/samples"
    };
  }
}
