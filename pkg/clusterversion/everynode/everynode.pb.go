// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: migration/everynode/everynode.proto

package everynode

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import errorspb "github.com/cockroachdb/errors/errorspb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HookKey int32

const (
	HookKey_Version_20_1   HookKey = 0
	HookKey_MigrateRaftLog HookKey = 1
	HookKey_Version_20_2   HookKey = 2
)

var HookKey_name = map[int32]string{
	0: "Version_20_1",
	1: "MigrateRaftLog",
	2: "Version_20_2",
}
var HookKey_value = map[string]int32{
	"Version_20_1":   0,
	"MigrateRaftLog": 1,
	"Version_20_2":   2,
}

func (x HookKey) String() string {
	return proto.EnumName(HookKey_name, int32(x))
}
func (HookKey) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_everynode_1aa65deb936ac311, []int{0}
}

type RunHookRequest struct {
	Key HookKey `protobuf:"varint,1,opt,name=key,proto3,enum=cockroach.everynode.HookKey" json:"key,omitempty"`
}

func (m *RunHookRequest) Reset()         { *m = RunHookRequest{} }
func (m *RunHookRequest) String() string { return proto.CompactTextString(m) }
func (*RunHookRequest) ProtoMessage()    {}
func (*RunHookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_everynode_1aa65deb936ac311, []int{0}
}
func (m *RunHookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunHookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *RunHookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunHookRequest.Merge(dst, src)
}
func (m *RunHookRequest) XXX_Size() int {
	return m.Size()
}
func (m *RunHookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunHookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunHookRequest proto.InternalMessageInfo

type RunHookResponse struct {
	Err *errorspb.EncodedError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *RunHookResponse) Reset()         { *m = RunHookResponse{} }
func (m *RunHookResponse) String() string { return proto.CompactTextString(m) }
func (*RunHookResponse) ProtoMessage()    {}
func (*RunHookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_everynode_1aa65deb936ac311, []int{1}
}
func (m *RunHookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RunHookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *RunHookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunHookResponse.Merge(dst, src)
}
func (m *RunHookResponse) XXX_Size() int {
	return m.Size()
}
func (m *RunHookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunHookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunHookResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RunHookRequest)(nil), "cockroach.everynode.RunHookRequest")
	proto.RegisterType((*RunHookResponse)(nil), "cockroach.everynode.RunHookResponse")
	proto.RegisterEnum("cockroach.everynode.HookKey", HookKey_name, HookKey_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HookClient is the client API for Hook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HookClient interface {
	RunHook(ctx context.Context, in *RunHookRequest, opts ...grpc.CallOption) (*RunHookResponse, error)
}

type hookClient struct {
	cc *grpc.ClientConn
}

func NewHookClient(cc *grpc.ClientConn) HookClient {
	return &hookClient{cc}
}

func (c *hookClient) RunHook(ctx context.Context, in *RunHookRequest, opts ...grpc.CallOption) (*RunHookResponse, error) {
	out := new(RunHookResponse)
	err := c.cc.Invoke(ctx, "/cockroach.everynode.Hook/RunHook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServer is the server API for Hook service.
type HookServer interface {
	RunHook(context.Context, *RunHookRequest) (*RunHookResponse, error)
}

func RegisterHookServer(s *grpc.Server, srv HookServer) {
	s.RegisterService(&_Hook_serviceDesc, srv)
}

func _Hook_RunHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServer).RunHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.everynode.Hook/RunHook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServer).RunHook(ctx, req.(*RunHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.everynode.Hook",
	HandlerType: (*HookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunHook",
			Handler:    _Hook_RunHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "migration/everynode/everynode.proto",
}

func (m *RunHookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunHookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEverynode(dAtA, i, uint64(m.Key))
	}
	return i, nil
}

func (m *RunHookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunHookResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEverynode(dAtA, i, uint64(m.Err.Size()))
		n1, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintEverynode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RunHookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovEverynode(uint64(m.Key))
	}
	return n
}

func (m *RunHookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovEverynode(uint64(l))
	}
	return n
}

func sovEverynode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEverynode(x uint64) (n int) {
	return sovEverynode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RunHookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEverynode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunHookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunHookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEverynode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (HookKey(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEverynode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEverynode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunHookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEverynode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunHookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunHookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEverynode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEverynode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errorspb.EncodedError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEverynode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEverynode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEverynode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEverynode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEverynode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEverynode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEverynode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEverynode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEverynode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEverynode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEverynode   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("migration/everynode/everynode.proto", fileDescriptor_everynode_1aa65deb936ac311)
}

var fileDescriptor_everynode_1aa65deb936ac311 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x13, 0x27, 0x0e, 0xa3, 0xcc, 0x12, 0x15, 0x64, 0x48, 0x18, 0x9b, 0x07, 0x51, 0xc8,
	0x34, 0x7e, 0x01, 0x15, 0x06, 0x82, 0x7a, 0xe9, 0x61, 0x07, 0x0f, 0x8e, 0xad, 0x7b, 0xad, 0xa5,
	0x98, 0xb7, 0xa6, 0x9d, 0xd0, 0x6f, 0xe1, 0xc7, 0xda, 0x71, 0xc7, 0x1d, 0xb5, 0xfd, 0x22, 0x92,
	0xb6, 0xd4, 0x3f, 0x0c, 0x6f, 0x4f, 0x9b, 0x5f, 0x7e, 0x79, 0xde, 0x97, 0xf5, 0x5e, 0x02, 0xdf,
	0x8c, 0x93, 0x00, 0x75, 0x1f, 0xde, 0xc0, 0xa4, 0x1a, 0xa7, 0xf0, 0x9d, 0x64, 0x64, 0x30, 0x41,
	0xbe, 0xeb, 0xa1, 0x17, 0x1a, 0x1c, 0x7b, 0xcf, 0xb2, 0x3e, 0x6a, 0xef, 0x83, 0x31, 0x68, 0xe2,
	0x68, 0xd2, 0x2f, 0x43, 0xc9, 0xb6, 0xf7, 0x7c, 0xf4, 0xb1, 0x88, 0x7d, 0x9b, 0xca, 0xbf, 0xdd,
	0x4b, 0xd6, 0x72, 0x67, 0xfa, 0x06, 0x31, 0x74, 0xe1, 0x75, 0x06, 0x71, 0xc2, 0x25, 0x6b, 0x84,
	0x90, 0x1e, 0xd0, 0x0e, 0x3d, 0x6e, 0xa9, 0x43, 0xb9, 0xe2, 0x05, 0x69, 0xf1, 0x5b, 0x48, 0x5d,
	0x0b, 0x76, 0x07, 0x6c, 0xa7, 0x36, 0xc4, 0x11, 0xea, 0x18, 0xb8, 0x62, 0x0d, 0x30, 0xa6, 0x50,
	0x6c, 0xa9, 0xce, 0x4f, 0x45, 0xd5, 0x4c, 0x0e, 0xb4, 0x87, 0x53, 0x98, 0x0e, 0xec, 0xb7, 0x6b,
	0xe1, 0x93, 0x2b, 0xd6, 0xac, 0xb4, 0xdc, 0x61, 0xdb, 0x43, 0x30, 0x71, 0x80, 0x7a, 0xa4, 0xce,
	0x46, 0xe7, 0x0e, 0xe1, 0x9c, 0xb5, 0xee, 0x8b, 0x75, 0x80, 0x3b, 0x7e, 0x4a, 0xee, 0xd0, 0x77,
	0xe8, 0x1f, 0x4a, 0x39, 0x6b, 0xea, 0x91, 0xad, 0x5b, 0x05, 0x1f, 0xb2, 0x66, 0xd5, 0x88, 0xf7,
	0x56, 0xf6, 0xff, 0x3d, 0x71, 0xfb, 0xe8, 0x7f, 0xa8, 0x1c, 0xaa, 0x4b, 0xae, 0x4f, 0xe7, 0x9f,
	0x82, 0xcc, 0x33, 0x41, 0x17, 0x99, 0xa0, 0xcb, 0x4c, 0xd0, 0x8f, 0x4c, 0xd0, 0xf7, 0x5c, 0x90,
	0x45, 0x2e, 0xc8, 0x32, 0x17, 0xe4, 0x61, 0xb3, 0xbe, 0x3e, 0xd9, 0x28, 0xf6, 0x7b, 0xf1, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x06, 0x84, 0xce, 0xa6, 0xc8, 0x01, 0x00, 0x00,
}
