// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterversion/engineupgrade/engineupgrade.proto

package engineupgrade

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import errorspb "github.com/cockroachdb/errors/errorspb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Version represents the current version this node is on.
// TODO(#long-running-migrations): should this read off clusterversions instead? If so, we can delete this
// and use that instead.
type Version int32

const (
	// Unset is the reserved 0 value for unknown unset state.
	// For new nodes, this should "leapfrog" to the maximum current version
	// in the cluster.
	Version_Unset        Version = 0
	Version_Version_20_1 Version = 1
	// TODO(#long-running-migrations): this and below should be replaced.
	Version_ExampleUpgrade Version = 2
)

var Version_name = map[int32]string{
	0: "Unset",
	1: "Version_20_1",
	2: "ExampleUpgrade",
}
var Version_value = map[string]int32{
	"Unset":          0,
	"Version_20_1":   1,
	"ExampleUpgrade": 2,
}

func (x Version) String() string {
	return proto.EnumName(Version_name, int32(x))
}
func (Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{0}
}

type UpgradeEnginesRequest struct {
	TargetVersion Version `protobuf:"varint,1,opt,name=target_version,json=targetVersion,proto3,enum=cockroach.engineupgrade.Version" json:"target_version,omitempty"`
}

func (m *UpgradeEnginesRequest) Reset()         { *m = UpgradeEnginesRequest{} }
func (m *UpgradeEnginesRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeEnginesRequest) ProtoMessage()    {}
func (*UpgradeEnginesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{0}
}
func (m *UpgradeEnginesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeEnginesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UpgradeEnginesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeEnginesRequest.Merge(dst, src)
}
func (m *UpgradeEnginesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeEnginesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeEnginesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeEnginesRequest proto.InternalMessageInfo

type UpgradeEnginesResponse struct {
	Err *errorspb.EncodedError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *UpgradeEnginesResponse) Reset()         { *m = UpgradeEnginesResponse{} }
func (m *UpgradeEnginesResponse) String() string { return proto.CompactTextString(m) }
func (*UpgradeEnginesResponse) ProtoMessage()    {}
func (*UpgradeEnginesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{1}
}
func (m *UpgradeEnginesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeEnginesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UpgradeEnginesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeEnginesResponse.Merge(dst, src)
}
func (m *UpgradeEnginesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeEnginesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeEnginesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeEnginesResponse proto.InternalMessageInfo

type StatusRequest struct {
}

func (m *StatusRequest) Reset()         { *m = StatusRequest{} }
func (m *StatusRequest) String() string { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()    {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{2}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

type EngineState struct {
	// CurrentVersion is the highest version into which all engines on the node have
	// successfully upgraded. The node may be in the process of upgrading its engines
	// to a higher version, see below.
	// This should always be <= target_version.
	CurrentVersion Version `protobuf:"varint,1,opt,name=current_version,json=currentVersion,proto3,enum=cockroach.engineupgrade.Version" json:"current_version,omitempty"`
	// TargetVersion represents the version the node is trying to upgrade to.
	TargetVersion Version `protobuf:"varint,2,opt,name=target_version,json=targetVersion,proto3,enum=cockroach.engineupgrade.Version" json:"target_version,omitempty"`
}

func (m *EngineState) Reset()         { *m = EngineState{} }
func (m *EngineState) String() string { return proto.CompactTextString(m) }
func (*EngineState) ProtoMessage()    {}
func (*EngineState) Descriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{3}
}
func (m *EngineState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EngineState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *EngineState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EngineState.Merge(dst, src)
}
func (m *EngineState) XXX_Size() int {
	return m.Size()
}
func (m *EngineState) XXX_DiscardUnknown() {
	xxx_messageInfo_EngineState.DiscardUnknown(m)
}

var xxx_messageInfo_EngineState proto.InternalMessageInfo

type StatusResponse struct {
	EngineStates []*EngineState `protobuf:"bytes,1,rep,name=engine_states,json=engineStates,proto3" json:"engine_states,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_engineupgrade_007058bd70f5825d, []int{4}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(dst, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpgradeEnginesRequest)(nil), "cockroach.engineupgrade.UpgradeEnginesRequest")
	proto.RegisterType((*UpgradeEnginesResponse)(nil), "cockroach.engineupgrade.UpgradeEnginesResponse")
	proto.RegisterType((*StatusRequest)(nil), "cockroach.engineupgrade.StatusRequest")
	proto.RegisterType((*EngineState)(nil), "cockroach.engineupgrade.EngineState")
	proto.RegisterType((*StatusResponse)(nil), "cockroach.engineupgrade.StatusResponse")
	proto.RegisterEnum("cockroach.engineupgrade.Version", Version_name, Version_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeUpgraderClient is the client API for NodeUpgrader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeUpgraderClient interface {
	// UpgradeEngines to run all upgrades to a target version for all engines on the
	// given node. This can potentially be a long-running RPC, which only returns when
	// all the upgrades have been run..
	//
	// Once this RPC is called, the upgrade could happen at any point on any node without
	// further instruction, even if the RPC call returns a failure.
	//
	// A maximum of one if these upgrades should run at any given time - if
	// it is requested multiple times, it will block until the previous upgrade
	// has completed.
	//
	// If the engines already have the version requested, no operation will be
	// done.
	UpgradeEngines(ctx context.Context, in *UpgradeEnginesRequest, opts ...grpc.CallOption) (*UpgradeEnginesResponse, error)
	// Status returns version info about the current node.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type nodeUpgraderClient struct {
	cc *grpc.ClientConn
}

func NewNodeUpgraderClient(cc *grpc.ClientConn) NodeUpgraderClient {
	return &nodeUpgraderClient{cc}
}

func (c *nodeUpgraderClient) UpgradeEngines(ctx context.Context, in *UpgradeEnginesRequest, opts ...grpc.CallOption) (*UpgradeEnginesResponse, error) {
	out := new(UpgradeEnginesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.engineupgrade.NodeUpgrader/UpgradeEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeUpgraderClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/cockroach.engineupgrade.NodeUpgrader/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeUpgraderServer is the server API for NodeUpgrader service.
type NodeUpgraderServer interface {
	// UpgradeEngines to run all upgrades to a target version for all engines on the
	// given node. This can potentially be a long-running RPC, which only returns when
	// all the upgrades have been run..
	//
	// Once this RPC is called, the upgrade could happen at any point on any node without
	// further instruction, even if the RPC call returns a failure.
	//
	// A maximum of one if these upgrades should run at any given time - if
	// it is requested multiple times, it will block until the previous upgrade
	// has completed.
	//
	// If the engines already have the version requested, no operation will be
	// done.
	UpgradeEngines(context.Context, *UpgradeEnginesRequest) (*UpgradeEnginesResponse, error)
	// Status returns version info about the current node.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterNodeUpgraderServer(s *grpc.Server, srv NodeUpgraderServer) {
	s.RegisterService(&_NodeUpgrader_serviceDesc, srv)
}

func _NodeUpgrader_UpgradeEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeEnginesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeUpgraderServer).UpgradeEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.engineupgrade.NodeUpgrader/UpgradeEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeUpgraderServer).UpgradeEngines(ctx, req.(*UpgradeEnginesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeUpgrader_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeUpgraderServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.engineupgrade.NodeUpgrader/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeUpgraderServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeUpgrader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.engineupgrade.NodeUpgrader",
	HandlerType: (*NodeUpgraderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeEngines",
			Handler:    _NodeUpgrader_UpgradeEngines_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _NodeUpgrader_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterversion/engineupgrade/engineupgrade.proto",
}

func (m *UpgradeEnginesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeEnginesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TargetVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEngineupgrade(dAtA, i, uint64(m.TargetVersion))
	}
	return i, nil
}

func (m *UpgradeEnginesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeEnginesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEngineupgrade(dAtA, i, uint64(m.Err.Size()))
		n1, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EngineState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EngineState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEngineupgrade(dAtA, i, uint64(m.CurrentVersion))
	}
	if m.TargetVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEngineupgrade(dAtA, i, uint64(m.TargetVersion))
	}
	return i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EngineStates) > 0 {
		for _, msg := range m.EngineStates {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEngineupgrade(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEngineupgrade(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpgradeEnginesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetVersion != 0 {
		n += 1 + sovEngineupgrade(uint64(m.TargetVersion))
	}
	return n
}

func (m *UpgradeEnginesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovEngineupgrade(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EngineState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentVersion != 0 {
		n += 1 + sovEngineupgrade(uint64(m.CurrentVersion))
	}
	if m.TargetVersion != 0 {
		n += 1 + sovEngineupgrade(uint64(m.TargetVersion))
	}
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EngineStates) > 0 {
		for _, e := range m.EngineStates {
			l = e.Size()
			n += 1 + l + sovEngineupgrade(uint64(l))
		}
	}
	return n
}

func sovEngineupgrade(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEngineupgrade(x uint64) (n int) {
	return sovEngineupgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpgradeEnginesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeEnginesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeEnginesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			m.TargetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetVersion |= (Version(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngineupgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeEnginesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeEnginesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeEnginesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errorspb.EncodedError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngineupgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEngineupgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EngineState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EngineState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EngineState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			m.CurrentVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVersion |= (Version(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			m.TargetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetVersion |= (Version(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEngineupgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngineStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EngineStates = append(m.EngineStates, &EngineState{})
			if err := m.EngineStates[len(m.EngineStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngineupgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngineupgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngineupgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngineupgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngineupgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEngineupgrade
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEngineupgrade
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEngineupgrade(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEngineupgrade = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngineupgrade   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("clusterversion/engineupgrade/engineupgrade.proto", fileDescriptor_engineupgrade_007058bd70f5825d)
}

var fileDescriptor_engineupgrade_007058bd70f5825d = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x8f, 0x94, 0x40,
	0x10, 0xa5, 0x77, 0xe3, 0x1a, 0x6b, 0x06, 0x96, 0x74, 0x5c, 0xdd, 0x70, 0xe8, 0x4c, 0x88, 0xd1,
	0x8d, 0x07, 0x58, 0xf1, 0xe6, 0xd1, 0x84, 0x98, 0x4d, 0x8c, 0x07, 0xcc, 0x7a, 0x70, 0x0f, 0xc8,
	0x42, 0x05, 0x37, 0x8e, 0x34, 0x76, 0x37, 0xc6, 0x9f, 0xe1, 0x5f, 0xf0, 0xdf, 0xcc, 0x71, 0x8e,
	0x73, 0x1c, 0x99, 0x3f, 0x62, 0xa0, 0x9b, 0x28, 0x66, 0x88, 0x1f, 0xb7, 0x7a, 0x35, 0xef, 0xbd,
	0x7e, 0x55, 0x35, 0xc0, 0x79, 0xbe, 0x6c, 0xa4, 0x42, 0xf1, 0x19, 0x85, 0xbc, 0xe1, 0x55, 0x88,
	0x55, 0x79, 0x53, 0x61, 0x53, 0x97, 0x22, 0x2b, 0x70, 0x8c, 0x82, 0x5a, 0x70, 0xc5, 0xe9, 0xfd,
	0x9c, 0xe7, 0x1f, 0x04, 0xcf, 0xf2, 0xf7, 0xc1, 0xe8, 0x67, 0xef, 0x04, 0x85, 0xe0, 0x42, 0xd6,
	0xd7, 0xa1, 0x2e, 0x34, 0xdf, 0xbb, 0x5b, 0xf2, 0x92, 0xf7, 0x65, 0xd8, 0x55, 0xba, 0xeb, 0xbf,
	0x83, 0x93, 0x4b, 0xad, 0x8b, 0x7b, 0x13, 0x99, 0xe0, 0xa7, 0x06, 0xa5, 0xa2, 0x2f, 0xc0, 0x51,
	0x99, 0x28, 0x51, 0xa5, 0x26, 0xd2, 0x29, 0x59, 0x90, 0x33, 0x27, 0x5a, 0x04, 0x13, 0xef, 0x06,
	0x6f, 0x34, 0x2f, 0xb1, 0xb5, 0xce, 0x40, 0xff, 0x25, 0xdc, 0xfb, 0xfd, 0x05, 0x59, 0xf3, 0x4a,
	0x22, 0x8d, 0xe0, 0x10, 0x85, 0xe8, 0x7d, 0x67, 0x63, 0x5f, 0x33, 0x40, 0x10, 0x57, 0x39, 0x2f,
	0xb0, 0x88, 0x3b, 0x9c, 0x74, 0x64, 0xff, 0x18, 0xec, 0xd7, 0x2a, 0x53, 0xcd, 0x90, 0xd3, 0xff,
	0x46, 0x60, 0xa6, 0x8d, 0xbb, 0x3e, 0xd2, 0x0b, 0x38, 0xce, 0x1b, 0x21, 0xb0, 0xfa, 0xf7, 0xe0,
	0x8e, 0x11, 0x1a, 0xbc, 0x67, 0x05, 0x07, 0xff, 0xb7, 0x82, 0x2b, 0x70, 0x86, 0xd0, 0x66, 0xf4,
	0x0b, 0xb0, 0xb5, 0x32, 0x95, 0x5d, 0x6a, 0x79, 0x4a, 0x16, 0x87, 0x67, 0xb3, 0xe8, 0xc1, 0xa4,
	0xf3, 0x2f, 0x23, 0x26, 0x73, 0xfc, 0x09, 0xe4, 0xe3, 0x67, 0x70, 0x7b, 0x08, 0x7c, 0x07, 0x6e,
	0x5d, 0x56, 0x12, 0x95, 0x6b, 0x51, 0x17, 0xe6, 0xa6, 0x9b, 0x46, 0xe7, 0xe9, 0x13, 0x97, 0x50,
	0x0a, 0x4e, 0xfc, 0x25, 0xfb, 0x58, 0x2f, 0xd1, 0x9c, 0xc3, 0x3d, 0x88, 0xb6, 0x04, 0xe6, 0xaf,
	0x78, 0x31, 0x74, 0x04, 0x95, 0xe0, 0x8c, 0x8f, 0x45, 0x83, 0xc9, 0x48, 0x7b, 0xff, 0x37, 0x5e,
	0xf8, 0xd7, 0x7c, 0xbd, 0x0a, 0xdf, 0xa2, 0x57, 0x70, 0xa4, 0xd7, 0x43, 0x1f, 0x4e, 0x8a, 0x47,
	0x47, 0xf7, 0x1e, 0xfd, 0x91, 0x37, 0x98, 0x3f, 0x0f, 0x57, 0xdf, 0x99, 0xb5, 0x6a, 0x19, 0x59,
	0xb7, 0x8c, 0x6c, 0x5a, 0x46, 0xb6, 0x2d, 0x23, 0x5f, 0x77, 0xcc, 0x5a, 0xef, 0x98, 0xb5, 0xd9,
	0x31, 0xeb, 0xad, 0x3d, 0x72, 0xb8, 0x3e, 0xea, 0x3f, 0x8c, 0xa7, 0x3f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x63, 0x1f, 0x0a, 0x52, 0x92, 0x03, 0x00, 0x00,
}
