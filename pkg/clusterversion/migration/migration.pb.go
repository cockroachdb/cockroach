// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clusterversion/migration/migration.proto

package migration

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import clusterversion "github.com/cockroachdb/cockroach/pkg/clusterversion"
import errorspb "github.com/cockroachdb/errors/errorspb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ForwardNodeVersionRequest struct {
	Version clusterversion.ClusterVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version"`
}

func (m *ForwardNodeVersionRequest) Reset()         { *m = ForwardNodeVersionRequest{} }
func (m *ForwardNodeVersionRequest) String() string { return proto.CompactTextString(m) }
func (*ForwardNodeVersionRequest) ProtoMessage()    {}
func (*ForwardNodeVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_migration_c37d1ead68dc86d4, []int{0}
}
func (m *ForwardNodeVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardNodeVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ForwardNodeVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardNodeVersionRequest.Merge(dst, src)
}
func (m *ForwardNodeVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForwardNodeVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardNodeVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardNodeVersionRequest proto.InternalMessageInfo

type ForwardNodeVersionResponse struct {
	Err *errorspb.EncodedError `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (m *ForwardNodeVersionResponse) Reset()         { *m = ForwardNodeVersionResponse{} }
func (m *ForwardNodeVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ForwardNodeVersionResponse) ProtoMessage()    {}
func (*ForwardNodeVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_migration_c37d1ead68dc86d4, []int{1}
}
func (m *ForwardNodeVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardNodeVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ForwardNodeVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardNodeVersionResponse.Merge(dst, src)
}
func (m *ForwardNodeVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForwardNodeVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardNodeVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardNodeVersionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ForwardNodeVersionRequest)(nil), "cockroach.clusterversion.migration.ForwardNodeVersionRequest")
	proto.RegisterType((*ForwardNodeVersionResponse)(nil), "cockroach.clusterversion.migration.ForwardNodeVersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterVersionClient is the client API for ClusterVersion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterVersionClient interface {
	ForwardNodeVersion(ctx context.Context, in *ForwardNodeVersionRequest, opts ...grpc.CallOption) (*ForwardNodeVersionResponse, error)
}

type clusterVersionClient struct {
	cc *grpc.ClientConn
}

func NewClusterVersionClient(cc *grpc.ClientConn) ClusterVersionClient {
	return &clusterVersionClient{cc}
}

func (c *clusterVersionClient) ForwardNodeVersion(ctx context.Context, in *ForwardNodeVersionRequest, opts ...grpc.CallOption) (*ForwardNodeVersionResponse, error) {
	out := new(ForwardNodeVersionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.clusterversion.migration.ClusterVersion/ForwardNodeVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterVersionServer is the server API for ClusterVersion service.
type ClusterVersionServer interface {
	ForwardNodeVersion(context.Context, *ForwardNodeVersionRequest) (*ForwardNodeVersionResponse, error)
}

func RegisterClusterVersionServer(s *grpc.Server, srv ClusterVersionServer) {
	s.RegisterService(&_ClusterVersion_serviceDesc, srv)
}

func _ClusterVersion_ForwardNodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardNodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterVersionServer).ForwardNodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.clusterversion.migration.ClusterVersion/ForwardNodeVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterVersionServer).ForwardNodeVersion(ctx, req.(*ForwardNodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterVersion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.clusterversion.migration.ClusterVersion",
	HandlerType: (*ClusterVersionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardNodeVersion",
			Handler:    _ClusterVersion_ForwardNodeVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterversion/migration/migration.proto",
}

func (m *ForwardNodeVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardNodeVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMigration(dAtA, i, uint64(m.Version.Size()))
	n1, err := m.Version.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ForwardNodeVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardNodeVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMigration(dAtA, i, uint64(m.Err.Size()))
		n2, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintMigration(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ForwardNodeVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Version.Size()
	n += 1 + l + sovMigration(uint64(l))
	return n
}

func (m *ForwardNodeVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovMigration(uint64(l))
	}
	return n
}

func sovMigration(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMigration(x uint64) (n int) {
	return sovMigration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForwardNodeVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardNodeVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardNodeVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMigration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardNodeVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardNodeVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardNodeVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMigration
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errorspb.EncodedError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMigration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMigration
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMigration
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMigration(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMigration = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMigration   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("clusterversion/migration/migration.proto", fileDescriptor_migration_c37d1ead68dc86d4)
}

var fileDescriptor_migration_c37d1ead68dc86d4 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0xce, 0x29, 0x2d,
	0x2e, 0x49, 0x2d, 0x2a, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0xd3, 0xcf, 0xcd, 0x4c, 0x2f, 0x4a,
	0x2c, 0x41, 0x61, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x29, 0x25, 0xe7, 0x27, 0x67, 0x17,
	0xe5, 0x27, 0x26, 0x67, 0xe8, 0xa1, 0xea, 0xd1, 0x83, 0xab, 0x94, 0x12, 0x4d, 0x2d, 0x2a, 0xca,
	0x2f, 0x2a, 0x2e, 0x48, 0xd2, 0x87, 0x30, 0x20, 0x5a, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1,
	0x4c, 0x7d, 0x10, 0x0b, 0x2a, 0xaa, 0x82, 0x66, 0x35, 0x94, 0x1b, 0x0f, 0x33, 0x16, 0xac, 0x4a,
	0x29, 0x9a, 0x4b, 0xd2, 0x2d, 0xbf, 0xa8, 0x3c, 0xb1, 0x28, 0xc5, 0x2f, 0x3f, 0x25, 0x35, 0x0c,
	0x22, 0x17, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x64, 0xc7, 0xc5, 0x0e, 0x55, 0x2d, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa7, 0x87, 0x70, 0x65, 0x52, 0x62, 0x71, 0xaa, 0x9e, 0x33,
	0xc4, 0x50, 0xa8, 0x3e, 0x27, 0x96, 0x13, 0xf7, 0xe4, 0x19, 0x82, 0x60, 0x9a, 0x94, 0x02, 0xb8,
	0xa4, 0xb0, 0x19, 0x5e, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0x64, 0xc4, 0xc5, 0x9c, 0x5a, 0x54,
	0x04, 0x35, 0x59, 0x01, 0xc9, 0x64, 0x98, 0x2f, 0xf5, 0x5c, 0xf3, 0x92, 0xf3, 0x53, 0x52, 0x53,
	0x5c, 0x41, 0xfc, 0x20, 0x90, 0x62, 0xa3, 0x15, 0x8c, 0x5c, 0x7c, 0xa8, 0x76, 0x0a, 0x4d, 0x65,
	0xe4, 0x12, 0xc2, 0xb4, 0x45, 0xc8, 0x56, 0x8f, 0x70, 0x80, 0xea, 0xe1, 0xf4, 0xba, 0x94, 0x1d,
	0xb9, 0xda, 0x21, 0x9e, 0x53, 0x62, 0x70, 0xd2, 0x3e, 0xf1, 0x50, 0x8e, 0xe1, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x6f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63,
	0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x84, 0x9b, 0x94, 0xc4,
	0x06, 0x8e, 0x0d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xf8, 0x1b, 0x1c, 0x30, 0x02,
	0x00, 0x00,
}
