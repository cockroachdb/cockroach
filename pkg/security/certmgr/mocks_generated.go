// Code generated by MockGen. DO NOT EDIT.
// Source: cert.go

// Package certmgr is a generated GoMock package.
package certmgr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCert is a mock of Cert interface.
type MockCert struct {
	ctrl     *gomock.Controller
	recorder *MockCertMockRecorder
}

// MockCertMockRecorder is the mock recorder for MockCert.
type MockCertMockRecorder struct {
	mock *MockCert
}

// NewMockCert creates a new mock instance.
func NewMockCert(ctrl *gomock.Controller) *MockCert {
	mock := &MockCert{ctrl: ctrl}
	mock.recorder = &MockCertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCert) EXPECT() *MockCertMockRecorder {
	return m.recorder
}

// ClearErr mocks base method.
func (m *MockCert) ClearErr() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearErr")
}

// ClearErr indicates an expected call of ClearErr.
func (mr *MockCertMockRecorder) ClearErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearErr", reflect.TypeOf((*MockCert)(nil).ClearErr))
}

// Err mocks base method.
func (m *MockCert) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCertMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCert)(nil).Err))
}

// Reload mocks base method.
func (m *MockCert) Reload(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reload", ctx)
}

// Reload indicates an expected call of Reload.
func (mr *MockCertMockRecorder) Reload(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockCert)(nil).Reload), ctx)
}
