// Code generated by go-bindata. DO NOT EDIT.
// sources:
// test_certs/ca-client-tenant.crt (1.111kB)
// test_certs/ca-client-tenant.key (1.675kB)
// test_certs/ca-server-tenant.crt (1.111kB)
// test_certs/ca-server-tenant.key (1.679kB)
// test_certs/ca.crt (1.111kB)
// test_certs/ca.key (1.675kB)
// test_certs/client-tenant.123456789.crt (1.107kB)
// test_certs/client-tenant.123456789.key (1.675kB)
// test_certs/client.root.crt (1.099kB)
// test_certs/client.root.key (1.679kB)
// test_certs/client.testuser.crt (1.107kB)
// test_certs/client.testuser.key (1.675kB)
// test_certs/node.crt (1.188kB)
// test_certs/node.key (1.675kB)
// test_certs/server-tenant.crt (1.155kB)
// test_certs/server-tenant.key (1.679kB)

package securitytest

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaClientTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xc9\xb2\xaa\x48\x18\x84\xf7\x3c\x45\xef\x89\x0e\x10\x81\x03\x8b\xbb\xa8\xa2\x0a\x2c\x99\xac\x92\xd1\x9d\x22\x83\xa0\x88\x08\x32\x3c\x7d\xc7\x39\x1d\xd1\xbd\xb8\xf7\x5f\x7e\x8b\x8c\x3f\x32\x33\xf2\xef\xef\x83\xd8\x22\xde\x5f\x06\x66\x01\x31\x89\x01\x02\xfc\x43\x39\x97\x10\x04\x6b\xc3\x00\xb9\x5a\x82\x89\x40\x50\x12\x4a\x66\x5d\xac\xd7\x34\xb5\xc6\xfc\xc1\x33\x6c\x61\x5c\xa9\x6d\x0d\x3c\x58\x36\xaf\xaa\xb9\x59\xfa\x24\x42\x40\xdf\x26\x40\xa0\xe7\x5c\x46\x26\x0c\x52\x14\x51\x6a\xe3\xe9\x8e\x2e\x92\xd7\x67\x0f\xbd\x4a\xa5\x72\x36\x03\x10\xc0\xd2\x8b\x20\x70\x03\x84\xbd\x4f\x2a\x0d\xcb\x45\x32\xeb\xb3\x01\x11\x0d\x40\x6e\x4e\xe2\xc2\xb9\x08\x6c\xdd\x20\x9c\x7c\x04\x14\x17\x79\x67\x73\x12\xd7\x1f\x56\xd3\xff\x98\x6b\xbc\x67\x5c\x03\xfa\xaf\xd8\x33\x30\xc2\xff\xc5\xb8\x33\xc2\x91\x0b\x5d\x0b\x6c\x42\x0c\x66\xd7\xa5\x92\x5e\x9f\xb7\xfb\x4f\x1a\x7b\x4f\x82\x3d\xe8\x12\x02\xc9\x6f\xef\x63\x13\x00\xdf\x00\x54\x03\xdf\x1e\x40\xa3\xb4\x0d\x40\x31\x78\xd3\x47\x3e\x74\x1d\xdf\x95\xa2\x23\xdf\xa4\xa4\x50\xe3\x21\x15\xe8\x80\x19\x53\xe8\xcb\xcf\x37\x42\xbf\xc9\x7c\x7d\xd1\xdb\xd0\x52\xb7\x17\x1e\x8b\xa9\xc6\x81\xdd\xe0\xe2\x0a\x76\xca\x36\x7b\x3b\xab\xdf\x1e\x57\x87\xbd\xce\xe1\x7d\xdf\x08\x85\xf8\x38\x56\x2c\x1d\x97\xf9\xb8\xc8\xbd\x3b\xd7\xc9\xd8\xf3\x38\xef\x90\x97\x2e\xa7\xed\x4d\xde\x25\x0a\xeb\xb9\x39\xca\xde\xd9\x33\xdf\x4d\x44\x8b\x8a\xfd\x5e\xb0\x2e\xfa\xfc\x0c\xa2\x53\xdc\x1e\x43\xf1\x31\x27\xc2\x92\x91\x92\xee\xcd\x54\xbc\x9d\x35\xf1\x7e\x82\xbb\x67\x85\xf8\x2b\xcd\xd1\x9d\x65\x3a\x4b\xb8\x87\x7c\x00\x54\x7c\xb1\x03\xba\x6b\xf2\x57\xff\x51\x27\xa0\x01\x71\x9e\x96\xd2\x38\x51\x20\xd4\xd2\x36\x2b\x9c\x11\x0c\x79\x74\x73\x8b\xc2\x3e\xc6\xea\xae\x3f\xd6\xb5\x17\xf0\x8d\xf5\xd6\x0e\x5b\xce\x7d\xd8\x04\x25\x69\xc7\x37\x9d\xed\x9c\x9d\x7d\xf8\x5e\x2a\xcb\xc4\xef\xc3\x73\xd0\xd5\x46\xf9\xac\x04\xf0\x4f\x78\x75\xbb\x46\x96\xd9\xe5\xee\x4e\x75\x9f\xad\x2a\xab\xb3\x29\x15\x74\x3e\x32\xb8\xa2\x2c\x15\x7d\x29\xd4\x8c\x3d\x78\xdb\x8f\x42\x66\xd3\xf4\x08\x30\x39\x74\x1f\xbf\x6b\xb6\x55\x3f\x11\x04\x28\x80\xcf\x25\x9d\xf6\x08\xf8\xdf\x51\xee\xa8\x06\x41\xa1\x61\x08\x5c\x83\x03\x23\x9d\x70\x99\xa2\x88\x89\x01\xa0\x3b\x01\x82\x72\x82\x25\x86\xc2\x77\x2b\x83\x3f\xb4\xef\x27\x3e\x0c\x20\xcb\x87\x45\xec\x64\xce\x79\xcb\x5f\x9f\x31\x3b\xd9\x0b\x7f\x97\x5e\xe6\xf6\x92\xe8\xbe\x09\x4b\xf2\xbe\xee\x95\xaf\x38\xac\xcb\xad\xb6\x02\x4d\x9b\x6d\x61\xb1\xda\x73\x66\xcc\xc5\xb5\x95\x5b\xe9\x30\xb7\x73\x54\x87\xd3\x93\x9b\x74\xa9\xb7\x92\xbd\xe2\xa4\xc8\xf7\x29\xfb\xba\x95\xd5\xb2\xff\xac\x42\x2e\x0d\xed\x3c\xf6\x2f\x26\xda\xa4\x57\x1b\xeb\x40\xfd\x40\xa9\xd3\x31\x56\x37\x31\x7a\xb4\xa9\x72\xc9\xdb\xe5\x08\x29\xa7\x2b\xf1\x49\x6d\xd5\xce\xae\x5e\xe8\x72\x52\x16\x96\x67\x2f\x59\x59\x02\xad\x18\x2c\xb1\xdd\x84\x17\x47\xf6\xae\x5e\x48\x5b\x7a\x65\x69\x7b\xfb\xd8\xb6\xd5\xe4\xc1\xb2\x5b\xe7\xf5\x22\x84\xa3\xca\xa9\xbd\x94\x98\xe3\xcb\xb1\x03\x75\x50\x9e\x9f\x78\xf7\x75\x3d\xdd\x50\xab\xf8\x1f\xc5\x10\xf8\xeb\xb4\x8d\x33\x3d\x16\x33\xaf\xd9\x74\x41\x13\x56\x09\x4c\xa5\xa3\x17\xb2\x5b\xb3\xd7\x46\x76\x17\x67\xee\x6c\xc4\x3b\x19\x26\xe5\xab\x58\xcd\xa8\x32\x3b\x65\xe3\x76\x28\xff\x2a\xa3\x02\x0a\x59\xd5\x39\x65\x3f\xe0\x63\x76\x17\x83\x8f\x5e\x4a\xc7\x75\x97\x26\x64\xb8\x92\xe7\xa8\x9e\xeb\x66\x5b\xde\x6a\x6e\xe3\xbc\x05\xde\x74\x49\x84\x07\xfe\x42\x7f\xfd\xe2\x7e\x66\x02\x7b\xe8\xf7\xe9\xf8\x27\x00\x00\xff\xff\x1c\x32\x25\x21\x57\x04\x00\x00")

func test_certsCaClientTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaClientTenantCrt,
		"test_certs/ca-client-tenant.crt",
	)
}

func test_certsCaClientTenantCrt() (*asset, error) {
	bytes, err := test_certsCaClientTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca-client-tenant.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0xea, 0x77, 0x90, 0x72, 0x1d, 0xc3, 0xc9, 0xb2, 0xf2, 0xf8, 0xa5, 0xcb, 0x4, 0x89, 0x3, 0x70, 0x31, 0x8, 0x81, 0x87, 0x27, 0x9d, 0xf, 0xf0, 0x5f, 0xc6, 0x88, 0x95, 0xec, 0xf9, 0x6c}}
	return a, nil
}

var _test_certsCaClientTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\x12\xab\x56\x00\x85\xe1\x9e\x55\xbc\x9e\xf1\x10\x45\x28\x2f\x41\xe4\x2c\x62\x07\x57\x64\x09\x10\x19\x56\xef\xf1\xab\x7d\xda\xd3\xfc\xdd\xf7\xcf\x7f\x13\x64\x45\xb3\xff\xf8\x01\xf8\xe3\xfa\x5a\x04\x5e\xf2\x1f\x43\x4e\xff\x3e\x88\xa5\x69\xf2\x78\x68\x02\x00\x86\x08\x3c\x19\x2c\xde\xb7\x5c\xa7\x09\x9d\x6a\xdc\xa4\x5b\x32\xa9\x98\x78\x4d\x31\x6f\x95\x7d\xff\xe1\xfd\x9c\x92\xc0\x66\x02\x3a\xfc\xc5\x0f\xa1\xc2\x50\x05\x8a\xc8\x78\xca\x01\x75\xb5\xe4\x46\x98\x1e\x14\x5c\xcc\xdb\x19\x82\xdb\xf4\x7f\x79\xf8\xd1\x7b\xac\xc2\xbf\x41\xe3\xa7\xdb\x75\x06\x17\x3d\x5b\x67\x97\x6c\x33\x2a\x97\x93\x64\xa7\x57\x46\xb5\xb4\x8a\x24\x0f\x7f\x3e\x23\xb8\xc0\xb1\x54\x0f\x8d\x8b\x2a\x5d\xc7\x94\x82\x3f\xc7\x57\x94\xc5\x43\x10\xe2\xdf\x33\xc1\x2e\xa8\xd5\x9e\xfe\x4c\xf1\x36\xe7\xf0\x4f\x26\xa8\x63\x23\xa1\x6f\xaf\x94\x3e\x3e\x02\x79\x3f\xf9\xd2\x2e\xf0\xf0\x9f\xef\x4a\x1f\x8e\x66\xe7\x9d\x39\x00\x07\xf0\xf3\xb8\x6a\x31\xf3\x00\xd6\x91\x14\xac\xcc\x0d\xac\x65\xd4\x5a\x55\x65\x04\x31\xa3\xce\x41\xd7\xd9\x2f\xb4\x57\x90\x85\x73\x29\xeb\x6b\x68\x52\x92\x4e\x68\x3f\x19\x66\x6e\xea\xe1\x72\x35\xca\x53\x5e\xdc\x71\xe5\x99\xfe\xb1\xdf\x1a\x40\x47\xe1\x6d\x4d\x3d\x4d\xfb\xc5\xc7\x3a\xba\x19\xde\x8c\xdf\xc1\x23\xc5\x10\x1e\x8d\xc4\xaa\xae\x1f\xfc\x55\x31\xd0\xff\xa2\x86\x13\x85\xbe\xe1\xa5\x01\x90\x35\x77\xda\x9d\xa9\xa7\x9a\xf9\xd0\x24\xe0\x01\x01\x8c\x9a\x00\x3c\xd1\x38\xf8\x36\xfc\xfc\xa6\xf4\x47\x41\x06\x79\x9a\x7e\x2d\x3e\x5d\xdb\xa9\xb4\x55\x6f\xea\x5c\x30\xeb\x84\xd6\x2e\x73\x6d\xbc\x35\xc6\x6c\xbb\x3f\xa7\xc7\x7c\x32\x0e\xd5\x24\x84\xbb\x4c\x2f\x5e\xf7\xb8\x37\xfe\x0e\x19\xcf\xde\xd9\xc9\x82\x08\x9d\x05\x44\xcb\xdd\x35\x76\xed\x1d\x7d\x17\xd3\xb2\x16\x90\xf9\x1a\x44\xd4\x9a\x81\x1c\x61\xc4\xc9\x9c\x6f\x2a\xe7\xdd\xb1\x51\xba\x9d\x1f\x54\x5b\x04\x46\x9a\xc7\x75\x82\x62\x9a\x10\x69\x02\x12\xc1\xa1\x27\xf3\xcf\x7c\x6a\x4e\x4f\xe3\x7b\x20\x53\xea\xc8\xd4\xc0\xf6\x08\xf9\x60\x8b\xf2\x80\xd6\xc3\x6a\xe3\x38\x8a\xcb\x1b\xeb\x5e\xcf\x7c\x55\x45\xf7\xf4\x83\x67\x90\x2d\x02\x33\x6e\x1d\x72\x49\x8c\x2d\x27\x23\xaa\x99\x79\x4f\xd4\x96\xa8\x13\x2a\xb9\x0c\x6f\x91\x8d\xae\x19\xd2\x79\x98\x10\xe5\xdb\xb6\xb3\xfc\xb2\x93\xa1\x7b\x9f\xeb\x50\xba\x51\x10\x45\x73\x80\x69\x38\xd8\x58\x02\xc9\xfd\x6b\x14\x2d\x45\x89\x1d\x99\xcc\x8a\x9d\x52\xc7\xdf\xb1\x7c\x93\xcf\xf4\x9c\x1e\xde\xba\xf0\x56\x71\x44\x61\x66\xc4\x05\x57\x5d\x21\xba\xd8\x43\x17\xcc\x3f\xb5\x91\xa1\x90\xd3\xfc\x3b\x53\x11\x0a\x2f\x9e\xd1\xd6\xeb\x60\x54\x04\x60\x5f\x87\xce\xc2\xe7\x61\x14\x2c\x46\x6e\x43\x1a\x38\x2b\x4b\x19\x5a\xf8\x91\xa9\x10\x1f\x64\x70\x6e\x5e\xd2\x9f\xd5\xcb\x56\x53\xcd\xea\x16\x32\x27\x36\x24\x1d\xd1\xc7\xcf\x7f\x9b\x1e\x0d\x79\xdd\x32\xc1\x16\x28\x9d\x5d\xa2\x9c\x51\x31\x60\x99\xa2\x81\xdf\xe9\x96\xc9\xce\xc0\x58\x53\x87\x3f\x26\xcd\x7a\x41\xbf\x72\xe9\x4f\x01\xf7\xf2\x5a\xcc\x0c\xd9\x32\xb4\xfa\xa8\x43\xf5\xed\x4a\xb9\x20\x84\xc9\xc8\xcc\x3e\x6c\x60\x11\xc7\x12\x77\xf1\x06\xbd\xfb\xf0\x31\x87\xd5\x07\x0f\x5c\x1b\xc3\x87\x4d\x09\x9e\x9c\xaa\x2e\xd2\xdf\x62\x8b\x78\x23\x70\x7e\x1c\x55\xca\x87\xc1\x76\x66\xb7\xae\x44\x8a\x57\x8d\xdb\xc4\x1f\x42\x65\x13\xcc\xdb\xb6\xd4\x07\xc6\xa3\x0a\x2b\x75\xf2\x26\x61\x7c\xc8\x25\x6a\xfe\x93\xd8\x55\xc9\x65\xf0\xca\x12\x5a\x42\x1a\xf3\x80\xcb\x88\x83\xbd\xe1\x29\xfc\x70\xc8\x44\x60\x3b\x12\x72\x68\x1e\xd6\x4c\xc5\x0d\xb0\x51\x39\x74\x17\x9c\x86\x91\xa0\x50\x5f\xd1\x96\xba\x77\x50\xda\x13\x43\xbb\xee\xaa\x18\x55\x8e\x68\x2f\x2f\x7d\xeb\x4b\x52\xce\xbd\xf4\x62\x42\x01\x2c\x31\xf9\xeb\x4a\x09\xf6\x09\x35\xb9\x8a\xb1\x5e\xb4\x93\x87\xdd\x07\x8c\x0a\x90\xbc\xa1\x78\xad\xaf\xd1\x74\x23\xb2\x86\x89\x40\x50\x83\x8b\x04\x7c\x28\x8a\x60\x82\x47\xc4\xde\x21\x20\x93\xc6\xd8\xe0\xde\xf7\xdf\x69\x6e\x92\x09\x94\x42\x7b\x9f\x16\xfd\xb2\x4f\xa3\x3c\x03\x8a\x61\x25\x2f\xfa\x4a\x76\x5f\xa8\xab\xa2\x7c\x0d\x92\xcc\x10\xb1\x9d\x9f\xf4\x94\xd1\x56\x4c\x1c\xcc\xf1\x4b\x29\x58\x1b\xdb\xd0\xb3\x23\x89\x7d\x83\xf5\x0e\x9c\xf9\x08\x98\x5c\x58\x12\x61\x8d\x51\xb9\x47\x03\x9a\x3f\xaf\x76\xbb\x2b\xf1\x7d\xa7\x04\xa6\x20\xb7\xd4\x70\xba\x62\xbb\x1f\x94\xba\x4f\x7c\x9a\xb8\x42\x94\xaa\x5e\x16\xeb\x14\xd4\xf3\x16\xe4\xc2\x47\x8e\x7c\x15\x02\x79\x30\x0c\xcd\x7a\x9c\x00\xce\xcd\xe8\xfa\x67\x6d\x5c\x26\xdd\x6e\x0e\xf2\xb2\x39\x11\x87\x80\x33\x15\x4c\x3e\xca\x93\x77\xdb\xf7\x76\x69\x98\x88\xaf\xf6\x66\x19\xe1\xe4\x6d\xd8\x3e\xd8\xc1\xc7\x8a\x19\xe2\x18\x07\xe6\xa7\x9d\x6c\xe5\x47\x5a\x44\x41\x83\xb9\xd7\x0b\xc1\xac\x99\xa0\x9c\x36\x16\xd5\x6f\xb8\x26\x7a\x29\xb6\xbd\x3d\xcb\xd7\x72\xc6\xbd\xad\x66\x3b\x65\x6a\xe1\xe5\x65\x7e\x9a\x27\x27\x9f\x8b\xaa\x82\xa7\xcf\xac\x56\xdc\x29\x9e\x53\x0a\xce\x63\x8d\x14\x32\xf3\x70\x3c\x43\xa8\x85\x34\x38\x9d\xbd\x7b\xd1\xd8\xe1\xeb\x8a\xf3\xae\x2d\x08\xb9\xef\x59\x2f\x67\xbb\x0a\xa0\x42\x15\x79\xf8\x32\x69\xf0\xb4\x1d\xd1\x1a\xbb\xaf\xc9\x82\xda\x88\xa2\x06\x61\xa3\x1f\x3d\xaa\x0a\xd5\x94\x26\x69\x59\x5b\x69\x07\xba\x52\x2e\x2d\x79\x36\xb6\xbd\x8a\xc2\x73\xae\xd8\x39\x8c\xc7\x53\x0f\xc7\xb1\x81\xf8\x66\x3f\x9f\x68\xc7\x8e\x11\xa8\xa7\x5f\x87\x5d\x1b\xa2\x2e\x31\x48\x8f\x52\x25\xd7\xbd\x5f\x41\xff\xa4\xf6\xa5\xd9\x6e\x55\x1d\xa4\x84\xb9\x5e\xfd\x76\x8c\xc5\x8b\x61\xd0\x88\x5e\x52\x0d\xa7\xf2\x1f\x2f\x18\x21\xf2\x97\x14\xd9\x96\xfe\x9f\x9a\x7f\x03\x00\x00\xff\xff\xf7\xaf\xa7\x35\x8b\x06\x00\x00")

func test_certsCaClientTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaClientTenantKey,
		"test_certs/ca-client-tenant.key",
	)
}

func test_certsCaClientTenantKey() (*asset, error) {
	bytes, err := test_certsCaClientTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca-client-tenant.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x81, 0x5f, 0x41, 0x0, 0x18, 0xa4, 0xb, 0x65, 0x6b, 0xf, 0xea, 0xef, 0x8c, 0x1f, 0xbc, 0x1f, 0x27, 0xc1, 0x49, 0x9b, 0xa4, 0xe4, 0x54, 0x70, 0x4d, 0xa4, 0xf5, 0x2f, 0x9c, 0x74, 0xdb, 0xd2}}
	return a, nil
}

var _test_certsCaServerTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xbb\xb2\xaa\x58\x18\x84\x73\x9e\x62\x72\x6b\x4a\x04\x45\x09\x4e\xb0\x6e\x20\xe0\xc2\xbd\x10\x50\xcc\x40\x90\xab\x02\x72\x5d\x3c\xfd\xd4\xde\x53\x35\x13\x9c\xf3\x87\x5f\xd0\xf5\x57\x77\x57\xff\xfd\x7d\x90\xe8\x86\xfd\x17\x22\x8e\x6b\x68\x06\x02\x2e\xf9\xa1\x02\x35\x0c\x0c\x0b\x84\x40\xa2\xa4\x60\x32\x20\x48\x0d\x16\xee\xbe\xd4\x4d\x3d\xc6\xe1\x52\xd6\xfc\x89\x0e\xf4\x5d\x87\xbc\x00\x36\x4c\xcb\x36\x2b\x73\x5d\x9d\x44\x08\x58\xa7\x01\x0c\x3e\x02\x75\x8c\x89\x80\x00\xfb\x8c\x59\x64\xaa\x70\x24\xd9\x9f\xc7\x4b\xcd\x02\x29\x9d\x35\x17\xb8\x30\xb5\x7d\x08\xa8\x8b\x89\x3d\x06\x52\xcf\x23\x49\x2b\x42\x04\x31\x73\x41\xa2\x4d\x22\x17\x28\x06\x32\x75\xbd\xe9\x8c\xc1\x8e\x62\x3b\xd4\x26\x71\xf9\x61\x05\xfb\x8f\x51\xd4\xcd\xa4\x00\xec\x5f\xb1\xda\x45\xde\xff\x62\x42\x88\x89\x4f\x21\xd5\xc1\xc6\x23\x60\xa6\x94\x49\x6a\x11\xca\xe6\x18\x5c\xed\xda\x20\x36\xa4\x86\x01\x8d\xdf\xde\x27\x1a\x00\x67\x04\xd8\x01\x7c\x7b\x00\x51\x6a\x21\xc0\x08\x90\xbd\xb9\xbe\xde\x6b\xee\xe2\xb2\x5a\xf0\x8c\xcf\x3a\x69\x11\x5a\x51\x1f\xcf\xbc\xbb\xca\xab\x39\x11\x99\x07\x0f\xf2\x76\x51\x16\x49\xce\xb4\x27\x6f\xb7\x82\x59\xde\x4c\xf3\x96\xe9\xe3\xb5\xb0\x6b\xff\x20\x7f\xaa\x7d\xf5\x8a\xfc\x4d\x93\x3d\xac\xa3\x14\xd2\x67\x94\x33\xf1\x68\x01\xae\xbf\xf3\xb9\x6b\xb2\x95\x96\x90\xcd\x67\x46\x36\xa3\x37\x65\xe8\x6b\xe1\xa1\x79\xbe\xa4\x89\xa5\xb5\x4e\x06\x34\x74\xc7\xe9\x14\x78\x2a\x8b\x15\x18\x8f\x5f\x6a\xea\x64\xfd\x4b\x1b\x36\x0b\x3a\xf8\xee\x0b\x19\xf1\x71\xfb\xde\x5a\xb9\xc5\x86\x2b\x11\x13\x70\x6b\x59\x2a\xd0\xdb\x09\xcf\xed\xe5\xf6\xf5\x2e\x97\xfb\xe6\xc4\xd3\x46\xdb\xe9\x4e\xb8\xf7\x79\x25\xc7\x48\xce\xbd\x52\x3a\xee\x3f\x80\x6d\x45\x63\xca\xc6\x30\x30\x9c\x57\x30\x92\xce\x5a\xf1\xd6\xf9\xc4\xfb\x83\x00\x94\x38\xbb\x59\xb7\xc3\xf8\xf4\x7a\xc5\x1f\xd4\xb3\x6b\xc5\xca\x3d\x34\xc3\xd7\xc3\xa8\xa2\x36\xdf\xed\x67\xb3\xd4\x8b\xa6\x44\xee\xb0\x9a\xee\x6a\xd2\xbe\xab\xa7\xb4\x04\x30\x9d\x50\xa9\xaf\xb1\x20\x1e\xba\x67\x5d\xfb\xfa\xfc\x14\xd7\x81\xa3\x95\xe7\x6d\xf1\x8e\x77\x75\xd3\x96\xae\x9c\x7c\xb2\x8a\x4e\x06\x06\x0c\xc0\x9a\x07\x93\x89\xc1\xf9\x3b\xca\x23\x3b\x40\xf0\x3c\x10\x08\x28\x12\xc0\xc0\x26\x92\x06\xd8\x77\x44\x17\xb0\xe3\x1a\x82\x74\x82\x29\x81\xeb\xef\x56\xba\x7f\x68\xdf\x4f\x7c\x04\x9c\x99\x83\x55\x3b\xaa\x85\xfe\x5e\xed\x2e\x31\x83\xfd\xe4\x94\xf5\x7b\x1b\x4b\xf9\xa6\xbc\x2f\x69\xe9\x5e\xdf\x39\xd7\x76\x2b\x78\x27\xf6\x1a\x7a\xd7\xb5\xd2\x9d\x1e\x36\x3b\x4e\x26\xcb\x76\xf8\xda\xc5\xfb\xbc\xbe\x04\x68\x12\x5a\x2d\xfa\x6a\x4c\xbf\xce\x8f\x92\xf1\xb9\x78\x8b\xe5\x3d\x32\xf5\x34\xb3\xbc\x40\x84\xf0\xdc\x23\x7d\x4e\xea\x52\x23\xd0\x3e\xef\x8c\xc7\x0d\x4f\x8b\x84\x76\xca\x1b\xd3\x36\x69\x40\xb8\xa4\x42\x91\xbc\xa3\xb8\x5a\x72\x91\xac\x9b\x7d\x29\x57\xab\x2e\x48\x92\x97\xad\x1d\x83\xfd\xca\x22\xcd\x3d\x8a\x56\x67\x46\x56\xa2\xd9\x8c\xbd\xdf\x1e\xdc\x58\xc4\x09\x3c\xf7\x3e\x6f\x36\x2d\x8f\xc9\x55\x70\x4f\x53\xba\x7e\x53\x1a\x96\x97\x13\xdb\xd0\x5b\x0e\x4f\xa5\x59\xb6\x8e\xec\x50\x7f\xbc\x58\xea\xd0\x12\xa3\xb0\xb7\x57\x85\xb7\x64\x5f\x27\x2a\x31\xf4\x7e\x34\xfb\x20\xda\x75\xad\xa4\x16\xbe\x40\x3f\xfa\xc2\x86\x6c\xc5\x87\xac\xc8\x95\xe6\x43\xf5\xb6\x92\x1c\x13\xc9\xf4\x4e\x7d\x76\x7a\x2a\xfc\x0b\xac\x83\xc8\x9b\x3e\x8e\xbb\xc9\xb3\x98\xb7\xf7\x46\xcf\x4e\x56\xfd\x4a\xcd\x85\xdf\x46\xa1\xff\x22\x83\xca\xbb\x62\x9e\x7c\x3c\xb2\x5f\xbf\x84\x9f\x99\x20\x36\xfe\x7d\x3a\xfe\x09\x00\x00\xff\xff\xca\x7b\xd9\xc7\x57\x04\x00\x00")

func test_certsCaServerTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaServerTenantCrt,
		"test_certs/ca-server-tenant.crt",
	)
}

func test_certsCaServerTenantCrt() (*asset, error) {
	bytes, err := test_certsCaServerTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca-server-tenant.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0x16, 0xf9, 0x6, 0x5a, 0xa2, 0x7a, 0x92, 0xcd, 0x9, 0xbe, 0x18, 0xd6, 0x4a, 0xd9, 0xbd, 0x62, 0x28, 0xfc, 0xf, 0xaa, 0x1b, 0x12, 0x32, 0x70, 0xf7, 0x6, 0x19, 0xc6, 0x3, 0xe4, 0xc1}}
	return a, nil
}

var _test_certsCaServerTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xa3\xd0\x01\x85\xe1\x9e\xa7\xd8\x9e\xf1\x80\x48\x82\x62\x8b\x4b\xce\x08\x44\xee\x10\x59\x84\x4b\x10\xf1\xe9\x3d\xde\xda\xa7\x3d\xcd\xdf\x7d\xff\xf9\xdf\x78\x49\xd1\xec\x3f\xde\x1b\xfc\x79\x79\x5a\x08\x7c\xe9\x8f\x21\x25\xff\x1e\xc4\xd2\x34\x69\x02\x1a\x0f\x80\x21\x00\x57\x02\x64\x70\xc2\x28\x85\x97\x2f\x76\xfd\x2d\x9e\xa2\xa3\x48\xb3\x20\xa0\x56\x28\x9e\xd7\x1a\x91\xe8\x59\xe2\x6e\xc0\xb3\x24\x75\x33\x37\x41\x36\x32\x52\x5d\x33\xa5\x77\xb1\xae\xc7\x8d\xb2\x47\x5f\x1b\x86\x2c\xb9\xf4\xcf\x7e\xf8\x84\x8f\xa9\xc9\x0d\x95\xc8\xac\xea\xd3\xba\xb8\x6a\x80\x4b\x19\xdb\x73\x9d\x1a\x54\x2e\xa5\xc7\x72\x0a\xb6\x6b\xc5\x08\xb3\xfd\x60\x2e\x07\x21\x21\xe3\x9d\x81\x95\x9b\xb0\xad\xea\x61\x26\x01\xe7\x16\x0c\x5f\xec\x2f\xae\xf6\x9a\xdf\x20\x6f\x8f\x5b\x60\x43\x7f\x10\xb4\x42\xa5\x46\xca\x68\x0d\x77\x8b\x24\xbc\x04\x48\x3c\xbb\xb5\x15\x9b\xe2\x39\xbf\xe3\xd7\xd8\xdd\xe9\xc3\xbc\xea\x49\xa6\x15\x2f\x7b\x86\x57\x4f\x16\x02\xd9\x06\x1d\xa1\x3e\x17\xe0\x52\xb8\x76\x34\x7b\x96\x68\xde\x90\xec\xd2\x6a\xa0\xd7\xec\x21\x4b\xf1\x64\x01\x53\x34\xb1\x11\xb3\x7b\x15\xfc\x98\x70\xe3\x1c\xdf\x28\x98\x34\xd3\xb3\x21\xd7\xfa\xcf\xdc\xd2\xcf\x53\xef\x94\xef\xd4\x09\xfe\x86\x1e\x29\x57\xce\x63\x5f\x11\x77\xc2\xd7\x87\x80\x74\x0a\x26\xe2\xec\x5a\x41\x18\x2a\x67\x85\x63\x89\x27\x77\x0e\xf5\x1d\x0b\x1a\x4e\x73\xe7\x93\xe5\xd2\xf4\xd6\xa1\x89\xc0\x05\x3c\x80\x1a\x0f\x5c\xe1\x1e\x06\xe1\x9d\x00\x0c\xf7\xb6\x5e\x44\x82\x4c\x86\x0b\xb5\xbe\x33\xe6\xfa\x7e\x5c\x2c\x98\xe7\x98\xcd\x0f\x6b\x09\x9e\xcb\x97\x9f\x51\x68\x8e\x9b\x8b\xff\xe2\x1b\x2f\x09\xd5\xd0\xd0\x94\x47\x3f\x5f\xbc\x6b\xe8\x2f\x29\x95\x0d\xea\xb2\x08\xeb\xbf\x28\xb4\xb9\xf4\x59\xd5\xc9\x16\x66\x38\x7c\x5b\xb4\x1a\xc5\xf1\xed\x56\x0f\x9c\x32\x02\xff\x53\xcc\x93\x19\x3f\xaa\xa0\x1d\xca\xb6\xbf\x9c\xac\xcb\x94\xb0\xd6\xf2\x91\x29\x8e\xfd\x82\xc8\x34\x65\x30\xbe\x5d\xa1\x68\xd8\xce\xb4\xaf\x1c\x1d\x5b\xc0\x4b\x4c\x82\xad\xe5\x68\x59\xa3\x3e\x4a\x64\x06\x55\x15\xfb\xa8\x7a\x25\x84\x2a\x9d\xfa\xc5\x8f\xbd\x9f\x5b\x74\xda\xf2\x57\x63\x78\x04\x6c\x2d\x7d\x96\x95\x2d\x36\xdb\x33\x14\xdc\x37\xdf\x0e\x49\xa5\x1e\x56\xea\xca\x71\x7f\x0d\x45\x74\x03\x30\xcf\x39\xe6\xbf\xed\xce\xdc\x87\xc9\x38\xbe\xa3\x84\x13\xd7\x3c\xfe\x74\x82\x82\x1e\x12\xb7\x5c\x3e\x65\x7a\x93\xaa\x43\x6a\x3d\xe2\xbb\x03\x0f\x8b\xfc\x9e\x0e\xd7\x2d\xab\xfe\x58\xa8\x45\xd9\xaf\x76\xac\x7f\x6a\xbd\x51\x11\x26\x11\x4a\x65\xc5\xd1\x9c\xae\x54\x33\x69\xdb\xde\x50\x88\xcd\xc1\xa2\x86\x4d\x0a\xa0\xc2\x83\x17\x7b\x18\xb3\x7f\xdc\x32\xb9\x48\x62\xef\x79\x3c\x95\x38\x87\xd2\x31\x70\xee\x04\xd2\xf8\x9a\xf5\x6b\x76\x60\x75\x63\x1f\xe3\x63\xe5\x7c\x11\xb4\x38\x8e\x70\x0c\xf6\xf9\xb1\xb6\x36\x36\xeb\x52\x6c\xb3\xb0\x30\x52\xfb\x26\xdd\x1d\xcb\x74\x35\x33\xbe\xe3\xe5\x93\xa3\x33\x8b\x98\xc8\x2e\x00\x7b\xd0\x57\x50\x09\xa5\x99\xa3\xd5\x7d\x4c\xb1\x1f\x10\x25\x42\x10\x4f\xf0\x34\xab\xad\x0f\x1d\x9d\xe4\x5f\xa2\xef\x6a\xd7\x60\xd9\xcb\x4b\x4d\x5c\x25\x78\x79\xf2\xad\xcb\x31\x9f\xf6\xa5\xf2\x80\xd4\x5e\x52\xe7\x10\xdd\x8a\x61\x8e\xff\x8a\x6d\x0a\x20\x10\x75\x2a\x3e\xcc\x6d\xb1\x86\x75\x12\xee\x69\xc4\x55\x6b\x96\xbd\xd7\xee\xa3\x14\xd2\x4a\xd7\x6f\x45\x08\x22\x5b\x5d\x82\x26\x01\x4f\x35\xa4\x69\x06\x2a\x66\x6c\xde\xbc\xc0\x08\x6f\x1f\x5a\x08\x5c\xd8\x28\xa4\x51\x47\x97\x35\x86\xe2\xf0\xfc\x79\x15\x66\x93\x5d\x74\xa0\xa5\xc1\x83\xc6\x1c\x77\x75\x15\x25\x35\x1c\xbd\xf3\x82\x3b\xf2\xa2\x8e\x57\xef\xd6\x1a\x50\xb7\x01\x6c\x73\xbc\x6c\x24\x4a\x32\xe1\x67\xd8\x9e\x7a\xf1\xfa\xa1\x90\x5d\xa6\x71\xbf\xc7\xfa\x82\x5a\xa0\xdb\x94\xc0\xd8\x8f\x9f\x07\x4c\x94\x0c\x01\x54\x40\x74\xf5\x3d\x0e\x19\xd1\x22\xc7\xe9\x2e\x80\xe3\x24\x9a\x82\xe4\xdd\xbe\xdc\x99\x1d\x1c\xf4\xba\xaf\x2e\x1d\x53\x50\xbe\x1d\xec\x59\x80\x83\xf3\x3f\xd8\x52\x4b\x36\x43\x83\x3d\x35\x74\xd7\x28\x38\x43\x14\x79\xaf\xdb\x5d\x9c\x3e\x87\xf7\xcf\x4b\x85\x48\x47\xb2\xb9\xf2\xb9\xaa\x84\x8e\xae\xf3\x33\xa8\x14\xba\xd4\x73\xe9\x7e\xbd\xee\x99\x9c\xa2\x67\xa8\x79\xd0\xe3\x44\xa1\xfe\x08\x92\xe8\xe7\xe5\xbe\xb1\x0b\xa5\x55\x46\xbe\x7d\xda\xa7\x21\xb3\x2f\x02\x71\xa2\xf5\xb1\x8f\x13\xed\xef\x97\xed\xc8\xc3\x83\xee\x3f\x49\xf7\xed\x84\x3a\x01\x56\xca\x88\xe0\x08\x76\x4e\xbe\xd1\xb1\xf7\x9d\x4f\x25\xbd\xc4\x66\xf7\xb4\x57\xe8\x39\xe7\x90\xe4\x63\xdd\xfe\x10\xdf\xbe\xf9\xa5\x31\x04\x5d\x64\xdf\x4e\xe4\x44\x15\x24\xab\x5e\x15\xce\x44\x9f\xde\x54\x4d\x16\x28\xed\x14\x84\x15\x5e\xd7\xcf\xc9\xd7\x30\xbf\x17\x27\xeb\xbd\x86\x88\x0f\x6c\xac\x8b\xa6\xd6\x10\x14\xa4\xfa\x25\x38\x95\x5b\xc4\xae\x43\x52\x72\xb2\x7a\x26\x9b\x3a\xdf\x5c\xa7\xdb\xad\x16\x58\x18\x05\xef\xee\xc4\x12\x0d\x7c\xca\xd1\x9b\xaf\xc1\x35\x0a\x8d\x0d\x47\xcc\x25\xb1\x0b\x93\x16\x44\x3d\x2c\x67\x70\x0d\xbe\x76\x85\x44\x1d\x7e\xc1\xe5\x3c\xd1\x8d\x68\xa9\xc3\x87\x73\x28\x3e\xf5\xbe\xc3\x38\x8a\xcf\x59\xa5\xd8\x31\x65\x97\xe3\x7d\x2c\xef\x40\xe6\x1f\x13\xa1\xd7\x9a\xe8\x63\x48\xcd\x74\xb9\x1a\x3c\x65\x47\x12\x74\xe6\x51\xb7\x9d\x04\xc3\xcb\xf4\xd2\x5c\xa1\x32\x36\x89\xce\x14\xc5\xc9\xbc\x07\x67\xfc\x56\x29\x0c\x6d\x4d\xc8\xe6\x3f\xb4\x59\xd1\x9b\x20\xbb\x82\x08\x06\x64\xc4\x80\x13\xd0\x06\x41\x4b\x24\xcb\x7a\x15\xd7\x28\x5f\x25\xc1\xef\x6a\xe1\xa7\xf3\xa8\x76\x4c\xc6\x23\x82\x51\x92\xd7\x36\x08\x70\xce\x33\x95\xd2\xd7\x74\x07\x7f\xff\x22\xff\x58\x91\x6c\xf1\xff\x73\xf3\xdf\x00\x00\x00\xff\xff\x71\xe0\x5c\x68\x8f\x06\x00\x00")

func test_certsCaServerTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaServerTenantKey,
		"test_certs/ca-server-tenant.key",
	)
}

func test_certsCaServerTenantKey() (*asset, error) {
	bytes, err := test_certsCaServerTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca-server-tenant.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0xfc, 0xaf, 0xf1, 0xeb, 0xe2, 0x35, 0x3d, 0x49, 0x61, 0x82, 0x90, 0x1, 0x64, 0xde, 0x83, 0x70, 0x9a, 0xf0, 0xb9, 0x98, 0xcd, 0x83, 0x26, 0x4a, 0x20, 0xfc, 0x72, 0xfe, 0xf4, 0x41, 0x9d}}
	return a, nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x4b\xaf\xba\x48\x14\xc4\xf7\x7c\x8a\xd9\x9b\x09\x08\x22\xb2\xf8\x2f\x4e\xd3\x0d\xb6\xbc\x6c\x44\x94\xbb\x43\xd4\x96\x87\x80\x28\xcf\x4f\x3f\xb9\x77\x92\x99\x64\xe6\x7f\x96\xbf\x45\xe5\xa4\xaa\x52\x7f\x7e\x1f\x22\x16\xf5\xfe\x30\x48\x10\x52\x93\x1a\x10\x92\x1f\x2a\xb8\x94\x62\x94\x1b\x06\xdc\xd6\x1c\x06\x8a\x80\x53\x96\xfa\x5a\xba\x19\x6a\xa4\x15\xa6\x0d\x2f\xf5\x52\x15\x59\x8b\x42\xf0\x10\x2f\x5e\x8f\x22\xb3\xf4\x41\x42\xc0\xde\x26\x60\x68\x05\x37\xa0\x03\x81\x18\x47\x8c\xd9\x64\x28\xf1\x45\xf6\xda\xf4\xa9\x3f\x62\x99\x8f\x66\x08\x21\xe2\x5e\x84\xc0\x0d\x31\xf1\xfa\x58\xfe\x4c\x17\xd9\xcc\x13\x03\x61\x16\xc2\xcd\x1c\xa4\x49\x70\x31\x28\x6e\x78\x1c\x7c\x0c\xaa\x8b\x77\x89\x39\x48\xf3\x0f\xcb\xd9\x3f\xcc\x35\xde\x23\xc9\x81\xfd\x2d\x56\x87\xc6\xf1\x5f\x31\x21\xc1\x24\x72\x91\x6b\xc1\xf2\x48\x60\x74\x5d\x26\xeb\x79\xa2\xec\xfa\xf8\xe4\xd5\x94\x78\xc8\xa5\x14\xd1\xfc\xbf\xef\x13\x13\xc0\x37\x80\x6d\xe0\xdb\x03\x64\x70\xdb\x00\x46\xa0\x17\x2b\xbc\xd9\x7d\x1e\x3d\xca\xd7\x0f\xff\xa0\x2d\x81\x3e\x9a\x0b\x2a\x1e\xb2\xa3\x8e\x07\xf7\xb9\x25\x49\x3d\x18\x09\x2e\x63\xc7\x5a\xea\x67\x09\xa3\xec\x28\x98\xe5\x1d\x7d\x16\x5c\x74\x6e\xe5\x43\xa9\x12\xe7\x19\x5f\xc4\xd3\xca\x2e\x99\x71\x52\x28\xea\xd3\x60\xc8\xcd\x63\xea\x5c\xe1\x46\x5a\x9e\x78\xf5\xc4\x2b\xfc\xbc\xf9\x8b\x62\xb4\xca\xcd\x33\xc1\x02\x8e\xb3\x30\x2c\x98\xfa\xf9\x00\x6b\x14\x7d\x6a\xe9\x57\x76\x60\xd5\x68\x49\x43\x73\xd5\x96\xd5\x79\xbe\x1a\x19\x5e\x55\xfb\xd3\x4a\xa9\x55\xd2\x4c\x68\xc5\x17\x7e\x74\x98\xe3\x2c\xcc\xbb\x4c\x15\x1c\x67\xec\xcf\xfa\xa2\x1e\xb8\xdc\x7a\x33\x66\x9f\x18\x69\x69\xcd\x19\x58\xda\x55\x8c\xf7\xa0\xc7\x66\x00\xd3\xa5\x48\x25\xa5\x39\x2c\x54\x22\xf2\xbd\x25\x4e\xab\x46\x71\xa0\x18\x2a\x75\x2f\x64\xdb\x30\x2a\xb7\xc6\xca\xfb\xe2\xda\xe6\x4c\xd6\x65\xcf\xa2\xa2\x8f\x7d\x67\x3f\x85\x5b\xcb\x93\x68\x1e\xf2\x49\x36\x02\xd8\x94\xc5\x18\x50\x64\x7a\xef\x47\x94\x21\x77\x5d\x1e\x5e\xe1\xae\x6d\x04\xd9\xd3\x1e\x07\x53\x91\x24\x39\x58\x1a\x47\xcb\xcd\x31\x05\xa4\xfa\xa8\x5f\x9b\xed\x54\x1d\xec\x17\xa3\x18\x18\xa0\x7a\x8a\x87\x1d\x06\xff\x3b\xca\x2d\xdb\x20\xb8\x6f\x08\x02\xd7\x10\xa0\x63\x03\xe1\x31\x8e\x02\x29\x04\xb6\x15\x11\xf0\x01\x71\x82\xc4\xef\x56\xfe\xae\x7d\x3f\xf1\x11\xb8\x8f\xf8\xc8\xd7\xc6\x49\x10\x67\x66\xcb\x35\xb9\xbd\xde\x8b\x44\xf7\x03\xa0\x4e\x24\xa2\x89\x6a\xc5\xc9\xee\xd7\xb7\x71\xbf\x44\x43\xdc\x8f\xeb\xfb\xb5\x56\xaa\xbe\x52\xaf\xa1\xdf\x89\x49\x36\xe7\x5f\x67\x94\xcb\xbb\x0e\x84\x95\xa5\xb7\x69\xb0\x3b\x7a\xd1\x66\x54\x7b\x73\x78\xbe\xa9\xfd\x6a\x95\xd9\x3e\xcf\x44\xea\x0a\xda\xd7\xdd\x7b\xd7\xd4\xf3\x04\xb3\xa6\xbd\xec\x61\xdf\xc8\xd5\xfd\xeb\x52\xe8\xf1\xab\x6b\x50\x47\x85\x49\xb3\x1b\xe5\x2b\xb8\x3a\x6d\x71\xd5\x34\x03\x75\xee\x2d\xc2\x79\xd7\x73\xf3\x98\x8a\xe4\x12\x8e\xc1\xf5\x5a\x9d\x4f\x7a\x62\x24\x4b\x47\x0f\xf2\xc4\x34\xc3\x6d\xfe\x7c\xfa\xd7\xf2\x46\xbd\xd1\x14\x36\x7b\xcb\x2a\x51\xfd\x2e\x0e\xad\x73\xd9\x04\x97\xc8\x79\x7e\xb5\x95\xd6\x11\xd8\x45\xe3\xa9\x1c\x8d\xae\x93\xf0\xb8\x17\x4f\x7b\x5b\xc4\x93\x51\xdc\xa9\xda\x2f\xa9\xad\xdd\x9d\x6d\xd8\x29\x23\x17\x8a\xfb\xe8\x11\xb8\xc6\xf5\x26\x75\xb2\x00\xd6\x73\xa0\xb6\xe9\x51\xbd\x68\xbb\x2c\x36\xd3\xe5\xf9\x33\x55\xc6\x3b\x58\x2e\xe8\xed\xee\xcf\x34\x65\x8d\x2b\x75\x7c\x8a\xe9\x91\x2d\xa7\xc7\x16\xbb\xc2\x0a\x49\x5c\x1f\x2a\xd5\x09\x0f\x6b\x97\xff\xfa\x25\xfc\xcc\x04\xf1\xf0\xff\xa7\xe3\xaf\x00\x00\x00\xff\xff\xac\xdd\x1b\x87\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0xc5, 0xac, 0x85, 0x67, 0x79, 0x2c, 0xd7, 0xe7, 0xf8, 0x8a, 0xb4, 0x9e, 0xd7, 0xcc, 0x6e, 0x76, 0x92, 0x17, 0xef, 0xe9, 0x6e, 0x71, 0x36, 0xb1, 0xc6, 0xd0, 0x2b, 0x77, 0x17, 0x76, 0xcc}}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x60\x02\x04\x60\xcf\x53\xac\xa7\xae\xc8\x49\x9c\xf8\x89\x43\x18\x32\xcc\x80\x23\xc3\x90\x73\x78\xfa\xab\x5d\x7d\x6d\xdb\x74\xb5\xf9\xfe\xf3\x37\xbc\xa4\xa8\xe6\x1f\xd7\x03\x7f\x6c\x57\x0d\x81\x2f\xfd\xd1\xa5\xe8\x5f\x03\xbd\x55\x55\x1a\x2b\x95\x07\x40\x17\x80\x23\x81\x03\x19\x44\x56\xdb\xea\x83\xff\xd1\xb5\xe5\x31\x18\x50\xeb\x29\xe5\xdb\x1a\x37\xa8\xcb\x7b\xf7\x2f\x29\x19\x4f\x21\x11\xbb\xc8\x50\x30\xee\x8b\x42\x22\xdf\x04\x72\x57\xf2\x1b\x5c\x21\x46\xd1\xd5\xc4\x90\x18\x7d\x94\x22\x1f\x52\xef\x1c\xe1\x43\xa8\xfc\x91\xb9\xe7\x4f\x0e\x32\x23\x07\x85\xb4\x54\x89\x39\xde\xd5\x20\xf6\x85\x05\xb7\x97\xd2\x41\x6c\x9f\x88\x62\xd4\xf8\x7e\xeb\x50\xdb\x06\x9c\x89\xe0\xee\x45\x8d\x1b\xcf\x19\x2e\x05\x3d\xa7\x9c\xc1\x86\xef\x93\x0b\x8d\x48\x0e\xf6\x87\x24\x46\x4a\x9a\x6e\x9e\xac\x60\x2b\xf4\x9e\xa8\xf1\xa1\xdf\xde\x50\x86\x71\x1d\x5f\x0e\x1e\xcf\x0a\x5f\xcc\x47\x74\xb6\x88\x67\xb2\xb1\x72\x80\xc2\xe4\x48\x64\x03\x2e\x92\x5d\x70\xa7\x6d\x86\x12\x93\x07\x53\x12\x52\xd9\x0a\x72\x93\x13\x61\x80\x16\x3a\x07\xca\x6e\x5e\x7e\xd8\xbd\x04\xd2\x8c\x2b\x86\xfd\x4a\x74\x77\x38\x61\x7b\x44\x96\x61\xdf\xfe\x4b\x31\x51\xf5\xe7\x57\x37\x2e\xb8\x80\xed\xda\xcb\x55\x79\xd9\x5c\xeb\xb0\xe1\xdf\x74\xe7\xcd\x90\xaf\x2d\x13\x6e\x32\xb5\x27\x13\x28\x8a\xbb\x98\x10\x28\xef\x9f\xa8\x02\x9e\xb2\xf8\x83\x96\x97\x7b\xf0\xf4\xd9\x51\x45\xe0\x00\x1e\x8c\x2a\x0f\x78\x23\x95\x14\x11\xb4\x3f\x64\x8d\x84\xd4\x86\x62\x2d\xc7\x9c\xc6\xd0\x84\x28\xc1\x37\x7b\x6f\x59\xaf\xf6\x31\x19\xf3\xf5\x2b\x7f\xbc\x9c\x7e\x59\xe2\xc8\xd0\x6c\x31\xf3\x16\x72\x06\xeb\xa5\x8f\x36\xcb\xed\x64\x7c\xe0\x8e\x01\xc3\x4e\xb4\x42\x4c\xd3\xac\x6f\x0e\xf7\x9c\x32\x83\xc9\x08\xc0\xe7\x78\x9e\x5a\xd2\xd3\x65\xf6\xb3\xd6\xa5\xc2\x9c\xf1\xea\xca\xa7\x94\x24\xec\x48\x87\xc4\x0a\x94\x9a\x9e\x1a\xdb\xff\x29\x8d\xca\xc6\x06\x5b\x40\xe3\x01\xde\xc4\x67\x2b\x0f\xf7\xdc\xa7\x59\x95\x41\x57\xf1\x85\x43\xa6\x0f\x91\x0b\x3b\xbe\xcd\x8f\xe9\x61\xe2\xd3\x87\x67\x64\x19\x44\xed\xbf\x03\x83\xef\xd3\x2a\x12\x5d\x9d\xda\x67\x8f\xd0\x20\x32\x2b\x38\xa5\xb3\xfb\x6b\x60\x5f\xbb\x9b\x9f\x3f\x3d\x98\xef\xcf\x1d\x62\xf3\xf5\x16\x22\xe9\xba\xf8\xbb\x5e\x4b\x2f\x5f\xef\x69\xfa\x3c\xd3\x96\x3a\x60\x35\xa2\x23\x01\x17\xf2\xed\x3b\x16\x86\xcc\x04\x57\x95\x44\xca\x97\x53\x9d\x4a\x54\xf3\xcc\xe2\x2b\x6a\xb1\xff\x6d\xec\xea\x43\x06\x6b\x10\x53\xb8\xd3\x1e\x1c\xd6\x2a\x3d\x71\x75\xe6\x04\x57\x54\x3a\x80\x54\x09\xbe\x48\xf6\x12\xad\x0f\x64\xb8\xc5\x92\x3a\x92\x50\x45\x12\x20\xc8\x89\x91\xd3\x15\x63\xcf\x2d\x5c\xbb\x6f\x6f\xd9\x5a\x81\x76\x43\x14\x24\x04\x4a\x2f\x5a\x63\x93\xc4\xf4\xee\x7d\xa9\x2e\x5a\x74\x99\x9c\xa3\xc5\x5c\x06\xe2\xec\x91\xb0\x53\x24\xbf\x0f\x5c\x71\xd3\x2f\x92\x0f\x61\x77\xc3\x64\x5a\xba\xa7\x31\x5d\x3b\x9a\x56\x03\x9a\xd0\xfd\x6f\x0e\x89\xda\x9f\xa6\xc1\xba\xd9\x6f\xcb\xa6\x66\xaf\xdd\xe2\x58\x7f\x14\x68\x8f\x79\x6e\x7b\x44\x09\x51\x99\x8c\xb5\xb5\x91\x43\x31\xa1\x68\x32\x2d\x27\xe4\xbb\x05\x0c\x08\xf9\x39\x72\xef\x8f\xdf\xb2\x99\x66\xad\x3a\xeb\xbd\xd1\x7c\x1b\xdb\x7f\x8b\x71\x6e\xd8\xa1\x4a\x94\xfb\x99\xa7\x84\x81\xa4\x57\xde\x3a\xf7\x55\x0a\xdf\xf7\x37\x6a\x3e\x9a\x04\x9f\xc8\x8a\x3c\x4c\x1b\xae\xc2\x8e\x2f\xc4\x95\xa9\xae\x16\xed\x58\xa6\x50\xb7\xba\x71\x6c\xeb\xcb\x72\x59\x42\xc8\x82\xc1\x51\xea\xc7\x65\x67\xa1\x47\x5c\xdc\x6e\x95\x14\xe8\x3c\xea\x69\x12\x84\xc3\x87\x2f\xd0\xde\x9a\xcc\x7c\x1e\x8e\x71\xe7\x31\xce\x2f\x82\x32\xae\x1a\x63\x1a\x5e\xa4\x08\xa3\x65\xa9\x40\xa2\x0a\x87\x95\xa8\xcf\x5d\x85\xd1\xa0\x70\x87\x0b\xdb\xfc\x9f\x27\xb3\xf2\xfd\xfe\xf0\xbb\xcd\x50\x39\x85\xe8\xf7\xdf\x93\xc1\x4e\xa1\x8d\xf7\x66\x7e\x86\x1e\xcc\x3b\x49\x05\xdb\xc5\x04\x29\x34\x70\x57\xb3\x9c\x6e\x39\x75\x0e\x26\x52\xf3\x54\x3f\xed\x09\x73\x42\x85\x98\x3f\x7d\xae\xdc\xd6\x27\x4b\xee\xc8\xb9\x60\x45\xcd\x40\xbb\x99\x90\xf3\x22\x0d\x3b\x5b\xbb\x16\x88\xeb\x78\xb8\x09\xaa\x50\x16\x5d\x61\xfe\x36\x2a\xd8\x77\x63\x97\xca\xa9\xc0\x27\xd2\xd2\xc6\x75\x4e\x83\x41\x6d\xaf\x81\x50\x36\x3d\x9a\x2c\xce\xfb\x7c\x9e\x13\x45\xa8\x17\x6c\x7f\x9a\x4a\xfe\xd1\x74\x11\x10\x3f\xa8\x63\x9e\x0b\x37\x14\x37\x0e\x52\xa3\x54\x93\x47\x65\xe9\x9f\xe5\xe8\x7c\xf5\x0a\x65\x57\x96\x6a\xe1\xcd\x92\xb5\x1d\x3c\x21\xa6\x9f\xa4\x4b\x4f\x85\xa6\x76\x0c\x0d\xe6\x39\xa5\xa4\xcc\xe6\x2c\xe8\x67\x49\x9e\x24\x4e\x88\xf1\xc1\xe0\x39\x57\x83\x80\xbb\xf4\xca\x4d\x6a\xc3\x19\x71\x26\x4a\xfa\x2c\xee\x9d\x45\x5a\x03\x1b\xa3\xe9\xa8\x86\x51\x5b\x2e\x15\x9c\x0f\xce\x94\x43\xc7\x51\xdf\x59\x08\xfe\x70\x70\x6f\x15\x2b\x35\x23\xea\xab\x4f\x38\xf6\x71\x98\xb9\xd4\x14\x71\x4e\xc3\x2c\x97\xc2\xb4\xdc\x13\xe1\xe6\x0d\x07\xe1\xe6\x58\x69\x83\x05\x49\x1a\x85\x43\xc5\x41\x88\xa5\xbb\x7a\x9b\xd0\x5a\x1c\x3c\x18\x15\x10\x97\xac\xfe\xcd\xaa\xb0\x7b\x4c\xd6\xe3\x2f\x80\xed\x76\xe9\x0c\xd5\xf4\xda\x56\x2a\x25\x6c\x8c\x1b\x33\xc4\x5f\xf8\x87\x64\xa9\x9c\xd0\xf5\x6c\xb3\x2c\x6e\x4c\x5f\x32\x74\x5e\x63\xf9\xd6\x93\xae\x65\x85\x28\xb7\x81\xc4\x59\x04\x38\x0e\x29\x4a\x19\x2e\xd4\xc2\x72\x93\xcb\x6b\xa0\x75\x3b\x3f\x5e\x68\x2a\xfe\xae\x0c\x66\x3d\xa6\x3e\x3f\x16\xac\x31\xfe\x76\x34\x6f\x48\xb8\x5d\xdc\x7b\x12\xb9\x12\xee\x21\xdf\x58\x5a\x03\xec\x15\x11\x70\x37\x45\xdf\x2c\x24\x9a\xda\xc5\x4c\x24\x5e\x88\x98\xf5\x31\xcf\x0d\x3e\x7e\xaf\x9e\xff\x85\xfe\x91\x22\x99\xe2\xff\xa7\xe6\x7f\x01\x00\x00\xff\xff\x51\x06\x89\xe9\x8b\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x1c, 0x3a, 0x3b, 0xc6, 0xeb, 0x7c, 0xf0, 0x50, 0x3e, 0x2e, 0x1a, 0xac, 0x19, 0x51, 0x18, 0xb7, 0xa4, 0xd2, 0xf5, 0x39, 0x4d, 0x81, 0x6c, 0xa, 0xbd, 0x49, 0xd6, 0x3c, 0x49, 0xd6, 0x58}}
	return a, nil
}

var _test_certsClientTenant123456789Crt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\xc9\xce\xb2\x48\x14\x40\xf7\x3c\x45\xef\x4d\x47\x06\x51\x58\xf4\xa2\x26\xa0\x44\x90\x02\x1c\x70\xa7\x88\xc5\xa4\x28\x20\x05\x3c\x7d\xe7\xfb\x3b\xe9\x4e\xfa\xbf\xcb\x73\x93\x93\x9b\xdc\xe4\xfc\xf9\x33\x90\xd8\xd4\xff\x03\x91\x30\xa6\x16\x45\x20\x26\xbf\xa8\xe4\x51\x8a\x21\x46\x08\x64\x13\x07\x82\x42\xc0\x29\x8b\x1f\x7d\xba\x1b\x58\xad\x68\xc3\x63\xd4\xe4\xae\x0a\x83\xa9\xc7\xc0\x87\xbc\xfa\xe4\x55\x61\x9b\x42\x86\x80\x75\x16\xc0\xa0\x95\xbc\x90\x0a\x02\x12\x7c\x64\xcc\x25\xa2\xc6\x37\xd5\x6f\xd3\xa7\x99\x27\x2a\x1f\xad\x18\xc4\x90\xfb\x47\x08\xbc\x18\x13\x7f\x48\xd4\x7e\xba\xa9\x56\x79\x45\x10\xb3\x18\x64\x96\x90\x27\xc9\xc3\x40\xf3\xe2\x83\xd8\x63\xa0\x7b\xd8\xbf\xfe\x40\x3f\x06\x9a\x57\x82\x7f\x99\x87\xf8\x48\x4a\xc0\xfe\x91\x35\x31\x3a\xfc\x27\x93\xae\x98\x44\x1e\x04\x36\x50\x0e\x04\x8c\xde\xd6\x8b\xe9\xec\xe3\x83\xea\xcf\x5c\xf7\x28\x85\xb4\xfc\xff\xe9\xc4\x02\x60\x8f\x00\x33\xc0\xcf\x5e\x42\xdc\x45\x80\x11\xd0\x0d\x2b\xee\x46\x79\xee\x15\x96\x8b\xe7\x71\x90\xc3\xe1\x5d\x94\x62\xb3\x39\xb9\xeb\xcc\x31\xc1\x7b\x7d\x5e\xe0\x2e\x99\xec\xe5\xf6\x82\x22\xa5\xcb\x8c\xa8\x73\x02\xf0\x92\x5a\x79\x32\x08\x22\xcf\xac\x6a\xd5\x54\xf0\xb0\x78\xbd\xf2\x55\x38\x63\x70\x6d\x82\x45\xd5\x02\x4b\xcd\xb2\x32\xad\xec\xa9\x0f\x8d\x3e\x76\x9e\xa6\xcd\x9f\x01\xe9\x34\x03\xed\x36\xca\x6b\x55\x48\x7d\x3b\xbf\xfb\xf6\x82\x4c\x97\xd3\xe5\xfc\x55\x66\x93\x69\xe8\x5a\x6b\xeb\x6b\xda\x66\x96\xff\xc1\x66\xdd\x9f\x5e\x67\xf7\xdb\x26\xca\x6d\x63\x89\x66\xdc\xe9\x37\xbf\x74\x8e\x9f\xbb\xf8\xd2\xc7\x2c\x75\x3c\x5f\xdf\x0e\x99\x90\x49\x3a\x5a\x5b\x1a\x91\x5b\x0e\x5b\x64\xed\xea\x50\x0e\x14\x39\xcd\x12\x2d\x55\x37\x7a\x55\x8a\x9c\x41\x37\x4f\x9e\xbd\x6a\xd5\xcf\xf7\xa8\xf8\xc7\x99\x4c\x2f\x6f\x94\x3c\x17\x1f\xeb\xbd\xe5\x35\x0c\x7d\x0e\xfb\x8f\x7d\xd7\x81\x7d\xf1\x13\x53\x77\x82\x9c\xbf\x2a\x95\x9f\xdd\xd8\x7c\xc7\xea\xb5\x92\x27\x65\xa8\xb6\xb4\xfb\xdc\xc9\xf2\xa3\x9c\xce\x43\xf6\xea\x82\x42\xd2\xdf\x63\x01\x4b\x45\xe6\x5a\xf4\x8d\xea\x62\xef\x78\x5a\x3e\x1a\x6e\xbf\x4a\x4c\xc4\x19\xc5\x80\x01\xd8\x4c\xa9\xd8\xc6\x60\xff\xf3\x46\x87\x19\x10\x3c\x0c\x02\x81\x87\xe0\x15\x08\x89\x88\x04\x1f\x43\xb9\x86\x40\x08\xc4\x13\xea\x8a\x04\x42\x76\x70\x80\xa0\x02\xb3\x64\xeb\x36\x17\x9a\x0f\xa9\x0f\x18\xd9\x41\x06\x30\xe7\x04\x02\x62\x9c\x6e\xcb\xaf\xdc\x3f\xf3\x40\x42\xf4\x38\x2e\x78\xdf\xf3\x98\xd4\x74\x0d\xa3\x3a\x75\xc0\xca\xb3\x0a\x5b\xbc\x2e\x31\xd2\xc5\x9e\xcc\x30\x78\xe0\x20\xf5\xae\xe6\xb4\xf0\x07\xcf\xe0\xe5\x1a\x01\xa6\xe4\xa7\x6d\xe2\xac\x4e\xd2\x6a\xb9\x2e\x5d\x16\xe9\xa6\x73\x4b\x71\xf8\x42\xca\xf6\x7b\x7a\x1c\xe4\xfe\x4c\xd6\xb1\xa1\x38\x7b\x91\x1c\x52\xe5\x16\x68\xc6\xf8\xf1\x71\xb4\x70\xd7\x2e\xe9\xdd\x2f\x6e\xde\x77\xe2\x37\xac\xf1\x24\x0c\x1c\xdb\xd2\x2b\xe8\xd7\xf7\xe3\x93\x50\x7c\x91\xeb\x18\x04\x72\xeb\x3f\xc6\x9e\xf1\xcd\x27\x2a\x9f\x89\x6e\x16\x13\x4d\x5b\xad\x8c\x73\x6b\x17\x30\xb1\x2c\xb4\x74\x3a\xab\x8b\x49\x4f\x2b\xc9\x65\xfd\x4a\xdf\xd9\xee\xee\xd2\x1b\x45\xd8\xce\x31\xf2\xdf\xd1\xb2\xbb\x1c\x16\x4d\x29\x67\x61\xea\x86\xe7\xe6\x3b\x38\x47\xf3\xdc\x64\x87\x5b\x75\x9c\xcc\x2a\x20\xc5\xf8\x75\x96\x3d\xe7\x83\x7a\x97\xae\x47\x39\x5d\xcf\x11\x58\xb0\xe5\x70\xaf\x2f\x0f\x37\x48\x2e\x54\xdd\x7c\xac\x15\x6b\xc1\x9d\x2f\xba\xcf\xe3\x18\xc7\x28\xb7\x9f\xf3\x5b\xef\x47\xbc\x99\xec\xcf\x2d\x78\xfa\x87\x15\x57\x45\x33\xca\x92\x58\xae\xab\xd4\x75\xb5\xd9\x02\x7f\x49\xbf\x12\x41\x7c\xfc\x7b\x36\xfe\x0e\x00\x00\xff\xff\x43\x2e\x7e\x0e\x53\x04\x00\x00")

func test_certsClientTenant123456789CrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTenant123456789Crt,
		"test_certs/client-tenant.123456789.crt",
	)
}

func test_certsClientTenant123456789Crt() (*asset, error) {
	bytes, err := test_certsClientTenant123456789CrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client-tenant.123456789.crt", size: 1107, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x5c, 0x49, 0xea, 0x88, 0x21, 0x10, 0xf, 0xac, 0x4b, 0x9, 0xcb, 0xe1, 0x61, 0xfd, 0x48, 0x4a, 0xdf, 0x7e, 0xc5, 0x49, 0xae, 0xec, 0xee, 0x5, 0x7c, 0x97, 0x27, 0x38, 0xd7, 0xe5, 0xe0}}
	return a, nil
}

var _test_certsClientTenant123456789Key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x95\xb7\x0e\xab\x50\x02\x44\x7b\xbe\xe2\xf5\xd6\x8a\x64\x52\xb1\x05\x39\x5c\x83\x31\x19\x3a\xc0\x98\x70\xc9\x19\xbe\x7e\xf5\x5e\xbd\xd3\x4e\x33\xd2\x1c\xe9\xfc\xe7\x6f\x04\x59\xd5\xad\x3f\x8e\xcb\xff\xb1\x1d\x3d\xe0\x3d\xf9\x0f\x90\xe3\x7f\x0d\x62\xea\xba\x3c\x94\xba\xc0\xf3\x40\xe4\x3f\x32\xbf\xec\xcf\x12\xb8\x55\x65\xd6\x0a\x90\xee\x73\xc7\x9c\x7d\xac\x9b\x83\x61\x42\x40\x17\x1a\xc7\x8f\x74\xf4\x90\x96\xf8\x52\x51\x23\x11\x5d\x7c\x41\x0a\xd6\x5d\x34\x9b\xef\x67\xec\x62\x65\x51\xee\x0a\x38\x13\xf9\x51\x3a\x75\xdf\x57\x4f\xe7\x96\xf8\x74\xb0\x1f\x70\xe6\x15\xa2\x28\x9a\x1c\xaa\xd7\xea\xb0\xab\xa7\x75\x9c\x5a\x76\xb6\xbc\x90\x08\x2b\xbe\x18\xbc\x7f\xd6\xeb\x7c\x8f\xeb\x9c\x88\x1c\x28\x75\xf4\xde\xf0\x9b\xfb\x90\x62\xda\x92\x74\x9a\xcf\x85\x62\x4d\x12\xd7\xae\x61\x1f\x81\x6d\x8e\xf1\x8c\x51\x8e\xe1\x7c\x51\x99\xd5\x68\x48\x30\x7d\x8f\x4d\xff\xdd\x4b\x59\xd1\x99\x5f\x1c\x98\x9c\x9f\x8a\xa1\xbb\x72\x56\x09\xb3\xa8\xbc\x5a\x07\xb3\x71\x2c\x2f\x62\x32\x27\x18\x0a\x36\x47\xf5\x11\x40\x15\x77\x2b\xa1\xb4\xdd\x78\xe2\x88\x15\xdc\xf2\xd5\x9b\xa7\x09\xa4\xa0\x7d\x2b\xe6\xf0\x11\x27\xff\x3d\xa9\x5f\x8a\x57\x13\x2b\xe6\x28\xcd\xae\xca\x1e\x12\x65\x04\x3c\x6e\xf4\x88\x14\x62\x17\xbe\x43\x43\x5f\xa6\xaf\x8c\x4e\x38\x12\x46\x7b\xd1\x2f\x76\x4d\x8d\x67\x2d\x34\x38\x56\x92\xee\xe6\xb6\xf5\x5b\x33\xc9\xea\x64\xc1\xfa\x8c\x39\xb1\xfc\xe8\x12\xff\xe1\x05\x7e\xd0\x05\x5e\x78\xfd\x02\xbd\x11\x93\x0b\xfb\xb1\x21\x16\x20\xb8\x74\xa6\xf2\xf1\xd8\xac\x7a\xcd\xe2\x67\x9f\xb3\x76\xcc\xda\xb2\x15\x56\x5d\xac\xb1\xd1\xd7\xff\x98\x1a\x26\x80\xee\xc8\x0d\x9a\x53\x7b\xb6\x24\xe9\x8d\x72\x68\x66\x75\xac\xe3\xa2\xd3\xe3\x83\x74\x30\x37\x47\x9f\x2e\xfb\xe3\x8c\x97\x51\x96\xab\x4b\xb2\x97\x89\x3a\xc0\xf0\x7b\xd7\x44\x27\x4b\xe6\x1e\x09\x1a\x68\x5e\x65\xef\x7e\x83\x9e\xcd\xd3\x2c\x04\xe6\x75\x94\x1f\xef\xb1\xbb\x59\x82\x8c\x11\xb4\x03\xaf\x94\x87\xe7\x07\x73\x27\xa5\x55\x2a\x59\x59\x3c\x71\x1e\x57\x30\x6d\x30\x9e\x8f\x93\xb1\x89\x8d\x44\x63\x3f\x23\x06\xff\xc5\x8e\x24\xfb\x4c\x82\xc8\x4d\x64\x10\x13\x73\x46\x23\x3a\x64\x07\x8d\xa3\xec\x55\xe4\xc7\x3c\x31\x9f\x89\xd7\x6c\x85\x4a\x91\xa1\xae\xec\xef\x86\xc7\x79\xfd\x13\x6b\x14\xd6\xf6\x62\x4e\x26\xb4\xd8\x2c\xe5\xb0\x1c\xfb\xcd\x12\xbd\xf0\x30\x37\x5a\x44\x82\x4c\x61\x08\x53\x58\x5a\xf7\x30\x01\x93\x39\x99\xc6\x1c\x61\x00\xb1\xbc\x9e\xe2\x26\xce\x74\xf6\xec\x82\xdc\x17\xfd\x66\xbd\x02\xfc\x58\x47\x27\xb7\x8f\xad\x7c\x1b\xc4\x54\xa1\x44\x7a\xf7\x88\xca\xf8\xe1\xd5\x42\xb1\x8c\x65\xfe\x2a\x70\xfd\xb2\xb5\x06\x6c\x5e\xce\x0d\x1c\xa8\xfc\x34\xf5\x60\x0b\xe7\x7a\xc0\x3a\xb8\x6c\xae\xe7\xe1\x85\x17\xe0\x87\xce\xa0\x67\xa8\x55\x7a\xa2\xf6\x48\xa7\x86\xd8\x40\x46\x5d\x11\x13\x37\x17\x13\xdc\x45\x97\x63\xfd\x5e\x51\xfd\xb1\x06\xb6\xf4\x3b\xa9\xb7\x7a\x1a\x94\x7b\xc8\x28\xb8\x49\x26\xab\xcd\xec\xea\x17\xa0\x3f\x4f\xc8\xd6\xa7\xdc\xd7\x48\xe8\x90\xe6\x2e\xd4\x71\x12\x86\xa7\x50\x36\x52\xe3\x5c\x81\x24\x6e\x58\x06\x2d\x72\x94\x40\x3e\x10\xf3\x2f\xe2\xf6\xed\x2b\x2c\xd6\x19\x65\x56\xeb\x82\x8f\x42\x99\xff\x16\x3f\xb7\xab\x42\xac\x7c\xa3\xc0\x61\xb0\x9a\xbd\xcf\xd1\x84\xd7\x18\x7d\x77\x21\xaf\x3a\xaf\x7d\x80\xa9\xc7\xf0\x27\x33\x2f\xc1\x5f\x94\x02\xe2\x2d\xc8\x77\xaf\x18\xa7\x2f\x25\xc6\xf0\xb2\xd0\x26\x01\x30\x42\xf0\x36\x25\x43\xc2\x22\x79\xb7\x4b\xda\xcb\x22\xbc\x75\x81\x92\x24\x07\xe6\xaa\x9f\xc0\xb6\xc4\xf2\x6b\xcd\x3f\x4b\x88\x6b\x33\xca\xdf\x57\x0a\x98\x57\xce\xa1\x81\xe2\x08\xf8\x6e\x98\xce\x3d\x20\xea\x8f\xec\x7e\x53\xa8\x9e\xae\x29\x0c\x70\x24\x2d\x00\x56\x3c\x3c\x67\x0b\x2c\xc0\x3c\x8f\x04\x18\xd5\xef\x59\x2d\x62\x19\xf3\xf5\x63\x85\x0a\xda\x41\xc8\x0a\xd3\xdf\xef\x74\x79\x43\x1f\x08\xf8\xa6\x83\xea\x86\xdf\xc9\x36\xb6\xad\x62\x4a\x29\xb2\x95\xd6\xe4\x63\x55\xe9\xca\x45\xb0\x85\x38\xf3\x55\x53\x50\x46\xf6\x36\x1f\x30\x3a\xfd\x52\xe5\x93\xce\x1e\xca\x24\x67\x9d\x97\xb6\x27\x08\xfb\x7c\xe1\xcf\x60\xf1\xdc\xc4\x14\x52\xef\xf3\x7a\xd0\xeb\x82\x5a\xd8\xc4\x85\xa2\x96\x77\x10\x76\x76\x74\xd7\xf4\x72\xed\x71\x09\x24\x43\xcc\x66\xe5\xae\x6a\xee\x1a\x30\xdf\xbf\x6b\xca\x7b\x22\x5c\x13\x06\x8c\x3e\x29\xbe\x46\xe1\x6f\xea\xec\x7f\x9d\x61\x1c\x07\x10\x4a\x21\x60\x5f\xbc\xa5\x53\xd4\x13\x25\xed\x71\xad\xe9\x71\x32\xea\xe1\x51\x3c\xaf\x1e\x06\xce\xe6\x1b\x31\x1d\xb1\xa7\x81\xf8\x61\x53\x27\xf5\xe5\x36\x7c\x7d\x99\xd8\xfc\x72\xda\x58\xed\x69\x61\x90\x20\xf8\x40\x34\xbe\xec\xb4\x94\xf3\x6f\xae\x04\x70\xdc\x24\xe1\x32\xde\x9f\x87\x98\xd7\x67\x31\x2a\xaf\xd1\xf6\x7b\x0d\xf9\xd2\x77\xdc\x39\xad\x2b\xf6\x0d\x63\x4b\x83\x1d\x12\xc3\x08\x73\x6e\x6d\x64\x12\x55\xe9\xb4\x0e\xb5\xf6\x7e\x03\xe1\x37\x38\x0c\x55\xa1\xda\x9b\xf0\x45\xff\x94\x09\xd2\x41\x99\x03\x73\x6e\x06\x21\x14\xfe\xe6\x07\x95\x97\xb2\x6e\x9d\x1f\xe6\xec\xa2\x5b\xde\x67\xda\xa0\xe9\x2e\xf6\xb8\xb7\x66\x64\xb5\xd4\x7b\x41\xae\xd2\x5b\x49\x42\x67\xfd\xfa\x52\x8d\xe0\xc5\xfe\x94\x05\x82\xff\x30\x4b\x44\x4f\xc4\x47\x73\xfd\xde\x95\x24\xec\xf9\x01\x8b\xc9\xd5\x27\xcf\xd6\xeb\x46\x18\xb7\xfa\xfd\x59\xd6\x50\xf8\x56\x8e\x17\x71\xa0\xa9\x71\x3c\xff\x8a\xc9\xa4\x71\x4b\x91\xb2\x1a\xc9\xaf\x72\xfa\x41\x3a\xef\xf5\x74\xbd\x9f\x75\xea\x78\x7a\xfc\x2e\x4f\xcf\x04\x63\xbf\x1c\xa6\x48\xaf\x87\x5e\xa2\xac\x97\xbf\x39\x67\x97\x95\xde\xad\x9f\xdb\x5c\x52\x05\x73\xfc\x17\xf9\xa7\x14\xd9\x92\xfe\xbf\x6a\xfe\x17\x00\x00\xff\xff\xb4\x5e\xd8\x68\x8b\x06\x00\x00")

func test_certsClientTenant123456789KeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTenant123456789Key,
		"test_certs/client-tenant.123456789.key",
	)
}

func test_certsClientTenant123456789Key() (*asset, error) {
	bytes, err := test_certsClientTenant123456789KeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client-tenant.123456789.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xa1, 0x70, 0x47, 0x32, 0x7e, 0xfb, 0x4c, 0x1f, 0x58, 0xcd, 0xcb, 0x14, 0x32, 0x67, 0x9d, 0xef, 0x91, 0x83, 0xe8, 0xa1, 0x27, 0xc4, 0x30, 0x6e, 0xf1, 0xbd, 0x70, 0x1c, 0x6b, 0x93, 0xd3}}
	return a, nil
}

var _test_certsClientRootCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\xcb\xce\xba\xc8\x16\x47\xe7\x3c\xc5\x99\x93\x13\x01\xc5\xcb\x70\xd7\x05\x2c\xa1\xc0\x92\x8b\xe8\x0c\x51\x0b\x51\xf0\x43\x84\x12\x9f\xbe\xf3\xfd\x3b\xe9\x1e\xf4\x1e\xae\x9d\xac\xc9\x2f\x59\xff\xff\x3d\x44\x5d\x16\xfc\x0f\xd3\x5d\xcc\x1c\x86\x21\xa6\x7f\xa8\xc6\x19\xc3\x93\x2f\xc6\x70\xb9\x48\x50\x0c\x81\x64\xe2\xbc\x70\xca\x22\xdf\x57\xe7\xd1\xba\xd8\xf5\x82\xcf\xfc\x38\x3a\x7f\x21\x40\xf2\xde\x96\xf7\x9b\xbb\x52\x06\x02\xd1\x39\x40\xe0\xa5\xf1\x1d\x53\x14\x0e\x24\x15\xc2\xa3\xea\x41\x4e\x56\xf0\x2a\xea\x55\x79\xb0\xe4\xc7\x89\x21\x46\x32\x48\x11\xf0\x98\xd0\x60\x38\x58\xef\xf1\x64\x39\x55\x8e\x11\x11\x31\x5c\x1c\x65\x8c\x1a\x27\x30\xe5\x71\xa2\x42\x02\x36\x27\x9b\xfc\x17\x06\x31\x4c\x79\x05\xff\x30\x8e\xf9\x87\x56\x20\xfe\x96\x3d\x63\x9c\xfc\x2b\xd3\x72\x42\x03\x0e\x9d\x0b\x66\x42\xe1\xc3\x69\x51\xaf\x86\x33\xc1\x18\x22\xa6\x88\x38\x6c\xbc\xe7\x91\x95\x43\x11\x80\xa0\x08\x09\x20\x52\xd2\x2d\xfc\xfe\xc5\x13\x4b\x49\x91\x06\x7e\x6b\x64\x97\xd5\xd3\xa5\xdd\x72\xd9\x6c\xfc\xb7\x9e\xaa\xe5\x69\xc6\x87\xa0\xad\x3f\x7d\xf5\x9e\x8e\xd1\x91\xd3\xa9\xb3\x1e\xfd\x9b\x0c\x2f\xd6\xd1\x6a\xd8\x20\xdb\x6c\xd8\x1d\x3e\x6f\x9f\x32\x4d\x6d\x53\x5b\xaf\xe7\x97\x61\x0c\x88\xdd\x66\xc7\x5d\xf2\xae\x12\x39\xb7\xcf\x87\x40\xef\xbd\x87\xfd\xf6\xc3\x9f\x4f\x59\x9e\x9a\xf5\x03\x92\x7d\xef\x30\x98\xcc\xd2\xcd\x1b\xf9\xca\xc8\xd3\x8b\x4a\x34\x51\x3f\xc4\x8c\x70\xd6\x75\x83\xd1\x2f\xca\x86\x81\x3f\xff\xa8\x61\x3e\x7e\x7d\xb5\x3a\x7d\x8f\xf9\x10\x90\xad\xf7\xfc\xe2\x34\x5f\x3e\x9a\x4f\xf5\x84\x5b\x15\x3d\x92\xb5\x9d\x7d\x2f\xc7\x7a\x02\x9a\xd7\xbf\xca\xf5\xfd\x78\xf6\x66\x8b\xfc\xf9\x75\x73\xfd\x5a\xec\xb9\x5d\x49\xdd\xec\xad\xe6\x7a\x36\x0f\x27\x1a\xea\x62\x76\x5f\xd8\xac\x43\xb7\x77\xa9\x2f\xc6\xf5\xc3\xb6\x56\x9f\x7b\x23\x3e\xad\x4c\xb4\x38\x33\xd4\x7e\xeb\x3b\x4b\x2f\x30\xe8\xde\x74\x87\x81\x5b\x4d\xb3\x7d\x91\x6f\xd8\x6d\x62\xfd\x55\x7d\x7f\xa8\x2e\xaf\xf6\xb0\xf3\x77\x5d\x33\x04\xe5\x66\xbe\xac\xfc\xbb\x87\xef\xfd\x7e\x3b\x0f\x73\xcd\x1d\x32\x37\x2d\xd2\xe3\x2b\x6f\xfa\xa1\x8c\xe6\xfb\x47\x89\xc2\xb8\xc0\xa0\x28\x40\xce\x1b\x8e\x13\x45\xe4\x81\xa4\x3b\x63\x0b\x62\x3d\x41\x20\x08\xc8\xbd\xe4\x88\xff\x2e\x77\xd6\x36\x42\x70\x0e\x4f\x17\xe3\xce\x05\x91\x38\x48\x71\xcc\xc1\x70\x71\xd4\xba\x11\x3b\x4d\x89\xa0\x08\xab\x04\x60\xc6\x10\x08\xac\xe6\x7a\xe1\x9e\x66\xfd\xba\xee\x2d\xe2\xdb\xd7\xb5\x86\x7e\xa2\xa7\x27\xde\x16\xad\xd7\x1b\x9e\x1d\x32\xcf\x2c\x50\x7d\xb4\xdc\x79\xea\x4a\xb5\xa2\xf4\x9c\x35\x34\xae\xdd\x6a\xb8\xd2\xba\x5b\xb6\x3c\x8c\x47\x67\x53\x55\xd0\x63\x36\xde\xec\xe5\x49\xd3\xdd\x66\xb3\xb7\x68\x5b\x59\x1c\x2c\xab\xb8\x3e\x7d\x1d\xc2\xd6\xf5\x5a\x19\x1e\x2b\x24\xae\x54\xce\x72\xb5\x0d\xd3\x38\x23\xc3\x64\x72\x0f\x1f\x24\xfa\xc8\xc9\x96\xa2\x80\x79\x5f\x14\x78\x1a\x8d\xaa\xeb\x16\x1b\xf5\x6e\xc6\x72\x66\xde\xc9\x88\xa3\xc8\xab\xef\x0f\x69\x8e\x27\xfe\xc4\x85\xa1\x07\xfb\xb5\x61\x05\x63\x98\x81\x6f\xa6\x95\xaf\xe4\x57\xf6\x70\xc6\x34\x39\xad\x4c\x4a\xb4\x94\xe0\x2e\x4d\x1b\xd1\x31\x3b\x34\xa6\xb7\xce\xa7\x79\x55\xec\xc8\xb0\xd8\x54\xce\xf7\xd2\x19\xb6\xfb\x62\xec\x35\x87\xe7\xb9\x47\x2c\xe7\xfa\x8f\xf9\x06\x73\x95\x89\x2c\x93\x2e\xa2\x41\xa7\x55\xaf\xa4\x4b\xd1\x27\xc3\xa1\xf3\xbe\x4e\x82\xe9\xf0\xd2\xaf\x2a\x04\x32\x2f\x16\xe2\xd5\xe6\xd6\xb6\x5b\xc6\xef\xb6\x98\xaa\xb2\x36\x57\xa9\x59\xb8\x99\x55\x79\x93\x13\x49\x6e\x6b\x2b\xc9\x23\x4b\x5b\xe1\xcb\x4d\xfb\x93\x06\x1a\x90\xff\xe6\xe2\xaf\x00\x00\x00\xff\xff\x0e\x39\x0e\x88\x4b\x04\x00\x00")

func test_certsClientRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientRootCrt,
		"test_certs/client.root.crt",
	)
}

func test_certsClientRootCrt() (*asset, error) {
	bytes, err := test_certsClientRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.root.crt", size: 1099, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0xb1, 0x32, 0x7b, 0xfc, 0x2b, 0x6f, 0xc4, 0x28, 0x6b, 0xe7, 0x6a, 0xe7, 0x17, 0xc7, 0x63, 0xe, 0xb1, 0x59, 0x25, 0x57, 0xcb, 0x6c, 0x72, 0xf1, 0x63, 0xad, 0xb0, 0x4a, 0x8, 0x2a, 0x48}}
	return a, nil
}

var _test_certsClientRootKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xa3\xd0\x01\x85\xe1\x9e\xa7\xd8\x9e\xf1\x90\x44\x2a\xb6\xb8\xe4\x24\x10\x41\xa4\x0e\x44\x10\x49\x70\xc9\xf0\xf4\x1e\x6f\xed\xd3\x9e\xe6\xef\xbe\xff\xfc\x6f\x82\xac\xea\xf6\x1f\xcf\x07\x7f\x5e\x9e\x1e\x82\x40\xfe\x63\xca\xc9\xbf\x07\x79\xea\xba\x3c\x01\x5d\x00\xc0\x14\x81\x2b\x83\x6d\xf6\x0a\x96\xac\x13\xff\xbe\xaf\x4f\xb7\x51\x74\x2c\x9d\x7b\x7d\x71\x24\xcc\x55\xc6\xa1\x2a\xc3\xe8\x8e\xe0\xf3\xae\xf4\xcd\x04\x34\x9b\xfe\x90\xec\xd3\xa0\xe2\x54\xf2\x4a\xab\xe2\x8b\xdb\x02\x3e\xfe\x31\xf9\xc4\x60\x3a\xfe\x1a\xa6\xa2\x57\x7c\xd2\xf6\xa5\xb9\x27\x6a\x8a\x79\xc0\x78\xc0\x17\xe6\xa7\xaa\xca\xf6\x29\xdf\x82\x97\x3d\xde\x35\x22\x61\xdf\xf7\x80\xcb\xbb\xe4\x4d\x21\x2b\x78\x62\x16\x4a\xf5\xf3\x68\xae\x0b\xf3\xd9\x4d\xfd\xd4\x60\x9f\x35\x11\x9b\xad\xe7\x2e\x11\xbb\xdd\x43\x0e\x7f\x72\xb0\x7d\x1a\xe1\x7c\x45\x95\xea\xd4\x88\x68\xda\x66\xe8\x56\x7d\x65\xd3\x43\xce\x01\xc8\x6c\x72\xe9\xf5\xf8\xdc\xae\xb0\x7d\xa6\x33\xcd\x9f\xc9\x3d\x38\x12\x1b\xb1\x59\xc1\x53\xe1\x77\x71\x59\x5a\x6a\x82\xbd\x6b\x0e\xd5\x24\x35\x16\xd9\xf5\x32\xfe\xe5\x94\xea\x17\x92\x0a\x05\xcf\xae\x02\x21\xe1\x96\xf8\x18\x29\xd7\xcb\xdf\x19\xca\xdd\x59\xf9\x41\x97\xd7\x93\x39\xfa\x17\xb3\xbd\x9c\x2e\x60\x04\x6c\xe0\xe5\x55\xbd\x4a\x8e\x94\x91\xdf\x7c\x3d\x37\x77\x34\x7d\x3a\xc1\x46\x7a\xcc\xf8\x4f\x1a\x9e\xe1\xb0\xc2\x92\x41\x15\x6b\xca\x22\x59\xa6\xed\x43\x97\x80\x0b\x04\x30\xea\x02\x10\x15\x59\xe6\xaf\xc2\xfd\xb1\x45\x2c\x2a\x33\xe2\xf5\x55\xe4\x38\xe7\x41\x4d\x4a\x43\xf0\x47\x74\xd7\x1e\x13\xed\xf1\x91\x0c\x77\x7c\x59\x23\xf8\xb8\x30\xd0\x76\xc5\x74\x6a\xb5\x0d\xe9\x2d\xae\x2d\x8d\xf3\xd7\x92\xa3\xef\x52\x8e\xcc\x55\x44\x5e\xe2\x26\x7d\x0b\xa3\xbd\x0f\xa5\x62\x3e\x78\xfd\xc5\xf3\xea\x10\x64\x19\xcd\xd6\x27\x46\x05\xe1\xe3\xa7\x46\xc0\x78\xaf\xca\xa9\x7b\x83\x88\xa6\xa6\x0e\xc2\xa0\xc4\x27\x7a\x1a\xb2\x5a\x3b\x0c\x64\xe3\xc3\x45\x26\xf0\x4c\x8e\x2e\xc1\xd2\x4a\xa6\x8b\x5a\x7d\xf0\x48\xf5\xa5\x42\xee\x77\xef\x13\xae\x3d\xaa\x6c\x51\xa3\x8b\xca\xbd\x1c\x64\x1b\x6f\xe7\xf0\x8a\x64\x2b\x01\x87\x81\xeb\x16\x83\x3c\x0b\xcf\x9d\xdb\x25\x69\xfd\x85\xc0\x6c\x6c\xac\x5a\xb1\xc1\x64\x9d\xa0\x65\x12\x3f\x47\x41\xb7\x7a\x85\xf9\x10\x79\x8c\x36\xad\x43\xde\x12\x79\xea\x95\x40\x62\xfc\x85\x5f\xf9\xdb\x6d\x5b\x0c\x21\x99\x61\xba\xc7\xe2\xe5\x1f\x16\x4d\x58\x02\x48\x8e\x73\xcc\x02\xc7\xef\xd4\xdd\x18\xa3\x84\x16\x14\xcf\xb4\x7b\xf5\xe2\xcb\xf5\xdd\x34\x42\xe4\x9d\xec\xa8\x50\xa6\x68\x25\x8d\x46\xbf\x77\x1c\x79\x39\x5c\xd5\xf5\xb2\x58\x27\x32\x60\xc5\xc4\x4b\xe3\xe1\xa4\x79\x60\x75\x34\x3b\x59\x71\xfc\x64\xa5\x99\x4a\xf6\x8a\xad\x87\x57\x30\xf7\x25\x03\x96\x86\xd1\xa8\x98\x7b\x40\x98\x0d\xc2\xd3\x41\x6a\x37\xd7\xb8\x36\xac\x37\xbd\xac\xa9\x9e\x77\xd5\xdf\xaf\xea\x21\x80\xf8\xd8\xc0\x2e\x83\xf1\xbb\x58\x4b\x73\xce\xa4\xd2\xbe\x3e\x5c\xc5\xbc\xf6\x84\x02\xc9\x5e\x30\xc7\xc3\x81\xe7\xf7\x6b\x22\x4d\x38\xf5\x24\xb9\xa2\x5d\xf2\x0a\x9a\xbb\x34\x34\x6e\xb1\x38\xa9\x61\x7d\x05\x2f\x05\x31\x4b\xfc\x32\x01\x71\x43\xd2\xe7\x02\x4b\xc9\x90\xf2\x4d\xa7\x7e\x22\xe4\xfe\x15\x5f\x43\x2a\x22\x16\x10\xa7\x2c\x07\xf8\x23\xc1\xec\x89\xaa\xf2\x88\xef\x8a\x2f\xcb\x92\x2b\x41\x9a\xab\x0c\x35\xdd\x4c\x46\x4c\xa4\xcc\x79\xe0\xda\x7c\x28\x9e\x85\xbf\xdf\xa9\x28\x6c\xc1\x12\x42\x5c\xa9\xbe\x08\xe7\x73\xf3\xc3\x98\x46\xbf\x56\x8d\xfd\x3d\x9b\x4d\x52\x9d\xb1\xa6\x3c\x8e\xde\x3a\x21\xa7\xf3\xb7\xe2\xab\xf8\xce\x85\x3d\xa9\x17\x69\xc6\x4f\x0d\x39\xfe\x3a\xf1\x76\x98\x3d\x6f\x05\x86\xac\x10\xd7\x97\x18\x3a\xd1\xd3\x94\x22\xf7\x52\xbc\x03\x00\x7c\x00\x54\x14\x0e\x31\xbe\x5a\x43\x70\x19\xb1\x37\x6c\x58\xf7\x2f\xb9\x76\xf5\x1d\x3c\xf7\x2f\x23\x12\x85\x92\x2b\x2c\xc9\xdc\x28\x12\xa7\x0e\xff\x34\xe5\x4a\x5e\xa3\xa5\x16\x6c\x15\x55\xce\x21\x2b\x4b\x37\x5c\xeb\x5b\x9c\xf8\xa1\xfd\x8a\x42\xe0\x52\x8d\x0e\x88\xfa\x5d\x6d\x50\x92\x6e\x35\x97\xbf\x3d\xa6\x9f\x3e\x0a\x79\x11\xc9\x32\x93\x36\x41\xca\x56\xd3\xb5\x87\xaf\xf6\x47\x60\xab\xb6\xd7\xbd\x15\x3a\x06\x2c\xdb\x63\x15\x44\xe8\x95\x96\x9f\xa2\x19\x17\x72\x54\xff\xac\xde\x01\xce\xe4\x42\xd7\x08\xf7\x46\x60\xe8\x84\xac\x16\xd1\x3b\xe0\xb1\xb0\x33\xe8\x8a\xd2\x3a\xc3\x16\xc6\x3f\x7b\x11\xeb\x44\x20\x3c\x4a\x65\x4a\x7a\xdb\x65\x6f\x6a\xbd\xa8\x40\x83\x3c\x41\x59\xea\x5e\x84\xe9\x12\x5e\xa5\xc3\x95\x13\xfb\x40\x2c\x1f\xe3\x1a\x09\xe0\x4d\xe8\x50\xcd\x18\xcb\x4f\x2a\xbd\x74\xc2\xff\x2d\x2d\xd7\xd7\x5a\xce\x1d\x01\xda\xd5\xbb\x27\x78\x9f\xf6\x5b\xe4\xe0\x39\xe1\x75\x68\xa1\xdc\xf1\x59\x08\x7c\x94\x92\x0f\xc2\xdc\x1a\x18\xc8\xcb\xcd\xa7\x79\xb4\x00\x4f\x64\x32\x34\xeb\xf0\x4c\x6e\xe9\xcc\x23\x46\xa4\x8c\xf8\xf8\x14\x67\xbf\xc7\x51\x6c\xae\x55\x26\x1c\xde\x4f\x9d\x36\x6a\xb9\x8c\xb9\xee\x5a\x94\x46\x96\xee\x14\x7c\xd7\x14\x6a\x57\xb2\xa4\x86\x5f\x6a\xe3\xa3\xe4\xc5\x5e\x01\x15\x32\xdc\x91\x62\xa2\xed\x19\x17\xcf\xfa\x4c\xf7\x4d\x1f\xda\x28\xd5\x01\xae\xd6\x47\x99\x79\x13\x15\xbc\xbd\xd5\x43\x20\x6d\x2c\x91\x0e\xbb\xc0\x3f\xe5\x8d\x80\xaf\x51\xbf\xc2\xed\xb2\xdd\x58\x11\x31\x67\xc3\x98\x59\x49\xbd\xc7\x19\x6f\xb0\xe4\x99\xaa\x4a\xb3\x7d\x49\x51\x3a\x0a\x05\x52\xab\x95\x43\xd4\x13\xa4\x41\x23\x8b\x0a\xb7\x45\x5d\xfa\x7b\xb1\x55\x3b\x89\xf0\xd6\x28\xf6\x8a\x48\xf6\x71\x66\x6e\xf5\x5e\xbf\x26\xa5\x65\x3d\x4a\xb7\x54\x34\xcc\x0f\x57\xb8\xba\xe9\xf8\xfb\x17\xf9\xc7\x8a\x6c\x4b\xff\x9f\x9b\xff\x06\x00\x00\xff\xff\x4c\xc1\x41\x9c\x8f\x06\x00\x00")

func test_certsClientRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientRootKey,
		"test_certs/client.root.key",
	)
}

func test_certsClientRootKey() (*asset, error) {
	bytes, err := test_certsClientRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.root.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x0, 0x53, 0xe8, 0x45, 0xce, 0x36, 0xc5, 0x10, 0x85, 0x13, 0xd0, 0x9c, 0x4, 0xe5, 0x8, 0x1f, 0x65, 0x59, 0x60, 0xca, 0x3c, 0x97, 0xdb, 0xd0, 0x4b, 0xda, 0x8a, 0xbe, 0xdf, 0x38, 0xd7}}
	return a, nil
}

var _test_certsClientTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x39\xd3\xb2\x48\x14\x85\x73\x7e\xc5\xe4\xd6\x94\xb8\x80\x10\x7c\xc1\xed\x05\x68\xb4\x1b\x59\x15\x33\x01\x65\x55\xdc\x90\xe5\xd7\x4f\xbd\xdf\x54\xcd\x04\x33\x37\x7c\x6e\xd5\x49\xce\xa9\xe7\xcf\x9f\x43\xd4\x64\xe2\x0f\x4c\xbd\x80\x19\x0c\x43\x40\x7f\x53\x89\x33\x46\x60\xc2\x18\x2e\x5d\x0e\x3d\x43\x90\x33\x37\xf0\xcb\x59\x33\xe9\x47\xef\x2c\x60\xa7\x53\x34\x75\x9f\x57\x3f\x81\x40\x79\xfd\x2c\xea\xd2\xd4\x7b\x19\x81\xfb\x36\x80\xc0\x4b\xe2\x1e\xeb\x29\xc4\x24\x72\xdd\x2d\xed\x1b\x92\x2c\xc5\x2b\xbd\xe9\x45\xbc\xcc\x07\x23\x80\x00\xe5\x22\x42\xc0\x03\x42\xc5\x37\x5e\x7e\xc6\x64\x69\x54\x67\x8c\x88\x1b\xc0\xc5\xe8\xe5\x51\xe2\x04\x56\x3c\x08\x7b\x87\x80\xc2\x89\x7d\xfe\x81\x22\x80\x15\xaf\xe0\x1f\xc6\x71\x3a\xd0\x0a\xdc\xbf\xc3\xda\x00\x87\xff\x86\x49\x67\x42\x3d\x0e\x9a\x09\x8b\x90\xc2\xc0\x59\x66\x46\x53\x66\x45\xd3\xe9\xc8\xfa\x3c\xa7\x25\x07\xd9\xc4\xfe\xd3\xf4\x59\xb2\x22\x2e\x45\xe0\x86\x00\x6b\x86\x48\x0f\x3f\xff\xad\x04\x2d\x43\xe0\xe2\xc4\xd1\x3f\x0b\x9b\xcb\xf8\xb9\xde\x5e\x5c\xca\xc2\x41\xab\x0b\x75\x7f\xe1\x54\xeb\xdd\xc2\xda\x81\xc6\xd4\xfc\x90\x3e\xc9\xbc\xf4\x23\xc1\xb1\x3e\x78\x5b\xc7\xce\xed\x4a\xe2\x20\x0b\xad\x6a\xd5\xce\x37\x04\x6d\x3d\xbb\x9e\x59\xbb\x91\x69\x67\x83\x86\x06\x1d\xf6\xea\xe7\xdc\x1b\xd3\x15\x5f\x6f\x9b\x71\x7e\xfc\x7c\x07\x6c\x97\xe7\xa9\x7e\x5b\x97\x99\x68\xd4\x3a\x7e\x4b\xce\x72\xb9\x52\x2e\x89\xc5\xc2\x2c\xb9\x9b\xf2\x91\xc0\xa1\x7b\x78\xd1\x3c\xba\x92\x7c\x58\xe0\xf5\xed\xd0\x04\x4e\xfe\x76\xcd\x43\x57\x16\x55\x1d\x06\xe7\xaf\x6f\x0d\x76\x7c\x6f\xd4\xf1\x76\x10\x0b\xc9\x99\x1e\x6d\x1a\x06\x9b\x37\x74\xd1\x43\xb7\x1a\x7a\xba\xbf\x8a\x0a\xcd\xc9\x69\xfa\x2c\x66\x5d\x7b\xab\xea\x58\x6b\x55\x0a\x93\x29\xde\x78\x65\xfb\xf2\x7d\x67\xb9\xb1\x7d\x19\x11\xf6\xb0\x67\x4b\x5f\xbd\x8f\xac\xc6\x7a\xf6\xdf\x3d\x8c\x45\xdb\x7d\x6d\xed\xd3\xf8\x57\xbf\xca\xfc\xcb\xd6\xdf\x29\x50\x2b\xfa\x73\x35\x7f\x9e\x4a\x2d\xa3\x87\xc3\xfb\x3a\xe2\xa3\xd0\x8a\xe2\x14\x1a\xa8\xa6\xd7\x44\xba\x7c\x4c\xbb\xf7\x61\x7d\x1c\xfd\x49\x29\x52\x8c\xba\x7e\x4d\x9e\x17\xf6\x9d\xdd\x0d\xc8\x39\x02\x30\x2b\x7b\x82\x86\xc3\xfa\xa7\xa9\x8c\xf4\x14\xcd\x7b\x97\x42\xcf\x8c\x96\x40\x20\xfd\x74\x6b\xf9\x21\x25\x04\xb6\x28\xcf\x5f\x28\xa7\x06\x72\x53\x02\xd5\xff\x2c\x0f\x1c\x0c\x2e\x05\xc3\x7e\xb1\xf4\xa4\x5a\xe6\xc2\xd3\xa5\x63\x73\x4e\xaf\x05\xcf\xde\x6d\xa5\xb8\xf0\x88\xd6\x7b\xc6\x16\xdd\x2a\xae\x37\x8e\xee\x64\xe6\x72\xe4\xed\x09\x59\x34\x4a\x3e\xb3\xb5\x1c\x5f\x82\xea\xd5\x80\xe6\x63\x32\xdb\x1f\x41\x13\xbb\x40\x5a\x15\x06\xbd\x9b\xe1\x36\xf9\x5a\x77\x3f\x39\xaa\x67\xf5\x5d\x07\xf1\x9c\xc5\x02\xa5\xbe\xaf\x80\x39\xd3\x8f\x54\x97\xb5\x9d\x29\x8b\xa5\x2a\x27\xf7\x5a\x7b\x07\xc3\xea\xb4\x4f\xd6\xab\xa5\xd7\x8e\x52\x84\xbd\x02\xe6\xb5\x2c\xf2\xec\xf6\x5c\x9f\x57\xbb\x93\xec\x4d\xbb\x72\x57\xf2\xcb\x36\x34\x53\x3f\x63\x8f\xfb\x41\xf4\x1a\x0d\xe6\x51\x1a\xa9\xfb\x69\xbf\xdb\x7a\x75\xdf\x07\xb1\x8f\x95\xbb\x86\xa4\xee\x3c\xdf\x39\xa9\xbf\xdd\xf0\xaf\x86\x45\x44\x36\xe8\x31\x57\x46\x3d\x0d\xe3\x08\xe2\xa1\x29\x65\xd7\x09\x1e\x43\x50\xdd\x97\xb4\xbc\xaa\xd6\x21\x52\x3e\x60\x75\x81\xa0\xd9\x22\xc7\xbc\xe3\x52\xff\xaa\x94\x2e\x36\xde\x8f\x8d\xfe\x7a\x36\xe1\x56\xd8\xdf\x70\xe1\xdf\x10\x27\x9f\xd9\xd4\x29\x85\xb3\x56\x32\x75\xa6\x3f\x73\x5f\x9f\x12\x6e\xdf\x17\x33\xf7\xa0\x3a\x65\xb4\x89\xe0\x55\x7e\x9e\x99\xb4\x77\x79\x2c\x8b\x79\x2b\xe0\xd7\x2f\xe9\xb7\x22\xa8\x20\xff\xd5\xc6\x5f\x01\x00\x00\xff\xff\xb9\xa2\xd2\x80\x53\x04\x00\x00")

func test_certsClientTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTestuserCrt,
		"test_certs/client.testuser.crt",
	)
}

func test_certsClientTestuserCrt() (*asset, error) {
	bytes, err := test_certsClientTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.testuser.crt", size: 1107, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xe, 0xea, 0x84, 0x15, 0xcc, 0xad, 0x1f, 0xbb, 0xcc, 0xa3, 0xe, 0xd, 0xc4, 0x92, 0xe, 0x55, 0xc7, 0xcf, 0x20, 0x75, 0x1, 0x10, 0x12, 0x28, 0xbe, 0x55, 0x5f, 0x18, 0xcd, 0x98, 0x16}}
	return a, nil
}

var _test_certsClientTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb5\x12\xa4\xea\x02\x04\xe0\x9c\xa7\xd8\x7c\xea\x16\x0c\x0c\x16\xfe\xe8\xe0\xae\x19\x32\xb8\x3b\x3c\xfd\xad\xdd\xf8\x74\xda\x49\x57\x27\xdf\xff\xfe\x86\xe1\x45\x49\xff\x63\x3b\xe0\x8f\x69\x4b\x3e\x70\xf9\x3f\x0a\x1f\xfd\x6b\x20\x4d\x92\xf8\xf1\x94\x18\x00\x14\x16\x58\x3c\xe8\x9f\x23\xcd\x1d\x57\x07\xf3\xce\x0e\x2d\xc3\x0a\x5a\x21\x4b\xbf\x06\x6b\x18\x53\xe3\x25\xfb\x3e\x4d\xd6\x18\x85\x41\x29\xe1\x4f\xdb\xb9\x2e\x80\x8e\xcc\x73\x9a\x3a\x62\xa3\x07\xe8\x5c\x21\x11\xc6\xd2\x56\xae\xad\xf0\x4e\x6c\x56\x37\x55\x9b\x62\x65\x0b\x8c\xad\xb9\xaf\x25\x58\x99\x0c\x3b\x07\x7c\xa7\x8e\x37\x99\x52\x56\x1d\xf5\x2b\xae\x42\x0c\x76\x34\xf1\x6f\x12\x55\x6e\xdb\xb6\x57\xd8\x5f\xb7\xf0\x0d\xf0\x6b\x13\xce\x53\x58\x66\xcf\x2f\xde\xe1\xf9\xd1\x72\x6b\x97\xbb\xc9\x7b\x46\x95\x67\xba\x65\x1c\x23\x5c\xe0\xd1\x05\xa9\x28\x07\x0a\x64\xfc\xb7\x4e\x5d\x93\xbb\x2b\x91\x7c\x05\xfe\x45\x02\xb5\x4b\x0a\x1b\xb7\xc5\x98\xf8\x44\x67\x71\xa2\x19\x99\x17\xcb\x2c\x8f\xb8\x68\x2a\x46\x05\xb4\xab\x49\xc1\x76\x7b\x9b\x7c\x5f\x88\x08\xb1\xe1\x5a\x5a\xad\xd5\x3a\x29\x9c\x09\x36\x6e\x13\xab\xfa\x9c\xda\x98\xa8\xcb\x5d\xa8\xb1\x37\x20\x23\xe6\x0d\x75\x5b\xbf\x2c\xd9\x28\x92\x0d\x26\xfa\xe8\xf8\xda\x42\xb7\x7c\xa9\xb2\x7b\x0a\x09\x8a\x02\x9f\xb1\x62\xe6\x8b\x62\x8b\x5d\x67\x7c\x69\x08\x54\xbb\xbe\xa2\x10\x94\xe9\x6a\x00\x62\xa8\x55\x78\xba\x2c\x89\x03\x16\x60\xc0\xf8\xf7\xec\x9e\xd3\xc2\x97\xa6\x65\xe6\xf8\x9d\x9b\x07\xc2\xaf\xfa\x85\x07\xf6\xaf\x6d\x1f\x57\x49\x3f\x71\x48\x90\x2e\xb7\x4f\x6d\xd7\xd8\x65\x3a\xbc\x51\xb5\xea\x6e\xa2\x06\xcb\x9b\xe9\x0b\x82\x7d\xea\xfe\x24\x7f\x8a\x7f\xc2\x5b\xb3\x6b\x8c\x30\x8e\x50\xc9\x5c\x13\x88\xc5\x17\x1b\x6d\x4d\x3e\x65\x6d\xfe\x99\x2c\x4f\x67\x27\x17\xe3\x85\x2b\xb7\xd0\x15\xc8\x7e\xec\x0c\xd3\xe8\x69\xc8\x68\x3b\x2e\x52\xb2\x0c\x1a\xa1\x6e\x2f\x1c\x8c\xa6\x17\x37\x84\x67\x78\x78\xe5\x2b\x08\xa8\x2f\x22\xab\xa0\x25\xfb\xfa\x27\xd7\x53\x91\x3e\x30\xac\x94\xe5\x94\xf9\x29\xbc\xfb\xce\x46\xfb\x9b\x6b\xf9\x05\x28\x1d\x9b\x55\xf9\x04\x8b\x7e\x23\xc7\xf9\x81\x0c\xd1\x3a\xd6\x78\x3f\x85\xa7\xab\xf4\xcc\x4a\x45\xd3\x87\x2a\xea\x37\x44\xe8\x67\xce\xd6\x8a\x23\xe1\xed\xa9\x5d\x8f\x88\x65\xca\x6a\x6e\xb0\x3d\x83\x45\xd1\x4f\xfc\xdc\x51\x60\x21\xf5\x9f\x4a\x84\x44\x61\x67\xba\x9e\xf9\x62\x4e\x60\x74\x9e\xf4\x7b\x9d\x69\x27\xa4\x55\xc9\x68\x2e\xa6\xf1\x6b\x97\x6a\x3a\xc0\x9f\x52\x68\x22\xfc\x0a\x94\x1b\x61\xbf\x59\x5f\xa1\x44\xb2\x77\xe1\x47\x6e\x3f\x3c\xc4\xc2\x45\x4d\xb7\x3c\x5b\x46\x3c\x38\x0f\xbf\x0b\x0a\x0d\xb1\xf9\x7a\xde\x7b\x06\xbb\x3b\x54\x50\x7a\x87\x16\xf3\x08\x93\x7c\xdb\x52\xcc\x18\xbf\xe9\xea\xd5\xe1\x4b\x49\x3f\x98\x62\x8f\x73\x01\x9d\x72\xb1\xef\x64\x9b\x86\xa6\x2a\xcb\x6c\xd3\xb0\x14\xa7\xbe\x93\xfb\xe5\x93\xdf\x62\x3f\x7e\xe6\x5b\x0b\x12\xbf\x43\x3b\xa2\x51\x85\x79\x36\x09\x5e\x51\x7d\xb0\x11\x82\x0e\xdb\x67\x1f\x95\x36\xb4\xa4\xc0\xb0\x77\xd9\x07\x94\x9c\x69\xd4\x29\xbb\x5c\x09\xb0\xf1\xda\x35\x3d\xd7\xf7\xaa\xb9\x14\xc0\x13\xd2\x0e\x08\xe7\x0e\xfd\x3b\xec\x03\x6d\x06\x43\x72\x66\xff\x16\xdf\x74\x5c\x43\x09\xfd\xa2\xd6\x6a\x98\x28\x23\x0f\x2a\x4d\x6e\x3e\x4f\x18\xc5\x22\x51\x7f\xe3\x7d\x2c\x16\x00\x1f\xfb\x35\xb9\x42\xdd\xbd\xad\x57\x91\xe9\xa1\x77\x7d\xb4\xc0\x21\x7e\xeb\xd3\x1b\x22\x27\xa8\x2b\x34\x8b\xc5\xbe\xfe\xc8\xb7\x61\x51\x8b\x18\x7b\xd9\xa5\x08\x78\x79\x99\xc5\x64\x3d\xc1\x3d\xa0\xf2\xd6\xf0\xe5\xfe\x70\xe8\x5a\xf1\x5e\xd7\xf1\xc5\xa0\x0b\x12\x72\xb4\x51\x80\x8d\x0f\x99\x8c\x1b\xf4\xba\xda\xcf\x27\xe1\xce\xeb\xf1\x9e\xeb\xc0\x84\x4c\xa7\x5f\x68\xda\x72\x74\xf2\xed\xf0\xfa\x21\x23\xda\xe6\xe8\x5c\x63\xcb\x88\x59\x5a\x4a\xff\xb8\x65\x54\x5b\x94\x2a\xb7\xd7\xab\x5f\x68\xa9\x86\xa2\x50\x6a\xec\xe9\x1c\x54\x4b\x52\x6a\x91\x32\xb6\x4f\xbd\x88\x3e\x13\x1e\x41\x18\xc6\x66\x53\x10\x4d\x1c\xcc\x29\x99\x0c\x9c\x88\x85\x9e\xdd\x8c\x06\x88\x15\xb3\x68\xe4\xb2\xae\x0a\xe2\xc7\x41\x6a\xa9\x28\x14\x61\x9e\x57\x27\xd4\xf1\x94\xc1\x8c\xb6\x2c\x75\x60\xb9\xce\x63\xdc\x6f\x11\xe5\x31\xa3\x74\xb1\x5b\x3a\x55\xba\x42\x91\x6f\x8d\x50\x76\x74\x6d\x68\x40\xf8\x84\x69\x6b\x04\xe8\xa1\xaa\x20\xed\x34\xa3\xb3\x77\xed\x5a\xd7\xfe\x15\x5c\x92\xb1\xda\x53\x61\x4a\x16\xad\x2d\x2f\x11\x2c\xb1\x2b\x00\xcd\x12\xaf\xdc\xf8\x51\x3e\x96\x8d\xac\x9f\x62\x08\x5d\xf5\x59\xce\x71\xa5\x5c\x42\xce\xa1\x64\x53\x69\xe4\x2c\xe5\x0e\x62\x7b\x58\xa6\x8d\x3a\x18\x8f\x44\xc1\x36\x7d\xf3\xce\xa4\x33\x45\x15\x54\x89\x9f\x36\xf6\x42\x99\x68\x86\x51\xca\xd6\x86\xc5\xe3\xf7\x4d\x20\x92\x60\x3c\xa1\x3c\xd4\x6f\x6a\x2d\x94\xf9\xe6\x49\x82\x2d\x9a\x6c\x99\xa4\xb9\xd8\x2c\x44\xa4\xbd\xbd\x4a\x34\xf8\xa0\xf8\xc0\xd0\x81\xfe\xcb\xc5\xdb\x44\x34\x0e\x8c\x8e\x96\xb0\x94\x5a\x1e\x13\x5e\x61\x0d\xe4\xe3\x46\x05\x46\x91\x01\x52\x69\xcd\xd7\xbb\xe3\x86\xaf\xc3\x7c\x4e\xf6\x48\x2b\x51\xaa\x05\xe4\x6d\x98\xaa\x72\x1d\xe4\xe2\x30\x6a\x4e\x21\xfd\xdb\xf2\x4d\x72\x87\xe9\x8d\xf8\x18\xd3\x8a\x05\x90\x9d\x58\x71\xdf\xd5\x3c\xca\xe0\xa5\x35\x9c\xb0\x3c\x96\xc1\x9e\x4b\x4b\x52\x59\x33\xf8\x86\xd7\x94\xa6\xb5\x5f\xe1\xaf\xf7\x80\x6b\xf1\x83\x4b\xe3\x05\xba\x72\xf6\xdd\x60\x02\xc0\x33\x9b\x0e\xaa\x25\x9c\x39\x3e\xd5\x7b\xcf\x90\x86\xc8\x69\x24\x17\x0a\xa2\xf0\xc8\xd1\x6d\xb4\x8b\x40\x4e\x2a\xb1\xf4\x58\x01\x74\xa8\xd7\x35\xc0\x71\xd5\x48\xe6\xde\x84\xfe\x91\xc2\xeb\xdc\x7f\x53\xf3\xff\x00\x00\x00\xff\xff\xa6\x3d\xc2\x83\x8b\x06\x00\x00")

func test_certsClientTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTestuserKey,
		"test_certs/client.testuser.key",
	)
}

func test_certsClientTestuserKey() (*asset, error) {
	bytes, err := test_certsClientTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.testuser.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x6b, 0xde, 0x1d, 0x7, 0xad, 0x82, 0xcb, 0xa, 0x38, 0x32, 0x9, 0x2c, 0x64, 0x8f, 0xef, 0x27, 0x27, 0x68, 0x92, 0xf9, 0xeb, 0xc1, 0xf, 0x30, 0x17, 0xb4, 0xbd, 0x8d, 0x16, 0xbe, 0xf0}}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x41\xaf\xba\x46\x14\xc5\xf7\x7c\x8a\xee\x4d\x83\x82\xa2\x2c\xba\xb8\xc3\x0c\x30\xf0\x06\x19\x04\x11\x76\xa2\xbc\x01\x14\x78\x0a\x3a\xe8\xa7\x6f\xfc\x37\x69\x93\xb6\x77\xf9\x5b\x9c\xe4\xe6\xfc\x72\x7e\xff\x1c\x22\x0e\x0d\x7e\xb3\x48\x14\x53\x9b\x5a\x10\x93\x5f\x54\x61\x94\x62\x8e\x2d\x0b\xea\x5a\x80\xa4\x08\x04\xe5\xb4\xbb\x25\x2f\x3b\x8c\xaa\xf5\x72\x70\xdd\xac\x40\xd9\x6a\x19\xbc\x21\x40\xe2\x72\xab\x2e\xb5\x63\xca\x39\x02\x3e\xd8\x80\xe1\xae\xb0\x88\x4a\x02\x19\xde\x73\xee\x13\x79\xc5\x85\x16\xdc\x4f\xad\x59\x65\x9a\x98\xec\x18\x62\x24\x82\x3d\x02\x16\x63\x12\x3c\x33\x6d\x7c\x15\x9a\xdd\x1c\x2d\x84\x79\x0c\xa5\x2d\xe7\x2f\x85\x61\xd0\x59\x9c\xc8\x2d\x86\x15\xc3\xde\xf1\x03\x83\x18\x74\xd6\xc0\xdf\x8c\x59\x6c\x22\x0d\xf0\xbf\xc2\xfa\xd8\x4a\xfe\x09\x53\x8e\x98\x04\x0c\x06\x07\x16\x09\x81\x89\x91\xa2\x35\x2f\x79\x6c\x59\xb0\xa3\x12\xf3\xcc\xf3\xfb\x9c\x56\xcf\x53\x00\x9c\x20\xc4\x01\x0b\x41\x42\xf8\xbc\xcc\x7b\x4b\x08\x82\x14\x60\x4b\x96\xcd\x44\xd1\xfb\xe1\x22\x8d\x5f\xb5\xe9\x87\x24\x09\xb5\x6a\x04\x23\x7b\x12\xb6\x3d\x2f\xcb\x60\x9f\x9f\x34\x66\xc6\x85\xe5\x2e\x87\x71\xda\x5d\x4c\x69\xdf\xc6\x1f\x23\x41\xdb\xdd\x51\x51\x43\x75\x71\x9d\x87\x9a\x58\x1b\xe3\xe3\xb1\x9b\x57\x7a\xef\xf5\x47\x98\xc8\x2c\xbf\x58\xbb\xa3\x1a\x49\x79\xbd\x04\x8c\xf1\x84\x2d\x1c\xd1\xde\xcb\xd8\x5b\x75\xe7\x67\x43\xdb\x75\x19\xd8\xbb\x56\x31\xa7\xd9\xfb\x25\x7b\x1a\x3f\xb5\x94\x1c\xc6\xe9\xb1\x65\xa2\xe9\x05\xee\x5e\x18\x25\x9b\x28\xb5\x9a\xbe\xdc\xfa\x49\xf6\xfc\x06\xa3\xdb\xfa\x7a\x51\xd0\xe3\xfe\xbd\x22\xf3\x6e\x6f\x1b\x12\x66\x4a\x09\x3f\xb9\x7d\xe4\x76\x61\x72\x7f\x4f\x6e\x1b\x7d\x9a\xc4\x36\xb6\x22\x22\xbb\x9b\xe6\x5e\xde\xe7\xa4\x35\x66\x8b\x09\x51\x43\x3e\xa8\x73\x79\x44\xda\x73\x3b\xa8\xe7\x4b\xbb\x09\x4b\xd2\xfe\x8c\x8a\x6b\x1d\x1a\xdb\x13\xe7\x6b\x1c\xf8\x69\xae\x06\x27\xbc\x18\x3d\x3d\xa5\x45\x75\x8a\xd4\xe2\x4b\x17\xe8\x5e\x19\x16\x65\x51\x18\xd5\x00\x9d\x77\x5c\xf9\xb9\xd1\x56\xfd\x22\xf0\xd5\xcb\xbe\x95\x8a\xad\x15\x06\x6a\x8d\x93\x90\xfe\x22\x50\xbf\xcf\xc5\x75\xf6\x4e\xe8\xc9\x02\x49\x00\x8e\x41\xcf\x9c\x4c\x62\x91\xe1\x7d\x34\x0f\x81\xbb\x2a\x02\x8e\x41\xa4\x82\xa1\xf9\xa7\xb9\xb3\xe2\x71\x9e\x32\xc4\x1d\xcb\x1a\x1c\xe0\x89\x8d\x24\x43\x48\x88\x3b\x12\xc4\x46\xfc\x84\xa1\x81\xc5\xa7\x7f\x37\x22\xe4\xab\x81\x41\x88\xeb\x50\x68\x41\x55\x38\xd5\xf3\xa4\xef\x2c\x05\xbd\xfa\x47\xe1\x98\x4d\x96\xbe\x5c\xe4\x6e\x00\xc0\x71\x09\xfc\xdf\x91\x7f\x7b\xf1\xf5\xf1\x42\xf9\xc8\x00\x96\x63\x6a\xda\xfe\xeb\xaa\x36\x1a\x1e\xa6\x55\x73\x8f\x0f\xc5\x84\xd5\x35\x7a\xb6\xf9\xc3\x88\xef\x6f\xf4\x6a\xba\x74\x73\xbe\x1b\x9b\x45\xbf\x74\x2c\xcf\x82\xf5\x0c\x7f\x77\xed\xed\xa4\xcc\xd6\x72\xe8\xfc\x7a\x18\xed\x26\x2e\xab\x5a\xcf\x5f\xf8\xc8\xaa\x75\x1e\x54\xa1\xb9\xee\xe7\xde\x10\xa7\xbb\xbd\x2f\x0b\x14\x9d\xe9\x75\x4a\xbe\xe7\xce\x2e\xe5\xbb\x1f\xa3\x6e\x0a\x6a\x7f\x25\xa6\xe2\x6a\xb5\x90\x05\x5b\xd5\xc6\xc6\x5d\x3f\x22\xf3\x4a\x0f\x78\xfe\x18\x29\xc8\xdb\x55\xaf\xbb\x43\xa1\x06\x95\x5e\xfe\xa4\x5d\xb2\x7f\x27\x49\x48\x07\xf6\x33\xa2\xf1\x7b\xb4\x72\x9f\x98\x3c\xe3\x8a\x66\x4c\x1d\xed\xed\x9e\x6e\x91\xe9\xbc\x87\xcc\xcf\xd7\x97\x83\xdd\xac\x67\xf7\xf5\x2a\x59\x25\x71\x5c\x46\x3e\x1d\x66\xac\x5f\x1a\xa7\xf8\x06\xfc\x3b\xbf\xa7\x99\x9c\x18\x9a\xab\x48\x18\x7d\xa6\x0c\x5e\xe9\x3c\x0a\x6d\x4e\xd7\xcb\xf3\x26\xfb\xba\x5f\x3d\x4d\xa4\x46\xbd\xc2\x8d\x56\x77\x37\xcb\x3b\x98\x25\xd2\xed\xda\x73\x66\xe1\xf2\x69\xde\xe2\xc0\x93\x9e\x5a\x93\x26\x19\x57\x66\x09\x66\xa5\xb8\x62\x43\x34\xb2\xea\x6f\x95\xde\x1a\x7a\xbe\xc9\x4e\x17\x3e\x55\x0f\x3d\x5b\xf2\x3f\x94\x5f\x9b\x43\x02\xfc\xdf\x1d\xfa\x33\x00\x00\xff\xff\xf5\x60\xa1\x48\xa4\x04\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 1188, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0xa0, 0x55, 0x3d, 0x46, 0x31, 0xb, 0x37, 0x1e, 0xd3, 0x9, 0xd8, 0xd9, 0x3e, 0x34, 0xc6, 0xe0, 0xaa, 0xbc, 0xfd, 0xf6, 0x32, 0x15, 0x9d, 0xe2, 0x72, 0x5e, 0x5, 0x89, 0x83, 0x4b, 0x99}}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\x37\x12\xab\x58\x02\x85\xe1\x9c\x55\xbc\x5c\x35\x05\x08\x1f\x5e\xe0\xe2\xbd\x87\x0c\x0f\x92\xf0\x12\x6e\xf5\x53\xfd\x3a\xed\x93\x9e\xe4\xcf\xbe\xff\xfd\x33\x1e\xca\xaa\xf5\xc7\xf3\xc1\x1f\xc7\x53\x23\x10\xc0\x3f\x3a\x4c\xff\x3e\x88\xa9\xaa\x70\x3a\x54\x1e\x00\x5d\x00\x2e\x04\x77\x7b\xbe\x68\xfe\xd7\x4e\x68\x94\x39\xba\x81\x4d\xac\xe7\xa2\xb9\x8c\x89\x73\xcf\xba\x07\x45\x74\x24\x1e\x7d\xee\xf4\xc6\xad\x4d\x6d\xfa\x8b\x40\x24\x3d\x20\x40\xbc\x3c\xc7\xd9\x85\x94\xb6\xb2\x28\x1a\x27\x2e\x9a\x8b\xfb\xf2\xa4\x29\xc3\x57\xea\x76\xe8\x26\x11\x06\xd4\xe0\x6a\xda\xca\x29\xa2\x10\xbb\xd8\x71\xf2\xee\x1d\xe6\x42\xfe\xa5\x10\x73\x1c\xaa\xe7\xc3\xec\x8b\x2f\x89\x45\x7a\x41\x28\x8c\x63\x08\x6d\x67\xa3\x59\xea\xd5\x84\x4c\x92\x97\x60\xf7\xc0\x6e\x54\x53\x0a\x4e\x29\xd5\xed\x8e\x24\x67\xaf\xe7\x58\x71\x29\xc9\xb5\xfa\x22\x5b\x37\x27\xce\x3b\xf0\xab\x30\x59\x81\x48\x91\xc2\xe7\x1d\xcd\x20\xda\x71\x30\x87\xfe\x7a\x37\x8a\x0c\x28\x53\x83\x81\x50\xaf\x69\x1d\x58\xb8\x5f\xac\x4c\x02\xe1\x6b\x15\xc8\x36\xf7\x29\x05\xc9\x59\xfa\xe6\x9e\x7e\x71\x70\xa4\x9f\x0f\x58\xa9\xd5\x66\x38\xf0\xcf\xc8\xc4\xe6\x6c\x64\xf1\xc3\x89\xb1\xb1\x4a\xbb\x9f\x74\x2a\xdc\xb6\xd7\x40\xfe\x29\x93\xda\x9e\x90\x93\x55\x20\x94\x9f\x15\x79\xcf\xe3\x92\xcb\xaf\x10\x5b\x1f\x5e\x5c\x80\x24\xdb\x27\xb9\x98\x2f\x11\xac\x21\xc1\x71\xf8\x2f\x61\x2c\xb7\x3b\x54\x11\xb8\x80\x07\x93\xca\x03\x21\x38\xe2\x22\xf0\xce\x4b\xe6\x96\x78\xf5\x91\x0a\x35\x27\xb1\x10\xe9\x31\x52\xe1\xa7\xb0\x0b\x0c\x6f\xb6\x23\x3d\x5f\xce\x2b\xd6\xb6\x9f\x19\xe0\xe7\xe2\x24\xf2\x9d\x0c\x45\xdd\x6b\xb4\x36\xc9\x6b\x88\x15\x9e\x11\x89\x55\xe5\xba\xa8\x5a\x23\xc9\xc5\xc1\xd5\x54\x5d\xfd\x93\xf6\xd1\x1e\x4f\xe1\x8f\xab\x7a\x43\xad\x1c\x5c\xb9\xd4\x5e\x29\x16\x2b\x6e\xb7\xfa\xbd\x7c\x3b\x21\xd4\x9f\xb6\xb4\x62\xc9\xb5\x69\xfa\x45\x68\x54\x33\x34\x02\x8b\xd4\x09\x11\x67\x78\x09\xb8\x3b\x7c\x41\x32\xab\xed\x21\xec\x29\x6e\xd5\x8c\x62\xc7\x54\x6a\x16\x4e\x6e\xb3\xb7\x8a\xb2\xb5\x45\x34\xbd\xe7\x98\x75\x15\x56\x38\x37\x6b\x4c\x81\xe4\x89\x63\xe7\x21\x41\x6a\x3f\xb2\xb5\xe0\xdf\x9e\xe7\x95\xed\x4e\x6e\xf7\x03\xbd\x4a\xd1\x64\x0e\xed\xb7\x9e\x26\x77\xfb\xb1\x90\x5b\xab\x20\x62\xfd\x2b\x33\xe8\x21\xf8\x1e\x51\x6b\x38\x33\xe0\x27\xdd\xaa\xce\x2f\x72\xe8\x68\x27\x8c\x8f\x4f\x53\x0b\x69\x19\x8e\xaa\xfd\x79\xab\xaf\x59\x7a\x50\x6d\x28\x67\x99\x50\xc3\x2e\xca\xcd\x1e\xfa\x56\x07\x2c\xe7\x0e\xae\x7b\x14\x66\x5a\xaa\x8a\x6b\x6c\x2b\x52\xc5\x14\xe4\xf2\x9a\x99\x91\xa1\xd0\xa6\x10\x3c\x87\xe3\xd2\x2a\xd9\x11\xcb\xa5\xa5\x95\xeb\x3c\x55\x63\x63\xac\x17\x61\xc5\xb3\x9d\x14\x4d\x19\x3e\xc6\x73\x09\xf0\xc2\xff\x30\x5c\x77\xdc\x18\x88\x34\x03\xa9\x50\xfc\x5d\xde\x78\xee\xf4\xda\x7e\x88\x61\xd5\x46\x1d\xc3\xbb\x8b\x20\xf7\x5b\xf5\x23\x1a\xb0\x9f\x4d\xe2\x1f\xee\x70\x74\x16\x17\x7c\x57\x27\xd4\x14\xfd\x06\x58\x78\x46\xfa\x62\x9b\x53\x8a\x94\x0b\xdc\x64\x02\x0b\x12\x9e\xaf\x7c\x97\xa7\xc0\x4d\x7f\x51\x95\xc5\x77\xea\x1c\xc2\x72\xc8\xad\xa3\x06\x56\x6c\xc7\xee\x99\x10\xb1\xc8\x8b\x29\x34\x14\x0d\xff\xb7\x98\x4d\x58\x0c\x39\x15\xd2\xb3\xe0\xf7\x63\x0f\x6b\x15\x42\xf9\xb5\xbb\x5d\x46\x5c\xf0\xc7\xc4\xb1\x76\x4c\xc4\xc0\x52\x87\x3e\x0a\x60\x7e\x36\x4c\x7d\xee\x9c\x02\x4a\xc9\x9f\x65\x56\x7e\xc4\xe7\x26\x7d\x15\x1e\x69\xce\x47\xfe\x66\x96\x94\x6d\xad\x26\x24\xf3\xbd\xe2\xa8\x7e\x79\xd7\xef\x9f\x0f\xc5\xe5\xa9\x3d\x14\xf1\x2c\xd1\x49\x0e\x34\xda\x1f\x70\xc8\xc1\xbb\x5d\xb6\xfb\x4a\x87\x60\x0e\x41\xff\xe9\x1f\x88\xf7\xa6\x0c\x67\x87\x96\xdc\x02\x43\x75\x2a\xaa\x2c\xd4\x29\xcf\xc2\x05\x5e\x62\xab\xe8\xf4\x27\x91\xbb\xf6\x2b\x95\x42\x9b\x02\xb1\x09\x31\xf1\xa2\x3b\x98\xfb\x96\xcd\x92\xa5\xd2\xd2\xfb\x8d\x84\x46\xab\x87\xcf\xef\x2d\x55\x4d\xeb\xe2\xb2\x2a\xe4\xca\xf0\xc3\x1c\x71\xa4\xb4\x3c\x39\xb0\x7b\x98\x06\xc6\xcf\xfc\xbe\x21\xce\xe4\xb5\xc9\x1b\xfd\x71\xb0\x3b\x7f\x6f\x05\x37\x0e\x3b\x07\x24\xa4\x49\x43\x11\xdd\x46\xe6\x57\x2a\xcc\x8f\x0c\x97\x24\x1a\x47\x71\xd1\xce\x50\x73\xa4\x61\xbc\xf7\xe6\x21\xaf\xed\x06\x95\x42\x79\xf0\x7c\x8b\x4e\x84\x74\x72\x16\xc1\x73\x69\xff\x85\x41\xb0\x91\x48\xcd\x95\x67\x7b\xbd\xd4\x94\xca\x6e\x70\xcf\x6d\x24\x89\xaa\xe9\xea\x7c\x2b\xe0\x1f\x42\x8e\x83\x3b\x6e\x47\x0f\xf2\x89\x34\xd9\x0d\x86\xb5\x11\x5d\xb2\x53\x50\x4e\x3e\xa3\x18\x72\xfd\x76\x3d\xa4\x8c\xb1\x49\x59\x13\x36\xa4\x83\x48\x96\xdd\x12\x92\x58\x84\x75\xa3\x97\x03\xbe\x37\x3a\x22\xd9\xce\xca\x4f\x74\xb2\xb7\x84\x4f\xd3\x4b\x77\x1b\xc6\xfb\xe9\x3f\x52\xbe\xd8\xd8\x59\x32\x77\x1a\x11\x5d\xc9\x90\x47\x9a\x8a\x7c\x2b\x74\x89\x95\xf4\x36\x77\xf1\xd8\x37\xf7\x48\x0e\xb5\x5c\x2f\xf8\x7b\xf2\xd4\xc6\xdf\x81\x16\x7a\x5f\x37\x2c\x1f\xd1\xbc\x08\x6f\x90\xa9\x1d\xf7\x2a\x6b\x74\x10\x11\x2d\x5f\x79\x30\xc9\x3c\xd0\x3e\x24\x36\x9a\x53\x6a\x81\x13\x54\x6f\xf0\xe4\x3c\x46\x78\xc6\xa7\x1f\x04\xd9\xfe\x40\x2f\xff\x5b\xc2\x27\x5a\xb5\xac\x8e\xcd\xe7\xc9\xdc\x17\x7c\x1b\xaf\x92\xfc\x21\x89\x8a\x05\xfe\xf0\x39\xf6\x48\x7b\xe5\x2f\x9d\xcd\x57\x85\xc3\x37\xf8\x11\x29\xb3\xdb\x7e\xf7\x6c\xab\xa3\xf2\xb4\x29\xff\xb8\x87\x3d\xe8\x8c\x16\x65\x40\x68\x0c\xfe\xbd\x32\x1f\x36\x33\xf1\x09\x61\x5e\x7b\x94\x38\xc5\x32\xbc\x93\x0c\x3c\x05\x0f\xa2\x4d\x2e\xa2\x1d\x1d\xd0\xec\x6c\x88\x92\x45\x28\x5b\x17\xa6\xb1\x83\xb1\x59\x67\x4d\x0c\xfb\xd0\x96\x11\xf9\x4b\x0a\xb4\xc4\xff\xa6\xe6\xff\x01\x00\x00\xff\xff\xcb\xe3\xad\xbc\x8b\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0x9e, 0x24, 0x86, 0x2c, 0x41, 0x3, 0x46, 0xf5, 0x74, 0xa0, 0xac, 0xc9, 0xf7, 0xc7, 0x14, 0x37, 0xa2, 0xdf, 0x9, 0xe, 0x35, 0xc6, 0x23, 0x81, 0x9f, 0xf8, 0xa5, 0x94, 0xc4, 0xc5, 0xe0}}
	return a, nil
}

var _test_certsServerTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x3b\xb3\xaa\x48\x00\x84\x73\x7e\xc5\xe6\xa7\xb6\x10\x50\xc4\x60\x83\x19\x66\x78\x33\x38\x3c\xe4\x91\x1d\x40\x06\x11\x44\x54\x18\xf1\xd7\x6f\xdd\x13\xdc\x1b\xec\x76\xd4\xd5\x5d\xd5\x51\xd7\xf7\xf7\x2f\x41\x6c\xda\xe4\x2f\x1d\x87\xb1\x6d\xd8\x3a\x88\xf1\x4f\x2a\xf8\xb6\x8d\x5c\xa4\xeb\xa0\xd5\x19\xe0\x36\x04\xcc\x0e\x01\x11\x75\xd5\x11\x47\x71\xf2\xdc\xa7\x15\x48\x95\x4a\x9d\xa5\xa8\x38\xa2\xb9\xe3\x8e\x85\xdd\x2e\x15\x01\x14\x7b\x90\x02\x2e\xb8\x1f\x1c\xf9\x10\x98\x40\x4a\xb0\xde\xfa\x0e\x95\x0f\xdd\xb7\xe2\x2c\x79\x4a\x46\x3f\x4c\x38\xe6\x39\x3a\x51\x8a\x30\x7f\xa3\x52\x26\x8f\x6a\x38\xb4\xb9\xcc\x18\xdd\x60\x6e\xb5\x15\x11\xfc\x0e\x70\xf2\xc1\x92\x8f\x18\x0f\x62\xf0\x49\xdb\x8a\xf8\x5d\xc2\xc9\xc7\xe6\xbf\xb3\x0e\x24\x7e\x68\x73\x0c\x7e\xc6\x5c\xcc\xfb\xdf\x63\x42\x2e\x33\xce\x18\xbe\xf8\x60\x63\xea\xd1\x64\x46\x76\xa9\x20\x8a\x21\xa0\x09\x00\x5b\x1b\x22\x0e\x7e\xf5\x2e\x18\x6d\x08\x28\x8a\xd2\x87\xbc\xee\x96\xad\x35\x57\x4a\x6c\x12\x27\x13\xce\x8d\xe3\xc0\xda\x37\xb4\x6d\xf7\x5d\xcc\xcd\x56\x0c\xb2\x67\xc3\xc9\xbb\xdd\xa3\x06\x67\x75\xd1\x22\x66\xb6\xf8\xc2\x9d\xdb\x7c\xb4\xf8\xb4\x5d\x67\xc6\x4f\xb6\xc5\x6c\xad\xd7\xdd\x51\xef\x84\x5c\x9e\x87\xa2\xba\xd3\xfa\xb6\x16\x62\xb4\xd7\x86\x5b\x0f\x5f\x8f\x80\xd9\xc1\x97\xab\xcc\xa7\x3e\xbc\xa0\xca\x4b\xdb\xbb\x7b\xea\x97\xfb\xb9\x83\x00\xe9\xbc\x90\x6e\x83\x98\x66\x6b\x13\x6f\x91\x50\xee\x9f\xf0\x28\xa5\xea\x94\x05\x35\xcf\x56\x69\x9f\xe2\x8f\x3c\xdf\xea\x0b\x23\xc3\xde\x0f\xb2\x3a\x57\x76\x80\x2f\xdf\x1e\x4e\xfa\x29\x0e\x11\x6d\xd5\xec\xec\x4a\x99\x21\x29\x9b\xd1\x8a\x65\x21\x0c\x0d\xec\xe9\x0b\xb8\x9c\xc6\xeb\xb3\x71\x02\xb3\x05\xcd\xe4\x44\x5d\xfd\xe2\xea\x97\x64\x4d\xe6\xc1\x1f\x0b\x33\xdc\xde\x3e\xad\x6b\xc9\xd7\xc4\x57\x5e\x53\x56\xbd\x71\xe8\x0f\x17\x5f\xc6\xae\x40\xc3\x33\xb4\xac\x07\xac\x74\x99\x5f\x88\xd6\x1f\xc3\xf4\x75\x0e\x60\xe1\x1b\xa4\xbe\x58\xd4\x73\xcb\x87\xaa\x85\x53\xa1\xc5\xa7\xb5\x64\x69\x79\xf8\x4a\xd9\x96\xaa\x0d\x08\x96\xfe\x81\xcb\x5a\x18\x1c\x45\x04\xcc\x87\x00\x98\x5d\xd6\xc1\xca\x07\xdb\x5f\x9f\xa8\x11\xc7\x50\xe4\x14\x03\x6e\x1b\x23\x02\x31\x64\xe4\x64\x45\x09\x46\x08\xb8\x90\xb1\x07\x64\xd8\x80\xb4\x42\x02\x88\x81\xf4\x53\x86\x18\x7b\x1d\x78\x32\xd6\x3f\x4b\x99\xb4\xa5\xd9\x2e\x95\x12\xe9\x70\x1d\xe7\xd2\x3c\x74\x79\xba\x5a\xd0\xd2\x00\x00\xa6\x85\xc1\x1f\x09\x7f\x2c\xfe\xbf\xab\x22\xc6\x30\x04\x5e\x91\x87\xb7\xc9\x1e\xbc\xc8\x3a\x9a\x77\x0e\x57\x68\xd4\x83\x55\x68\x89\x1b\x0b\x1b\x87\x9f\x4c\xb7\xe9\xb7\xbd\xa3\x1f\xa6\x66\xbd\x4f\x65\x6e\x5c\x72\xdd\x0b\xa2\xf1\x15\x86\x5f\x50\xa9\x8d\x79\x08\xee\x9b\x61\xd0\xc1\x1b\xa2\x54\x3a\x4e\xeb\xcb\x50\x0a\x5c\xed\x60\x7f\x56\x84\xe3\x49\x49\xb7\xac\x7c\xed\x33\xab\xb1\xb2\x97\xf1\x55\x1f\xcd\x34\x39\xa1\xc7\x8b\xe9\xae\x04\x0f\xb6\xfc\xbe\xc9\xca\xb3\xcb\xeb\x08\x41\xa3\x0c\x46\x1e\x44\x87\xc4\xcb\xce\x79\xc1\xba\x39\xba\x09\xa5\x18\xed\x8b\xd6\x4f\x68\x73\xaf\x36\x75\x1a\xea\xbb\xa0\x82\xb8\x4e\x4c\xf1\x78\xf4\xdd\x86\xcc\x6f\x16\xb9\x3a\x86\x96\x6a\x9b\x62\xa2\x7a\x75\x90\xca\x0e\x71\x47\x8a\x7c\x89\x2e\xde\x5b\xe8\x9e\xcb\x75\x77\x8c\x8b\x29\xb1\xd4\x26\x0a\x77\x26\xb9\xaa\x51\xdc\x69\x59\xb5\xf6\x9e\xea\xdc\xe5\x6f\xe7\xe2\xe4\x6a\xf2\x61\xa2\x44\x80\x86\x86\xb3\x14\x9f\xc7\x9d\x3d\x95\xe6\x8d\x93\xcd\x59\x90\xa3\x93\xe6\x67\x07\x5a\xed\x0f\xd5\xb5\x15\xf5\x4d\x6a\x5c\xf1\x7b\x19\xe5\x1d\x0f\xe0\x5e\xf3\xda\xcb\xb1\xfe\x9e\x97\x99\x76\xb1\x2d\xc2\xe5\xc3\x7c\x72\xcd\x95\xde\xcd\x6e\xfc\x1f\xe1\x07\x29\x98\xa0\xff\x62\xe6\xdf\x00\x00\x00\xff\xff\xe3\x89\x66\xe1\x83\x04\x00\x00")

func test_certsServerTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsServerTenantCrt,
		"test_certs/server-tenant.crt",
	)
}

func test_certsServerTenantCrt() (*asset, error) {
	bytes, err := test_certsServerTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/server-tenant.crt", size: 1155, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x77, 0xa3, 0xd4, 0xf7, 0x8d, 0x25, 0x39, 0x61, 0xee, 0xbf, 0x2e, 0x81, 0xb9, 0xfc, 0x10, 0x27, 0xe0, 0x5a, 0x3c, 0x7c, 0x7c, 0x4, 0xb8, 0xf4, 0xe3, 0xad, 0x1f, 0x62, 0x61, 0x5d, 0x42}}
	return a, nil
}

var _test_certsServerTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x50\x02\x85\x61\xcf\x53\x8c\xa7\xb6\x9a\x4c\x23\x46\x5c\x72\x6e\x72\x03\x0e\x9a\x9c\x73\x7a\xfa\xad\x1d\xbd\xc7\x1e\xf3\xbb\xef\x3f\xff\x1b\x2b\x48\x8a\xf9\xc7\x71\xc1\x1f\xcb\x51\x02\xe0\x09\x7f\x34\x21\xfa\xf7\x40\x86\xa2\x08\x13\x50\x58\x00\x34\x0e\xd8\x02\x40\xba\x99\x59\xf7\x14\x66\xe9\xc1\x44\xae\xc6\x0d\xf0\xe1\x76\xed\xd0\x63\x8b\x8f\x82\xf5\xe9\x00\x5b\x4f\x47\xcb\x6f\xfe\x17\xe5\x27\x7e\x89\x38\xf4\x8d\x6c\x82\x1d\x1d\x65\xe5\x62\xba\xb9\xde\xda\x6e\x2c\xa3\x21\xba\x2c\xc1\x59\xaa\x5d\xcf\x60\xc4\xcc\x65\xea\x43\xcd\x97\xe3\x77\x5f\x20\xfb\x4b\x9d\x48\x3b\x4d\x9e\x91\xe3\x8f\x7a\xa3\x3b\x28\xf6\xa3\x12\xe7\xd0\x31\x71\xbb\x38\xa5\xc2\xf1\xb4\xc1\xb9\x4a\x59\x4c\x1e\x68\xf7\x1e\x10\x18\x60\x30\x0d\x3c\x26\xd8\xe7\xee\x19\x7e\xe2\x7b\xcb\xd1\xca\x60\x96\x09\x8f\x46\x3e\xde\x1f\x1e\xea\xf0\xaf\x09\xdb\x86\x8e\xd5\x97\xa8\x26\x2d\x62\x23\x4a\xde\xe1\xf5\x16\x5c\x59\xc6\x68\x2c\xc2\xb4\xbe\xe3\x70\xe7\x72\x2a\x5d\xa2\xea\xf2\xed\x55\xa3\x2d\x53\xb5\x3f\xe2\xe9\xef\x73\x6c\x0e\x44\x55\x87\xa7\x49\x4e\x9b\xab\x6f\xc2\xad\x98\x49\xe4\x4d\x3a\xe9\x70\xc3\x11\x3c\x75\x6c\xcc\x8a\x6b\x85\xb0\x74\x2e\xea\x0c\xc1\xb6\x2a\x4d\xa1\x7a\x48\xb0\x84\x4d\xf9\xf5\x58\x2f\x8c\x2a\x04\xe2\xee\x9e\x82\x0f\x21\xe9\x0b\x01\xfd\xf5\x84\xd8\xbf\x8a\x6e\xfc\x08\x9f\xe1\xe4\x17\x32\xb9\x24\x3c\xae\xb3\xd7\xa9\xf0\xc0\x06\x2c\x18\x15\x16\xd8\xbc\x4c\x9a\x34\x8d\x78\x2a\xd9\xdb\x92\x0f\x4d\x8b\xa5\x63\x1f\x96\x5a\x81\x8d\x05\xb1\x3f\xa9\x0d\xb2\xd7\x96\x97\xc5\x1d\x16\x07\x0f\xd5\x63\xf0\x89\x2c\x6b\xd2\xef\x8b\x7a\x46\xad\xb8\x46\x35\xaa\x68\x59\x8f\x97\x74\x5a\x34\xbd\x2a\x40\x19\xb7\x49\x92\x11\x8b\x3d\xd3\xf1\x98\xe7\x79\x9c\x7a\x18\x00\xce\xdc\xd1\x91\x03\xee\xc9\x42\xa9\xf9\x86\x53\x32\x13\xbe\x1a\xa1\xb7\xb1\xcd\x23\x59\x4f\x16\xb2\x8a\x19\x2a\x54\xd5\x08\x2b\x50\x91\xe4\x79\x2b\xb1\xf0\xdb\x4a\xc1\xec\xaa\xcb\xe7\x2b\x58\x89\xad\xf3\x77\x13\x59\xac\xb1\x5e\x82\xe2\xa5\x03\xb2\x0f\x91\xe6\xd2\x2c\x4c\xa5\x64\xff\xd2\x1b\x4f\x72\x4b\x1e\x2d\xef\x22\x41\xa1\x83\x0d\xb0\xe2\x35\x24\x23\xb3\xe5\x57\x0e\x5a\x30\x6c\x44\x13\xc7\x26\x9a\x73\x54\xbf\x6f\xbc\x05\xd3\x9f\xc8\x66\xa4\xa0\xe3\xed\x65\x9b\x53\x4d\x43\x2e\x20\x1b\x15\x99\xef\xa9\x3e\x6b\x5f\x88\x8f\x98\x53\xf6\xb1\xf0\x93\x1c\xbf\x2e\x9c\xf9\xc9\x18\x5b\x71\x08\x98\x46\x5c\xcf\x76\xf9\xb5\xef\x1b\x5d\x7c\x94\xaa\x27\xd5\xd5\x52\x0b\xcf\x24\x7a\x24\xd1\x38\x7b\x7c\x6d\x66\xaf\xcd\x51\x21\xb4\x8c\xd4\xc0\xe8\x2e\x30\x4a\x2c\x30\x1d\x6a\x6f\x6c\xda\x96\x90\xa6\x17\x52\x3c\x01\xc4\x35\xc7\x30\x6d\xf4\x54\x0c\x60\x86\x48\x62\xb3\xc6\x3e\xdd\x2b\x98\x7f\x74\x20\x26\x62\x6a\x01\x0f\x6a\x24\x4d\xff\x36\x3b\x9e\x18\xfc\xe4\x8e\x6e\x70\x18\xdc\x52\x8a\xad\xb3\x13\xf8\x62\xed\x58\x82\xb3\xbb\x27\x95\xc3\x5b\x1f\xdb\xd4\x57\x97\x92\xf1\x0f\x50\x6f\xea\xbb\x6a\xa3\x29\x16\x8b\x19\x7a\x5d\x3f\x81\x90\x79\x54\xa8\xe2\xc7\xd4\x66\x3d\x72\x12\x72\xb1\xe0\xe0\xf8\x78\xc5\x49\x4e\x04\xf3\x0d\x9c\x5b\x70\x8a\x82\xce\x2d\x70\xfa\xad\x45\x61\x30\x25\xeb\xcd\xbf\x62\x0b\x3d\xa1\xee\xdd\x13\x0f\x4e\x04\x25\xc8\xbe\x88\xcc\x4f\x8f\x8e\x07\xbb\xc3\x22\x21\x89\x24\x13\x4d\x84\x4e\xf2\xbb\x3e\x19\x7e\x58\x7c\xe3\x83\x4b\x6b\x67\x1e\xcd\xc4\x8f\xfd\x8d\x7e\xfc\x5e\xc8\x41\x05\x95\x7e\xc9\xe8\x84\x43\xd7\x77\x5e\x3b\x32\x7c\xdc\x5a\x74\x6b\x2e\xdc\xaf\x01\x3a\xc1\x5f\x1c\x38\x34\x90\xbf\xe7\x24\x65\xe8\xc3\x50\x47\xb5\x84\xe6\x6c\xcb\x9d\x4c\x27\xcc\xab\x26\x3a\xce\x84\xe4\x21\x27\xd9\xd8\x77\x92\x79\x6f\xee\x47\x95\xe8\x6d\x6f\x18\x81\x55\x02\x26\x36\x30\x1b\x83\x61\xe7\xf7\xfe\xee\x3f\x14\x8c\x12\x48\x88\x39\x71\xe0\x2e\xfb\x8a\xaf\x60\x36\x02\xfa\x3c\xcd\x14\xba\x4d\xaa\xf5\xb2\xa1\x8c\xcb\x21\x46\x13\x41\xe1\xc5\x58\x79\x63\x99\x43\xf7\x5c\x37\xc8\xfe\x98\x8e\x2f\x26\x8a\x41\x84\x6c\x0b\x38\x46\xd2\x65\xa4\x2e\x16\x96\x7d\x24\x18\x29\xe4\xcb\x8c\x81\x0c\x18\xee\x45\x7e\xbf\xb8\xfc\xb5\xd8\x55\xb5\x3d\xb3\xb9\xc8\x8c\x34\xe3\x82\xcd\x91\x84\x3b\x70\x18\xa6\xfd\x30\x11\x2b\xb9\x29\x15\x48\x72\xb9\xb1\x84\x9a\x97\xde\xc0\x08\x75\x9b\x5f\x59\x09\x2d\x9a\xe8\xd0\x41\x7b\xe6\x6e\x20\xbd\x41\xc7\xed\xf1\x6e\xc7\xbb\xcf\x95\x91\x00\x4e\x93\x41\x19\xc5\xfc\xf1\x9e\x3f\xd5\x9f\xcb\xec\x2e\xae\xbf\x8f\x6f\xfd\x13\x49\x1b\x44\xf7\x5e\x27\xbc\x04\x05\x5d\x28\x8a\xd7\x59\x6e\xb1\xae\x17\x0c\xd6\x05\x44\x28\xb1\xc8\xb2\x7d\x98\x9e\xe7\xc0\x37\xf5\x75\x29\x3c\x8e\xd2\xf5\xa8\xca\x7d\xed\x01\xca\x6d\xf8\xb3\xb2\xcb\xb8\x56\x52\xea\x71\x61\x01\xcd\xea\x09\x7e\x99\xba\x6e\x3d\x9a\x50\xa4\x70\xb9\x45\xe9\xdc\xe7\xf5\xa1\x7d\x57\xb3\xec\x36\x0a\x53\x4a\x7c\x81\xd5\x57\xf3\xee\x16\x6e\x25\x0f\x1e\xfd\xe4\xd8\x42\x92\xec\x50\x78\xa2\xf3\x05\x0d\xf3\x24\x30\x0c\xc2\x95\x11\xcb\x50\x16\x29\x9f\x4b\xb4\x65\x24\xf1\x08\x2f\xb9\x5e\xd1\xc4\xeb\xee\x68\x0e\x74\x57\x1f\x8c\x56\x51\xd4\xea\xe8\xde\x26\x61\xfb\xb7\xf1\x84\x19\x83\x48\x81\x03\x9d\x20\x1c\xc4\x40\x1b\x5a\xce\x15\xd8\x6a\x16\x73\x9c\x3d\xe0\xd6\xd2\xd7\xc3\x8a\x26\x2a\x84\xbf\x1c\x52\x1e\x12\xa5\xac\x12\x1d\x8a\x1b\x2c\x9c\xca\x72\x13\x7e\x5f\x60\x76\xcf\x99\x6c\x85\x42\x5b\xcf\x72\xb7\x4d\xea\x13\x46\x3a\xdf\x6e\xdc\x15\x82\x40\x0c\x7f\xcc\xa4\xcf\x78\x96\x0a\x7d\xa4\x17\x35\xfe\x26\x0c\x93\x47\x6a\xa3\x83\x8e\x45\x88\x93\x46\xca\xbf\x7f\xa1\x7f\xac\x08\x26\xff\xff\xb9\xf9\x6f\x00\x00\x00\xff\xff\xbf\xaa\x61\x1f\x8f\x06\x00\x00")

func test_certsServerTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsServerTenantKey,
		"test_certs/server-tenant.key",
	)
}

func test_certsServerTenantKey() (*asset, error) {
	bytes, err := test_certsServerTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/server-tenant.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x40, 0x54, 0x4, 0xc5, 0x5d, 0x3, 0x5, 0x46, 0xaa, 0xcf, 0x7f, 0x32, 0x34, 0x38, 0xc5, 0x8c, 0x6c, 0xd7, 0xa8, 0x25, 0x36, 0xbc, 0x46, 0x87, 0x97, 0xd8, 0x7e, 0xa5, 0x74, 0x6c, 0xab}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca-client-tenant.crt": test_certsCaClientTenantCrt,

	"test_certs/ca-client-tenant.key": test_certsCaClientTenantKey,

	"test_certs/ca-server-tenant.crt": test_certsCaServerTenantCrt,

	"test_certs/ca-server-tenant.key": test_certsCaServerTenantKey,

	"test_certs/ca.crt": test_certsCaCrt,

	"test_certs/ca.key": test_certsCaKey,

	"test_certs/client-tenant.123456789.crt": test_certsClientTenant123456789Crt,

	"test_certs/client-tenant.123456789.key": test_certsClientTenant123456789Key,

	"test_certs/client.root.crt": test_certsClientRootCrt,

	"test_certs/client.root.key": test_certsClientRootKey,

	"test_certs/client.testuser.crt": test_certsClientTestuserCrt,

	"test_certs/client.testuser.key": test_certsClientTestuserKey,

	"test_certs/node.crt": test_certsNodeCrt,

	"test_certs/node.key": test_certsNodeKey,

	"test_certs/server-tenant.crt": test_certsServerTenantCrt,

	"test_certs/server-tenant.key": test_certsServerTenantKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca-client-tenant.crt":        {test_certsCaClientTenantCrt, map[string]*bintree{}},
		"ca-client-tenant.key":        {test_certsCaClientTenantKey, map[string]*bintree{}},
		"ca-server-tenant.crt":        {test_certsCaServerTenantCrt, map[string]*bintree{}},
		"ca-server-tenant.key":        {test_certsCaServerTenantKey, map[string]*bintree{}},
		"ca.crt":                      {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":                      {test_certsCaKey, map[string]*bintree{}},
		"client-tenant.123456789.crt": {test_certsClientTenant123456789Crt, map[string]*bintree{}},
		"client-tenant.123456789.key": {test_certsClientTenant123456789Key, map[string]*bintree{}},
		"client.root.crt":             {test_certsClientRootCrt, map[string]*bintree{}},
		"client.root.key":             {test_certsClientRootKey, map[string]*bintree{}},
		"client.testuser.crt":         {test_certsClientTestuserCrt, map[string]*bintree{}},
		"client.testuser.key":         {test_certsClientTestuserKey, map[string]*bintree{}},
		"node.crt":                    {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":                    {test_certsNodeKey, map[string]*bintree{}},
		"server-tenant.crt":           {test_certsServerTenantCrt, map[string]*bintree{}},
		"server-tenant.key":           {test_certsServerTenantKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
