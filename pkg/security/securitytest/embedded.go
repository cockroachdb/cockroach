// Code generated by go-bindata.
// sources:
// test_certs/ca.crt
// test_certs/ca.key
// test_certs/node.crt
// test_certs/node.key
// test_certs/root.crt
// test_certs/root.key
// test_certs/testuser.crt
// test_certs/testuser.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xc9\xce\xb2\x48\x18\x85\xf7\x5c\x45\xef\x4d\x07\x01\x71\x58\xf4\xa2\x26\x91\xa1\x80\x82\x62\x28\x77\x82\x08\x0a\x88\x20\x82\x7a\xf5\x9d\xff\x5b\x74\xd2\xdd\xff\xbb\x3c\x8b\x93\x37\x39\x4f\x9e\x3f\x7f\x1d\x24\x86\xe9\xfe\x81\x48\xc0\xcd\xbd\x89\x00\x27\x3f\xa9\x44\x4d\x13\xc3\x2f\x42\xa0\x58\x94\x60\x36\x21\x28\xcd\x00\xd8\xf5\x45\x4f\x3b\x83\x15\x1e\xb7\x2d\x74\xe9\x99\xf2\x74\x95\x79\xc6\x4c\x58\x76\x77\x34\xab\x29\x77\x01\x23\x0e\x64\x60\x96\xec\x2f\x09\x29\x04\x06\x50\x22\x82\x2a\x6a\x31\x75\x77\x3b\x69\xd6\x24\x12\xb7\xa3\x41\x34\x93\x59\xe0\x98\x31\x4c\xe6\x37\xce\x54\x77\xc8\xdb\x5d\x25\xd4\xb2\x64\x4b\x32\x1f\xaa\xdc\x95\x28\x17\x33\xfd\xd2\x99\xf2\xfc\xe3\xe2\x68\x95\x54\xb9\x4b\x79\xfe\xef\xec\x06\x06\x1a\x98\x33\x01\x3f\x65\x36\x99\x9b\x7f\xca\x24\xa1\x96\xef\x3d\x07\x1c\x96\x6e\x0c\x01\xe5\x98\xb8\x93\x50\xc7\x4f\xa6\xee\x6f\x27\x04\x31\xe3\x08\x81\xd0\xfc\xef\xfb\x10\x32\x80\xcb\x92\xf8\x12\xc0\x08\x01\xd6\xa1\xb2\x24\x10\xb8\xba\xd0\xdf\xef\xae\xed\xcc\xf8\x54\x6f\x12\x3d\xc3\xbb\x85\x4d\x74\x12\x91\xab\x03\xa7\xe5\xfd\xc8\x5c\xd8\x3f\xab\x69\x39\x7c\xc6\xb8\x7e\xec\xef\x75\x28\xd5\x23\x7a\xf8\xcf\xc5\x3e\xd1\x5e\x43\x71\xa9\x6d\xf9\x1a\xd6\x1a\xd7\x58\x4b\x4a\x52\xe7\x42\xcd\xbf\x82\xae\x7a\x72\x30\xf4\x46\x04\x73\xe1\x8a\x0b\x95\xf7\x2f\xb4\x20\xa1\xba\xd4\xe6\xc1\x95\xf6\xdb\x43\x6e\xd8\x11\xd7\x45\xa0\xc4\x61\xdc\x5f\xbc\x73\x34\x05\x89\x93\x35\xb7\x43\x77\xdc\xad\xf0\x2d\xd9\x68\x73\x96\x3b\xde\x10\xcd\x35\xdc\xae\xb4\x66\x51\x7f\x56\x29\x50\xe1\x83\x8f\x4a\x2a\x05\xfb\x93\xce\x37\xf4\x69\x3a\xbb\xb8\xe7\xaf\xa8\x75\x46\x53\xeb\xd0\xab\xb6\x3f\xcb\x78\x5f\x15\x65\xab\x20\xb9\x59\xd0\x0a\x64\x0b\x5f\x49\x12\xd5\x92\xc3\xea\x71\xb7\x56\xcd\xd5\xd5\xb2\x1d\x92\xca\x43\x2b\xa6\xeb\xa3\x38\x6b\xdb\x65\x33\x18\x35\xc7\x75\x04\x1a\xfa\x2c\x15\xcb\xbb\x55\xc4\x19\x6c\x8d\x9b\x72\x3c\x54\x65\x46\x12\x78\xb5\xf4\xdc\x62\x8b\x0e\x16\x9b\xc1\xbb\x37\x9f\x6b\x2f\xa9\xfa\xa6\x50\x33\xdb\x5d\xa7\x81\x93\x15\xc4\xef\x8d\xd7\x75\x1a\x0a\x6b\xdc\x3f\xef\xe7\xef\xa8\xf2\x3e\x47\x60\x26\x00\x9c\x68\x4b\x11\x9b\x71\x29\x70\x1c\x2c\x7d\xc0\x0e\x32\x04\x0c\x4b\xa0\x74\x6a\x0a\xcd\x5f\x20\x9d\xc9\x4c\xa0\x3c\x33\x93\x02\x01\xc1\x65\x8b\x00\x23\xbf\xa3\x0f\xff\x2c\x06\xb5\x60\x27\xdb\x4c\xf2\x21\x70\x41\xe6\xa9\x5d\x31\xac\xa3\x2d\x82\xd1\xe9\x6e\xe3\x78\x29\x37\x45\x17\xdf\xc4\xee\x1a\xae\xbb\xb6\xc7\x16\xbe\xd6\x23\xe4\x62\xd4\xa7\x53\xc5\xce\xca\xc3\x3d\x8b\x21\xaa\x5f\x8e\x2c\x15\xc1\x21\xbf\xf2\x7a\x13\x3a\xda\xd6\x72\x4b\x68\xd5\xa7\xd2\x00\x2d\x0b\x73\x75\x4d\xe4\xb7\x9d\x7a\xe1\xd8\x36\x7d\x9a\x3a\xed\x2b\xf0\x65\x1a\xec\x70\xe9\x1f\xd7\xa7\x8b\xf2\x1e\x5d\x7d\xb3\x96\xc6\x31\xe5\x69\xd9\x9b\x5a\x8a\x36\x22\xef\x84\xb9\xf1\x52\x27\x55\x31\x7f\xae\xce\xae\xa9\x14\x66\xb9\x7f\x6c\xbc\xf5\xbd\x6a\x8c\x93\xb1\xb6\xb9\x0e\xe1\xe4\x15\xc7\x7c\x75\xf4\x17\x31\x0a\x85\x34\xe7\x8b\xaa\x8b\x57\xb4\x90\xf9\x25\x07\x81\x76\x38\x0f\xef\x6c\x48\x0c\x6f\xeb\x6f\xea\xec\x2c\xba\x51\xc5\xe7\x62\xbb\xd4\xd9\xda\xac\x46\xf0\x8e\x95\xde\xfc\x60\x4a\xc8\x74\xa3\x51\xdf\x2e\xa4\x00\xe5\x20\x60\xc0\xd9\xc9\x43\x38\xcd\xfe\xa8\x3c\x63\xb5\x17\xa2\x79\x25\x45\x77\xe9\xbd\xef\xd2\xe8\xb5\x4d\x7b\x2b\x93\xc7\x78\xbc\x4d\xc7\x39\xe0\x96\xed\x46\x16\xed\x0c\xeb\xed\xc9\x9f\x93\xa4\xc9\x64\xeb\xfb\x2c\x6c\xea\x5d\x07\xd2\xed\x5f\xd2\x8f\x26\x88\x8b\xff\xaf\x8e\xbf\x03\x00\x00\xff\xff\x04\x29\x2f\xd9\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xb7\x12\xa3\xd0\x01\x85\xe1\x9e\xa7\xd8\x9e\xf1\x88\x1c\x8a\x2d\xc8\x5c\x2e\x20\x91\x43\x07\x22\x83\x00\x11\x05\x4f\xef\xf1\xd6\x3e\xed\x69\xfe\xee\xfb\xcf\xff\x26\x2a\x1a\xb0\xff\xb8\x9e\xf0\xe7\xe5\x82\x50\xf0\x95\x3f\x50\x49\xfe\x3d\x88\x05\x80\x32\x0b\x40\x14\x04\x28\x09\x8e\x22\x90\x43\x37\xea\x5a\x9b\xd5\x4d\xf8\xf5\xb7\x7c\x58\x5f\x24\x35\xf9\xbd\xeb\x78\x60\xd5\x1e\x5e\x31\x08\x98\xf6\xbd\xb4\x87\x77\x40\x3c\xf2\xfa\x08\x29\x5d\xe8\x61\xb0\x47\x6f\x2a\xcc\x4b\x66\xa3\x51\x67\x41\x0d\xe8\x17\xaf\x42\x4a\x3c\xc1\x73\x7f\x5d\x7a\xdb\xf5\xdd\x4e\xce\x3b\xff\x84\x8d\x2e\x52\x78\xc3\xdd\x5c\x44\x99\x94\x6b\xe6\x7e\x85\x48\x2b\x16\x9f\xc5\x99\xcc\xee\x6b\x68\xf4\x30\x34\xa2\x99\xa3\x71\x8f\x57\x93\x6d\x8f\xac\xb2\x19\xc9\xfa\x69\xe7\x47\x25\x6e\xe7\xca\x6c\xbe\xe4\xe8\x77\x57\xc6\x8c\x6f\x36\x6f\x39\xd1\x86\x27\x42\x86\x85\x12\x2e\xc3\x6b\xbd\xce\xfa\xc0\xa3\xf9\x49\x7b\xc9\x8e\x75\x65\x0d\x19\x67\x31\xdd\x20\x52\x19\x29\x0f\x4c\x34\xa6\x2e\x45\x3c\xa8\x47\x98\xe6\xc9\xc8\x43\xed\xf3\x1e\xdb\x08\x90\x05\x72\x60\x50\x28\xd3\x16\x85\x03\x4d\x56\xb7\x17\xad\x99\x6b\x3d\x5d\x47\x0a\xae\x4b\x0e\x7a\xe6\xa9\x38\xfb\xba\x14\x56\xc7\x47\xbb\x26\xae\x6e\xa2\x81\x71\x38\x07\x99\xa9\x55\x76\x5f\x99\x32\x46\x20\x5c\xf2\x71\x63\xd3\x75\x22\xe7\x42\xd9\x36\xca\x41\xa7\x8c\x81\xe8\x46\x7d\xb0\xe8\x2a\xc8\x27\x99\x3e\xe7\x13\xc8\x82\x23\x88\xc2\x04\x44\x41\xe1\x2a\x4a\x60\x2e\x61\x1b\x17\xd4\x59\x52\x24\x9a\x1f\xdd\x14\x74\x7b\xfc\x40\xf5\x93\x66\x46\x53\x76\xf1\xa2\x3b\x2d\x43\x93\xb7\xba\x45\xb3\x32\x61\x93\xf0\xfe\xa2\x3a\x97\xa8\x9b\xf3\x35\x4b\x7f\x3e\x51\xe7\x55\xf8\x54\xd2\xd0\x17\x37\x23\xa7\xcb\x48\x71\xf5\xb1\x34\x15\xcc\x1d\xce\x0a\x43\x9c\x3a\x1d\x7f\x67\x2e\x7c\xfc\x56\xb2\x80\xa5\x8a\xa9\x13\x26\x1d\x8b\x46\x48\x99\xdb\x71\x8a\x6c\xb6\x85\xea\x12\x5e\xb8\xfb\xa9\xc5\x57\x08\xc4\x97\xbd\x51\x05\x8d\x0d\x83\x79\xf2\xe6\x29\x50\xc4\x68\xf5\xbd\x14\x18\xd6\x3d\x92\xfd\x76\xd4\x7a\xe7\xd3\x80\xef\x89\xfc\xd1\x2e\x8d\x28\xa7\x86\x26\xdc\x1f\x77\x17\xd7\xa7\x17\xb6\x10\x09\x27\xf6\xd9\xff\xb8\xa7\x0b\x96\x32\x30\xf0\xc0\x63\x71\x3d\xfd\x02\x12\x06\xbf\x59\xbb\x51\xe6\x8b\x3b\xd7\x5d\x8e\x27\x29\x7c\x0d\x7a\x93\xcc\x6e\xc3\x1e\x1d\x77\x3e\xdf\xfc\xda\x29\x7a\x99\x20\xf8\x47\x73\xcd\x8c\x78\x81\x4b\x9d\xf4\xcb\x57\xa2\x93\x7e\xe4\x39\xcd\xb9\xbf\x76\xdb\x7e\x80\x90\xb4\x7d\x2c\xf7\xac\x6e\x74\x27\xce\x9c\xf7\x94\xeb\x5b\xe1\x30\x02\x6a\x2c\x97\x5c\x60\x62\x8f\xbc\x56\x6c\x3d\x5c\x45\xaa\x13\x45\xe0\xed\x76\x50\xb1\x60\x78\xdc\xe3\xf8\x62\x8a\x16\xa6\xb4\xff\x6a\x67\xe3\xe6\xc4\x3b\x34\xbe\x45\xb7\x6d\xb3\x14\xcf\x35\x35\xc1\x7d\x27\xa3\x09\x2d\xc1\x86\x80\xbb\xac\xad\x1e\x74\xef\x6c\xe0\xb6\xe3\x46\xbb\xd5\xdf\xce\xbd\xb4\x2f\xa8\x95\x0f\x3e\x2c\xde\x1f\x43\x32\x09\x53\x05\x3f\xd3\x6f\xee\x2b\x38\xd2\xf4\x93\x29\x1a\x33\x79\x44\xda\xdf\xbc\x88\xfc\x60\xc0\x92\x7a\x81\xcf\x38\xf4\xf4\xa6\xb4\x0b\xad\x8f\x2a\x4d\xee\xb5\x1e\x3b\x77\xbd\xe1\xc2\xda\x35\x55\xa7\xd1\x16\x8a\x40\x8d\x24\x5e\x4d\x4c\x26\x55\x29\xf8\x57\xcc\xe8\x63\x8d\xd0\xf9\x51\x11\x19\xfe\x8c\x74\x55\x95\xba\xf0\x8e\x8f\xaf\xe4\xd5\x6a\x22\x0f\x62\x84\x19\x3f\x8f\x52\x13\xf8\x9b\x58\x94\x19\x19\xab\x80\x25\x87\xbf\x21\xcb\xda\x85\x91\x56\xec\x22\xda\xa5\x8d\x90\x0b\xfc\xa1\x85\x55\x27\x2b\xb1\x1f\x47\xb6\xbe\x37\x1e\x9f\xb8\xa9\x9f\x3e\xe7\x1d\xab\xb5\x44\xcc\x24\x4a\xb6\x18\xe1\x88\xee\x3a\xf8\xa3\xf4\x08\xe1\x38\x38\xea\x2a\x8e\x72\xce\xa5\x42\x80\xe0\x53\x41\x2e\x72\x2c\x10\xd2\xbb\x1e\x86\x23\xe2\x6d\x76\x95\xaf\xa5\x86\x2d\xad\x56\x49\x87\xaa\x51\x31\xe3\xfc\x2a\xd5\x89\x40\x85\x76\x49\x9c\xf6\xc1\x6a\xa3\xfa\x3a\xde\x77\x83\x7d\x54\x80\x54\x6d\x42\xbf\x84\xca\x3a\x7d\x32\x5b\x3a\x07\xf5\x1f\x68\x14\x27\x59\xc3\x8e\xe0\x85\x32\xfc\x45\x58\xdb\xda\x98\xf9\x4e\xa5\xd1\xc0\x8a\x96\x85\x16\xb1\xcb\x72\x02\xad\x7e\x93\x1e\xd6\xd7\x8d\x60\x83\x7d\x93\x24\xaa\xf7\x32\xaf\xe5\x8f\xe7\x39\x2d\xe5\xc9\xd8\xf4\x16\x2c\xe9\x39\x49\x5c\x5e\x38\xd2\x73\x9f\x43\x51\xe4\x1a\x29\x10\xef\x21\x4a\x84\x89\x4a\xc6\x34\xc2\x02\xe0\x0b\x42\x85\x58\xad\xb6\xaa\xbf\xe1\x6d\x8e\x13\x4a\x70\x2c\xad\xc9\xb6\x10\x39\x50\xac\x1d\x49\x04\xf7\x12\x9f\x3b\x6d\x1b\x68\xb0\x27\x55\xf8\x7e\x10\x89\x03\x29\x92\x28\xc5\xef\xa8\xd8\x28\x85\x49\x84\x8a\x64\xdf\xb4\xda\x05\x1c\x5c\x64\xe8\x04\xa8\xd2\x5f\x9e\xac\x1a\x5f\xaa\x55\x09\x60\xf2\x49\xf8\x4e\x6c\x3c\xea\x46\xaa\x14\x35\x1c\x5d\x6c\xca\xea\x32\x96\x68\x1a\x38\x7c\x0e\x1e\x10\x4c\x7e\x21\xd6\xe3\xd5\xc8\xbe\xf1\x19\x64\xbd\x91\x4f\xea\x89\xcb\x27\xaf\x6b\x49\xd6\x16\xbe\xbf\x36\xdf\x9f\x6d\x63\x54\x7e\xa3\x73\xbf\x7e\xb3\x88\xac\x3a\x52\x0f\x18\x8c\x55\x7b\xdd\x01\xb2\x70\x14\x06\x52\x4f\xda\x1b\x9c\xff\x92\x07\xfd\x35\xca\xc1\x7b\xa0\xcd\x89\x64\xea\x50\x2f\xba\x6a\x21\xa7\x59\x38\xdc\x87\x66\x46\xa4\xda\x75\xce\x47\x19\x47\xd4\x89\x3b\x3a\xc2\xce\x4d\x79\x19\xca\x80\xd4\x31\xee\x81\x49\xb5\x86\x5c\x34\x36\xcb\x38\x00\x07\xef\x82\x98\xb7\x6b\x82\x69\x56\xf3\xfe\x05\x68\x40\x49\xdf\xf6\x45\x0e\x20\x35\xdf\x05\x77\x2e\x83\x4e\x88\x4d\x8f\x92\x34\x15\x9b\x33\x22\xab\x72\xf6\x5a\x26\x06\x0a\x4b\xb7\x3d\x3d\x52\xf4\xaf\xde\x9d\xe7\x68\xa9\x2b\x9c\xfc\x19\xef\x81\xba\x00\x34\x9b\xfd\x37\xdd\x6d\x21\x7c\xf3\xc9\x91\xe5\xb1\xfe\xfb\x17\xf9\xc7\x8a\x62\xcb\xff\x9f\x9b\xff\x06\x00\x00\xff\xff\x02\xc7\x3b\x27\x8f\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xcd\xce\x82\x38\x18\x85\xf7\x5c\xc5\xec\xcd\x44\x41\x50\x59\xb6\xb4\x40\x85\xa2\x05\xaa\xe0\x8e\x1f\x05\x51\x44\x04\x29\x70\xf5\x93\xef\x5b\x4c\x32\x3f\x67\x79\xde\xe4\x6c\xde\x27\xcf\x9f\x3f\x81\xd8\x22\xde\x1f\x06\xf6\x43\x62\x12\x03\x84\xf8\xb7\x95\x28\x21\x88\x85\x86\x01\xee\x75\x01\x04\x81\xa0\x20\x3e\xa0\x03\x1d\x56\x95\xab\x79\xfe\xc7\xf9\x3a\xd7\xa3\xd6\xfa\x17\x01\x04\x62\xf1\xde\x69\x2e\xa4\x1c\x32\x0f\x30\xec\x42\x06\x84\xe4\xcc\x38\xa0\x10\x58\x40\xe6\xd8\x28\xe9\x9e\x29\x7a\x95\xac\xf7\x43\x7c\xf6\x1a\xea\x73\x81\x45\x8c\x4e\x8c\x21\x2c\x46\x94\x2a\xde\x27\xab\xf5\x32\x56\x8a\x82\xad\xb0\xb0\xcb\xcc\x93\x68\x18\x0b\x3a\x53\x41\xc3\x6c\xf2\x10\xd7\xce\x65\xe6\xd1\x30\xfb\x67\x57\x81\x8a\xfa\x44\x60\xf0\x3b\xe6\x60\xf1\xfc\x7b\x4c\x8a\x95\x62\x44\x21\x70\x61\xe1\x9d\x20\xa0\x21\xb4\xb4\xe1\x62\x71\x51\x14\xf8\x4e\xc1\xca\x32\x82\xd6\x0a\x48\xba\x46\x0c\x43\xc0\x38\x00\x2a\x81\x48\x80\x9f\xbb\x03\x1a\x02\x25\xc0\x10\xd1\xb3\xef\x62\xdd\x77\xea\x70\xb8\x32\x31\xbf\x54\x36\x7b\xb7\xe9\x5b\x2c\xdb\x9e\xd6\x4e\x67\x6a\xe1\x7a\x4b\xac\x6d\x5d\xee\xd9\xf7\xd4\x3f\x0e\x93\xe5\xa4\xc0\x4c\xa2\x26\x5c\x56\x93\x14\xb7\xae\x75\xe0\x32\xa4\xe5\x4b\x3f\x6d\xf0\xb4\x3b\x87\x4d\xf0\x00\xbe\x66\x4e\x7c\xa9\x5e\xab\x07\x1b\xab\x2f\xd9\x06\xb8\x92\x2f\xd9\xfe\x84\xef\x07\x12\x3d\xfb\xf4\x8b\x65\x47\x36\x93\x21\x97\x0c\xe5\x50\x3d\x96\x3b\x5e\xcb\x9f\xe7\x2c\xb4\xf3\xc2\x2a\x2d\x0d\x19\xa9\x9f\x14\xf7\x43\xec\xa7\xee\x7b\xf7\x9d\x5b\x7b\xe3\x3c\xcf\xe2\x95\x79\x93\x0b\xa2\x97\x1a\x8a\x6e\x6d\x58\xeb\xc5\xf3\xf3\x94\xee\x9b\xe9\xf6\xa9\x7c\x37\xa0\xa8\x8f\x23\x3e\x81\x6d\xd7\x89\xdc\x89\xee\xf2\xf9\xdc\x21\x7b\xb9\x7e\x25\x64\x0c\xdf\x39\xda\x1a\xc9\x75\xaf\x7a\x57\xe4\xbd\x7c\xb2\x5a\x07\xb7\x38\xd8\x4e\x70\x2b\x65\x0b\x70\x78\xec\xb4\x2d\x78\x00\x85\xb7\xab\xb8\x7b\xfa\xb7\x12\x2d\x16\xa7\x71\x4f\xbe\xfa\xe3\x7d\xac\xf3\xc5\x58\xe9\xe8\xd2\x45\xd3\x97\xdb\x42\x5f\x33\xdd\x4e\x31\x8d\xe0\x52\xdb\x5d\xba\x52\xd2\xdd\xf9\x78\xf5\x92\xd4\xd2\x69\xdf\x94\xd5\x06\xab\xba\x7b\xf5\x4f\x11\x28\x28\x04\xc0\xaa\x12\x04\x6b\x0a\xd4\x1f\x4e\x72\x24\x30\x5c\x0a\x86\x81\x20\x66\x83\x40\xfe\xf3\x39\xc9\x0e\x38\x36\x2b\xc0\x61\x51\x7c\x60\x81\x4d\xc8\x32\x04\x58\x4c\x1c\x11\x43\xc8\xb8\x0d\x04\x11\x1e\x8b\xd1\xc9\x5f\xf9\xd0\x50\x85\x4b\xc8\x3e\xb5\xf4\x2a\x3e\x8f\x4d\xba\xf6\x56\x52\x51\x64\xad\x5b\x8f\x43\xac\x98\x5d\x29\xfc\x25\x00\x00\x96\x23\xf8\xbf\xc0\x7f\x73\x61\x08\x0e\xa4\x1f\x30\x00\x83\xe6\xd2\x7a\x26\xe9\xea\xe6\x98\xd4\x98\xc1\x22\x3a\x39\x5d\xb7\x99\x6e\xc9\x5d\x55\x8c\xa5\x2c\x50\xf1\xd9\x56\x2d\x57\x95\xb6\x57\x86\xf6\xd6\xf5\x59\x04\x83\x8c\x17\xbb\xb7\x64\x5b\x9b\xe5\x7c\x1e\x2c\x25\xdd\xc9\xca\x15\xb7\xfd\x99\x90\xc9\x7e\x0d\xf2\xcc\x9b\x63\x4c\xf0\xfd\xad\x74\x1e\xf5\xb4\xd2\x97\x0f\xa4\xd2\xe2\x96\xf4\x8f\x26\x8d\x0e\x75\x87\x92\xf8\x42\x3d\x89\x57\x0e\xea\xe4\x79\x0c\xf6\x53\x5c\x84\x71\x08\x47\xd5\x5c\x6c\x0e\x89\x6b\xb7\x5e\xee\x6e\xe9\x53\xb7\xbb\x8b\xc2\xdb\xb8\xf9\x92\x6d\x9d\xc9\x99\xea\xa5\x47\xf8\x51\xc6\x36\xcd\xbf\x1e\xe5\xd2\x65\x38\x9b\x9b\x27\xcc\x4f\xbe\xe7\xf8\xf3\xbc\x53\xfc\x6d\xd2\x11\xee\xa8\xbc\xa6\xee\xc6\xee\xac\xd7\x64\x62\xf3\xf8\xb2\x5f\x97\xca\x8a\x5e\x6d\xae\x6f\xea\xe9\xa3\xa8\xb2\x06\x9b\x24\x52\xa1\x94\xaf\xd5\xef\x32\x3c\x5e\xce\xc1\x9e\xea\x8f\x40\xf5\x57\x4e\x43\xcb\x20\x2f\xc3\x87\xd5\x4c\x9f\x7e\x8e\xea\x03\x82\xef\x4f\xf4\xf1\x67\x5d\x8d\xd5\xda\x4e\xaa\x64\xc7\xc7\xb2\x92\x7b\xbd\x03\x3b\x09\xf6\x6f\xc8\x1e\x0e\xbb\x97\x77\xd8\x3f\x5c\xcd\xc9\xa7\x57\xeb\xaa\xcf\x2e\xbb\x8e\xd2\xaf\x73\xb0\x87\xfe\xeb\xa1\xbf\x02\x00\x00\xff\xff\x3b\x9c\x55\xb5\xa4\x04\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 1188, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xa7\x12\xac\x5a\x02\x85\x61\xcf\x53\x1c\x4f\x4d\x41\x93\x11\x57\x6c\x72\x8e\xdd\x40\xe3\xc8\x39\x34\x19\x9e\x7e\x6a\xce\xd8\xbb\xec\x32\xbf\xfb\xfe\xf3\xbf\x71\xa2\xac\x5a\x7f\x3c\x1f\xfc\x71\x3c\x35\x00\x6f\xf1\x8f\x2e\x7e\xff\x3e\x90\xa9\xaa\xe2\x0c\x54\x0e\x00\x9d\x07\xae\x08\x6e\x27\x32\x8e\x8d\x4e\x6d\xe3\x19\x3b\xd3\x24\x61\xd1\x7c\x22\x66\x99\x1c\x6a\x79\x6b\xcd\xc2\x15\x1f\x16\xbe\xb9\x9d\x9c\xfc\x8f\xd1\xa7\xb1\x00\xad\x75\x33\x9c\x5c\xd8\x53\x22\x42\x30\x83\xde\x5c\x6d\x6f\xb9\x6f\x35\x46\x82\xa2\x36\x0f\xa9\xa3\xc4\x19\x88\x85\x97\xf5\x0e\xac\x4c\xa4\x68\x7e\xe9\xc6\x46\x6b\x95\x0d\x23\x3e\xf0\xd4\xb6\x81\x24\x32\x0d\xe9\xda\xf2\x37\x2f\x5c\x70\x77\x6b\x27\xd2\x41\x24\x6d\x4b\xc8\x8c\xb1\x83\xa3\x9e\xbc\xdd\x3d\x07\x34\x9c\xd4\x76\x10\xc3\x9b\x2a\x8d\x95\xaa\xe1\x66\x0e\x56\x0d\x17\xb2\xe6\x94\x20\x12\x16\x19\xc3\x3a\xeb\x0d\x99\x13\xf2\xbb\xaf\x23\x45\xa0\x3e\xda\x02\x3a\x94\x5e\x66\x65\xd3\x86\xa9\xf8\x3d\xb1\x05\xfd\x02\x2e\x84\x25\xb1\xc6\xfc\x50\x91\x0b\x9f\xc3\xd8\x14\x42\x54\x3d\x50\x8c\xfa\x96\x85\x8e\x98\xb8\x33\x55\x81\x3b\x95\x30\x3b\x76\x71\x6a\xc0\xea\xf5\x4d\x36\xb4\x4f\x44\xb8\xc8\xd1\x67\xbe\x6f\x1c\xb1\xfe\x26\xc7\x72\xfd\x22\x2e\x96\x4a\xcc\xd2\x73\x8c\x93\xa3\x90\xe3\x61\x97\x20\x9d\x25\x5c\xca\xa9\x5a\xfa\xcc\x83\xb7\xe1\x70\x1d\x6f\x23\x51\xbf\x70\x6d\x3b\x3e\xde\x05\xc1\xa9\x0a\xc0\x05\x1c\x98\x54\x0e\xc8\xa8\xb3\x0a\xe4\x22\xe5\x60\x46\xdc\x2f\x03\x45\x9f\x24\xd8\xf3\xb6\x64\x57\x71\xbf\x3c\x7a\x6f\xd1\xfc\xf5\xe2\xfa\xf1\x37\xed\x00\xef\xed\x61\xad\x78\xbe\x1d\xfc\xdf\x70\xfc\x44\x4e\xaa\x1c\x25\x0b\x51\x23\x02\x51\x4a\x4b\xbd\x28\x22\x1d\x14\xb1\x84\xc5\x65\xe4\x81\x50\x0b\x67\xec\x77\x01\x2b\x7d\xa2\x38\x1c\x0e\x28\x8d\x6c\xeb\x06\x5e\x6c\xb4\x48\x34\x3e\x54\xaa\x01\xdb\xf8\x71\x0c\x70\x21\x13\x72\x70\xeb\x6c\xe1\x7f\xc6\xf4\x86\xa6\xfb\xd9\x39\x91\x71\x4d\x72\xc2\xc3\xcd\xcb\xd3\xb2\xfe\x29\x19\xf2\x6a\x19\xb9\xb3\x96\xa5\xae\x4a\xfe\x8e\x76\xd5\x52\x72\x26\x0f\x88\x80\x5a\x0e\x93\x41\x8f\xc9\xc5\x4f\x58\x0c\x2e\x47\x84\xba\x86\xd4\x03\x67\xa1\xe9\x99\xa0\x24\x1e\xe0\xa8\x64\xbe\x95\xca\x06\x89\x63\x3e\x22\x83\xa2\x52\x86\xd2\xeb\xe7\xde\x4f\x63\x48\xfd\x6e\x80\x3f\x8b\xfd\x4b\x97\x06\x3f\x32\xef\x28\x9d\x88\x81\xb2\x8f\x50\xa7\x02\x4c\x7c\x23\xad\x90\xf2\x2f\x53\xf0\xba\xb7\x76\x89\xd3\x93\x97\xf4\xba\x1f\x9d\x67\x91\x80\xa7\x2d\x40\x98\xf8\x94\xb3\xbd\xe3\x60\xfe\xa9\xff\x26\x5f\x76\x57\xa3\xbf\x8c\x1f\xb4\xa3\x65\x8b\x32\x22\x5f\x7d\x45\x80\xbb\xed\x49\xad\x71\x40\x3f\x31\x55\x17\x5c\x33\x0b\xf2\x8b\x28\xda\x8c\xe2\xee\x42\x98\x82\x51\xd1\x1a\x23\x90\xaf\xd5\x65\x38\xf5\x1b\x53\xca\x49\xae\x06\xa4\xf4\x24\x91\x69\x07\xaa\xf4\x6e\x2e\x6f\x18\x7a\x0b\x02\x4e\x51\x07\x8f\xbc\x9b\x12\x85\x49\xf4\x71\x6e\x66\x75\x92\x5e\xa1\xe9\x83\x21\x1a\x53\xbd\xb0\xa2\x7e\x55\xd3\xe0\xd4\x2f\x79\x50\x47\xe8\x65\x6f\xdc\x14\xd6\x87\x57\x44\x1a\xd2\x7f\xdb\xb7\x53\x8b\x51\xfd\x36\x6b\xcb\xd1\x62\xa2\x69\x04\x4a\xe5\x07\xf7\xda\x50\x38\xfe\x04\xde\xa0\xc4\xf8\xc0\xb0\xc3\xff\x8b\x29\x03\x19\xa1\xe0\xb1\xdd\x31\xf6\x3b\x2c\x26\x79\xd6\x0a\x4d\x03\xbb\x09\x11\x5d\xc6\xba\xda\xe4\x45\x1a\xbf\x31\xd1\x1f\x82\xb5\xea\x05\x79\xe8\xa8\x79\x0d\x5d\xca\x17\x9b\xf8\x20\xeb\x46\x0e\xab\x29\xe8\xd0\x47\xde\x95\x99\x6b\x31\xb9\x74\x0c\xc6\x5f\xef\x6c\xcd\x38\x5f\x37\x7b\x79\x06\xa5\x8f\xfe\xb4\xc1\x65\x6b\xe1\xd2\x23\xe5\xb7\xdc\xf4\x9b\xcc\x57\x43\xf8\xa9\xdd\x7b\x1f\xba\xc8\xc4\x57\xdc\x82\xa4\xd1\x18\x0a\x19\x57\x42\x18\x5c\x2d\x06\x5b\x58\x76\x0c\x15\xbd\x4f\xc4\x26\x95\x1f\x92\x74\x31\x09\x66\xb6\x25\xe3\xab\x2f\xe7\x1e\x45\xde\x0e\x74\x59\x95\x9d\x9a\xb6\x21\x42\x8b\x0b\xd6\x40\x8a\xa2\xbe\x2e\x96\xec\x48\x82\x0c\x11\x56\x93\x56\x3d\x34\xee\x16\x1b\x1a\x34\x11\xef\x64\xba\xe5\xac\xce\xed\x7e\x29\x9a\xc0\x9a\x32\xe7\x36\x59\x25\x4e\x11\x95\x9c\xe1\xb4\x57\x97\x98\x7a\x41\xe2\x8a\xeb\xd7\x49\x36\x63\xdf\x01\xcc\xbf\xf0\x17\xf6\x95\xaa\xf5\x77\x6d\xa3\x70\xd6\xbd\x6e\x77\x86\xfc\xb9\xb5\x80\x35\xce\x62\xaf\x4d\x9e\x48\xfc\xfa\xf4\x12\x01\x48\xfa\x4b\xbb\x8d\x5d\x87\xaa\x1e\x21\x3a\x25\x84\xb5\x56\x02\x96\x9d\xf5\x55\x48\xcf\x95\xab\x73\x95\x2b\x78\xaa\x8b\x62\xdb\x5d\x2f\xcf\xa6\xa8\x2d\x21\xd9\xbc\xb8\x2c\x43\x4e\xbe\x2f\xec\x60\x52\xb4\x7f\x5b\x18\xeb\x42\x3f\x2d\x0e\x3a\xd3\x60\x9a\x42\xfa\xe4\x8f\x47\x49\x24\xd5\x48\x6b\x70\xd1\x2a\x6c\xce\x19\xd6\x9a\xd6\x7a\x9d\x9e\x73\x82\xf4\x7d\x1c\x44\x12\x5e\xfb\x47\x8f\xdf\x8f\x50\xbe\x4a\x84\x37\xae\x10\x02\x9e\x6c\x1f\x38\xfb\x1a\xac\x66\x46\x76\xac\x03\xb8\xc6\xbc\x04\x66\x64\xee\x1d\x79\x7a\x56\x1e\xc6\x75\x54\xba\xdb\xa5\x4e\x23\xe7\x8c\x4e\xf7\x50\x39\xa9\xb8\xb0\x9e\x99\xa5\xef\x3e\x8f\x0c\x21\x1d\x6d\x7a\x7f\x93\x79\x40\xb6\x79\x9f\xb9\xec\x32\xa6\x56\x05\x67\x46\xc8\x27\x6d\xba\x59\x43\x5c\x04\x60\xc6\xaf\xec\x89\xb6\xdd\x1e\x6c\xdd\xc4\x34\xdc\xab\x0f\xa9\x8d\xa2\x48\x82\xbe\x31\xf8\x91\xc7\xeb\x4a\x68\xa0\xb1\xd8\x94\x05\xdf\x0f\x62\xc9\xc8\xdc\xab\xe4\x94\x4f\x0d\x60\xe0\xdf\x0f\x5f\xe5\x10\x8c\x36\x1a\x9f\x84\x2e\x3c\x7a\x10\x57\x9e\x69\x3a\xe3\xb1\xcd\xc6\x0d\xa5\xa8\xf7\x44\x0f\x2b\x20\x7b\x06\x87\xee\x3b\x29\x58\x7c\x19\x77\xc1\x17\xe7\x06\x50\x4f\x27\xdc\xef\xe7\xdd\x8e\x9c\x8b\x99\x58\xca\x36\xa2\x7e\xe4\xb4\x2d\x54\xff\xfc\x03\xfd\x65\x45\xb4\x84\x7f\xe7\xe6\xbf\x01\x00\x00\xff\xff\x2b\x7e\x89\x71\x8f\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x94\x4d\x8f\xba\x48\x17\x47\xf7\x7c\x8a\x67\x4f\x9e\x80\x88\x76\xb3\xbc\x55\x14\x58\x40\x81\x25\x6f\xe2\x0e\x79\xb5\x01\x11\x41\x41\x3e\xfd\xa4\xff\xb3\x98\x4c\xe6\x2e\xcf\x4d\xce\xe6\x97\x9c\xff\xff\x1e\x22\x26\x75\xff\x87\xc9\x29\xa0\x06\xc5\x10\x90\x3f\x54\x60\x94\x62\x69\xc5\x18\x8a\xa2\x82\x99\x22\xa8\x28\x27\xc6\xbc\x8e\x2a\xf1\xbf\x06\x31\x9e\xfc\x73\x17\x90\x47\xda\xfc\x80\x8b\xaa\x66\xa8\x9b\x9b\xa9\xcd\x32\x02\x3e\x1a\xa0\xc3\x53\x60\x27\x3a\x13\x48\xf4\x88\x73\x9b\xcc\xad\x7e\x55\xdc\x67\xd6\x69\x75\xa2\x54\x8b\x11\x40\x80\x2a\x37\x42\xc0\x02\x9d\xb8\xef\x44\x99\x3e\x57\xc5\xf8\x49\x31\xd2\x79\x00\x85\x31\xcb\x8b\xe0\xfe\xc0\xca\x56\x58\xdc\x95\xca\x6e\xd0\xa6\xbf\xd0\x5d\xff\xcd\x18\x66\x0b\xf9\x01\xfe\xb7\xac\x0f\x70\xf8\x8f\x4c\x48\x75\xe2\x32\x18\x4d\xd8\x84\x04\x16\x46\xb2\x4e\x7b\xe7\x3a\xc6\xe0\xd3\x59\xe7\x89\x65\xf7\x17\x5a\xbf\x33\x17\x38\x41\x88\x83\x5e\x55\xe4\x08\xbf\x7f\xde\xe3\xaa\x22\x48\x00\xa6\xb5\xc9\x3c\xb4\xa4\x34\xfa\x29\x31\xd3\xfe\xbc\xed\x76\x33\x23\xef\x98\xdb\x91\x52\x7f\xb4\x5d\xe2\x19\xc0\x3d\x9f\x7c\x29\xef\x5c\x43\xa5\x26\x6d\xc4\xfb\xbe\x1a\x78\xef\x7d\xcc\xdb\x28\x3c\xe9\xe6\xdc\x7d\x67\x0a\x69\x18\x0e\x72\x47\x17\x45\xbf\x26\x60\xed\x3d\xf9\x82\xf7\xea\x41\x46\x25\x3e\xc6\x6a\x73\xf1\x83\x6e\x5b\x85\x76\xa9\x0d\x92\xaa\xe7\xb7\xf5\x38\xda\x6a\xc1\x36\xad\x30\x4f\x6f\x32\x1e\x2c\xad\xa9\x4c\x29\x6e\x5d\xab\xe6\xc6\x83\xa6\xc1\x7b\x01\xd5\x31\x6f\x9a\x2e\xa6\x1f\x13\x3c\x77\x13\xe0\x06\x5b\x9b\x4c\x96\xae\x9d\x55\x50\xd3\xdb\x27\x92\xf8\x03\xb1\x2e\xb0\xeb\x29\x1e\x5f\x68\xf3\xb6\xf9\x6b\xb0\xce\x9b\xb3\x7a\x11\x4d\x23\x3f\x9d\x3f\xcf\x93\xba\xc5\x62\x3b\x9f\x9d\xe8\x27\xb6\x2e\x91\xe9\xe1\x27\xbf\x8b\x96\x6a\x61\x9b\xe2\x5c\x0c\x3e\x4d\x29\x6e\x85\x72\xe4\xa4\xdc\xee\x0e\x9a\xdb\x1a\x6a\x47\xa5\xb6\x45\xae\xed\x25\xa1\x87\xb7\x54\x6a\xea\x5d\x71\x1d\x92\x23\x55\x99\x25\x8e\x7e\x2d\x69\xea\xa2\x5d\x79\x32\x95\x75\x65\x8c\x7c\x5c\x82\x5c\x70\x31\x0d\x37\x8f\xcb\x1a\x8c\x89\x4b\x49\xb1\x5c\xc2\x65\x8c\x3f\x23\x86\x99\x00\xa4\xec\xce\x70\x38\xeb\x55\xa2\x47\x27\xf9\x08\xfc\x20\x21\xe0\x3a\x54\x71\xc5\x10\xfb\x5d\x2e\x17\x2c\xce\x19\x83\xde\xc4\x78\x34\x81\x87\x06\x9a\x19\x66\x20\x9b\xd8\x1f\x4c\x9f\x5e\xb7\x3a\x27\x08\xcf\x21\x80\x4a\x11\x70\x24\xaa\x11\x76\x9c\xc7\x99\xbe\xae\x7e\x1d\x4b\x9f\x5e\x70\x6f\x5d\xa5\x58\xe1\xf9\xf1\x25\xbe\x8f\xe1\x2a\x1e\xb2\x65\x35\x8e\xb7\xf7\xc7\x46\xdb\xd0\xf0\xed\x82\xc5\xbc\xdc\x37\xca\xce\x37\xf2\x11\xd5\xcd\xee\x66\xe5\x34\xeb\xa1\x8e\x6a\xd3\x16\xaf\x54\x30\xdd\xe1\xf0\xd5\xea\x0b\x5b\xba\xf3\xb3\x10\xf1\x70\x3d\x5c\xab\xf8\xa8\xdd\x41\xbe\xac\xb7\xa6\x38\x3b\xc8\xf0\x96\x8d\xec\xac\x81\xcd\xb4\x7c\x72\x49\xdf\xc8\xd3\xa1\xd5\x32\x27\x7d\x6c\xba\x93\x00\x7c\x66\xe2\x98\x76\xa7\x39\xcb\x96\x02\xa1\x2c\x33\x09\xbe\x80\x94\xf2\xf5\xb9\xeb\xdd\xdb\x8a\xc7\x8b\x7a\x27\x07\x8f\xe4\x0e\x9e\xf6\x4c\x9e\x68\x96\x94\xb0\x4d\xe5\x86\x4e\xb5\xd8\x0a\x3f\x53\x69\x1e\x5f\xd6\xb3\x2f\x9e\x95\x13\x7d\xbe\xf7\x55\xb4\xe3\xaf\xb4\x32\xf6\x9f\xec\x7b\x7e\x18\x4e\x3e\x07\xb8\x9d\xd0\xf1\x10\xf5\x1a\x8b\x0e\x2f\xde\x2b\x9a\x94\x1a\xab\x57\x26\x9a\xd9\x84\x42\xf4\x32\x6b\x14\x73\x07\x42\xb4\x9d\x5b\xf9\xa4\xbd\x14\xe6\xf7\x16\xfd\x1e\x27\xa7\xfb\xd2\xbf\x9f\x0f\xd2\x1d\xb2\xfb\x50\xde\xf7\xdd\x30\x61\x50\x36\x3e\x36\x9e\xaa\xe9\x2b\x5a\xe3\xdd\xeb\x49\x70\xd9\x18\x09\x7f\xd2\x40\x5c\xfd\xbf\xb9\xf8\x2b\x00\x00\xff\xff\x56\x00\x60\xb5\x4b\x04\x00\x00")

func test_certsRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootCrt,
		"test_certs/root.crt",
	)
}

func test_certsRootCrt() (*asset, error) {
	bytes, err := test_certsRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.crt", size: 1099, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xb7\x12\xa3\xd0\x01\x85\xe1\x9e\xa7\xd8\x9e\xf1\x90\x11\x14\x5b\x5c\x10\x19\x91\x73\x07\x08\x2e\x19\x04\x22\xe9\xe9\x3d\xde\xda\xa7\x3d\xcd\xdf\x7d\xff\xf9\xdf\x04\x49\xd1\xac\x3f\x9e\x0f\xfe\x38\x9e\x16\x81\x40\xfa\x63\x48\xe9\xbf\x07\x79\x69\x9a\xb4\x00\x4d\x00\xc0\x10\x81\x2b\x81\x1f\x19\x75\xe2\x27\xf4\xb8\xb8\x25\x60\xf6\x69\xea\xaa\x98\xc0\xe9\xf3\x19\x58\x92\x5c\x35\xa9\x01\xd2\xa1\x00\x18\x2d\x38\x72\x9e\xc2\x65\x0c\xa1\xb0\x84\xad\x3f\xe2\x22\xc2\x87\x96\x1b\xf7\xd6\x45\x55\x71\xfd\x52\xdf\x3d\x75\x0b\xdf\x9c\x07\x63\x48\x2e\x98\xe6\x87\xd7\x9b\x2b\xac\x5d\x99\xd3\xf8\xa2\xf5\x06\xdd\x2e\x2a\xc1\x5d\x30\x12\x59\x31\x68\x91\xe6\x0b\x3d\xd7\x86\xfe\xc5\x89\x48\x72\xfe\x59\x4e\xa4\x0f\x0a\x3e\x0f\xf1\x51\x06\x71\xdf\x2c\x36\x26\x3d\xe1\x96\x9b\xb8\xc3\xac\x5a\x0a\x68\x2a\x7a\x19\xae\x36\x45\xbf\x80\x47\xf6\x74\xa0\x61\xfa\x58\x3a\x8c\x7d\x09\xe9\xeb\xfa\xca\xf9\x4d\xab\x31\xb7\x88\xec\x3c\xd4\x51\xdd\x4c\x74\x1a\x11\x72\x6d\x7c\xd5\xae\x34\xd9\x44\x28\xbf\xb1\x95\x0e\x43\x98\xd2\xc6\x57\xac\x69\x64\x82\xbd\x36\x43\x9d\x62\x1c\xc3\xc3\x1e\x6f\xf4\x02\x1e\x56\xf7\x35\x4e\x86\x49\x9b\x76\x68\x1c\x4a\xf8\xcc\x34\x2e\x6d\x96\x1d\xea\xab\x03\xb3\x2f\x90\xeb\xe0\x39\xb1\x97\xa1\x62\x54\xa7\x22\xc4\x57\x68\x09\x54\x01\xf1\x25\xfe\x64\x0b\xc7\xb5\x26\x88\x87\xc9\xb2\x2f\x88\x43\xef\x21\x0f\x81\x72\x15\xc6\xa9\x3d\x81\x0b\x04\x30\x6b\x02\x70\xc5\x75\xd8\x5a\xb8\x62\xd4\x9e\xb3\xf2\x89\x38\x38\xa1\xe7\x44\x61\x88\xf3\x51\x07\x77\x69\x7b\xa5\x60\x1b\x60\x5f\x33\x82\x3c\x98\x5f\xdf\xf7\x14\xab\x60\x24\x33\xc2\x6a\xce\xb2\x96\xfc\x26\x16\x66\x57\xbe\xb5\xe6\xea\x6b\xaa\xf2\x8f\x8c\xac\xfa\x3d\x34\x8d\xa7\x90\x6a\x56\xe9\x91\xe3\xfa\xbb\x49\x19\x9b\xdf\xd2\x74\xe1\xf0\xa8\xc4\x3d\x9f\x1d\x16\x42\xf2\xde\xc6\x45\x1a\xd4\xf7\x2e\x9a\x03\x61\xcd\x02\x4f\xfa\x86\x7e\x33\x71\x83\x1c\xc7\x69\x58\x26\x57\x7b\x41\x23\xaa\x9d\x3c\x10\xf9\x38\x96\x39\xa8\x7a\xbd\x4a\x6b\x83\x9b\x5a\x77\x2b\x88\x5c\xb9\xfd\x96\x64\x51\x0e\x6f\x39\x7a\xa9\xcb\x2d\x55\x71\x5d\xfa\xc6\xe6\x26\x23\x8b\xb2\x9b\x50\xae\x50\xb6\xfe\x10\xc2\x18\x3d\xe7\x67\xee\xf9\xa5\x12\xaf\x22\x97\x4f\xdb\x01\x12\xb6\xfc\x94\x9a\x78\x94\x36\x70\x0f\x25\xd1\x80\x4d\x65\x36\x8a\x47\x1d\x8f\x62\x62\x84\xb3\x88\x7d\x7a\x9c\x29\x38\xf3\x97\x9e\x72\xf7\x9e\x87\x88\xf5\x5f\x78\x74\xa4\x7d\x8b\xe1\x2a\x93\xee\x5d\xeb\x04\xf6\x3a\x2b\x5f\xb5\xca\x0c\xf9\x22\x24\x89\x9d\xf8\xf8\xd3\x8e\x65\x28\x3d\x74\xdc\x41\xf0\x37\x56\xf6\x67\xe6\x81\x59\x11\x80\xe5\xe7\x90\xa6\xc7\x84\x00\x79\xfd\x94\x5d\xbb\x69\xfb\xa7\xf2\xd1\x36\x99\x6b\xde\xd2\xd6\xef\xd3\x37\x0a\xee\xbd\x78\xde\x37\x5e\xb1\x4a\xe6\x1a\x5c\x89\xc8\x6f\xdd\x58\x32\x45\x1c\x1e\x8b\x72\xfd\xbe\x8a\xcc\xb8\xf8\xeb\xe9\x37\x53\x48\x86\x5f\x40\xc0\xa2\x59\x34\x42\x78\x12\x6b\x75\xee\x83\x77\x81\x1f\x9c\x67\x18\xcf\x87\xb6\x41\x7e\xe8\x1f\x11\x12\xc9\x3f\x8d\x2f\x95\x20\x43\x23\xcf\xcb\x56\x8f\xe6\x19\x53\xc7\xb1\xd7\x4f\x16\x03\x3d\xa2\x25\x63\x86\xe2\xed\xfd\xea\xbb\xcc\xe2\x1d\x76\x44\x1f\x1e\x7c\xe8\xc6\xf5\xbf\x62\x67\x64\x91\x33\x8f\xe2\xc8\x7e\xee\xef\xf1\xa6\x67\x19\x0c\xcd\xaf\x35\x6d\xea\x6a\xcb\xf6\xa5\x4e\x0d\x30\x0b\x05\x65\x09\x3a\xa4\x9e\xf2\x30\xe4\xea\xec\xa3\x42\xf3\x79\xc6\x87\xf6\x48\xaa\x7c\x61\x21\x87\x5c\x52\x71\x79\x93\x8d\xfa\xb0\x52\x83\xe8\x54\x0e\x33\xe0\xa5\x23\x3e\x23\x52\x69\x06\x1a\x1f\xb2\xe6\xf8\x48\x94\x23\xf8\x9e\x3e\x53\x5f\x83\x59\xbc\x52\x25\x8a\xdc\x15\x3a\x56\xdc\xd3\x8b\x42\x2c\xe5\xe9\xbc\xbc\xd2\xf0\x31\x07\xd2\xdb\xfb\xc0\xa2\xcd\xf6\x82\xd0\xf4\x3e\x7d\xed\x1a\x99\xa3\xc4\xf7\x40\x70\x05\x01\x66\x05\x80\x48\x48\xb4\xb2\x03\x0f\xd0\x59\x54\x7e\x8e\x0e\x67\x3c\x90\xcb\xee\xe4\xa8\x97\x96\x0f\x2f\x11\x7e\x89\x85\xfa\x78\x44\xf4\x7d\xc4\x31\x27\x98\xdb\x39\x84\x59\x20\x1b\xcc\xc7\x7b\xf1\xc5\xcd\x39\xaa\xaf\x17\x9b\xab\xfe\x9e\x5f\xaa\x1c\x3d\x9d\xd2\xf8\x17\x82\xed\x46\x1c\xd9\x0d\x76\xb2\x45\x2b\x9e\xf6\x04\x7b\xd6\xb9\x5a\x9c\xcc\x2c\xa1\x9f\xc6\x34\x53\x64\xf2\xea\xae\xf1\x50\x72\xf6\x60\x14\x5a\x9f\xa8\xd0\x2a\x45\xc7\x26\xc9\xfb\x9d\xa4\x42\x8d\xc8\xfb\x1c\xd5\x4d\x78\xf0\x6e\xe1\x9b\x09\x85\x01\x8b\x26\xe9\xa3\x14\x61\x2a\xd4\xeb\xe2\x61\xf1\x66\xd8\x0b\xe0\x8e\xc3\x8a\xb0\x89\x93\xdf\x70\xdb\x98\xc7\x9d\xd2\x52\x11\xa6\x82\xd1\x30\x48\xf1\x29\x21\x15\xfb\x09\x8d\x76\xde\xcf\x7e\x58\x3b\xea\x4b\x4d\x3e\x8e\x0d\x1f\x9c\xe8\xf6\x6e\x9c\xcb\x23\x7c\x39\x9a\x59\xb7\x09\x49\xb1\x66\x62\x35\x5e\x6c\x27\x6a\x1e\x16\xc5\xbe\x54\x58\x22\x58\xe5\xfb\x32\xc1\xf0\x7c\x70\xe5\x83\x65\xf8\xe6\xd8\x58\xa4\x16\xac\xdc\xc4\x78\x76\xfc\xf2\x4d\x5d\xd8\xaa\x84\xe7\x52\x1a\x03\x5e\xaf\xc7\xc9\x61\x65\x41\x9a\x53\x7e\x09\x87\x52\xc1\x13\x24\x2e\x76\x80\xba\x86\x00\x5d\xd1\x57\xae\xb5\x4b\xf2\x8b\x38\x98\x7c\xe3\x9c\x8a\xfd\x52\x51\x43\x7c\x52\x6d\xf1\x51\x58\xe6\xd9\xf6\x0a\xf8\x6e\xba\x75\xf6\x0d\x1f\xee\x40\x52\x57\x78\x0f\x26\xd2\x71\x0f\x89\xdb\x0a\xae\x77\x9e\xb2\x50\x73\xca\xdb\x5a\x0b\x7f\x60\x8f\x19\x73\xc5\xfc\xfc\x6c\x91\x0e\x35\xa7\xac\x69\xb2\xe3\x0e\x14\xb2\xef\x32\xb6\x5b\xc7\xdd\x58\x21\x31\x55\x8c\xab\x3e\xc8\x36\x7b\x45\xfe\xc3\xda\x1f\xba\xf7\x3a\x6f\x58\x8f\x08\x78\x61\xcc\x04\x33\xcb\x2b\xef\x7e\xbd\xd7\x0c\x72\xf8\xe5\x7f\x77\xa6\xa9\xe2\x94\x65\xce\xfa\x38\x51\xf0\xf7\x2f\xf2\x8f\x15\xc9\x7a\xfe\x7f\x6e\xfe\x1b\x00\x00\xff\xff\x8d\x06\x3f\x0a\x8f\x06\x00\x00")

func test_certsRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootKey,
		"test_certs/root.key",
	)
}

func test_certsRootKey() (*asset, error) {
	bytes, err := test_certsRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xcd\xce\x82\x38\x18\x85\xf7\x5c\xc5\xec\xcd\x44\x04\x44\x58\xcc\xa2\x85\x2a\x55\x5b\xfe\x91\xba\x13\xd4\x22\xa2\xfc\x88\x14\xb8\xfa\xc9\xf7\x2d\x26\x99\xcc\xbc\xcb\xf3\x26\x67\x73\x9e\x3c\x7f\xfe\x1c\x44\x3b\x4c\xff\xb0\x50\x10\xe1\x2d\xb6\x40\x84\x7e\x53\x89\x60\x6c\x43\xdb\xb2\xc0\x6d\xe2\x40\x60\x08\x38\x0e\x80\x1b\xbb\x29\x8a\x7c\x19\x6c\x1e\x83\x2e\xbf\x4a\x2a\x17\xed\xc9\x10\xb6\xcf\xf6\x87\xfa\x8c\x8b\x21\xa7\xc0\x47\x47\xe8\x03\x21\x1d\x66\x14\x12\x08\x76\x60\x15\x23\xab\x20\x7b\x5f\x31\xcb\x8b\xba\x1f\xd8\x89\xd6\x24\x88\x05\x12\xcc\x4e\x7c\xdf\x46\x62\xb4\x33\x85\x76\xf9\xcb\x2c\x98\xc2\xb9\x2f\x23\xe1\x14\x39\x95\x48\xc4\x04\x99\x89\x20\x51\x3e\xd1\x08\x88\x53\x91\x53\x12\xe5\xff\xce\x4a\xf0\x26\x01\x16\x08\xfc\x96\x1d\x90\xa8\xfe\x29\x93\x98\xc2\x47\x14\x01\x0f\x72\x9a\x40\x40\x22\xcb\x09\xaa\x5c\x0d\x56\xb9\x92\x4c\x04\x63\x88\x4b\x40\x21\x7f\xb6\xc5\xf3\xb1\x33\x85\x0c\x81\x8f\xb6\x00\xb8\x16\xf0\x0d\xf0\xf3\x97\x2c\x7e\xb0\x80\x8f\xc0\xc7\xad\x4e\xec\x55\x64\x40\x73\xad\xa0\xba\xdd\xd5\xd5\xfa\xdb\x1e\x1e\xb1\xc2\x8d\x2e\x1b\xdc\x79\xf5\xdc\x95\xd5\xab\x4f\x4e\x61\xbb\x7e\xeb\x8d\x2a\xe8\xab\x3a\x3c\x05\x96\x32\x56\x87\x7c\xa8\xf7\xcb\x22\xdf\xf9\xcf\x8e\xc5\x33\x62\xbb\xdb\x57\x1f\xc0\x37\x9d\xd1\x6d\xee\xa0\x1f\xae\xcb\x6d\x13\x2f\xb9\xd3\x24\x1a\x5a\x1f\x78\xe3\xc1\x28\x52\x33\xaa\xef\x4d\x02\x24\xcd\xd5\xe0\x76\x9c\x6b\xf1\x4e\xf8\xa3\x53\xa8\x71\x7d\x2a\x90\x8c\xb7\xfc\xab\x17\x7a\x78\x52\xcd\x47\x77\xdb\xee\xb3\xac\xd2\x43\x4d\x59\x9f\x8d\xc3\xf1\x3e\xaf\x8b\xe0\xf8\x60\x9e\xd9\xee\xad\x40\x3a\x59\xf1\x67\x5a\x79\x59\xc9\xb1\xb7\x4c\x6b\xb2\xcd\x1e\xc3\x66\xb7\xdb\x51\xfd\x72\x0d\x3c\xf3\x4c\x67\x33\xd6\xc8\x71\xe3\x4c\xbd\xb7\xf4\x91\x19\xba\x5f\x7a\xf3\xdb\x29\x4f\xaf\x69\x0d\x4b\x22\x99\x60\x21\x54\x52\x0b\xb5\x36\x3f\xae\xad\x27\xad\x73\xe9\x64\x2d\xa1\x66\xca\x75\x47\x4e\x13\xcd\x79\xd0\xe2\x98\x36\xd7\xad\x93\x3a\xea\x06\x17\xc6\x75\x5e\x88\xc0\xff\x9e\x3e\xad\x6e\x74\x54\xda\x5a\xa0\x59\xc8\x9e\xc2\xb3\x7c\xba\xa4\xb7\xbe\xc9\xbc\x5d\x13\x28\x46\x61\x00\x27\xf1\xb1\x0d\x7c\x00\xeb\x29\x17\xfb\x08\xb8\x3f\x4b\x39\xbe\x01\xc1\xdd\x40\x10\x10\x0b\x5e\x80\x90\x7e\x41\x09\xe4\x0a\x02\x21\x2c\xce\xf0\x41\x30\x08\xfd\xd8\x01\x02\xff\x1f\x79\x36\xe7\x08\x82\x2d\x5a\x3a\x5f\x13\x59\xf6\xe3\x29\x7d\xec\xad\x35\x57\x9b\xca\x6d\x5e\x2c\x41\xef\x30\xf5\xcb\x8f\x2a\x33\x7b\xd7\xe8\xab\x38\x77\x1e\xf3\x74\x9d\x73\x27\xa2\xfd\xba\x19\xaf\x3d\xae\x5e\x9a\xab\x61\xdd\xad\xae\xa4\x43\x2c\xb8\xc8\xd2\xbd\xe9\xba\x5a\x7e\xaf\x88\xe5\xf4\x96\x9f\xd7\x4a\xa2\xb4\xb7\x15\xf3\x8e\xfb\xb9\x74\x02\x23\x58\x77\xf0\x15\xe9\x5c\xdf\xc4\x98\x4f\x1e\xdf\x90\xd7\x79\x83\x1e\xee\x23\x49\x86\x9c\x7b\xf4\x2d\x15\xe1\x8d\x9f\xdf\x82\x1f\xbb\x68\x01\xd9\xe7\x5d\x0e\x6b\xe0\x83\xf7\x29\x29\xed\xaf\xfa\xe1\x81\x7a\xc2\x2c\xde\xd8\x41\xce\xc2\xfb\xd5\xda\xbc\xd9\x7d\x3f\x8d\xc3\x25\x0f\x3f\x7d\x90\xe7\x3d\x96\x4a\x25\x8d\xbf\x67\x7d\x3c\x6a\xd7\xe5\x7b\x98\x61\x5f\x68\x59\xb3\xc8\xd4\x7a\xb9\x54\xf9\xa8\x8e\x69\x15\xc6\xad\x61\x36\xc7\x3d\x7b\xd3\x51\xa3\x69\xf3\xb4\x32\xe2\xce\x89\xee\x9a\xa4\x5d\xa6\x52\xfe\xd5\xc7\x1e\x67\x69\x64\x4f\xd5\x30\xd9\x67\xbb\xa7\xc3\x16\xa8\x2b\xee\xdc\x2f\xf7\x08\x37\x6d\x82\x8b\x70\xbd\x32\x6f\x3d\xf1\x32\xed\x3a\x5c\xc6\x7c\x75\xf2\x83\x81\x83\x7e\x71\x81\xf2\x28\x8d\xfb\xea\xbb\x63\x83\x6c\x5d\xd9\x5f\xd2\xaf\x22\x10\xb5\xff\xab\x8d\xbf\x03\x00\x00\xff\xff\x96\xb7\x7a\x60\x53\x04\x00\x00")

func test_certsTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserCrt,
		"test_certs/testuser.crt",
	)
}

func test_certsTestuserCrt() (*asset, error) {
	bytes, err := test_certsTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.crt", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xb5\x12\xab\x68\x00\xc5\xf1\x9e\xa7\xb8\x3d\xb3\x83\x13\x28\x71\x97\x0f\x87\x0e\x0b\x12\x82\x13\xe4\xe9\x77\xf6\xd6\x7b\xda\xd3\xfc\xbb\xdf\x3f\xff\x8d\x97\x14\xcd\xfe\xe3\xf9\xdc\x1f\xd7\xd3\x22\x2e\x90\xfe\x18\x52\xfa\xf7\x81\x2c\x4d\x93\xa6\x53\xe3\x39\xce\x10\x38\x20\x71\x9b\x33\xc4\xe9\xb7\x2d\x38\xd2\x11\xbc\xa1\x7e\x13\x18\x75\x2c\x46\x17\xe2\x0d\xb3\x16\x3f\xe7\xc1\x3e\x4a\x3f\x7c\xf7\x28\xf6\x17\x6a\xa4\x67\x02\x3a\xed\xef\x60\x7c\x4e\xad\x48\x27\xbf\xf9\x4d\x3a\xd2\x96\x0a\xf8\xac\x69\xf8\x48\xa9\x52\x1f\xf4\x8f\x3b\x92\x47\xaa\x9f\x95\x07\x3e\xd5\xcb\x73\x88\x34\xea\x1c\x91\x12\x65\x34\xb3\xcb\x07\x01\x44\x14\x36\xad\xb3\x16\x47\x3a\x24\x2f\x5f\xcf\x74\x8e\x51\xd3\xad\xb8\xcd\x54\x1f\x9c\xb7\xae\xba\x3c\xe8\x96\xf6\x63\x82\xed\xd6\x5a\xd6\x8b\x62\xa0\x7d\x12\xa7\x32\xc6\x30\xdf\x0f\xd5\x7a\x26\xd4\xa5\x2e\xbb\xe8\x82\x17\x0b\xe1\x76\x63\x6e\xd1\x37\x9a\x8b\x24\x93\x25\x17\xdd\xef\xa5\x28\x8a\x4d\xe7\x95\xe7\xb2\x99\xfd\xb0\x21\x69\x99\x2f\xf5\xde\x5d\x04\x48\xac\xef\x1c\x76\x0d\x96\x1b\x2a\x93\x2a\x99\xf8\xde\x62\x39\xf8\x24\xac\xe9\x24\x26\x76\x73\x44\x3a\x5a\xd4\x7c\x45\xc9\xc8\x66\x93\x86\x56\xd1\x24\x22\xd5\xce\x6e\xcd\x64\xae\x64\x35\x51\x89\x97\xd6\x32\xd5\x03\x9f\x1e\x80\x8e\x78\x5b\x68\x66\xb5\x65\x81\x9b\x61\xd4\xc5\x9b\xa2\xbc\xf3\xa4\xde\xe7\xc2\x55\x66\x0f\x67\x5a\x86\x53\x23\xa0\x89\x1c\xe0\x78\x6e\xd2\x78\x4e\x2c\xfd\xc7\x76\xda\x07\x38\x1e\x77\xd9\x0a\x44\x20\x27\x51\x51\xb5\xbc\xd1\x52\xbc\xb0\x8f\xf4\xf6\xf1\x4d\x4c\xac\x12\xec\x47\x16\xe2\x40\x74\x88\xce\xbc\x2d\xa9\x54\x87\xc3\xcc\xbb\x5f\x23\x5e\xbc\xb5\x2f\x20\xed\x4d\x47\xf7\xcf\x01\x87\x8e\x4b\xea\xc1\xe6\x05\xd9\xfb\xdb\x12\x5d\xeb\xea\x29\xca\x25\xac\x48\x99\x75\xaf\xc1\x36\xca\x46\x33\xdb\xd3\xed\xe0\xee\xc6\xe5\x19\xa4\x42\xbe\xc5\xa8\x72\xc0\x42\xd0\xb0\x3e\x05\x9f\x85\x81\x54\xcd\x52\x85\xfd\x7a\x91\xa4\xc9\x90\xd1\xd8\xb7\x56\x80\x37\x3a\x61\x36\x7e\xd5\x67\x54\x8d\x1e\x22\xd2\xb6\xe1\x78\xae\xce\x86\xb2\xa9\x2e\xdd\x70\xe6\xc4\x4d\xf3\x3e\x92\x40\x75\xfd\x8d\x87\xae\xb1\x61\xac\xef\x34\x91\xac\x7f\xd5\x18\x56\x7f\xe1\x65\x9e\x5d\x90\x37\xda\xe7\x0e\xcb\xaf\xa6\x1a\xa2\xc2\xcb\x52\xac\xbe\x40\x25\x09\xb1\x58\xae\xf4\x79\x27\x59\x64\xdd\xda\xb3\x64\xcf\x09\xe1\x3c\x91\xf0\xca\xa1\x61\xed\xfe\x49\xfd\x50\x2a\xbd\x5e\x2a\x13\xad\xa3\x58\x23\xaf\x11\x13\x8c\x35\x3c\x56\x4c\xc6\x2a\xa1\xf0\x99\xa6\xee\x65\xa2\x4e\x90\xdc\x3a\xc1\x3f\x49\x07\x4f\x4b\x0f\x3d\x14\xbf\x0b\xd7\x47\x68\x52\x89\xa3\x69\x79\xe6\x80\xb6\x32\x3f\xce\x8e\xb7\xad\xd8\x1c\x37\x5a\xf7\x04\x5c\x8f\xbe\x04\x41\xf4\xab\x5a\x7a\x9f\x8a\xdb\x1c\xd0\xe3\x57\x96\xa5\xb9\x30\xfb\x1b\x62\x47\x72\x8c\x6e\x8e\x6b\xd1\xd3\x4a\xa2\x7b\x13\xd3\xc3\x7c\xb6\x73\x15\x7b\x9e\x70\x59\xac\x27\xf8\x87\x33\x1a\x22\x67\x40\x8d\xeb\x82\x46\x8a\x07\x18\xc2\x5a\x73\x92\x4f\x4f\xb5\x92\x81\x41\x74\x3e\x50\x7b\xfa\x6c\x65\x86\xc4\x9e\x7d\x6e\xae\x7e\xf9\xae\xc4\x24\x6b\x5d\xa8\x8b\x94\x69\x47\xeb\xfe\x64\x5a\xfd\x2a\xa8\xad\x8d\x60\x6d\x5f\xa6\x9f\xd9\xbf\xed\x6f\xf1\x29\x7a\x28\x24\xdb\x15\xad\xe0\x20\xc9\x57\x1b\xfb\x59\xa6\x35\x5e\xe2\x83\x76\x2c\x02\x04\xab\x88\x9b\x2b\x3f\x47\x1b\xf6\x8c\x96\x79\xb9\xc5\x96\x57\x01\x4b\xaf\x98\x7d\x36\x6d\xd6\x0a\xfc\x4a\x47\x94\x0c\x8d\x8f\x40\x3e\xc9\x97\xbe\x27\x2a\x02\xd5\x35\xbc\xe1\xfd\x66\xd5\x0d\x98\x13\x6c\xdb\x3d\x82\x93\x9e\x0d\x5b\xd9\x1d\x63\x45\x7f\xf9\x9d\x75\xca\x66\x40\xd4\xe0\x9a\x38\x37\x26\x1c\x94\xab\x20\x05\xff\x22\x26\xcf\x60\xb0\x0f\xab\x0f\x77\x19\x44\xd8\x1c\x76\xde\xdd\x0c\xd2\x30\x53\x68\xfb\xbf\x5b\xab\x97\x9a\x11\x9a\x94\x7b\x89\x2f\xdb\xb6\x94\xcf\xbc\x1b\x6f\xd4\xf7\x4c\xee\x71\xd6\x1e\x5a\x0f\x6a\x7b\xd1\x56\xd1\x06\xad\x2f\x88\x82\x9a\x5b\xe9\xf4\xbe\xd1\xe0\x67\x1d\x95\xea\xa5\xfa\x0c\x57\xf5\x5b\x02\xf2\x5c\x94\xc4\x46\xab\xcd\x8c\x76\x0c\xd5\x4c\xd3\x2f\x2a\xf1\x99\xbd\x60\x88\x31\xc6\x43\xd3\xfb\x5f\x41\xcc\x83\xde\x2f\x25\xed\xdc\x2c\xaa\xe5\x48\x15\x85\xfb\x6c\x96\x06\xc8\x9c\x1e\x78\xb9\x2a\x68\x5e\xbb\x89\x73\x1e\x1f\x2d\x06\x13\x12\xc5\x2d\xf4\xf2\x12\x36\x00\x7d\xfc\xdb\xa6\x1c\x37\xf8\x50\x66\x43\xf6\xed\x46\x11\xc7\x0b\x39\x0d\xbe\x91\xc6\x69\xca\xe9\x98\x0b\xa3\x56\xdb\x80\x25\x88\xe8\x3d\x5f\xb4\x3b\x84\x06\xb7\xdd\xa8\xfc\xf9\xa9\x64\x27\x8e\x04\x84\x46\x9f\xa7\x72\xa9\xaf\xe6\x75\xac\x4e\xac\xfa\x77\x1a\x91\xe0\x1d\xe8\xd7\x1e\x5e\x1e\xaf\x8f\xb8\xdd\x76\x25\xbb\x18\xc2\xf1\xd8\xad\x9c\xf1\x60\x21\xfd\x58\x55\xde\x22\x83\xea\x53\xe1\xf3\x90\x82\x77\x71\x81\x26\x18\x01\x36\x45\x3f\x46\xa4\xd1\x49\xff\x23\xd6\xb8\xe7\x78\xc6\xd3\xe5\x7a\x31\x98\xa9\x92\x35\xd5\xc0\x0e\xd8\x4b\x47\xc2\x75\x6d\xf9\xee\x55\x24\x9c\x2b\xc3\xdc\x91\x1f\x50\x7b\x91\x2e\x37\x29\x3c\xa7\x19\xd7\x34\x84\xee\xb5\x8d\x1c\x9d\xbd\x09\x30\x60\x32\xbd\x11\x29\xfd\x1b\xd5\xd5\x42\x85\xfa\x2b\xcf\xae\x31\x0b\x9c\x64\xdb\xa4\xf7\xcd\xdc\xc5\xb5\x34\x30\x68\xd0\xc9\x7a\x16\x48\xaf\x9f\x20\xee\x1b\xdd\x35\xb3\x83\xcd\x4c\xed\x5c\x84\xba\x22\xba\x31\x3f\x5e\x5e\xb0\xda\xaf\xc3\x2b\xe7\xde\x8f\xb7\x80\x7e\xe1\x16\x09\x62\x21\xc8\x02\xf8\x18\x6e\xfa\xb0\xa0\x25\x63\x77\x20\x4a\x12\x3a\x56\x57\xcc\xa7\x82\xdc\xe2\x48\x8d\x05\x33\xd6\x89\xe9\xd4\x6d\x26\x13\xde\x19\x7c\x9d\x58\xfa\xa2\x1a\x0c\xdc\x77\x7c\x7d\x4c\xe8\x2f\x29\x92\x2d\xfe\x3f\x35\xff\x06\x00\x00\xff\xff\x7a\x22\x95\xef\x8b\x06\x00\x00")

func test_certsTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserKey,
		"test_certs/testuser.key",
	)
}

func test_certsTestuserKey() (*asset, error) {
	bytes, err := test_certsTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":       test_certsCaCrt,
	"test_certs/ca.key":       test_certsCaKey,
	"test_certs/node.crt":     test_certsNodeCrt,
	"test_certs/node.key":     test_certsNodeKey,
	"test_certs/root.crt":     test_certsRootCrt,
	"test_certs/root.key":     test_certsRootKey,
	"test_certs/testuser.crt": test_certsTestuserCrt,
	"test_certs/testuser.key": test_certsTestuserKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":       {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":       {test_certsCaKey, map[string]*bintree{}},
		"node.crt":     {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":     {test_certsNodeKey, map[string]*bintree{}},
		"root.crt":     {test_certsRootCrt, map[string]*bintree{}},
		"root.key":     {test_certsRootKey, map[string]*bintree{}},
		"testuser.crt": {test_certsTestuserCrt, map[string]*bintree{}},
		"testuser.key": {test_certsTestuserKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
