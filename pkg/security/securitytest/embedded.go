// Code generated by go-bindata. DO NOT EDIT.
// sources:
// test_certs/ca.crt (1.111kB)
// test_certs/ca.key (1.675kB)
// test_certs/client.root.crt (1.099kB)
// test_certs/client.root.key (1.679kB)
// test_certs/client.testuser.crt (1.107kB)
// test_certs/client.testuser.key (1.675kB)
// test_certs/node.crt (1.188kB)
// test_certs/node.key (1.675kB)
// test_certs/mt/ca-client-tenant.crt (1.111kB)
// test_certs/mt/ca-client-tenant.key (1.675kB)
// test_certs/mt/ca-server-tenant.crt (1.111kB)
// test_certs/mt/ca-server-tenant.key (1.679kB)
// test_certs/mt/client-tenant.123456789.crt (1.107kB)
// test_certs/mt/client-tenant.123456789.key (1.679kB)
// test_certs/mt/server-tenant.crt (1.168kB)
// test_certs/mt/server-tenant.key (1.675kB)

package securitytest

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x4b\xcf\xba\x4a\x1a\xc4\xf7\x7c\x8a\xd9\x93\x09\x37\x45\x58\xfc\x17\xdd\x74\x73\x11\x1a\x69\x6c\xe5\xb2\x03\x14\x14\x14\x44\xe4\xe6\xa7\x9f\xbc\xef\x24\x33\xc9\x39\xe7\x59\xfe\x16\x95\x27\x55\x95\xfa\xf7\xcf\x41\x6c\x39\xfe\xbf\x0c\x1c\x32\xc7\x74\x0c\xc0\xf0\x2f\xe5\x88\xe3\x20\x58\x1b\x06\xb8\xaa\x15\x98\x1d\x08\x2a\x87\x66\x6b\x1a\x1c\xd4\xb9\x80\x4e\x0a\x2c\x3b\x9e\x54\x4b\xca\x08\x03\x3e\xac\x9a\xfe\xd6\xdc\x2d\x7d\x16\x21\xa0\x83\x09\x10\x78\x73\x24\x74\x66\x0c\x12\x74\xa6\xd4\xc5\xf3\x03\xe5\xb2\xff\x2e\x9e\xfa\x2d\x91\xab\xc5\x64\x80\xc1\xca\x3f\x43\x40\x18\xc2\xfe\x94\xc8\x9f\x35\x97\xcd\x3a\x33\x20\xa2\x0c\x5c\xcd\x59\x5c\x39\x82\x80\x4c\x50\xb3\xf8\x35\x90\x09\x83\x99\x39\x8b\xdf\x5f\xc6\xaa\xff\x31\x62\x0c\x0b\xae\x01\xfd\xaf\x58\xc7\x8c\xd3\xff\xc5\xb8\x0c\xe1\x33\x81\xc4\x02\xd2\x09\x83\x85\x10\x2a\xeb\x75\xa6\xec\xa7\x24\xf2\x3b\x07\xfb\x90\x38\x0e\x74\xea\xbf\xbe\x8f\x4d\x00\x0e\x06\xa0\x1a\xf8\xf1\x00\x1a\x95\x6b\x00\x8a\xc1\xe2\xec\x3a\x6d\x6a\x6c\x58\x95\x45\xf7\x39\xf1\x30\x2e\x6d\x70\x5d\x4d\x90\x00\x38\x29\x2c\x58\xf5\xb2\xdd\x94\x82\xe8\x83\x00\x85\x48\xcd\xaf\xc5\x85\x71\xaf\xb3\x90\x6e\x36\x3d\xde\xd2\x50\xa0\xdd\xa7\x63\xe4\xbc\x73\xfd\xbb\x5d\x8c\xd2\xc7\xa7\xce\xc4\xfb\xa3\x31\xee\x6b\xd5\x0e\x8f\xba\x15\x66\xf1\xfb\x70\xe8\x36\xdf\xb4\xef\x4a\xf5\x52\x5a\xf6\xc0\x45\xcb\x98\x9d\xbe\x65\xb6\x97\x5d\x43\x88\x62\x76\x12\xbf\x26\x1e\xe6\xe3\x4e\x10\x70\x0a\x3c\xdf\x14\xd5\xc1\x36\x71\x15\x18\xbc\x55\xbf\x64\xe8\x48\xc2\x53\xc8\x6d\xe1\x38\x6f\x3a\x28\x1e\x43\x8e\xa0\x45\x4f\xa5\xb1\xb1\x42\x7f\xa1\xbe\x0c\x16\x9e\x09\x7b\x7c\xdc\x28\x9e\x87\x35\x37\x4c\xbb\x53\x7d\xe4\x35\xff\x85\x85\xc6\xc0\x32\x4a\xcc\xb2\x38\x4a\xc9\x95\x7a\xbe\x5d\xa9\x7c\x02\xb9\x90\x17\x6c\x25\x6e\xb7\x21\xdd\x0c\x84\xa4\xe1\x79\xef\x7a\x76\xf6\x8a\xbf\xc1\xc8\xf2\x17\xdd\x93\x8b\xe3\xaf\xa3\xdb\x00\x07\x9c\xfc\x60\xb8\x32\x69\x15\xe3\x8f\x98\x3f\x26\x73\x2b\x2c\x7d\xcd\xbd\x79\x69\xb7\x17\xd3\xca\x42\x5a\xab\xf4\xbb\x25\xd3\x46\x7c\xc1\x1b\x16\xa3\x7e\xb6\xd8\xc3\xd3\x67\x07\x01\x0a\x60\xb7\x26\xf3\x1e\x81\xc3\x4f\x94\x36\xd5\x20\x28\x35\x0c\x01\x31\x38\x30\xd2\x19\x57\x09\x3a\x87\x22\x03\xd4\x16\x20\xa8\x66\x58\x61\x28\xfc\xb4\xf2\x9f\xda\xf7\x1b\x1f\x06\xf7\x54\x6c\x6f\x7c\xe0\x72\xde\xc7\x7a\x11\x3d\x8b\xa2\xbb\xfa\xbd\x15\xfe\x0b\xf1\xbd\x71\x6e\xc9\xae\x97\xe0\xc3\x2e\xed\x08\xd2\xb5\x51\x2a\x45\x8b\x5f\x5d\x1e\x5c\x88\x54\xb3\xf9\xe9\x42\x6c\x5a\x97\x0a\x54\xfd\xdd\xe5\x34\x29\xc6\x53\xb6\xe8\x8d\x91\xaf\xdd\xd6\xa4\xf5\x6b\x12\xdb\xfc\xee\x1c\x3c\x68\x26\x4e\x61\x37\xe2\x90\xbd\xcb\x28\x4f\xce\x8a\xba\x5f\x9e\x7a\xb0\x68\xc1\x10\x86\xc8\x43\xb1\x3c\xc6\xae\xc7\x2d\xcb\xfb\x38\x8c\xe7\xfa\xfd\xd0\xc7\x1e\x55\x59\x90\x81\x47\x03\xee\xa7\x4a\xe9\x95\x56\x0e\xd4\xcb\x91\x36\x70\x7a\x9d\x3e\xab\xb4\xa9\xd3\xb7\xa5\xd2\xc2\x85\x6a\x63\x7d\x27\x62\xe4\xdb\x1d\xe2\xae\x37\xbd\xa2\xe2\x21\x0e\x8c\x75\x96\xdf\x53\x24\xf3\x8a\xac\x96\x0d\x2f\x47\x1f\x3e\x6d\x23\x95\xdf\x7d\x6e\x87\xc8\x7c\xf4\xdf\x5d\xe1\xcb\x4d\xd8\xbc\x71\xc4\x06\x32\x92\xb4\x6d\xbb\xfe\x61\x72\x6c\x7a\xdc\x9e\xda\x6e\x78\x50\x5f\xa2\x93\xb9\xfd\xa2\x5b\x2b\xb2\x5a\x30\xf2\x24\xb3\x95\x62\x8b\x25\x71\x91\xf0\xd3\x99\xbc\xd3\x23\x29\x5c\x72\xa8\xf6\xc3\xb8\x5e\x3c\x79\xfa\x9a\x8b\x25\x31\xce\x6c\x5f\x64\xd2\xc7\xd2\xfa\x3e\xcb\x75\xfe\xf3\x87\xfb\x9d\x09\xec\xa3\xbf\x4f\xc7\x7f\x02\x00\x00\xff\xff\x44\x8b\xd3\xb6\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xf1, 0xfd, 0xe6, 0xf9, 0xbb, 0xe8, 0xa3, 0xc6, 0x56, 0x7b, 0x72, 0x5e, 0x8d, 0x12, 0x8a, 0x8, 0xcc, 0x34, 0x5e, 0x6e, 0x55, 0x3, 0x21, 0x8a, 0x71, 0xe1, 0x7f, 0xbe, 0x7e, 0xb, 0x3a}}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xab\xda\x01\x85\xe1\x9e\xa7\x38\x3d\xe3\x21\x0a\x44\xe1\x62\x13\x37\x22\x88\x9c\x3a\x72\x14\x41\x44\xf1\xf4\x1e\x9f\xdb\xde\xd5\xae\xe6\xef\xbe\xff\xfc\x7f\xbc\xa4\xa8\xe6\x1f\xc7\x05\x7f\x2c\x47\x0d\x80\x27\xfd\xd1\xa4\xf8\xef\x83\x18\xaa\x2a\x4d\xb5\xca\x03\xa0\x09\xc0\x96\xc0\xa5\xb2\xd3\xf3\xe8\x21\x5f\x57\xf9\xb4\xf9\x28\x1f\x55\x10\x94\x3f\x19\xc4\x80\x3f\x28\xcf\xfa\x71\xd5\x48\x57\x18\x6e\x02\x4b\x74\x44\x26\x43\xca\xbc\xf0\xe6\x00\x4b\x68\x7a\x91\x1e\xb6\x83\xd9\xd3\x36\x79\x46\xc0\x6a\x66\x0b\xf3\x9d\xd8\x4c\x5b\x3d\x50\x73\x17\xf6\x57\xc7\x40\xc7\xe5\x14\x27\x8d\xbe\xef\xf7\x44\xdf\xc9\x32\x55\x4c\x81\x54\x0a\x5c\xc3\x6b\x4f\xfd\xbb\x4a\x5f\xa4\x26\x60\x61\xe4\xf9\xf8\x2d\x4b\xeb\xe9\xb2\x18\x26\x25\x40\x37\x65\x9c\x59\xa1\x2c\xd5\x96\x80\x2a\xdd\x4c\xf2\x2a\x81\x7d\xb0\x0c\x62\xee\x49\x4f\x08\x8f\xbb\x8e\x21\x5e\x5c\x42\xec\xbd\xe2\x98\x97\x6d\x92\xe0\x42\x3d\xec\x25\xb9\x34\xa5\xeb\xd2\x53\x73\x92\xc9\xef\x5c\xf4\x69\xce\x12\xd6\x0b\x12\x29\xc6\x72\x95\xbb\x44\x5c\xda\xba\x09\x6b\x84\x41\x63\xde\x41\x31\x48\x45\xe3\xc3\xb1\xe9\xd5\x30\x12\x27\x78\x69\x3a\x4c\xe7\xe8\xb6\x76\x2f\x9b\xed\x97\x51\xa8\xe6\x6f\xd7\x7a\xa0\x02\xdf\xb4\xd6\xd2\x23\x7e\x78\xb4\xe1\xd9\x70\xc8\x0f\x04\xbb\x96\xee\x8b\x12\xec\x0b\x4f\x6a\x45\x7c\x8e\xd4\xc2\x5e\xe9\x73\x97\x0a\x89\xf6\x22\x71\x39\x15\x6f\xd0\xb9\x53\x15\x81\x0d\x78\x30\xa9\x3c\x10\xee\xdd\x6f\x2a\xd0\xdd\x05\xbe\xce\x94\x8b\xb8\xa7\xbd\x70\x6d\x54\xe4\x42\x0c\xa6\x32\x1c\x05\x07\x4f\xb7\xd7\x48\xdd\x41\x94\xb6\x43\x51\x7a\x8a\xea\x08\x94\xd8\x18\x7e\x6b\xf9\xea\xbb\xa8\x54\x12\xff\x0c\x23\xe3\x4c\x11\x79\x7a\xe5\x88\xb8\x90\x27\x3f\xea\x42\x94\x87\xc9\x8f\x6f\x7d\x61\x58\x83\x2f\xf8\x56\xf2\xea\x68\x09\x63\x0b\x04\x5e\xb8\x7c\x0c\x18\x12\x30\xbf\x33\x91\x0a\xdb\xda\x5b\xd7\xed\x4b\xe2\x2f\xe8\x67\xe3\xa1\x22\xaf\xb9\xd4\x80\x02\xfd\xce\x1e\x54\xb1\xdd\x3c\xaa\x18\x12\x36\x3b\xb7\xe8\x58\xf3\xe3\x06\x66\x97\xce\x58\xea\xe9\x3a\x4f\x31\x79\x6a\x42\x0f\xe7\x50\xd8\x33\xdc\xa9\x52\xf5\x22\x57\x8a\x8d\x94\xfe\x66\xae\xb2\xdf\x0f\x98\xff\xfc\xf4\xfa\xf3\x2c\x97\xe6\x95\x1a\xee\xf9\xd1\x5b\x8d\x5a\x3c\xb3\xf4\xd6\x2c\x8b\xda\x94\x18\x47\xb8\x0b\x4b\x36\x87\x39\xf6\x80\x93\x6f\x89\x62\x90\xb5\x3e\x72\xf5\x14\x56\x05\x83\xb6\x58\xf5\xc7\x64\xad\x8b\x19\x0b\xd1\x82\x3c\x83\xbf\xb8\x31\x12\x2d\xe2\xc7\xdb\xce\xf3\x37\xac\x66\xcb\x8e\xc4\xdb\x7f\x18\x97\xc6\x3d\x5d\xcb\xb5\x92\x1c\x85\xb5\xb9\x21\x92\x26\xf7\x24\x29\x09\x75\x2c\x01\x6e\xee\xf4\xb9\xca\x50\x1d\x78\x4f\x55\xbe\x78\x1a\x82\x88\x19\x5e\x60\xea\x7e\x2c\xad\x6a\xa0\xba\xc4\xdd\x8e\x1a\xd2\xa4\xf2\x40\xff\x0d\xb2\x9b\x76\x00\x71\xf1\xd1\xd1\xb9\x96\xc0\xdc\x2c\x64\xb5\x9f\x70\x6c\x31\x9d\xc7\xc3\x71\x87\x8c\x53\x72\xca\x63\xda\x4c\xbe\xb5\xe6\x87\xf8\xfe\x15\x2d\x5d\x05\x6e\x7f\xb3\xd4\x6f\xac\xed\x99\x0e\x38\x81\x5e\x10\x96\x75\x50\x9a\xed\xf6\x89\x49\xf8\xa5\xa2\x8b\xea\xd7\x34\x47\x1f\xa3\xed\x48\xf7\xf5\x26\xd4\x01\x76\x31\xf7\xe3\x65\xc0\x84\xef\xc2\xc0\x2c\x16\x69\x87\x4d\xf0\x4f\xf1\x0d\xc8\x11\x11\xae\x6b\xe2\xd9\x09\x10\x04\x5d\xf2\x24\xd9\x8b\x33\x66\x0d\x91\x20\xd3\x4a\x83\x56\xea\x4f\xb2\x1f\xa0\x12\x5e\x8b\x62\xcf\x67\xe4\xde\x7d\x3b\x3f\xb2\xa8\x3d\x2f\x82\x84\xb1\x1a\xc7\xb9\x8d\x14\x43\xa3\x46\xfb\xb7\x76\x64\xd9\xfc\x1c\x39\x99\x70\x49\x24\x17\x43\xb6\x36\x49\x67\xaa\x5b\x75\x86\x98\xcf\x1b\x56\xb3\xba\x79\x06\xd1\xd5\xa8\xba\xe7\x20\x48\xce\xcd\xc5\xa6\x12\xb5\x7e\x85\xf4\x28\xc7\x0e\x12\xbd\x18\xe0\xb1\x28\x09\x5d\x2e\x61\x16\x5d\xc9\xf5\xa9\x99\xb6\xaf\xfc\x8c\x6f\x20\xf0\xda\x35\x17\xea\x98\x4f\xd8\x3c\x23\x57\xb2\x19\x58\x6f\x23\xd4\x14\xc3\x9b\xf0\xba\x11\x97\x79\xa3\xcd\x8c\x9a\x85\x3a\x55\xb7\x2e\x86\x1b\xf5\x96\xf5\xe5\xb2\xa4\x05\xee\xfc\xd6\x3c\x46\x25\x9a\x35\x5b\x0f\x42\x5c\xd8\xb8\x73\x87\xce\x1b\xd0\x33\xfd\x4a\x3d\xcd\x79\x8d\x64\x7c\x20\xc5\x65\x8a\x96\xe5\x01\xab\x98\x94\x02\x66\xb1\x5e\xe8\xcf\x93\xbc\xf9\x68\x26\x16\xf4\x5a\x89\x84\x56\xde\xf8\x98\xf8\x07\x2a\xa6\x65\x4c\xda\x56\x4e\xc1\xbc\x61\xa4\xe5\xb2\xb6\xde\x44\x27\x64\x5b\x98\x96\xe2\xb7\x02\xd3\x23\x34\x0f\x5d\x2d\x21\x45\xfa\xb4\x35\xbe\x96\x6b\x23\xe6\x0d\xc3\xe5\xb6\x66\x81\xb2\x02\x15\x49\xd3\xc9\x2d\x17\x79\x74\x5a\xdd\x83\x12\x8e\x40\xf6\xdf\xd2\x0f\x29\x04\xe5\x6b\x73\xa3\xa4\xaf\x37\xb5\x51\xdb\x68\xc9\x2e\xbe\xe8\x7d\x33\x06\xf1\x29\x68\x1b\xed\x2c\xd3\x27\x0e\xfd\x87\x8b\xce\x45\x80\x92\x76\x0e\x89\x5d\x02\x6a\x90\x58\xa6\x11\x69\x2f\x09\x09\x0a\x59\xea\x0d\x93\x8a\x09\xea\x28\x58\x25\x84\x0c\xd9\x0f\x40\x74\x1a\x4a\x68\x9d\x4e\xa4\xcb\xf1\x7d\x49\xab\x7f\x9c\xd7\x62\x1f\xd7\xa5\xe3\xf7\xd0\x12\x03\xd1\x79\x1a\xcb\x71\xe0\x9e\x90\xe5\x11\xeb\x60\x52\x80\x7e\x17\x67\x89\xf6\x6f\x61\xe4\x41\x96\xea\xba\x1e\xd4\x2d\x2a\x57\x8f\xb9\x53\x64\x91\xa4\xce\x97\x75\xbc\xe1\x27\x4b\x7e\xfc\x51\x66\xcd\x43\x84\x81\x6c\x1b\x6a\x6c\x21\x11\xf8\xe6\xa0\x6b\x16\x41\xf3\xd6\x8f\xbb\x77\x17\x8a\xee\x3f\xe3\xbd\x74\xe2\x7a\xe9\x0f\xf5\x53\xcf\xa7\x32\x7d\x95\x67\x47\x3c\x2b\x6d\x13\xda\xe6\xd9\xe8\xf8\xe7\x39\x15\x6c\xe7\x2c\xa9\x45\x22\x70\x48\x76\x12\xd4\x54\xec\xe1\x67\x9e\xda\xb2\xa9\x5d\x3f\xb0\x25\x1d\xac\xc4\x34\xfd\x16\x15\x77\x44\x46\x1d\x58\x34\xc7\x13\x12\xbd\xe0\xe7\xe3\xf9\xfc\x2f\xf2\x97\x14\xc9\x14\xff\x9d\x9a\xff\x05\x00\x00\xff\xff\x4a\xf1\xd0\x42\x8b\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0xdf, 0x4, 0x11, 0xab, 0xd2, 0xdd, 0x0, 0x8f, 0xf9, 0x1f, 0x0, 0x35, 0x2, 0x61, 0x95, 0x31, 0x81, 0x48, 0x51, 0x6, 0x8f, 0xfd, 0xdc, 0xc7, 0x83, 0xdb, 0x21, 0xe5, 0x13, 0xcf, 0xdc}}
	return a, nil
}

var _test_certsClientRootCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\x49\xcf\xb2\x48\x17\x40\xf7\xfc\x8a\x6f\x6f\xbe\x80\x38\x20\xcb\x9a\x40\x94\x02\x8a\x41\x86\x1d\x83\x4f\x21\xa0\x28\xc8\xf8\xeb\x3b\xcf\xdb\x49\xf7\xa2\xef\xea\xe6\xdc\xe4\x6c\x6e\x72\xfe\xff\x3b\x90\xe8\x86\xf5\x3f\x44\x5c\xdf\xd0\x0c\x04\x7c\xf2\x87\x0a\xd4\x30\x90\xb8\x22\x04\xee\x77\x0e\x26\x03\x02\x6e\xb0\x80\xe1\x48\x92\x4d\x79\x37\xf3\x4f\x43\x9e\x3c\xcf\x06\xd6\x63\x60\x41\x5e\x7f\xca\xfa\xa1\xab\x93\x04\x01\xeb\x35\x80\x41\x27\x50\xd7\x98\x08\x88\xf1\x8d\xb1\x2b\x99\x1a\x9c\xc9\x56\x97\x3f\xd5\x32\x96\xf9\xac\xf9\xc0\x87\xdc\xba\x41\x40\x7d\x4c\xac\x31\x96\xbf\x4b\x26\x6b\x55\x8a\x20\x66\x3e\xb8\x6b\x93\xb4\x08\x14\x03\x99\xe2\x7a\xb6\x2a\x20\x53\x5f\x4b\x7f\xa1\xe5\xff\xee\xec\x1f\x46\x11\x9d\x49\x05\xd8\xdf\xb2\xd6\x47\xc1\xbf\x32\x21\xc5\xc4\xa2\xa0\xd7\xc1\x36\x20\x60\xa6\x24\x7f\xaa\x63\x81\x11\x02\x9e\x31\x61\x16\x5f\xae\x6d\x62\x94\x63\x6e\x01\x46\x20\x64\x00\x73\x4e\x1c\xf0\x7b\x67\x2d\xe2\x9c\x40\x01\x98\x73\x88\x63\xf2\x65\x6a\x2e\x2e\x25\x7e\x95\x3b\xef\x7e\x07\x53\xee\xbf\xbc\x56\xec\x55\xed\xf1\x55\x5a\x73\x93\xde\xfc\x71\xa7\xac\xd0\xc8\xa2\x8e\x02\xbd\xa9\xf7\xfa\x69\x52\x76\xa8\xc5\xc2\x6d\x73\x3c\x57\x5a\x5b\xae\x52\x0b\x8e\x7b\x37\x4d\x59\x74\xa8\x15\x6a\xc8\x46\x98\x47\x52\xef\x54\x61\x02\x90\x18\x72\xe9\x96\x36\x5b\xcd\xae\xb6\xc7\x87\x71\x91\x27\x71\xa8\xb6\x8f\xcc\x74\x89\xb0\xe2\xeb\xcb\x6b\x74\xa9\xb5\x9d\x54\x9a\xc5\x37\x75\x43\xc3\xae\xfd\x54\xd4\x9f\x3f\x61\x2c\xcf\xb2\xaf\x6c\x4a\x05\x26\x11\x0c\x76\xaa\x19\x8f\xf3\xd1\x1d\x2b\xab\x6e\xb8\xe9\x82\x4b\x61\x97\xc2\x7c\xe5\xc4\x8c\xe8\x27\xea\xd8\xf9\x62\x9f\xf6\x5f\x57\x3a\x83\x62\x3b\xbd\x0f\x62\xa2\x8d\x0b\xaf\xbc\x4e\xaa\xcb\x6c\xb7\x5d\x83\x57\x2b\xce\x9b\x5b\x20\xf7\x9d\x12\x8c\x3f\xa1\xab\xaa\xc7\xcd\x5d\xf8\x4a\x07\xf4\x3e\x20\xe2\x14\xe9\xa4\x28\xca\x3e\x2b\xcb\xfd\x01\x3d\x67\x69\x97\xab\x12\x50\x2b\x23\xd3\x74\x50\xfc\x44\x9b\x7c\x5d\x99\x71\x97\x3d\x6f\x99\x9d\x4c\x52\xd5\xd8\x10\xe9\x3b\xee\x05\xb7\x51\x77\xd5\x72\xbd\xde\xeb\xf4\xf1\xe0\xd9\xe9\x78\x52\x7d\x5a\xf5\x08\x4c\x04\x80\x94\xbe\x28\x0a\x26\xcc\x63\x7c\x73\x25\x07\xb0\xb3\x08\x01\xc3\x80\x87\x9c\x42\xfa\xfb\xb9\x42\xb8\x30\x46\x29\x68\x75\x84\x7a\x1d\xb0\x40\x83\x13\x45\x14\x48\x3a\xf2\x3e\xba\x67\x64\x3b\xcc\x08\x44\x53\x00\xc0\xde\x80\x80\xc1\xf0\x19\x2b\x8e\x9a\x2b\xce\xd3\xde\xbe\xa4\xbd\x12\x08\x6a\x28\xc1\x17\xb7\xbe\xaf\xcb\xc9\x3e\xb5\x2e\xb0\xe7\x20\x92\x86\x68\x4a\xaf\x85\x79\xb1\xd4\x84\xfe\x1c\xea\x4d\x2f\xca\x99\x9c\xfb\xf9\x24\x55\xde\x1c\xf9\x62\xaf\xdd\xbf\xcb\x79\xf0\xd2\xfd\x59\x08\x09\xcd\xc2\xfd\x8b\x9a\xae\x5c\x3d\x72\xef\x33\x70\xb4\x51\x97\xe3\x1a\x9b\xf6\xe1\xbc\x6c\x5f\x29\xeb\xf1\x81\xd8\x83\x9d\xce\x73\x3d\x9d\xcd\xb1\xbf\xf2\x23\x42\xa3\xa3\x86\x63\x6f\x75\xa3\x70\x6a\x87\x46\xe1\xe3\xa6\x38\x60\xe6\x69\x3f\x2b\x1e\x80\xb2\x8b\x3c\x23\x28\xd6\xbc\xd4\xbf\xc9\xbd\xa9\x11\x74\x8b\x05\x7e\x57\x59\x9e\x8b\xf1\x2d\x76\xfb\x51\x0c\xaf\xb2\xbe\x05\x6e\xd9\xa5\xc2\xa0\xd4\xcd\xf8\xca\x93\x7c\x9b\x9c\xab\x68\x31\x33\x4b\x74\x10\x38\xdd\x22\x5d\xf3\x2b\xcd\x4f\x2d\xd5\x4d\xa2\xaa\x20\x5a\x44\xc3\x93\x64\xad\x5e\x96\xf2\xad\xcd\x9c\xfe\xb3\xeb\x26\x1d\x51\x61\xf1\x74\x76\x89\xab\x0f\xed\x55\xa9\x16\xbd\xe1\xd6\x23\x34\xce\xda\xb7\x76\x37\xee\x00\xd5\xc0\xee\xbc\xc6\x09\x67\xd9\x50\xba\x4f\x02\x93\xf2\x3d\xba\xb6\x5d\x9d\xda\xd0\x66\xe7\x84\x36\x1b\x21\x7a\x0c\x4c\xf8\x93\x06\x62\xe1\xff\xe6\xe2\xaf\x00\x00\x00\xff\xff\x8c\x6e\xf8\xa2\x4b\x04\x00\x00")

func test_certsClientRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientRootCrt,
		"test_certs/client.root.crt",
	)
}

func test_certsClientRootCrt() (*asset, error) {
	bytes, err := test_certsClientRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.root.crt", size: 1099, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0xcb, 0x2d, 0xd3, 0x3c, 0x3e, 0x4f, 0xa8, 0x14, 0x6f, 0x60, 0x8, 0xe4, 0xea, 0x4, 0x98, 0xc2, 0x45, 0x82, 0x5a, 0x53, 0x23, 0xe1, 0x2c, 0x13, 0x7d, 0x50, 0xf0, 0x1f, 0x2, 0x7, 0x61}}
	return a, nil
}

var _test_certsClientRootKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x50\x02\x85\x61\xcf\x53\x8c\xa7\xb6\x68\x9a\x2c\x46\x5c\x72\xce\xd9\xd1\xc4\x26\xe7\x06\x9e\x7e\x6b\x47\xef\xb1\xc7\xfc\xee\xfb\xcf\xff\xc6\x0a\x92\x62\xfe\x71\x3d\xf0\xc7\x76\x95\x10\xf8\xc2\x1f\x4d\x48\xfe\x3d\x90\xa1\x28\xc2\x0c\x14\x16\x00\x8d\x03\x8e\x00\x4e\x31\x31\x6b\x0f\xe5\xd1\x07\xd1\x04\xab\x94\x0b\x95\xc0\x79\xf6\xb2\x0a\xad\x85\x9f\x57\xa4\x61\x47\x7d\x12\x73\x68\x21\xd5\x69\x08\xcd\x5e\x42\xdb\x0f\x64\x91\x5f\x7f\x1e\xfe\xcc\xb5\xda\x8c\xa9\xa9\x34\xa2\xaf\x6c\x7b\x35\xbf\x36\xe2\x3c\xb3\xd5\xe0\x6f\xbf\x36\x69\xd2\xab\xf2\x7e\xb0\x99\x76\x40\x67\x32\xde\x0d\x97\x38\x08\x48\x3b\x86\x16\xa5\x1e\x3f\x3c\x4c\xda\x91\xba\xed\x82\x6f\x18\x4b\xa1\x05\x1f\xaf\xc6\x99\xd5\x97\xe1\xee\x12\x93\x9a\x74\xcd\x95\xce\x52\x26\x6d\x3f\x72\x6a\x9f\xa4\xbc\x89\x7d\x2e\xfa\xd5\x6b\xff\x22\x32\x34\x4b\xb0\xf1\xf6\x22\xb0\x0b\xa0\x7f\x91\xb2\xb0\x00\x67\xcf\xef\xb9\xdc\x41\xde\x51\xcf\x17\x95\x9d\x9c\xc5\x62\x6e\x1c\x99\x2e\x42\x34\xce\xd4\x4e\xcf\x13\xcf\x2a\x36\xbd\xb2\x45\x64\x22\x84\xfc\xec\x3e\x77\x8f\x61\x52\x19\xc3\x56\x82\xc4\xfc\x4e\x1b\x3b\xc5\x61\xd0\x95\x3f\xcf\xb3\x39\x24\xb9\xed\xb4\x8f\xec\x17\x0f\xe6\xf0\x6f\xa3\xd9\x82\x84\x45\x99\x8a\x78\x6c\x13\x34\x54\xaa\x42\xba\x2e\x30\xa7\x8f\xa1\x75\x4b\xdf\xfd\xf7\x92\x62\xac\xb4\x95\x69\x26\xdd\x45\xd3\xd8\xf3\x59\x1f\xd4\xb8\xad\x9f\xc2\x03\x07\xb0\x60\x52\x58\xe0\x70\x0d\xcc\x57\x2c\xe8\x33\xec\x8a\xe6\x04\x72\xde\x49\xc3\x3d\xa0\x24\x5b\x61\xa0\x9e\x4a\xd8\x6b\xa0\x45\x2c\x3f\xd3\xcf\xbc\x23\x24\x77\x66\x39\x81\xb6\x27\x9d\x22\xb4\x90\x04\xc5\xf2\x8a\x7f\x30\x1c\x95\x1c\x18\xd0\x3c\x70\x98\x59\x81\x9a\x9b\xb3\x6d\x2b\x6b\x0d\x31\x8d\x40\x55\x6a\x3a\x67\x77\x54\x79\x7e\x14\x2d\x98\xb4\x54\xe2\x55\xc7\x70\x0d\x22\xe7\x09\x5c\x4b\x1f\x80\x09\xdb\x81\x7b\x52\x2d\xbc\xd3\xf7\x0e\xdf\x15\x67\x40\xf2\x95\xba\xa5\xd0\xbe\xf2\xa9\xe9\xe7\x82\x79\xf5\x8b\xa8\xaa\x79\x87\xb3\x93\x2c\xa0\xa2\x8a\xc6\x7d\x2c\x56\x65\xfd\x7c\xef\xd8\xe6\x4c\xaf\x38\xac\x94\x0a\x1d\x59\x37\x0b\xbb\x7c\x0b\x1d\x07\x99\xc7\x98\x29\xcf\x76\xba\x3e\xdc\x50\x4c\x83\x18\xa5\xf6\x89\xe2\xad\x24\x89\x86\x16\xf1\xfc\xc4\xe3\x5e\x02\x9f\xfc\x57\xf2\x9f\x5e\xa4\xfa\x3d\x6f\xd5\xe4\x1c\xda\xbb\xcb\xfd\x29\x57\x3a\x1e\xca\x25\x5b\x8f\x40\x58\xbc\xfb\xce\xc4\x70\x92\x88\x9f\x92\x63\xee\x71\x09\xe5\x49\xe7\x4a\x78\x5d\x22\x39\xdd\xc8\x45\x16\x27\x06\x41\x58\x55\xd0\x1f\x39\x07\x01\x4f\xf8\x00\xec\xf0\x1c\x53\x50\x9d\xdc\x41\xcb\x69\x0d\x98\x24\x16\x58\x85\x63\x5c\x05\x73\x5d\x75\x9f\x3e\xed\xc2\x8b\xb4\xb6\x5e\x1e\x21\x62\x21\xe9\x0e\x04\x8f\x2e\x22\xcc\x04\xb5\x53\x77\x58\x6b\xf0\xaa\xa5\xf8\xb0\x0e\xa5\xd3\x25\xdc\x70\xec\x79\x06\x2c\x0c\x62\x1c\xba\x3d\x7d\x8d\xb6\x3f\xf8\xb8\x41\xce\x47\xd5\xb6\x14\xb3\x8c\x8c\xe5\xf1\x21\xf3\x64\x07\x76\x92\x93\xa0\x92\x2f\xac\xcf\xdd\x87\xb2\x96\x21\x85\xd2\x15\x26\x14\xe4\x6e\x3e\xfd\x0d\x90\xbd\x22\xd1\xed\x01\x45\x79\x64\x93\x0f\xc6\xe7\x7c\xc6\xc5\x4a\x5a\xce\x15\x44\x13\x51\xf9\xf7\xe2\x5b\xce\x6f\xb9\xef\xde\x6b\xff\x15\x9b\xec\x09\x2d\xf2\x87\x93\x30\x89\x18\x7e\x2a\xa9\x7c\xee\x15\xbe\x76\x3c\x71\xba\x83\x26\xbf\x3f\xbf\x3a\xc6\x37\x8d\x34\x2a\x19\x3f\x5c\x3c\xe5\x56\x38\xb5\x58\x90\x28\x69\x92\x01\x86\x0b\x02\xae\x33\x46\x68\xcd\x8f\x51\x0a\x22\x8b\x7a\x3c\xd6\xb1\xe1\xca\xf6\x75\x7d\x31\xa7\x33\xa4\x15\x69\xbb\x4a\xee\xa6\xfa\xad\x56\x42\x87\x2e\xd4\x97\x38\xcb\x42\x95\x8b\xdc\xab\x00\x5c\x30\x85\x89\xb0\x9a\x3d\x94\xd3\x20\x6b\xcf\x62\xb7\x68\xac\xd2\x4c\xd3\x62\xb2\x51\x21\x91\x11\x13\x0e\xc9\xf3\x8a\x1b\x26\x04\x54\x1a\xe0\xb7\x0a\x26\x09\x38\xbf\x73\x02\x2f\xa3\x40\x3b\xac\x51\x92\x29\xec\xe0\x8f\x03\xe1\xfa\x13\x4e\xb0\xe5\xfa\xf3\xfd\x98\xa9\xab\xcb\xe2\x65\x2c\x1a\x15\xa6\x31\x33\xc2\x54\x8e\xdb\xdf\xfa\xfb\xfb\x64\x6f\x9e\x65\x0f\x02\x55\x8e\x90\x14\xc3\x57\x98\x81\x4f\x1a\x1c\x1d\xcd\x5a\x10\xdb\x0e\xfb\x54\x49\x76\xbf\xd2\xf3\x80\x26\xbe\xbe\x9f\xbd\x2e\xad\x38\x3e\x48\xd5\x80\x0a\xe7\xf7\x5a\x17\xe2\xbd\xf9\x6e\xe3\x9b\x77\xe4\xc5\x73\x3b\x78\x8c\x7c\xa4\x8d\x83\x08\xef\xb7\x48\x42\x15\x3a\xd7\xc9\xa0\x05\x6f\x03\x21\x75\x56\xdf\x0d\xfa\x3b\xb2\x56\xc7\xd5\x09\x4b\xac\x61\x90\x3c\x9b\x95\xcd\x8d\x40\xa4\x67\x56\x62\x18\x55\x04\x12\x25\xca\x64\x94\x71\x5f\x39\x17\xac\xb2\x84\x60\x9b\x29\xed\xf3\x42\xfc\x8e\xec\xb6\x9e\xb6\x29\x47\x1f\x2b\xf0\xd3\x1c\x4f\xeb\x9a\x70\x37\xbb\xcc\x33\x25\x15\x93\x8b\xdd\xdf\x08\x35\x6b\xad\xc9\x63\x96\xaa\x47\x38\x03\x3f\xa7\xa8\xfb\x41\x16\xde\xb6\xde\x5c\x82\x3e\xaf\x11\x19\x94\x61\x21\x12\xab\x92\x20\xc7\x4d\x85\x36\xa7\x71\xfc\x31\xa2\xb6\x8e\x99\x02\x08\x7e\x0d\x76\x5c\x92\xf7\xca\x24\x8f\x28\x71\xe9\x00\x72\xf5\x66\x5b\xc8\x65\xa9\xa3\x73\x34\xb6\x76\x78\xcd\x60\x34\xd9\x40\xa2\x60\x77\xec\x35\x8f\x03\x9b\x6d\x3d\x64\x65\xd8\xf2\xd0\x6e\x12\x34\x3d\x80\xc9\xb9\x6d\x82\xd7\xf5\x20\xd8\xfb\xf5\x38\xc3\x8f\x54\x53\x68\x0a\x86\xde\x5e\xbb\xb6\x60\xa7\x28\x75\x5b\xb3\x15\x61\xfc\x20\x47\xa9\x1a\xc2\x2b\x25\xf1\xc5\x73\xbf\xb9\x7b\x0f\x72\x73\x6c\xf8\x53\x11\xdd\xc8\x1e\xf2\xd8\xcb\x60\x06\x37\x21\x25\x94\x07\x05\x5a\x25\xd8\x25\x62\x13\x1b\x49\xa6\x9f\xeb\x29\xa3\xb2\x9f\xb6\x4b\x44\x74\x9f\x50\xf6\x8a\x8a\x90\x72\x58\x89\xc4\x94\x98\x29\x13\x3d\x31\xbc\x73\x63\xae\xeb\xbf\x7f\xa1\x7f\xac\x08\x26\xff\xff\xb9\xf9\x6f\x00\x00\x00\xff\xff\x1e\x52\x11\x24\x8f\x06\x00\x00")

func test_certsClientRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientRootKey,
		"test_certs/client.root.key",
	)
}

func test_certsClientRootKey() (*asset, error) {
	bytes, err := test_certsClientRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.root.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x87, 0x86, 0xc9, 0x19, 0xfb, 0xac, 0xaf, 0xa2, 0x39, 0x4, 0xc, 0xa2, 0x6e, 0x8a, 0x4d, 0x19, 0x82, 0x95, 0x4c, 0xb2, 0x53, 0xb4, 0x83, 0xd0, 0x4b, 0x54, 0x72, 0x3, 0xec, 0x77, 0xc9}}
	return a, nil
}

var _test_certsClientTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xbb\xd2\xb2\x48\x10\x86\x73\xae\x62\x73\x6a\x0b\x04\x15\x08\x36\x98\x81\x01\x87\xe1\x2c\x82\x9a\x71\x72\x10\x10\x11\x94\x01\xaf\x7e\xeb\xfb\x82\x3f\xd9\xed\xa8\xeb\xed\xaa\x37\xe9\xa7\x9e\xbf\x7f\x06\x22\x0b\x7b\x7f\xe9\x28\x8a\xb1\x89\x75\x10\xa3\xdf\x94\x73\x31\x36\xa0\xa1\xeb\xa0\x5a\x29\x60\x18\x02\x8a\x23\x10\xa8\x60\xbb\xcb\x6f\xc1\x68\x6d\x1e\x49\xfb\x3a\x7f\x02\xda\x13\xcc\x8c\xf0\x62\x93\xe7\x15\xd7\x73\xe1\x81\x10\x39\x30\x04\x8c\x23\x5f\x74\x74\x21\xb0\xc0\xe6\x84\xf4\xda\xb5\x43\x49\x6b\x32\xd9\x9e\x2f\xa9\xf7\x74\xa3\x13\x43\xec\x62\x24\x61\x68\x20\xb6\x18\xb9\xe4\x8d\xc5\x43\xab\x2f\x12\xa5\xa1\x88\xd8\xa1\x2e\x3c\xce\x6d\x00\xf3\x1a\xb0\x73\xe3\x0b\xf3\x1a\xb4\xa4\x75\xe1\xb9\xcd\xe9\x67\x17\xff\x64\x0d\xe8\xdd\x08\x33\x04\x7e\xcb\x08\x62\xdd\x9f\x32\xee\x22\xd1\x05\xc5\x20\x80\xd4\x4b\x20\x70\x63\xfd\x10\x75\x85\x1c\x6d\x0a\x29\x59\x5d\x8c\x21\x6e\x80\x07\x69\xfb\xaa\xdb\xbb\xa5\x31\x11\x82\x10\x99\x00\xf8\x3a\x08\x55\xf0\x73\xe7\x74\x4a\x74\x10\x22\x30\xe0\x73\xfc\x96\xe4\x59\x8a\x76\xdd\x37\x52\x2e\xea\xce\xd3\x6a\x37\xed\xe8\x3d\xec\x02\x32\xb4\xe3\x20\xbb\xfd\x36\x28\xec\x38\xd6\x1d\xbc\xb6\x69\xa0\xca\x26\xc1\x1e\x37\x9a\xc9\x3c\xaf\x46\xc6\xbf\xd6\xe5\x74\xfe\x58\xde\x55\x9e\xd6\x55\xf1\x4b\x2a\x97\x76\xf2\x40\xfc\xae\xbc\x69\xf9\x62\x7c\x79\xad\xd2\x44\x43\x28\xab\x72\xd9\xb7\xce\x25\x24\xaa\x1c\x19\xbc\xca\xa5\x18\x14\x45\x37\xf2\xfc\x71\xba\x3b\x9d\x2d\x3e\xdc\xe3\x62\x13\xd1\x89\x55\xa7\x1e\x6d\x70\xd4\xaa\x5e\xe3\xdf\xce\x73\x14\xde\xd4\xa7\x77\xdb\x66\xad\x31\x23\x7e\x93\x6b\x45\xb9\x34\xd2\x96\x53\x72\x0b\xbc\xc7\x2d\x09\x8d\xe4\x9b\x0c\x71\xa4\x9f\x06\x2d\xce\xb0\x06\x49\xd6\xb9\x6a\xa9\x08\x8f\x6c\x7f\x57\xcc\x51\xb5\xea\x21\x1b\x74\x45\xbc\x7a\xa0\x0c\x5e\xc2\xd9\x5a\xcb\xe6\x05\x6c\x0e\xcc\x9f\x8f\x9b\xdc\x8d\x1a\x86\x01\x2c\xd7\x0d\x61\xf7\x11\x39\x41\xff\xd6\x66\xb3\xc9\x05\x37\x9f\xdf\x82\x4d\x8d\x82\xbd\x74\x5e\xe6\xd5\x93\xcc\xfa\x42\x73\x3e\x93\xaf\xab\x9f\x6d\x74\xcc\x38\x4b\x5c\x4f\x7c\xaf\x02\x43\x4a\xd5\xed\x79\x55\x76\xe7\xbd\x35\x8e\xe9\xd0\xe0\x30\x2f\x42\x6c\x80\x10\xc0\xe7\x5a\x30\x3b\x06\xfe\xcf\xa7\x0e\xa1\x0a\xc1\x4d\x45\x10\xb8\x3a\xcc\x00\xe3\x7e\x41\x89\xc4\x0e\x02\xc6\x74\x7a\xc1\x84\x5d\x20\x0c\x4f\x07\xc0\xfe\x97\x3c\x83\x52\x04\x81\xb9\x53\xc3\x83\xef\x4b\xb7\xfd\xc8\x15\xe2\x11\xad\x99\x7a\x4b\xcb\x77\xb2\x9f\x42\x83\x08\xc8\x37\xc4\x08\x68\xd7\x84\x57\x16\x62\xd8\x8b\xed\xb0\xa4\x42\x85\x34\x00\x6d\x9b\xf8\x26\xdd\x57\x8a\xea\x8e\xf1\x57\x3e\x6d\x96\x9c\x72\x8a\x54\x91\x89\x1d\xce\xf6\xee\x75\x8f\xc9\xa6\x78\xc9\xaf\xa7\x95\x55\xb3\xe9\x6c\x75\xb6\xa5\xe7\x61\x57\x94\x02\x70\xfa\x02\xe6\xb7\xf7\xe0\xfb\xfd\x86\xdf\x0f\x96\xd2\x7f\x53\xf1\x64\x4d\x0d\xcf\x39\x2e\xcd\xf4\xab\x50\x4b\x20\x58\x21\xd9\x39\xb6\xcc\x5b\xa3\x68\xbc\xea\x87\x20\x95\x9d\xb9\xb4\x1d\xbf\xdc\xe6\x9a\x5d\xa7\x5b\x52\xb9\xd7\xf4\xb3\x5d\x8e\xb7\x43\x3e\x85\xb4\xca\x09\x6e\x01\xd7\x1f\xb5\x69\xe8\x3a\x5b\x4c\xa2\xde\xdc\xf4\x96\x73\x5e\xb7\xa5\x81\xee\xaa\xb0\xe8\x5e\xfd\xc6\xd6\x14\x06\x7e\x4b\x04\xe7\x80\xbe\x3c\x7f\x5d\x35\xa9\xda\x45\x67\x77\x7e\x6f\xf2\xe0\x93\x5a\x2d\x07\xdd\xf7\x75\xba\xf4\x37\xe2\xa3\x34\x7e\xac\x99\x9c\x7e\x6b\xf6\x5c\x80\xd5\x3e\x0a\x92\x6a\xf2\xa3\xc7\x4f\x45\x2f\x4b\x75\x78\x4e\x11\x31\xe1\xb4\x4e\xe9\x7a\xfc\xde\x69\x2f\x6b\x01\x22\x1e\xe7\x78\x9e\xa5\x03\x7a\xaa\x70\xfb\x0f\xf7\xab\x08\xe4\x19\xff\xd5\xc6\xbf\x01\x00\x00\xff\xff\x7c\xaa\xa5\x79\x53\x04\x00\x00")

func test_certsClientTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTestuserCrt,
		"test_certs/client.testuser.crt",
	)
}

func test_certsClientTestuserCrt() (*asset, error) {
	bytes, err := test_certsClientTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.testuser.crt", size: 1107, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0x72, 0x17, 0xd9, 0x6e, 0x84, 0x80, 0x8, 0xf5, 0xfa, 0x8d, 0x69, 0x4d, 0xca, 0x64, 0xc0, 0xce, 0x5a, 0x80, 0x86, 0xeb, 0x19, 0x87, 0x64, 0x26, 0x6c, 0xf2, 0x5, 0x38, 0x44, 0xcb, 0xd6}}
	return a, nil
}

var _test_certsClientTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xac\x5a\x02\x85\x61\xcf\x53\x1c\xbf\x6b\x0a\x9a\x8c\x18\x41\x6e\x62\x93\x93\x23\x35\x4d\xce\xf1\xe9\xa7\xee\x19\x7b\x97\x5d\xe6\x77\xdf\x7f\xfe\x19\x27\xca\x8a\xf9\xc7\x71\xd9\x3f\x96\xa3\x04\xac\x27\xfe\xd1\xc4\xf8\xef\x03\x19\x8a\x22\x8e\x95\xc2\xb1\xac\xc6\xb3\xb6\xc8\x4e\x4a\xe4\x6d\x28\x76\xa0\x0e\xd1\x3d\x0e\x15\xd3\x84\xc9\xfc\x8c\xb0\xab\x6a\xbb\xb3\xb4\xa9\x5d\x26\xcc\x18\x70\x2b\x57\x3d\x8f\xd7\x95\xbb\x85\x42\x8b\xc6\x24\x4d\x31\x17\x29\x38\x8e\x5b\x48\xc1\x7c\x5f\x7e\xb4\xcb\x66\x82\xad\xf7\x4d\x7d\x8a\x0a\x2b\xd4\xa0\x17\x01\x51\x7c\x99\xec\x12\x1e\xc0\x94\x0c\x22\xc0\x45\x59\x5c\x64\xab\xc7\x90\xad\xd1\x98\x23\x00\x3a\x54\xd8\x3c\xef\x16\x00\xdc\xb5\xd6\x3b\x15\xe9\x0d\xf7\x52\x35\x44\xf7\x68\xfd\xb7\xa8\xac\xcb\x94\x03\x03\x36\x7d\x5c\xe0\xad\xfa\x54\xb5\xaa\x9e\xad\x70\x88\xe0\x05\x65\x4c\x5e\x5c\x0d\x8a\x53\x99\xcc\x6e\x0b\xae\xd9\x42\xf0\x04\x93\xe7\xf0\xfe\xc4\x78\xa9\xc2\x70\x5a\xda\x19\x74\x41\xc1\x7d\x4a\xd6\x94\xb4\xd0\xf2\x6f\x4a\x27\x9e\x42\x12\x93\x2d\xac\x19\x86\x22\xf9\x2e\x9a\x99\x55\xd9\x63\xdf\x8d\xa0\x16\x7e\x9c\x6d\x71\xc5\xfd\xd2\xce\x7a\x11\x75\x6b\xd8\x98\x43\x6a\x32\xd8\xc8\x8e\x0d\x56\x2b\x21\x3f\x67\x1e\x60\x80\xf6\xb1\x73\xc8\x19\x7d\x5f\xa1\x0f\x4f\xef\xb8\xe3\xa6\x32\x72\xfb\x60\xa0\x59\x01\x0d\x69\x3c\xba\x29\x22\x22\xe5\x65\x09\xa7\x46\xb1\xb3\xdc\x56\x04\xd6\x66\x39\x76\x54\x38\x96\x9b\x6a\x20\x3d\x16\x5c\x2d\x41\x23\x72\x22\xb4\xf9\xad\xd0\x53\x2b\xbf\x71\x56\x18\x34\xa4\xd5\xc7\x97\xc0\x18\xbc\xbf\xf5\x79\xf7\xa9\x36\x55\x42\x32\xed\x81\x77\x5c\xff\xe6\x38\xa2\x11\xd1\x45\xe6\xf7\x1a\xc8\xb0\x65\x9d\x68\x7e\x64\x18\x94\x31\xa5\xe3\x92\x7d\x8b\x7d\x62\x42\xaa\xac\xb6\xb6\x00\xf3\x8b\xc8\x36\xb9\x9c\x9b\x08\x36\x43\x44\x04\xa4\x77\x7b\x97\x7f\xd9\x73\x04\xc2\x2c\x56\x18\x8c\x1e\x7f\x44\x7c\x7e\xa7\x14\x3e\x7c\x08\x77\xc8\xcf\xc5\x8a\xb1\xde\xab\x76\xc5\x69\x66\x72\xa9\xf3\x97\xea\x0e\xfe\xac\x40\x6e\xbf\xb4\xae\x76\x3b\x2d\x9d\x75\x43\x54\x02\xa0\x20\x43\x25\x5c\xb1\x6f\xd5\x16\x58\x7c\x16\xbe\x75\x06\x1a\xbe\x66\x36\x01\xaa\x0a\xdb\x11\x0b\x90\x74\xc3\xab\xe5\xde\x7d\x3a\xc8\xaa\x4a\xd7\xee\x34\x3d\xf8\xf9\xb3\xf5\x9e\x7a\x59\x51\x78\x9a\xcd\xf2\x42\xb5\x57\x84\x8a\x11\xd5\xe3\x94\x4d\xa0\x08\x54\x3f\xeb\xf1\x26\xb5\x0c\x69\x79\x5c\x44\xeb\x75\x19\x77\x11\xbf\x96\x28\x73\x71\xc2\x32\x45\xf9\x0a\x99\x77\x24\x21\x8e\x59\x49\xe2\x6e\x79\x44\xe7\x52\xa9\xef\x7c\xaf\xe1\x0d\xb7\x1d\x8b\xf4\x10\xe9\x8e\x5f\x79\x15\xf9\x2a\x16\xd9\x27\xbd\x83\x74\x2c\x84\x3b\x03\x00\xe9\x28\x6c\xec\xe3\x2c\x41\x48\xc9\xcf\xbd\xfa\x7b\xe0\x49\xa2\xcd\x54\x86\x3d\x78\x11\x3a\x87\x56\x24\x9c\x23\x5c\x14\x44\x9c\x83\x9b\x19\x5f\x9b\x48\xa4\x0f\xf5\x4a\x2d\x4d\x0b\xfa\xbc\x36\x19\x00\xdf\xa1\xc3\x6e\xa7\xa2\x08\xc3\xbc\xa3\xd5\x47\x6c\x34\x5e\x5c\x3a\x22\x93\x86\x0f\x08\x93\x82\x8b\xc1\x7c\x51\x37\x24\xfc\x00\x2d\x47\x27\x39\xb8\xd9\x62\xc8\x6c\x29\xc1\x2c\x3a\x36\x28\xe9\xa1\x73\x95\xd9\xfe\x94\xdc\xdf\xa3\xe0\xab\xb6\x57\x88\xe4\x44\x69\x38\x91\x61\x67\xcf\xdb\xff\x17\x1b\xa5\x04\xdd\xf4\xfc\xf2\xeb\x37\xfc\x36\xa6\x68\x7d\x19\x31\x8f\xd6\xef\xfc\xee\x57\xb0\x27\xe0\x21\x08\xa2\xfd\xfa\xfa\x69\x06\x83\xe0\x4f\x32\x6c\xea\x57\xef\x61\x59\x7a\x90\x77\x83\x25\xdb\xea\xfe\x46\x68\xca\x22\xa4\xab\x68\xed\x47\x14\x4e\x72\x08\x33\x2c\x10\x76\x91\x28\x26\x38\x1d\xb6\x1b\x23\x3d\xa7\x18\x5f\x6d\xc8\x80\x7f\x40\x59\x69\x23\xbd\xc0\xb8\xe4\x4e\xc0\x87\xe1\x26\x5e\xac\x94\x84\xd6\xc1\xb3\xf3\x22\xbe\x22\xcc\xfe\xcd\xfd\x27\x75\xa6\xfa\x95\xcb\xae\x54\x49\xe8\x62\x7b\xb5\x54\xbf\x27\x6a\x96\xff\x49\xe6\xd4\x0f\xea\xaf\x16\x6f\x62\x04\x8a\x34\x99\xb6\x3a\xb7\x55\xf2\x10\x55\x9b\xab\x65\x07\xe2\x28\xe7\xb9\x05\xa6\xc6\xb1\xfd\xb0\xc1\x18\xce\x43\xca\x37\xf9\x7a\x85\xe3\xab\x1f\x23\x58\x72\xbf\x22\xfa\x7a\x94\x40\x3e\xf4\xa8\x2a\x79\x1e\x1f\x31\x87\x1b\xf9\x87\x80\x8a\xfc\x7e\xdb\xd6\xd2\x67\xf8\x85\xeb\xe1\x82\xd8\x4e\x87\x91\x48\x98\x45\xc7\xa5\xc7\x74\x52\xbe\x2f\xde\x9b\x86\x3c\xf7\xc9\x11\x89\x24\x8f\x3c\x4f\x82\xa5\xe5\xf2\x32\x7d\xda\xc2\x7b\xb9\x84\x7a\x71\xce\xca\x6e\xef\xf2\x46\xe9\xe8\x7b\x57\x0c\xc5\xe9\x4a\x5b\xe3\x2a\x59\x0f\xe7\x19\xe5\xc3\x54\x49\x89\xa9\xd8\x91\x31\x5c\x9c\x04\xd0\x1c\xef\x72\xb3\x7d\x9e\x2f\xd9\xe1\x6a\xff\x20\xa0\x7a\xd4\xf0\x6f\xe1\xe5\x81\x9d\xbb\x75\x3a\x30\xb6\x37\x7b\xc1\xfb\xd4\xde\x7e\x89\xdc\x3e\x7a\x07\xee\x16\x17\xf7\x9d\x3e\x2a\xf3\xf0\xd6\x2f\x44\x5f\x54\x43\xc1\xbb\x62\x97\x4e\x27\x10\x18\x80\xd2\x93\xd1\x7e\x71\x88\x47\x4f\x9d\xd2\x2d\x80\x77\x12\x8f\x81\xf8\xf6\xdd\x96\xbf\xba\x7c\x5d\xb7\x99\xa6\xec\xa3\xfb\xfe\x78\x4e\x6d\x37\xa4\x32\x61\x3d\x6a\x8b\xea\x89\xf2\xc0\x14\xe7\x34\x87\x18\x4a\xe3\xd8\x51\x66\x85\x3d\x56\xf1\xcf\x67\xca\x7e\xa6\xea\x4d\x68\xb0\x51\x8c\xec\x4d\xe5\x87\xcf\x98\x87\x2c\x52\x44\x9c\x38\x37\x79\x2b\x0c\x68\xa5\xac\x28\x8b\x9a\xbd\xc6\x37\xb9\x12\x0d\x74\x32\x38\xe2\x91\xf5\xa0\x03\x4d\xfb\xda\x1e\x67\x73\xe4\x58\x09\x89\xd1\xeb\x6b\x8e\x3e\xe2\x2e\x2c\x91\x20\xe2\xed\xfb\x5d\xc1\xb4\xaa\x38\x39\x9a\xba\x11\x4e\x8e\xdf\x0b\x20\x1d\x71\x98\x30\xb4\x37\x77\x39\xd0\x81\xec\x60\x1c\xbd\xb2\xaf\x09\xe8\xb6\xc1\xfe\x8c\xee\x73\x17\x66\x35\xe4\x56\xd4\x21\x8b\x96\x5e\xe1\x4f\x91\xe7\x56\x06\xc1\x7d\xad\xff\x85\xfe\x92\x22\x9a\xc2\xbf\x53\xf3\xbf\x00\x00\x00\xff\xff\x52\xb6\xc0\x85\x8b\x06\x00\x00")

func test_certsClientTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsClientTestuserKey,
		"test_certs/client.testuser.key",
	)
}

func test_certsClientTestuserKey() (*asset, error) {
	bytes, err := test_certsClientTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/client.testuser.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x93, 0xd9, 0x76, 0x64, 0x60, 0x1b, 0x1b, 0x60, 0x81, 0x42, 0x5d, 0xee, 0xa1, 0x6b, 0xcc, 0x3f, 0x7c, 0x87, 0xe8, 0x57, 0xc1, 0xc9, 0xa1, 0xf9, 0x86, 0x39, 0x95, 0x54, 0xaf, 0xaa, 0xa1}}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xc9\xae\xb3\x46\x14\x84\xf7\x3c\x45\xf6\x56\xc4\x64\x3c\x2c\xb2\xe8\xa6\x1b\x68\xec\x06\x37\xa3\xf1\x8e\xb1\x0d\xbe\xc0\xbd\xc6\x4c\x7e\xfa\xc8\x7f\xa4\x44\x4a\x52\xab\xa3\x5a\x94\x74\x54\x9f\xea\xf7\x8f\x20\x36\x89\xf3\x9b\x8e\xbd\x80\x18\x44\x07\x01\xfe\xe5\x0a\x94\x10\xc4\x90\xae\x83\xba\xe6\x60\x26\x10\x70\xc2\xc0\x46\x56\xd1\xaa\xc5\x51\x09\xc7\xe7\x99\xbc\x5f\x9b\x5a\x4c\x1a\xe0\x40\xfe\xf8\xb9\x3f\x6a\xf3\x38\x4b\x10\xb0\xc1\x00\x08\x3c\x05\xea\x91\x19\x83\x04\x45\x8c\x9d\xf0\xfc\x85\x32\xc5\x79\xe6\xed\xf1\x9e\x28\x7c\x31\x02\x10\x40\xee\x44\x10\xd0\x00\x61\x67\x4a\x94\xd7\x9a\x29\x46\x93\xea\x10\xb1\x00\x94\xc6\x2c\xad\x02\x45\x40\xa1\xe8\xb1\x38\x0d\x50\x68\x00\xd3\x8f\xe9\x04\x9f\x9b\xfd\xed\x51\x9d\x2e\xb8\x01\xec\xaf\xb0\x3e\xd0\xc3\x7f\xc2\x84\x14\x61\x87\x82\xc1\x04\x72\x88\xc1\x42\x71\xd6\x1e\x1f\xb7\x40\xd7\x81\x4f\x66\xc4\x12\xfb\xd4\xdf\xc8\x7d\xca\x1d\xc0\x30\x84\x0c\x20\xce\xf1\x05\x7c\x5e\x66\xbd\xce\x39\x86\x02\x38\xbd\xe7\xda\x3a\xbc\xda\xb2\x96\x73\x9b\x18\xc6\xb9\xac\x68\x13\xbb\x45\x2c\xb2\x7a\xd4\xba\x4c\xda\x6e\xb2\xfc\xe9\xa9\xd6\x85\xf5\x28\x24\xae\xb2\x3b\x6c\x4e\xe6\xe1\xec\x92\xfd\xb0\x3b\x50\x61\x9f\xbb\x65\x4f\xb3\xf4\x16\x6c\x5a\x5c\x6d\x4a\xeb\x4a\xc7\xe3\xba\x57\x1e\x3b\xcb\x0a\xab\x51\x2c\xdb\xee\xe4\x1b\x6e\x67\xe8\xbe\xff\x52\x9a\xac\x57\xfb\x61\x42\x3f\xeb\xf1\xb2\x3c\xb5\xcd\xf7\xb7\xd0\x31\x37\x42\x27\xf4\x74\xe5\xca\x4f\x49\x0d\x9b\xfc\xfb\xfe\x53\xbb\x8e\xe7\x6e\xb9\xaa\xc9\x09\xab\xdf\xce\xd6\x6b\x77\x1b\x3d\xdb\xdb\xde\xe4\xe6\xdb\xab\xce\x17\x59\x1d\x71\xea\x3b\x76\x77\x11\xb4\xaf\xce\xbd\xb2\x8c\x2c\x38\x99\xcb\xa8\xf6\xbd\x7b\x6f\x6f\x4b\xd1\xb5\x36\xf3\xa4\xc6\xfa\xde\xb2\xeb\x88\x2d\xb5\xa6\x59\xd2\xc5\x5f\x44\xb5\xa9\xb5\x11\xb7\xcd\xe2\xc5\xab\x62\x3b\x00\x09\x56\x50\xe4\x6a\x75\xf1\x80\x0c\xaf\xdf\xcd\x81\x9b\xfb\x4b\x57\x77\x56\xca\xf2\x33\xa5\xbb\xf8\x2a\xda\x11\x12\xf3\x47\x7f\xe5\x43\xdf\x96\xbe\x8c\xe7\x78\x88\x76\xcf\x97\x56\xbd\x52\x8d\x7c\x79\x82\xac\xda\x1a\x79\x94\x45\x9a\xec\xbc\x45\xec\x4d\xf7\x98\x47\x62\x99\xeb\x60\xc6\x00\xa4\x4e\x4f\xcd\x64\x46\x3c\x41\x91\x27\x5d\x00\xb3\x44\x08\x18\x02\x3c\xe6\x14\x4a\x9f\xe6\x0a\xc1\x66\x2c\xa6\x90\x99\xba\x3e\x98\x80\x85\x06\x9c\x29\x84\x9c\x3f\x21\xc7\x06\x64\x39\x02\x0d\x90\x3f\xfd\x5b\x1e\xc6\xe7\x06\x0c\x9c\x7f\x0d\x99\xe2\xdc\x33\xf3\x3e\xe5\xaa\xaf\x0b\x70\xed\xc7\xcc\x3c\x36\x49\xbc\x5a\xd0\x3a\x00\x00\x4c\x0b\x83\xff\x13\xfe\x37\x17\xe7\x0f\x17\xc2\x07\x06\x00\x02\x33\x81\x6f\x05\x94\xd7\xcc\xd8\xfd\x28\x50\x19\xde\x52\xd1\xe0\xbc\x3a\xbb\xb9\xa9\x15\x6c\x6b\x32\x64\x4a\xdf\xd5\x7d\xaa\xec\xb4\xf2\xc9\xdc\x18\x7c\xf6\xe6\xb6\x3c\x44\x42\x23\x4e\xb5\x78\x1a\x99\x7c\x30\x23\xc5\x5c\xa5\x36\x40\xb7\xd3\x75\x7f\xd6\x2a\x9e\xbc\xb6\xf9\xf1\x5e\x44\x6c\x52\xd7\xde\x97\x82\x89\xb1\x59\x61\xd1\xde\x0c\x8d\x58\x34\xc3\x20\x73\xcb\x0d\x11\x9e\xed\xa9\xa1\x7c\x38\xbd\x7e\x6c\xdb\x0d\xde\xf0\x69\x8b\x65\x26\x1f\x86\xb1\x1d\x0b\x75\xef\x91\xdb\x63\xd8\x85\xe2\x76\xd3\xbe\xa1\x28\x27\xb2\xe2\x19\x85\x2d\xe7\xd6\x28\x1a\x92\xd3\x2a\x70\x10\x82\xe4\x84\xdf\x72\xec\x4c\xd0\x7a\xef\x25\x68\xe2\xdb\xcb\x99\xa2\xdb\xe6\xc6\xf8\x7a\x59\x9b\x92\x87\x8b\x5e\x9e\xd5\xf2\x2c\x76\x27\x1b\x5f\xdf\xcc\x34\xd6\xe5\xec\x69\x41\xbd\x42\x47\x17\x81\x10\xa6\x30\x2c\x8e\x62\xe0\xb6\x77\x97\xe4\xaf\xe2\xae\xc5\x43\x7a\x0b\x97\x88\x84\x6c\xec\xd7\xce\xe9\x93\x5d\x45\x9f\xfc\x2e\x75\xc5\x4f\x5f\x24\x7a\xbf\xcf\xb2\xee\x90\xb7\x56\x4e\x1d\x31\x7a\x0b\xd7\x33\xfd\x22\x53\xd5\xaf\xdf\x51\x47\xb5\x52\xf4\x4c\x72\xf0\xbf\xae\xca\x91\xf6\x7f\x08\xbf\x36\x07\x3b\xe8\xbf\x3b\xf4\x67\x00\x00\x00\xff\xff\xa2\xef\x29\x91\xa4\x04\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 1188, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x4d, 0xa, 0x95, 0xd7, 0x58, 0xa4, 0x59, 0x44, 0x2, 0x7b, 0xe0, 0xc8, 0xe7, 0x7e, 0x15, 0xf2, 0x10, 0x4e, 0xa4, 0xa7, 0x2b, 0xda, 0xd2, 0x40, 0xcf, 0x9c, 0x88, 0xf0, 0x7f, 0x3d, 0xa4}}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb7\x12\xa3\x40\x02\x04\xd0\x9c\xaf\xd8\x9c\xba\x42\x12\x3e\xb8\x00\xcf\x60\x06\x2b\x61\x32\x31\x78\x23\x10\x56\xf0\xf5\x57\xbb\xf1\x75\xda\x49\x57\x27\xef\x3f\x7f\x23\x2a\x1a\x80\x7f\xfc\x40\xf8\xe3\xfa\xe0\x25\x84\xca\x1f\x53\x49\xfe\x35\x98\x0d\x80\x32\x56\x40\x14\x04\x53\x12\x3c\x45\x98\x5d\x09\x94\xe7\x23\x65\xac\xd7\xd1\x55\xcf\xe7\x4a\x73\x27\x4c\xe8\x7b\xc6\x4b\x26\x3b\xe4\x7b\xd8\xd2\xeb\xb9\xea\x08\xf1\x52\x05\xbd\x8a\xc5\xb2\xf9\xa2\xc6\xec\x58\xa8\x76\xbb\xe6\xe3\x5a\x0f\x9a\xa9\x7e\xeb\xd4\xbb\x4c\xe2\x13\x34\x95\xa3\x93\x25\xad\xfd\x1d\x8e\x28\xf7\x71\x96\x67\xde\x68\x02\x4f\x06\x3d\x0d\xc3\x24\xdf\x70\x6b\xb1\xa2\x39\x39\x67\xb6\x6e\x84\xb6\x7f\x98\x61\xc8\x05\xfa\x69\x8f\xce\xc2\xbe\x78\x63\x6c\x80\x06\xcf\x41\xfb\x02\xea\xae\xb0\x8d\x5c\x7e\x5e\xb5\x64\xd9\x64\xad\x65\x33\x65\xec\x4b\xaf\x71\xf4\x85\xd5\xc8\x94\xf5\xb8\xa0\xfc\x09\xdc\x06\x44\x0c\x11\xa2\x73\x71\x69\x15\xbf\x15\xe9\xc8\x30\x34\xad\xfa\xd4\x2c\x47\x95\xac\x44\xe4\x89\xb5\xa0\xc1\x78\xc9\x9a\xf5\xe9\x4a\x8f\xb7\x74\xa2\x70\x30\x6b\xa0\x82\xb7\xab\xaa\x99\x95\x74\x37\xc1\xce\xe1\xfd\xca\x39\x5e\x91\x9f\x6a\x31\xb8\xa7\x90\x2d\x78\x61\xa2\x7c\x12\x8f\xe5\xb8\xa6\xb4\xe4\xfa\xa7\xcb\x9f\x41\x5d\x48\x67\x93\xd2\xd6\x33\xc4\xc4\xf7\x2f\xfe\x6e\x64\x8f\xdf\xe7\xae\x79\xe9\x31\xfa\x74\x8d\x4f\xdf\xa7\x76\xd2\x75\xbc\x4a\xd8\xfb\x2f\xe6\xe9\x03\xc8\x82\x27\x88\xc2\xf8\xf7\xec\x82\x8f\x04\x46\x14\x77\xe8\xd9\xa4\xa9\x62\x55\x26\xbf\x95\x5a\x58\x1b\xf7\xf3\x53\xfb\xf7\x47\xd1\xd0\x2c\xd5\xe1\x7b\x4c\xaa\x34\x0e\x40\x93\x07\xf4\xa3\x35\x12\xf0\xde\x62\x5f\x91\xa5\x67\x3c\x6e\xd7\x6c\xf9\x69\xcb\x8b\xe7\x3b\xfc\xd8\x58\x6a\x2d\x32\x5b\x03\x87\x70\xa7\xbd\x6e\x58\x59\xab\x8c\x4e\x92\xbe\x85\x3b\x6d\xe0\x1d\x65\x5f\x3e\xbe\x89\x7e\x92\x6b\x84\xf7\x09\xf8\xcf\xf3\x0d\xb7\xe1\x02\xee\xdb\x59\x80\x70\x9b\x63\xeb\x81\x55\xaf\x0c\x8f\x4a\x77\x8f\xd3\xbc\x98\x6e\xd0\x41\x10\x67\xd0\x31\x80\x23\xf5\x9f\xbc\x94\xc1\x81\xf8\xf9\x63\xc8\x82\x70\xb5\xf5\xfb\x31\xe5\x7b\xeb\xef\x78\x1d\x34\x21\xa7\xd2\x34\x39\xb5\x98\xc5\xc6\x59\x6d\xac\x23\x1d\xd9\xaa\x98\x2f\x02\xfa\xf0\xea\x2a\x7d\x3e\x70\x51\xe2\xdb\x45\x72\xea\xb8\x2a\xc5\x06\x8a\x75\x89\x32\xef\x71\xd6\x21\xac\x87\x93\x55\xd5\x03\xbf\x23\x18\x77\x29\x26\x71\x0c\x99\x71\xee\x3b\x82\x30\x78\x1c\x29\x6d\x11\xa2\xad\x6c\x21\x5e\x24\x67\x8c\x52\x96\x7c\x7d\x55\x21\x5d\x90\x19\x52\xdd\xc7\xad\x4f\xe6\xcd\x33\xb3\x37\x1d\xa7\x7e\xe2\x23\xf4\xf3\x07\x16\xe1\x42\x59\x18\x9d\x54\x25\x8a\x70\x0c\x9c\xe1\x9a\xf8\x1e\x72\xfc\xea\x78\xa5\x1b\x96\x35\x53\x79\x2e\x6e\xa0\xa8\xb6\x8c\x4a\x93\x7b\xeb\xb5\x59\x5e\x0c\x88\x1f\x9d\x86\x36\x04\xea\x9e\x60\xed\xbc\xbf\xd3\xbb\xad\xce\x69\x4c\xcc\xfb\xbd\x03\x4c\x84\x23\xaf\x63\xd8\x75\xfc\x5d\x6a\x96\xf9\x50\x89\x89\x3b\x7f\xdb\x0e\xf6\x65\x0b\xb4\x0e\x39\xa3\xd5\xdd\xc0\xf2\x92\x3a\xa8\xf0\xd3\xc0\xc2\xc4\xe5\xc0\x3e\x72\x0f\x09\x3e\x07\x82\x1b\xc8\x81\xf8\x3c\xc9\xee\x2a\x60\x93\x49\x97\x04\x9c\x10\x5c\x61\x96\x7e\xcc\xa0\x75\x73\xfb\x55\xd2\x8d\x99\x3f\xdc\xdb\xbf\xc5\x14\x6b\x4f\xd8\x52\x74\x34\x84\x48\xfb\x5d\xbd\xb9\xc2\xdf\x2f\xf6\xef\xd3\xf2\x28\xb4\xc8\x55\xbd\x1b\x45\x48\xc5\x57\xde\x32\xcb\x48\x83\xe0\x26\xd1\x22\x93\x25\xa2\x70\x6f\x5a\x53\xb6\x3d\x54\x27\x5b\xb8\x60\xac\x50\x2a\x45\x47\x57\x17\x15\x34\x57\x89\xcc\x4e\x9b\xa3\x4b\x66\xd4\xd6\x3c\xb7\x60\x69\x53\xd3\x2f\xa0\x1e\x8c\x3a\xfe\xdb\x94\xce\xad\xf1\x40\x59\x7a\x6a\x02\xd0\xf3\x9a\x7e\x54\x16\x1c\x0b\x1a\x92\x23\x71\xf6\x12\x91\x34\xed\xdd\xf7\xf0\xbc\x94\xe1\xab\x55\x9c\xf6\xde\xbf\xef\xda\xd7\x78\xb2\x2b\x93\xd9\x52\x95\x08\xc1\x59\x00\x38\xca\x8d\xbc\xc0\xef\x01\x82\x24\x80\x68\xa0\xb0\x1d\x47\x9a\x1f\x39\xf8\xa9\x51\x6a\xd2\xeb\xce\xa9\x8b\x89\xe8\x84\x12\x64\x1f\x17\xce\x1d\x55\xbe\x9e\x97\xf2\x22\x25\x2d\x8e\xd0\xda\x47\x04\x27\xae\x40\x3d\x3a\x82\x4c\xf6\x2e\x11\x7f\x0e\xe6\xf8\x53\xdf\xd6\x19\x1a\x4d\xd5\xf5\x81\x7e\x85\xba\x24\xa2\xe5\x18\x4c\xc1\xa6\xfd\xbe\x63\x82\x17\x61\xc9\xf1\xbd\x5f\xe2\x5f\x30\x2c\xfe\x74\x2a\xa7\x1a\x92\x25\x4e\x82\x22\x22\xe4\x26\xc7\xd6\x5e\x19\x1f\xaa\xc8\xaf\x56\x5b\x26\x6b\x1e\x34\xd0\x0d\x64\xcf\x14\x2b\x3d\x1b\x92\xa4\x6f\xdb\xfc\xa3\xff\x36\xff\x15\x68\xeb\x5d\x7a\xbe\xba\x10\xb8\x02\x8c\x7a\xef\x9d\x19\xfb\xf9\x12\x32\x6c\x0a\xc2\x3a\xb5\x26\x37\xb5\xbb\xc8\xfc\x88\xa9\xff\xd9\xa7\xc5\x70\x2f\x74\x3d\x0a\xc6\x97\x88\x34\xdd\x0e\xb7\x50\x4b\xe5\x7e\xbe\xf0\x5c\x60\x1f\xe5\x24\x3e\x69\x5c\x5f\x35\x07\x9d\x59\x37\x61\x28\x68\xca\x4a\xcc\x6b\x2a\xd4\x4c\xe4\x66\x17\x5c\x38\x42\x71\x1a\xe6\x0c\x81\xf7\xd0\x05\x9d\xa4\xa7\x78\xef\xe1\x32\x67\x6f\x27\x43\x68\x38\x03\x33\xe7\x1a\x7f\xa1\xc0\x7d\xd6\xe4\x7d\xc7\xc0\x4b\xe6\x85\x51\x13\x1c\x07\xf0\xae\x35\x6d\x3f\x67\x55\x82\xc5\x1c\x53\xf0\x58\x1d\x97\x30\x7a\x2b\xa5\x49\x47\x51\x12\xa4\xce\x3b\x4e\x6b\x7d\xd9\x42\xb2\xbe\x4e\x25\xd0\xb8\xa7\x43\xc8\x98\x7c\x99\xdc\xee\xde\xb5\xdc\xcc\x67\xcb\x4d\xe7\x74\xa2\x36\xa4\x7a\xcb\x53\x99\x1c\x59\x50\x1e\x56\x5b\xf8\x2b\x58\xa2\xab\x01\x67\xb4\xdd\x5e\x32\x92\x5a\xca\x91\xbc\xc3\x64\x38\xd3\x1d\x12\x8c\xd7\xcb\x14\x3a\xf4\x9b\x30\xc6\xca\x7f\x70\x4c\xd4\xd4\xa9\xe4\xdd\xd2\xaf\x52\x6a\xaa\xfb\xb3\x7f\x74\x2c\xeb\x64\x3e\x0d\x94\xbe\x5a\x59\x71\xfe\xa0\xfd\x5f\xec\x1f\x29\x0a\x94\xff\x3f\x35\xff\x0b\x00\x00\xff\xff\xf9\x44\xaf\x4b\x8b\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8b, 0x76, 0xe7, 0xdc, 0x50, 0xd5, 0x31, 0xab, 0xac, 0xd7, 0xa8, 0xde, 0xac, 0x83, 0x88, 0x28, 0x4a, 0x13, 0x9f, 0xfb, 0xf, 0x69, 0xb5, 0x16, 0xdb, 0x66, 0x45, 0x25, 0xea, 0x2e, 0xac, 0xdc}}
	return a, nil
}

var _test_certsMtCaClientTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x4b\xaf\xb2\x48\x18\x84\xf7\xfc\x8a\xd9\x93\x89\xc8\x45\x71\xf1\x2d\xba\xe9\x06\x01\x1b\x68\x45\x04\x77\x20\x37\xb9\x1c\x40\x84\x06\x7f\xfd\xe4\x9c\x49\x66\x92\x99\xef\x5d\x3e\x8b\xca\x9b\xaa\x4a\xfd\xf9\x7d\x10\x1b\xa6\xf3\x87\x86\xcf\xbe\xa9\x9b\x1a\xf0\xf1\x0f\xe5\x88\x69\x22\x58\x69\x1a\xc8\x76\x05\x60\x26\x04\x85\x49\x69\x71\xd9\xb3\xe7\x70\xcf\xce\xc1\x2c\xdd\x3a\x6f\x8a\x19\xff\x40\xc0\x81\x45\x3d\x94\xf5\xd3\x38\x30\x01\x02\x3a\xea\x00\x81\x17\x47\xce\x26\xc3\x20\x42\x01\xa5\x36\x66\x0d\x4a\x44\xe7\xf5\x68\x0f\x65\x24\x16\x8b\xee\x03\x1f\x16\x4e\x00\x01\xf1\x11\x76\xe6\x48\x7c\xaf\x89\xa8\x57\xb1\x06\x11\xf5\x41\xa6\x33\x61\xe5\x08\x02\x22\x41\xf5\xe2\x54\x40\x24\xbe\x1e\xeb\x4c\xf8\xfc\x30\xbf\xf8\x87\x11\x6d\x5c\x70\x05\xe8\xdf\x62\x9d\xaf\x5d\xff\x15\xe3\x62\x84\x03\x02\x89\x01\xb6\x57\x0c\x16\x42\xa8\x78\xa8\x62\xc9\x9a\xa3\x9b\xd3\x99\xd8\x81\xc4\x34\xa1\x59\xfd\xf7\x7d\xac\x03\xe0\x6a\x80\xaa\xe0\xdb\x03\xa8\x15\xb6\x06\x28\x06\xcd\xd5\xa0\xda\xae\x7e\xdf\xf1\xae\xba\x3c\xe7\xaf\x36\xd7\x9b\xd4\x0b\xe7\x8f\x5d\x5e\x54\xe5\x70\x27\xce\x66\x14\xd1\xa2\xb7\xd1\xa3\xec\x1e\xa7\x53\x1b\x5b\x36\x27\x7c\x46\xfb\x30\x2d\xdb\x47\x7f\x67\x0a\x83\x7d\xdc\x76\x57\x6a\xe8\x3d\xbd\xcb\x67\x3a\x5c\x98\xb3\xcf\xe5\x58\xb2\x86\x08\xf7\x5f\xcf\x0d\x0f\x9c\xc5\x76\x65\x5c\xc8\x8a\x68\x7a\x5d\x32\x87\x9c\x94\xc7\x63\x07\xaa\xcb\xa8\x51\xf4\x45\xd1\xd0\x87\xef\x24\xcb\x84\xe3\x4e\x6f\xed\x60\x2f\x7e\x3c\x36\x3f\xea\x8e\x77\x06\x82\xcd\x50\x46\x16\x4f\x26\x2d\x8d\xea\x76\xb5\x12\x63\xdd\x4b\x88\x7b\x65\x77\xd8\x2f\xcc\x25\x52\x18\x9c\x9a\x49\x9c\xbc\xc4\x0b\x6a\xad\xd8\x52\xdd\xf7\x88\x08\x85\x62\xc8\xe9\x25\x5e\x0e\xa2\x52\xdf\xcb\x31\x5a\xde\x5a\x3b\x0b\x11\x7b\x37\x29\x13\xdd\x7b\xc2\x05\xca\xfc\x18\xd4\x51\xac\x8e\x7d\x12\xb6\xfa\x12\xb2\x59\x39\x77\x64\x14\xe8\x9a\xe7\xd7\xd9\x76\xeb\xf3\xe3\xb0\x31\x13\x30\xc9\xab\x9f\xbe\xa7\xf1\x41\x1a\xe6\xe2\x66\xc6\xc2\x8e\xb7\x86\x27\x97\xb5\x3b\x53\x2d\xba\xf8\x88\x89\x6e\x25\xcf\x5d\x69\x0c\x6f\x29\x1a\x9e\x67\x78\x51\x22\x98\x9f\x26\x6a\x22\x40\x01\xec\xd6\x88\x59\x08\xb8\xdf\x51\x1e\xa9\x0a\x41\xae\x62\x08\x88\xc6\x81\x89\x32\x5c\x44\x28\x38\x0b\x3e\xa0\xc7\x0d\x04\x05\x83\x05\x86\x9b\xef\x56\xfa\xbf\x69\xdf\x4f\x7c\x18\x40\x31\x0c\xdd\x7d\x18\x70\x2e\x2a\xcb\x07\x8d\xa8\x76\xba\x5d\xb3\xa5\x74\xd3\x38\xc8\xfd\x21\x8b\x5e\x62\xba\xeb\x4d\x7e\xfe\x30\xd5\xaf\xb7\x1a\x20\xfb\xb1\x75\x6e\x6b\x5e\xca\xa9\x77\x95\x50\xfa\x59\x64\x53\x89\x8e\x13\xb7\x4c\xfd\xe6\x39\x0c\xaf\x28\xcb\x24\x79\x0b\xa3\x60\xbf\x95\x72\x57\x86\x06\xb2\x9d\x66\xd9\x28\x04\xf4\x7a\x36\x0a\xe5\x34\x37\x4f\xdb\xd6\xe2\xb1\xef\xf6\xbd\x5f\x5e\xeb\x2a\x0b\xf9\x30\xdf\x73\xdd\x46\x96\x78\x24\xde\x1c\x7e\x14\x46\x7b\xf6\x06\x1c\xce\x4b\x5d\x4c\x6a\xfb\x39\x7a\x7d\xa0\xbe\xe6\xdc\x0c\x66\xec\xad\x6f\xc8\x6b\x86\xb8\x63\x06\x29\xdd\xbd\xc8\x9e\xa5\x11\x04\x8f\xd9\xe2\x5a\x31\x55\x6c\xfe\xab\x91\x02\x15\x5e\xd0\x70\x1f\xb6\x2b\xdb\x25\x01\xc2\x4d\xfa\x82\xf5\x72\x72\x36\xee\x79\xe7\xc8\xd7\xf6\xa2\x10\xf9\xfd\x02\x73\xb8\xd6\xe0\xda\x09\xce\x07\x2c\x7c\x41\x0a\xae\x79\xd7\x91\x52\xdd\x04\xc5\x18\xfd\x79\x52\xab\x75\x38\x58\x11\x0f\xe8\x6e\xd9\xdb\xf0\x4a\x52\x75\xcf\x9b\x56\xec\xa7\x60\xfd\xaa\xa0\xe7\xb1\xd2\x9b\x2e\x55\xae\x8a\x89\x68\xd5\x5b\x4d\xba\x71\xb7\xbc\xba\x41\xff\xfe\xc4\xc6\x74\x38\x83\x5f\xbf\xb8\x9f\x99\xc0\x0e\xfa\xff\x74\xfc\x15\x00\x00\xff\xff\x9e\x16\x6d\x2a\x57\x04\x00\x00")

func test_certsMtCaClientTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtCaClientTenantCrt,
		"test_certs/mt/ca-client-tenant.crt",
	)
}

func test_certsMtCaClientTenantCrt() (*asset, error) {
	bytes, err := test_certsMtCaClientTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/ca-client-tenant.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x42, 0xcb, 0x50, 0xb8, 0xea, 0xaa, 0xd8, 0x5e, 0xf7, 0x68, 0x25, 0xbd, 0x9f, 0xae, 0xb9, 0x1e, 0xc0, 0xcb, 0x13, 0x74, 0xaf, 0x8d, 0x33, 0xd5, 0xfe, 0x80, 0x5, 0x38, 0xff, 0x96, 0x7d}}
	return a, nil
}

var _test_certsMtCaClientTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x50\x02\x85\x61\xcf\x53\x8c\xa7\xb6\xc8\xdd\x20\x56\x90\xa1\xc9\x39\xb8\x26\x36\x39\x5f\xc2\xd3\x6f\xcd\xe8\x3d\xf6\x98\xdf\x7d\xff\xf9\x3b\x4e\x94\x55\xf3\x8f\xeb\xb1\x7f\x6c\x57\x0d\x59\x5f\xfc\xa3\x89\xc9\xbf\x07\x32\x54\x55\x9c\x6a\x95\x63\x59\x8d\x67\x1d\x91\xed\x03\xd9\xe1\x5f\xdd\x9e\x8a\xaf\xd6\x6b\xc0\x38\x54\x52\x5f\xd8\x31\x78\xb4\x9f\x47\x53\x4c\x6a\x98\xc8\x86\x0b\x97\x34\x24\xf9\x6f\xca\x75\x1d\x1a\xbe\x1f\x0d\x7d\x36\x8d\x39\x2e\x2c\x9f\xd3\x93\x3a\xb9\xf9\x3b\x4c\x81\x23\x4b\xb3\x93\x92\xae\xb3\x78\xa7\xf9\xae\xc8\x2f\xf1\x59\x12\x71\x1e\x1b\x04\x66\xcd\x4b\xb3\x48\xb1\x26\x29\x5c\xb5\xa1\x29\x03\x31\x51\x7d\xb7\x89\x6d\xbd\x8d\x77\x84\xd1\x11\x96\x39\xde\xb3\xb2\x44\x95\x97\x34\x68\xe1\x1b\x7f\xec\x13\xe4\xdd\x04\x9b\x8b\x21\xaa\x31\x29\x7c\x60\xe3\xe0\x8b\xa4\x1b\xee\x4f\x26\x43\xf7\x9b\x10\xd6\x32\xe5\xe6\xeb\xb4\x0c\x22\x0e\xf5\xfe\xc0\x0f\x3b\xb3\xc3\x8e\xaf\x31\x47\xf2\x6d\x03\xe7\xd0\x7a\xa9\x1c\xef\x7b\x31\x38\xd5\xa5\xbf\x2d\xb9\x76\x7e\x00\x68\x72\xee\x7d\x71\x42\xb8\x95\x66\x21\x05\xf2\x85\xde\xf0\x56\x99\xb3\x78\x90\xae\xf8\x04\x94\x3b\x19\x1b\xea\xdc\x55\x15\x00\xcd\xea\xdc\x9c\x41\xd4\x8c\x3d\xc8\xdb\x2f\xf6\x63\xcb\x8d\xfe\xb4\xc4\x1e\x88\xe8\x0b\x82\x3f\x4b\x53\x0e\x2f\x95\xae\xa7\xaf\x22\x1a\xd2\x27\x6b\x5e\x3f\x79\xd9\x89\x64\x69\x5c\xce\xa3\x12\xae\xd2\x0f\x47\x15\x58\x87\xe5\xd8\x49\xe5\x58\x4e\x4c\xb4\xa7\xd7\x56\x67\xa2\x10\x22\xc2\x20\x37\x2d\xbe\xa2\xf2\x3d\x08\x51\x6d\x62\x8f\x30\x5f\x52\x7e\xaf\xfd\xb1\x1f\xa4\xfe\xc0\x9e\x53\x81\x30\xfe\x39\xb3\xd7\x5c\xaa\x47\xc4\x92\xc3\x7c\xd7\x67\xf1\xbd\x46\xa4\x73\x21\xa4\xd0\x09\x86\xa6\xbe\xb8\x96\x20\x48\xbe\xa0\xf7\x53\x0c\xf6\xa9\xea\xac\x1f\xff\xe6\xea\x14\x5e\xd2\x72\xd2\xfc\xdb\x11\xe9\x74\x4e\x72\xa1\xa5\xf9\x2c\x1c\xee\x69\x1b\xf0\xac\xb3\x9c\x42\xc9\xa4\x2a\x13\xa1\x61\x8e\x06\x76\x38\x0c\xa5\x45\x1b\x06\xf6\x64\x0e\x95\xc8\xb7\xd6\xa2\x52\x6d\x08\x08\xf9\xd3\xb9\x35\x89\x06\xeb\xe0\x63\x55\x53\x09\xf0\xc6\x62\x12\x2e\x65\x33\x4c\x6e\x93\x23\x8d\x88\xff\x40\xa3\x14\x15\x42\xeb\x77\x53\x84\xf9\x97\xa8\x44\x6b\xb9\x71\x2d\xf6\x92\x7e\xbc\x69\x7e\xfd\x3a\x7a\x3c\xf9\xa7\xd8\xc7\x86\x89\x4a\x9e\x50\x97\x51\xce\x73\x4c\xae\xd6\x85\xf4\xbc\xb8\x46\x82\x01\x75\x5f\x22\xc1\x46\xb8\xb5\x48\xdd\xdf\x09\xf1\xdd\x76\x7b\x30\x7d\xad\x79\x35\xe9\xbe\x8c\xe0\x27\x3b\x24\x04\x13\x66\x47\xf5\x53\xaa\x7f\xaa\x42\xdc\x37\x8b\x79\xc1\x38\xff\x19\x3d\x50\x0a\x32\xc4\x7e\xe8\x08\xff\x8a\x7c\x9d\x88\xec\xd9\xe5\xcf\xc9\x93\xc0\xc5\xb7\xe6\x0a\x78\x8b\x80\xed\x10\xe3\xf4\x31\x38\x8d\xb2\x6a\x1a\x9c\xb9\xbb\xf8\x2c\x5b\x90\xdb\xac\x85\x66\x4d\xcc\x3a\xac\x0b\x35\x74\x08\xac\xf6\xb1\xc1\x19\x48\x75\xbb\xfb\xae\x34\xf3\x67\x06\x94\x32\x69\xcd\x45\xc1\xf4\x1c\x6e\xe9\x90\x4a\x77\x36\xe2\x0e\x55\x97\x5f\xfc\x43\x39\xc5\x8a\x17\x17\x1e\xe4\x7d\x2b\x4b\x90\xda\xde\x2d\x8e\x48\x0f\x7a\x05\x0c\x47\x78\x8f\x2f\x84\x52\xb7\x39\x0e\x23\xb0\x20\xa0\x2c\x82\x61\x8b\xf8\x52\x8c\x5a\x2c\x3e\xf6\xd8\x1b\x04\xd9\xa7\x37\x90\xd0\x7f\xc5\x97\x76\x1f\xd0\x6e\xbf\x57\x8b\xa7\x30\xe4\xe2\x18\x6d\x0b\x3c\xfc\x72\x4d\x2c\x35\x65\xd7\xa6\x0c\x26\x15\x3d\x67\xf5\xf2\x77\x15\xd1\xed\xc3\xb5\x30\x6a\xb2\xe6\xe7\x9b\xb0\x19\x88\x14\xf7\x0c\xdb\x5c\x7a\x41\xad\xac\x97\x3e\x7a\x73\x09\x77\x57\x2f\x20\xf8\xe9\x12\x0e\x1e\x58\x92\x73\xa5\x68\x27\xde\xe7\x0f\x57\x84\x26\x9d\x59\x39\x78\x0e\xb5\xdf\x14\x07\xb5\xe6\xfe\xa1\xd8\xdd\xd5\xec\x0d\xc9\x03\x08\xd3\x49\xcb\x15\xb6\x44\xda\xc5\xed\x3a\xbc\x72\x9c\x3c\x97\x1b\x81\xb2\xdd\xe7\xc3\x13\xf1\x8d\xde\x24\x55\x9c\x7f\x93\xd9\xf5\xf4\x30\xb8\x3b\x7e\x02\x17\x27\x8a\xbb\xad\x03\x9a\x4b\x16\x74\xff\x8c\xca\x3c\xef\x4a\xf0\xaf\x91\xa8\xa4\x16\x5d\xe7\x6f\xeb\xa7\x1f\x33\x96\x0d\x92\xa3\xfd\x9a\x02\x6e\x54\x09\xf6\x5b\x1b\x12\xfa\xb2\xa4\x3b\xa2\xec\xfa\x65\xfc\x42\x2e\x61\x52\x61\x69\x20\x59\x7c\xd3\x37\x38\x2f\xfc\x26\xee\xf8\xf2\x40\x4d\x49\xfa\x6a\xb6\x9d\x44\x0c\xf5\x51\xa5\x0b\x47\x92\x08\xbd\xf7\xba\x66\x87\xc5\xa9\xea\x9c\x72\x51\x81\xf9\x72\x28\x7c\xe3\xcc\xd7\xf0\x7e\x43\xe3\x76\x30\xcd\xce\x0e\x06\x06\xeb\xaa\xa5\xef\xfa\xbe\x25\x89\xa3\x71\xb5\x52\xcf\x99\xc7\xcb\x39\x46\xf1\x88\xae\x47\xcc\xf3\x01\x19\xac\x1b\x21\x12\xbd\x92\x91\x79\x9d\xef\xdf\x95\xde\x30\x0d\x59\x48\xd7\xc6\x24\x49\x2e\x09\x86\x55\x02\xd2\x4b\x13\xe7\xac\x82\xdd\xe0\xb9\x5b\xb9\xcb\xf0\xd1\xc6\x2b\x5a\x2c\x81\x44\x84\x4a\xa2\x0a\x33\x17\x4d\x3e\x98\x83\xe5\x58\xbc\x09\xa5\xe2\x8d\x84\x9a\xae\x18\x00\x50\xd9\xc8\x9c\xf9\x3d\xe1\xf8\xa0\x48\x47\x35\x41\x58\x4e\x7e\x45\xf4\xa8\xd2\x93\xdc\x9a\xfd\x0f\xbd\xf7\x52\xc9\xd8\x59\xeb\xad\xdf\x84\x22\xa2\x98\x69\xb7\xc0\xe6\x73\x1b\x41\x06\x6f\xef\xec\x24\xb3\xda\xe2\xc3\xf1\x7e\x33\xf1\x24\xb3\xbe\x95\x63\xdc\x1c\x06\xbd\xd5\x2a\xd3\x1c\xee\x6f\xb2\x0a\xed\x20\xc8\xcb\x5c\x20\xfa\x96\xff\xf9\x20\x72\xed\xcf\x1b\xed\x6f\x1f\x83\xc0\x21\x58\x66\x0c\x6f\x5e\x7f\x21\x01\xc8\xd7\x76\x70\xbb\x29\x89\x15\x1b\xa0\x85\x29\x96\x66\xb9\x09\xea\xfb\x17\xe3\x38\xaa\x6a\x78\x91\x74\xd3\xd7\xde\xde\x3f\x5e\x2a\x5f\x98\xf6\xf1\x76\x06\x1a\x61\xd7\xe1\x92\x73\xad\xfd\xb1\xc4\x79\x66\xc4\x9f\x3e\xf1\xa5\x05\xb9\x2a\xd3\xb6\xe8\xcc\x5c\x09\x31\x6d\x02\x50\x5f\x87\x99\xd1\x7b\x80\x45\x6d\xf0\x5f\xe8\x1f\x29\xa2\x29\xfc\x7f\x6a\xfe\x17\x00\x00\xff\xff\xe3\xcd\x30\x23\x8b\x06\x00\x00")

func test_certsMtCaClientTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtCaClientTenantKey,
		"test_certs/mt/ca-client-tenant.key",
	)
}

func test_certsMtCaClientTenantKey() (*asset, error) {
	bytes, err := test_certsMtCaClientTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/ca-client-tenant.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x86, 0xf6, 0xd9, 0xbc, 0x7a, 0x1b, 0x1d, 0x90, 0x27, 0x90, 0x9c, 0x28, 0x24, 0x9f, 0xb0, 0x50, 0x5a, 0x24, 0x57, 0x65, 0xc4, 0x7e, 0xc7, 0xf9, 0xa7, 0xce, 0x3e, 0xc7, 0x0, 0xff, 0xa6}}
	return a, nil
}

var _test_certsMtCaServerTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\xbb\xd2\xaa\x4c\x1a\x85\x73\xae\x62\x72\x6b\x0a\x45\x51\x09\x26\xe8\xa6\x1b\x6c\xa0\x81\x06\x01\x31\xe3\xd8\x88\x72\x90\x4f\x0e\x72\xf5\x53\xfb\x0b\x76\x30\xf3\xbf\xe1\x13\xac\x7a\xab\xd6\xaa\xe7\xdf\x7f\x0e\x62\x9d\xd8\xff\x52\xb1\x77\x25\x1a\x51\xc1\x15\xff\x52\x81\x12\x82\xe0\xaa\xaa\xa0\xd8\x70\x30\x13\x08\x38\xf1\x80\xd9\x69\xb9\x6e\x95\x40\xa2\xe8\x88\xd2\xd5\x39\xd5\x2e\x73\x9e\x33\x62\xb1\x61\x76\x77\x52\x4d\x99\x0d\x18\xb6\x20\x03\xb3\x60\xae\xd8\xa7\x10\xe8\x60\x17\x60\xb5\xa2\x06\x93\x94\x3a\xd9\x1b\x53\x1c\xd9\x1d\xf5\x82\x19\xcf\x31\x0a\x19\x43\x78\x5e\x50\x2a\xd9\x43\xd6\x28\x55\x2c\x71\xce\xb6\x78\xbe\x54\x99\x2d\xd0\x1a\xcc\x76\x0d\x64\x7a\x8d\x67\xbb\xc6\xdf\xa8\xca\x6c\xba\xfe\x61\xf8\xf0\x97\xd5\x60\xa0\x1e\x99\x31\xf8\x0d\x33\xf1\xfc\xfa\x1b\x26\xc4\x12\x5f\xb4\x2b\xb8\x42\x6e\x87\x10\xd0\x2b\xc2\xf6\x14\x4b\x9f\x6f\x2a\x69\x75\xa2\x42\xc4\xae\xaa\x0a\x7c\xf2\xbf\xef\x43\xc8\x00\xe2\x1c\xbb\x02\x40\xaa\x0a\x58\xa7\x72\x8e\x21\xa0\x9a\xe4\xe0\xb8\x44\x4a\xdf\x40\x79\xd6\x9b\x43\x49\x8f\x57\xab\x83\x51\x64\x44\x7d\xb0\x7a\xe9\x05\x80\xca\xb1\x0f\x96\x49\xe5\x4b\x7d\xbb\xde\x4b\x28\x9c\xe3\xdc\x4e\xfd\xcc\x71\xd7\xde\xbd\x65\xbb\xb3\x3a\xf6\xdb\x49\x7c\xd4\x56\xfc\x5c\x7f\x0e\xca\x5d\x91\x9d\xe5\x44\x02\x9e\x6c\xc2\xa8\x3b\x46\x1f\x25\xed\xe4\x6c\x7f\x7c\xfa\xe7\x2e\x28\x8e\x2e\x16\xf6\xf9\x37\x51\xf3\xcf\x14\xf8\x69\x52\xd6\xf2\x32\xe4\x27\x17\xc2\x83\x63\xc0\x87\xfd\xc5\x9b\xfb\x29\x6c\x72\x5d\xa3\xd1\x60\x95\xd5\x46\xfa\xbe\xd2\x8d\xb9\xd4\x5a\xac\x6d\x7e\x4c\x88\x1d\x2e\x09\xa3\x31\x32\x85\x5e\x74\x37\xda\x85\x21\x71\x2f\x92\x5b\xf1\xf5\xce\xa8\x69\x89\xda\x68\x1d\xb9\xbf\x4f\xfa\x23\x6f\xb2\xba\x75\x8a\xba\x2f\x7c\xef\x36\x1f\x29\xd9\x9c\x93\x50\x9a\xc8\xe5\x92\x0b\x7a\xff\x1c\x7f\x94\xf4\x09\x77\xa7\xc8\x33\x01\xf3\xfd\xcd\x3b\x63\x87\x97\xb9\x9d\xc7\x84\x7b\x90\xaf\x73\xe4\x46\xee\xb4\xfb\x9c\xad\xc0\x08\x64\xf1\x94\x8e\xbe\xfd\xda\xe2\x18\x83\xb1\xd9\x7b\x02\x82\xae\xb2\x18\x41\xab\xd1\x83\xd8\x5d\x2a\xcb\x4a\xad\xec\xee\x3b\x6e\x3d\xb6\xe7\x41\x8b\x16\x57\xa1\x2a\x98\x31\x00\x09\x6d\xa8\xca\x66\xc4\x63\x14\x7a\x5b\x17\xb0\x8b\x08\x01\x43\x02\xe0\xd6\x93\x42\xf2\x67\x48\x39\x9e\x31\x14\x67\x46\x28\x88\x21\x28\xcf\x2a\x60\xf8\x9f\xd6\x87\x7e\x1b\x43\x3f\x46\x82\x2c\x22\xf8\xd6\xc7\x2c\xa3\x6e\xa8\xcc\xc5\x7e\xbf\x2b\x79\x78\xc8\x0f\x9a\x29\xa2\xc5\xef\xa6\xff\x8e\x61\x55\x97\x97\xe1\xb2\xf4\x99\xaa\x3d\xb4\xf8\x42\x95\xdb\x29\x43\xf9\xf6\xa8\x4e\xc9\x18\x48\x72\x2c\xbc\x22\x56\x04\x12\xeb\x83\xf9\x90\x56\xe2\xca\xba\x62\x1f\x36\x12\x39\xdf\x8c\xa9\x6f\x8a\x07\x79\xe7\xf7\x2c\xc6\x0f\x5f\x8a\x77\x93\x71\x68\xf4\x3a\x95\x3e\xd9\xfe\xd0\xda\xc3\x6b\x79\x9e\xe5\x55\x68\x50\x71\xdc\xac\xf2\xcc\x92\x80\xbc\x72\x75\xe0\x26\x0c\x4e\xba\x83\x6e\xee\x06\x9f\x9e\xa3\x23\xc6\x41\xac\x47\x4e\xe4\xd7\x67\xf5\x58\x18\x56\x58\x04\xfc\xf5\xb6\x3c\xb7\x69\x6f\x2c\x19\x7c\x01\x8c\xf5\xe7\xd3\x1b\xf6\xda\xfa\x72\x4b\x96\xe3\x3e\xfc\x8a\x19\x57\xc2\x24\xff\xde\x8c\x77\x94\x2a\x83\x28\xb6\xef\x85\x46\xc6\xab\xd5\x82\x52\xfe\xce\xd3\xbd\x11\x6d\xef\xfd\xfa\x14\x7a\x7c\x45\x02\x11\xb7\x9e\xb6\x3f\xd4\xba\xb5\x15\x6d\x4b\x9e\x4e\x6d\x11\x11\xf4\x7d\x6e\x9e\x54\x04\x65\xbf\x26\x6f\xb3\xf9\x59\xcd\x6e\x35\x82\x86\x38\xaf\x5d\x82\x4f\xbb\x87\x6b\x53\x3b\x3f\x97\x7a\xab\xb5\x82\xd2\x3e\x95\x3c\x05\x25\xe1\x44\xdc\x87\xf4\x3f\xc2\xaf\x26\xb0\x8d\xfe\x5f\x1d\xff\x0d\x00\x00\xff\xff\xef\x60\xa4\x8a\x57\x04\x00\x00")

func test_certsMtCaServerTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtCaServerTenantCrt,
		"test_certs/mt/ca-server-tenant.crt",
	)
}

func test_certsMtCaServerTenantCrt() (*asset, error) {
	bytes, err := test_certsMtCaServerTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/ca-server-tenant.crt", size: 1111, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xf4, 0x7c, 0xb0, 0x64, 0xfb, 0xf7, 0x48, 0xbe, 0xf6, 0x80, 0x6e, 0x7f, 0x7a, 0x7, 0x6, 0xc1, 0x45, 0xa9, 0xb3, 0x7b, 0xd0, 0x1e, 0x13, 0xa1, 0x94, 0x2c, 0xc7, 0xde, 0x7f, 0xaa, 0xec}}
	return a, nil
}

var _test_certsMtCaServerTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x50\x02\x85\x61\xcf\x53\x8c\xa7\xb6\xc8\x49\x8c\xb8\x64\xba\xc9\xb1\xc1\x11\x9a\x9c\x73\xf3\xf4\x5b\x3b\x7a\x8f\x3d\xe6\x77\xdf\x7f\xfe\x37\x5e\x52\x34\xf3\x8f\xeb\x81\x3f\xb6\xab\x85\xc0\x97\xfe\xbc\xa5\xf8\xdf\x03\x19\x9a\x26\xcd\x40\xe3\x01\x78\x0b\xc0\x91\xc0\xf5\x89\x49\xb7\x66\x6d\x7c\x88\xd5\x11\xa4\x59\xcd\x3e\xb3\x71\x54\x72\x12\xf7\x69\xef\x9b\xf2\x96\x03\x41\x22\x89\x6a\x9b\x9e\xee\x6b\x16\x26\xd4\xb3\xea\x5d\xa3\xd8\xfe\xba\x48\xc4\xea\xb8\xe2\xf9\x5c\x6f\x7a\xf4\x10\xf8\x6d\xec\x8d\x6f\x3d\x2d\x36\x12\x1d\xa3\x6e\xb5\xc7\xaf\x54\x98\xb6\x73\x4a\x60\x47\xdb\x3f\xe5\xe2\xea\xbf\xda\x65\xa0\x89\xf5\x0b\xe2\x35\xbd\x70\x9c\x73\x5f\xfb\x0c\xdb\xa3\xb2\x13\x1b\x2b\xa9\x15\xd9\x29\x1a\xa1\xf9\xd4\xb8\x47\x09\x1a\x07\x77\xba\xed\xb0\xca\x64\xef\xf0\x24\x57\xc5\x08\xab\x0f\x7d\x4d\x92\x03\xd1\x62\x4a\x0e\x94\x88\x5e\x79\xcc\x65\x61\x18\x54\x6c\x19\xc3\x8a\x68\xf6\xe0\x9a\x4e\x36\x22\xcf\x85\xd7\x8b\x65\x5c\x84\xe4\x67\xe5\x14\x6d\xf5\xd4\x4b\x2e\xc5\xe9\x6a\x99\x7b\xfe\xa4\x6c\x05\xe5\x05\x9a\x0e\x1e\xfd\x60\x87\xa3\x7e\xf6\x44\x9a\x78\xfe\xa5\xd3\xf3\x2d\x36\xc1\xea\x0b\xd4\xc2\x4b\x8a\x68\xf3\x31\x17\xc3\x48\x44\x5c\xbb\xd3\xfb\x23\xb2\x1f\x94\x86\x7f\x1c\xb7\x72\x04\x1a\xca\x0a\xc9\x90\x10\x42\xea\xbd\x3c\x78\x5a\xb8\xfa\x4a\xdb\xbe\xed\x77\xaf\x91\xb0\x45\x97\xbf\x2d\xcc\x24\x04\xbd\x34\x11\x38\x80\x07\x93\xc6\x03\x47\x70\x12\xd4\xe2\x48\x22\xca\xf0\xa0\x89\xa1\x9b\x21\x7c\x36\x1b\x46\x8f\xf3\xd6\x98\x6c\x91\xce\xb5\xa3\x9a\x51\x64\xe9\xb2\xc5\x6a\x35\x6c\x19\x49\x0c\x66\x14\x2f\x87\xf0\x03\x49\xa8\xc3\x1b\x76\x94\xef\x8f\xf2\xd6\x83\x0e\xa4\xa9\xdd\xa0\x73\x14\x16\x36\x4f\xc1\x56\x02\x7b\x9f\x15\xef\x61\x53\x9a\xea\xee\xe6\x1a\xf7\x98\xa9\x71\xf6\x7d\x8c\x11\x55\xe3\x46\xd3\xc7\xa6\xb5\x9f\x8d\x32\xb6\x39\x87\x29\x0a\xc1\x1b\x60\x17\xe4\x1b\xf2\x46\x33\x7e\x61\xf9\x44\xaf\x30\x13\x86\x26\xbd\x7f\x31\xfd\xfc\xb4\xa8\x7b\xd2\xa7\x5d\x90\x16\x2c\x56\xe4\xc2\x6b\xa5\xa3\x1e\xe2\x81\xe0\x5b\x2c\x6c\x17\xfb\xfb\x56\x54\x16\x29\x03\x10\x45\x68\xbe\x1a\xf0\x23\x4a\xba\xcd\x1b\xc6\xe1\x53\xab\xd7\x72\x3b\x9b\xb2\x69\xda\xda\x2f\x4a\x0f\x98\x04\xab\x4c\x63\xb8\x20\x99\x49\xce\xdc\x0d\xf7\xae\x06\xde\xbd\x85\x07\x0d\xa3\x95\x1e\x12\x19\x42\x68\xad\x56\x32\x95\x6b\xe3\xc0\xf4\xb3\x1f\x2c\xce\xab\xcf\xf4\x2f\x21\xfd\xa2\x5f\xff\xe7\x50\x3f\x3c\x97\x3c\xfb\x2c\x70\x54\xd8\x35\x40\x7c\x4b\x45\x9a\x2a\x72\x3c\x56\xbc\xbd\xfb\xaf\xd9\x42\x84\x8d\xb1\xc3\xf9\xe2\xc1\xa4\xf0\xc0\x96\xae\x1f\x29\x1f\x13\x42\x7a\xdb\x57\x2f\x45\xe9\x80\x99\x9e\xc3\xa5\x91\x6e\xdf\x19\xb7\x7e\xac\x4e\xe0\x57\x07\x57\x66\xa9\xcc\xa7\x8e\xb3\xec\x8d\x81\x54\x07\x6b\xbc\x3e\x7e\xe3\x30\xfc\x6a\x6b\xc9\x98\x94\xae\xa1\xa2\x2b\x6f\xbd\xf1\xb3\x0b\x57\x21\x11\x65\xf3\x25\x10\xe6\x1e\xa3\xa2\x24\x4b\xe6\xf7\x9c\xa7\xef\x93\x40\x2f\xe0\xa3\x70\x82\x02\x72\xd8\x8a\x24\x16\xcf\x73\x09\xe9\xac\xac\xcd\x7f\x15\xf2\x4d\x75\x66\xff\x69\xd6\x6b\xef\x33\xf8\x4d\x33\x64\xb8\xdb\x56\xd7\xd3\x65\x38\x06\x6b\xcb\x34\xa0\x57\xa3\xfb\x5f\xb1\x81\x7d\x20\x43\xeb\xe2\x29\x8e\x6f\x44\x66\x61\xf1\xa5\x46\x19\xf2\x39\xb9\xb2\x76\xa2\x4a\x2f\xf4\x29\xa9\xa7\x4c\x08\x95\x81\x7e\x3f\xb3\x26\x05\x08\xe1\xd6\xb0\xd3\xda\xde\x98\x47\xce\x1e\x3a\x58\xf7\x40\xa8\x1d\xea\x5e\x6b\x7e\x96\x77\xde\x0f\xf3\xb7\x36\xd3\x5c\xd4\x1b\x26\x71\x36\xf8\x5e\x6a\x22\x6d\x1c\x39\x56\xfb\x7b\x7e\x0b\xcb\x84\x39\x3e\xf6\x1b\xc3\x99\xec\xb8\x22\xb0\x1f\xb6\xd0\xc5\x1d\x4a\xf6\x19\xf3\xc1\x9d\xce\xee\xb7\x7a\xf9\x46\xe4\x79\xb8\x6c\x3f\x9e\x92\x3f\x76\x8e\x22\x8b\x76\xc8\x06\x45\x67\xab\xf8\x2f\xf9\xdd\x1a\x3c\x29\xe6\x32\x12\xe2\x3f\xe4\x92\x8d\xe6\xd4\xa0\xab\xcd\x13\xe0\x7b\xfe\xa2\x68\x2f\x99\xdc\x7c\xa5\xd4\xf8\x9c\x78\xd5\x51\x81\x0d\xc5\xe7\x67\x49\x6a\x60\x17\xd7\xda\x2d\xcb\x39\x3e\x27\xb7\x4e\x26\x78\xb0\x92\xef\xaf\x13\x1f\xb7\x35\x45\x21\x7c\x41\x97\xa8\xaf\xfb\x6d\x41\x93\xf3\xe8\x85\xc2\x2b\x75\xa0\x4e\x32\x5a\x07\xd9\x10\xc6\x1b\x77\x05\x63\xcf\x4d\x7c\x56\xbe\x0e\x6c\x12\x8e\x1c\xce\x1f\xe5\x43\x98\x79\x7a\xa9\xeb\x19\xd8\x90\xe0\x71\xd4\xbb\xdc\x0e\xd3\x21\x08\x32\x05\x8c\x38\x34\xea\x2d\x33\x35\x98\x14\x60\x5d\x23\xd6\x93\xe1\x95\xd3\xc0\x1c\x8e\x96\xb7\x47\x09\x0d\xb2\x5c\xdc\xd7\x46\x1f\x8c\x00\x4b\xbb\xf2\x05\xb1\x6a\x02\x47\x55\x35\xd1\xd3\x8f\xe6\x63\x79\x52\x60\xd4\xc5\xbf\x89\x4f\x71\xb2\x0c\x4e\x55\x01\x8c\x48\x89\x49\xa5\x76\x2b\x97\x2a\xe3\x6f\x4b\x71\x38\x5b\xf4\x74\x22\x2b\x4f\x13\x91\x3d\x80\x92\x4b\x79\x03\x5f\x3d\x98\x18\xd5\xd3\xbe\xd9\x4d\xc5\x08\x9c\xc4\x9c\x78\x23\xe8\x23\x24\xc4\x55\xfe\xc8\x06\x3b\xa2\x11\x24\x23\x87\x9b\x3e\xec\x64\x77\x65\x98\x34\x02\x82\xd4\x17\x9d\x94\xa0\x21\x94\xad\xe4\x93\x0b\x55\x0c\xbe\x64\x66\xc9\x85\x4b\x08\x96\x22\xff\x10\x8e\x70\x7e\xec\x32\xba\x7b\x77\xb4\x5a\xf2\xa8\x72\x01\x8b\x4b\x79\x1f\x3c\x65\x10\x8f\x6b\x31\x5d\xc5\xce\x53\x4d\x43\xd5\xae\x85\xb4\x4e\xcb\x4b\xcc\xd3\x88\x5e\xcb\x82\x66\x4e\xcf\xdd\x46\x03\xeb\x67\xeb\x66\x65\x53\x75\x08\x1a\x46\xa9\xaf\x34\x30\x7b\x56\xdb\x8c\xec\xf6\x57\xaf\xe1\x30\x9e\x35\x8a\xcd\xaf\x21\xfc\x52\xf6\xcf\xcc\x66\x74\x78\xe0\x69\x9b\xbb\xd9\xab\x97\xb7\xe4\x79\x77\xfd\xcc\x1b\x8d\x3a\xb8\xfc\x65\x7f\x94\x9a\x18\xc6\x90\xd3\x6d\xb5\x73\xc3\x3c\x17\xc1\xdf\xbf\xd0\x3f\x56\x24\x53\xfc\xff\xdc\xfc\x37\x00\x00\xff\xff\xb0\xfb\xd5\xa5\x8f\x06\x00\x00")

func test_certsMtCaServerTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtCaServerTenantKey,
		"test_certs/mt/ca-server-tenant.key",
	)
}

func test_certsMtCaServerTenantKey() (*asset, error) {
	bytes, err := test_certsMtCaServerTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/ca-server-tenant.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0xe4, 0x6c, 0x99, 0x5e, 0x9c, 0x81, 0x42, 0xcf, 0x94, 0xff, 0x53, 0xf0, 0x3a, 0x65, 0xbf, 0x33, 0x4d, 0xf4, 0xc7, 0x10, 0xd8, 0x9c, 0xfc, 0x85, 0x5c, 0xc3, 0x69, 0x46, 0xe2, 0x80, 0x87}}
	return a, nil
}

var _test_certsMtClientTenant123456789Crt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x94\x3b\xd3\xb2\x3a\x17\x86\x7b\x7e\xc5\xd7\x3b\xdf\x20\x47\xb1\x0c\x21\x62\xd0\x80\x09\x20\x42\x07\xc8\x13\x44\xe4\x20\x28\x87\x5f\xbf\xe7\x79\x8b\xb7\xd8\x7b\x55\x6b\xee\xe2\x9a\xb5\x66\xee\xb9\xfe\xff\x3b\x26\xb2\xb1\xfb\x3f\x88\x58\x80\x0f\x18\x82\x00\xfd\x49\x05\x82\xb1\x65\x06\x10\x82\x42\xe6\x60\xc2\x26\xe0\x98\x01\xe7\xa6\x3a\x3e\x1a\x0d\xbb\xb1\xcc\xb0\xd9\x31\xab\xbe\xa5\x16\x9f\x2c\x1a\x3b\xa7\x36\xc1\xe5\x37\x77\x01\x45\x67\x93\x82\x49\x38\xad\xc8\x27\x26\xb0\x81\x14\x22\x58\x12\x87\xca\xfb\x2a\x55\x9c\x6f\x1c\xb9\x2d\x61\xe1\x84\xa6\xd8\xba\x52\x6a\xa1\x69\xb6\x32\xd9\x7d\xe7\xaf\x7d\x19\xcb\x9c\xd3\x2d\x9a\x8e\x65\xee\x0a\xa4\x02\x93\x5b\x01\x8d\x04\xf1\xe4\x56\x68\x89\xca\xdc\x25\x55\xf8\xbb\x6f\xff\x66\x15\x68\x09\xc3\x13\x02\x7f\x60\x27\x34\xd5\x7f\x61\x42\x2c\xf3\x19\x55\x80\x9a\xdc\xbd\x9a\x80\x04\x30\x40\x0b\x59\xa9\xe4\x56\xb9\xea\xfd\xbe\xe6\xe3\x7f\x9f\x6e\x9a\x14\x58\x9c\xa3\x0b\xb0\x20\x14\x00\x6d\x21\xe7\xc8\x04\x5e\x5a\xd4\x07\xa9\xda\x49\x5a\x27\x17\xb9\xbe\x98\x62\xcd\x6f\x89\x89\xce\xad\x5d\x9e\x8f\x2d\x87\xaf\x9d\x4f\x8d\x7d\xd8\xeb\x06\x5b\xdf\x6b\x1f\x96\xbb\xbc\xff\x72\x61\x0e\xfc\xbe\xba\x06\x8a\x87\xdc\x43\x70\xf5\x83\x99\xab\xe1\x98\xe9\x4f\x47\x09\xe3\xaa\xda\x6d\x13\x47\x09\x55\x6e\x2e\x33\xee\xe4\xfa\xdb\x5d\x23\xdb\x70\x92\x94\x79\x5e\x7f\x79\xbe\x00\xf8\x11\x9e\x9f\xb8\x06\x0f\xf9\x99\xed\xc4\x7b\x37\xba\x45\x4c\x1b\x33\x38\x4b\xc5\x58\x97\x49\x1e\xb9\xcd\x2d\x86\x89\xc8\x70\xc8\xc6\x56\x34\x7a\x77\x3e\xb9\xfd\x54\x19\xdb\xf9\xc1\xc0\x35\x1b\x25\x4f\x58\xd9\xb3\x4c\xea\x17\xd6\xdd\xc7\x91\xa9\x61\xd8\xc8\xd2\x17\x44\xcc\xf0\xeb\x47\x53\x9a\xe2\x39\x29\xcb\x33\x2d\xe7\x5b\xc6\xc6\x41\x1a\xb8\xdc\x5d\xf7\xf1\xc3\xd7\x5f\x5d\xbd\xb0\xd5\x68\xb0\xa0\x84\xaf\xa5\x38\xee\x07\x3a\x89\xeb\xeb\x39\xe7\xfe\xe7\xd4\xbd\xce\x9b\x4d\x7a\x7f\xfd\x64\x2a\x5e\x13\xdb\x77\x24\x45\xce\x72\x79\x3b\x7c\x64\x05\x44\x57\x47\xf2\x2b\xcb\x3d\x67\xf2\xbb\xd3\x76\xa2\x50\xb0\xac\x3c\x05\xd1\x7e\xd0\x2f\x0a\x4a\xcf\x27\xf9\x1e\x19\x5b\x88\xb5\xac\x4a\x25\x0b\x86\x10\x4c\x08\x80\x94\x34\x04\x86\x93\xc5\x63\xeb\xca\xb6\x17\x40\x8f\xa2\x09\xa8\x05\x78\xc4\x05\x62\x92\xdf\x12\xdd\x1d\x4a\x09\x01\xad\x0d\xe1\x60\x03\x1a\x1e\xcc\x89\x40\x02\xb6\x36\xf4\x7b\xdb\xc7\x99\x62\x51\x64\xc2\x29\x04\x40\xc5\x26\xa0\x26\xb1\x8c\x65\x73\x29\xf5\x4c\x68\xe7\x81\xbd\x1b\x55\xe3\x21\x2e\x54\x67\xb6\xe3\xcf\xa8\x1d\x2e\xd5\x39\x10\x57\xb6\x31\x0a\x9d\xc2\x40\x4c\xeb\x73\xcc\xb2\x01\x0f\x22\x53\xef\x46\x34\xef\x8d\xb1\x8b\x7d\x70\xf7\xe0\x9a\x09\xe5\xb8\xb4\xc4\x5d\x76\x69\x90\x19\xb9\xf6\x4e\x0a\xeb\x26\x0d\x91\xac\x26\x16\x68\xbc\x79\xee\x94\x2d\x32\x36\xa3\xa3\x25\xb6\xa3\xca\x1f\xa5\x7b\x6c\xd8\xde\x33\xb5\xd1\xe3\xb7\x7a\x21\x0a\x16\xd4\xc5\xf5\xac\x0d\x84\xed\x80\xe2\xe3\x49\x1f\x87\xb9\xf0\xd0\x9d\xd4\x47\x09\x62\x78\xd4\xd8\xbe\xb6\xd5\x77\x4d\xb4\x47\xf2\xed\xa5\x47\xfe\xd3\x46\x4f\x5f\x4a\x0f\xa5\x3a\xcc\x85\x9c\x3b\x92\x70\x73\x4d\x3f\xee\x9b\xcf\xdb\x49\x3f\x76\xf1\xbc\xd1\x97\x7d\xca\xe0\x66\x08\xc6\x49\xf3\x72\xa7\x3d\x45\x87\xe5\x49\x74\x9b\x4f\xd8\x97\xef\x79\x62\xec\x2f\xda\x75\x3b\x3b\x33\xd5\x15\x4f\x5c\x43\x61\x29\x9f\x52\xd9\x1f\x7d\xb5\x72\xba\xfb\xba\xd7\xfb\xc6\x8d\x0e\xde\xe7\x62\xbc\xf3\xa0\xec\x6f\x24\x8c\xe7\xc5\x1f\x1a\xb9\xd3\x21\xd6\xb8\x27\xb6\xfc\x95\x77\xba\xd6\xa8\x2c\xcd\xc4\x1f\x45\x13\xba\xe3\x0c\x26\xf1\xce\xc0\x25\x9a\x85\x3f\x8a\x40\xae\xf5\x5f\x6d\xfc\x13\x00\x00\xff\xff\x72\xd6\xd3\x85\x53\x04\x00\x00")

func test_certsMtClientTenant123456789CrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtClientTenant123456789Crt,
		"test_certs/mt/client-tenant.123456789.crt",
	)
}

func test_certsMtClientTenant123456789Crt() (*asset, error) {
	bytes, err := test_certsMtClientTenant123456789CrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/client-tenant.123456789.crt", size: 1107, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xb9, 0x8a, 0x42, 0x93, 0x18, 0xd9, 0x63, 0xcd, 0x28, 0x28, 0x77, 0xeb, 0x6b, 0x3c, 0xff, 0x69, 0x35, 0x41, 0x40, 0xb, 0x2f, 0x7a, 0xb1, 0xbc, 0xcb, 0x80, 0xf4, 0xbd, 0x16, 0xee, 0x37}}
	return a, nil
}

var _test_certsMtClientTenant123456789Key = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xac\x5a\x02\x85\x61\xcf\x53\x1c\x4f\x4d\x91\xa1\x11\x57\x6c\x72\x6e\x72\x72\x84\x86\x26\x67\x1a\x78\xfa\xa9\x39\x63\xef\xb2\xcb\xfc\xee\xfb\xcf\xff\xc6\x89\xb2\x6a\xfd\x71\x3d\xf0\xc7\x76\xd5\x10\xf8\xe2\x1f\x5d\x4c\xfe\x3e\x90\xa9\xaa\xe2\x0c\x54\x0e\x00\x9d\x07\x8e\x08\xa8\x99\x0e\xe2\xc8\x3e\xe3\x61\x4c\xa9\x67\x55\x15\x38\xe2\xca\x4e\x74\x8e\x3a\x13\xb7\x4f\x03\xf4\x7c\xd7\x84\x07\xf3\xd6\xf5\x52\xde\xe7\x7b\x86\x3c\x65\xbf\x17\x58\x90\x2c\x7d\xb1\x42\xbb\x20\x1d\x34\xb4\x42\xcd\x96\x85\xaf\x87\x9d\x8b\x33\x96\x6e\xf3\xb6\x4f\xb7\x1b\x4b\xbf\x01\x8a\x21\x36\x63\x16\xc1\x7d\x98\xe4\xbf\xbe\x9f\x45\x92\x86\x26\xd8\x4b\x00\x07\x7b\x54\x13\xf0\x46\xe6\x9e\x27\x8b\x0f\x28\x46\x7d\xf9\x42\x32\xcf\x90\xc6\x23\xa9\xbf\x12\xbc\x2c\x6b\x6d\x64\xc5\xaf\x2b\xe3\x2d\x72\x4f\x84\x38\xe1\x2b\x6f\x3f\xbe\xac\x41\x22\x17\x1e\x44\xc0\x58\xb2\x27\x0d\x51\xd2\x4e\xb8\x5a\x2a\x5f\xd7\xab\xf2\xe8\xc5\xa5\xca\xa5\x47\xfa\x47\x54\x5e\xfb\x20\x8b\x3b\xaf\x48\xe5\x2e\xe3\x4f\x74\x0b\x59\x1f\x63\x8d\x66\x2c\xd9\x00\xc5\x9a\x62\xdf\x45\x5b\x7a\xb9\x46\x56\xf8\x25\x08\xc8\x3b\xf3\xa5\x4b\x27\x97\x21\x39\x19\x6a\xc6\x53\xf6\xac\x5b\xab\x4b\xd5\x31\xae\xd2\xfd\xc9\xbd\x9b\xc9\x0b\x2e\x0d\xc6\x50\x37\x4d\x74\x87\xce\xec\x18\xc7\x93\xa5\xa4\x43\x9c\xad\x1c\x7f\x26\xa4\x70\xa7\x6d\x4d\xb1\xfc\x71\xd4\xb6\x3f\xac\x35\x30\x35\x47\x15\x80\x03\x38\x30\xa9\x1c\x70\xf8\x63\x60\x17\x37\xbb\x1e\xcb\xbb\xe1\x0e\xea\xef\x16\x1f\xe3\xc9\x20\x0f\x38\xd7\xc3\x4b\x9e\xb1\x8c\x77\x5a\x66\x39\x0f\xb6\x72\x83\x34\xd5\xf9\x0d\x59\xca\x5a\xdc\xb6\xa4\xb4\xbf\x9e\xc9\x09\xea\x57\xb1\xde\x3e\x5c\xd2\xf8\x6f\x62\x27\x68\x15\x3a\xe1\x20\xaa\xf8\x9e\xe6\xe7\xca\x99\xf1\x44\x30\x42\xd7\xd6\x4a\xdb\x8a\x5b\xdf\x0b\xd8\x7c\x3d\x7a\xd0\x45\xfe\xd6\x3b\x37\x26\xce\x18\x23\x52\x08\x39\x52\x17\xd8\x38\x8b\x9d\x04\x02\x42\x45\x35\x8e\x26\xf1\x09\xeb\x93\x0b\xf7\x98\x8a\xbb\x36\x62\xbe\x27\xca\x33\x21\x8e\x04\xf0\x2d\x37\xdc\xea\x8b\xd7\x90\x0a\xfa\x57\x37\x7f\xe4\x4f\x05\x9c\x86\x3e\x49\x8e\x78\x9b\x6a\x44\x0a\x34\xc0\x55\x6a\x13\x89\x14\x12\x27\xf9\x94\x32\x3b\x79\x68\xdd\x2f\x6a\x92\xb7\x6a\x8a\x54\xec\xa2\x0f\x91\x67\x3a\x1e\xd6\xf5\x3a\xfd\x5a\xcc\xd0\xbc\x5d\x36\x7e\x65\xa9\x35\x5e\x4a\x33\x33\x3d\xb4\x97\xd4\x9c\xc8\x9e\xa2\x64\x5a\xc1\xcf\xad\x36\x5c\xf2\x13\x3d\x7c\xd2\x4f\x2a\xaf\x87\xae\xea\xfb\xd7\xf9\xcd\x0e\xe0\x64\x41\xaf\x2d\xe6\xcb\x75\x2a\xc4\xd8\x85\xcf\x83\x04\xd2\x5a\xa3\x32\xf4\x49\x17\x05\x4f\x4c\x0e\x4c\x32\x07\x6c\x07\xa7\x33\x3d\x6c\xcd\x88\xb1\x0e\x7d\xb7\xce\xa6\xe7\xba\x1f\x72\x9c\x5d\xc4\x3a\xca\xd3\x5a\xd8\x29\x51\xb7\xd2\x0d\x05\x66\xcd\x61\x39\x4a\x09\x01\x01\x9a\xf0\x7c\xb2\xb1\xa6\xac\x0a\xa2\xed\x71\x13\x24\x15\xf0\xd1\x40\xce\x9c\xf9\x9e\x15\xfa\xe6\x49\x93\x9d\x4f\xd3\x18\x44\xc6\xe0\x4d\x84\xee\xf8\x89\x7c\x9c\xf5\xf9\xa2\xbd\x43\xf7\xf5\x06\x7d\x12\xf6\x1b\x8c\xa8\x89\x69\x06\xf1\x09\x84\xf7\x2e\xa1\xad\x73\xd7\x9f\x94\x88\x36\x1c\x0e\x86\x11\x86\x5b\x7b\x6f\x4b\x9d\xba\xf0\xbc\xd3\xee\x16\x08\x7a\x4a\xbe\xb0\xff\x17\xcb\x08\xb4\x97\x4a\x46\x11\x95\x8c\x8a\x9f\x4d\x45\x66\xce\xe4\x7c\x6e\x17\x44\x6c\xdb\x80\xd4\x79\xc5\x88\xbd\x76\xe5\x68\x0e\xe7\xe3\xa2\xcb\xdc\xd5\x74\x58\xed\xf0\x72\xa5\x2d\xf3\x7a\xdc\x3a\x6f\x25\xe8\xe1\xa5\x23\x52\xc3\xc3\xcc\x40\xb7\x05\x05\x6e\x7f\xd0\x92\xd8\xcc\x41\x69\x5a\xa2\xb9\xe0\xc1\x2f\x75\x4e\x9b\x7c\x6c\x6d\x9c\xfe\x95\x0a\x91\xae\xc0\xaa\x97\xd3\x53\xe3\x5a\xe4\x9d\x1e\x18\x44\x8f\x1b\x55\x7f\x8c\x75\x8b\x28\x8e\x30\x13\x96\xc6\xec\xcd\xa3\x72\xff\x7b\xb4\xfd\x76\x00\x0c\x3d\xf9\xde\x88\x8b\xeb\x6f\xb2\x56\xcc\x44\x5f\x2f\x54\x96\x28\x7c\xe3\xcc\x36\x75\x98\x10\x3e\x14\x85\x48\x8f\x71\x50\xf9\xae\x33\x68\x91\x4d\x88\x70\x92\xae\xe6\x83\x2f\x9a\xe5\x4e\x4e\x4f\x71\x4d\x44\x7b\xc1\x3e\xf6\xdf\xd7\x34\xbb\xf2\xc7\x27\xaa\x5b\x5d\xf7\x5d\x7e\x57\x85\x24\x40\x6d\x2f\x80\xf7\xea\xd1\x9f\x99\xca\xc1\xb2\xcf\xd8\x8f\x5e\xcb\x1a\xb1\xbd\x8a\x73\x6f\xea\xee\x3e\x87\x6a\xb8\xf9\xb8\x63\x1e\x93\xfb\xe0\x8e\xd3\x5a\x24\x37\x65\x93\xaf\xfd\xa3\x4b\xe5\xf2\x40\x03\x0b\x84\xb4\x0e\x97\x22\x56\xa9\x4b\x9e\x1c\xda\x73\x0a\xcd\x1d\x29\x30\xc9\x40\xf8\x59\x1f\x32\x28\x5f\xac\x82\xbd\xc3\x3a\xe8\xce\xbd\x9a\x9b\x89\xc3\xa4\x5e\x92\xd2\xd9\xba\x98\x4e\x0f\x21\xa3\xf5\x26\xcd\xfb\x62\xa7\x83\xe0\x08\xdd\xdb\x77\x76\x47\x1a\x8e\xb8\xe9\x22\x74\x26\xb1\xf7\x06\x92\x3a\xb1\xd3\x92\x04\xf2\x1a\x23\x74\xb5\xc4\x7c\x21\x74\x6b\x1f\x75\xae\x1e\xcb\x5c\x26\x21\x97\xfc\xce\xbf\xea\x17\xbf\xc6\x15\xfc\x5e\xf6\x0c\x10\xdd\x44\x3f\x5c\xda\x9d\x0a\x92\xa0\xea\x42\x33\xf5\xd4\xee\x41\x1d\xe4\x74\x1a\x87\x54\x25\xd8\xdd\xf5\x53\xc9\x21\x35\x5c\x5b\x4b\xfa\x1b\x32\x9a\xe3\xa1\x3c\x91\xaf\x13\x6e\x7a\xca\x93\x74\xc9\x8c\x24\xda\x69\x24\x02\x24\x6a\xe6\x58\xbe\x39\x5e\xf4\x7d\x4b\x6a\x86\xdc\x48\x5e\x7c\x20\x28\x9c\xdc\x73\xf6\xf6\xcc\x6d\x38\xa0\xe3\x09\x2d\x3d\xbe\xb9\x65\x76\xf5\xd9\xba\xe2\xa3\x11\xfe\x88\xd5\xce\xfd\xf2\x3a\x19\x52\xf1\xba\xe6\x22\x2b\x9f\xa6\xd6\x7e\x2b\x09\xbd\xad\xa8\xa5\xfd\x69\xac\xf4\xcb\x8d\x8b\x03\x5b\xad\x51\xd3\x09\xa1\x94\xed\x56\x1a\xe8\x15\x56\x0c\x0f\x46\x77\xda\x0e\xee\xe5\x9c\x46\xea\x56\x79\xa3\x5c\x4e\x15\xd7\x44\xe5\x70\x3b\xea\x68\x89\x65\xa8\xdd\x7c\x3d\xa9\x96\x7f\xff\xfc\x03\xfd\x65\x45\xb4\x84\x7f\xe7\xe6\xbf\x01\x00\x00\xff\xff\x28\x62\x70\x98\x8f\x06\x00\x00")

func test_certsMtClientTenant123456789KeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtClientTenant123456789Key,
		"test_certs/mt/client-tenant.123456789.key",
	)
}

func test_certsMtClientTenant123456789Key() (*asset, error) {
	bytes, err := test_certsMtClientTenant123456789KeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/client-tenant.123456789.key", size: 1679, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xdb, 0x9a, 0x5d, 0x41, 0xb5, 0xee, 0xff, 0xca, 0x7d, 0x31, 0xc7, 0x5c, 0x4, 0x60, 0xe, 0x2e, 0x37, 0x25, 0xc7, 0x3c, 0x87, 0x6b, 0xe5, 0x2d, 0x39, 0x3b, 0xe8, 0x1, 0x3b, 0xf6, 0x38}}
	return a, nil
}

var _test_certsMtServerTenantCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x49\xcf\xb2\x48\x1b\x85\xf7\xfc\x8a\x6f\x6f\xbe\xc8\x28\xb0\xac\x82\x02\x8b\xa1\xb4\x40\x54\xdc\x31\x28\x08\x2a\xa3\x14\xf0\xeb\x3b\xcf\xd3\xc9\xbb\xe8\xee\xb3\xba\x73\xee\xe4\xac\xae\x5c\xff\xff\x09\x44\x36\x26\xff\x33\x50\x70\xc2\x16\x36\xc0\x09\xfd\xb6\x9c\x8f\xb1\xe9\x57\x86\x01\xca\xae\x00\x0c\x43\x50\xe0\x00\xf8\x4b\xee\x38\xb9\x76\xbe\xc4\x6f\xc3\xab\xbb\x7c\x18\xa5\xad\x00\x98\x49\x63\xc7\x6d\x6e\xb8\x9c\x32\x02\x28\xf2\x20\x05\x8c\x73\x57\x14\xfa\x10\xd8\x40\x88\x90\x51\xfa\x0e\x15\xf5\x2a\x91\x9c\x29\xbe\x90\xc6\x0f\x22\x86\x58\x6c\x9e\x29\x35\x11\x9b\xcd\x54\x24\x7d\xf6\xd6\xcb\x58\x2c\x0a\xca\x23\xb6\x2f\x33\xc2\xf9\x15\x60\xa4\x02\x8a\x7f\x8a\x19\xa9\xd0\x72\x29\x33\xe2\x57\xd1\xcf\xcd\xff\xe9\x2a\x10\xf9\x01\x66\x08\xfc\x8e\xb9\x88\xbd\xfe\x8c\x71\xb1\x58\xb0\xa2\x40\x4f\x1f\xf0\xb6\x11\x76\x76\x88\x53\xc9\xa4\x08\x02\x1a\x01\x20\x63\x68\x32\xf0\xf3\x77\x41\x83\x21\xa0\x66\xe3\xdc\x2f\x41\xbe\x48\xe1\xca\xb2\x46\x92\xb5\x8a\xdb\xc9\xe8\x45\x8b\xfe\xa1\x16\x9b\x99\xf6\xeb\x3b\x37\x87\x0d\xae\xd4\x4b\x1d\x94\x07\x3d\x8f\x2f\x9e\x66\xf7\x91\x79\xcd\x17\x5e\x34\x97\xbe\x3e\x7c\xac\x49\x78\xf6\x3a\x7f\x1f\x23\x5d\x50\x1f\x37\x2e\x20\xe8\x1b\x53\xb4\x61\xce\x43\x6f\x7b\xa1\x29\xa5\x7c\x1a\xc8\x66\x8a\x57\xad\x4c\x82\x4f\xe4\xe9\xb5\x2f\x26\x3b\xcb\xfb\x88\x77\xc5\xeb\xbc\xb9\x69\xe1\xd1\x5f\xe9\xa1\x7e\x3e\x81\x06\x1d\x6e\xa3\x6c\xaf\x4a\xf6\xe5\x5b\x35\xc1\x39\xae\xe6\x87\xb8\xf0\x07\x72\x96\xf1\xe2\x7c\xa9\x34\xec\x2b\xab\x94\x48\x7e\x6b\xfc\xa0\x09\xe5\xb4\x0a\x5e\x43\xe8\xde\xd6\x77\xd7\x8b\xfb\xc7\xfc\x74\x33\x4e\x32\xa5\xef\x59\x67\x8e\xb2\xc2\xcd\x55\xab\xa5\x25\xf9\x74\xf1\x04\x90\xc1\xf7\x0f\xf1\xb0\xaf\xfa\x83\xd1\x09\x49\xb1\x8f\x28\xbd\x05\x0a\x7f\x10\x5a\x6a\x82\x90\xbf\xf2\xce\xde\xe9\xef\xc9\x9d\xa3\xea\xe6\x23\x6d\xda\x8d\xdd\xa9\xa7\xba\x7f\x07\xf9\x4b\x16\x96\x92\x6a\xe2\xba\x7a\xe7\x5c\x2b\x34\x7d\x7b\x7c\x66\xe7\x1a\xc4\xdb\xb0\x75\xeb\x80\x56\xe9\x29\xbf\xb8\x71\x1a\x6e\xb5\xcb\xa3\x61\xdc\x11\xb1\x2d\x28\x7c\x08\x80\x5d\x25\x26\x7c\xfb\x40\xfe\x61\x22\x37\x19\x82\x5b\x46\x11\x60\xd8\x6a\x4c\x90\xc3\x82\x9c\xf7\x61\x84\xac\x0a\x44\xb0\x28\x7a\x58\x20\x0b\xd2\xcc\xe4\x00\x8d\xb1\xcb\x62\x08\x69\xb4\x07\x0c\x33\x42\x63\xf3\x1c\xf0\x01\x34\x64\xe6\x61\xec\xa4\xb6\x5e\xc5\x97\xb9\x49\x25\xc2\x17\x45\xd6\x79\xef\x79\x8a\x45\x6b\x28\x59\xb0\x05\x00\x40\xae\x9c\xc1\x7f\x05\xfe\x93\x0b\x83\xfd\xcd\x05\xa0\x30\x3d\xf8\x54\x1d\x1e\xf4\x4e\xcc\xeb\x97\x6b\x85\x34\x91\x0d\xe9\xa0\x34\x46\x3f\x8f\x9d\x53\xdd\xac\x71\x12\xdd\x81\x3d\x83\xd3\xee\x35\xee\x1f\x21\x7a\xf5\x57\x7d\x98\x88\xf0\xbe\xe8\x7d\x29\x74\xd1\x02\x5f\xd1\xd5\x39\x66\xad\xf2\xd1\x00\xb7\x93\x83\x0c\x8f\xbd\x21\x7b\xae\xbc\x4f\x17\x75\x50\xed\x6b\x99\xa4\x6a\x77\x30\x73\x01\xb5\xf7\x79\xfe\x9e\x45\xd1\x23\x32\x6a\x05\x09\xb4\xbb\x9a\xaa\xdf\x24\x1a\x35\x5f\x43\xce\x26\x3a\x01\x2e\x9a\x14\xe7\xa9\xda\xef\xc2\xb3\xa5\x1b\x7a\x5d\xf1\x1a\x8a\x30\x86\xf6\x10\xcc\x9f\x75\xbb\xb4\xb3\x21\xd4\xb8\x2d\x4f\xa2\x34\x64\xab\xbb\xbb\x07\xda\xe7\x19\x1d\x2e\xf9\xba\xe6\xc5\x58\x27\x13\x17\x1a\x5a\x61\x19\xf2\x87\xc0\x38\xbe\x66\xbb\x61\x57\x87\x69\x64\x4e\x86\x33\x03\xf9\x70\x74\x59\x9a\xe7\xba\x1b\x8d\xd5\x71\xd5\x46\xe5\x06\x45\xdc\x79\x1f\xd2\x76\x56\xb7\xdb\x90\x7e\x0a\x15\xae\x5b\xc2\xae\x7d\x3c\x88\x60\x8c\xad\xa5\x44\x0a\x53\xbd\x69\xca\xda\x2e\x9e\xc2\xea\x95\xba\xe3\x82\xcf\xda\xdd\xea\xf5\x71\xe2\xbd\x4d\xdc\x1e\xd7\xef\x44\xec\x7e\x3e\x9a\xf6\x3d\xe8\x9f\xdb\x84\x0b\xd7\xf6\xa9\x56\xbe\xc4\xfd\xfa\x05\x11\xf3\xdf\xce\xf9\x2b\x00\x00\xff\xff\x17\x8c\x75\x4c\x90\x04\x00\x00")

func test_certsMtServerTenantCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtServerTenantCrt,
		"test_certs/mt/server-tenant.crt",
	)
}

func test_certsMtServerTenantCrt() (*asset, error) {
	bytes, err := test_certsMtServerTenantCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/server-tenant.crt", size: 1168, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x9f, 0x19, 0xbc, 0x47, 0xaf, 0xdd, 0xc6, 0xa9, 0x52, 0xad, 0xb8, 0xe6, 0xad, 0x9a, 0x24, 0xa9, 0x52, 0xab, 0xb1, 0x8, 0x3c, 0x75, 0x67, 0x5a, 0x6e, 0xbd, 0xc4, 0x38, 0x4e, 0x1a, 0x27}}
	return a, nil
}

var _test_certsMtServerTenantKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xa7\x12\xa4\x60\x02\x04\x60\xcf\x53\xac\xa7\xae\x18\xe2\x80\x38\xf1\x93\x73\xce\x8e\x0c\x43\x1e\xe2\xf0\xf4\x57\xbb\xfa\xda\xb6\xe9\x6a\xf3\xfd\xe7\x6f\x58\x41\x52\xcc\x3f\xae\x07\xfe\xd8\xae\x12\x02\x5f\xf8\xa3\x09\xc9\xbf\x06\x32\x14\x45\x98\x1b\x85\x05\x40\xe3\x80\x23\x00\x8a\x8b\x87\x3e\x2e\xf6\xd7\x46\xcb\x9a\x09\xdb\x0a\x7c\xb0\x6a\xa0\x68\x38\x4c\xd8\x5b\xa0\xd1\xe4\xe4\xbc\xed\x4e\x81\xd1\x45\x48\xfc\x33\x8e\x20\xb1\x43\xd8\x15\x05\x28\x5e\xec\x66\x43\xaf\x24\xbf\xdc\x39\x93\xac\x48\x29\x7f\x43\xbb\xac\x70\x2c\xf0\x5d\x7d\x14\x58\x7b\xe3\x62\x24\xcb\x98\x4c\x29\xf1\xfc\xcd\xd7\x5f\xcc\x40\x94\xa8\x4f\x21\x94\x43\x52\xde\x1c\x8f\xd6\x23\x99\xe9\xf0\xa8\x8e\xce\x34\xc7\x7f\x8c\x17\xbf\x28\x73\x63\x03\xaf\x3e\x6a\x14\x8e\xf5\x5d\xab\xb0\x4e\xf6\x14\x3a\x66\xb6\x9d\xff\x84\x15\x67\x74\x79\x6f\xbe\x21\x96\xb8\x93\xf2\x89\xa3\x8c\x17\x32\xe1\x90\x88\x57\x9a\x0b\xdd\x58\x90\xeb\xca\xb4\x38\x9d\x74\x93\x79\x31\xef\xa1\x2e\xb8\xaa\xb8\xea\x01\x51\x4d\x7a\x5c\xa8\x51\xbf\x58\xb0\x6b\x38\xf3\x69\x21\x82\x7a\x9a\x75\x8f\x66\x16\x15\x04\x29\xa8\x4a\x7e\xcf\x02\x70\x09\xbb\xc8\x70\xee\x2f\xc3\xc7\xa9\xb7\x90\x85\x41\xd6\xba\x5d\x8f\x17\xa9\x91\x7d\x9c\x56\x66\x31\x07\xb6\xb9\xd1\x3f\x34\xae\x21\xc5\xb6\xeb\x87\x98\xc4\x14\x48\xf6\x6b\xf5\x16\x21\x50\xb0\x17\x1e\x76\xa3\xf4\x3a\x11\x71\xa2\x0c\xfe\x36\xec\x4b\xe1\x81\x03\x58\x30\x2b\x2c\xe0\x72\xde\xf5\x9e\x9a\x52\x90\xf2\x4b\x87\x05\x94\x1e\xbb\xda\xaa\xe7\xc3\xb6\x67\xc0\x86\x8f\x80\x5e\xf6\x84\xcc\xed\x58\xc4\x51\x9f\x2f\xe3\xbc\x58\x12\xd9\x64\x44\xe2\x91\xa9\x62\xdf\x04\x5a\x49\x39\xa2\x7e\x61\xd8\xec\x60\x06\x3f\xcc\x1a\x5a\xf4\xeb\xbb\xca\x84\xc8\xce\xf4\x0f\xc3\x88\x59\x17\x55\x8d\x14\x61\x0d\x6e\xa9\x8b\xd5\x2b\xa7\x64\xb3\x56\x58\x71\x72\xba\xc5\xf3\x6d\x9e\x95\x89\xd9\x43\x09\x2f\xdd\x41\x3a\x4c\xf8\x1b\x0e\x28\xb4\x16\xb1\xd7\x41\x29\xd2\x92\xdc\x11\x97\x9c\x44\xea\xb2\xe1\x38\xe1\xe1\xde\x31\xd1\x6e\x39\xd7\xc8\x34\xc4\x33\xb0\xc9\x1c\x96\xae\x6e\x5b\x9d\x21\x9d\x5e\xaa\x5e\x21\xcb\x1d\x44\xfe\x00\x45\xaf\xeb\x76\x0e\x9e\xd9\xa2\x73\x62\x28\x90\x67\x7e\x5d\x5b\x4b\xf0\x06\x4f\x2f\x16\x41\x65\x0b\xf2\x3b\xbe\xd3\x69\x3a\x7e\xf0\xac\x26\xe4\x23\xa2\xa4\x41\x31\xc2\x76\xd4\x91\x1d\x30\x3d\x0a\x21\x69\x6d\x85\xf7\x04\x6e\xe3\x47\x30\x29\x69\x5c\x23\xbd\x7c\x83\x98\x64\xc5\x58\x3d\xf0\xcf\xb6\x72\xc6\xea\x20\x53\xd3\xe8\x2d\x6b\x6c\xd8\x4f\x99\xc7\x13\xfb\x85\xba\xdb\x2f\x28\x4b\x4b\x0b\x14\xf3\x3c\xbf\x14\x02\xd7\x24\x02\x60\x5c\x03\x49\xa4\x17\x79\xda\x04\x48\xa5\xac\x2d\x4f\xe5\xeb\xce\x33\x82\x6c\xd6\xc9\xd4\x58\x3f\x30\x65\xfe\x7b\xd7\xf5\x87\x31\x44\xb3\xca\x44\x14\xe6\x55\xe8\x76\x63\x8c\xcb\x9e\x20\x32\x55\x91\xd2\x80\xf2\x9e\x33\x69\xfb\x21\x9a\x27\xf2\xd9\x10\x9a\xc9\x55\x0e\x6e\x17\x8b\x39\xb2\xb5\x8a\x57\x13\x37\x37\x09\xbe\x59\xac\xdf\x4e\xd9\x23\x2b\x88\x2a\xc8\xb4\xdd\xb9\x12\x00\x35\x9d\xbe\x9b\xd3\x04\x38\x67\xd5\x48\xe6\xbb\x2a\x4a\x2b\x08\x3a\x56\xac\x96\x57\x1a\x9c\x65\x92\x2c\xd4\x17\xd5\xae\x5c\x21\xb5\x99\x73\xe9\x7f\x8b\xe9\x89\x6e\xa0\xfa\x10\x6d\x77\x4b\x9c\x8a\x0d\x08\x49\x07\x2c\xd2\x68\x67\x57\xca\x6a\x8b\x06\x34\xf6\xcb\x49\x37\xc5\x77\xc3\x61\x46\xb2\x31\x13\xf7\x4d\xef\xbf\x72\x9a\x2c\xee\x1e\x8c\x8f\xf5\xab\x62\x0f\x86\xd6\xa0\xe0\x65\x22\xea\x42\xbf\xef\xb4\xac\xd4\xfb\x96\x00\xcd\x15\xad\xb3\xd5\x3f\x01\xe3\x89\xad\x3f\x25\x14\x07\xdf\xd8\x9e\xa0\x0d\x25\x5d\x98\x1c\x39\x7c\xc8\xcf\xfa\x2f\x6b\x03\xbf\x6d\x20\xf3\x2c\xbc\xf7\x93\x70\x47\x18\xb6\xf8\xe6\x20\x9c\xc8\x34\xf9\x18\xdc\xea\xfe\x84\xe6\x22\x65\x48\x9a\x72\x87\xf5\xf7\x64\x20\x7c\x67\xf4\x49\x3b\x5d\xb1\x13\x99\xce\x9c\x51\x98\x79\xeb\x0d\x15\x01\x77\x1e\x41\x68\x7b\xf9\xeb\xb4\xa2\x99\x6f\xfb\xe3\xcd\x53\x1f\xf4\xb5\x46\xfe\xfb\x63\x6e\x83\xac\x7b\xa8\x4c\xae\x00\x59\x52\x0a\xf5\x41\x54\x8c\x0e\xbc\x79\x70\x6b\x3d\xb3\x18\x59\x0a\xb4\x29\x4a\xe7\x34\xd7\x07\xaf\xaa\xcf\xfc\x39\xc4\x91\xd8\xc7\x94\x7a\x64\xeb\x52\xb0\x6f\x25\xeb\x98\xc7\xa0\xa7\xe6\x76\xbc\x63\xf2\x0e\xd1\x10\x12\xfe\xea\x44\xd3\x5d\x04\x21\xba\x25\xc4\xc3\x21\xf4\x64\x09\x2a\xf8\x70\x70\xf2\x92\x9e\x5b\x1f\x96\xdb\x8a\x0e\x47\x63\x1b\x6e\xe9\x26\x70\xdf\xe1\xeb\x43\x7c\x28\xb5\x1c\xef\x9d\xe9\xb9\x23\x78\x96\x3a\xf5\x7a\x26\xf0\xdf\x13\x57\xfd\x06\x0c\x7a\x73\x22\x25\x7f\x8d\xb3\x96\x0f\x94\xa4\xcf\xc7\x09\xf1\x45\x57\xbf\xaf\x53\x58\x8c\x54\xd5\x9f\x77\xca\xbb\x14\xfd\x89\xa7\xb5\x91\x75\xa3\xf4\x52\x2f\x63\x07\x70\x77\xe2\x88\x95\x8b\xe5\xd7\x50\xb1\x88\x1a\x6e\xde\x3f\x6b\x51\xbd\x3c\x8f\x70\x64\xe3\x45\x71\x06\x48\x10\x3c\x08\xa2\xf6\x30\x21\x0e\x65\x26\xa5\xd4\xc7\x39\x59\x02\xa7\x02\xd5\xab\xa5\xb1\x3b\x90\x9b\xea\x76\x51\xed\x7b\x28\x8f\xe8\x16\xcc\x12\x90\xba\x98\xda\x83\xdc\xb6\x4e\x7f\xc4\x00\x53\x54\x1b\x7e\x35\xc7\xc4\x3c\xc5\x25\x39\x5f\xfe\x8b\xc0\x9d\x37\xb8\x14\xf9\xd1\xe1\x2f\x51\x1e\xde\xa9\x27\xd8\x3c\x96\x01\x64\xf2\x2e\x8a\x7d\x99\x7d\x60\x66\x89\x57\x7e\xac\xcc\x51\xb2\xef\x9c\xc7\x23\xe7\xae\xd7\x46\xce\x60\xa9\xcb\xa9\xe0\x2e\x2b\xf4\xe5\xb4\xc7\xb3\xbb\x52\xd4\x73\x7f\xdb\x58\x0a\xfc\xcf\xf9\x2a\x21\xaf\x66\x58\xc7\x99\xf6\x57\x32\x8a\xf3\x93\xda\xfa\xac\x54\x9c\xe1\xeb\x49\x3a\xda\x04\xc9\x9d\xac\xba\x5a\xbf\x10\xc1\xc7\x87\x58\x76\xbe\x8d\x8c\x0b\xfc\x17\xfa\x47\x8a\x60\xf2\xff\x9f\x9a\xff\x05\x00\x00\xff\xff\x81\x7d\x7f\x28\x8b\x06\x00\x00")

func test_certsMtServerTenantKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsMtServerTenantKey,
		"test_certs/mt/server-tenant.key",
	)
}

func test_certsMtServerTenantKey() (*asset, error) {
	bytes, err := test_certsMtServerTenantKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/mt/server-tenant.key", size: 1675, mode: os.FileMode(0600), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb2, 0xfd, 0x1a, 0x91, 0x38, 0xd1, 0x6c, 0xa5, 0xcc, 0xab, 0x47, 0x20, 0x36, 0x35, 0xf2, 0x86, 0xca, 0x57, 0x37, 0x53, 0x77, 0xd2, 0xaa, 0x7b, 0xe6, 0xc, 0x4f, 0x0, 0x67, 0x74, 0xb3, 0x8f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt": test_certsCaCrt,

	"test_certs/ca.key": test_certsCaKey,

	"test_certs/client.root.crt": test_certsClientRootCrt,

	"test_certs/client.root.key": test_certsClientRootKey,

	"test_certs/client.testuser.crt": test_certsClientTestuserCrt,

	"test_certs/client.testuser.key": test_certsClientTestuserKey,

	"test_certs/node.crt": test_certsNodeCrt,

	"test_certs/node.key": test_certsNodeKey,

	"test_certs/mt/ca-client-tenant.crt": test_certsMtCaClientTenantCrt,

	"test_certs/mt/ca-client-tenant.key": test_certsMtCaClientTenantKey,

	"test_certs/mt/ca-server-tenant.crt": test_certsMtCaServerTenantCrt,

	"test_certs/mt/ca-server-tenant.key": test_certsMtCaServerTenantKey,

	"test_certs/mt/client-tenant.123456789.crt": test_certsMtClientTenant123456789Crt,

	"test_certs/mt/client-tenant.123456789.key": test_certsMtClientTenant123456789Key,

	"test_certs/mt/server-tenant.crt": test_certsMtServerTenantCrt,

	"test_certs/mt/server-tenant.key": test_certsMtServerTenantKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":              {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":              {test_certsCaKey, map[string]*bintree{}},
		"client.root.crt":     {test_certsClientRootCrt, map[string]*bintree{}},
		"client.root.key":     {test_certsClientRootKey, map[string]*bintree{}},
		"client.testuser.crt": {test_certsClientTestuserCrt, map[string]*bintree{}},
		"client.testuser.key": {test_certsClientTestuserKey, map[string]*bintree{}},
		"mt": {nil, map[string]*bintree{
			"ca-client-tenant.crt":        {test_certsMtCaClientTenantCrt, map[string]*bintree{}},
			"ca-client-tenant.key":        {test_certsMtCaClientTenantKey, map[string]*bintree{}},
			"ca-server-tenant.crt":        {test_certsMtCaServerTenantCrt, map[string]*bintree{}},
			"ca-server-tenant.key":        {test_certsMtCaServerTenantKey, map[string]*bintree{}},
			"client-tenant.123456789.crt": {test_certsMtClientTenant123456789Crt, map[string]*bintree{}},
			"client-tenant.123456789.key": {test_certsMtClientTenant123456789Key, map[string]*bintree{}},
			"server-tenant.crt":           {test_certsMtServerTenantCrt, map[string]*bintree{}},
			"server-tenant.key":           {test_certsMtServerTenantKey, map[string]*bintree{}},
		}},
		"node.crt": {test_certsNodeCrt, map[string]*bintree{}},
		"node.key": {test_certsNodeKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
