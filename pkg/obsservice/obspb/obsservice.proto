// Copyright 2023 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0

syntax = "proto3";

package cockroach.obspb;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "obsservice/obspb/opentelemetry-proto/logs/v1/logs.proto";
import "obsservice/obspb/opentelemetry-proto/common/v1/common.proto";
import "obsservice/obspb/opentelemetry-proto/resource/v1/resource.proto";

option go_package = "github.com/cockroachdb/cockroach/pkg/obsservice/obspb";

// A generic event record used within the Observability Service.
// Generally, the data within log_record is eventually transformed
// into an event-specific protobuf message for further processing,
// but this message represents the event in its raw form.
message Event {
  // The resource for the event.
  // If this field is not set then resource info is unknown.
  // Contains information referring to the source of the event.
  // For example, cluster ID, node ID, etc.
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // The instrumentation scope information for the event. Contains
  // event-specific information. For example, event type and version.
  opentelemetry.proto.common.v1.InstrumentationScope scope = 2;

  // The LogRecord containing the specific event information.
  opentelemetry.proto.logs.v1.LogRecord log_record = 3;
}

message EventInfo {
  google.protobuf.Timestamp timestamp = 1 [(gogoproto.stdtime) = true];
  string event_id = 2 [(gogoproto.customname) = "EventID"];
  string org_id = 3 [(gogoproto.customname) = "OrgID"];
  string cluster_id = 4 [(gogoproto.customname) = "ClusterID"];
  string tenant_id = 5 [(gogoproto.customname) = "TenantID"];
}

message StatementInsightsStatistics {
  enum Status {
    Completed = 0;
    Failed = 1;
  }

  enum Problem {
    // This statement execution was not itself problematic, but it happened in
    // the same transaction as another problematic statement.
    None = 0;

    // This statement execution was slow, either above a fixed latency threshold
    // or detected as an anomaly.
    SlowExecution = 1;

    // This statement execution failed completely, due to contention, resource
    // saturation, or syntax errors.
    FailedExecution = 2;
  }

  enum Cause {
    // We have not identified specific reasons why this statement was slow.
    // We will not explicitly use this zero value; it is here defensively.
    Unset = 0;

    // This statement was slow because we picked the wrong plan, possibly due to
    // outdated statistics, the statement using different literals or search
    // conditions, or a change in the database schema.
    PlanRegression = 1;

    // This statement was slow because a good plan was not available, whether
    // due to outdated statistics or missing indexes.
    SuboptimalPlan = 2;

    // This statement was slow because of contention.
    HighContention = 3;

    // This statement was slow because of being retried multiple times, again due
    // to contention. The "high" threshold may be configured by the
    // `sql.insights.high_retry_count.threshold` cluster setting.
    HighRetryCount = 4;
  }

  EventInfo event_info = 1;
  bytes id = 2 [(gogoproto.customname) = "ID"];
  uint64 fingerprint_id = 3 [(gogoproto.customname) = "FingerprintID"];
  bytes transaction_id = 4 [(gogoproto.customname) = "TransactionID"];
  uint64 txn_fingerprint_id = 5 [(gogoproto.customname) = "TxnFingerprintID"];
  bytes session_id = 6 [(gogoproto.customname) = "SessionID"];
  string query = 7;
  Status status = 8;
  google.protobuf.Timestamp start_time = 9 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp end_time = 10 [(gogoproto.stdtime) = true];
  bool full_scan = 11;
  bool implicit_txn = 12;
  string user = 13;
  string user_priority = 14;
  string application_name = 15;
  string database = 16;
  string plan_gist = 17;
  int64 rows_read = 18;
  int64 rows_written = 19;
  int64 retries = 20;
  string auto_retry_reason = 21;
  // Nodes is the ordered list of nodes ids on which the statement was executed.
  repeated int64 nodes = 22;
  google.protobuf.Duration contention = 23 [(gogoproto.stdduration) = true];
  repeated string index_recommendations = 24;
  Problem problem = 25;
  repeated Cause causes = 26;
  int64 cpu_sql_nanos = 27 [(gogoproto.customname) = "CPUSQLNanos"];
  string error_code = 28;
  string last_error_redactable = 29;
  // IdleLatSeconds is the time spent in seconds in an open transaction waiting
  // for the client to send the statement.
  double idle_lat_seconds = 30;
  // ParseLat is the time in seconds to transform the SQL string into an AST.
  double parse_lat_seconds = 31;
  // PlanLatSeconds is the time spent in seconds to transform the AST into a logical query plan.
  double plan_lat_seconds = 32;
  // RunLatSeconds is the time in seconds to run the query and fetch/compute the result rows.
  double run_lat_seconds = 33;
  // ServiceLatSeconds is the time in seconds to service the query, from start of parse to end of execute.
  double service_lat_seconds = 34;
  repeated ContentionEvent contention_events = 35;
}

message ContentionEvent {
  // Key is the key that this and the other transaction conflicted on.
  bytes key = 1;
  string pretty_key = 2;
  bytes id = 3 [(gogoproto.customname) = "BlockingTxnID"];
  uint64 blocking_txn_fingerprint_id = 4 [(gogoproto.customname) = "BlockingTxnFingerprintID"];
  // Duration spent contending against the other transaction.
  google.protobuf.Duration duration = 5 [(gogoproto.stdduration) = true];
  bytes waiting_txn_id = 6 [(gogoproto.customname) = "WaitingTxnID"];
  uint64 waiting_txn_fingerprint_id = 7 [(gogoproto.customname) = "WaitingTxnFingerprintID"];
  google.protobuf.Timestamp collection_ts = 8 [(gogoproto.stdtime) = true];
  uint64 waiting_stmt_fingerprint_id = 9 [(gogoproto.customname) = "WaitingStmtFingerprintID"];
  bytes waiting_stmt_id = 10 [(gogoproto.customname) = "WaitingStmtID"];
  string database_name = 11;
  string schema_name = 12;
  string index_name = 13;
  string table_name = 14;
}
