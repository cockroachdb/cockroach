// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testutils/grpcutils/testservice.proto

package grpcutils

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("testutils/grpcutils/testservice.proto", fileDescriptor_4518dc1c46e20be7)
}

var fileDescriptor_4518dc1c46e20be7 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x49, 0x2d, 0x2e,
	0x29, 0x2d, 0xc9, 0xcc, 0x29, 0xd6, 0x4f, 0x2f, 0x2a, 0x48, 0x86, 0xb0, 0x40, 0x62, 0xc5, 0xa9,
	0x45, 0x65, 0x99, 0xc9, 0xa9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xb2, 0xc9, 0xf9, 0xc9,
	0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19, 0x7a, 0x70, 0x0d, 0x7a, 0x70, 0x0d, 0x52, 0x92, 0xe9, 0xf9,
	0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x60, 0xc5, 0x49, 0xa5, 0x69, 0xfa, 0x89, 0x79, 0x95, 0x10, 0x9d,
	0x46, 0x6d, 0x4c, 0x5c, 0x1c, 0xee, 0x41, 0x01, 0xce, 0x21, 0xa9, 0xc5, 0x25, 0x42, 0x56, 0x5c,
	0x5c, 0xa1, 0x79, 0x89, 0x45, 0x95, 0x60, 0x42, 0x48, 0x44, 0x0f, 0xa2, 0x4d, 0x0f, 0xa6, 0x4d,
	0xcf, 0x31, 0xaf, 0x52, 0x0a, 0xab, 0xa8, 0x12, 0x83, 0x90, 0x2d, 0x17, 0x37, 0x58, 0x5b, 0x70,
	0x49, 0x51, 0x6a, 0x62, 0x2e, 0x69, 0x9a, 0x0d, 0x18, 0x41, 0xda, 0x21, 0x3a, 0xc9, 0xb0, 0x5b,
	0x83, 0x51, 0xc8, 0x81, 0x8b, 0x07, 0xa2, 0x9d, 0x1c, 0xeb, 0x35, 0x18, 0x0d, 0x18, 0x9d, 0xb4,
	0x4f, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x1b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f,
	0xe5, 0x18, 0xa2, 0x38, 0xe1, 0x01, 0x9a, 0xc4, 0x06, 0x36, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x29, 0xc3, 0x4b, 0x1d, 0x9f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GRPCTestClient is the client API for GRPCTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GRPCTestClient interface {
	UnaryUnary(ctx context.Context, in *types.Any, opts ...grpc.CallOption) (*types.Any, error)
	UnaryStream(ctx context.Context, in *types.Any, opts ...grpc.CallOption) (GRPCTest_UnaryStreamClient, error)
	StreamUnary(ctx context.Context, opts ...grpc.CallOption) (GRPCTest_StreamUnaryClient, error)
	StreamStream(ctx context.Context, opts ...grpc.CallOption) (GRPCTest_StreamStreamClient, error)
}

type gRPCTestClient struct {
	cc *grpc.ClientConn
}

func NewGRPCTestClient(cc *grpc.ClientConn) GRPCTestClient {
	return &gRPCTestClient{cc}
}

func (c *gRPCTestClient) UnaryUnary(ctx context.Context, in *types.Any, opts ...grpc.CallOption) (*types.Any, error) {
	out := new(types.Any)
	err := c.cc.Invoke(ctx, "/cockroach.testutils.grpcutils.GRPCTest/UnaryUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCTestClient) UnaryStream(ctx context.Context, in *types.Any, opts ...grpc.CallOption) (GRPCTest_UnaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCTest_serviceDesc.Streams[0], "/cockroach.testutils.grpcutils.GRPCTest/UnaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestUnaryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCTest_UnaryStreamClient interface {
	Recv() (*types.Any, error)
	grpc.ClientStream
}

type gRPCTestUnaryStreamClient struct {
	grpc.ClientStream
}

func (x *gRPCTestUnaryStreamClient) Recv() (*types.Any, error) {
	m := new(types.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCTestClient) StreamUnary(ctx context.Context, opts ...grpc.CallOption) (GRPCTest_StreamUnaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCTest_serviceDesc.Streams[1], "/cockroach.testutils.grpcutils.GRPCTest/StreamUnary", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestStreamUnaryClient{stream}
	return x, nil
}

type GRPCTest_StreamUnaryClient interface {
	Send(*types.Any) error
	CloseAndRecv() (*types.Any, error)
	grpc.ClientStream
}

type gRPCTestStreamUnaryClient struct {
	grpc.ClientStream
}

func (x *gRPCTestStreamUnaryClient) Send(m *types.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCTestStreamUnaryClient) CloseAndRecv() (*types.Any, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCTestClient) StreamStream(ctx context.Context, opts ...grpc.CallOption) (GRPCTest_StreamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GRPCTest_serviceDesc.Streams[2], "/cockroach.testutils.grpcutils.GRPCTest/StreamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestStreamStreamClient{stream}
	return x, nil
}

type GRPCTest_StreamStreamClient interface {
	Send(*types.Any) error
	Recv() (*types.Any, error)
	grpc.ClientStream
}

type gRPCTestStreamStreamClient struct {
	grpc.ClientStream
}

func (x *gRPCTestStreamStreamClient) Send(m *types.Any) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCTestStreamStreamClient) Recv() (*types.Any, error) {
	m := new(types.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCTestServer is the server API for GRPCTest service.
type GRPCTestServer interface {
	UnaryUnary(context.Context, *types.Any) (*types.Any, error)
	UnaryStream(*types.Any, GRPCTest_UnaryStreamServer) error
	StreamUnary(GRPCTest_StreamUnaryServer) error
	StreamStream(GRPCTest_StreamStreamServer) error
}

// UnimplementedGRPCTestServer can be embedded to have forward compatible implementations.
type UnimplementedGRPCTestServer struct {
}

func (*UnimplementedGRPCTestServer) UnaryUnary(ctx context.Context, req *types.Any) (*types.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryUnary not implemented")
}
func (*UnimplementedGRPCTestServer) UnaryStream(req *types.Any, srv GRPCTest_UnaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UnaryStream not implemented")
}
func (*UnimplementedGRPCTestServer) StreamUnary(srv GRPCTest_StreamUnaryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUnary not implemented")
}
func (*UnimplementedGRPCTestServer) StreamStream(srv GRPCTest_StreamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStream not implemented")
}

func RegisterGRPCTestServer(s *grpc.Server, srv GRPCTestServer) {
	s.RegisterService(&_GRPCTest_serviceDesc, srv)
}

func _GRPCTest_UnaryUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Any)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCTestServer).UnaryUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.testutils.grpcutils.GRPCTest/UnaryUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCTestServer).UnaryUnary(ctx, req.(*types.Any))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTest_UnaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Any)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCTestServer).UnaryStream(m, &gRPCTestUnaryStreamServer{stream})
}

type GRPCTest_UnaryStreamServer interface {
	Send(*types.Any) error
	grpc.ServerStream
}

type gRPCTestUnaryStreamServer struct {
	grpc.ServerStream
}

func (x *gRPCTestUnaryStreamServer) Send(m *types.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCTest_StreamUnary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCTestServer).StreamUnary(&gRPCTestStreamUnaryServer{stream})
}

type GRPCTest_StreamUnaryServer interface {
	SendAndClose(*types.Any) error
	Recv() (*types.Any, error)
	grpc.ServerStream
}

type gRPCTestStreamUnaryServer struct {
	grpc.ServerStream
}

func (x *gRPCTestStreamUnaryServer) SendAndClose(m *types.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCTestStreamUnaryServer) Recv() (*types.Any, error) {
	m := new(types.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCTest_StreamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCTestServer).StreamStream(&gRPCTestStreamStreamServer{stream})
}

type GRPCTest_StreamStreamServer interface {
	Send(*types.Any) error
	Recv() (*types.Any, error)
	grpc.ServerStream
}

type gRPCTestStreamStreamServer struct {
	grpc.ServerStream
}

func (x *gRPCTestStreamStreamServer) Send(m *types.Any) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCTestStreamStreamServer) Recv() (*types.Any, error) {
	m := new(types.Any)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRPCTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.testutils.grpcutils.GRPCTest",
	HandlerType: (*GRPCTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryUnary",
			Handler:    _GRPCTest_UnaryUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UnaryStream",
			Handler:       _GRPCTest_UnaryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamUnary",
			Handler:       _GRPCTest_StreamUnary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamStream",
			Handler:       _GRPCTest_StreamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testutils/grpcutils/testservice.proto",
}
