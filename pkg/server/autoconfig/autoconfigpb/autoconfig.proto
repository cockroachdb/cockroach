// Copyright 2023 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.server.autoconfig.autoconfigpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/server/autoconfig/autoconfigpb";

import "gogoproto/gogo.proto";
import "roachpb/metadata.proto";

// TaskBundle contains tasks defined by multiple environments.
// See the package-level documentation for package autoconfig
// for more details.
message TaskBundle {
  option (gogoproto.equal) = true;

  // EnvTasks defines the tasks provided by one environment.
  // The tasks of one environment execute sequentially.
  message EnvTasks {
    option (gogoproto.equal) = true;
    string env_id = 1 [(gogoproto.customname) = "EnvID", (gogoproto.casttype) = "EnvironmentID"];
    repeated Task tasks = 2 [(gogoproto.nullable) = false];
    // NEXT ID: 3;
  }

  // Bundles defines tasks for different environments. There should
  // be only one entry in the array per environment ID.
  // Tasks from different environments can execute concurrently.
  repeated EnvTasks bundles = 1 [(gogoproto.nullable) = false];

  // NEXT ID: 2;
}

// Task defines one auto config task to run by a tenant.
message Task {
  option (gogoproto.equal) = true;

  // TaskID is the key for this task within one environment.
  // Tasks with a given ID are executed at least once, with
  // extra efforts to make it exactly-once whenever possible.
  // Tasks within the same environment are executed sequentially
  // in the order of their task ID.
  // See the package-level documentation for package autoconfig
  // for more details.
  uint64 task_id = 1 [(gogoproto.customname) = "TaskID", (gogoproto.casttype) = "TaskID"];

  // Description of what the auto configuration task does.
  // This is reported unredactable in logs and telemetry and thus must be void of PII.
  string description = 2;

  // MinVersion is the minimum active cluster version that
  // must be encountered before this task can run.
  roachpb.Version min_version = 3 [(gogoproto.nullable) = false];

  // Payload describes what the task should run.
  oneof payload {
      SimpleSQL simpleSQL = 4;
  }

  // NEXT ID: 5;
}

// SimpleSQL describes a combination of some optional
// non-transactional SQL statements (which should be idempotent), and
// some optional transactional SQL statements.
//
// The SQL is executed using the node user identity. The task fails if the
// SQL aborts with an error and is not auto-retried.
message SimpleSQL {
  option (gogoproto.equal) = true;

  // SQL identity to run the statements as.
  // If left empty, execution will use the 'root' identity.
  string username_proto = 1 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto"];


  // SQL statements to execute as standalone transactions. These are
  // executed before the transactional statements below. If any of
  // these fails or the transactional statements below need to be
  // retried, all the non-transactional statements will be executed
  // again. They should be defined to only contain idempotent SQL,
  // for example SHOW CLUSTER SETTING or CREATE TABLE IF NOT EXISTS.
  repeated string non_transactional_statements = 2;

  // SQL statements to execute transactionally with the placement task
  // completion marker. This will be executed at most once.
  repeated string transactional_statements = 3;

  // NEXT ID: 4;
}
