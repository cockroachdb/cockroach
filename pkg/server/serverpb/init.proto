// Copyright 2017 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.server.serverpb;
option go_package = "serverpb";

import "roachpb/metadata.proto";
import "gogoproto/gogo.proto";

message BootstrapRequest {
}

message BootstrapResponse {
}

message ClusterInfoRequest {
}

message ClusterInfoResponse {
  bytes cluster_id = 1 [(gogoproto.customname) = "ClusterID", (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID", (gogoproto.nullable) = false];
  roachpb.Version active_version = 2 [(gogoproto.nullable) = false];
;
}

message AllocateNodeIDsRequest {
  // num_stores specifies how many store ids to allocate. If 0, no store ids
  // will be allocated.
  int32 num_stores = 1;
}

message AllocateNodeIDsResponse {
  // node_id is the newly allocated node id.
  uint32 node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // first_store_id is the first (smallest) of the newly allocated store ids.
  // [fistst_store_id..first_store_id+request.num_stores) are all available to
  // be used.
  int32 first_store_id = 2 [(gogoproto.customname) = "FirstStoreID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.StoreID"];
}

service Init {
  // Bootstrap an uninitialized cluster.
  rpc Bootstrap(BootstrapRequest) returns (BootstrapResponse) {}
  // ClusterInfo returns current cluster information.
  rpc ClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse) {}
  // AllocateNodeIDs can be used to allocate a node id and multiple store ids.
  // This can be used by new node joining the cluster to ask another node that's
  // already part of the cluster to do some work on its behalf.
  rpc AllocateNodeIDs(AllocateNodeIDsRequest) returns (AllocateNodeIDsResponse) {}
}
