// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/migration.proto

package serverpb

import (
	context "context"
	fmt "fmt"
	clusterversion "github.com/cockroachdb/cockroach/pkg/clusterversion"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidateTargetClusterVersion is used to verify that the target node is
// running a binary that's able to support the specified cluster version.
type ValidateTargetClusterVersionRequest struct {
	ClusterVersion *clusterversion.ClusterVersion `protobuf:"bytes,1,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (m *ValidateTargetClusterVersionRequest) Reset()         { *m = ValidateTargetClusterVersionRequest{} }
func (m *ValidateTargetClusterVersionRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateTargetClusterVersionRequest) ProtoMessage()    {}
func (*ValidateTargetClusterVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{0}
}
func (m *ValidateTargetClusterVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTargetClusterVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidateTargetClusterVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTargetClusterVersionRequest.Merge(m, src)
}
func (m *ValidateTargetClusterVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTargetClusterVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTargetClusterVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTargetClusterVersionRequest proto.InternalMessageInfo

// ValidateTargetClusterVersionResponse is the response to a
// ValidateTargetClusterVersionRequest.
type ValidateTargetClusterVersionResponse struct {
}

func (m *ValidateTargetClusterVersionResponse) Reset()         { *m = ValidateTargetClusterVersionResponse{} }
func (m *ValidateTargetClusterVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateTargetClusterVersionResponse) ProtoMessage()    {}
func (*ValidateTargetClusterVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{1}
}
func (m *ValidateTargetClusterVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateTargetClusterVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidateTargetClusterVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateTargetClusterVersionResponse.Merge(m, src)
}
func (m *ValidateTargetClusterVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateTargetClusterVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateTargetClusterVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateTargetClusterVersionResponse proto.InternalMessageInfo

// BumpClusterVersionRequest is used to inform the target node of a cluster
// version bump.
type BumpClusterVersionRequest struct {
	ClusterVersion *clusterversion.ClusterVersion `protobuf:"bytes,1,opt,name=cluster_version,json=clusterVersion,proto3" json:"cluster_version,omitempty"`
}

func (m *BumpClusterVersionRequest) Reset()         { *m = BumpClusterVersionRequest{} }
func (m *BumpClusterVersionRequest) String() string { return proto.CompactTextString(m) }
func (*BumpClusterVersionRequest) ProtoMessage()    {}
func (*BumpClusterVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{2}
}
func (m *BumpClusterVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BumpClusterVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BumpClusterVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpClusterVersionRequest.Merge(m, src)
}
func (m *BumpClusterVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BumpClusterVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpClusterVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BumpClusterVersionRequest proto.InternalMessageInfo

// BumpClusterVersionResponse is the response to an BumpClusterVersionRequest.
type BumpClusterVersionResponse struct {
}

func (m *BumpClusterVersionResponse) Reset()         { *m = BumpClusterVersionResponse{} }
func (m *BumpClusterVersionResponse) String() string { return proto.CompactTextString(m) }
func (*BumpClusterVersionResponse) ProtoMessage()    {}
func (*BumpClusterVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{3}
}
func (m *BumpClusterVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BumpClusterVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BumpClusterVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BumpClusterVersionResponse.Merge(m, src)
}
func (m *BumpClusterVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BumpClusterVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BumpClusterVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BumpClusterVersionResponse proto.InternalMessageInfo

// PurgeOutdatedReplicasRequest is used to instruct the target node to
// purge all replicas with a version less than the one provided.
type PurgeOutdatedReplicasRequest struct {
	Version *roachpb.Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PurgeOutdatedReplicasRequest) Reset()         { *m = PurgeOutdatedReplicasRequest{} }
func (m *PurgeOutdatedReplicasRequest) String() string { return proto.CompactTextString(m) }
func (*PurgeOutdatedReplicasRequest) ProtoMessage()    {}
func (*PurgeOutdatedReplicasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{4}
}
func (m *PurgeOutdatedReplicasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurgeOutdatedReplicasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PurgeOutdatedReplicasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeOutdatedReplicasRequest.Merge(m, src)
}
func (m *PurgeOutdatedReplicasRequest) XXX_Size() int {
	return m.Size()
}
func (m *PurgeOutdatedReplicasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeOutdatedReplicasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeOutdatedReplicasRequest proto.InternalMessageInfo

// PurgeOutdatedReplicasResponse is the response to a
// PurgeOutdatedReplicasRequest.
type PurgeOutdatedReplicasResponse struct {
}

func (m *PurgeOutdatedReplicasResponse) Reset()         { *m = PurgeOutdatedReplicasResponse{} }
func (m *PurgeOutdatedReplicasResponse) String() string { return proto.CompactTextString(m) }
func (*PurgeOutdatedReplicasResponse) ProtoMessage()    {}
func (*PurgeOutdatedReplicasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{5}
}
func (m *PurgeOutdatedReplicasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurgeOutdatedReplicasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PurgeOutdatedReplicasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurgeOutdatedReplicasResponse.Merge(m, src)
}
func (m *PurgeOutdatedReplicasResponse) XXX_Size() int {
	return m.Size()
}
func (m *PurgeOutdatedReplicasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PurgeOutdatedReplicasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PurgeOutdatedReplicasResponse proto.InternalMessageInfo

// SyncAllEnginesRequest is used to instruct the target node to sync all its
// engines.
type SyncAllEnginesRequest struct {
}

func (m *SyncAllEnginesRequest) Reset()         { *m = SyncAllEnginesRequest{} }
func (m *SyncAllEnginesRequest) String() string { return proto.CompactTextString(m) }
func (*SyncAllEnginesRequest) ProtoMessage()    {}
func (*SyncAllEnginesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{6}
}
func (m *SyncAllEnginesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAllEnginesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SyncAllEnginesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAllEnginesRequest.Merge(m, src)
}
func (m *SyncAllEnginesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncAllEnginesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAllEnginesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAllEnginesRequest proto.InternalMessageInfo

// SyncAllEnginesResponse is the response to a SyncAllEnginesRequest.
type SyncAllEnginesResponse struct {
}

func (m *SyncAllEnginesResponse) Reset()         { *m = SyncAllEnginesResponse{} }
func (m *SyncAllEnginesResponse) String() string { return proto.CompactTextString(m) }
func (*SyncAllEnginesResponse) ProtoMessage()    {}
func (*SyncAllEnginesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_031978814d391068, []int{7}
}
func (m *SyncAllEnginesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncAllEnginesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SyncAllEnginesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncAllEnginesResponse.Merge(m, src)
}
func (m *SyncAllEnginesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncAllEnginesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncAllEnginesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncAllEnginesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValidateTargetClusterVersionRequest)(nil), "cockroach.server.serverpb.ValidateTargetClusterVersionRequest")
	proto.RegisterType((*ValidateTargetClusterVersionResponse)(nil), "cockroach.server.serverpb.ValidateTargetClusterVersionResponse")
	proto.RegisterType((*BumpClusterVersionRequest)(nil), "cockroach.server.serverpb.BumpClusterVersionRequest")
	proto.RegisterType((*BumpClusterVersionResponse)(nil), "cockroach.server.serverpb.BumpClusterVersionResponse")
	proto.RegisterType((*PurgeOutdatedReplicasRequest)(nil), "cockroach.server.serverpb.PurgeOutdatedReplicasRequest")
	proto.RegisterType((*PurgeOutdatedReplicasResponse)(nil), "cockroach.server.serverpb.PurgeOutdatedReplicasResponse")
	proto.RegisterType((*SyncAllEnginesRequest)(nil), "cockroach.server.serverpb.SyncAllEnginesRequest")
	proto.RegisterType((*SyncAllEnginesResponse)(nil), "cockroach.server.serverpb.SyncAllEnginesResponse")
}

func init() { proto.RegisterFile("server/serverpb/migration.proto", fileDescriptor_031978814d391068) }

var fileDescriptor_031978814d391068 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x87, 0x50, 0x05, 0x49, 0xfa, 0xb9, 0x99, 0xe9, 0x45, 0x89, 0x25, 0x99, 0xf9,
	0x79, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x92, 0xc9, 0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89,
	0xc9, 0x19, 0x7a, 0x10, 0x35, 0x7a, 0x30, 0xa5, 0x52, 0x2a, 0xc9, 0x39, 0xa5, 0xc5, 0x25, 0x60,
	0x5e, 0x71, 0x66, 0x7e, 0x9e, 0x3e, 0x94, 0x1b, 0x0f, 0xe5, 0x43, 0x0c, 0x90, 0x12, 0x03, 0x6b,
	0x06, 0x99, 0x9c, 0x5a, 0x92, 0x98, 0x92, 0x58, 0x92, 0x08, 0x11, 0x57, 0xaa, 0xe0, 0x52, 0x0e,
	0x4b, 0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0x49, 0x0d, 0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x71, 0x86, 0x68,
	0x0f, 0x83, 0xe8, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x0a, 0xe4, 0xe2, 0x47, 0x33,
	0x57, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x43, 0x0f, 0xe1, 0x32, 0x54, 0x87, 0xe8, 0xa1,
	0x99, 0xc4, 0x97, 0x8c, 0xc2, 0x57, 0x52, 0xe3, 0x52, 0xc1, 0x6f, 0x73, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0xaa, 0x52, 0x1e, 0x97, 0xa4, 0x53, 0x69, 0x6e, 0x01, 0xdd, 0xdc, 0x25, 0xc3, 0x25, 0x85,
	0xcd, 0x3e, 0xa8, 0x6b, 0x42, 0xb8, 0x64, 0x02, 0x4a, 0x8b, 0xd2, 0x53, 0xfd, 0x4b, 0x4b, 0x40,
	0x2e, 0x4f, 0x09, 0x4a, 0x2d, 0xc8, 0xc9, 0x4c, 0x4e, 0x2c, 0x86, 0x39, 0xc8, 0x84, 0x8b, 0x1d,
	0xd5, 0x21, 0x52, 0x48, 0x0e, 0x81, 0xc6, 0x81, 0x1e, 0xcc, 0x50, 0x98, 0x52, 0x25, 0x79, 0x2e,
	0x59, 0x1c, 0xa6, 0x42, 0xad, 0x15, 0xe7, 0x12, 0x0d, 0xae, 0xcc, 0x4b, 0x76, 0xcc, 0xc9, 0x71,
	0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0x85, 0xd9, 0xa7, 0x24, 0xc1, 0x25, 0x86, 0x2e, 0x01, 0xd1, 0x62,
	0xb4, 0x97, 0x85, 0x8b, 0xd3, 0x17, 0x96, 0x8c, 0x84, 0x16, 0x32, 0x72, 0xc9, 0xe0, 0x0b, 0x6e,
	0x21, 0x3b, 0x3d, 0x9c, 0x49, 0x4c, 0x8f, 0x88, 0x14, 0x22, 0x65, 0x4f, 0xb6, 0x7e, 0xa8, 0x17,
	0x19, 0x84, 0x9a, 0x19, 0xb9, 0x84, 0x30, 0x83, 0x5e, 0xc8, 0x04, 0x8f, 0xc9, 0x38, 0x53, 0x86,
	0x94, 0x29, 0x89, 0xba, 0xe0, 0xae, 0x28, 0xe7, 0xe2, 0x43, 0x0d, 0x51, 0x21, 0x03, 0x3c, 0x46,
	0x61, 0x8d, 0x15, 0x29, 0x43, 0x12, 0x74, 0xc0, 0x2d, 0xee, 0x61, 0xe4, 0x12, 0xc5, 0x9a, 0x0a,
	0x84, 0xcc, 0xf1, 0x18, 0x87, 0x2f, 0x35, 0x4a, 0x59, 0x90, 0xae, 0x11, 0xe6, 0x1c, 0x27, 0xad,
	0x13, 0x0f, 0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc6, 0x23, 0x39,
	0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63,
	0x39, 0x86, 0x28, 0x0e, 0x98, 0x59, 0x49, 0x6c, 0xe0, 0xc2, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x08, 0x96, 0x7d, 0xc8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MigrationClient is the client API for Migration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MigrationClient interface {
	// ValidateTargetClusterVersion is used to verify that the target node is
	// running a binary that's able to support the specified cluster version.
	// Specifically:
	//
	//   node's minimum supported version <= version <= node's binary version
	ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest, opts ...grpc.CallOption) (*ValidateTargetClusterVersionResponse, error)
	// BumpClusterVersion is used to inform a given node of a cluster version
	// bump. The node is responsible for durably persisting the message and
	// enabling the corresponding version gates.
	//
	// This RPC is typically used together with ValidateTargetClusterVersion,
	// which checks to see that all nodes in the cluster are running binaries
	// that would be able to support the intended version bump.
	BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest, opts ...grpc.CallOption) (*BumpClusterVersionResponse, error)
	// SyncAllEngines is used to instruct the target node to sync all its
	// engines.
	SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest, opts ...grpc.CallOption) (*SyncAllEnginesResponse, error)
	// PurgeOutdatedReplicas is used to instruct the target node to purge all
	// replicas with a version less than the one provided.
	PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest, opts ...grpc.CallOption) (*PurgeOutdatedReplicasResponse, error)
}

type migrationClient struct {
	cc *grpc.ClientConn
}

func NewMigrationClient(cc *grpc.ClientConn) MigrationClient {
	return &migrationClient{cc}
}

func (c *migrationClient) ValidateTargetClusterVersion(ctx context.Context, in *ValidateTargetClusterVersionRequest, opts ...grpc.CallOption) (*ValidateTargetClusterVersionResponse, error) {
	out := new(ValidateTargetClusterVersionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/ValidateTargetClusterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) BumpClusterVersion(ctx context.Context, in *BumpClusterVersionRequest, opts ...grpc.CallOption) (*BumpClusterVersionResponse, error) {
	out := new(BumpClusterVersionResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/BumpClusterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) SyncAllEngines(ctx context.Context, in *SyncAllEnginesRequest, opts ...grpc.CallOption) (*SyncAllEnginesResponse, error) {
	out := new(SyncAllEnginesResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/SyncAllEngines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationClient) PurgeOutdatedReplicas(ctx context.Context, in *PurgeOutdatedReplicasRequest, opts ...grpc.CallOption) (*PurgeOutdatedReplicasResponse, error) {
	out := new(PurgeOutdatedReplicasResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Migration/PurgeOutdatedReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServer is the server API for Migration service.
type MigrationServer interface {
	// ValidateTargetClusterVersion is used to verify that the target node is
	// running a binary that's able to support the specified cluster version.
	// Specifically:
	//
	//   node's minimum supported version <= version <= node's binary version
	ValidateTargetClusterVersion(context.Context, *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error)
	// BumpClusterVersion is used to inform a given node of a cluster version
	// bump. The node is responsible for durably persisting the message and
	// enabling the corresponding version gates.
	//
	// This RPC is typically used together with ValidateTargetClusterVersion,
	// which checks to see that all nodes in the cluster are running binaries
	// that would be able to support the intended version bump.
	BumpClusterVersion(context.Context, *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error)
	// SyncAllEngines is used to instruct the target node to sync all its
	// engines.
	SyncAllEngines(context.Context, *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error)
	// PurgeOutdatedReplicas is used to instruct the target node to purge all
	// replicas with a version less than the one provided.
	PurgeOutdatedReplicas(context.Context, *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error)
}

// UnimplementedMigrationServer can be embedded to have forward compatible implementations.
type UnimplementedMigrationServer struct {
}

func (*UnimplementedMigrationServer) ValidateTargetClusterVersion(ctx context.Context, req *ValidateTargetClusterVersionRequest) (*ValidateTargetClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTargetClusterVersion not implemented")
}
func (*UnimplementedMigrationServer) BumpClusterVersion(ctx context.Context, req *BumpClusterVersionRequest) (*BumpClusterVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BumpClusterVersion not implemented")
}
func (*UnimplementedMigrationServer) SyncAllEngines(ctx context.Context, req *SyncAllEnginesRequest) (*SyncAllEnginesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAllEngines not implemented")
}
func (*UnimplementedMigrationServer) PurgeOutdatedReplicas(ctx context.Context, req *PurgeOutdatedReplicasRequest) (*PurgeOutdatedReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeOutdatedReplicas not implemented")
}

func RegisterMigrationServer(s *grpc.Server, srv MigrationServer) {
	s.RegisterService(&_Migration_serviceDesc, srv)
}

func _Migration_ValidateTargetClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTargetClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).ValidateTargetClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Migration/ValidateTargetClusterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).ValidateTargetClusterVersion(ctx, req.(*ValidateTargetClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_BumpClusterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BumpClusterVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).BumpClusterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Migration/BumpClusterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).BumpClusterVersion(ctx, req.(*BumpClusterVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_SyncAllEngines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAllEnginesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).SyncAllEngines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Migration/SyncAllEngines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).SyncAllEngines(ctx, req.(*SyncAllEnginesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Migration_PurgeOutdatedReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeOutdatedReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServer).PurgeOutdatedReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Migration/PurgeOutdatedReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServer).PurgeOutdatedReplicas(ctx, req.(*PurgeOutdatedReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Migration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.Migration",
	HandlerType: (*MigrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateTargetClusterVersion",
			Handler:    _Migration_ValidateTargetClusterVersion_Handler,
		},
		{
			MethodName: "BumpClusterVersion",
			Handler:    _Migration_BumpClusterVersion_Handler,
		},
		{
			MethodName: "SyncAllEngines",
			Handler:    _Migration_SyncAllEngines_Handler,
		},
		{
			MethodName: "PurgeOutdatedReplicas",
			Handler:    _Migration_PurgeOutdatedReplicas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/migration.proto",
}

func (m *ValidateTargetClusterVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTargetClusterVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTargetClusterVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterVersion != nil {
		{
			size, err := m.ClusterVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMigration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidateTargetClusterVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateTargetClusterVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateTargetClusterVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BumpClusterVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BumpClusterVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BumpClusterVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClusterVersion != nil {
		{
			size, err := m.ClusterVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMigration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BumpClusterVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BumpClusterVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BumpClusterVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PurgeOutdatedReplicasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurgeOutdatedReplicasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurgeOutdatedReplicasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMigration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PurgeOutdatedReplicasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurgeOutdatedReplicasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurgeOutdatedReplicasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SyncAllEnginesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAllEnginesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAllEnginesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SyncAllEnginesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncAllEnginesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncAllEnginesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMigration(dAtA []byte, offset int, v uint64) int {
	offset -= sovMigration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidateTargetClusterVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterVersion != nil {
		l = m.ClusterVersion.Size()
		n += 1 + l + sovMigration(uint64(l))
	}
	return n
}

func (m *ValidateTargetClusterVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BumpClusterVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterVersion != nil {
		l = m.ClusterVersion.Size()
		n += 1 + l + sovMigration(uint64(l))
	}
	return n
}

func (m *BumpClusterVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PurgeOutdatedReplicasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovMigration(uint64(l))
	}
	return n
}

func (m *PurgeOutdatedReplicasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SyncAllEnginesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SyncAllEnginesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMigration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMigration(x uint64) (n int) {
	return sovMigration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidateTargetClusterVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTargetClusterVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTargetClusterVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMigration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMigration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterVersion == nil {
				m.ClusterVersion = &clusterversion.ClusterVersion{}
			}
			if err := m.ClusterVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateTargetClusterVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateTargetClusterVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateTargetClusterVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BumpClusterVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BumpClusterVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BumpClusterVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMigration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMigration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterVersion == nil {
				m.ClusterVersion = &clusterversion.ClusterVersion{}
			}
			if err := m.ClusterVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BumpClusterVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BumpClusterVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BumpClusterVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurgeOutdatedReplicasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurgeOutdatedReplicasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurgeOutdatedReplicasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMigration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMigration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &roachpb.Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurgeOutdatedReplicasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurgeOutdatedReplicasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurgeOutdatedReplicasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAllEnginesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAllEnginesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAllEnginesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncAllEnginesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncAllEnginesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncAllEnginesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMigration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMigration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMigration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMigration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMigration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMigration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMigration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMigration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMigration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMigration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMigration = fmt.Errorf("proto: unexpected end of group")
)
