// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/authentication.proto

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// UserLoginRequest contains credentials a user must provide to log in.
type UserLoginRequest struct {
	// A username which must correspond to a database user on the cluster.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// A password for the provided username.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *UserLoginRequest) Reset()         { *m = UserLoginRequest{} }
func (m *UserLoginRequest) String() string { return proto.CompactTextString(m) }
func (*UserLoginRequest) ProtoMessage()    {}
func (*UserLoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{0}
}
func (m *UserLoginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UserLoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginRequest.Merge(dst, src)
}
func (m *UserLoginRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginRequest proto.InternalMessageInfo

// UserLoginResponse is currently empty. If a login is successful, an HTTP
// Set-Cookie header will be added to the response with a session
// cookie identifying the created session.
type UserLoginResponse struct {
}

func (m *UserLoginResponse) Reset()         { *m = UserLoginResponse{} }
func (m *UserLoginResponse) String() string { return proto.CompactTextString(m) }
func (*UserLoginResponse) ProtoMessage()    {}
func (*UserLoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{1}
}
func (m *UserLoginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UserLoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLoginResponse.Merge(dst, src)
}
func (m *UserLoginResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserLoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserLoginResponse proto.InternalMessageInfo

// UserLogoutRequest will terminate the current session in use. The request
// is empty because the current session is identified by an HTTP cookie on the
// incoming request.
type UserLogoutRequest struct {
}

func (m *UserLogoutRequest) Reset()         { *m = UserLogoutRequest{} }
func (m *UserLogoutRequest) String() string { return proto.CompactTextString(m) }
func (*UserLogoutRequest) ProtoMessage()    {}
func (*UserLogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{2}
}
func (m *UserLogoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UserLogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogoutRequest.Merge(dst, src)
}
func (m *UserLogoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserLogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogoutRequest proto.InternalMessageInfo

type UserLogoutResponse struct {
}

func (m *UserLogoutResponse) Reset()         { *m = UserLogoutResponse{} }
func (m *UserLogoutResponse) String() string { return proto.CompactTextString(m) }
func (*UserLogoutResponse) ProtoMessage()    {}
func (*UserLogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{3}
}
func (m *UserLogoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *UserLogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLogoutResponse.Merge(dst, src)
}
func (m *UserLogoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserLogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserLogoutResponse proto.InternalMessageInfo

// SessionCookie is a message used to encode the authentication cookie returned
// from successful login requests.
type SessionCookie struct {
	// The unique ID of the session.
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The secret needed to verify ownership of a session.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *SessionCookie) Reset()         { *m = SessionCookie{} }
func (m *SessionCookie) String() string { return proto.CompactTextString(m) }
func (*SessionCookie) ProtoMessage()    {}
func (*SessionCookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{4}
}
func (m *SessionCookie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionCookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SessionCookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCookie.Merge(dst, src)
}
func (m *SessionCookie) XXX_Size() int {
	return m.Size()
}
func (m *SessionCookie) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCookie.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCookie proto.InternalMessageInfo

// OIDCState is a message that is serialized and sent over with an OIDC authentication request
// when the identity provider triggers our callback, it returns the same state message back to
// us so that we can ensure that we're only processing responses that we originated.
type OIDCState struct {
	// ID of node that originated the OIDC session.
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	// Random bytes that the originating node stores to validate the callback response.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *OIDCState) Reset()         { *m = OIDCState{} }
func (m *OIDCState) String() string { return proto.CompactTextString(m) }
func (*OIDCState) ProtoMessage()    {}
func (*OIDCState) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{5}
}
func (m *OIDCState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OIDCState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *OIDCState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OIDCState.Merge(dst, src)
}
func (m *OIDCState) XXX_Size() int {
	return m.Size()
}
func (m *OIDCState) XXX_DiscardUnknown() {
	xxx_messageInfo_OIDCState.DiscardUnknown(m)
}

var xxx_messageInfo_OIDCState proto.InternalMessageInfo

// ValidateOIDCStateRequest is a message that one node sends to another to request
// a state validation. When an OIDC identity provider triggers our callback URL it
// sends back a serialized OIDCState (defined above). If the NodeID in that state
// does not match the node we're processing the callback with, we will request a
// validation from the appropriate node using this message.
type ValidateOIDCStateRequest struct {
	State *OIDCState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ValidateOIDCStateRequest) Reset()         { *m = ValidateOIDCStateRequest{} }
func (m *ValidateOIDCStateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateOIDCStateRequest) ProtoMessage()    {}
func (*ValidateOIDCStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{6}
}
func (m *ValidateOIDCStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateOIDCStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ValidateOIDCStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateOIDCStateRequest.Merge(dst, src)
}
func (m *ValidateOIDCStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *ValidateOIDCStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateOIDCStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateOIDCStateRequest proto.InternalMessageInfo

// ValidateOIDCStateResponse simply tells us if a given state was considered valid
// by the node. It will usually result in that state being cleared from the node's
// cache and discarded to prevent reuse.
type ValidateOIDCStateResponse struct {
}

func (m *ValidateOIDCStateResponse) Reset()         { *m = ValidateOIDCStateResponse{} }
func (m *ValidateOIDCStateResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateOIDCStateResponse) ProtoMessage()    {}
func (*ValidateOIDCStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_authentication_60086026974687e4, []int{7}
}
func (m *ValidateOIDCStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateOIDCStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ValidateOIDCStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateOIDCStateResponse.Merge(dst, src)
}
func (m *ValidateOIDCStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ValidateOIDCStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateOIDCStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateOIDCStateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserLoginRequest)(nil), "cockroach.server.serverpb.UserLoginRequest")
	proto.RegisterType((*UserLoginResponse)(nil), "cockroach.server.serverpb.UserLoginResponse")
	proto.RegisterType((*UserLogoutRequest)(nil), "cockroach.server.serverpb.UserLogoutRequest")
	proto.RegisterType((*UserLogoutResponse)(nil), "cockroach.server.serverpb.UserLogoutResponse")
	proto.RegisterType((*SessionCookie)(nil), "cockroach.server.serverpb.SessionCookie")
	proto.RegisterType((*OIDCState)(nil), "cockroach.server.serverpb.OIDCState")
	proto.RegisterType((*ValidateOIDCStateRequest)(nil), "cockroach.server.serverpb.ValidateOIDCStateRequest")
	proto.RegisterType((*ValidateOIDCStateResponse)(nil), "cockroach.server.serverpb.ValidateOIDCStateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogInClient is the client API for LogIn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogInClient interface {
	// UserLogin is used to create a web authentication session.
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	// ValidateOIDCState is used for nodes to validate OIDC state that another node
	// may have cached since auth requests can originate and be completed at any
	// node in the cluster.
	//
	// This endpoint does not have an HTTP API since we only intend to use it for
	// inter-node communication.
	ValidateOIDCState(ctx context.Context, in *ValidateOIDCStateRequest, opts ...grpc.CallOption) (*ValidateOIDCStateResponse, error)
}

type logInClient struct {
	cc *grpc.ClientConn
}

func NewLogInClient(cc *grpc.ClientConn) LogInClient {
	return &logInClient{cc}
}

func (c *logInClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.LogIn/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logInClient) ValidateOIDCState(ctx context.Context, in *ValidateOIDCStateRequest, opts ...grpc.CallOption) (*ValidateOIDCStateResponse, error) {
	out := new(ValidateOIDCStateResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.LogIn/ValidateOIDCState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogInServer is the server API for LogIn service.
type LogInServer interface {
	// UserLogin is used to create a web authentication session.
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// ValidateOIDCState is used for nodes to validate OIDC state that another node
	// may have cached since auth requests can originate and be completed at any
	// node in the cluster.
	//
	// This endpoint does not have an HTTP API since we only intend to use it for
	// inter-node communication.
	ValidateOIDCState(context.Context, *ValidateOIDCStateRequest) (*ValidateOIDCStateResponse, error)
}

func RegisterLogInServer(s *grpc.Server, srv LogInServer) {
	s.RegisterService(&_LogIn_serviceDesc, srv)
}

func _LogIn_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogInServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.LogIn/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogInServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogIn_ValidateOIDCState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOIDCStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogInServer).ValidateOIDCState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.LogIn/ValidateOIDCState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogInServer).ValidateOIDCState(ctx, req.(*ValidateOIDCStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogIn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.LogIn",
	HandlerType: (*LogInServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _LogIn_UserLogin_Handler,
		},
		{
			MethodName: "ValidateOIDCState",
			Handler:    _LogIn_ValidateOIDCState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/authentication.proto",
}

// LogOutClient is the client API for LogOut service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogOutClient interface {
	// UserLogout terminates an active authentication session.
	UserLogout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLogoutResponse, error)
}

type logOutClient struct {
	cc *grpc.ClientConn
}

func NewLogOutClient(cc *grpc.ClientConn) LogOutClient {
	return &logOutClient{cc}
}

func (c *logOutClient) UserLogout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLogoutResponse, error) {
	out := new(UserLogoutResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.LogOut/UserLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogOutServer is the server API for LogOut service.
type LogOutServer interface {
	// UserLogout terminates an active authentication session.
	UserLogout(context.Context, *UserLogoutRequest) (*UserLogoutResponse, error)
}

func RegisterLogOutServer(s *grpc.Server, srv LogOutServer) {
	s.RegisterService(&_LogOut_serviceDesc, srv)
}

func _LogOut_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogOutServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.LogOut/UserLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogOutServer).UserLogout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogOut_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.LogOut",
	HandlerType: (*LogOutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogout",
			Handler:    _LogOut_UserLogout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/authentication.proto",
}

func (m *UserLoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *UserLoginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLoginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserLogoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogoutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserLogoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLogoutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SessionCookie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionCookie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ID))
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	return i, nil
}

func (m *OIDCState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OIDCState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	return i, nil
}

func (m *ValidateOIDCStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateOIDCStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthentication(dAtA, i, uint64(m.State.Size()))
		n1, err := m.State.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ValidateOIDCStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateOIDCStateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintAuthentication(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserLoginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *UserLoginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserLogoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserLogoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SessionCookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAuthentication(uint64(m.ID))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *OIDCState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovAuthentication(uint64(m.NodeID))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ValidateOIDCStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ValidateOIDCStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAuthentication(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthentication(x uint64) (n int) {
	return sovAuthentication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserLoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLoginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLoginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLoginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLogoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionCookie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionCookie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionCookie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OIDCState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OIDCState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OIDCState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateOIDCStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateOIDCStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateOIDCStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &OIDCState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateOIDCStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateOIDCStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateOIDCStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthentication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthentication
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthentication
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthentication(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthentication = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthentication   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("server/serverpb/authentication.proto", fileDescriptor_authentication_60086026974687e4)
}

var fileDescriptor_authentication_60086026974687e4 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x8d, 0xe2, 0x36, 0x53, 0x10, 0x64, 0xa9, 0xaa, 0xd4, 0x20, 0x07, 0x59, 0x3d, 0xa0,
	0x02, 0xb6, 0x94, 0x70, 0xea, 0x05, 0x91, 0xe6, 0x12, 0x14, 0x51, 0x29, 0x15, 0x3d, 0xf4, 0x82,
	0xd6, 0xf6, 0xca, 0x59, 0x25, 0xdd, 0x31, 0xde, 0x35, 0x08, 0x2e, 0x20, 0x04, 0x77, 0x24, 0xfe,
	0x54, 0x8f, 0x95, 0xb8, 0xf4, 0x14, 0x81, 0xc3, 0xaf, 0xe0, 0x84, 0xfc, 0x91, 0x0f, 0x01, 0xa9,
	0xc2, 0x29, 0xf3, 0xf1, 0xe6, 0xcd, 0xcb, 0x9b, 0x35, 0xec, 0x49, 0x16, 0xbf, 0x66, 0xb1, 0x5b,
	0xfc, 0x44, 0x9e, 0x4b, 0x13, 0x35, 0x64, 0x42, 0x71, 0x9f, 0x2a, 0x8e, 0xc2, 0x89, 0x62, 0x54,
	0x48, 0x76, 0x7d, 0xf4, 0x47, 0x31, 0x52, 0x7f, 0xe8, 0x14, 0x40, 0x67, 0x86, 0x37, 0xb7, 0x43,
	0x0c, 0x31, 0x47, 0xb9, 0x59, 0x54, 0x0c, 0x98, 0x77, 0x43, 0xc4, 0x70, 0xcc, 0x5c, 0x1a, 0x71,
	0x97, 0x0a, 0x81, 0x2a, 0x67, 0x93, 0x45, 0xd7, 0x7e, 0x06, 0xb7, 0x5e, 0x48, 0x16, 0xf7, 0x31,
	0xe4, 0x62, 0xc0, 0x5e, 0x25, 0x4c, 0x2a, 0x62, 0xc2, 0x66, 0x22, 0x59, 0x2c, 0xe8, 0x19, 0x6b,
	0x68, 0xf7, 0xb4, 0xfb, 0xb5, 0xc1, 0x3c, 0xcf, 0x7a, 0x11, 0x95, 0xf2, 0x0d, 0xc6, 0x41, 0x43,
	0x2f, 0x7a, 0xb3, 0xdc, 0xbe, 0x0d, 0xf5, 0x25, 0x2e, 0x19, 0xa1, 0x90, 0x6c, 0xa9, 0x88, 0x89,
	0x2a, 0x37, 0xd8, 0xdb, 0x40, 0x96, 0x8b, 0x25, 0xf4, 0x09, 0xdc, 0x38, 0x66, 0x52, 0x72, 0x14,
	0x87, 0x88, 0x23, 0xce, 0xc8, 0x0e, 0xe8, 0x3c, 0xc8, 0x25, 0x5c, 0xeb, 0x18, 0xe9, 0xa4, 0xa9,
	0xf7, 0xba, 0x03, 0x9d, 0x07, 0x64, 0x07, 0x0c, 0xc9, 0xfc, 0x98, 0xa9, 0x5c, 0xc2, 0xf5, 0x41,
	0x99, 0xd9, 0xef, 0xa1, 0x76, 0xd4, 0xeb, 0x1e, 0x1e, 0x2b, 0xaa, 0x18, 0x39, 0x85, 0x0d, 0x81,
	0x01, 0x7b, 0x59, 0x32, 0x54, 0x3b, 0x4f, 0xd3, 0x49, 0xd3, 0x78, 0x8e, 0x01, 0xeb, 0x75, 0x7f,
	0x4d, 0x9a, 0xed, 0x90, 0xab, 0x61, 0xe2, 0x39, 0x3e, 0x9e, 0xb9, 0x73, 0x4b, 0x03, 0x6f, 0x11,
	0xbb, 0xd1, 0x28, 0x74, 0xf3, 0x28, 0xf2, 0x9c, 0x62, 0x6c, 0x60, 0x64, 0x8c, 0xbd, 0xd5, 0x02,
	0x4e, 0xa0, 0x71, 0x42, 0xc7, 0x3c, 0xa0, 0x8a, 0xcd, 0x85, 0xcc, 0x5c, 0x3d, 0x80, 0xaa, 0xcc,
	0xf2, 0x5c, 0xcd, 0x56, 0x6b, 0xcf, 0x59, 0x79, 0x48, 0x67, 0x31, 0x5b, 0x8c, 0xd8, 0x77, 0x60,
	0xf7, 0x1f, 0xbc, 0x85, 0x6d, 0xad, 0xcf, 0x3a, 0x54, 0xfb, 0x18, 0xf6, 0x04, 0x79, 0x0b, 0xb5,
	0xf9, 0x01, 0xc8, 0x83, 0x2b, 0x16, 0xfc, 0x79, 0x72, 0xf3, 0xe1, 0x7a, 0xe0, 0xf2, 0x50, 0xf5,
	0x8f, 0xdf, 0x7e, 0x7e, 0xd5, 0xb7, 0x6c, 0xc3, 0x1d, 0x67, 0xf5, 0x03, 0x6d, 0x9f, 0x7c, 0xd0,
	0xa0, 0xfe, 0x97, 0x44, 0xd2, 0xbe, 0x82, 0x76, 0x95, 0x51, 0xe6, 0xe3, 0xff, 0x1b, 0x2a, 0x35,
	0x55, 0x5a, 0x9f, 0x34, 0x30, 0xfa, 0x18, 0x1e, 0x25, 0x8a, 0xbc, 0x03, 0x58, 0xbc, 0x2f, 0xb2,
	0xc6, 0x9f, 0x5b, 0xbc, 0x4d, 0xf3, 0xd1, 0x9a, 0xe8, 0x72, 0xef, 0xcd, 0xdc, 0x8b, 0x1a, 0xd9,
	0xc8, 0xbc, 0xc0, 0x44, 0x75, 0xf6, 0xcf, 0x7f, 0x58, 0x95, 0xf3, 0xd4, 0xd2, 0x2e, 0x52, 0x4b,
	0xbb, 0x4c, 0x2d, 0xed, 0x7b, 0x6a, 0x69, 0x5f, 0xa6, 0x56, 0xe5, 0x62, 0x6a, 0x55, 0x2e, 0xa7,
	0x56, 0xe5, 0x74, 0x73, 0xc6, 0xe7, 0x19, 0xf9, 0x47, 0xd8, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x40, 0x9f, 0xd2, 0xb7, 0xfb, 0x03, 0x00, 0x00,
}
