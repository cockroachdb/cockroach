// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.server.serverpb;
option go_package = "serverpb";

import "cockroach/pkg/build/info.proto";
import "cockroach/pkg/gossip/gossip.proto";
import "cockroach/pkg/roachpb/data.proto";
import "cockroach/pkg/server/status/status.proto";
import "cockroach/pkg/storage/engine/enginepb/mvcc.proto";
import "cockroach/pkg/storage/lease_status.proto";
import "cockroach/pkg/storage/storagebase/state.proto";
import "cockroach/pkg/util/log/log.proto";
import "cockroach/pkg/util/unresolved_addr.proto";

import "etcd/raft/raftpb/raft.proto";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message CertificatesRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message CertificateDetails {
  // We use an enum to allow reporting of client certs and potential others (eg: UI).
  enum CertificateType {
    CA = 0;
    NODE = 1;
  }

  message Fields {
    string issuer = 1;
    string subject = 2;
    int64 valid_from = 3;
    int64 valid_until = 4;
    repeated string addresses = 5;
    string signature_algorithm = 6;
    string public_key = 7;
    repeated string key_usage = 8;
    repeated string extended_key_usage = 9;
  }

  CertificateType type = 1;
  // "error_message" and "data" are mutually exclusive.
  string error_message = 2;
  // data is the raw file contents of the certificate. This means PEM-encoded DER data.
  bytes data = 3;
  repeated Fields fields = 4 [(gogoproto.nullable) = false];
}

message CertificatesResponse {
  repeated CertificateDetails certificates = 1 [(gogoproto.nullable) = false];
}

// DetailsRequest requests a nodes details.
message DetailsRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message DetailsResponse {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  util.UnresolvedAddr address = 2 [(gogoproto.nullable) = false];
  build.Info build_info = 3 [(gogoproto.nullable) = false];
}

message NodesRequest {
}

message NodesResponse {
  repeated status.NodeStatus nodes = 1 [(gogoproto.nullable) = false];
}

message NodeRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

// RaftState gives internal details about a Raft group's state.
// Closely mirrors the upstream definitions in github.com/coreos/etcd/raft.
message RaftState {
  message Progress {
    uint64 match = 1;
    uint64 next = 2;
    string state = 3;
    bool paused = 4;
    uint64 pending_snapshot = 5;
  }

  uint64 replica_id = 1 [(gogoproto.customname) = "ReplicaID"];
  raftpb.HardState hard_state  = 2 [(gogoproto.nullable) = false];
  // Lead is part of Raft's SoftState.
  uint64 lead = 3;
  // State is part of Raft's SoftState.
  // It's not an enum because this is primarily for ui consumption and there
  // are issues associated with them.
  string state = 4;
  uint64 applied = 5;
  map<uint64, Progress> progress = 6 [(gogoproto.nullable) = false];
}

message RangeProblems {
    bool unavailable = 1;
    bool leader_not_lease_holder = 2;
    bool no_raft_leader = 3;
    bool underreplicated = 4;
    bool no_lease = 5;
}

message RangeStatistics {
  // Note that queries per second will only be known by the leaseholder.
  // All other replicas will report it as 0.
  double queries_per_second = 1;
  double writes_per_second = 2;
}

message PrettySpan {
  option (gogoproto.equal) = true;

  string start_key = 1;
  string end_key = 2;
}

message CommandQueueMetrics {
  int64 write_commands = 1;
  int64 read_commands = 2;
  int64 max_overlaps_seen = 3;
  int32 tree_size = 4;
}

message RangeInfo {
  PrettySpan span = 1 [(gogoproto.nullable) = false];
  RaftState raft_state = 2 [(gogoproto.nullable) = false];
  storage.storagebase.RangeInfo state = 4 [(gogoproto.nullable) = false];
  int32 source_node_id = 5 [
    (gogoproto.customname) = "SourceNodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"
  ];
  int32 source_store_id = 6 [
     (gogoproto.customname) = "SourceStoreID",
     (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.StoreID"
  ];
  string error_message = 7;
  repeated roachpb.Lease lease_history = 8 [(gogoproto.nullable) = false];
  RangeProblems problems = 9 [(gogoproto.nullable) = false];
  RangeStatistics stats = 10 [(gogoproto.nullable) = false];
  CommandQueueMetrics cmd_q_local = 11 [(gogoproto.nullable) = false];
  CommandQueueMetrics cmd_q_global = 12 [(gogoproto.nullable) = false];
  storage.LeaseStatus lease_status = 13 [(gogoproto.nullable) = false];
}

message RangesRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
  repeated int64 range_ids = 2 [(gogoproto.customname) = "RangeIDs",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
}

message RangesResponse {
  repeated RangeInfo ranges = 1 [(gogoproto.nullable) = false];
}

message GossipRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message AllocatorDryRun {
  message Event {
    google.protobuf.Timestamp time = 1 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
    string message = 2;
  }
  int64 range_id = 1 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  repeated Event events = 2;
}

message AllocatorRangeRequest {
  // TODO(tamird): use [(gogoproto.customname) = "RangeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  int64 range_id = 1;
}

message AllocatorRangeResponse {
  // The NodeID of the store whose dry run is returned. Only the leaseholder
  // for a given range will do an allocator dry run for it.
  int64 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  AllocatorDryRun dry_run = 2;
}

message AllocatorRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  string node_id = 1;
  repeated int64 range_ids = 2 [(gogoproto.customname) = "RangeIDs",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
}

message AllocatorResponse {
  repeated AllocatorDryRun dry_runs = 1;
}

message JSONResponse {
  bytes data = 1;
}

message LogsRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
  string level = 2;
  string start_time = 3;
  string end_time = 4;
  string max = 5;
  string pattern = 6;
}

message LogEntriesResponse {
  repeated cockroach.util.log.Entry entries = 1 [(gogoproto.nullable) = false];
}

message LogFilesListRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message LogFilesListResponse {
  repeated cockroach.util.log.FileInfo files = 1 [(gogoproto.nullable) = false];
}

message LogFileRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
  string file = 2;
}

message StacksRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message MetricsRequest {
  // TODO(tamird): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
}

message RaftRangeNode {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  RangeInfo range = 2 [(gogoproto.nullable) = false];
}

message RaftRangeError {
  string message = 1;
}

message RaftRangeStatus {
  int64 range_id = 1 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  repeated RaftRangeError errors = 2 [(gogoproto.nullable) = false];
  repeated RaftRangeNode nodes = 3 [(gogoproto.nullable) = false];
}

message RaftDebugRequest {
  repeated int64 range_ids = 1 [(gogoproto.customname) = "RangeIDs",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
}

message RaftDebugResponse {
  map<int64, RaftRangeStatus> ranges = 1 [(gogoproto.nullable) = false,
    (gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  repeated RaftRangeError errors = 2 [(gogoproto.nullable) = false];
}

// ActiveQuery represents a query in flight on some Session.
message ActiveQuery {
  // ID of the query (uint128 presented as a hexadecimal string).
  string id = 1 [(gogoproto.customname) = "ID"];
  // SQL query string specified by the user.
  string sql = 2;
  // Start timestamp of this query.
  google.protobuf.Timestamp start = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // True if this query is distributed.
  bool is_distributed = 4;

  // Enum for phase of execution.
  enum Phase {
    PREPARING = 0;
    EXECUTING = 1;
  }
  // phase stores the current phase of execution for this query.
  Phase phase = 5;
}

// Request object for ListSessions and ListLocalSessions.
message ListSessionsRequest {
  // Username of the user making this request.
  string username = 1;
}

// Session represents one SQL session.
message Session {
  // ID of node where this session exists.
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Username of the user for this session.
  string username = 2;
  // Connected client's IP address and port.
  string client_address = 3;
  // Application name specified by the client.
  string application_name = 4;
  // Queries in progress on this session.
  repeated ActiveQuery active_queries = 5 [(gogoproto.nullable) = false];
  // Timestamp of session's start.
  google.protobuf.Timestamp start = 6 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // ID of the current KV transaction for this session. Nil if the session
  // doesn't currently have a transaction.
  bytes kv_txn_id = 7 [(gogoproto.customname) = "KvTxnID",
    (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/util/uuid.UUID"];
  // SQL string of the last query executed on this session.
  string last_active_query = 8;
}

// An error wrapper object for ListSessionsResponse.
message ListSessionsError {
  // ID of node that was being contacted when this error occurred
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Error message.
  string message = 2;
}

// Response object for ListSessions and ListLocalSessions.
message ListSessionsResponse {
  // A list of sessions on this node or cluster.
  repeated Session sessions = 1 [(gogoproto.nullable) = false];
  // Any errors that occurred during fan-out calls to other nodes.
  repeated ListSessionsError errors = 2 [(gogoproto.nullable) = false];
}

// Request object for issing a query cancel request.
message CancelQueryRequest {
  // ID of gateway node for the query to be cancelled.
  //
  // TODO(itsbilal): use [(gogoproto.customname) = "NodeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  //
  // node_id is a string so that "local" can be used to specify that no
  // forwarding is necessary.
  string node_id = 1;
  // ID of query to be cancelled (converted to string).
  string query_id = 2 [(gogoproto.customname) = "QueryID"];
  // Username of the user making this cancellation request.
  string username = 3;
}

// Response returned by target query's gateway node.
message CancelQueryResponse {
  // Whether the cancellation request succeeded and the query was cancelled.
  bool cancelled = 1;
  // Error message (accompanied with cancelled = false).
  string error = 2;
}

message SpanStatsRequest {
  string node_id = 1 [(gogoproto.customname) = "NodeID"];
  bytes start_key = 2 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RKey"];
  bytes end_key = 3 [(gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RKey"];
}

message SpanStatsResponse {
  int32 range_count = 2;
  cockroach.storage.engine.enginepb.MVCCStats total_stats = 1 [(gogoproto.nullable) = false];
}

message ProblemRangesRequest {
  string node_id = 1 [(gogoproto.customname) = "NodeID"];
}

message ProblemRangesResponse {
  message NodeProblems {
    string error_message = 1;
    repeated int64 unavailable_range_ids = 2 [
      (gogoproto.customname) = "UnavailableRangeIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
    ];
    repeated int64 raft_leader_not_lease_holder_range_ids = 3 [
      (gogoproto.customname) = "RaftLeaderNotLeaseHolderRangeIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
    ];
    repeated int64 no_raft_leader_range_ids = 4 [
      (gogoproto.customname) = "NoRaftLeaderRangeIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
    ];
    repeated int64 no_lease_range_ids = 5 [
      (gogoproto.customname) = "NoLeaseRangeIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
    ];
    repeated int64 underreplicated_range_ids = 6 [
      (gogoproto.customname) = "UnderreplicatedRangeIDs",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
    ];
  }
  reserved 1 to 7;
  // NodeID is the node that submitted all the requests.
  int32 node_id = 8 [
    (gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"
  ];
  map<int32, NodeProblems> problems_by_node_id = 9 [
    (gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID",
    (gogoproto.customname) = "ProblemsByNodeID",
    (gogoproto.nullable) = false
  ];
}

message RangeRequest {
  // TODO(tamird): use [(gogoproto.customname) = "RangeID"] below. Need to
  // figure out how to teach grpc-gateway about custom names.
  int64 range_id = 1;
}

message RangeResponse {
  message NodeResponse {
    bool response = 1;
    string error_message = 2;
    repeated RangeInfo infos = 3 [(gogoproto.nullable) = false];
  }
  // NodeID is the node that submitted all the requests.
  int32 node_id = 1 [
    (gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"
  ];
  int64 range_id = 2 [
    (gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"
  ];
  map<int32, NodeResponse> responses_by_node_id = 3 [
    (gogoproto.castkey) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID",
    (gogoproto.customname) = "ResponsesByNodeID",
    (gogoproto.nullable) = false
  ];
  reserved 4; // Previously used.
}

service Status {
  rpc Certificates(CertificatesRequest) returns (CertificatesResponse) {
    option (google.api.http) = {
      get: "/_status/certificates/{node_id}"
    };
  }

  rpc Details(DetailsRequest) returns (DetailsResponse) {
    option (google.api.http) = {
      get: "/_status/details/{node_id}"
      additional_bindings {
        get: "/health"
      }
    };
  }
  rpc Nodes(NodesRequest) returns (NodesResponse) {
    option (google.api.http) = {
      get: "/_status/nodes"
    };
  }
  rpc Node(NodeRequest) returns (status.NodeStatus) {
    option (google.api.http) = {
      get: "/_status/nodes/{node_id}"
    };
  }
  rpc RaftDebug(RaftDebugRequest) returns (RaftDebugResponse) {
    option (google.api.http) = {
      get: "/_status/raft"
    };
  }
  rpc Ranges(RangesRequest) returns (RangesResponse) {
    option (google.api.http) = {
      get: "/_status/ranges/{node_id}"
    };
  }
  rpc Gossip(GossipRequest) returns (gossip.InfoStatus) {
    option (google.api.http) = {
      get: "/_status/gossip/{node_id}"
    };
  }
  rpc Allocator(AllocatorRequest) returns (AllocatorResponse) {
    option (google.api.http) = {
      get: "/_status/allocator/node/{node_id}"
    };
  }
  rpc AllocatorRange(AllocatorRangeRequest) returns (AllocatorRangeResponse) {
    option (google.api.http) = {
      get: "/_status/allocator/range/{range_id}"
    };
  }
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse) {
    option (google.api.http) = {
      get: "/_status/sessions"
    };
  }
  rpc ListLocalSessions(ListSessionsRequest) returns (ListSessionsResponse) {
    option (google.api.http) = {
      get: "/_status/local_sessions"
    };
  }
  rpc CancelQuery(CancelQueryRequest) returns (CancelQueryResponse) {
    option (google.api.http) = {
      get: "/_status/cancel_query/{node_id}"
    };
  }

  // SpanStats accepts a key span and node ID, and returns a set of stats
  // summed from all ranges on the stores on that node which contain keys
  // in that span. This is designed to compute stats specific to a SQL table:
  // it will be called with the highest/lowest key for a SQL table, and return
  // information about the resources on a node used by that table.
  rpc SpanStats(SpanStatsRequest) returns (SpanStatsResponse) {
    option (google.api.http) = {
      post: "/_status/span"
      body: "*"
    };
  }
  rpc Stacks(StacksRequest) returns (JSONResponse) {
    option (google.api.http) = {
      get: "/_status/stacks/{node_id}"
    };
  }
  rpc Metrics(MetricsRequest) returns (JSONResponse) {
    option (google.api.http) = {
      get: "/_status/metrics/{node_id}"
    };
  }
  rpc LogFilesList(LogFilesListRequest) returns (LogFilesListResponse) {
    option (google.api.http) = {
      get: "/_status/logfiles/{node_id}"
    };
  }
  rpc LogFile(LogFileRequest) returns (LogEntriesResponse) {
    option (google.api.http) = {
      get: "/_status/logfiles/{node_id}/{file}"
    };
  }
  rpc Logs(LogsRequest) returns (LogEntriesResponse) {
    option (google.api.http) = {
      get: "/_status/logs/{node_id}"
    };
  }
  rpc ProblemRanges(ProblemRangesRequest) returns (ProblemRangesResponse) {
    option (google.api.http) = {
      get: "/_status/problemranges"
    };
  }
  rpc Range(RangeRequest) returns (RangeResponse) {
    option (google.api.http) = {
      get: "/_status/range/{range_id}"
    };
  }
}
