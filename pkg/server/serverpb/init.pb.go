// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/init.proto

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BootstrapRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BootstrapRequest) Reset()         { *m = BootstrapRequest{} }
func (m *BootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*BootstrapRequest) ProtoMessage()    {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{0}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(dst, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

type BootstrapResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BootstrapResponse) Reset()         { *m = BootstrapResponse{} }
func (m *BootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*BootstrapResponse) ProtoMessage()    {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{1}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(dst, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

type ClusterInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterInfoRequest) Reset()         { *m = ClusterInfoRequest{} }
func (m *ClusterInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterInfoRequest) ProtoMessage()    {}
func (*ClusterInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{2}
}
func (m *ClusterInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClusterInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfoRequest.Merge(dst, src)
}
func (m *ClusterInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfoRequest proto.InternalMessageInfo

type ClusterInfoResponse struct {
	ClusterID            github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"cluster_id"`
	ActiveVersion        roachpb.Version                                     `protobuf:"bytes,2,opt,name=active_version,json=activeVersion,proto3" json:"active_version"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *ClusterInfoResponse) Reset()         { *m = ClusterInfoResponse{} }
func (m *ClusterInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterInfoResponse) ProtoMessage()    {}
func (*ClusterInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{3}
}
func (m *ClusterInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClusterInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterInfoResponse.Merge(dst, src)
}
func (m *ClusterInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClusterInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterInfoResponse proto.InternalMessageInfo

type AllocateNodeIDsRequest struct {
	// num_stores specifies how many store ids to allocate. If 0, no store ids
	// will be allocated.
	NumStores            int32    `protobuf:"varint,1,opt,name=num_stores,json=numStores,proto3" json:"num_stores,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateNodeIDsRequest) Reset()         { *m = AllocateNodeIDsRequest{} }
func (m *AllocateNodeIDsRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateNodeIDsRequest) ProtoMessage()    {}
func (*AllocateNodeIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{4}
}
func (m *AllocateNodeIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateNodeIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AllocateNodeIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateNodeIDsRequest.Merge(dst, src)
}
func (m *AllocateNodeIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateNodeIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateNodeIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateNodeIDsRequest proto.InternalMessageInfo

type AllocateNodeIDsResponse struct {
	// node_id is the newly allocated node id.
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	// first_store_id is the first (smallest) of the newly allocated store ids.
	// [fistst_store_id..first_store_id+request.num_stores) are all available to
	// be used.
	FirstStoreID         github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=first_store_id,json=firstStoreId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"first_store_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *AllocateNodeIDsResponse) Reset()         { *m = AllocateNodeIDsResponse{} }
func (m *AllocateNodeIDsResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateNodeIDsResponse) ProtoMessage()    {}
func (*AllocateNodeIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_ee2f66e3df3374fd, []int{5}
}
func (m *AllocateNodeIDsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateNodeIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AllocateNodeIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateNodeIDsResponse.Merge(dst, src)
}
func (m *AllocateNodeIDsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllocateNodeIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateNodeIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateNodeIDsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BootstrapRequest)(nil), "cockroach.server.serverpb.BootstrapRequest")
	proto.RegisterType((*BootstrapResponse)(nil), "cockroach.server.serverpb.BootstrapResponse")
	proto.RegisterType((*ClusterInfoRequest)(nil), "cockroach.server.serverpb.ClusterInfoRequest")
	proto.RegisterType((*ClusterInfoResponse)(nil), "cockroach.server.serverpb.ClusterInfoResponse")
	proto.RegisterType((*AllocateNodeIDsRequest)(nil), "cockroach.server.serverpb.AllocateNodeIDsRequest")
	proto.RegisterType((*AllocateNodeIDsResponse)(nil), "cockroach.server.serverpb.AllocateNodeIDsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InitClient is the client API for Init service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InitClient interface {
	// Bootstrap an uninitialized cluster.
	Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
	// ClusterInfo returns current cluster information.
	ClusterInfo(ctx context.Context, in *ClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfoResponse, error)
	// AllocateNodeIDs can be used to allocate a node id and multiple store ids.
	// This can be used by new node joining the cluster to ask another node that's
	// already part of the cluster to do some work on its behalf.
	AllocateNodeIDs(ctx context.Context, in *AllocateNodeIDsRequest, opts ...grpc.CallOption) (*AllocateNodeIDsResponse, error)
}

type initClient struct {
	cc *grpc.ClientConn
}

func NewInitClient(cc *grpc.ClientConn) InitClient {
	return &initClient{cc}
}

func (c *initClient) Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/Bootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initClient) ClusterInfo(ctx context.Context, in *ClusterInfoRequest, opts ...grpc.CallOption) (*ClusterInfoResponse, error) {
	out := new(ClusterInfoResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/ClusterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initClient) AllocateNodeIDs(ctx context.Context, in *AllocateNodeIDsRequest, opts ...grpc.CallOption) (*AllocateNodeIDsResponse, error) {
	out := new(AllocateNodeIDsResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/AllocateNodeIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitServer is the server API for Init service.
type InitServer interface {
	// Bootstrap an uninitialized cluster.
	Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
	// ClusterInfo returns current cluster information.
	ClusterInfo(context.Context, *ClusterInfoRequest) (*ClusterInfoResponse, error)
	// AllocateNodeIDs can be used to allocate a node id and multiple store ids.
	// This can be used by new node joining the cluster to ask another node that's
	// already part of the cluster to do some work on its behalf.
	AllocateNodeIDs(context.Context, *AllocateNodeIDsRequest) (*AllocateNodeIDsResponse, error)
}

func RegisterInitServer(s *grpc.Server, srv InitServer) {
	s.RegisterService(&_Init_serviceDesc, srv)
}

func _Init_Bootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Bootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Init/Bootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Bootstrap(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Init_ClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).ClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Init/ClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).ClusterInfo(ctx, req.(*ClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Init_AllocateNodeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateNodeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).AllocateNodeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Init/AllocateNodeIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).AllocateNodeIDs(ctx, req.(*AllocateNodeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Init_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.Init",
	HandlerType: (*InitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bootstrap",
			Handler:    _Init_Bootstrap_Handler,
		},
		{
			MethodName: "ClusterInfo",
			Handler:    _Init_ClusterInfo_Handler,
		},
		{
			MethodName: "AllocateNodeIDs",
			Handler:    _Init_AllocateNodeIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/init.proto",
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ClusterInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintInit(dAtA, i, uint64(m.ClusterID.Size()))
	n1, err := m.ClusterID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintInit(dAtA, i, uint64(m.ActiveVersion.Size()))
	n2, err := m.ActiveVersion.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *AllocateNodeIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNodeIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumStores != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInit(dAtA, i, uint64(m.NumStores))
	}
	return i, nil
}

func (m *AllocateNodeIDsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNodeIDsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintInit(dAtA, i, uint64(m.NodeID))
	}
	if m.FirstStoreID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInit(dAtA, i, uint64(m.FirstStoreID))
	}
	return i, nil
}

func encodeVarintInit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClusterInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClusterInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterID.Size()
	n += 1 + l + sovInit(uint64(l))
	l = m.ActiveVersion.Size()
	n += 1 + l + sovInit(uint64(l))
	return n
}

func (m *AllocateNodeIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumStores != 0 {
		n += 1 + sovInit(uint64(m.NumStores))
	}
	return n
}

func (m *AllocateNodeIDsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovInit(uint64(m.NodeID))
	}
	if m.FirstStoreID != 0 {
		n += 1 + sovInit(uint64(m.FirstStoreID))
	}
	return n
}

func sovInit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInit(x uint64) (n int) {
	return sovInit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateNodeIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNodeIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNodeIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumStores", wireType)
			}
			m.NumStores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumStores |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateNodeIDsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNodeIDsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNodeIDsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstStoreID", wireType)
			}
			m.FirstStoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstStoreID |= (github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/serverpb/init.proto", fileDescriptor_init_ee2f66e3df3374fd) }

var fileDescriptor_init_ee2f66e3df3374fd = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xab, 0x36, 0x90, 0x69, 0x5a, 0x60, 0x5b, 0x95, 0x62, 0x09, 0xa7, 0xf2, 0xa9, 0x12,
	0xb0, 0x16, 0x29, 0x12, 0xe7, 0x9a, 0x08, 0xea, 0x0b, 0x07, 0xa3, 0x72, 0xe8, 0x25, 0xf2, 0xc7,
	0xc6, 0x59, 0x35, 0xd9, 0x35, 0xbb, 0xeb, 0x1c, 0xf8, 0x15, 0xfc, 0x2b, 0x72, 0xe4, 0x88, 0x10,
	0xb2, 0xc0, 0x88, 0x3f, 0xc1, 0x09, 0xd9, 0x6b, 0x27, 0xa5, 0xa5, 0x55, 0x7a, 0xca, 0xe8, 0xed,
	0x7b, 0xf3, 0x66, 0x26, 0xcf, 0x60, 0x4a, 0x22, 0x66, 0x44, 0x38, 0xfa, 0x27, 0x0d, 0x1d, 0xca,
	0xa8, 0xc2, 0xa9, 0xe0, 0x8a, 0xa3, 0x47, 0x11, 0x8f, 0xce, 0x05, 0x0f, 0xa2, 0x31, 0xd6, 0xcf,
	0xb8, 0x61, 0x99, 0x7b, 0x15, 0x9c, 0x86, 0xce, 0x94, 0xa8, 0x20, 0x0e, 0x54, 0xa0, 0x25, 0xe6,
	0x6e, 0xc2, 0x13, 0x5e, 0x95, 0x4e, 0x59, 0x69, 0xd4, 0x46, 0x70, 0xdf, 0xe5, 0x5c, 0x49, 0x25,
	0x82, 0xd4, 0x27, 0x1f, 0x32, 0x22, 0x95, 0xbd, 0x03, 0x0f, 0x2e, 0x60, 0x32, 0xe5, 0x4c, 0x12,
	0x7b, 0x17, 0xd0, 0xab, 0x49, 0x26, 0x15, 0x11, 0x1e, 0x1b, 0xf1, 0x86, 0xfa, 0xd9, 0x80, 0x9d,
	0x7f, 0x60, 0xcd, 0x46, 0x09, 0x40, 0xa4, 0xe1, 0x21, 0x8d, 0xf7, 0x8d, 0x03, 0xe3, 0xb0, 0xeb,
	0x9e, 0xcc, 0xf3, 0x5e, 0xeb, 0x5b, 0xde, 0x3b, 0x4a, 0xa8, 0x1a, 0x67, 0x21, 0x8e, 0xf8, 0xd4,
	0x59, 0xac, 0x11, 0x87, 0xcb, 0xda, 0x49, 0xcf, 0x13, 0x27, 0x53, 0x74, 0xe2, 0x64, 0x19, 0x8d,
	0xf1, 0xe9, 0xa9, 0x37, 0x28, 0xf2, 0x5e, 0xa7, 0xf1, 0x19, 0xf8, 0x9d, 0xba, 0xb7, 0x17, 0xa3,
	0x37, 0xb0, 0x1d, 0x44, 0x8a, 0xce, 0xc8, 0x70, 0x46, 0x84, 0xa4, 0x9c, 0xed, 0xaf, 0x1d, 0x18,
	0x87, 0x9b, 0x7d, 0x13, 0x2f, 0x2f, 0x54, 0x1f, 0x04, 0xbf, 0xd7, 0x0c, 0x77, 0xbd, 0x1c, 0xc4,
	0xdf, 0xd2, 0xba, 0x1a, 0xb4, 0x5f, 0xc2, 0xde, 0xf1, 0x64, 0xc2, 0xa3, 0x40, 0x91, 0xb7, 0x3c,
	0x26, 0xde, 0x40, 0xd6, 0x3b, 0xa2, 0xc7, 0x00, 0x2c, 0x9b, 0x0e, 0xa5, 0xe2, 0x82, 0xc8, 0x6a,
	0x97, 0x0d, 0xbf, 0xc3, 0xb2, 0xe9, 0xbb, 0x0a, 0xb0, 0x7f, 0x1b, 0xf0, 0xf0, 0x8a, 0xb2, 0x3e,
	0xc3, 0x19, 0xdc, 0x61, 0x3c, 0x26, 0xcd, 0x0d, 0xb6, 0xdc, 0xe3, 0x22, 0xef, 0xb5, 0x35, 0xeb,
	0xcf, 0xaa, 0x97, 0x68, 0xc6, 0xd7, 0x32, 0xbf, 0x5d, 0x76, 0xf4, 0x62, 0xc4, 0x60, 0x7b, 0x44,
	0x85, 0x54, 0x7a, 0xb0, 0xd2, 0xa2, 0xdc, 0x7c, 0xc3, 0x3d, 0x29, 0xf2, 0x5e, 0xf7, 0x75, 0xf9,
	0x52, 0x0d, 0x58, 0x19, 0xbd, 0xb8, 0x95, 0x51, 0xad, 0xf3, 0xbb, 0xa3, 0x65, 0x97, 0xb8, 0xff,
	0x7d, 0x0d, 0xd6, 0x3d, 0x46, 0x15, 0x1a, 0x43, 0x67, 0x11, 0x0f, 0xf4, 0x04, 0x5f, 0x9b, 0x44,
	0x7c, 0x39, 0x58, 0xe6, 0xd3, 0xd5, 0xc8, 0x75, 0xe2, 0x5a, 0x88, 0xc1, 0xe6, 0x85, 0x70, 0xa1,
	0x67, 0x37, 0xc8, 0xaf, 0x66, 0xd3, 0xc4, 0xab, 0xd2, 0x17, 0x7e, 0x1f, 0xe1, 0xde, 0xa5, 0x7f,
	0x12, 0x3d, 0xbf, 0xa1, 0xc9, 0xff, 0xf3, 0x62, 0xf6, 0x6f, 0x23, 0x69, 0xbc, 0x5d, 0x7b, 0xfe,
	0xd3, 0x6a, 0xcd, 0x0b, 0xcb, 0xf8, 0x52, 0x58, 0xc6, 0xd7, 0xc2, 0x32, 0x7e, 0x14, 0x96, 0xf1,
	0xe9, 0x97, 0xd5, 0x3a, 0xbb, 0xdb, 0xa8, 0xc3, 0x76, 0xf5, 0xcd, 0x1e, 0xfd, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x4b, 0xe1, 0xcb, 0x1a, 0x04, 0x00, 0x00,
}
