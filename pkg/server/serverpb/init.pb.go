// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/init.proto

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BootstrapRequest struct {
}

func (m *BootstrapRequest) Reset()         { *m = BootstrapRequest{} }
func (m *BootstrapRequest) String() string { return proto.CompactTextString(m) }
func (*BootstrapRequest) ProtoMessage()    {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_5ab0d48daa4548e1, []int{0}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(dst, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

type BootstrapResponse struct {
}

func (m *BootstrapResponse) Reset()         { *m = BootstrapResponse{} }
func (m *BootstrapResponse) String() string { return proto.CompactTextString(m) }
func (*BootstrapResponse) ProtoMessage()    {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_5ab0d48daa4548e1, []int{1}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(dst, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

// JoinNodeRequest is used to specify to the server node what the client's
// MinimumSupportedVersion is. If it's not compatible with the rest of the
// cluster, the join attempt is refused.
type JoinNodeRequest struct {
	MinSupportedVersion *roachpb.Version `protobuf:"bytes,1,opt,name=min_supported_version,json=minSupportedVersion,proto3" json:"min_supported_version,omitempty"`
	// TODO(irfansharif): Use this field to provide the client's address so that
	// the server is able to reach back to it, setting up bidirectional network
	// links.
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *JoinNodeRequest) Reset()         { *m = JoinNodeRequest{} }
func (m *JoinNodeRequest) String() string { return proto.CompactTextString(m) }
func (*JoinNodeRequest) ProtoMessage()    {}
func (*JoinNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_5ab0d48daa4548e1, []int{2}
}
func (m *JoinNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *JoinNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinNodeRequest.Merge(dst, src)
}
func (m *JoinNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinNodeRequest proto.InternalMessageInfo

// JoinNodeResponse informs the joining node what the cluster id is, and what
// node id was allocated to it.
//
// TODO(irfansharif): We should use this RPC to tell us the right cluster
// version to use (instead of using the minimum possible version and relying on
// gossip to bump to for us).
// TODO(irfansharif): We should use this RPC to also generate store IDs, instead
// of having each node do it for itself after being handed out a node ID.
type JoinNodeResponse struct {
	ClusterID []byte `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	NodeID    int32  `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *JoinNodeResponse) Reset()         { *m = JoinNodeResponse{} }
func (m *JoinNodeResponse) String() string { return proto.CompactTextString(m) }
func (*JoinNodeResponse) ProtoMessage()    {}
func (*JoinNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_init_5ab0d48daa4548e1, []int{3}
}
func (m *JoinNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *JoinNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinNodeResponse.Merge(dst, src)
}
func (m *JoinNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BootstrapRequest)(nil), "cockroach.server.serverpb.BootstrapRequest")
	proto.RegisterType((*BootstrapResponse)(nil), "cockroach.server.serverpb.BootstrapResponse")
	proto.RegisterType((*JoinNodeRequest)(nil), "cockroach.server.serverpb.JoinNodeRequest")
	proto.RegisterType((*JoinNodeResponse)(nil), "cockroach.server.serverpb.JoinNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InitClient is the client API for Init service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InitClient interface {
	// Bootstrap an uninitialized cluster (inter-node links set up through the
	// --join flags).
	Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
	// Join a bootstrapped cluster. If the target node is itself not part of a
	// bootstrapped cluster, an appropriate error is returned.
	Join(ctx context.Context, in *JoinNodeRequest, opts ...grpc.CallOption) (*JoinNodeResponse, error)
}

type initClient struct {
	cc *grpc.ClientConn
}

func NewInitClient(cc *grpc.ClientConn) InitClient {
	return &initClient{cc}
}

func (c *initClient) Bootstrap(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/Bootstrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *initClient) Join(ctx context.Context, in *JoinNodeRequest, opts ...grpc.CallOption) (*JoinNodeResponse, error) {
	out := new(JoinNodeResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.Init/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitServer is the server API for Init service.
type InitServer interface {
	// Bootstrap an uninitialized cluster (inter-node links set up through the
	// --join flags).
	Bootstrap(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
	// Join a bootstrapped cluster. If the target node is itself not part of a
	// bootstrapped cluster, an appropriate error is returned.
	Join(context.Context, *JoinNodeRequest) (*JoinNodeResponse, error)
}

func RegisterInitServer(s *grpc.Server, srv InitServer) {
	s.RegisterService(&_Init_serviceDesc, srv)
}

func _Init_Bootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Bootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Init/Bootstrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Bootstrap(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Init_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.Init/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitServer).Join(ctx, req.(*JoinNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Init_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.Init",
	HandlerType: (*InitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bootstrap",
			Handler:    _Init_Bootstrap_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Init_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/init.proto",
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *JoinNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinSupportedVersion != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInit(dAtA, i, uint64(m.MinSupportedVersion.Size()))
		n1, err := m.MinSupportedVersion.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintInit(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	return i, nil
}

func (m *JoinNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInit(dAtA, i, uint64(len(m.ClusterID)))
		i += copy(dAtA[i:], m.ClusterID)
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintInit(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func encodeVarintInit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JoinNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinSupportedVersion != nil {
		l = m.MinSupportedVersion.Size()
		n += 1 + l + sovInit(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovInit(uint64(l))
	}
	return n
}

func (m *JoinNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterID)
	if l > 0 {
		n += 1 + l + sovInit(uint64(l))
	}
	if m.NodeID != 0 {
		n += 1 + sovInit(uint64(m.NodeID))
	}
	return n
}

func sovInit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInit(x uint64) (n int) {
	return sovInit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSupportedVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinSupportedVersion == nil {
				m.MinSupportedVersion = &roachpb.Version{}
			}
			if err := m.MinSupportedVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterID = append(m.ClusterID[:0], dAtA[iNdEx:postIndex]...)
			if m.ClusterID == nil {
				m.ClusterID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/serverpb/init.proto", fileDescriptor_init_5ab0d48daa4548e1) }

var fileDescriptor_init_5ab0d48daa4548e1 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6e, 0xe2, 0x30,
	0x18, 0xc5, 0xe3, 0x11, 0xc3, 0x4c, 0x3c, 0x33, 0x1a, 0x6a, 0xda, 0x8a, 0x66, 0x61, 0x50, 0xba,
	0x41, 0x80, 0x12, 0x89, 0xde, 0x20, 0x65, 0x93, 0x2e, 0x58, 0xa4, 0x52, 0x17, 0xdd, 0xa0, 0x10,
	0x5b, 0x60, 0xb5, 0xd8, 0xa9, 0xed, 0x70, 0x8e, 0x1e, 0x8b, 0x25, 0x52, 0x37, 0xac, 0x50, 0x1b,
	0x2e, 0x52, 0xe5, 0x5f, 0xa9, 0x90, 0x5a, 0xb1, 0x8a, 0xf5, 0xfc, 0x7b, 0x7e, 0xdf, 0xf7, 0x14,
	0x68, 0x29, 0x2a, 0x97, 0x54, 0xba, 0xc5, 0x27, 0x9e, 0xba, 0x8c, 0x33, 0xed, 0xc4, 0x52, 0x68,
	0x81, 0x2e, 0x22, 0x11, 0x3d, 0x48, 0x11, 0x46, 0x73, 0xa7, 0xb8, 0x76, 0x2a, 0xca, 0x3a, 0x9d,
	0x89, 0x99, 0xc8, 0x29, 0x37, 0x3b, 0x15, 0x06, 0xeb, 0x3c, 0x87, 0xe3, 0xa9, 0xbb, 0xa0, 0x3a,
	0x24, 0xa1, 0x0e, 0x0b, 0xdd, 0x46, 0xb0, 0xe1, 0x09, 0xa1, 0x95, 0x96, 0x61, 0x1c, 0xd0, 0xa7,
	0x84, 0x2a, 0x6d, 0x37, 0xe1, 0xc9, 0x27, 0x4d, 0xc5, 0x82, 0x2b, 0x6a, 0x27, 0xf0, 0xff, 0x8d,
	0x60, 0x7c, 0x2c, 0x08, 0x2d, 0x39, 0x34, 0x86, 0x67, 0x0b, 0xc6, 0x27, 0x2a, 0x89, 0x63, 0x21,
	0x35, 0x25, 0x93, 0x25, 0x95, 0x8a, 0x09, 0xde, 0x02, 0x1d, 0xd0, 0xfd, 0x33, 0xb4, 0x9c, 0xfd,
	0x90, 0x65, 0xba, 0x73, 0x57, 0x10, 0x41, 0x73, 0xc1, 0xf8, 0x6d, 0xe5, 0x2b, 0x45, 0x84, 0x60,
	0x2d, 0x24, 0x44, 0xb6, 0x7e, 0x74, 0x40, 0xd7, 0x0c, 0xf2, 0xb3, 0x4d, 0x61, 0x63, 0x1f, 0x5b,
	0x8c, 0x82, 0x06, 0x10, 0x46, 0x8f, 0x89, 0xd2, 0x54, 0x4e, 0x18, 0xc9, 0xc3, 0xfe, 0x7a, 0xff,
	0xd2, 0x6d, 0xdb, 0xbc, 0x2e, 0x54, 0x7f, 0x14, 0x98, 0x25, 0xe0, 0x13, 0x74, 0x09, 0x7f, 0x71,
	0x41, 0x68, 0x86, 0x66, 0x0f, 0xff, 0xf4, 0x60, 0xba, 0x6d, 0xd7, 0xb3, 0x07, 0xfd, 0x51, 0x50,
	0xcf, 0xae, 0x7c, 0x32, 0x7c, 0x01, 0xb0, 0xe6, 0x73, 0xa6, 0xd1, 0x1c, 0x9a, 0x1f, 0xbb, 0xa3,
	0xbe, 0xf3, 0x65, 0xcd, 0xce, 0x61, 0x6b, 0xd6, 0xe0, 0x38, 0xb8, 0xac, 0xd3, 0x40, 0x21, 0xac,
	0x65, 0x9b, 0xa1, 0xde, 0x37, 0xbe, 0x83, 0xc6, 0xad, 0xfe, 0x51, 0x6c, 0x15, 0xe1, 0xf5, 0x56,
	0x6f, 0xd8, 0x58, 0xa5, 0x18, 0xac, 0x53, 0x0c, 0x36, 0x29, 0x06, 0xaf, 0x29, 0x06, 0xcf, 0x3b,
	0x6c, 0xac, 0x77, 0xd8, 0xd8, 0xec, 0xb0, 0x71, 0xff, 0xbb, 0xb2, 0x4f, 0xeb, 0xf9, 0xff, 0x70,
	0xf5, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x53, 0x52, 0x9e, 0x7f, 0x76, 0x02, 0x00, 0x00,
}
