// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/idalloc.proto

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllocateNodeIDRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateNodeIDRequest) Reset()         { *m = AllocateNodeIDRequest{} }
func (m *AllocateNodeIDRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateNodeIDRequest) ProtoMessage()    {}
func (*AllocateNodeIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_idalloc_12a01f65406da123, []int{0}
}
func (m *AllocateNodeIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateNodeIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AllocateNodeIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateNodeIDRequest.Merge(dst, src)
}
func (m *AllocateNodeIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateNodeIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateNodeIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateNodeIDRequest proto.InternalMessageInfo

type AllocateNodeIDResponse struct {
	NodeID               int32    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocateNodeIDResponse) Reset()         { *m = AllocateNodeIDResponse{} }
func (m *AllocateNodeIDResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateNodeIDResponse) ProtoMessage()    {}
func (*AllocateNodeIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_idalloc_12a01f65406da123, []int{1}
}
func (m *AllocateNodeIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateNodeIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *AllocateNodeIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateNodeIDResponse.Merge(dst, src)
}
func (m *AllocateNodeIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllocateNodeIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateNodeIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateNodeIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllocateNodeIDRequest)(nil), "cockroach.server.serverpb.AllocateNodeIDRequest")
	proto.RegisterType((*AllocateNodeIDResponse)(nil), "cockroach.server.serverpb.AllocateNodeIDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IDAllocClient is the client API for IDAlloc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IDAllocClient interface {
	// Allocate a NodeID.
	AllocateNodeID(ctx context.Context, in *AllocateNodeIDRequest, opts ...grpc.CallOption) (*AllocateNodeIDResponse, error)
}

type iDAllocClient struct {
	cc *grpc.ClientConn
}

func NewIDAllocClient(cc *grpc.ClientConn) IDAllocClient {
	return &iDAllocClient{cc}
}

func (c *iDAllocClient) AllocateNodeID(ctx context.Context, in *AllocateNodeIDRequest, opts ...grpc.CallOption) (*AllocateNodeIDResponse, error) {
	out := new(AllocateNodeIDResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.IDAlloc/AllocateNodeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDAllocServer is the server API for IDAlloc service.
type IDAllocServer interface {
	// Allocate a NodeID.
	AllocateNodeID(context.Context, *AllocateNodeIDRequest) (*AllocateNodeIDResponse, error)
}

func RegisterIDAllocServer(s *grpc.Server, srv IDAllocServer) {
	s.RegisterService(&_IDAlloc_serviceDesc, srv)
}

func _IDAlloc_AllocateNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDAllocServer).AllocateNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.IDAlloc/AllocateNodeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDAllocServer).AllocateNodeID(ctx, req.(*AllocateNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IDAlloc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.IDAlloc",
	HandlerType: (*IDAllocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateNodeID",
			Handler:    _IDAlloc_AllocateNodeID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/idalloc.proto",
}

func (m *AllocateNodeIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNodeIDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AllocateNodeIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateNodeIDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIdalloc(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func encodeVarintIdalloc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllocateNodeIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllocateNodeIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovIdalloc(uint64(m.NodeID))
	}
	return n
}

func sovIdalloc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIdalloc(x uint64) (n int) {
	return sovIdalloc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllocateNodeIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdalloc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNodeIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNodeIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIdalloc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdalloc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateNodeIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdalloc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateNodeIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateNodeIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdalloc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdalloc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdalloc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdalloc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdalloc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdalloc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdalloc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIdalloc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIdalloc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIdalloc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIdalloc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdalloc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("server/serverpb/idalloc.proto", fileDescriptor_idalloc_12a01f65406da123)
}

var fileDescriptor_idalloc_12a01f65406da123 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x87, 0x50, 0x05, 0x49, 0xfa, 0x99, 0x29, 0x89, 0x39, 0x39, 0xf9, 0xc9, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x92, 0xc9, 0xf9, 0xc9, 0xd9, 0x45, 0xf9, 0x89, 0xc9, 0x19,
	0x7a, 0x10, 0x15, 0x7a, 0x30, 0x85, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x55, 0xfa, 0x20,
	0x16, 0x44, 0x83, 0x92, 0x38, 0x97, 0xa8, 0x23, 0x48, 0x7f, 0x62, 0x49, 0xaa, 0x5f, 0x7e, 0x4a,
	0xaa, 0xa7, 0x4b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x92, 0x2d, 0x97, 0x18, 0xba, 0x44,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x32, 0x17, 0x7b, 0x5e, 0x7e, 0x4a, 0x6a, 0x7c, 0x66,
	0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xab, 0x13, 0xd7, 0xa3, 0x7b, 0xf2, 0x6c, 0x50, 0x45, 0x6c,
	0x20, 0x29, 0xcf, 0x14, 0xa3, 0x26, 0x46, 0x2e, 0x76, 0x4f, 0x17, 0xb0, 0x09, 0x42, 0xe5, 0x5c,
	0x7c, 0xa8, 0x46, 0x09, 0x19, 0xe8, 0xe1, 0x74, 0xa7, 0x1e, 0x56, 0xe7, 0x48, 0x19, 0x92, 0xa0,
	0x03, 0xe2, 0x4e, 0x25, 0x06, 0x27, 0xa5, 0x13, 0x0f, 0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc,
	0xf0, 0x48, 0x8e, 0xf1, 0xc6, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63,
	0x88, 0xe2, 0x80, 0x69, 0x4e, 0x62, 0x03, 0x87, 0x83, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9a,
	0x33, 0xe4, 0xd5, 0x59, 0x01, 0x00, 0x00,
}
