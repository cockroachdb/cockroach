// Copyright 2017 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.

syntax = "proto3";
package cockroach.server.serverpb;
option go_package = "serverpb";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

// UserLoginRequest contains credentials a user must provide to log in.
message UserLoginRequest {
	// A username which must correspond to a database user on the cluster.
	string username = 1;
	// A password for the provided username.
	string password = 2;
}

// UserLoginResponse is currently empty. If a login is successful, an HTTP
// Set-Cookie header will be added to the response with a session
// cookie identifying the created session.
message UserLoginResponse {
	// No information to return.
}

// UserLogoutRequest will terminate the current session in use. The request
// is empty because the current session is identified by an HTTP cookie on the
// incoming request.
message UserLogoutRequest {
	// No information needed.
}

message UserLogoutResponse {
	// No information to return.
}

// SessionCookie is a message used to encode the authentication cookie returned
// from successful login requests.
message SessionCookie {
	// The unique ID of the session.
	int64 id = 1 [(gogoproto.customname) = "ID"];
	// The secret needed to verify ownership of a session.
	bytes secret = 2;
}

// Authentication is the GRPC API used to create web authentication sessions.
// Intended for use over GRPC-Gateway, which identifies sessions using HTTP
// cookies.
service Authentication {
	// UserLogin is used to create a web authentication session.
	rpc UserLogin(UserLoginRequest) returns (UserLoginResponse) {
		option (google.api.http) = {
			post: "/_auth/v1/login"
			body: "*"
		};
	}

	// UserLogout terminates an active authentication session.
	rpc UserLogout(UserLogoutRequest) returns (UserLogoutResponse) {
		option (google.api.http) = {
			get: "/_auth/v1/logout"
		};
	}
}
