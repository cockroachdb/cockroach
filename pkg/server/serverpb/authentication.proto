// Copyright 2017 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.server.serverpb;
option go_package = "serverpb";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

// UserLoginRequest contains credentials a user must provide to log in.
message UserLoginRequest {
	// A username which must correspond to a database user on the cluster.
	string username = 1;
	// A password for the provided username.
	string password = 2;
}

// UserLoginResponse is currently empty. If a login is successful, an HTTP
// Set-Cookie header will be added to the response with a session
// cookie identifying the created session.
message UserLoginResponse {
	// No information to return.
}

// UserLogoutRequest will terminate the current session in use. The request
// is empty because the current session is identified by an HTTP cookie on the
// incoming request.
message UserLogoutRequest {
	// No information needed.
}

message UserLogoutResponse {
	// No information to return.
}

// SessionCookie is a message used to encode the authentication cookie returned
// from successful login requests.
message SessionCookie {
	// The unique ID of the session.
	int64 id = 1 [(gogoproto.customname) = "ID"];
	// The secret needed to verify ownership of a session.
	bytes secret = 2;
}

// OIDCState is a message that is serialized and sent over with an OIDC authentication request
// when the identity provider triggers our callback, it returns the same state message back to
// us so that we can ensure that we're only processing responses that we originated.
message OIDCState {
	// ID of node that originated the OIDC session.
	int32 node_id = 1 [
		(gogoproto.customname) = "NodeID",
		(gogoproto.casttype) =
			"github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"
	];
	// Random bytes that the originating node stores to validate the callback response.
	bytes secret = 2;
}

// ValidateOIDCStateRequest is a message that one node sends to another to request
// a state validation. When an OIDC identity provider triggers our callback URL it
// sends back a serialized OIDCState (defined above). If the NodeID in that state
// does not match the node we're processing the callback with, we will request a
// validation from the appropriate node using this message.
message ValidateOIDCStateRequest {
	OIDCState state = 1;
}

// ValidateOIDCStateResponse simply tells us if a given state was considered valid
// by the node. It will usually result in that state being cleared from the node's
// cache and discarded to prevent reuse.
message ValidateOIDCStateResponse {}

// LogIn and LogOut are the GRPC APIs used to create web authentication sessions.
// Intended for use over GRPC-Gateway, which identifies sessions using HTTP
// cookies.
//
// They're separate services because LogIn must not require authentication so that
// the user can log in, while LogOut does require authentication, so that we can
// decode the cookie and revoke the session.
service LogIn {
	// UserLogin is used to create a web authentication session.
	rpc UserLogin(UserLoginRequest) returns (UserLoginResponse) {
		option (google.api.http) = {
			post: "/login"
			body: "*"
		};
	}

	// ValidateOIDCState is used for nodes to validate OIDC state that another node
	// may have cached since auth requests can originate and be completed at any
	// node in the cluster.
	//
	// This endpoint does not have an HTTP API since we only intend to use it for
	// inter-node communication.
	rpc ValidateOIDCState(ValidateOIDCStateRequest) returns (ValidateOIDCStateResponse) {}
}

service LogOut {
	// UserLogout terminates an active authentication session.
	rpc UserLogout(UserLogoutRequest) returns (UserLogoutResponse) {
		option (google.api.http) = {
			get: "/logout"
		};
	}
}
