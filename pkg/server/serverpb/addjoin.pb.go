// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/serverpb/addjoin.proto

package serverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CaRequest requests the CA cert anchoring this service.
type CaRequest struct {
}

func (m *CaRequest) Reset()         { *m = CaRequest{} }
func (m *CaRequest) String() string { return proto.CompactTextString(m) }
func (*CaRequest) ProtoMessage()    {}
func (*CaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addjoin_cfc649a75655891b, []int{0}
}
func (m *CaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaRequest.Merge(dst, src)
}
func (m *CaRequest) XXX_Size() int {
	return m.Size()
}
func (m *CaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CaRequest proto.InternalMessageInfo

// CaResponse contains a PEM encoded copy of the CA cert for this service.
type CaResponse struct {
	// query is the SQL query string.
	CaCert []byte `protobuf:"bytes,1,opt,name=caCert,proto3" json:"caCert,omitempty"`
	MAC    []byte `protobuf:"bytes,2,opt,name=MAC,proto3" json:"MAC,omitempty"`
}

func (m *CaResponse) Reset()         { *m = CaResponse{} }
func (m *CaResponse) String() string { return proto.CompactTextString(m) }
func (*CaResponse) ProtoMessage()    {}
func (*CaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addjoin_cfc649a75655891b, []int{1}
}
func (m *CaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaResponse.Merge(dst, src)
}
func (m *CaResponse) XXX_Size() int {
	return m.Size()
}
func (m *CaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CaResponse proto.InternalMessageInfo

// BundleRequest requests the bundle of initialization CAs for a new node.
// It provides authentication in the form of a joinToken containing a
// sharedSecret.
type BundleRequest struct {
	// sharedSecret
	TokenId      string `protobuf:"bytes,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	SharedSecret string `protobuf:"bytes,2,opt,name=sharedSecret,proto3" json:"sharedSecret,omitempty"`
}

func (m *BundleRequest) Reset()         { *m = BundleRequest{} }
func (m *BundleRequest) String() string { return proto.CompactTextString(m) }
func (*BundleRequest) ProtoMessage()    {}
func (*BundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addjoin_cfc649a75655891b, []int{2}
}
func (m *BundleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleRequest.Merge(dst, src)
}
func (m *BundleRequest) XXX_Size() int {
	return m.Size()
}
func (m *BundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BundleRequest proto.InternalMessageInfo

// BundleResponse contains a copy of all CAs needed to intialize TLS for
// a new node.
type BundleResponse struct {
	// query is the SQL query string.
	Bundle []byte `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (m *BundleResponse) Reset()         { *m = BundleResponse{} }
func (m *BundleResponse) String() string { return proto.CompactTextString(m) }
func (*BundleResponse) ProtoMessage()    {}
func (*BundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addjoin_cfc649a75655891b, []int{3}
}
func (m *BundleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BundleResponse.Merge(dst, src)
}
func (m *BundleResponse) XXX_Size() int {
	return m.Size()
}
func (m *BundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BundleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CaRequest)(nil), "cockroach.server.serverpb.CaRequest")
	proto.RegisterType((*CaResponse)(nil), "cockroach.server.serverpb.CaResponse")
	proto.RegisterType((*BundleRequest)(nil), "cockroach.server.serverpb.BundleRequest")
	proto.RegisterType((*BundleResponse)(nil), "cockroach.server.serverpb.BundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddJoinClient is the client API for AddJoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddJoinClient interface {
	// URL: /_join/v1/bundle
	CA(ctx context.Context, in *CaRequest, opts ...grpc.CallOption) (*CaResponse, error)
	// URL: /_admin/v1/databases
	Join(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error)
}

type addJoinClient struct {
	cc *grpc.ClientConn
}

func NewAddJoinClient(cc *grpc.ClientConn) AddJoinClient {
	return &addJoinClient{cc}
}

func (c *addJoinClient) CA(ctx context.Context, in *CaRequest, opts ...grpc.CallOption) (*CaResponse, error) {
	out := new(CaResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.AddJoin/CA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addJoinClient) Join(ctx context.Context, in *BundleRequest, opts ...grpc.CallOption) (*BundleResponse, error) {
	out := new(BundleResponse)
	err := c.cc.Invoke(ctx, "/cockroach.server.serverpb.AddJoin/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddJoinServer is the server API for AddJoin service.
type AddJoinServer interface {
	// URL: /_join/v1/bundle
	CA(context.Context, *CaRequest) (*CaResponse, error)
	// URL: /_admin/v1/databases
	Join(context.Context, *BundleRequest) (*BundleResponse, error)
}

func RegisterAddJoinServer(s *grpc.Server, srv AddJoinServer) {
	s.RegisterService(&_AddJoin_serviceDesc, srv)
}

func _AddJoin_CA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddJoinServer).CA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.AddJoin/CA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddJoinServer).CA(ctx, req.(*CaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddJoin_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddJoinServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.serverpb.AddJoin/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddJoinServer).Join(ctx, req.(*BundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddJoin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.serverpb.AddJoin",
	HandlerType: (*AddJoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CA",
			Handler:    _AddJoin_CA_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _AddJoin_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/serverpb/addjoin.proto",
}

func (m *CaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaCert) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddjoin(dAtA, i, uint64(len(m.CaCert)))
		i += copy(dAtA[i:], m.CaCert)
	}
	if len(m.MAC) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddjoin(dAtA, i, uint64(len(m.MAC)))
		i += copy(dAtA[i:], m.MAC)
	}
	return i, nil
}

func (m *BundleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BundleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TokenId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddjoin(dAtA, i, uint64(len(m.TokenId)))
		i += copy(dAtA[i:], m.TokenId)
	}
	if len(m.SharedSecret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddjoin(dAtA, i, uint64(len(m.SharedSecret)))
		i += copy(dAtA[i:], m.SharedSecret)
	}
	return i, nil
}

func (m *BundleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BundleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bundle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddjoin(dAtA, i, uint64(len(m.Bundle)))
		i += copy(dAtA[i:], m.Bundle)
	}
	return i, nil
}

func encodeVarintAddjoin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CaCert)
	if l > 0 {
		n += 1 + l + sovAddjoin(uint64(l))
	}
	l = len(m.MAC)
	if l > 0 {
		n += 1 + l + sovAddjoin(uint64(l))
	}
	return n
}

func (m *BundleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovAddjoin(uint64(l))
	}
	l = len(m.SharedSecret)
	if l > 0 {
		n += 1 + l + sovAddjoin(uint64(l))
	}
	return n
}

func (m *BundleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bundle)
	if l > 0 {
		n += 1 + l + sovAddjoin(uint64(l))
	}
	return n
}

func sovAddjoin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddjoin(x uint64) (n int) {
	return sovAddjoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddjoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAddjoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddjoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddjoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAddjoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCert = append(m.CaCert[:0], dAtA[iNdEx:postIndex]...)
			if m.CaCert == nil {
				m.CaCert = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MAC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAddjoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MAC = append(m.MAC[:0], dAtA[iNdEx:postIndex]...)
			if m.MAC == nil {
				m.MAC = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddjoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddjoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BundleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddjoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddjoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddjoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddjoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddjoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BundleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddjoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BundleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BundleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAddjoin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundle = append(m.Bundle[:0], dAtA[iNdEx:postIndex]...)
			if m.Bundle == nil {
				m.Bundle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddjoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAddjoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddjoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddjoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddjoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddjoin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddjoin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddjoin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddjoin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddjoin   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("server/serverpb/addjoin.proto", fileDescriptor_addjoin_cfc649a75655891b)
}

var fileDescriptor_addjoin_cfc649a75655891b = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x51, 0xcf, 0x4a, 0xfb, 0x40,
	0x18, 0xcc, 0xf6, 0xf7, 0xa3, 0xb5, 0x6b, 0x2d, 0x65, 0x91, 0x52, 0x8b, 0x2e, 0x12, 0x14, 0xaa,
	0x87, 0x2c, 0x2a, 0x78, 0x6f, 0x73, 0x52, 0xe8, 0x25, 0xde, 0xbc, 0xc8, 0x36, 0xbb, 0xb4, 0xb1,
	0x65, 0x37, 0xee, 0x6e, 0xfb, 0x00, 0x3e, 0x81, 0xe0, 0x4b, 0xf5, 0x58, 0xf0, 0xd2, 0xa3, 0xa6,
	0x82, 0xaf, 0x21, 0xd9, 0x24, 0x96, 0x1e, 0xfc, 0x73, 0xfa, 0x32, 0xc3, 0x7c, 0x33, 0x5f, 0x66,
	0xe1, 0x81, 0xe6, 0x6a, 0xc6, 0x15, 0xc9, 0x46, 0x3c, 0x20, 0x94, 0xb1, 0x7b, 0x19, 0x09, 0x2f,
	0x56, 0xd2, 0x48, 0xb4, 0x17, 0xca, 0x70, 0xac, 0x24, 0x0d, 0x47, 0x5e, 0xa6, 0xf0, 0x0a, 0x61,
	0x7b, 0x7f, 0x28, 0xe5, 0x70, 0xc2, 0x09, 0x8d, 0x23, 0x42, 0x85, 0x90, 0x86, 0x9a, 0x48, 0x0a,
	0x9d, 0x2d, 0xba, 0xdb, 0xb0, 0xea, 0xd3, 0x80, 0x3f, 0x4c, 0xb9, 0x36, 0xee, 0x25, 0x84, 0x29,
	0xd0, 0xb1, 0x14, 0x9a, 0xa3, 0x26, 0x2c, 0x87, 0xd4, 0xe7, 0xca, 0xb4, 0xc0, 0x21, 0xe8, 0xd4,
	0x82, 0x1c, 0xa1, 0x06, 0xfc, 0xd7, 0xef, 0xfa, 0xad, 0x92, 0x25, 0xd3, 0x4f, 0xb7, 0x0f, 0x77,
	0x7a, 0x53, 0xc1, 0x26, 0x3c, 0x37, 0x42, 0x2d, 0x58, 0x31, 0x72, 0xcc, 0xc5, 0x15, 0xb3, 0xbb,
	0xd5, 0xa0, 0x80, 0xc8, 0x85, 0x35, 0x3d, 0xa2, 0x8a, 0xb3, 0x1b, 0x1e, 0x2a, 0x6e, 0xac, 0x4b,
	0x35, 0xd8, 0xe0, 0xdc, 0x0e, 0xac, 0x17, 0x76, 0xeb, 0x53, 0x06, 0x96, 0x29, 0x4e, 0xc9, 0xd0,
	0xf9, 0x07, 0x80, 0x95, 0x2e, 0x63, 0xd7, 0x32, 0x12, 0x68, 0x08, 0x4b, 0x7e, 0x17, 0x1d, 0x79,
	0xdf, 0x36, 0xe1, 0x7d, 0xfd, 0x68, 0xfb, 0xf8, 0x17, 0x55, 0x16, 0xeb, 0xee, 0x3e, 0xbe, 0xbc,
	0x3f, 0x97, 0xea, 0xa8, 0x46, 0xee, 0xd2, 0xae, 0xc9, 0xec, 0x8c, 0x84, 0x14, 0x69, 0xf8, 0xdf,
	0x06, 0x76, 0x7e, 0x30, 0xd9, 0xa8, 0xa3, 0x7d, 0xf2, 0x07, 0x65, 0x1e, 0xd9, 0xb4, 0x91, 0x0d,
	0x54, 0x5f, 0x47, 0xa6, 0xb3, 0x77, 0x3a, 0x7f, 0xc3, 0xce, 0x3c, 0xc1, 0x60, 0x91, 0x60, 0xb0,
	0x4c, 0x30, 0x78, 0x4d, 0x30, 0x78, 0x5a, 0x61, 0x67, 0xb1, 0xc2, 0xce, 0x72, 0x85, 0x9d, 0xdb,
	0xad, 0xc2, 0x72, 0x50, 0xb6, 0x4f, 0x7b, 0xf1, 0x19, 0x00, 0x00, 0xff, 0xff, 0x45, 0x7a, 0x80,
	0x45, 0x34, 0x02, 0x00, 0x00,
}
