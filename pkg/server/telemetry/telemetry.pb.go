// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/telemetry/telemetry.proto

package telemetry

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import time "time"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TelemetryReport is a simplified, all-in-one message for tools and
// processes to provide information about their operation. It differs
// from DiagnosticReport in that it is intended to be product-agnostic;
// it doesn't contain the various sub-messages that are
// CockroachDB-specific.
type TelemetryReport struct {
	Source TelemetrySource `protobuf:"bytes,1,opt,name=source,proto3" json:"source"`
	// FeatureUsage contains counter information.
	FeatureUsage         map[string]int32 `protobuf:"bytes,2,rep,name=feature_usage,json=featureUsage,proto3" json:"feature_usage" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TelemetryReport) Reset()         { *m = TelemetryReport{} }
func (m *TelemetryReport) String() string { return proto.CompactTextString(m) }
func (*TelemetryReport) ProtoMessage()    {}
func (*TelemetryReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_284958cdf09dc380, []int{0}
}
func (m *TelemetryReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetryReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TelemetryReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryReport.Merge(dst, src)
}
func (m *TelemetryReport) XXX_Size() int {
	return m.Size()
}
func (m *TelemetryReport) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryReport.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryReport proto.InternalMessageInfo

// TelemetrySource describes the tool or process that has generated a
// TelemetroyReport.
type TelemetrySource struct {
	// The name of the tool, e.g. "roachprod".
	Product string `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	// InstallID contains a UUID that is, ideally, persistent across
	// invocations of the tool.
	InstallUUID string `protobuf:"bytes,2,opt,name=install_uuid,json=installUuid,proto3" json:"install_uuid,omitempty"`
	// Version, if reported, should be a semver or a git commit id.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Uptime contains the number of nanoseconds for which the
	// process has been running.
	Uptime time.Duration `protobuf:"varint,4,opt,name=uptime,proto3,casttype=time.Duration" json:"uptime,omitempty"`
	// Internal should be set to true for tools that are internal to CRL.
	Internal             bool     `protobuf:"varint,5,opt,name=internal,proto3" json:"internal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TelemetrySource) Reset()         { *m = TelemetrySource{} }
func (m *TelemetrySource) String() string { return proto.CompactTextString(m) }
func (*TelemetrySource) ProtoMessage()    {}
func (*TelemetrySource) Descriptor() ([]byte, []int) {
	return fileDescriptor_telemetry_284958cdf09dc380, []int{1}
}
func (m *TelemetrySource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TelemetrySource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *TelemetrySource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetrySource.Merge(dst, src)
}
func (m *TelemetrySource) XXX_Size() int {
	return m.Size()
}
func (m *TelemetrySource) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetrySource.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetrySource proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TelemetryReport)(nil), "cockroach.server.telemetry.TelemetryReport")
	proto.RegisterMapType((map[string]int32)(nil), "cockroach.server.telemetry.TelemetryReport.FeatureUsageEntry")
	proto.RegisterType((*TelemetrySource)(nil), "cockroach.server.telemetry.TelemetrySource")
}
func (m *TelemetryReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetryReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintTelemetry(dAtA, i, uint64(m.Source.Size()))
	n1, err := m.Source.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.FeatureUsage) > 0 {
		keysForFeatureUsage := make([]string, 0, len(m.FeatureUsage))
		for k := range m.FeatureUsage {
			keysForFeatureUsage = append(keysForFeatureUsage, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForFeatureUsage)
		for _, k := range keysForFeatureUsage {
			dAtA[i] = 0x12
			i++
			v := m.FeatureUsage[string(k)]
			mapSize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + sovTelemetry(uint64(v))
			i = encodeVarintTelemetry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintTelemetry(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *TelemetrySource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TelemetrySource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Product) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Product)))
		i += copy(dAtA[i:], m.Product)
	}
	if len(m.InstallUUID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.InstallUUID)))
		i += copy(dAtA[i:], m.InstallUUID)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Uptime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTelemetry(dAtA, i, uint64(m.Uptime))
	}
	if m.Internal {
		dAtA[i] = 0x28
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TelemetryReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if len(m.FeatureUsage) > 0 {
		for k, v := range m.FeatureUsage {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTelemetry(uint64(len(k))) + 1 + sovTelemetry(uint64(v))
			n += mapEntrySize + 1 + sovTelemetry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TelemetrySource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.InstallUUID)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.Uptime != 0 {
		n += 1 + sovTelemetry(uint64(m.Uptime))
	}
	if m.Internal {
		n += 2
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TelemetryReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetryReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetryReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureUsage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureUsage == nil {
				m.FeatureUsage = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTelemetry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTelemetry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTelemetry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTelemetry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FeatureUsage[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TelemetrySource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TelemetrySource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TelemetrySource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallUUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstallUUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			m.Uptime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uptime |= (time.Duration(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTelemetry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTelemetry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTelemetry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("server/telemetry/telemetry.proto", fileDescriptor_telemetry_284958cdf09dc380)
}

var fileDescriptor_telemetry_284958cdf09dc380 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x31, 0x4f, 0xc2, 0x40,
	0x14, 0xc7, 0x39, 0x0a, 0x08, 0x57, 0x08, 0x72, 0x61, 0x68, 0x3a, 0x94, 0x06, 0x97, 0x1a, 0x93,
	0x92, 0xe0, 0x62, 0x4c, 0x8c, 0x49, 0x83, 0x26, 0xac, 0xd5, 0x2e, 0x2e, 0xa4, 0x96, 0x03, 0x1a,
	0x4a, 0xaf, 0xb9, 0xde, 0x91, 0xf0, 0x09, 0x5c, 0xfd, 0x48, 0x8e, 0x8c, 0x8e, 0x4e, 0x44, 0xeb,
	0xb7, 0x70, 0x32, 0xed, 0x95, 0x4a, 0x62, 0x4c, 0xdc, 0xde, 0xff, 0xee, 0xff, 0xff, 0xdd, 0x7b,
	0xef, 0xa0, 0x1e, 0x63, 0xba, 0xc6, 0x74, 0xc0, 0x70, 0x80, 0x57, 0x98, 0xd1, 0xcd, 0x4f, 0x65,
	0x46, 0x94, 0x30, 0x82, 0x54, 0x8f, 0x78, 0x4b, 0x4a, 0x5c, 0x6f, 0x61, 0x0a, 0xaf, 0x59, 0x38,
	0xd4, 0xee, 0x9c, 0xcc, 0x49, 0x66, 0x1b, 0xa4, 0x95, 0x48, 0xf4, 0x9f, 0xca, 0xb0, 0x7d, 0xbf,
	0xf7, 0xd8, 0x38, 0x22, 0x94, 0xa1, 0x31, 0xac, 0xc5, 0x84, 0x53, 0x0f, 0x2b, 0x40, 0x07, 0x86,
	0x3c, 0x3c, 0x33, 0xff, 0xc6, 0x9a, 0x45, 0xf8, 0x2e, 0x8b, 0x58, 0x95, 0xed, 0xae, 0x57, 0xb2,
	0x73, 0x00, 0x5a, 0xc0, 0xd6, 0x0c, 0xbb, 0x8c, 0x53, 0x3c, 0xe1, 0xb1, 0x3b, 0xc7, 0x4a, 0x59,
	0x97, 0x0c, 0x79, 0x78, 0xf5, 0x2f, 0xa2, 0x68, 0xc7, 0xbc, 0x15, 0x00, 0x27, 0xcd, 0xdf, 0x84,
	0x8c, 0x6e, 0xf2, 0x37, 0x9a, 0xb3, 0x83, 0x0b, 0xf5, 0x1a, 0x76, 0x7e, 0x19, 0xd1, 0x31, 0x94,
	0x96, 0x78, 0x93, 0x8d, 0xd1, 0xb0, 0xd3, 0x12, 0x75, 0x61, 0x75, 0xed, 0x06, 0x3c, 0x6d, 0x04,
	0x18, 0x55, 0x5b, 0x88, 0xcb, 0xf2, 0x05, 0xe8, 0xbf, 0x80, 0x83, 0x4d, 0x88, 0x61, 0x90, 0x02,
	0x8f, 0x22, 0x4a, 0xa6, 0xdc, 0x63, 0x39, 0x63, 0x2f, 0xd1, 0x10, 0x36, 0xfd, 0x30, 0x66, 0x6e,
	0x10, 0x4c, 0x38, 0xf7, 0xa7, 0x19, 0xae, 0x61, 0xb5, 0x93, 0x5d, 0x4f, 0x1e, 0x8b, 0x73, 0xc7,
	0x19, 0x8f, 0x6c, 0x39, 0x37, 0x39, 0xdc, 0x9f, 0xa6, 0xb4, 0x35, 0xa6, 0xb1, 0x4f, 0x42, 0x45,
	0x12, 0xb4, 0x5c, 0xa2, 0x53, 0x58, 0xe3, 0x11, 0xf3, 0x57, 0x58, 0xa9, 0xe8, 0xc0, 0x90, 0xac,
	0xce, 0xd7, 0xae, 0xd7, 0x4a, 0xb5, 0x39, 0xe2, 0xd4, 0x65, 0x3e, 0x09, 0xed, 0xdc, 0x80, 0x54,
	0x58, 0xf7, 0x43, 0x86, 0x69, 0xe8, 0x06, 0x4a, 0x55, 0x07, 0x46, 0xdd, 0x2e, 0xb4, 0x75, 0xb2,
	0xfd, 0xd0, 0x4a, 0xdb, 0x44, 0x03, 0xaf, 0x89, 0x06, 0xde, 0x12, 0x0d, 0xbc, 0x27, 0x1a, 0x78,
	0xfe, 0xd4, 0x4a, 0x0f, 0x8d, 0x62, 0xbd, 0x8f, 0xb5, 0xec, 0xe3, 0xcf, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xf2, 0x8f, 0x61, 0x30, 0x4e, 0x02, 0x00, 0x00,
}
