// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/kv/kvclient/rangecache (interfaces: RangeLookup)

// Package rangecachemock is a generated GoMock package.
package rangecachemock

import (
	context "context"
	reflect "reflect"

	kvpb "github.com/cockroachdb/cockroach/pkg/kv/kvpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	gomock "github.com/golang/mock/gomock"
)

// MockRangeLookup is a mock of RangeLookup interface.
type MockRangeLookup struct {
	ctrl     *gomock.Controller
	recorder *MockRangeLookupMockRecorder
}

// MockRangeLookupMockRecorder is the mock recorder for MockRangeLookup.
type MockRangeLookupMockRecorder struct {
	mock *MockRangeLookup
}

// NewMockRangeLookup creates a new mock instance.
func NewMockRangeLookup(ctrl *gomock.Controller) *MockRangeLookup {
	mock := &MockRangeLookup{ctrl: ctrl}
	mock.recorder = &MockRangeLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRangeLookup) EXPECT() *MockRangeLookupMockRecorder {
	return m.recorder
}

// RangeLookup mocks base method.
func (m *MockRangeLookup) RangeLookup(
	arg0 context.Context, arg1 roachpb.RKey, arg2 kvpb.ReadConsistencyType, arg3 bool,
) ([]roachpb.RangeDescriptor, []roachpb.RangeDescriptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RangeLookup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]roachpb.RangeDescriptor)
	ret1, _ := ret[1].([]roachpb.RangeDescriptor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RangeLookup indicates an expected call of RangeLookup.
func (mr *MockRangeLookupMockRecorder) RangeLookup(
	arg0, arg1, arg2, arg3 interface{},
) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeLookup", reflect.TypeOf((*MockRangeLookup)(nil).RangeLookup), arg0, arg1, arg2, arg3)
}
