subtest release

begin
----
0 <noignore>

put k a
----

get k
----
"k" -> a

savepoint x
----
1 <noignore>

put k b
----

get k
----
"k" -> b

release x
----
2 <noignore>

get k
----
"k" -> b

commit
----

begin
----
0 <noignore>

get k
----
"k" -> b

commit
----

subtest end


subtest rollback

begin
----
0 <noignore>

put k a
----

get k
----
"k" -> a

savepoint x
----
1 <noignore>

put k b
----

get k
----
"k" -> b

rollback x
----
2 [2-2]

get k
----
"k" -> a

commit
----

begin
----
0 <noignore>

get k
----
"k" -> a

commit
----

subtest end

subtest rollback_after_nested_release

begin
----
0 <noignore>

put k a
----

savepoint x
----
1 <noignore>

put k b
----

savepoint y
----
2 <noignore>

put k c
----

release y
----
3 <noignore>

put k d
----

rollback x
----
4 [2-4]

get k
----
"k" -> a

commit
----

begin
----
0 <noignore>

get k
----
"k" -> a

commit
----

subtest end

subtest disjoin_rollbacks

begin
----
0 <noignore>

put a 1
----

put b 1
----

savepoint x
----
2 <noignore>

put a 2
----

rollback x
----
3 [3-3]

put c 1
----

savepoint x
----
4 [3-3]

put b 2
----

rollback x
----
5 [3-3][5-5]

put d 1
----


get a
----
"a" -> 1

get b
----
"b" -> 1

get c
----
"c" -> 1

get d
----
"d" -> 1

commit
----

begin
----
0 <noignore>

get a
----
"a" -> 1

get b
----
"b" -> 1

get c
----
"c" -> 1

get d
----
"d" -> 1

commit
----

subtest end


subtest rollback_with_no_op

begin
----
0 <noignore>

put k a
----

savepoint x
----
1 <noignore>

rollback x
----
1 <noignore>

rollback x
----
1 <noignore>

commit
----

subtest end

subtest no_double_rollback

begin
----
0 <noignore>

savepoint x
----
0 <noignore>

put k a
----

rollback x
----
1 [1-1]

rollback x
----
(*assert.withAssertionFailure) savepoint is already rolled back

commit
----

begin
----
0 <noignore>

get k
----
"k" -> a

commit
----

subtest end

subtest rollback_across_retry

# TODO(knz): change this test when rolling back across retries becomes
# supported.

begin
----
0 <noignore>

savepoint x
----
0 <noignore>

retry
----
synthetic error: TransactionRetryWithProtoRefreshError: forced retry
epoch: 0 -> 1

release x
----
(*assert.withAssertionFailure) savepoint from wrong txn epoch: got 0, expected 1

rollback x
----
(*assert.withAssertionFailure) savepoint from wrong txn epoch: got 0, expected 1

subtest end

subtest rollback_across_abort

begin
----
0 <noignore>

savepoint x
----
0 <noignore>

retry
----
synthetic error: XXXX (FIXME)
id: 0 -> 1

release x
----
(*assert.withAssertionFailure) savepoint from wrong txn ID: got X, expected Y

rollback x
----
(*assert.withAssertionFailure) savepoint from wrong txn ID: got X, expected Y


subtest end
