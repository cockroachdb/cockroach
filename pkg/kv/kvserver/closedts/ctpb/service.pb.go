// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/closedts/ctpb/service.proto

package ctpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClosedTimestampClient is the client API for ClosedTimestamp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClosedTimestampClient interface {
	Get(ctx context.Context, opts ...grpc.CallOption) (ClosedTimestamp_GetClient, error)
}

type closedTimestampClient struct {
	cc *grpc.ClientConn
}

func NewClosedTimestampClient(cc *grpc.ClientConn) ClosedTimestampClient {
	return &closedTimestampClient{cc}
}

func (c *closedTimestampClient) Get(ctx context.Context, opts ...grpc.CallOption) (ClosedTimestamp_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClosedTimestamp_serviceDesc.Streams[0], "/cockroach.kv.kvserver.ctupdate.ClosedTimestamp/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &closedTimestampGetClient{stream}
	return x, nil
}

type ClosedTimestamp_GetClient interface {
	Send(*Reaction) error
	Recv() (*Entry, error)
	grpc.ClientStream
}

type closedTimestampGetClient struct {
	grpc.ClientStream
}

func (x *closedTimestampGetClient) Send(m *Reaction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *closedTimestampGetClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClosedTimestampServer is the server API for ClosedTimestamp service.
type ClosedTimestampServer interface {
	Get(ClosedTimestamp_GetServer) error
}

func RegisterClosedTimestampServer(s *grpc.Server, srv ClosedTimestampServer) {
	s.RegisterService(&_ClosedTimestamp_serviceDesc, srv)
}

func _ClosedTimestamp_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClosedTimestampServer).Get(&closedTimestampGetServer{stream})
}

type ClosedTimestamp_GetServer interface {
	Send(*Entry) error
	Recv() (*Reaction, error)
	grpc.ServerStream
}

type closedTimestampGetServer struct {
	grpc.ServerStream
}

func (x *closedTimestampGetServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *closedTimestampGetServer) Recv() (*Reaction, error) {
	m := new(Reaction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClosedTimestamp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.kv.kvserver.ctupdate.ClosedTimestamp",
	HandlerType: (*ClosedTimestampServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _ClosedTimestamp_Get_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kv/kvserver/closedts/ctpb/service.proto",
}

func init() {
	proto.RegisterFile("kv/kvserver/closedts/ctpb/service.proto", fileDescriptor_service_3096204571c3b264)
}

var fileDescriptor_service_3096204571c3b264 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x13, 0x14, 0x8b, 0x6d, 0x84, 0xc5, 0x6a, 0x91, 0x29, 0x84, 0xd3, 0xab, 0x12, 0xd1,
	0x37, 0x50, 0xc4, 0x5e, 0xac, 0xc4, 0x26, 0x37, 0x37, 0xac, 0xcb, 0xde, 0xed, 0x84, 0x64, 0x0c,
	0xf8, 0x16, 0x3e, 0xd6, 0x95, 0x57, 0x5e, 0xa9, 0xd9, 0x17, 0x91, 0xec, 0x69, 0xa9, 0x76, 0x3f,
	0xff, 0xcc, 0x7c, 0x7c, 0x53, 0x5d, 0xf4, 0xc9, 0xf6, 0x29, 0x52, 0x48, 0x14, 0x2c, 0xae, 0x38,
	0xd2, 0x52, 0xa2, 0x45, 0xf1, 0x0b, 0x5b, 0xca, 0x0e, 0xc9, 0xf8, 0xc0, 0xc2, 0x35, 0x20, 0x63,
	0x1f, 0xd8, 0xe1, 0x8b, 0xe9, 0x93, 0xf9, 0x39, 0x31, 0x28, 0xaf, 0x7e, 0xe9, 0x84, 0x9a, 0xd9,
	0xef, 0x20, 0x1a, 0x24, 0xbc, 0xed, 0x31, 0xcd, 0x49, 0xcb, 0x2d, 0x4f, 0xd1, 0x96, 0xf4, 0xdd,
	0x9e, 0xb6, 0xcc, 0xed, 0x8a, 0xac, 0xf3, 0x9d, 0x75, 0xc3, 0xc0, 0xe2, 0xa4, 0xe3, 0x21, 0xee,
	0xa7, 0x57, 0x5c, 0x1d, 0xdf, 0x4e, 0xc0, 0xc7, 0x6e, 0x4d, 0x51, 0xdc, 0xda, 0xd7, 0xcf, 0xd5,
	0xc1, 0x3d, 0x49, 0x3d, 0x37, 0x7f, 0x5b, 0x99, 0x07, 0x72, 0x58, 0x50, 0xcd, 0xec, 0xbf, 0xcd,
	0xbb, 0x22, 0x79, 0xa6, 0xe6, 0xfa, 0x52, 0xdf, 0x9c, 0x6f, 0x3e, 0x41, 0x6d, 0x32, 0xe8, 0x6d,
	0x06, 0xbd, 0xcb, 0xa0, 0x3f, 0x32, 0xe8, 0xf7, 0x11, 0xd4, 0x76, 0x04, 0xb5, 0x1b, 0x41, 0x3d,
	0x1d, 0x96, 0xc7, 0x16, 0x47, 0x93, 0xdf, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xcb,
	0xa0, 0xcc, 0x45, 0x01, 0x00, 0x00,
}
