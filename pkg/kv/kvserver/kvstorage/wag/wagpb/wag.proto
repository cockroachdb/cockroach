// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package wagpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvstorage/wag/wagpb";

import "gogoproto/gogo.proto";
import "kv/kvserver/kvserverpb/raft.proto";

// EventType defines the type of a replica lifecycle event.
enum EventType {
  // EventEmpty is the "empty" type. Can be used as a nil/no-op indicator. We
  // just have it so that all "real" types are specified explicitly.
  EventEmpty = 0;
  // EventCreate corresponds to a creation of an uninitialized replica. All
  // replicas on a Store go through this transition.
  EventCreate = 1;
  // EventSnap corresponds to initializing/resetting a replica state machine
  // with a snapshot. Happens when an uninitialized replica is initialized, or
  // an initialized replica is caught up on a later applied state. An EventSnap
  // also subsumes replicas (if any) that overlap with this replica in keyspace.
  EventSnap = 2;
  // EventApply corresponds to applying a replica's raft log up to a specific
  // committed index.
  EventApply = 3;
  // EventSplit corresponds to creating a RHS replica as a result of applying a
  // split. Comes in conjunction with EventApply of the replica being split.
  EventSplit = 4;
  // EventMerge corresponds to merging a replica into its immediate LHS
  // neighbour in the keyspace. Comes in conjunction with EventApply of the LHS
  // replica.
  EventMerge = 5;
  // NodeDestroy correspond to destroying the replica and its state machine.
  EventDestroy = 6;
}

// Addr describes the full address of a WAG node, consisting of RangeID,
// ReplicaID, and index into the raft log.
//
// It establishes "happens before" relationships between WAG nodes of a RangeID.
// For example, when applying a node with Addr.ReplicaID, we know that all nodes
// with lower ReplicaIDs (including their destruction), or same ReplicaID and
// lower Index have been applied.
message Addr {
  option (gogoproto.goproto_stringer) = false;

  // RangeID is the ID of the range that the WAG node pertains to.
  int64 range_id = 1 [
    (gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  // ReplicaID is the ID of the RangeID replica that the WAG node pertains to.
  int32 replica_id = 2 [
    (gogoproto.customname) = "ReplicaID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
  // Index identifies the raft log entry associated with this WAG node.
  //  - For EventCreate, it is 0 and signifies an uninitialized replica.
  //  - For EventSnap, it is the index of the snapshot, and the index at which
  //  the raft log is initialized.
  //  - For EventApply, it is the log index identifying a prefix of the raft log.
  //  - For EventSplit, it is the initial index of the RHS replica.
  //  - For EventDestroy and EventMerge, it is MaxUint64.
  uint64 index = 4 [
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftIndex"];
}

message ReplicaEvent {
  // RangeID is the ID of the range that the replica event pertains to.
  int64 range_id = 1 [
    (gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  // Type identifies the type of the replica lifecycle event that this node
  // represents, such as replica creation, destruction, split or merge.
  EventType type = 2;
}

// Node describes a node of the WAG. One WAG node corresponds one lifecycle
// event of a replica (or multiple replicas, when their state needs to be
// synchronized), which can be one of:
//
//  1. Create an uninitialized replica.
//  2. Initialize or advance the replica with a snapshot.
//  3. Apply a committed slice of the replica's raft log.
//  4. Destroy the replica.
//
// In case (3), the Node corresponds to one batch computed by the command
// application stack. Note that it can also touch other replicas, such as when
// it's a split or merge command.
message Node {
  // Addr is the full address of the node, consisting of RangeID, ReplicaID, and
  // index into the raft log.
  Addr addr = 1 [(gogoproto.nullable) = false];
  // Mutation contains the mutation that will be applied to the state machine
  // engine when applying this WAG node.
  Mutation mutation = 2 [(gogoproto.nullable) = false];

  // Event contains the "main" replica lifecycle event associated with this WAG
  // node, i.e. the one that happens with the replica referenced by Addr.
  ReplicaEvent event = 3 [(gogoproto.nullable) = false];

  // Events contains the replica lifecycle events associated with this WAG node
  // that are done in lock-step with the "main" event. These may happen with the
  // replica identified by Addr, and/or other replicas. For example, a replica
  // split/merge contains an EventSplit/EventMerge of the RHS replica.
  //
  // Events are mostly informational, but they will be used at WAG replay time,
  // as hints on when to load and unload created/destroyed replicas state.
  repeated ReplicaEvent events = 4 [(gogoproto.nullable) = false];
}

// Mutation contains a mutation to be applied to the state machine engine. It
// can be represented by an encoded Pebble write batch and/or an ingestion.
//
// If the Mutation contains both an ingestion and a write batch, then the
// ingestion is applied first. Ingestions are expected to be idempotent
// (practically, they only update the MVCC keyspace), due to the fact that they
// can't be applied atomically with the batch and may need to be replayed.
message Mutation {
  // Batch contains an encoded Pebble write batch.
  bytes batch = 1;
  // Ingestion contains a Pebble ingestion.
  Ingestion ingestion = 2;
}

// Ingestion describes a Pebble ingestion.
message Ingestion {
  repeated string SSTs = 1;
  repeated cockroach.kv.kvserver.kvserverpb.SnapshotRequest.SharedTable shared_tables = 2 [
    (gogoproto.nullable) = false];
  repeated cockroach.kv.kvserver.kvserverpb.SnapshotRequest.ExternalTable external_tables = 3 [
    (gogoproto.nullable) = false];

  // TODO(pav-kv): add the excise span, to mirror the IngestAndExciseFiles call
  // on storage.Engine.
}
