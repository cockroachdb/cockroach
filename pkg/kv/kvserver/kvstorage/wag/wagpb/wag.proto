syntax = "proto3";
package wagpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvstorage/wagpb";

import "gogoproto/gogo.proto";
import "kv/kvserver/kvserverpb/raft.proto";
import "roachpb/data.proto";

enum NodeType {
  NodeEmpty   = 0;
  NodeCreate  = 1;
  NodeSnap    = 2;
  NodeApply   = 3;
  NodeSplit   = 4;
  NodeMerge   = 5;
  NodeDestroy = 6;
}

// Addr describes the full address of a WAG node, consisting of RangeID,
// ReplicaID, LogID and index into the raft log.
//
// It establishes "happens before" relationships between WAG nodes of a RangeID.
// For example, when applying a node with Addr.LogID, we know that all nodes
// with lower LogIDs (including their destruction), or same LogID and lower
// Index have been applied.
message Addr {
  // RangeID is the ID of the range that owns the node.
  int64 range_id = 1 [
    (gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  // ReplicaID is the ID of the RangeID replica that owns the node.
  int32 replica_id = 2 [
    (gogoproto.customname) = "ReplicaID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
  // LogID is the raft log ID that owns the node.
  int64 log_id = 3 [
    (gogoproto.customname) = "LogID"];
  // Index identifies the raft log entry associated with this WAG node.
  //  - For NodeCreate, it is 0 and signifies an uninitialized replica.
  //  - For NodeSnap, it is the index of the snapshot, and the index at which
  //  the raft log is initialized.
  //  - For NodeApply, it is the log index identifying a prefix of the raft log.
  //  - For NodeSplit and NodeMerge, it identifies the raft log command
  //  containing the corresponding split/merge trigger.
  //  - For NodeDestroy, it is MaxUint64.
  uint64 index = 4 [
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftIndex"];
}

// Node describes a node of the WAG.
message Node {
  // Addr is the full address of the node, consisting of RangeID, ReplicaID,
  // LogID and index into the raft log.
  Addr addr = 1 [(gogoproto.nullable) = false];
  // Type identifies the type of the replica lifecycle event that this node
  // represents, such as replica creation, destruction, split or merge.
  NodeType type = 2;
  // Batch contains the mutation that will be applied to the state machine
  // engine when applying this WAG node.
  Batch batch = 3 [(gogoproto.nullable) = false];

  // Create is the RangeID that this node brings to existence in the state
  // machine, or 0 if the node does not create new ranges. It is non-zero for
  // NodeCreate and NodeSplit.
  int64 create = 4 [
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  // Destroy contains the RangeIDs that this node removes from the state
  // machine, because they are known to have been merged.
  // - For NodeMerge, it contains the ID of the RHS range being merged.
  // - For NodeSnap, it contains the list of subsumed ranges.
  repeated int64 destroy = 5 [
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
}

// Batch contains a mutation that can be applied to the state machine engine. It
// can be represented by an encoded Pebble write batch or SSTable ingestion.
message Batch {
  // Data contains an encoded Pebble write batch.
  bytes data = 1;
  // Ingestion contains a Pebble ingestion.
  Ingestion ingestion = 2;
}

// Ingestion describes a Pebble ingestion.
message Ingestion {
  repeated string SSTs = 1;
  repeated cockroach.kv.kvserver.kvserverpb.SnapshotRequest.SharedTable shared_tables = 2;
  repeated cockroach.kv.kvserver.kvserverpb.SnapshotRequest.ExternalTable external_tables = 3;
  // TODO: excise span
}
