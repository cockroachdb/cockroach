// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.kv.kvserver.liveness.livenesspb;
option go_package = "livenesspb";

import "util/hlc/legacy_timestamp.proto";
import "gogoproto/gogo.proto";

// Liveness holds information about a node's latest heartbeat and epoch.
//
// NOTE: 20.2 encodes this proto and uses it for CPut operations, so its
// encoding can't change until 21.2. 21.1 has moved away from the bad practice.
// In 21.2 we should replace the LegacyTimestamp field with a regular Timestamp.
message Liveness {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;
  option (gogoproto.goproto_stringer) = false;

  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  // Epoch is a monotonically-increasing value for node liveness. It
  // may be incremented if the liveness record expires (current time
  // is later than the expiration timestamp).
  int64 epoch = 2;
  // The timestamp at which this liveness record expires. The logical part of
  // this timestamp is zero.
  //
  // Note that the clock max offset is not accounted for in any way when this
  // expiration is set. If a checker wants to be extra-optimistic about another
  // node being alive, it can adjust for the max offset. liveness.IsLive()
  // doesn't do that, however. The expectation is that the expiration duration
  // is large in comparison to the max offset, and that nodes heartbeat their
  // liveness records well in advance of this expiration, so the optimism or
  // pessimism of a checker does not matter very much.
  //
  // TODO(andrei): Change this to a regular Timestamp field in 21.2. This work
  // has started in #56190.
  util.hlc.LegacyTimestamp expiration = 3 [(gogoproto.nullable) = false];
  bool draining = 4;

  // MembershipStatus (one of "active", "decommissioning", "decommissioned")
  // is the membership status of the given node.
  //
  // NB: This field was upgraded from a boolean `decommissioning` field that
  // didn't explicitly capture the fully decommissioned state. Care was taken in
  // the defining MembershipStatus to be on-the-wire compatible with the boolean
  // representation.
  MembershipStatus membership = 5;
}

// MembershipStatus enumerates the possible membership states a node could in.
//
//    +--------------------+                                        +--------------------+
//    |                    |     cockroach node decommission        |                    |
//    |                    |--------------------------------------->|                    |
//    |       Active       |                                        |  Decommissioning   |
//    |                    |<---------------------------------------|                    |
//    |                    |     cockroach node recommission        |                    |
//    +--------------------+                                        +--------------------+
//                                                                             |
//                                                                             |
//                                                                             |
//                                                                             |
//                                                                             |
//                                                                             v
//                                                                  +--------------------+
//                                                                  |                    |
//                                                                  |                    |
//                                                                  |   Decommissioned   |
//                                                                  |                    |
//                                                                  |                    |
//                                                                  +--------------------+
//
// Note that we've intentionally elided a 'recommissioning' state. To
// recommission a node is to simply cancel an inflight decommissioning process,
// which we do by persisting the appropriate membership status in the liveness
// record. It then makes no sense to bother with persisting an explicit
// in-progress state.
enum MembershipStatus {
  option (gogoproto.goproto_enum_stringer) = false;
  // Active represents a node that is an active member of the cluster, and is
  // neither decommissioning nor fully decommissioned.
  ACTIVE = 0;

  // Decommissioning represents a node that we've only started decommissioning,
  // but has not yet fully decommissioned. It is safe to recommission it during
  // this time in order to cancel the inflight decommissioning process.
  DECOMMISSIONING = 1;

  // Decommissioned represents a node that has been fully decommissioned. It
  // will no longer be allowed to join the cluster.
  //
  // TODO(irfansharif): We don't disallow the joining as yet (but will come in
  // as part of the Connect RPC subsystem).
  DECOMMISSIONED = 2;
}

// NodeLivenessStatus describes the status of a node from the perspective of the
// liveness system. See comment on LivenessStatus() for a description of the
// states.
//
// TODO(irfansharif): We should reconsider usage of NodeLivenessStatus.
// It's unclear if the enum is well considered. It enumerates across two
// distinct set of things: the "membership" status (live/active,
// decommissioning, decommissioned), and the node "process" status (live,
// unavailable, available). It's possible for two of these "states" to be true,
// simultaneously (consider a decommissioned, dead node). It makes for confusing
// semantics, and the code attempting to disambiguate across these states
// (kvserver.LivenessStatus() for e.g.) seem wholly arbitrary.
//
// See #50707 for more details.
enum NodeLivenessStatus {
  NODE_STATUS_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UNKNOWN"];
  // DEAD indicates the node is considered dead.
  NODE_STATUS_DEAD = 1 [(gogoproto.enumvalue_customname) = "DEAD"];
  // UNAVAILABLE indicates that the node is unavailable - it has not updated its
  // liveness record recently enough to be considered live, but has not been
  // unavailable long enough to be considered dead.
  NODE_STATUS_UNAVAILABLE = 2 [(gogoproto.enumvalue_customname) = "UNAVAILABLE"];
  // LIVE indicates a live node.
  NODE_STATUS_LIVE = 3 [(gogoproto.enumvalue_customname) = "LIVE"];
  // DECOMMISSIONING indicates a node that is in the decommissioning process.
  NODE_STATUS_DECOMMISSIONING = 4 [(gogoproto.enumvalue_customname) = "DECOMMISSIONING"];
  // DECOMMISSIONED indicates a node that has finished the decommissioning
  // process.
  NODE_STATUS_DECOMMISSIONED = 5 [(gogoproto.enumvalue_customname) = "DECOMMISSIONED"];
  // DRAINING indicates a node that is in the process of draining.
  NODE_STATUS_DRAINING = 6 [(gogoproto.enumvalue_customname) = "DRAINING"];
}
