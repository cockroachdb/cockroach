load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
# load("@go_generics//tools/go_generics:defs.bzl", "go_template_instance")

go_library(
    name = "concurrency",
    srcs = [
        "concurrency_control.go",
        "concurrency_manager.go",
        "latch_manager.go",
        "lock_table.go",
        "lock_table_waiter.go",
        "lockstate_interval_btree.go",
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/concurrency",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/keys",
        "//pkg/kv",
        "//pkg/kv/kvserver/concurrency/lock",
        "//pkg/kv/kvserver/intentresolver",
        "//pkg/kv/kvserver/kvserverpb",
        "//pkg/kv/kvserver/spanlatch",
        "//pkg/kv/kvserver/spanset",
        "//pkg/kv/kvserver/txnwait",
        "//pkg/roachpb",
        "//pkg/settings",
        "//pkg/settings/cluster",
        "//pkg/storage/enginepb",
        "//pkg/util/hlc",
        "//pkg/util/log",
        "//pkg/util/metric",
        "//pkg/util/stop",
        "//pkg/util/syncutil",
        "//pkg/util/timeutil",
        "//pkg/util/tracing",
        "//pkg/util/uuid",
        "@com_github_cockroachdb_errors//:errors",
    ],
)

go_test(
    name = "concurrency_test",
    srcs = [
        "concurrency_manager_test.go",
        "datadriven_util_test.go",
        "lock_table_test.go",
        "lock_table_waiter_test.go",
        "lockstate_interval_btree_test.go",
    ],
    data = glob(["testdata/**"]),
    embed = [":concurrency"],
    deps = [
        "//pkg/keys",
        "//pkg/kv/kvserver/batcheval",
        "//pkg/kv/kvserver/concurrency/lock",
        "//pkg/kv/kvserver/intentresolver",
        "//pkg/kv/kvserver/spanlatch",
        "//pkg/kv/kvserver/spanset",
        "//pkg/kv/kvserver/txnwait",
        "//pkg/roachpb",
        "//pkg/settings/cluster",
        "//pkg/storage/enginepb",
        "//pkg/testutils",
        "//pkg/util/hlc",
        "//pkg/util/leaktest",
        "//pkg/util/log",
        "//pkg/util/stop",
        "//pkg/util/syncutil",
        "//pkg/util/timeutil",
        "//pkg/util/tracing",
        "//pkg/util/uint128",
        "//pkg/util/uuid",
        "@com_github_cockroachdb_datadriven//:datadriven",
        "@com_github_cockroachdb_errors//:errors",
        "@com_github_maruel_panicparse//stack",
        "@com_github_petermattis_goid//:goid",
        "@com_github_stretchr_testify//require",
        "@org_golang_x_exp//rand",
        "@org_golang_x_sync//errgroup",
    ],
)

# go_template_instance(
#     name = "interval_btree",
#     out = "interval_btree_tmpl.go",
#     package = "concurrency",
#     # prefix = "deferred",
#     template = "//pkg/util/interval/generic/internal",
#     types = {
#         "T": "*lockState",
#     },
# )

genrule(
    name = "gen-lockstate-go",
    srcs = [
        "//pkg/util/interval/generic/internal:contract.go",
        "//pkg/util/interval/generic/internal:interval_btree_tmpl.go",
        "//pkg/util/interval/generic/internal:interval_btree_tmpl_test.go",
    ],
    outs = ["lockstate_interval_btree.go"],
    cmd = """
      $(location //pkg/util/interval/generic:gen-binary) *lockState concurrency \
      $(location //pkg/util/interval/generic/internal:contract.go) $(location @com_github_go_generics//cmd/go_generics)  \
      $(location //pkg/util/interval/generic/internal:interval_btree_tmpl.go) $(location //pkg/util/interval/generic/internal:interval_btree_tmpl_test.go)
    """,
    tools = [
        "//pkg/util/interval/generic:gen-binary",
        "@com_github_go_generics//cmd/go_generics",
    ],
)

# $(location @org_golang_x_tools//cmd/goyacc)

# $(location @org_golang_x_tools//cmd/goyacc)
