// Copyright 2022 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.kv.kvserver.concurrency.lock;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/concurrency/lock";

import "kv/kvserver/concurrency/lock/locking.proto";
import "storage/enginepb/mvcc3.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

// Waiter represents a transaction (or non-transactional operation) that is
// waiting in the wait queue of readers or writers on an individual lock.
message Waiter {
  // The transaction associated with this waiter, or nil in the case of a
  // non-transactional waiter.
  storage.enginepb.TxnMeta waiting_txn = 1;
  // Represents if this operation is actively waiting on the lock.  While all
  // readers are active waiters, there are some cases in which writers may not
  // be actively waiting, for instance in the case of a broken reservation.
  bool active_waiter = 2;
  // The strength at which this waiter is attempting to acquire the lock.
  Strength strength = 3;
  // The wall clock duration since this operation began waiting on the lock.
  google.protobuf.Duration wait_duration = 4 [(gogoproto.nullable) = false,
    (gogoproto.stdduration) = true];
}
