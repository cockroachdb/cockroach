# -------------------------------------------------------------
# Read-only request runs into replicated intent. It informs the
# lock table and waits for the intent to be resolved.
# -------------------------------------------------------------

new-txn name=txn1 ts=10,1 epoch=0
----

new-txn name=txn2 ts=12,1 epoch=0
----

new-request name=req1 txn=txn2 ts=12,1
  get key=k
----

sequence req=req1
----
[1] sequence req1: sequencing request
[1] sequence req1: acquiring latches
[1] sequence req1: scanning lock table for conflicting locks
[1] sequence req1: sequencing complete, returned guard

handle-write-intent-error req=req1 txn=txn1 key=k
----
[-] handle write intent error req1: handling conflicting intents on "k"

debug-lock-table
----
global: num=1
 lock: "k"
  holder: txn: 00000001-0000-0000-0000-000000000000, ts: 0.000000010,1, info: repl epoch: 0, seqs: [0]
local: num=0

sequence req=req1
----
[2] sequence req1: re-sequencing request
[2] sequence req1: acquiring latches
[2] sequence req1: scanning lock table for conflicting locks
[2] sequence req1: waiting in lock wait-queues
[2] sequence req1: pushing txn 00000001
[2] sequence req1: blocked on select in concurrency_test.(*cluster).PushTransaction

on-txn-updated txn=txn1 status=aborted
----
[-] update txn: aborting txn1
[2] sequence req1: resolving intent "k" for txn 00000001 with ABORTED status
[2] sequence req1: acquiring latches
[2] sequence req1: scanning lock table for conflicting locks
[2] sequence req1: sequencing complete, returned guard

finish req=req1
----
[-] finish req1: finishing request

reset
----
