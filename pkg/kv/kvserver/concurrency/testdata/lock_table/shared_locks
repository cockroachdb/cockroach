new-lock-table maxlocks=10000
----

new-txn txn=txn1 ts=10 epoch=0 seq=0
----

new-txn txn=txn2 ts=10 epoch=0 seq=0
----

new-txn txn=txn3 ts=10 epoch=0 seq=0
----

new-txn txn=txn4 ts=10 epoch=0 seq=0
----

new-request r=req1 txn=txn1 ts=10 spans=shared@a
----

acquire r=req1 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holder: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

# ------------------------------------------------------------------------------
# Ensure conflict resolution semantics for shared locks are sane -- that is,
# if a shared lock is held on a key, {shared, non} locking requests are allowed
# to proceed; {intent, exclusive} locking requests are not.
# ------------------------------------------------------------------------------

new-request r=req2 txn=txn2 ts=10 spans=none@a
----

scan r=req2
----
start-waiting: false

new-request r=req3 txn=txn2 ts=10 spans=shared@a
----

# req3 should not actively wait, as it's locking strength is shared, but it
# should be able to acquire a joint claim.
scan r=req3
----
start-waiting: false

# Another shared locking request should be able to acquire a joint claim as
# well.
new-request r=req4 txn=txn2 ts=10 spans=shared@a
----

scan r=req4
----
start-waiting: false

print
----
num=1
 lock: "a"
  holder: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: false req: 2, txn: 00000000-0000-0000-0000-000000000002
    active: false req: 3, txn: 00000000-0000-0000-0000-000000000002

acquire r=req3 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

# Re-acquisition of the shared lock by req4 should work as well.
acquire r=req4 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]


new-request r=req5 txn=txn2 ts=10 spans=exclusive@a
----

scan r=req5
----
start-waiting: true

new-request r=req6 txn=txn2 ts=10 spans=intent@a
----

scan r=req6
----
start-waiting: true

print
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 4, txn: 00000000-0000-0000-0000-000000000002
    active: true req: 5, txn: 00000000-0000-0000-0000-000000000002
   distinguished req: 4

# ------------------------------------------------------------------------------
# Ensure requests with locking strength shared actively wait if there are active
# waiters with conflicting lock strengths (even though the lock itself is
# compatible with the shared lock request).
# ------------------------------------------------------------------------------

new-request r=req7 txn=txn3 ts=10 spans=shared@a
----

scan r=req7
----
start-waiting: true

print
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 4, txn: 00000000-0000-0000-0000-000000000002
    active: true req: 5, txn: 00000000-0000-0000-0000-000000000002
    active: true req: 6, txn: 00000000-0000-0000-0000-000000000003
   distinguished req: 4

# However, if the shared lock is held by the transaction itself, it doesn't need
# to actively wait.

new-request r=req8 txn=txn2 ts=10 spans=shared@a
----

scan r=req8
----
start-waiting: false

print
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 4, txn: 00000000-0000-0000-0000-000000000002
    active: true req: 5, txn: 00000000-0000-0000-0000-000000000002
    active: true req: 6, txn: 00000000-0000-0000-0000-000000000003
   distinguished req: 4

# ------------------------------------------------------------------------------
# Ensure a key is locked with SHARED locking strength  until the all
# transactions that hold SHARED LOCKs have released it.
# ------------------------------------------------------------------------------

clear
----
num=0

# Acquire SHARED locks using 3 transactions.
new-request r=req9 txn=txn1 ts=10 spans=shared@a
----

scan r=req9
----
start-waiting: false

acquire r=req9 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holder: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

new-request r=req10 txn=txn2 ts=10 spans=shared@a
----

scan r=req10
----
start-waiting: false

acquire r=req10 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

acquire r=req10 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

new-request r=req11 txn=txn3 ts=10 spans=shared@a
----

scan r=req11
----
start-waiting: false

acquire r=req11 k=a durability=u strength=shared
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000003 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]

new-request r=req12 txn=txn4 ts=10 spans=exclusive@a
----

scan r=req12
----
start-waiting: true

print
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000001 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000003 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 11, txn: 00000000-0000-0000-0000-000000000004
   distinguished req: 11

# Start releasing the shared locks, one by one.

release txn=txn1 span=a
----
num=1
 lock: "a"
  holders: txn: 00000000-0000-0000-0000-000000000002 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
           txn: 00000000-0000-0000-0000-000000000003 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 11, txn: 00000000-0000-0000-0000-000000000004
   distinguished req: 11

release txn=txn2 span=a
----
num=1
 lock: "a"
  holder: txn: 00000000-0000-0000-0000-000000000003 epoch: 0, iso: Serializable, ts: 10.000000000,0, info: unrepl [(str: Shared seq: 0)]
   queued writers:
    active: true req: 11, txn: 00000000-0000-0000-0000-000000000004
   distinguished req: 11

# Now that all shared locks have been released, the exclusive locking request is
# free to proceed.
release txn=txn3 span=a
----
num=1
 lock: "a"
   queued writers:
    active: false req: 11, txn: 00000000-0000-0000-0000-000000000004
