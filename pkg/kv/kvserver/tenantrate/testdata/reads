# This tests bursting and how requests above the burst limit put the limiter
# into debt

init
rate:  2
burst: 4
read:  { base: 1, perbyte: 0.1 }
write: { base: 1, perbyte: 0.1 }
----
00:00:00.000

get_tenants
- 1
- 2
----
[2#1, system#1]

# Read the entire burst worth of bytes plus 0.4 which should put the limiter
# in debt by 0.4. Also record a system read. We'll verify both show up in metrics.

record_read
- { tenant: 2, readbytes: 34 }
- { tenant: 1, readbytes: 10 }
----
[]

# Verify that the above reads made it to the metrics.

metrics
kv_tenant_rate_limit_read_bytes_admitted
----
kv_tenant_rate_limit_read_bytes_admitted 44
kv_tenant_rate_limit_read_bytes_admitted{tenant_id="2"} 34
kv_tenant_rate_limit_read_bytes_admitted{tenant_id="system"} 10

# Launch a request which will block because it needs 1 unit.

launch
- { id: g1, tenant: 2 }
----
[g1@2]

timers
----
00:00:00.200

# Record more reads, putting the limiter further into debt.

record_read
- { tenant: 2, readbytes: 16 }
----
[g1@2]

# Note that the head of the queue will not be notified immediately but rather
# will be notified when its previous timer expires. If it were notified every
# time reads occurred it could be quite inefficient.

timers
----
00:00:00.200

# Note that the head of the queue notices the removal of readbytes and sets a
# new timer.

advance
201ms
----
00:00:00.201

timers
----
00:00:01.000

advance
800ms
----
00:00:01.001

await
- g1
----
[]



