# This tests bursting and how requests above the burst limit put the limiter
# into debt.

init
rate:  1
burst: 2
read:  { base: 1, perbyte: 0.1 }
write: { base: 1, perbyte: 0.1 }
----
00:00:00.000

# Set up a limiter for tenant 2.

get_tenants
- 2
----
[2#1]

# Launch a write request for tenant 2 that needs 3 units, more than the burst
# limit. This will not block but will put the limiter into debt.

launch
- { id: g1, tenant: 2, iswrite: true, writebytes: 20 }
----
[g1@2]

await
- g1
----
[]

# Launch another request which will block until there is 1 unit available.
# This will be 2s because we're in debt 1 and the rate is 1/s.

launch
- { id: g2, tenant: 2, iswrite: true, writebytes: 0 }
----
[g2@2]

# Observe that the request indeed sees two seconds of waiting.

timers
----
00:00:02.000

# Advance time to unblock the above request.

advance
1s999ms
----
00:00:01.999

advance
1ms
----
00:00:02.000

# Ensure that the request is indeed unblocked.

await
- g2
----
[]

# Test that when consuming more than burst that we wait for the token bucket to
# be full. At time 4s the token bucket will be full. When requesting 4, which
# is above the burst of 2, we'll need to wait for the bucket to be full.

launch
- { id: g3,  tenant: 2, iswrite: true, writebytes: 30 }
----
[g3@2]

# Verify that the timer exists to avoid races setting the timer and advancing
# time.

timers
----
00:00:04.000

advance
2s
----
00:00:04.000

await
- g3
----
[]
