// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/protectedts/ptpb/protectedts.proto

package ptpb

import (
	fmt "fmt"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ProtectionMode defines the semantics of a Record.
type ProtectionMode int32

const (
	// PROTECT_AFTER ensures that all data values live at or after the specified
	// timestamp will be protected from GC.
	PROTECT_AFTER ProtectionMode = 0
)

var ProtectionMode_name = map[int32]string{
	0: "PROTECT_AFTER",
}

var ProtectionMode_value = map[string]int32{
	"PROTECT_AFTER": 0,
}

func (x ProtectionMode) String() string {
	return proto.EnumName(ProtectionMode_name, int32(x))
}

func (ProtectionMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{0}
}

// Metadata is the system metadata. The metadata is stored explicitly and all
// operations which create or release Records increment the version and update
// the metadata fields accordingly.
//
// The version provides a mechanism for cheap caching and forms the basis of
// the implementation of the Tracker. The Tracker needs to provide a recent
// view of the protectedts subsystem for GC to proceed. The protectedts
// state changes rarely. The timestamp of cached state can by updated by
// merely observing that the version has not changed.
type Metadata struct {
	// Version is incremented whenever a Record is created or removed.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// NumRecords is the number of records which exist in the subsystem.
	NumRecords uint64 `protobuf:"varint,2,opt,name=num_records,json=numRecords,proto3" json:"num_records,omitempty"`
	// NumSpans is the number of spans currently being protected by the
	// protectedts subsystem.
	NumSpans uint64 `protobuf:"varint,3,opt,name=num_spans,json=numSpans,proto3" json:"num_spans,omitempty"`
	// TotalBytes is the number of bytes currently in use by records
	// to store their spans and metadata.
	TotalBytes uint64 `protobuf:"varint,4,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

// Record corresponds to a protected timestamp.
type Record struct {
	// ID uniquely identifies this row.
	ID github_com_cockroachdb_cockroach_pkg_util_uuid.Bytes `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/cockroachdb/cockroach/pkg/util/uuid.Bytes" json:"id,omitempty"`
	// Timestamp is the timestamp which is protected.
	Timestamp hlc.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp"`
	// Mode specifies whether this record protects all values live at timestamp
	// or all values live at or after that timestamp.
	Mode ProtectionMode `protobuf:"varint,3,opt,name=mode,proto3,enum=cockroach.protectedts.ProtectionMode" json:"mode,omitempty"`
	// MetaType is used to interpret the data stored in Meta.
	// Users of Meta should set a unique value for MetaType which provides enough
	// information to interpret the data in Meta. See the comment on Meta for how
	// these two fields should be used in tandem.
	MetaType string `protobuf:"bytes,4,opt,name=meta_type,json=metaType,proto3" json:"meta_type,omitempty"`
	// Meta is client-provided metadata about the record.
	// This data allows the Record to be correlated with data from another
	// subsystem. For example, this field may contain the ID of a job which
	// created this record. The metadata allows an out-of-band reconciliation
	// process to discover and remove records which no longer correspond to
	// running jobs. Such a mechanism acts as a failsafe against unreliable
	// jobs infrastructure.
	Meta []byte `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	// Verified marks that this Record is known to have successfully provided
	// protection. It is updated after Verification. Updates to this field do not
	// change the Version of the subsystem.
	Verified bool `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	// DeprecatedSpans are the spans which this Record protects.
	DeprecatedSpans []roachpb.Span `protobuf:"bytes,7,rep,name=deprecated_spans,json=deprecatedSpans,proto3" json:"deprecated_spans"`
	// Target holds information about what this Record protects. The Record can
	// either protect the entire cluster, a subset of tenants, or individual
	// schema objects (database and table).
	//
	// Types that are valid to be assigned to Target:
	//	*Record_SchemaObjects
	//	*Record_Tenants
	//	*Record_Cluster
	Target isRecord_Target `protobuf_oneof:"target"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{1}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type isRecord_Target interface {
	isRecord_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Record_SchemaObjects struct {
	SchemaObjects *Record_SchemaObjectsTarget `protobuf:"bytes,8,opt,name=schema_objects,json=schemaObjects,proto3,oneof" json:"schema_objects,omitempty"`
}
type Record_Tenants struct {
	Tenants *Record_TenantsTarget `protobuf:"bytes,9,opt,name=tenants,proto3,oneof" json:"tenants,omitempty"`
}
type Record_Cluster struct {
	Cluster *Record_ClusterTarget `protobuf:"bytes,10,opt,name=cluster,proto3,oneof" json:"cluster,omitempty"`
}

func (*Record_SchemaObjects) isRecord_Target() {}
func (*Record_Tenants) isRecord_Target()       {}
func (*Record_Cluster) isRecord_Target()       {}

func (m *Record) GetTarget() isRecord_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Record) GetSchemaObjects() *Record_SchemaObjectsTarget {
	if x, ok := m.GetTarget().(*Record_SchemaObjects); ok {
		return x.SchemaObjects
	}
	return nil
}

func (m *Record) GetTenants() *Record_TenantsTarget {
	if x, ok := m.GetTarget().(*Record_Tenants); ok {
		return x.Tenants
	}
	return nil
}

func (m *Record) GetCluster() *Record_ClusterTarget {
	if x, ok := m.GetTarget().(*Record_Cluster); ok {
		return x.Cluster
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Record) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Record_SchemaObjects)(nil),
		(*Record_Tenants)(nil),
		(*Record_Cluster)(nil),
	}
}

type Record_SchemaObjectsTarget struct {
	// IDs are the descriptor IDs of the schema objects being protected by this
	// Record. This field will only contain database and table IDs.
	IDs []github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,rep,packed,name=ids,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"ids,omitempty"`
}

func (m *Record_SchemaObjectsTarget) Reset()         { *m = Record_SchemaObjectsTarget{} }
func (m *Record_SchemaObjectsTarget) String() string { return proto.CompactTextString(m) }
func (*Record_SchemaObjectsTarget) ProtoMessage()    {}
func (*Record_SchemaObjectsTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{1, 0}
}
func (m *Record_SchemaObjectsTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record_SchemaObjectsTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Record_SchemaObjectsTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record_SchemaObjectsTarget.Merge(m, src)
}
func (m *Record_SchemaObjectsTarget) XXX_Size() int {
	return m.Size()
}
func (m *Record_SchemaObjectsTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Record_SchemaObjectsTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Record_SchemaObjectsTarget proto.InternalMessageInfo

type Record_TenantsTarget struct {
	// IDs are the tenant IDs being protected by this Record.
	IDs []*roachpb.TenantID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *Record_TenantsTarget) Reset()         { *m = Record_TenantsTarget{} }
func (m *Record_TenantsTarget) String() string { return proto.CompactTextString(m) }
func (*Record_TenantsTarget) ProtoMessage()    {}
func (*Record_TenantsTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{1, 1}
}
func (m *Record_TenantsTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record_TenantsTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Record_TenantsTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record_TenantsTarget.Merge(m, src)
}
func (m *Record_TenantsTarget) XXX_Size() int {
	return m.Size()
}
func (m *Record_TenantsTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Record_TenantsTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Record_TenantsTarget proto.InternalMessageInfo

type Record_ClusterTarget struct {
}

func (m *Record_ClusterTarget) Reset()         { *m = Record_ClusterTarget{} }
func (m *Record_ClusterTarget) String() string { return proto.CompactTextString(m) }
func (*Record_ClusterTarget) ProtoMessage()    {}
func (*Record_ClusterTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{1, 2}
}
func (m *Record_ClusterTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record_ClusterTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Record_ClusterTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record_ClusterTarget.Merge(m, src)
}
func (m *Record_ClusterTarget) XXX_Size() int {
	return m.Size()
}
func (m *Record_ClusterTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_Record_ClusterTarget.DiscardUnknown(m)
}

var xxx_messageInfo_Record_ClusterTarget proto.InternalMessageInfo

// State is the complete system state.
type State struct {
	Metadata `protobuf:"bytes,1,opt,name=metadata,proto3,embedded=metadata" json:"metadata"`
	Records  []Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_785be6b93040d650, []int{2}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.protectedts.ProtectionMode", ProtectionMode_name, ProtectionMode_value)
	proto.RegisterType((*Metadata)(nil), "cockroach.protectedts.Metadata")
	proto.RegisterType((*Record)(nil), "cockroach.protectedts.Record")
	proto.RegisterType((*Record_SchemaObjectsTarget)(nil), "cockroach.protectedts.Record.SchemaObjectsTarget")
	proto.RegisterType((*Record_TenantsTarget)(nil), "cockroach.protectedts.Record.TenantsTarget")
	proto.RegisterType((*Record_ClusterTarget)(nil), "cockroach.protectedts.Record.ClusterTarget")
	proto.RegisterType((*State)(nil), "cockroach.protectedts.State")
}

func init() {
	proto.RegisterFile("kv/kvserver/protectedts/ptpb/protectedts.proto", fileDescriptor_785be6b93040d650)
}

var fileDescriptor_785be6b93040d650 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x26, 0x25, 0x59, 0xa2, 0x56, 0x95, 0xed, 0x6e, 0x5b, 0x94, 0x90, 0x5b, 0x52, 0x70, 0xd1,
	0x42, 0x6d, 0x01, 0x12, 0x55, 0x8b, 0x02, 0x2d, 0xd0, 0x02, 0xa6, 0xa5, 0xd8, 0x3a, 0x38, 0x36,
	0x68, 0x01, 0x01, 0x7c, 0x11, 0x96, 0xe4, 0x86, 0x62, 0x44, 0x72, 0x19, 0xee, 0x52, 0x80, 0xcf,
	0xb9, 0xe4, 0x12, 0x20, 0xef, 0x90, 0x07, 0xc8, 0x6b, 0xf8, 0xe8, 0xa3, 0x4f, 0x42, 0x22, 0xbf,
	0x85, 0x4f, 0xc1, 0x2e, 0xa9, 0x1f, 0xc7, 0x76, 0xe0, 0xdb, 0xec, 0xec, 0xf7, 0x7d, 0xdc, 0xf9,
	0x66, 0x86, 0xc0, 0x98, 0x4c, 0xcd, 0xc9, 0x94, 0xe2, 0x74, 0x8a, 0x53, 0x33, 0x49, 0x09, 0xc3,
	0x2e, 0xc3, 0x1e, 0xa3, 0x66, 0xc2, 0x12, 0x67, 0x3d, 0x61, 0xf0, 0x98, 0xc0, 0xef, 0x5c, 0xe2,
	0x4e, 0x52, 0x82, 0xdc, 0xb1, 0xb1, 0x76, 0xd9, 0xfa, 0xd6, 0x27, 0x3e, 0x11, 0x08, 0x93, 0x47,
	0x39, 0xb8, 0xf5, 0x83, 0x4f, 0x88, 0x1f, 0x62, 0x13, 0x25, 0x81, 0x89, 0xe2, 0x98, 0x30, 0xc4,
	0x02, 0x12, 0x17, 0x52, 0x2d, 0x28, 0x64, 0x12, 0xc7, 0xf4, 0x10, 0x43, 0x45, 0x4e, 0xcd, 0x58,
	0x10, 0x9a, 0xe3, 0xd0, 0x35, 0x59, 0x10, 0x61, 0xca, 0x50, 0x94, 0x14, 0x37, 0x3f, 0xd1, 0x97,
	0xa1, 0xe9, 0x22, 0x86, 0x42, 0xe2, 0x9b, 0x1e, 0xa6, 0x6e, 0xe2, 0x98, 0x94, 0xa5, 0x99, 0xcb,
	0xb2, 0x14, 0x7b, 0x39, 0x68, 0xf7, 0x95, 0x0c, 0x94, 0x23, 0xcc, 0x10, 0x57, 0x84, 0x2a, 0xa8,
	0x4d, 0x71, 0x4a, 0x03, 0x12, 0xab, 0x72, 0x5b, 0xee, 0x54, 0xec, 0xc5, 0x11, 0xea, 0xa0, 0x11,
	0x67, 0xd1, 0x28, 0xc5, 0x2e, 0x49, 0x3d, 0xaa, 0x96, 0xc4, 0x2d, 0x88, 0xb3, 0xc8, 0xce, 0x33,
	0x70, 0x07, 0xd4, 0x39, 0x80, 0x26, 0x28, 0xa6, 0x6a, 0x59, 0x5c, 0x2b, 0x71, 0x16, 0x9d, 0xf2,
	0x33, 0x67, 0x33, 0xc2, 0x50, 0x38, 0x72, 0xce, 0x19, 0xa6, 0x6a, 0x25, 0x67, 0x8b, 0x94, 0xc5,
	0x33, 0xbb, 0xef, 0xab, 0xa0, 0x9a, 0x2b, 0xc1, 0xa7, 0xa0, 0x14, 0x78, 0xe2, 0xf3, 0x5f, 0x59,
	0xff, 0xcf, 0x67, 0x7a, 0x69, 0xd0, 0xbb, 0x99, 0xe9, 0x7f, 0xf9, 0x01, 0x1b, 0x67, 0x8e, 0xe1,
	0x92, 0xc8, 0x5c, 0xfa, 0xe9, 0x39, 0xab, 0xd8, 0x4c, 0x26, 0xbe, 0x29, 0xac, 0xc8, 0xb2, 0xc0,
	0x33, 0x84, 0xac, 0x5d, 0x0a, 0x3c, 0xb8, 0x07, 0xea, 0x4b, 0x63, 0xc4, 0xbb, 0x1b, 0xdd, 0x1f,
	0x8d, 0x55, 0x4b, 0x38, 0xc5, 0x18, 0x87, 0xae, 0x31, 0x5c, 0x80, 0xac, 0xca, 0xc5, 0x4c, 0x97,
	0xec, 0x15, 0x0b, 0xfe, 0x03, 0x2a, 0x11, 0xf1, 0xb0, 0x28, 0x6b, 0xb3, 0xfb, 0xb3, 0x71, 0x6f,
	0x43, 0x8d, 0x93, 0x3c, 0x0e, 0x48, 0x7c, 0x44, 0x3c, 0x6c, 0x0b, 0x0a, 0xb7, 0x25, 0xc2, 0x0c,
	0x8d, 0xd8, 0x79, 0x82, 0x45, 0xdd, 0x75, 0x5b, 0xe1, 0x89, 0xe1, 0x79, 0x82, 0x21, 0x04, 0x15,
	0x1e, 0xab, 0x1b, 0xbc, 0x58, 0x5b, 0xc4, 0xb0, 0x05, 0x94, 0x29, 0x4e, 0x83, 0xe7, 0x01, 0xf6,
	0xd4, 0x6a, 0x5b, 0xee, 0x28, 0xf6, 0xf2, 0x0c, 0x0f, 0xc1, 0xb6, 0x87, 0x93, 0x14, 0xbb, 0x88,
	0x61, 0xaf, 0xb0, 0xba, 0xd6, 0x2e, 0x77, 0x1a, 0xdd, 0xef, 0xd7, 0xde, 0x54, 0xcc, 0x88, 0xc1,
	0xad, 0x2f, 0x6a, 0xd9, 0x5a, 0xd1, 0xf2, 0x86, 0x9c, 0x81, 0x4d, 0xea, 0x8e, 0x71, 0x84, 0x46,
	0xc4, 0x79, 0x81, 0x5d, 0x46, 0x55, 0x45, 0x38, 0xf3, 0xc7, 0x03, 0xb5, 0xe5, 0xbd, 0x31, 0x4e,
	0x05, 0xe7, 0x38, 0xa7, 0x0c, 0x51, 0xea, 0x63, 0x76, 0x28, 0xd9, 0x4d, 0xba, 0x9e, 0x86, 0x07,
	0xa0, 0xc6, 0x70, 0x8c, 0x62, 0x46, 0xd5, 0xba, 0x10, 0xfd, 0xfd, 0xcb, 0xa2, 0xc3, 0x1c, 0xbc,
	0x94, 0x5b, 0xb0, 0xb9, 0x90, 0x1b, 0x66, 0x94, 0xe1, 0x54, 0x05, 0x8f, 0x11, 0xda, 0xcf, 0xc1,
	0x2b, 0xa1, 0x82, 0xdd, 0x8a, 0xc1, 0x37, 0xf7, 0xbc, 0x1c, 0x3e, 0x03, 0xe5, 0xc0, 0xa3, 0xaa,
	0xdc, 0x2e, 0x77, 0x9a, 0x56, 0x7f, 0x3e, 0xd3, 0xcb, 0x83, 0x1e, 0xbd, 0x99, 0xe9, 0xff, 0x3e,
	0x6a, 0xd6, 0xee, 0x2e, 0x97, 0x31, 0xe8, 0xd9, 0x5c, 0xb1, 0x75, 0x00, 0x9a, 0xb7, 0x8a, 0x82,
	0x7f, 0xaf, 0xbe, 0xd4, 0xe8, 0xee, 0xdc, 0xd3, 0xab, 0x1c, 0x3e, 0xe8, 0x59, 0xb5, 0xe2, 0x19,
	0xb9, 0xd0, 0x16, 0x68, 0xde, 0x2a, 0xca, 0x52, 0x40, 0x95, 0x89, 0x68, 0xf7, 0x8d, 0x0c, 0x36,
	0x4e, 0x19, 0x62, 0x18, 0xf6, 0x81, 0x98, 0x28, 0xbe, 0xc0, 0x62, 0x6d, 0x1a, 0x5d, 0xfd, 0x01,
	0x9f, 0x16, 0x7b, 0x6e, 0x29, 0x7c, 0x2a, 0x2e, 0x67, 0xba, 0x6c, 0x2f, 0xa9, 0xf0, 0x3f, 0x50,
	0x5b, 0x6d, 0x77, 0xf9, 0xb3, 0x2d, 0xb9, 0xeb, 0x76, 0x31, 0x59, 0x0b, 0xce, 0x6f, 0xbf, 0x82,
	0xcd, 0xdb, 0x0b, 0x00, 0xbf, 0x06, 0xcd, 0x13, 0xfb, 0x78, 0xd8, 0xdf, 0x1f, 0x8e, 0xf6, 0x9e,
	0x0c, 0xfb, 0xf6, 0xb6, 0xd4, 0xaa, 0xbc, 0x7e, 0xa7, 0x49, 0xd6, 0x2f, 0x17, 0x1f, 0x35, 0xe9,
	0x62, 0xae, 0xc9, 0x97, 0x73, 0x4d, 0xbe, 0x9a, 0x6b, 0xf2, 0x87, 0xb9, 0x26, 0xbf, 0xbd, 0xd6,
	0xa4, 0xcb, 0x6b, 0x4d, 0xba, 0xba, 0xd6, 0xa4, 0xb3, 0x0a, 0xff, 0x95, 0x3a, 0x55, 0xf1, 0x87,
	0xfa, 0xf3, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x2a, 0x2f, 0x89, 0x71, 0x05, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalBytes != 0 {
		i = encodeVarintProtectedts(dAtA, i, uint64(m.TotalBytes))
		i--
		dAtA[i] = 0x20
	}
	if m.NumSpans != 0 {
		i = encodeVarintProtectedts(dAtA, i, uint64(m.NumSpans))
		i--
		dAtA[i] = 0x18
	}
	if m.NumRecords != 0 {
		i = encodeVarintProtectedts(dAtA, i, uint64(m.NumRecords))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintProtectedts(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Target != nil {
		{
			size := m.Target.Size()
			i -= size
			if _, err := m.Target.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.DeprecatedSpans) > 0 {
		for iNdEx := len(m.DeprecatedSpans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeprecatedSpans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtectedts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintProtectedts(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MetaType) > 0 {
		i -= len(m.MetaType)
		copy(dAtA[i:], m.MetaType)
		i = encodeVarintProtectedts(dAtA, i, uint64(len(m.MetaType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Mode != 0 {
		i = encodeVarintProtectedts(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtectedts(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintProtectedts(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record_SchemaObjects) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_SchemaObjects) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SchemaObjects != nil {
		{
			size, err := m.SchemaObjects.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtectedts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Record_Tenants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_Tenants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Tenants != nil {
		{
			size, err := m.Tenants.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtectedts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Record_Cluster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_Cluster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cluster != nil {
		{
			size, err := m.Cluster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtectedts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Record_SchemaObjectsTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record_SchemaObjectsTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_SchemaObjectsTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		dAtA6 := make([]byte, len(m.IDs)*10)
		var j5 int
		for _, num := range m.IDs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintProtectedts(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record_TenantsTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record_TenantsTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_TenantsTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for iNdEx := len(m.IDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IDs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtectedts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Record_ClusterTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record_ClusterTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_ClusterTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtectedts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProtectedts(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintProtectedts(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtectedts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovProtectedts(uint64(m.Version))
	}
	if m.NumRecords != 0 {
		n += 1 + sovProtectedts(uint64(m.NumRecords))
	}
	if m.NumSpans != 0 {
		n += 1 + sovProtectedts(uint64(m.NumSpans))
	}
	if m.TotalBytes != 0 {
		n += 1 + sovProtectedts(uint64(m.TotalBytes))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovProtectedts(uint64(l))
	}
	l = m.Timestamp.Size()
	n += 1 + l + sovProtectedts(uint64(l))
	if m.Mode != 0 {
		n += 1 + sovProtectedts(uint64(m.Mode))
	}
	l = len(m.MetaType)
	if l > 0 {
		n += 1 + l + sovProtectedts(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovProtectedts(uint64(l))
	}
	if m.Verified {
		n += 2
	}
	if len(m.DeprecatedSpans) > 0 {
		for _, e := range m.DeprecatedSpans {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	return n
}

func (m *Record_SchemaObjects) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchemaObjects != nil {
		l = m.SchemaObjects.Size()
		n += 1 + l + sovProtectedts(uint64(l))
	}
	return n
}
func (m *Record_Tenants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tenants != nil {
		l = m.Tenants.Size()
		n += 1 + l + sovProtectedts(uint64(l))
	}
	return n
}
func (m *Record_Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovProtectedts(uint64(l))
	}
	return n
}
func (m *Record_SchemaObjectsTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		l = 0
		for _, e := range m.IDs {
			l += sovProtectedts(uint64(e))
		}
		n += 1 + sovProtectedts(uint64(l)) + l
	}
	return n
}

func (m *Record_TenantsTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for _, e := range m.IDs {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	return n
}

func (m *Record_ClusterTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovProtectedts(uint64(l))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovProtectedts(uint64(l))
		}
	}
	return n
}

func sovProtectedts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtectedts(x uint64) (n int) {
	return sovProtectedts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRecords", wireType)
			}
			m.NumRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSpans", wireType)
			}
			m.NumSpans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSpans |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
			m.TotalBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= ProtectionMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = append(m.Meta[:0], dAtA[iNdEx:postIndex]...)
			if m.Meta == nil {
				m.Meta = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedSpans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeprecatedSpans = append(m.DeprecatedSpans, roachpb.Span{})
			if err := m.DeprecatedSpans[len(m.DeprecatedSpans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaObjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Record_SchemaObjectsTarget{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Record_SchemaObjects{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Record_TenantsTarget{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Record_Tenants{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Record_ClusterTarget{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &Record_Cluster{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record_SchemaObjectsTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchemaObjectsTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchemaObjectsTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtectedts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IDs = append(m.IDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtectedts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtectedts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtectedts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IDs) == 0 {
					m.IDs = make([]github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtectedts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IDs = append(m.IDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record_TenantsTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantsTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantsTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, &roachpb.TenantID{})
			if err := m.IDs[len(m.IDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record_ClusterTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtectedts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtectedts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtectedts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtectedts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtectedts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtectedts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtectedts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtectedts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtectedts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtectedts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtectedts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtectedts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtectedts = fmt.Errorf("proto: unexpected end of group")
)
