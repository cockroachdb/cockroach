// Copyright 2025 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.kv.kvserver.rangefeed.rangefeedpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/rangefeed/rangefeedpb";

import "gogoproto/gogo.proto";
import "roachpb/data.proto";
import "util/hlc/timestamp.proto";
import "google/protobuf/timestamp.proto";

// RangefeedState represents the state of a single active rangefeed
// registration.
message RangefeedState {
  // ConsumerID is set by the client when starting the rangefeed.
  int64 consumer_id = 1 [(gogoproto.customname) = "ConsumerID"];
  // StreamID is set by the client when starting the rangefeed.
  int64 stream_id = 2 [(gogoproto.customname) = "StreamID"];
  // Span being watched by this rangefeed.
  roachpb.Span span = 3 [(gogoproto.nullable) = false];
  // ID of the range being watched by this rangefeed.
  int32 range_id = 4 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.RangeID"];
  // Frontier of the stream. All key-value events with timestamp <= resolved_ts
  // have already been emitted.
  util.hlc.Timestamp resolved_ts = 5 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "ResolvedTS"];
  // The starting timestamp of catch-up scans. Historical events with timestamp
  // > catchup_ts will be replayed before the feed switches to live updates. 
  util.hlc.Timestamp catchup_ts = 6 [
    (gogoproto.nullable) = false, (gogoproto.customname) = "CatchUpTS"];
  // Tags set in the stream context when starting the rangefeed.
  string tags = 7 [(gogoproto.customname) = "Tags"];
  // Whether the rangefeed is currently running a catch-up scan.
  bool catchup_running = 8 [(gogoproto.customname) = "CatchUpRunning"];
  // Timestamp of the last event sent to the client.
  google.protobuf.Timestamp last_value_sent = 9 [(gogoproto.stdtime) = true, (gogoproto.customname) = "LastEventTS"];
  // Whether this rangefeed is configured to emit diffs.
  bool diff = 10 [(gogoproto.customname) = "Diff"];
  // Time that this rangefeed registration was created at.
  google.protobuf.Timestamp created = 11 [(gogoproto.stdtime) = true, (gogoproto.customname) = "Created"];
}

// InspectRangefeedsRequest is used to power the Rangefeeds /inspectz
// functionality. The request doesn't take any parameters.
message InspectRangefeedsRequest {}

// InspectRangefeedsResponse is used to power the Rangefeeds /inspectz
// functionality. The response is a list of RangefeedInfoPerStore.
message InspectRangefeedsResponse {
  repeated RangefeedInfoPerStore rangefeed_info_per_store = 1 [(gogoproto.nullable) = false];
}

message RangefeedInfoPerStore {
  // Identity of the store these states belong to.
  roachpb.StoreIdent store_ident = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "StoreIdent"];
  // Collection of rangefeed states active on that store.
  repeated RangefeedState rangefeeds = 2 [(gogoproto.nullable) = false];
}
