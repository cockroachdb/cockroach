// Copyright 2015 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.storage; // HACK
option go_package = "kvserver";

import "kv/kvserver/kvserverpb/raft.proto";
import "kv/kvserver/api.proto";

service MultiRaft {
    rpc RaftMessageBatch (stream cockroach.kv.kvserver.kvserverpb.RaftMessageRequestBatch) returns (stream cockroach.kv.kvserver.kvserverpb.RaftMessageResponse) {}
    rpc RaftSnapshot (stream cockroach.kv.kvserver.kvserverpb.SnapshotRequest) returns (stream cockroach.kv.kvserver.kvserverpb.SnapshotResponse) {}
    // DelegateRaftSnapshot asks the server to send a range snapshot to a target
    // (so the client delegates the sending of the snapshot to the server). The
    // server responds in two phases.
    //
    // TODO(nvanbenschoten): This RPC is bi-directional streaming (as opposed to
    // only server-streaming) because of future aspirations; at the moment the
    // request is unary. In the future, we wanted to pause all log truncation,
    // then handshake with the delegated sender, then weaken log truncation
    // protection to just below the index that the sender was sending the
    // snapshot at.
    rpc DelegateRaftSnapshot(stream cockroach.kv.kvserver.kvserverpb.DelegateSnapshotRequest) returns (stream cockroach.kv.kvserver.kvserverpb.DelegateSnapshotResponse) {}
}

service PerReplica {
    rpc CollectChecksum(cockroach.kv.kvserver.CollectChecksumRequest) returns (cockroach.kv.kvserver.CollectChecksumResponse) {}
    rpc WaitForApplication(cockroach.kv.kvserver.WaitForApplicationRequest) returns (cockroach.kv.kvserver.WaitForApplicationResponse) {}
    rpc WaitForReplicaInit(cockroach.kv.kvserver.WaitForReplicaInitRequest) returns (cockroach.kv.kvserver.WaitForReplicaInitResponse) {}
}

service PerStore {
    rpc CompactEngineSpan(cockroach.kv.kvserver.CompactEngineSpanRequest) returns (cockroach.kv.kvserver.CompactEngineSpanResponse) {}
    rpc SetCompactionConcurrency(cockroach.kv.kvserver.CompactionConcurrencyRequest) returns (cockroach.kv.kvserver.CompactionConcurrencyResponse) {}
}
