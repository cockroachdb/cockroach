# Initialize a range with five replicas, none of which have send tokens.
init regular_init=0 elastic_init=0
range_id=1 tenant_id=1 local_replica_id=1 next_raft_index=1
  store_id=1 replica_id=1 type=VOTER_FULL state=StateReplicate next=1
  store_id=2 replica_id=2 type=VOTER_FULL state=StateReplicate next=1
  store_id=3 replica_id=3 type=VOTER_FULL state=StateReplicate next=1
  store_id=4 replica_id=4 type=VOTER_FULL state=StateReplicate next=1
  store_id=5 replica_id=5 type=VOTER_FULL state=StateReplicate next=1
----
r1: [(n1,s1):1*,(n2,s2):2,(n3,s3):3,(n4,s4):4,(n5,s5):5]
t1/s1: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s2: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s3: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s4: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s5: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB

# Append one entry. Replica 1 (leader), 4, 5 are not allowed to form a
# send-queue even though they have no send tokens.
raft_event pull-mode
range_id=1
  entries
    term=1 index=1 pri=NormalPri size=1MiB
----
t1/s1: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
t1/s2: eval reg=+0 B/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s3: eval reg=+0 B/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s4: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
t1/s5: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB

stream_state range_id=1
----
(n1,s1):1: state=replicate closed=false inflight=[1,2) (1.0 MiB) send_queue=[2,2) precise_q_size=+0 B
eval deducted: reg=+1.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
++++
(n2,s2):2: state=replicate closed=false inflight=[1,1) send_queue=[1,2) precise_q_size=+1.0 MiB watching-for-tokens
eval deducted: reg=+0 B ela=+1.0 MiB
eval original in send-q: reg=+1.0 MiB ela=+0 B
++++
(n3,s3):3: state=replicate closed=false inflight=[1,1) send_queue=[1,2) precise_q_size=+1.0 MiB watching-for-tokens
eval deducted: reg=+0 B ela=+1.0 MiB
eval original in send-q: reg=+1.0 MiB ela=+0 B
++++
(n4,s4):4: state=replicate closed=false inflight=[1,2) (1.0 MiB) send_queue=[2,2) precise_q_size=+0 B
eval deducted: reg=+1.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
++++
(n5,s5):5: state=replicate closed=false inflight=[1,2) (1.0 MiB) send_queue=[2,2) precise_q_size=+0 B
eval deducted: reg=+1.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
++++
MsgApps sent in pull mode:
 to: 4, lowPri: false entries: [1]
 to: 5, lowPri: false entries: [1]
++++

# Make replica 5 look more overloaded than replica 4. Note that once we have
# picked a replica to not have a send-queue it will be picked again if needed
# for quorum, even though another replica with a send-queue may be less
# overloaded. That is, we don't keep revisiting this choice (just like we
# don't revisit who to force-flush). In practice, new eval will stop since
# there isn't a quorum with eval tokens.
adjust_tokens eval
  store_id=5 pri=LowPri tokens=-512KiB
----
t1/s1: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
t1/s2: eval reg=+0 B/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s3: eval reg=+0 B/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s4: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
t1/s5: eval reg=-1.0 MiB/+16 MiB ela=-1.5 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB

# Append another entry. Again replicas 1, 4, 5 are not allowed to have a
# send-queue despite no send tokens.
raft_event pull-mode
range_id=1
  entries
    term=1 index=2 pri=NormalPri size=1MiB
----
t1/s1: eval reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB
       send reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB
t1/s2: eval reg=+0 B/+16 MiB ela=-2.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s3: eval reg=+0 B/+16 MiB ela=-2.0 MiB/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s4: eval reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB
       send reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB
t1/s5: eval reg=-2.0 MiB/+16 MiB ela=-2.5 MiB/+8.0 MiB
       send reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB

stream_state range_id=1
----
(n1,s1):1: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
(n2,s2):2: state=replicate closed=false inflight=[1,1) send_queue=[1,3) precise_q_size=+2.0 MiB watching-for-tokens
eval deducted: reg=+0 B ela=+2.0 MiB
eval original in send-q: reg=+2.0 MiB ela=+0 B
++++
(n3,s3):3: state=replicate closed=false inflight=[1,1) send_queue=[1,3) precise_q_size=+2.0 MiB watching-for-tokens
eval deducted: reg=+0 B ela=+2.0 MiB
eval original in send-q: reg=+2.0 MiB ela=+0 B
++++
(n4,s4):4: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
(n5,s5):5: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
MsgApps sent in pull mode:
 to: 4, lowPri: false entries: [2]
 to: 5, lowPri: false entries: [2]
++++

# Make replica 2 catchup (say there was a transition to StateSnapshot and back
# to StateReplicate that we missed. Replica 3 transitions to StateSnapshot.
# Now replica 1, 2, 4, 5 have no send-queue. Since replica 5 is more
# overloaded than replicas 4 and 2, the latter two will not be permitted to
# form a send-queue on the next append.
set_replicas pull-mode
range_id=1 tenant_id=1 local_replica_id=1 next_raft_index=3
  store_id=1 replica_id=1 type=VOTER_FULL state=StateReplicate next=3
  store_id=2 replica_id=2 type=VOTER_FULL state=StateReplicate next=3
  store_id=3 replica_id=3 type=VOTER_FULL state=StateSnapshot next=1
  store_id=4 replica_id=4 type=VOTER_FULL state=StateReplicate next=3
  store_id=5 replica_id=5 type=VOTER_FULL state=StateReplicate next=3
----
r1: [(n1,s1):1*,(n2,s2):2,(n3,s3):3,(n4,s4):4,(n5,s5):5]

stream_state range_id=1
----
(n1,s1):1: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
(n2,s2):2: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+0 B ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
++++
(n3,s3):3: closed
++++
(n4,s4):4: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
(n5,s5):5: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,3) precise_q_size=+0 B
eval deducted: reg=+2.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++

raft_event pull-mode
range_id=1
  entries
    term=1 index=3 pri=NormalPri size=1MiB
----
t1/s1: eval reg=-3.0 MiB/+16 MiB ela=-3.0 MiB/+8.0 MiB
       send reg=-3.0 MiB/+16 MiB ela=-3.0 MiB/+8.0 MiB
t1/s2: eval reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
       send reg=-1.0 MiB/+16 MiB ela=-1.0 MiB/+8.0 MiB
t1/s3: eval reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
       send reg=+0 B/+16 MiB ela=+0 B/+8.0 MiB
t1/s4: eval reg=-3.0 MiB/+16 MiB ela=-3.0 MiB/+8.0 MiB
       send reg=-3.0 MiB/+16 MiB ela=-3.0 MiB/+8.0 MiB
t1/s5: eval reg=-2.0 MiB/+16 MiB ela=-3.5 MiB/+8.0 MiB
       send reg=-2.0 MiB/+16 MiB ela=-2.0 MiB/+8.0 MiB

# Replica 5 now has a send-queue.
stream_state range_id=1
----
(n1,s1):1: state=replicate closed=false inflight=[1,4) (3.0 MiB) send_queue=[4,4) precise_q_size=+0 B
eval deducted: reg=+3.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
  term=1 index=3  tokens=1048576
++++
(n2,s2):2: state=replicate closed=false inflight=[1,4) (3.0 MiB) send_queue=[4,4) precise_q_size=+0 B
eval deducted: reg=+1.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=3  tokens=1048576
++++
(n3,s3):3: closed
++++
(n4,s4):4: state=replicate closed=false inflight=[1,4) (3.0 MiB) send_queue=[4,4) precise_q_size=+0 B
eval deducted: reg=+3.0 MiB ela=+0 B
eval original in send-q: reg=+0 B ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
  term=1 index=3  tokens=1048576
++++
(n5,s5):5: state=replicate closed=false inflight=[1,3) (2.0 MiB) send_queue=[3,4) precise_q_size=+1.0 MiB watching-for-tokens
eval deducted: reg=+2.0 MiB ela=+1.0 MiB
eval original in send-q: reg=+1.0 MiB ela=+0 B
NormalPri:
  term=1 index=1  tokens=1048576
  term=1 index=2  tokens=1048576
++++
MsgApps sent in pull mode:
 to: 2, lowPri: false entries: [3]
 to: 4, lowPri: false entries: [3]
++++
