# Walk through the basics of how the per-range sequencer works.
#
# -----------------------------------------------------------------------------
# 1. Observe how the sequence numbers change with changing log positions (and
#    static create-times).
init
----

sequence create-time=0ms log-position=1/0
----
seq=1 ≈1ns (advanced)

# If the log index is incremented, so does the sequence number. So we're
# issuing "create times" that are higher than ones issued before for lower log
# indexes.
sequence create-time=0ms log-position=1/1
----
seq=2 ≈2ns (advanced)

# Bump the log index by 19, and observe a higher sequence number. Since the
# create-time is static (0ms now and earlier), and we try to stay as close to
# the max observed create-time as possible, we increment the sequence number by
# the smallest possible amount -- 1ns.
sequence create-time=0ms log-position=1/20
----
seq=3 ≈3ns (advanced)

# Regressions in log indexes (indicating buggy usage) doesn't cause regressions
# in the sequence number.
sequence create-time=0ms log-position=1/10
----
seq=3 ≈3ns

# Try again with a large bump in the log index.
sequence create-time=0ms log-position=1/500
----
seq=4 ≈4ns (advanced)

# Increases in the raft term also increases the sequence number.
sequence create-time=0ms log-position=2/0
----
seq=5 ≈5ns (advanced)

# Regressions in the raft term (indicating buggy usage) doesn't cause
# regressions in the sequence number.
sequence create-time=0ms log-position=1/0
----
seq=5 ≈5ns

# Try another (large) bump in the raft term, observing a delta in the sequence
# number.
sequence create-time=0ms log-position=5/0
----
seq=6 ≈6ns (advanced)


# -----------------------------------------------------------------------------
# 2. Observe how the sequence numbers change with changing create-times (and
#    static log positions, which would typically indicate buggy usage).
init
----

sequence create-time=0ms log-position=1/1
----
seq=1 ≈1ns

# Create time advancing to 1us also advances the sequence numbers -- they're
# kept closely tied to the largest observed create time.
sequence create-time=1us log-position=1/1
----
seq=1000 ≈1µs (advanced)

# Ditto for subsequent increases in max observed create times.
sequence create-time=2us log-position=1/1
----
seq=2000 ≈2µs (advanced)

# Regressions in create-time don't cause regressions in the sequence number.
sequence create-time=1us log-position=1/1
----
seq=2000 ≈2µs


# -----------------------------------------------------------------------------
# 3. Observe how the sequence numbers change with both changing create-times
#    and log positions.
init
----

# Advance either create-time or log position or both. We should see the
# sequence numbers ratchet up accordingly.
sequence create-time=0ns log-position=1/1
----
seq=1 ≈1ns

# We see the sequence number increase by 2, because of both an increase in
# create-time and log-position.
sequence create-time=1ns log-position=1/2
----
seq=3 ≈3ns (advanced)

# We see the sequence number increase by 1, because of an increase in just the
# log-position.
sequence create-time=1ns log-position=1/3
----
seq=4 ≈4ns (advanced)

# We see the sequence number increase by 1, because of both an increase in just
# the create-time.
sequence create-time=2ns log-position=1/3
----
seq=5 ≈5ns (advanced)

# Advance the log position by a few indexes to accumulate into the internally
# tracked "sequence delta".
sequence create-time=2ns log-position=1/4
----
seq=6 ≈6ns (advanced)

sequence create-time=2ns log-position=1/5
----
seq=7 ≈7ns (advanced)

sequence create-time=2ns log-position=1/6
----
seq=8 ≈8ns (advanced)

# We see the sequence number increase by 1, because of an increase in just the
# log-position (the term increase).
sequence create-time=2ns log-position=2/1
----
seq=9 ≈9ns (advanced)

# We see the sequence number increase to 1+create-time -- internally we're
# resetting any accumulated sequence deltas since the jump in max-observed
# create-time is larger than it. The +1 is coming from an increase in the log
# index.
sequence create-time=20ns log-position=2/2
----
seq=21 ≈21ns (advanced)

# vim:ft=sh
