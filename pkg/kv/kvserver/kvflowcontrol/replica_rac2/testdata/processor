# NB: this replica is on n1, s2 and for range r3. The tenant-id is 4 and the
# replica-id is 5.

reset
----
n1,s2,r3: replica=5, tenant=4, enabled-level=not-enabled

# Not enabled to use v2 if become leader.
get-enabled-level
----
enabled-level: not-enabled

on-destroy
----
 Replica.RaftMuAssertHeld

# AdmitForEval returns false since there is no RangeController.
admit-for-eval pri=low-pri
----
admitted: false err: <nil>

# AdmitForEval returns false since there is no RangeController.
admit-for-eval pri=normal-pri
----
admitted: false err: <nil>

# No-op since RaftNode is not initialized.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
.....

reset
----
n1,s2,r3: replica=5, tenant=4, enabled-level=not-enabled

get-enabled-level
----
enabled-level: not-enabled

# Can use v1 encoding and v2 protocol, if become leader.
set-enabled-level enabled-level=v1-encoding
----
 Replica.RaftMuAssertHeld

get-enabled-level
----
enabled-level: v1-encoding

# TODO(pav-kv): initialize to a correct state.
init-raft log-term=0 log-index=20
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld

# Since stable-index is 20, admitted is slightly behind. The leader and
# leaseholder are both on replica-id 10.
set-raft-state leader=10 stable-index=20 next-unstable-index=25 leaseholder=10 admitted=[15,20,15,20]
----
Raft: term: 0 leader: 10 leaseholder: 10 stable: 20 next-unstable: 25 admitted: [15, 20, 15, 20]

# The processor has never been given a range-descriptor, so it will do nothing.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
.....

# The processor is provided a range descriptor that does not include itself or
# the leader. This is acceptable.
on-desc-changed  replicas=n11/s11/11
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld

# handleRaftReady. It thinks the leader is using v1, so there is no
# advancement of admitted, or submission of this entry for admission.
handle-raft-ready-and-admit entries=v1/i25/t45/pri0/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 25
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 10
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [15, 20, 15, 20]
 Replica.MuUnlock
.....
AdmitRaftEntries:
destroyed-or-leader-using-v2: false

# Told that the leader is using v2. And that [25,25] has no low-pri override.
side-channel v2 leader-term=50 first=25 last=25
----
 Replica.RaftMuAssertHeld

set-raft-state next-unstable-index=26
----
Raft: term: 0 leader: 10 leaseholder: 10 stable: 20 next-unstable: 26 admitted: [15, 20, 15, 20]

# The index 25 entry is v1 encoded, so by default it is low-pri. Admitted is
# advanced to the stable-index, and this entry is submitted for admission.
handle-raft-ready-and-admit entries=v1/i25/t45/pri0/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 26
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 10
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [15, 20, 15, 20]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([20, 20, 20, 20]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
.....
AdmitRaftEntries:
 ACWorkQueue.Admit({StoreID:2 TenantID:4 Priority:low-pri CreateTime:2 RequestedCount:100 Ingested:false RangeID:3 ReplicaID:5 CallbackState:{Mark:{Term:50 Index:25} Priority:LowPri}}) = true
destroyed-or-leader-using-v2: true

# Stable index is advanced to 25.
set-raft-state stable-index=25 leader=11
----
Raft: term: 0 leader: 11 leaseholder: 10 stable: 25 next-unstable: 26 admitted: [20, 20, 20, 20]

# handleRaftReady with no entries. Since the leader is using v2, admitted is
# advanced. admitted[low-pri] is 24 since there is an entry at 25 that is not
# admitted. A MsgAppResp is handed to the piggybacker.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 26
 RaftNode.StableIndexLocked() = 25
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [20, 20, 20, 20]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([24, 25, 25, 25]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 Piggybacker.Add(n11, [r3,s11,5->0] admitted=t0/[])
.....

# Side channel for entries [26, 26] with no low-pri override.
side-channel v2 leader-term=50 first=26 last=26
----
 Replica.RaftMuAssertHeld

set-raft-state next-unstable-index=27
----
Raft: term: 0 leader: 11 leaseholder: 10 stable: 25 next-unstable: 27 admitted: [24, 25, 25, 25]

# The index 26 entry uses v2 and is using pri=2, which is AboveNormalPri.
handle-raft-ready-and-admit entries=v2/i26/t45/pri2/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 25
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [24, 25, 25, 25]
 Replica.MuUnlock
.....
AdmitRaftEntries:
 ACWorkQueue.Admit({StoreID:2 TenantID:4 Priority:user-high-pri CreateTime:2 RequestedCount:100 Ingested:false RangeID:3 ReplicaID:5 CallbackState:{Mark:{Term:50 Index:26} Priority:AboveNormalPri}}) = true
destroyed-or-leader-using-v2: true

# handleRaftReady is a noop.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 25
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [24, 25, 25, 25]
 Replica.MuUnlock
.....

# Stable index is advanced, which should allow some priorities to advance
# admitted, which will happen in the next handleRaftReady.
set-raft-state stable-index=26
----
Raft: term: 0 leader: 11 leaseholder: 10 stable: 26 next-unstable: 27 admitted: [24, 25, 25, 25]

# Some admitted indices are advanced, but LowPri and AboveNormalPri cannot
# advance past the index 25 and index 26 entries respectively, that are
# waiting for admission.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [24, 25, 25, 25]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([24, 26, 25, 26]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 Piggybacker.Add(n11, [r3,s11,5->0] admitted=t0/[])
.....

# Callback is accurate and index 25 is admitted.
admitted-log-entry leader-term=50 index=25 pri=0
----
 RaftScheduler.EnqueueRaftReady(rangeID=3)

# admitted advances for AboveNormalPri.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [24, 26, 25, 26]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([26, 26, 25, 26]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 Piggybacker.Add(n11, [r3,s11,5->0] admitted=t0/[])
.....

# Side channel for entries [27,27] indicate a low-pri override.
side-channel v2 leader-term=50 first=27 last=27 low-pri
----
 Replica.RaftMuAssertHeld

set-raft-state next-unstable-index=28
----
Raft: term: 0 leader: 11 leaseholder: 10 stable: 26 next-unstable: 28 admitted: [26, 26, 25, 26]

# The index 27 entry is marked AboveNormalPri, but will be treated as LowPri.
handle-raft-ready-and-admit entries=v2/i27/t45/pri2/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 25, 26]
 Replica.MuUnlock
.....
AdmitRaftEntries:
 ACWorkQueue.Admit({StoreID:2 TenantID:4 Priority:low-pri CreateTime:2 RequestedCount:100 Ingested:false RangeID:3 ReplicaID:5 CallbackState:{Mark:{Term:50 Index:27} Priority:LowPri}}) = true
destroyed-or-leader-using-v2: true

admitted-log-entry leader-term=50 index=27 pri=3
----

admitted-log-entry leader-term=50 index=26 pri=2
----
 RaftScheduler.EnqueueRaftReady(rangeID=3)

handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 25, 26]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([26, 26, 26, 26]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 Piggybacker.Add(n11, [r3,s11,5->0] admitted=t0/[])
.....

# index 27 is still waiting for admission, but we switch to a new leader that
# is using the v1 protocol. NB: in practice, we will never have the v1
# protocol be used after v2 encoding has happened, but processor does not
# mind.
side-channel v1 leader-term=51 first=27 last=27
----
 Replica.RaftMuAssertHeld

# Stable index advanced to 27
set-raft-state stable-index=27
----
Raft: term: 0 leader: 11 leaseholder: 10 stable: 27 next-unstable: 28 admitted: [26, 26, 26, 26]

# Noop.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 26, 26]
 Replica.MuUnlock
.....

# Noop.
handle-raft-ready-and-admit entries=v1/i27/t45/pri0/time2/len100 leader-term=51
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 26, 26]
 Replica.MuUnlock
.....
AdmitRaftEntries:
destroyed-or-leader-using-v2: false

# Noop.
admitted-log-entry leader-term=50 index=27 pri=0
----

# Same leader switches to v2.
side-channel v2 leader-term=51 first=27 last=27
----
 Replica.RaftMuAssertHeld

# Admitted advances.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 11
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 26, 26]
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([27, 27, 27, 27]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 Piggybacker.Add(n11, [r3,s11,5->0] admitted=t0/[])
.....

# Noop, since not the leader.
enqueue-piggybacked-admitted from=25 to=5
----

# Noop.
process-piggybacked-admitted
----
 Replica.RaftMuAssertHeld

# Local replica is becoming the leader.
set-raft-state term=52 leader=5
----
Raft: term: 52 leader: 5 leaseholder: 10 stable: 27 next-unstable: 28 admitted: [27, 27, 27, 27]

on-desc-changed  replicas=n11/s11/11,n1/s2/5
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld
 RaftScheduler.EnqueueRaftReady(rangeID=3)

set-raft-state next-unstable-index=29
----
Raft: term: 52 leader: 5 leaseholder: 10 stable: 27 next-unstable: 29 admitted: [27, 27, 27, 27]

# RangeController is created.
handle-raft-ready-and-admit entries=v1/i28/t45/pri0/time2/len100 leader-term=52
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 29
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [27, 27, 27, 27]
 RaftNode.TermLocked() = 52
 Replica.MuUnlock
 RangeControllerFactory.New(replicaSet=[(n1,s2):5,(n11,s11):11], leaseholder=10, nextRaftIndex=28)
 RangeController.HandleRaftEventRaftMuLocked([28])
.....
AdmitRaftEntries:
 ACWorkQueue.Admit({StoreID:2 TenantID:4 Priority:low-pri CreateTime:2 RequestedCount:100 Ingested:false RangeID:3 ReplicaID:5 CallbackState:{Mark:{Term:52 Index:28} Priority:LowPri}}) = true
destroyed-or-leader-using-v2: true

# AdmitForEval returns true since there is a RangeController which admitted.
admit-for-eval pri=low-pri
----
 RangeController.WaitForEval(pri=low-pri) = (waited=true err=<nil>)
admitted: true err: <nil>

# AdmitForEval returns false despite there being a RangeController since
# normal-pri is not subject to replication AC. RangeController.WaitForEval was
# not called.
admit-for-eval pri=normal-pri
----
admitted: false err: <nil>

# Subject normal-pri to replication AC.
set-flow-control-mode mode=apply-to-all
----

# AdmitForEval for normal-pri returns true.
admit-for-eval pri=normal-pri
----
 RangeController.WaitForEval(pri=normal-pri) = (waited=true err=<nil>)
admitted: true err: <nil>

# Change the return value from WaitForEval.
set-wait-for-eval-return-values waited=false
----

# Plumbing to WaitForEval is correct.
admit-for-eval pri=normal-pri
----
 RangeController.WaitForEval(pri=normal-pri) = (waited=false err=<nil>)
admitted: false err: <nil>

# Set WaitForEval to return an error.
set-wait-for-eval-return-values waited=false err=rc-was-closed
----

# Plumbing to WaitForEval is correct.
admit-for-eval pri=normal-pri
----
 RangeController.WaitForEval(pri=normal-pri) = (waited=false err=rc-was-closed)
admitted: false err: rc-was-closed

# Entry at index 28 is admitted, but stable index is 27.
admitted-log-entry leader-term=52 index=28 pri=0
----

# Noop.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 29
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [27, 27, 27, 27]
 RaftNode.TermLocked() = 52
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([])
.....

# Stable index advances to 28.
set-raft-state stable-index=28
----
Raft: term: 52 leader: 5 leaseholder: 10 stable: 28 next-unstable: 29 admitted: [27, 27, 27, 27]

# Admitted is advanced. Since the leader is local, no need to piggyback MsgAppResp.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 29
 RaftNode.StableIndexLocked() = 28
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [27, 27, 27, 27]
 RaftNode.TermLocked() = 52
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([28, 28, 28, 28]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([])
.....

# Enqueue piggybacked MsgAppResp.
enqueue-piggybacked-admitted from=25 to=5
----

# Process it.
process-piggybacked-admitted
----
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.StepMsgAppRespForAdmittedLocked(type: MsgAppResp from: 25 to: 5)
 Replica.MuUnlock

# Noop.
process-piggybacked-admitted
----
 Replica.RaftMuAssertHeld

# Noop, since the replica id does not match.
enqueue-piggybacked-admitted from=25 to=6
----

# Noop.
process-piggybacked-admitted
----
 Replica.RaftMuAssertHeld

# My leader-term advances.
set-raft-state term=53
----
Raft: term: 53 leader: 5 leaseholder: 10 stable: 28 next-unstable: 29 admitted: [28, 28, 28, 28]

# RangeController is recreated.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 29
 RaftNode.StableIndexLocked() = 28
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [28, 28, 28, 28]
 RaftNode.TermLocked() = 53
 Replica.MuUnlock
 RangeController.CloseRaftMuLocked
 RangeControllerFactory.New(replicaSet=[(n1,s2):5,(n11,s11):11], leaseholder=10, nextRaftIndex=29)
 RangeController.HandleRaftEventRaftMuLocked([])
.....

on-desc-changed  replicas=n11/s11/11,n1/s2/5,n13/s13/13
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld
 RaftScheduler.EnqueueRaftReady(rangeID=3)

handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 29
 RaftNode.StableIndexLocked() = 28
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [28, 28, 28, 28]
 RaftNode.TermLocked() = 53
 Replica.MuUnlock
 RangeController.SetReplicasRaftMuLocked([(n1,s2):5,(n11,s11):11,(n13,s13):13])
 RangeController.SetLeaseholderRaftMuLocked(10)
 RangeController.HandleRaftEventRaftMuLocked([])
.....

on-destroy
----
 Replica.RaftMuAssertHeld
 RangeController.CloseRaftMuLocked

# Noop, since destroyed.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
.....

# Noop, since destroyed.
set-enabled-level enabled-level=v2-encoding
----
 Replica.RaftMuAssertHeld

# Noop.
get-enabled-level
----
enabled-level: v1-encoding

# Noop.
enqueue-piggybacked-admitted from=25 to=5
----

# Noop.
process-piggybacked-admitted
----
 Replica.RaftMuAssertHeld

# Noop.
side-channel v2 leader-term=53 first=29 last=29
----
 Replica.RaftMuAssertHeld

# Noop.
handle-raft-ready-and-admit entries=v1/i29/t45/pri0/time2/len100 leader-term=53
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
.....
AdmitRaftEntries:
destroyed-or-leader-using-v2: true

# Noop.
admitted-log-entry leader-term=52 index=28 pri=0
----

# Test transitioning to v2 protocol after becoming leader.
reset
----
n1,s2,r3: replica=5, tenant=4, enabled-level=not-enabled

get-enabled-level
----
enabled-level: not-enabled

init-raft log-term=0 log-index=20
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld

set-raft-state term=50 leader=5 leaseholder=5 stable-index=20 next-unstable-index=25 admitted=[15,20,15,20]
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 20 next-unstable: 25 admitted: [15, 20, 15, 20]

# Noop, since don't know the descriptor.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
.....

# Descriptor does not contain self, but that is ok.
on-desc-changed  replicas=n11/s11/11,n13/s13/13
----
 Replica.RaftMuAssertHeld
 Replica.MuAssertHeld

handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 25
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [15, 20, 15, 20]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
.....

set-raft-state next-unstable-index=26
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 20 next-unstable: 26 admitted: [15, 20, 15, 20]

# v1 protocol, so does not do anything.
handle-raft-ready-and-admit entries=v1/i25/t45/pri0/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 26
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [15, 20, 15, 20]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
.....
AdmitRaftEntries:
destroyed-or-leader-using-v2: false

# RangeController is created.
set-enabled-level enabled-level=v1-encoding
----
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.LeaderLocked() = 5
 RaftNode.TermLocked() = 50
 RaftNode.NextUnstableIndexLocked() = 26
 Replica.MuUnlock
 RangeControllerFactory.New(replicaSet=[(n11,s11):11,(n13,s13):13], leaseholder=5, nextRaftIndex=26)

set-raft-state next-unstable-index=27
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 20 next-unstable: 27 admitted: [15, 20, 15, 20]

# Index 26 entry is sent to AC.
handle-raft-ready-and-admit entries=v1/i26/t45/pri0/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [15, 20, 15, 20]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([20, 20, 20, 20]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([26])
.....
AdmitRaftEntries:
 ACWorkQueue.Admit({StoreID:2 TenantID:4 Priority:low-pri CreateTime:2 RequestedCount:100 Ingested:false RangeID:3 ReplicaID:5 CallbackState:{Mark:{Term:50 Index:26} Priority:LowPri}}) = true
destroyed-or-leader-using-v2: true

# Entry is admitted.
admitted-log-entry leader-term=50 index=26 pri=0
----

# Noop, since stable index is still 20.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 20
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [20, 20, 20, 20]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([])
.....

set-raft-state stable-index=26
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 26 next-unstable: 27 admitted: [20, 20, 20, 20]

# Everything up to 26 is admitted.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 27
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [20, 20, 20, 20]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([26, 26, 26, 26]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([])
.....

set-raft-state next-unstable-index=28
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 26 next-unstable: 28 admitted: [26, 26, 26, 26]

# Index 27 entry is not subject to AC.
handle-raft-ready-and-admit entries=none/i27/t45/pri0/time2/len100 leader-term=50
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 26
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 26, 26]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([27])
.....
AdmitRaftEntries:
destroyed-or-leader-using-v2: true

set-raft-state stable-index=27
----
Raft: term: 50 leader: 5 leaseholder: 5 stable: 27 next-unstable: 28 admitted: [26, 26, 26, 26]

# Everything up to 27 is admitted.
handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 5
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [26, 26, 26, 26]
 RaftNode.TermLocked() = 50
 Replica.MuUnlock
 Replica.MuLock
 RaftNode.SetAdmittedLocked([27, 27, 27, 27]) = type: MsgAppResp from: 0 to: 0
 Replica.MuUnlock
 RangeController.HandleRaftEventRaftMuLocked([])
.....

# Transition to follower. In this case, the leader is not even known.
set-raft-state leader=0
----
Raft: term: 50 leader: 0 leaseholder: 5 stable: 27 next-unstable: 28 admitted: [27, 27, 27, 27]

handle-raft-ready-and-admit
----
HandleRaftReady:
 Replica.RaftMuAssertHeld
 Replica.MuLock
 RaftNode.NextUnstableIndexLocked() = 28
 RaftNode.StableIndexLocked() = 27
 RaftNode.LeaderLocked() = 0
 Replica.LeaseholderMuLocked
 RaftNode.GetAdmittedLocked = [27, 27, 27, 27]
 Replica.MuUnlock
 RangeController.CloseRaftMuLocked
.....
