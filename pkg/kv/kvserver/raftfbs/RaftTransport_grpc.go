//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: transport

package raftfbs

import (
	context "context"
	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for RaftTransport service
type RaftTransportClient interface {
	RaftMessageBatch(ctx context.Context,
		opts ...grpc.CallOption) (RaftTransport_RaftMessageBatchClient, error)
}

type raftTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftTransportClient(cc grpc.ClientConnInterface) RaftTransportClient {
	return &raftTransportClient{cc}
}

func (c *raftTransportClient) RaftMessageBatch(ctx context.Context,
	opts ...grpc.CallOption) (RaftTransport_RaftMessageBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaftTransport_serviceDesc.Streams[0], "/raftfbs.RaftTransport/RaftMessageBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftTransportRaftMessageBatchClient{stream}
	return x, nil
}

type RaftTransport_RaftMessageBatchClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*RaftMessageBatchResponse, error)
	grpc.ClientStream
}

type raftTransportRaftMessageBatchClient struct {
	grpc.ClientStream
}

func (x *raftTransportRaftMessageBatchClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftTransportRaftMessageBatchClient) Recv() (*RaftMessageBatchResponse, error) {
	m := new(RaftMessageBatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RaftTransport service
type RaftTransportServer interface {
	RaftMessageBatch(RaftTransport_RaftMessageBatchServer) error
	mustEmbedUnimplementedRaftTransportServer()
}

type UnimplementedRaftTransportServer struct {
}

func (UnimplementedRaftTransportServer) RaftMessageBatch(RaftTransport_RaftMessageBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method RaftMessageBatch not implemented")
}

func (UnimplementedRaftTransportServer) mustEmbedUnimplementedRaftTransportServer() {}

type UnsafeRaftTransportServer interface {
	mustEmbedUnimplementedRaftTransportServer()
}

func RegisterRaftTransportServer(s grpc.ServiceRegistrar, srv RaftTransportServer) {
	s.RegisterService(&_RaftTransport_serviceDesc, srv)
}

func _RaftTransport_RaftMessageBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftTransportServer).RaftMessageBatch(&raftTransportRaftMessageBatchServer{stream})
}

type RaftTransport_RaftMessageBatchServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*RaftMessageBatchRequest, error)
	grpc.ServerStream
}

type raftTransportRaftMessageBatchServer struct {
	grpc.ServerStream
}

func (x *raftTransportRaftMessageBatchServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftTransportRaftMessageBatchServer) Recv() (*RaftMessageBatchRequest, error) {
	m := new(RaftMessageBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RaftTransport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftfbs.RaftTransport",
	HandlerType: (*RaftTransportServer)(nil),
	Methods: []grpc.MethodDesc{
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RaftMessageBatch",
			Handler:       _RaftTransport_RaftMessageBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
