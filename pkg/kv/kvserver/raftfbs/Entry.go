// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package raftfbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Entry struct {
	_tab flatbuffers.Table
}

func GetRootAsEntry(buf []byte, offset flatbuffers.UOffsetT) *Entry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Entry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEntry(buf []byte, offset flatbuffers.UOffsetT) *Entry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Entry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Entry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Entry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Entry) Version() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entry) MutateVersion(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *Entry) Term() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entry) MutateTerm(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Entry) Index() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entry) MutateIndex(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *Entry) Cmd(obj *Command) *Command {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Command)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func EntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EntryAddVersion(builder *flatbuffers.Builder, version byte) {
	builder.PrependByteSlot(0, version, 0)
}
func EntryAddTerm(builder *flatbuffers.Builder, term uint64) {
	builder.PrependUint64Slot(1, term, 0)
}
func EntryAddIndex(builder *flatbuffers.Builder, index uint64) {
	builder.PrependUint64Slot(2, index, 0)
}
func EntryAddCmd(builder *flatbuffers.Builder, cmd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(cmd), 0)
}
func EntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
