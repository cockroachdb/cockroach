// Copyright 2023 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

package mma

import (
	"time"

	"github.com/cockroachdb/cockroach/pkg/roachpb"
)

// Incoming messages for updating cluster state.
//
// This is a stop-gap and we will substitute these with protos.
//
// TODO(sumeer): add corresponding protos.

// storeLoadMsg is periodically sent by each store.
type storeLoadMsg struct {
	roachpb.StoreID

	load          LoadVector
	capacity      LoadVector
	secondaryLoad secondaryLoadVector
}

// nodeLoadMsg provides all the load information for a node and its
// constituent stores.
type nodeLoadMsg struct {
	nodeLoad
	stores   []storeLoadMsg
	loadTime time.Time
}

// StoreLeaseholderMsg is sent by a local store and includes information about
// all ranges for which this store is the leaseholder. The range information
// includes other replica stores. This is a local message and will be sent
// before every allocator pass, so that the allocator has the latest state to
// make decisions.
type StoreLeaseholderMsg struct {
	roachpb.StoreID

	// Ranges provides authoritative information from the leaseholder.
	Ranges []RangeMsg
}

// RangeMsg is generated by the leaseholder store (and part of
// StoreLeaseholderMsg). If there is any change for that range, the full
// information for that range is provided. This is also the case for a new
// leaseholder since it does not know whether something has changed since the
// last leaseholder informed the allocator. A tiny change to the RangeLoad
// (decided by the caller) will not cause a RangeMsg.
//
// Also used to tell the allocator about ranges that no longer exist.
//
// TODO(sumeeer): these diff semantics are ok for now, but we may decide to
// incorporate the diffing logic into the allocator after the first code
// iteration.
type RangeMsg struct {
	roachpb.RangeID
	Replicas  []StoreIDAndReplicaState
	Conf      roachpb.SpanConfig
	RangeLoad RangeLoad
}

func (rm *RangeMsg) isDeletedRange() bool {
	return len(rm.Replicas) == 0
}

// Avoid unused lint errors.

var _ = (&RangeMsg{}).isDeletedRange
var _ = storeLoadMsg{}.StoreID
var _ = storeLoadMsg{}.load
var _ = storeLoadMsg{}.capacity
var _ = storeLoadMsg{}.secondaryLoad
var _ = StoreLeaseholderMsg{}.StoreID
var _ = StoreLeaseholderMsg{}.Ranges
var _ = RangeMsg{}.RangeID
var _ = RangeMsg{}.Replicas
var _ = RangeMsg{}.Conf
var _ = RangeMsg{}.RangeLoad
var _ = nodeLoadMsg{}.nodeLoad
var _ = nodeLoadMsg{}.stores
var _ = nodeLoadMsg{}.loadTime
