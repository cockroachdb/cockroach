# Test verifying that voter with max StoreID would be designated survivor.

# First use case where we can successfully resolve replica by store ID
# With two out of five replicas remaining, check that replica with highest
# store ID is chosen as a survivor.
# Note: for replica type codes, see metadata.proto

replication-data
- StoreID: 1
  RangeID: 1
  StartKey: /Min
  EndKey: /Max
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}  # This replica is identical to one in store 2 but has lower storeID 1
  - { NodeID: 2, StoreID: 2, ReplicaID: 2}
  - { NodeID: 3, StoreID: 3, ReplicaID: 3}
  - { NodeID: 4, StoreID: 4, ReplicaID: 4}
  - { NodeID: 5, StoreID: 5, ReplicaID: 5}
  RangeAppliedIndex: 10
  RaftCommittedIndex: 13
- StoreID: 2
  RangeID: 1
  StartKey: /Min
  EndKey: /Max
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 2, StoreID: 2, ReplicaID: 2}  # This replica has the same state n1 but has higher storeID so it wins
  - { NodeID: 3, StoreID: 3, ReplicaID: 3}
  - { NodeID: 4, StoreID: 4, ReplicaID: 4}
  - { NodeID: 5, StoreID: 5, ReplicaID: 5}
  RangeAppliedIndex: 10
  RaftCommittedIndex: 13
----
ok

collect-replica-info stores=(1,2)
----
ok

make-plan
----
- RangeID: 1
  StartKey: /Min
  OldReplicaID: 2
  NewReplica:
    NodeID: 2
    StoreID: 2
    ReplicaID: 16
  NextReplicaID: 17

apply-plan stores=(1,2)
----
ok

dump-store stores=(1,2)
----
- NodeID: 1
  StoreID: 1
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 2, StoreID: 2, ReplicaID: 2}
    - Replica: {NodeID: 3, StoreID: 3, ReplicaID: 3}
    - Replica: {NodeID: 4, StoreID: 4, ReplicaID: 4}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 5}
- NodeID: 2
  StoreID: 2
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 2, StoreID: 2, ReplicaID: 16}

# Second use case where stale replica which remained from before split
# on store with higher ID will conflict with later one spanning smaller range.
# We have a stale replica in s2 which still remembers group across s3 and s4
# which are not available anymore. While LHS and RHS across s1, s4, s5 are now
# more recent. But they can't win against old version as we don't analyze enough
# info.
replication-data
- StoreID: 1  # This is a LHS post split
  RangeID: 1
  StartKey: /Min
  EndKey: /Table/1
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
- StoreID: 1  # This is RHS replica post split
  RangeID: 2
  StartKey: /Table/1
  EndKey: /Max
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
- StoreID: 2
  RangeID: 1  # This is an old version of range which got lost
  StartKey: /Min
  EndKey: /Max
  Replicas:
  - { NodeID: 2, StoreID: 2, ReplicaID: 2}
  - { NodeID: 3, StoreID: 3, ReplicaID: 3}
  - { NodeID: 4, StoreID: 4, ReplicaID: 4}
  RangeAppliedIndex: 10
  RaftCommittedIndex: 13
- StoreID: 5
  RangeID: 1  # This is a LHS post split
  StartKey: /Min
  EndKey: /Table/1
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
- StoreID: 5
  RangeID: 2  # This is RHS replica post split
  StartKey: /Table/1
  EndKey: /Max
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
- StoreID: 6
  RangeID: 1  # This is a LHS post split
  StartKey: /Min
  EndKey: /Table/1
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
- StoreID: 6
  RangeID: 2  # This is RHS replica post split
  StartKey: /Table/1
  EndKey: /Max
  Replicas:
  - { NodeID: 1, StoreID: 1, ReplicaID: 1}
  - { NodeID: 5, StoreID: 5, ReplicaID: 6}
  - { NodeID: 6, StoreID: 6, ReplicaID: 7}
  RangeAppliedIndex: 15
  RaftCommittedIndex: 15
----
ok

collect-replica-info stores=(1,2,5,6)
----
ok

make-plan
----
- RangeID: 1
  StartKey: /Min
  OldReplicaID: 2
  NewReplica:
    NodeID: 2
    StoreID: 2
    ReplicaID: 15
  NextReplicaID: 16

apply-plan stores=(1,2,5,6)
----
ok

dump-store stores=(1,2,5,6)
----
- NodeID: 1
  StoreID: 1
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
  - RangeID: 2
    StartKey: /Table/1
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
- NodeID: 2
  StoreID: 2
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 2, StoreID: 2, ReplicaID: 15}
- NodeID: 5
  StoreID: 5
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
  - RangeID: 2
    StartKey: /Table/1
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
- NodeID: 6
  StoreID: 6
  Descriptors:
  - RangeID: 1
    StartKey: /Min
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
  - RangeID: 2
    StartKey: /Table/1
    Replicas:
    - Replica: {NodeID: 1, StoreID: 1, ReplicaID: 1}
    - Replica: {NodeID: 5, StoreID: 5, ReplicaID: 6}
    - Replica: {NodeID: 6, StoreID: 6, ReplicaID: 7}
