// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/loqrecovery/loqrecoverypb/recovery.proto

package loqrecoverypb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Info about range replica
type LocalRangeInfo struct {
	NodeID                    github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID                   github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	Desc                      roachpb.RangeDescriptor                              `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
	RaftAppliedIndex          uint64                                               `protobuf:"varint,4,opt,name=raft_applied_index,json=raftAppliedIndex,proto3" json:"raft_applied_index,omitempty"`
	RaftCommittedIndex        uint64                                               `protobuf:"varint,5,opt,name=raft_committed_index,json=raftCommittedIndex,proto3" json:"raft_committed_index,omitempty"`
	HasUncommittedDescriptors bool                                                 `protobuf:"varint,6,opt,name=has_uncommitted_descriptors,json=hasUncommittedDescriptors,proto3" json:"has_uncommitted_descriptors,omitempty"`
}

func (m *LocalRangeInfo) Reset()         { *m = LocalRangeInfo{} }
func (m *LocalRangeInfo) String() string { return proto.CompactTextString(m) }
func (*LocalRangeInfo) ProtoMessage()    {}
func (*LocalRangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{0}
}
func (m *LocalRangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalRangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LocalRangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalRangeInfo.Merge(m, src)
}
func (m *LocalRangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *LocalRangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalRangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LocalRangeInfo proto.InternalMessageInfo

// Planned changes to be applied to replica
type ReplicaUpdate struct {
	NodeID        github_com_cockroachdb_cockroach_pkg_roachpb.NodeID    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty" yaml:"NodeID"`
	StoreID       github_com_cockroachdb_cockroach_pkg_roachpb.StoreID   `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty" yaml:"StoreID"`
	RangeID       github_com_cockroachdb_cockroach_pkg_roachpb.RangeID   `protobuf:"varint,3,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty" yaml:"RangeID"`
	StartKey      github_com_cockroachdb_cockroach_pkg_roachpb.RKey      `protobuf:"bytes,4,opt,name=start_key,json=startKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RKey" json:"start_key,omitempty" yaml:"StartKey"`
	NewReplica    *roachpb.ReplicaDescriptor                             `protobuf:"bytes,5,opt,name=new_replica,json=newReplica,proto3" json:"new_replica,omitempty" yaml:"NewReplica"`
	NextReplicaID github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID `protobuf:"varint,6,opt,name=next_replica_id,json=nextReplicaId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID" json:"next_replica_id,omitempty" yaml:"NextReplicaID"`
}

func (m *ReplicaUpdate) Reset()         { *m = ReplicaUpdate{} }
func (m *ReplicaUpdate) String() string { return proto.CompactTextString(m) }
func (*ReplicaUpdate) ProtoMessage()    {}
func (*ReplicaUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a2cc96948b3cab0, []int{1}
}
func (m *ReplicaUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaUpdate.Merge(m, src)
}
func (m *ReplicaUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaUpdate proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LocalRangeInfo)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.LocalRangeInfo")
	proto.RegisterType((*ReplicaUpdate)(nil), "cockroach.kv.kvserver.loqrecovery.loqrecoverypb.ReplicaUpdate")
}

func init() {
	proto.RegisterFile("kv/kvserver/loqrecovery/loqrecoverypb/recovery.proto", fileDescriptor_5a2cc96948b3cab0)
}

var fileDescriptor_5a2cc96948b3cab0 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x31, 0x6f, 0xd3, 0x4c,
	0x18, 0x8e, 0xbf, 0xa6, 0x49, 0xbe, 0x2b, 0x69, 0xa9, 0x55, 0x50, 0x28, 0x92, 0x1d, 0x59, 0x0c,
	0x19, 0x90, 0x0d, 0x6d, 0xc5, 0x80, 0x10, 0x52, 0xd3, 0x0e, 0x58, 0x45, 0x1d, 0x0e, 0x65, 0xa9,
	0x10, 0xd6, 0xc5, 0x77, 0x4d, 0x2c, 0x27, 0xbe, 0xe3, 0x7c, 0x4d, 0x93, 0xdf, 0xc0, 0xc2, 0xef,
	0x60, 0xe5, 0x4f, 0x64, 0xec, 0xd8, 0xc9, 0x02, 0xe7, 0x1f, 0x64, 0x64, 0x42, 0x3e, 0xdb, 0xb1,
	0x0b, 0x2c, 0x51, 0xb7, 0xd7, 0xcf, 0xbd, 0xcf, 0xf3, 0xdc, 0x7b, 0xcf, 0x2b, 0x83, 0x23, 0x7f,
	0x62, 0xf9, 0x93, 0x90, 0xf0, 0x09, 0xe1, 0xd6, 0x88, 0x7e, 0xe6, 0xc4, 0xa5, 0x13, 0xc2, 0x67,
	0xe5, 0x9a, 0xf5, 0xad, 0xbc, 0x34, 0x19, 0xa7, 0x82, 0xaa, 0x96, 0x4b, 0x5d, 0x9f, 0x53, 0xe4,
	0x0e, 0x4d, 0x7f, 0x62, 0xe6, 0x7c, 0xb3, 0xc4, 0x31, 0xef, 0xf0, 0xf7, 0x77, 0x65, 0x33, 0xeb,
	0x5b, 0x88, 0x79, 0xa9, 0xc6, 0xfe, 0xe3, 0x1c, 0x1a, 0x13, 0x81, 0x30, 0x12, 0x28, 0xc3, 0xf7,
	0x06, 0x74, 0x40, 0x65, 0x69, 0x25, 0x55, 0x8a, 0x1a, 0xdf, 0x36, 0xc0, 0xf6, 0x7b, 0xea, 0xa2,
	0x11, 0x44, 0xc1, 0x80, 0xd8, 0xc1, 0x25, 0x55, 0x2f, 0x40, 0x3d, 0xa0, 0x98, 0x38, 0x1e, 0x6e,
	0x29, 0x6d, 0xa5, 0xb3, 0xd9, 0x3d, 0x8e, 0x23, 0xbd, 0x76, 0x4e, 0x31, 0xb1, 0x4f, 0x7f, 0x45,
	0xfa, 0xe1, 0xc0, 0x13, 0xc3, 0xab, 0xbe, 0xe9, 0xd2, 0x71, 0x71, 0x5d, 0xdc, 0x2f, 0x6a, 0x8b,
	0xf9, 0x03, 0x2b, 0xbb, 0x84, 0x99, 0xd2, 0x60, 0x2d, 0x51, 0xb4, 0xb1, 0xfa, 0x09, 0x34, 0x42,
	0x41, 0xb9, 0x14, 0xff, 0x4f, 0x8a, 0x9f, 0xc4, 0x91, 0x5e, 0xff, 0x90, 0x60, 0x52, 0xfd, 0x68,
	0x2d, 0xf5, 0x8c, 0x07, 0xeb, 0x52, 0xd4, 0xc6, 0xea, 0x1b, 0x50, 0xc5, 0x24, 0x74, 0x5b, 0x1b,
	0x6d, 0xa5, 0xb3, 0x75, 0x60, 0x98, 0xc5, 0x7b, 0xe6, 0x14, 0x39, 0xe7, 0x29, 0x09, 0x5d, 0xee,
	0x31, 0x41, 0x79, 0xb7, 0x3a, 0x8f, 0xf4, 0x0a, 0x94, 0x2c, 0xf5, 0x39, 0x50, 0x39, 0xba, 0x14,
	0x0e, 0x62, 0x6c, 0xe4, 0x11, 0xec, 0x78, 0x01, 0x26, 0xd3, 0x56, 0xb5, 0xad, 0x74, 0xaa, 0xf0,
	0x61, 0x72, 0x72, 0x9c, 0x1e, 0xd8, 0x09, 0xae, 0xbe, 0x00, 0x7b, 0xb2, 0xdb, 0xa5, 0xe3, 0xb1,
	0x27, 0xc4, 0xaa, 0x7f, 0x53, 0xf6, 0x4b, 0xa5, 0x93, 0xfc, 0x28, 0x65, 0xbc, 0x05, 0x4f, 0x87,
	0x28, 0x74, 0xae, 0x82, 0x82, 0x82, 0x57, 0x37, 0x09, 0x5b, 0xb5, 0xb6, 0xd2, 0x69, 0xc0, 0x27,
	0x43, 0x14, 0xf6, 0x8a, 0x8e, 0xe2, 0xaa, 0xa1, 0xf1, 0x7d, 0x13, 0x34, 0x21, 0x61, 0x23, 0xcf,
	0x45, 0x3d, 0x86, 0x91, 0x20, 0xaa, 0xff, 0x67, 0x56, 0xb0, 0xc8, 0x6a, 0x19, 0xe9, 0xcd, 0x19,
	0x1a, 0x8f, 0x5e, 0x1b, 0xe9, 0xb7, 0x71, 0xdf, 0xf0, 0xd8, 0x5f, 0xe1, 0xf5, 0x4a, 0xe1, 0x2d,
	0x23, 0x7d, 0x3b, 0xb5, 0xcb, 0x00, 0xe3, 0xfe, 0x71, 0x32, 0xd0, 0xe0, 0x49, 0x5e, 0x89, 0x63,
	0x12, 0xe9, 0x46, 0xea, 0x98, 0xee, 0x6a, 0xc9, 0x31, 0x03, 0xd6, 0x77, 0xcc, 0x88, 0xb0, 0x2e,
	0x6d, 0x6c, 0xac, 0x12, 0xf0, 0x7f, 0x28, 0x10, 0x17, 0x8e, 0x4f, 0x66, 0x32, 0xf9, 0x07, 0xdd,
	0x77, 0xcb, 0x48, 0xdf, 0xc9, 0x27, 0x43, 0x5c, 0x9c, 0x91, 0x59, 0x62, 0xf4, 0x72, 0x3d, 0xa3,
	0x33, 0x32, 0x83, 0x8d, 0x30, 0xe3, 0xab, 0x1f, 0xc1, 0x56, 0x40, 0xae, 0x1d, 0x9e, 0x86, 0x29,
	0x57, 0x66, 0xeb, 0xe0, 0xd9, 0xbf, 0xd6, 0x35, 0xed, 0x28, 0x2d, 0xec, 0xa3, 0x65, 0xa4, 0xef,
	0x66, 0xb9, 0x92, 0xeb, 0xec, 0xdc, 0x80, 0x20, 0x58, 0x7d, 0xa8, 0x5f, 0x14, 0xb0, 0x13, 0x90,
	0xa9, 0xc8, 0xf5, 0x93, 0xe7, 0xab, 0xc9, 0xc0, 0xdc, 0x38, 0xd2, 0x9b, 0xe7, 0x64, 0x2a, 0xb2,
	0x56, 0xf9, 0x88, 0x7b, 0xb9, 0x5a, 0x09, 0x4e, 0x26, 0x7c, 0xb5, 0xde, 0x84, 0x39, 0x15, 0x36,
	0x83, 0x92, 0x12, 0xee, 0x5a, 0xf3, 0x9f, 0x5a, 0x65, 0x1e, 0x6b, 0xca, 0x4d, 0xac, 0x29, 0xb7,
	0xb1, 0xa6, 0xfc, 0x88, 0x35, 0xe5, 0xeb, 0x42, 0xab, 0xdc, 0x2c, 0xb4, 0xca, 0xed, 0x42, 0xab,
	0x5c, 0x34, 0xef, 0xfc, 0xd4, 0xfa, 0x35, 0xf9, 0x6b, 0x3a, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x11, 0x3e, 0x19, 0x5f, 0x44, 0x05, 0x00, 0x00,
}

func (m *LocalRangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalRangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalRangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HasUncommittedDescriptors {
		i--
		if m.HasUncommittedDescriptors {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.RaftCommittedIndex != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RaftCommittedIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.RaftAppliedIndex != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RaftAppliedIndex))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRecovery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.StoreID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicaUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextReplicaID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.NextReplicaID))
		i--
		dAtA[i] = 0x30
	}
	if m.NewReplica != nil {
		{
			size, err := m.NewReplica.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRecovery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintRecovery(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.RangeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x18
	}
	if m.StoreID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintRecovery(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecovery(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecovery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalRangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRecovery(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovRecovery(uint64(m.StoreID))
	}
	l = m.Desc.Size()
	n += 1 + l + sovRecovery(uint64(l))
	if m.RaftAppliedIndex != 0 {
		n += 1 + sovRecovery(uint64(m.RaftAppliedIndex))
	}
	if m.RaftCommittedIndex != 0 {
		n += 1 + sovRecovery(uint64(m.RaftCommittedIndex))
	}
	if m.HasUncommittedDescriptors {
		n += 2
	}
	return n
}

func (m *ReplicaUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovRecovery(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovRecovery(uint64(m.StoreID))
	}
	if m.RangeID != 0 {
		n += 1 + sovRecovery(uint64(m.RangeID))
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.NewReplica != nil {
		l = m.NewReplica.Size()
		n += 1 + l + sovRecovery(uint64(l))
	}
	if m.NextReplicaID != 0 {
		n += 1 + sovRecovery(uint64(m.NextReplicaID))
	}
	return n
}

func sovRecovery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecovery(x uint64) (n int) {
	return sovRecovery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LocalRangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalRangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalRangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAppliedIndex", wireType)
			}
			m.RaftAppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftAppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftCommittedIndex", wireType)
			}
			m.RaftCommittedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftCommittedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUncommittedDescriptors", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasUncommittedDescriptors = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicaUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewReplica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecovery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecovery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewReplica == nil {
				m.NewReplica = &roachpb.ReplicaDescriptor{}
			}
			if err := m.NewReplica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextReplicaID", wireType)
			}
			m.NextReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextReplicaID |= github_com_cockroachdb_cockroach_pkg_roachpb.ReplicaID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecovery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecovery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecovery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecovery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecovery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecovery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecovery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecovery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecovery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecovery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecovery = fmt.Errorf("proto: unexpected end of group")
)
