skip_under_ci
----

# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
#
# TODO(tbg): at this point, six ticks is 3s, not 60s. Update assertion API
# to take a duration, not ticks.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42 metrics=(qps,replica_moves)
----
qps#1: last:  [s1=998, s2=998, s3=1001, s4=995, s5=998, s6=1002, s7=1001] (stddev=2.27, mean=999.00, sum=6993)
qps#1: thrashing: [max(s1)=(freq=90, mag=2.60) (s1=(freq=90, mag=2.60), s2=(freq=86, mag=1.69), s3=(freq=74, mag=0.21), s4=(freq=70, mag=2.30), s5=(freq=78, mag=1.20), s6=(freq=76, mag=1.12), s7=(freq=42, mag=0.27))]
replica_moves#1: last:  [s1=2, s2=1, s3=0, s4=1, s5=1, s6=1, s7=0] (stddev=0.64, mean=0.86, sum=6)
replica_moves#1: thrashing: [max(s1)=(freq=0, mag=0.00) (s1=(freq=0, mag=0.00), s2=(freq=0, mag=0.00), s3=(freq=0, mag=NaN), s4=(freq=0, mag=0.00), s5=(freq=0, mag=0.00), s6=(freq=0, mag=0.00), s7=(freq=0, mag=NaN))]
qps#2: last:  [s1=996, s2=996, s3=1000, s4=998, s5=1001, s6=1003, s7=1000] (stddev=2.42, mean=999.14, sum=6994)
qps#2: thrashing: [max(s2)=(freq=88, mag=1.68) (s1=(freq=86, mag=3.23), s2=(freq=88, mag=1.68), s3=(freq=74, mag=0.20), s4=(freq=79, mag=0.23), s5=(freq=66, mag=1.74), s6=(freq=80, mag=2.51), s7=(freq=76, mag=1.77))]
replica_moves#2: last:  [s1=2, s2=1, s3=0, s4=0, s5=0, s6=1, s7=0] (stddev=0.73, mean=0.57, sum=4)
replica_moves#2: thrashing: [max(s1)=(freq=0, mag=0.00) (s1=(freq=0, mag=0.00), s2=(freq=0, mag=0.00), s3=(freq=0, mag=NaN), s4=(freq=0, mag=NaN), s5=(freq=0, mag=NaN), s6=(freq=0, mag=0.00), s7=(freq=0, mag=NaN))]
artifacts[default]: 70177cf859633651

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42 metrics=(qps,replica_moves)
----
qps#1: last:  [s1=994, s2=1004, s3=1002, s4=1002, s5=1000, s6=997, s7=999] (stddev=3.15, mean=999.71, sum=6998)
qps#1: thrashing: [max(s6)=(freq=114, mag=6.08) (s1=(freq=112, mag=10.45), s2=(freq=106, mag=5.59), s3=(freq=104, mag=0.22), s4=(freq=112, mag=4.41), s5=(freq=78, mag=1.99), s6=(freq=114, mag=6.08), s7=(freq=108, mag=3.31))]
replica_moves#1: last:  [s1=6, s2=4, s3=0, s4=1, s5=3, s6=5, s7=2] (stddev=2.00, mean=3.00, sum=21)
replica_moves#1: thrashing: [max(s1)=(freq=0, mag=0.00) (s1=(freq=0, mag=0.00), s2=(freq=0, mag=0.00), s3=(freq=0, mag=NaN), s4=(freq=0, mag=0.00), s5=(freq=0, mag=0.00), s6=(freq=0, mag=0.00), s7=(freq=0, mag=0.00))]
qps#2: last:  [s1=999, s2=998, s3=998, s4=998, s5=1000, s6=999, s7=1003] (stddev=1.67, mean=999.29, sum=6995)
qps#2: thrashing: [max(s5)=(freq=158, mag=16.78) (s1=(freq=150, mag=23.43), s2=(freq=138, mag=10.62), s3=(freq=88, mag=8.92), s4=(freq=92, mag=8.94), s5=(freq=158, mag=16.78), s6=(freq=152, mag=6.57), s7=(freq=148, mag=6.94))]
replica_moves#2: last:  [s1=15, s2=13, s3=5, s4=3, s5=10, s6=9, s7=8] (stddev=3.89, mean=9.00, sum=63)
replica_moves#2: thrashing: [max(s1)=(freq=0, mag=0.00) (s1=(freq=0, mag=0.00), s2=(freq=0, mag=0.00), s3=(freq=0, mag=0.00), s4=(freq=0, mag=0.00), s5=(freq=0, mag=0.00), s6=(freq=0, mag=0.00), s7=(freq=0, mag=0.00))]
artifacts[default]: 430366c9c84f1c07
