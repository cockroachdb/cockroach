skip_under_ci
----

# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
#
# TODO(tbg): at this point, six ticks is 3s, not 60s. Update assertion API
# to take a duration, not ticks.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(mma-only)
----
qps#1: last:  [s1=4001, s2=1996, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1414.11, mean=999.86, sum=6999)
qps#1: thrash_pct: [s1=5%, s2=4%, s3=0%, s4=0%, s5=0%, s6=4%, s7=0%]  (sum=13%)
qps#2: last:  [s1=3999, s2=1996, s3=0, s4=0, s5=0, s6=1003, s7=0] (stddev=1413.51, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=5%, s2=5%, s3=0%, s4=0%, s5=0%, s6=5%, s7=0%]  (sum=14%)
artifacts[mma-only]: d937e8c9bce06de
failed assertion sample 1
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(mma-only)
----
qps#1: last:  [s1=4002, s2=1995, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1414.32, mean=999.86, sum=6999)
qps#1: thrash_pct: [s1=6%, s2=5%, s3=0%, s4=0%, s5=0%, s6=4%, s7=0%]  (sum=15%)
qps#2: last:  [s1=3998, s2=1998, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1413.41, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=6%, s2=5%, s3=0%, s4=0%, s5=0%, s6=5%, s7=0%]  (sum=16%)
artifacts[mma-only]: b584f37c73e07d97
failed assertion sample 1
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
