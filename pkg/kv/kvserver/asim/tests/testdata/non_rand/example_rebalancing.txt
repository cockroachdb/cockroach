skip_under_ci
----

# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----
asserting: max_{stores}(qps)/mean_{stores}(qps) ≤ 1.15 at each of last 6 ticks

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
#
# TODO(tbg): at this point, six ticks is 3s, not 60s. Update assertion API
# to take a duration, not ticks.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----
asserting: |qps(t)/mean_{T}(qps) - 1| ≤ 0.05 ∀ t∈T and each store (T=last 6 ticks)

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(sma-count,mma-only,mma-count)
----
qps#1: last:  [s1=998, s2=998, s3=1001, s4=995, s5=998, s6=1002, s7=1001] (stddev=2.27, mean=999.00, sum=6993)
qps#1: thrash_pct: [s1=13%, s2=9%, s3=5%, s4=8%, s5=5%, s6=5%, s7=4%]  (sum=48%)
replica_moves#1: last:  [s1=2, s2=1, s3=0, s4=1, s5=1, s6=1, s7=0] (stddev=0.64, mean=0.86, sum=6)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=996, s2=996, s3=1000, s4=998, s5=1001, s6=1003, s7=1000] (stddev=2.42, mean=999.14, sum=6994)
qps#2: thrash_pct: [s1=8%, s2=11%, s3=5%, s4=5%, s5=5%, s6=105%, s7=5%]  (sum=145%)
replica_moves#2: last:  [s1=2, s2=1, s3=0, s4=0, s5=0, s6=1, s7=0] (stddev=0.73, mean=0.57, sum=4)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[sma-count]: 26755534702067c5
==========================
qps#1: last:  [s1=3999, s2=1997, s3=0, s4=0, s5=0, s6=1003, s7=0] (stddev=1413.61, mean=999.86, sum=6999)
qps#1: thrash_pct: [s1=5%, s2=5%, s3=0%, s4=0%, s5=0%, s6=4%, s7=0%]  (sum=13%)
qps#2: last:  [s1=3996, s2=1996, s3=0, s4=0, s5=0, s6=1006, s7=0] (stddev=1412.60, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=5%, s2=4%, s3=0%, s4=0%, s5=0%, s6=3%, s7=0%]  (sum=13%)
artifacts[mma-only]: dad89302cc72743e
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
==========================
qps#1: last:  [s1=3001, s2=1001, s3=0, s4=0, s5=1000, s6=1996, s7=0] (stddev=1068.78, mean=999.71, sum=6998)
qps#1: thrash_pct: [s1=7%, s2=5%, s3=0%, s4=0%, s5=5%, s6=11%, s7=0%]  (sum=28%)
replica_moves#1: last:  [s1=2, s2=2, s3=0, s4=0, s5=0, s6=1, s7=0] (stddev=0.88, mean=0.71, sum=5)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=3000, s2=999, s3=0, s4=0, s5=997, s6=2002, s7=0] (stddev=1069.31, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=7%, s2=6%, s3=0%, s4=0%, s5=5%, s6=13%, s7=0%]  (sum=30%)
replica_moves#2: last:  [s1=3, s2=1, s3=0, s4=0, s5=1, s6=1, s7=0] (stddev=0.99, mean=0.86, sum=6)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[mma-count]: 70bd6b8077cfa20a
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=3.00 tick=0
	max/mean=3.00 tick=1
	max/mean=3.00 tick=2
	max/mean=3.00 tick=3
	max/mean=3.00 tick=4
	max/mean=3.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=3.00 tick=0
	max/mean=3.00 tick=1
	max/mean=3.00 tick=2
	max/mean=3.00 tick=3
	max/mean=3.00 tick=4
	max/mean=3.00 tick=5
==========================

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(sma-count,mma-only,mma-count)
----
qps#1: last:  [s1=994, s2=1004, s3=1002, s4=1002, s5=1000, s6=997, s7=999] (stddev=3.15, mean=999.71, sum=6998)
qps#1: thrash_pct: [s1=114%, s2=58%, s3=3%, s4=4%, s5=104%, s6=105%, s7=53%]  (sum=443%)
replica_moves#1: last:  [s1=6, s2=4, s3=0, s4=1, s5=3, s6=5, s7=2] (stddev=2.00, mean=3.00, sum=21)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=999, s2=998, s3=998, s4=998, s5=1000, s6=999, s7=1003] (stddev=1.67, mean=999.29, sum=6995)
qps#2: thrash_pct: [s1=368%, s2=210%, s3=54%, s4=54%, s5=355%, s6=258%, s7=358%]  (sum=1658%)
replica_moves#2: last:  [s1=15, s2=13, s3=5, s4=3, s5=10, s6=9, s7=8] (stddev=3.89, mean=9.00, sum=63)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[sma-count]: d6940fa02dce5639
==========================
qps#1: last:  [s1=3995, s2=1998, s3=0, s4=0, s5=0, s6=1005, s7=0] (stddev=1412.50, mean=999.71, sum=6998)
qps#1: thrash_pct: [s1=5%, s2=6%, s3=0%, s4=0%, s5=0%, s6=4%, s7=0%]  (sum=15%)
qps#2: last:  [s1=4000, s2=1995, s3=0, s4=0, s5=0, s6=1004, s7=0] (stddev=1413.71, mean=999.86, sum=6999)
qps#2: thrash_pct: [s1=6%, s2=4%, s3=0%, s4=0%, s5=0%, s6=4%, s7=0%]  (sum=14%)
artifacts[mma-only]: 7e15001e12c52b3a
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
==========================
qps#1: last:  [s1=0, s2=996, s3=0, s4=0, s5=2000, s6=3002, s7=998] (stddev=1069.58, mean=999.43, sum=6996)
qps#1: thrash_pct: [s1=477%, s2=58%, s3=0%, s4=0%, s5=414%, s6=10%, s7=103%]  (sum=1061%)
replica_moves#1: last:  [s1=15, s2=9, s3=0, s4=0, s5=10, s6=16, s7=4] (stddev=6.11, mean=7.71, sum=54)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=1999, s2=1002, s3=0, s4=0, s5=0, s6=3001, s7=998] (stddev=1069.18, mean=1000.00, sum=7000)
qps#2: thrash_pct: [s1=114%, s2=60%, s3=0%, s4=0%, s5=107%, s6=10%, s7=3%]  (sum=294%)
replica_moves#2: last:  [s1=4, s2=4, s3=0, s4=0, s5=6, s6=4, s7=1] (stddev=2.19, mean=2.71, sum=19)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[mma-count]: 5dd879193a046fb3
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=3.00 tick=0
	max/mean=3.00 tick=1
	max/mean=3.00 tick=2
	max/mean=3.00 tick=3
	max/mean=3.00 tick=4
	max/mean=3.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=3.00 tick=0
	max/mean=3.00 tick=1
	max/mean=3.00 tick=2
	max/mean=3.00 tick=3
	max/mean=3.00 tick=4
	max/mean=3.00 tick=5
==========================
