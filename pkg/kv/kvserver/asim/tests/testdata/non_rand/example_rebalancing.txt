skip_under_ci
----

# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
#
# TODO(tbg): at this point, six ticks is 3s, not 60s. Update assertion API
# to take a duration, not ticks.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42 metrics=(qps,replica_moves)
----
qps#1: last:  [s1=998, s2=1003, s3=995, s4=1003, s5=998, s6=1000, s7=1001] (stddev=2.71, mean=999.71, sum=6998)
replica_moves#1: last:  [s1=6, s2=0, s3=0, s4=0, s5=1, s6=0, s7=0] (stddev=2.07, mean=1.00, sum=7)
qps#2: last:  [s1=996, s2=998, s3=996, s4=1000, s5=1000, s6=1012, s7=1001] (stddev=5.07, mean=1000.43, sum=7003)
replica_moves#2: last:  [s1=5, s2=0, s3=1, s4=0, s5=0, s6=0, s7=0] (stddev=1.73, mean=0.86, sum=6)
artifacts[default]: 75f9317fc538f3c0

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42 metrics=(qps,replica_moves)
----
qps#1: last:  [s1=1002, s2=994, s3=997, s4=1000, s5=998, s6=1002, s7=1003] (stddev=3.02, mean=999.43, sum=6996)
replica_moves#1: last:  [s1=11, s2=1, s3=3, s4=6, s5=0, s6=0, s7=1] (stddev=3.76, mean=3.14, sum=22)
qps#2: last:  [s1=999, s2=0, s3=2002, s4=1998, s5=0, s6=1003, s7=999] (stddev=755.93, mean=1000.14, sum=7001)
replica_moves#2: last:  [s1=24, s2=11, s3=16, s4=11, s5=5, s6=10, s7=6] (stddev=5.99, mean=11.86, sum=83)
artifacts[default]: af52292b18de6eac
failed assertion sample 2
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=2.00 tick=0
	max/mean=2.00 tick=1
	max/mean=2.00 tick=2
	max/mean=2.00 tick=3
	max/mean=2.00 tick=4
	max/mean=2.00 tick=5
