# This test verifies that the allocator correctly handles IO overload by
# avoiding placement of replicas on stores that exceed the IO threshold. It
# sets up a 5-node cluster where store 5 has an IO threshold of 1, causing it
# to be considered overloaded and excluded from replica placement decisions.
# It is expected that s5 will start with 0 replicas and stay at 0 replicas for
# the duration of the test.
skip_under_ci
----

gen_cluster nodes=5
----

gen_ranges ranges=500 placement_type=replica_placement
{s1,s2,s3}:1
{s1,s2,s4}:1
----
{s1:*,s2,s3}:1
{s1:*,s2,s4}:1

set_capacity store=5 io_threshold=1
----

# Expect s5 to get no replicas due to IO overload.
assertion type=stat stat=replicas stores=(5) exact_bound=0 ticks=5
----

eval duration=5m seed=42 metrics=(replicas,leases) cfgs=(sma-count,mma-only)
----
leases#1: first: [s1=500, s2=0, s3=0, s4=0, s5=0] (stddev=200.00, mean=100.00, sum=500)
leases#1: last:  [s1=338, s2=20, s3=72, s4=70, s5=0] (stddev=122.25, mean=100.00, sum=500)
leases#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%]  (sum=0%)
replicas#1: first: [s1=500, s2=500, s3=250, s4=250, s5=0] (stddev=187.08, mean=300.00, sum=1500)
replicas#1: last:  [s1=375, s2=375, s3=375, s4=375, s5=0] (stddev=150.00, mean=300.00, sum=1500)
replicas#1: thrash_pct: [s1=0%, s2=0%, s3=1%, s4=0%, s5=0%]  (sum=1%)
artifacts[sma-count]: fe25f999e5797f58
==========================
leases#1: first: [s1=500, s2=0, s3=0, s4=0, s5=0] (stddev=200.00, mean=100.00, sum=500)
leases#1: last:  [s1=500, s2=0, s3=0, s4=0, s5=0] (stddev=200.00, mean=100.00, sum=500)
leases#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%]  (sum=0%)
replicas#1: first: [s1=500, s2=500, s3=250, s4=250, s5=0] (stddev=187.08, mean=300.00, sum=1500)
replicas#1: last:  [s1=500, s2=500, s3=250, s4=250, s5=0] (stddev=187.08, mean=300.00, sum=1500)
replicas#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%]  (sum=0%)
artifacts[mma-only]: ad9b0c01b3ab82fd
==========================
