# This test verifies that the allocator can rebalance qps load across a 7-node
# cluster. mma-only fails here since it doesn't balance based on leases.
# TODO(tbg): this test works because the default rebalancing objective in asim
# was accidentally left as 'qps' (even though we use 'cpu' in production).
# When the default changes, this test needs to override the setting and probably
# rename the test to specify that it's about qps rebalancing in particular,
# which otherwise sees little explicit testing.
skip_under_ci
----

# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----
66 KiB/s goodput

# Add two assertions (balanced, stable steady state) on QPS of the cluster.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----
asserting: max_{stores}(qps)/mean_{stores}(qps) ≤ 1.15 at each of last 6 ticks

# TODO(tbg): at this point, six ticks is 3s, not 60s. Update assertion API
# to take a duration, not ticks.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----
asserting: |qps(t)/mean_{T}(qps) - 1| ≤ 0.05 ∀ t∈T and each store (T=last 6 ticks)

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(sma-count,mma-only) full=true
----
qps#1: last:  [s1=998, s2=996, s3=1006, s4=1000, s5=1001, s6=1000, s7=997] (stddev=3.06, mean=999.71, sum=6998)
qps#1: thrash_pct: [s1=8%, s2=2%, s3=0%, s4=4%, s5=1%, s6=197%, s7=2%]  (sum=214%)
replica_moves#1: last:  [s1=3, s2=3, s3=0, s4=1, s5=1, s6=2, s7=1] (stddev=1.05, mean=1.57, sum=11)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=997, s2=1000, s3=998, s4=1000, s5=999, s6=1002, s7=999] (stddev=1.48, mean=999.29, sum=6995)
qps#2: thrash_pct: [s1=5%, s2=1%, s3=1%, s4=1%, s5=2%, s6=1%, s7=2%]  (sum=14%)
replica_moves#2: last:  [s1=3, s2=3, s3=0, s4=0, s5=1, s6=1, s7=0] (stddev=1.25, mean=1.14, sum=8)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[sma-count]: e7d7fb862e8fc975
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=2.00 tick=5  steady state stat=qps threshold=(≤0.05) ticks=6
	store=3 min/mean=1.00 max/mean=0.40
	store=4 min/mean=0.22 max/mean=0.56
==========================
qps#1: last:  [s1=3999, s2=1997, s3=0, s4=0, s5=0, s6=1003, s7=0] (stddev=1413.61, mean=999.86, sum=6999)
qps#1: thrash_pct: [s1=1%, s2=1%, s3=0%, s4=0%, s5=0%, s6=1%, s7=0%]  (sum=2%)
qps#2: last:  [s1=3996, s2=2000, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1413.00, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=1%, s2=1%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=2%)
artifacts[mma-only]: 4843a83a24ef0034
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
==========================
Cluster Set Up
	n1(AU_EAST,AU_EAST_1,8vcpu): {s1:(256GiB)}
	n2(AU_EAST,AU_EAST_1,8vcpu): {s2:(256GiB)}
	n3(AU_EAST,AU_EAST_1,8vcpu): {s3:(256GiB)}
	n4(AU_EAST,AU_EAST_1,8vcpu): {s4:(256GiB)}
	n5(AU_EAST,AU_EAST_1,8vcpu): {s5:(256GiB)}
	n6(AU_EAST,AU_EAST_1,8vcpu): {s6:(256GiB)}
	n7(AU_EAST,AU_EAST_1,8vcpu): {s7:(256GiB)}
Key Space
	[0,10000): 7(rf=3), 0MiB, [s1:(7,4*),s2:(6,2*),s3:(3,0*),s4:(2,0*),s5:(1,0*),s6:(1,1*),s7:(1,0*)]
Event
	set LBRebalancingMode to 2
Workload Set Up
	[0,10000): 95%r large-block [128-256B/op, 7000ops/s]
Changed Settings
	empty
==========================

# TODO(tbg): make this a separate testdata file.

# Update the gossip delay to be unreasonably long (default 500ms) to assess
# uncommon scenarios.
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42 metrics=(qps,replica_moves) cfgs=(sma-count,mma-only)
----
qps#1: last:  [s1=0, s2=1000, s3=998, s4=994, s5=2005, s6=999, s7=1005] (stddev=535.87, mean=1000.14, sum=7001)
qps#1: thrash_pct: [s1=316%, s2=55%, s3=0%, s4=1%, s5=306%, s6=51%, s7=58%]  (sum=788%)
replica_moves#1: last:  [s1=11, s2=10, s3=7, s4=9, s5=8, s6=10, s7=2] (stddev=2.80, mean=8.14, sum=57)
replica_moves#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
qps#2: last:  [s1=1003, s2=3998, s3=0, s4=0, s5=988, s6=1002, s7=0] (stddev=1308.66, mean=998.71, sum=6991)
qps#2: thrash_pct: [s1=162%, s2=408%, s3=2%, s4=0%, s5=399%, s6=149%, s7=154%]  (sum=1275%)
replica_moves#2: last:  [s1=9, s2=12, s3=11, s4=3, s5=14, s6=15, s7=8] (stddev=3.77, mean=10.29, sum=72)
replica_moves#2: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%]  (sum=0%)
artifacts[sma-count]: cb9c0a71757bd805
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=2.00 tick=0
	max/mean=2.01 tick=1
	max/mean=2.00 tick=2
	max/mean=2.00 tick=4
	max/mean=2.00 tick=5  steady state stat=qps threshold=(≤0.05) ticks=6
	store=1 min/mean=1.00 max/mean=1.00
	store=5 min/mean=1.00 max/mean=1.00
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.65 tick=2
	max/mean=3.98 tick=3
	max/mean=3.98 tick=4
	max/mean=2.00 tick=5  steady state stat=qps threshold=(≤0.05) ticks=6
	store=1 min/mean=1.00 max/mean=0.41
	store=2 min/mean=1.00 max/mean=0.40
	store=3 min/mean=1.00 max/mean=2.50
	store=4 min/mean=1.00 max/mean=2.51
	store=5 min/mean=1.00 max/mean=1.34
	store=7 min/mean=1.00 max/mean=1.34
==========================
qps#1: last:  [s1=4001, s2=1995, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1414.01, mean=999.71, sum=6998)
qps#1: thrash_pct: [s1=1%, s2=1%, s3=0%, s4=0%, s5=0%, s6=1%, s7=0%]  (sum=3%)
qps#2: last:  [s1=3996, s2=2000, s3=0, s4=0, s5=0, s6=1002, s7=0] (stddev=1413.00, mean=999.71, sum=6998)
qps#2: thrash_pct: [s1=1%, s2=1%, s3=0%, s4=0%, s5=0%, s6=1%, s7=0%]  (sum=2%)
artifacts[mma-only]: 17c5363e38cc66f3
failed assertion sample 1
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
failed assertion sample 2
  balance stat=qps threshold=(≤1.15) ticks=6
	max/mean=4.00 tick=0
	max/mean=4.00 tick=1
	max/mean=4.00 tick=2
	max/mean=4.00 tick=3
	max/mean=4.00 tick=4
	max/mean=4.00 tick=5
==========================
