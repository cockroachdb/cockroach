# This test can now roughly equalize both cpu and write bandwidth. It didn't
# use to be able to do this, because the highest cpu node had the lowest write
# bandwidth and vice versa, so neither was able to shed to the other. The
# ignoreLevel logic in rebalanceStores with the grace duration to start
# shedding more aggressively and other related changes have made this much
# better.

gen_cluster nodes=6 node_cpu_rate_capacity=50000
----

# The placement will be skewed, s.t. n1/s1, n2/s2 and n3/s3 will have all the
# replicas initially and n1/s1 will have every lease. Each range is initially
# 26 MiB.
gen_ranges ranges=300 min_key=1 max_key=10000 placement_type=replica_placement bytes=26843545
{s1,s2,s3}:1
----
{s1:*,s2,s3}:1

gen_load rate=1000 rw_ratio=1 request_cpu_per_access=100 min_key=1 max_key=10000
----

# Write only workload, which generates little CPU and 100_000 (x replication
# factor) write bytes per second over the second half of the keyspace.
gen_ranges ranges=300 min_key=10001 max_key=20000 placement_type=replica_placement bytes=26843545
{s4,s5,s6}:1
----
{s4:*,s5,s6}:1

gen_load rate=20000 rw_ratio=0 min_block=1000 max_block=1000 raft_cpu_per_write=1 min_key=10001 max_key=20000
----

setting rebalance_mode=3 replicate_queue_enabled=false lease_queue_enabled=false split_queue_enabled=false
----

eval duration=60m samples=1 seed=42
----
OK

plot stat=cpu sample=1  
----
 20006 ┤╭──────────────────────────────────────────────────────────────────────────────
 18672 ┤│
 17339 ┤│
 16005 ┤│
 14671 ┤│
 13337 ┤│
 12004 ┤│
 10670 ┤│
  9336 ┤│
  8002 ┤│
  6669 ┤│
  5335 ┤│
  4001 ┤│
  2667 ┤│
  1334 ┤│
     0 ┼───────────────────────────────────────────────────────────────────────────────
                                              cpu
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=0, s2=0, s3=0, s4=20006, s5=0, s6=0] (stddev=7455.80, mean=3334.33, sum=20006)

plot stat=write_bytes_per_second
----
 40013333 ┤╭──────────────────────────────╮───────────────────────────────────────────────
 37345777 ┤│   ╰───────╮╭╮                ╰╮
 34678222 ┤│           ╰╯╰─────╮           ╰─╮
 32010666 ┤│                   ╰───╮         ╰╮
 29343111 ┤│                       ╰─╮        ╰─╮
 26675555 ┤│                         ╰─╮        ╰─╮
 24008000 ┤│                           ╰─╮        ╰─╮
 21340444 ┤│                             ╰──────────╰─────────────────────────────────────
 18672889 ┤│
 16005333 ┤│
 13337778 ┤│                                        ╭─────────────────────────────────────
 10670222 ┤│                                  ╭─╭─────────────────────────────────────────
  8002667 ┤│                             ╭─╭────╯
  5335111 ┤│                        ╭──╭───╯
  2667556 ┤│          ╭───╭────────────╯
        0 ┼╯──────────────╯
                                        write_bytes_per_second
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=12808042, s2=11750966, s3=11619922, s4=40013333, s5=21925062, s6=21922672] (stddev=9982754.23, mean=20006666.17, sum=120039997)

plot stat=replicas  
----
 394 ┤                                         ╭─╭───────────────────────────────────
 379 ┤                                     ╭╭────╯───────────────────────────────────
 364 ┤                                ╭─╭───╯
 348 ┤                             ╭─╭──╯
 333 ┤                        ╭──╭───╯
 318 ┤               ╭─╭─────────╯
 303 ┼──────────────────────────────╮────────────────────────────────────────────────
 288 ┤  ╰──────╮                    ╰─╮
 272 ┤         ╰─────╮                ╰╮
 257 ┤               ╰────╮            ╰╮
 242 ┤                    ╰──╮          ╰╮
 227 ┤                       ╰──╮        ╰─╮
 212 ┤                          ╰╮         ╰╮
 196 ┤                           ╰╮         ╰─╮
 181 ┤                            ╰╮          ╰╮
 166 ┤                             ╰───────────╰─────────────────────────────────────
                                          replicas
initial store values: [s1=300, s2=300, s3=300, s4=300, s5=300, s6=300] (stddev=0.00, mean=300.00, sum=1800)
last store values: [s1=394, s2=386, s3=388, s4=300, s5=166, s6=166] (stddev=99.91, mean=300.00, sum=1800)

plot stat=leases sample=1  
----
 300 ┼───────────────────────────────────────────────────────────────────────────────
 280 ┤
 260 ┤
 240 ┤
 220 ┤
 200 ┤
 180 ┤
 160 ┤
 140 ┤
 120 ┤
 100 ┤
  80 ┤
  60 ┤
  40 ┤
  20 ┤
   0 ┼───────────────────────────────────────────────────────────────────────────────
                                           leases
initial store values: [s1=300, s2=0, s3=0, s4=300, s5=0, s6=0] (stddev=141.42, mean=100.00, sum=600)
last store values: [s1=300, s2=0, s3=0, s4=300, s5=0, s6=0] (stddev=141.42, mean=100.00, sum=600)
