# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42
----
OK

# It is possible to plot the output of a stat, of a selected sample run. Below
# the last sample run is selected and the QPS is plotted per store. This is
# useful to determine the QPS matches out expectations - it should be balanced
# and stable. This should only be done for tests where the seed is given, so
# the output is identical..
plot stat=qps sample=2
----
 5926 ┤ ╭╮
 5531 ┤ ││
 5135 ┤ ││
 4740 ┤ ││
 4345 ┤ ││
 3950 ┤ │╰───────────────────────╮
 3555 ┤ │                        │
 3160 ┤ │                        │
 2765 ┤ │                        │
 2370 ┤ │                        ╰╮
 1975 ┤ │  ╭─────────────────────╮│ ╭───────────────────────╮
 1580 ┤ │  │                     ││╭╯                       │
 1185 ┤ │ ╭╭────────────────────────╭─────────────────────────────────────────────────
  790 ┤ │╭╯│                       ││                         │
  395 ┤ ││ │                       ││                         │
    0 ┼─────────────────────────────╯─────────────────────────╯
                                             qps
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0, s7=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=996, s2=998, s3=996, s4=1000, s5=1000, s6=1012, s7=1001] (stddev=5.07, mean=1000.43, sum=7003)

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42
----
failed assertion sample 2
  balance stat=qps threshold=(<1.15) ticks=6
	max/mean=2.00 tick=0
	max/mean=2.00 tick=1
	max/mean=2.00 tick=2
	max/mean=2.00 tick=3
	max/mean=2.00 tick=4
	max/mean=2.00 tick=5

# To investigate further, plot the QPS output again. The plotted output
# exhibits thrashing as rebalancing occurs frequently with eventual
# convergence.
plot stat=qps sample=4
----
 7000 ┤ ╭───╮
 6533 ┤ │   │
 6067 ┤ │   ╰╮
 5600 ┤ │    │
 5133 ┤ │    │
 4667 ┤ │    │
 4200 ┤ │    │  ╭───╮   ╭─────╮
 3733 ┤ │    │  │   │   │     │
 3267 ┤ │    │  │   │   │     │
 2800 ┤ │    ╰╮╭╯   ╰─╮╭╯     ╰──╮╭────╮                ╭───╮  ╭────╮  ╭─────╮
 2333 ┤ │     ││      ╰╮         ││    │                │   │  │    │  │     │
 1867 ┤ │     ╭╭─────╮╭│        ╭─╯───╮╰╭─────────────╮╭╯   ╰╮╭╯    ╰╮ │     │╭╭──────
 1400 ┤ │     ││     │││        │     ╰╮│ │   │ │    │││     ││      ╰╮│     │││
  933 ┤ │    ╭╭╭────────╭──────────╭────╯─────────────╰───────────────────────────────
  467 ┤ │    │││      │││    │ │  ││   ││   │  │      │       │      ╭│       │
    0 ┼────────────────────────────╯──────────────────────────────────────────────────
                                             qps
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0, s7=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=999, s2=0, s3=2002, s4=1998, s5=0, s6=1003, s7=999] (stddev=755.93, mean=1000.14, sum=7001)

# Plot the replica movements for the same sample, we should see a steadily
# increasing counter for each store; indicating that rebalancing activity is
# persistent, until convergence.
plot stat=replica_moves sample=4
----
 24.00 ┤                                                                        ╭──────
 22.40 ┤                                                      ╭─────────────────╯
 20.80 ┤                                       ╭──────────────╯
 19.20 ┤                               ╭───────╯
 17.60 ┤                          ╭────╯
 16.00 ┤                        ╭─╯                                           ╭────────
 14.40 ┤                       ╭╯                           ╭─────────────────╯
 12.80 ┤                     ╭─╯               ╭────────────╯
 11.20 ┤               ╭─────╯             ╭───╯                       ╭───────────────
  9.60 ┤       ╭───────╯               ╭───╯                         ╭─────────────────
  8.00 ┤       │               ╭───────╯               ╭─────╭───────╯────────╯
  6.40 ┤      ╭╯      ╭────────╯        ╭──────╭───────╭───────────────────────────────
  4.80 ┤      │      ╭╭────────╭───────╭───────╯╭──────╯───────────────────────────────
  3.20 ┤     ╭╯ ╭────╭╯      ╭─╭───────╯   ╭───╭╯
  1.60 ┤     │╭╭─────╭──╭──────╯───────╭───────╯
  0.00 ┼───────────────────────────────╯
                                         replica_moves
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0, s7=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=24, s2=11, s3=16, s4=11, s5=5, s6=10, s7=6] (stddev=5.99, mean=11.86, sum=83)

# vim:ft=sh
