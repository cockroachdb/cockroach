# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_skew=true
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42
----
OK

# It is possible to plot the output of a stat, of a selected sample run. Below
# the last sample run is selected and the QPS is plotted per store. This is
# useful to determine the QPS matches out expectations - it should be balanced
# and stable. This should only be done for tests where the seed is given, so
# the output is identical..
plot stat=qps sample=2
----
----

 4933 ┤ ╭╮
 4604 ┤ ││
 4275 ┤ ││
 3946 ┤ ││
 3617 ┤ ││
 3288 ┤ │╰╮
 2960 ┤ │ ╰──────────────────────╮
 2631 ┤ │                        │
 2302 ┤ │                        │
 1973 ┤ │  ╭─────────────────────╮  ╭───────────────────────╮
 1644 ┤ │  │                     │  │                       │
 1315 ┤ │  │                     │╮ │                       │
  987 ┤ │ ╭─╭─────────────────────────────────────────────────╭───────────────────────
  658 ┤ │╭│ │                      ╭╯                         │
  329 ┤ │││ │                      │                          │
    0 ┼───────────────────────────────────────────────────────╯
                                             qps
----
----

plot stat=replica_moves sample=2
----
----

 6.00 ┤   ╭───────────────────────────────────────────────────────────────────────────
 5.60 ┤  ╭╯
 5.20 ┤  │
 4.80 ┤  │
 4.40 ┤  │
 4.00 ┤  │
 3.60 ┤  │
 3.20 ┤ ╭╯
 2.80 ┤ │
 2.40 ┤ │
 2.00 ┤ │
 1.60 ┤ │
 1.20 ┤╭╯╭────────────────────────────────────────────────────────────────────────────
 0.80 ┤│ │
 0.40 ┤│ │
 0.00 ┼───────────────────────────────────────────────────────────────────────────────
                                        replica_moves
----
----

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
eval duration=5m samples=2 seed=42
----
OK

# To investigate further, plot the QPS output again. The plotted output
# exhibits thrashing as rebalancing occurs frequently with eventual
# convergence.
plot stat=qps sample=3
----
----

 7000 ┤ ╭───╮
 6533 ┤ │   │
 6067 ┤ │   │
 5600 ┤ │   ╰╮
 5133 ┤ │    │
 4667 ┤ │    │
 4200 ┤ │    │
 3733 ┤ │    │
 3267 ┤ │    │
 2800 ┤ │    ╰╮╭────╮
 2333 ┤ │     ││    │
 1867 ┤ │     ╭╯╭───│──╮╭─────────────╮
 1400 ┤ │     │ │   │  ││    │        ╰╮
  933 ┤ │    ╭│╭╯   │╭────────────────────────────────────────────────────────────────
  467 ┤ │    │││    │││││    ││         │
    0 ┼──────────────╯──╯─────╯─────────╯
                                             qps
----
----

# Plot the replica movements for the same sample, we should see a steadily
# increasing counter for each store; indicating that rebalancing activity is
# persistent, until convergence.
plot stat=replica_moves sample=3
----
----

 15.00 ┤                      ╭────────────────────────────────────────────────────────
 14.00 ┤                      │
 13.00 ┤                ╭─────╯
 12.00 ┤                │
 11.00 ┤        ╭───────╯
 10.00 ┤       ╭╯
  9.00 ┤       │
  8.00 ┤       │
  7.00 ┤       │
  6.00 ┤      ╭╯
  5.00 ┤      │      ╭─────────────────────────────────────────────────────────────────
  4.00 ┤      │      │        ╭────╭───────────────────────────────────────────────────
  3.00 ┤      │      │  ╭──────────╯───╯
  2.00 ┤     ╭╯ ╭────╯──╯     ╭────────────────────────────────────────────────────────
  1.00 ┤     │╭╭╯────│  ╭─────╯    ╭───────────────────────────────────────────────────
  0.00 ┼───────────────────────────╯
                                         replica_moves
----
----

# vim:ft=sh
