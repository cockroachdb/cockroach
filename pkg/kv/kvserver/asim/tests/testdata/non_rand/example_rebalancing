# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_cluster nodes=7
----

gen_ranges ranges=7 placement_type=skewed
----

# Create a load generator, where there are 7k ops/s and the access follows a
# uniform distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 upper_bound=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
assertion stat=qps type=steady ticks=6 upper_bound=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 3 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42
----
OK

# It is possible to plot the output of a stat, of a selected sample run. Below
# the last sample run is selected and the QPS is plotted per store. This is
# useful to determine the QPS matches out expectations - it should be balanced
# and stable. This should only be done for tests where the seed is given, so
# the output is identical..
plot stat=qps sample=2
----
 5021 ┤ ╭╮
 4686 ┤ ││
 4351 ┤ │╰╮
 4017 ┤ │ ╰──────────────────────╮
 3682 ┤ │                        │
 3347 ┤ │                        │
 3013 ┤ │                        │
 2678 ┤ │                        │
 2343 ┤ │                        ╰╮
 2008 ┤ │                         │ ╭───────────────────────╮
 1674 ┤ │                         │╭╯                       │
 1339 ┤ │                         ││                        │
 1004 ┤ │ ╭────────────────────────╯╭─────────────────────────────────────────────────
  669 ┤ │╭│ │                       │                         │
  335 ┤ │││ │                       │                         │
    0 ┼─────────────────────────────╯─────────────────────────╯
                                             qps
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0, s7=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=996, s2=997, s3=996, s4=1000, s5=1000, s6=1005, s7=1001] (stddev=3.01, mean=999.29, sum=6995)

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that the balance assertion and steady state assertion
# are reached, but after more fluctuation and a longer duration of 5m, due to
# how the system reacts to the long gossip delays.
#
# TODO: Adding StoreGossip.RecordNewPerSecondStats() to asim gossip causes
# thrashing on the fourth sample here.
eval duration=5m samples=2 seed=42
----

# To investigate further, plot the QPS output again. The plotted output
# exhibits thrashing as rebalancing occurs frequently with eventual
# convergence.
plot stat=qps sample=4
----

# Plot the replica movements for the same sample, we should see a steadily
# increasing counter for each store; indicating that rebalancing activity is
# persistent, until convergence.
plot stat=replica_moves sample=4
----
 14.00 ┤                         ╭─────────────────────────────────────────────────────
 13.07 ┤                        ╭╯
 12.13 ┤                ╭───────╯
 11.20 ┤        ╭───────╯
 10.27 ┤       ╭╯
  9.33 ┤       │
  8.40 ┤       │
  7.47 ┤       │
  6.53 ┤      ╭╯
  5.60 ┤      │                         ╭──────────────────────────────────────────────
  4.67 ┤      │      ╭─────────────────────────────────────────────────────────────────
  3.73 ┤      │      │   ╭──────────────╯
  2.80 ┤     ╭╯      │  ╭╯──────╯
  1.87 ┤     │  ╭────╯──╯──────╭───────────────────────────────────────────────────────
  0.93 ┤     │╭╭╯────│  ╭──────╯                        ╭──────────────────────────────
  0.00 ┼────────────────────────────────────────────────╯
                                         replica_moves
initial store values: [s1=0, s2=0, s3=0, s4=0, s5=0, s6=0, s7=0] (stddev=0.00, mean=0.00, sum=0)
last store values: [s1=14, s2=6, s3=5, s4=5, s5=5, s6=2, s7=1] (stddev=3.89, mean=5.43, sum=38)

# vim:ft=sh
