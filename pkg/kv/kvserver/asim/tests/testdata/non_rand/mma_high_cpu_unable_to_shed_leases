# Want to test two cases:
# (1) Where its impossible to shed leases from the CPU overloaded store, so we
#     should initially observe a period of no rebalancing activity away from
#     the store.
# (2) Where its possible to shed leases from the CPU overloaded store, so we
#     should observe a period of lease transfers before any replica based
#     rebalancing away from the store occurs.
gen_cluster nodes=5 node_cpu_rate_capacity=90000
----

# Disable everything but the mma store rebalancer.
setting rebalance_mode=3 replicate_queue_enabled=false lease_queue_enabled=false split_queue_enabled=false
----

# Case (1) where s1 has no leases and is CPU overloaded due to raft CPU. It
# won't be able to shed its own replicas because it is not the leaseholder for
# any of the ranges.
# TODO(tbg): double check that this placement does what's promised (I migrated this
# over from the old weighted method).
# TODO(tbg): something is messed up. This panics:
# panic: Unable to load config: add replica to store 0 failed at for range r1(0)=(s1:r1(VOTER_FULL)*) replicas [r1,s1/1] [recovered]
gen_ranges ranges=25 min_key=0 max_key=10000 placement_type=replica_placement
{s1,s2*,s3}:1 {s1,s3*,s4}:1 {s1,s4*,s5}:1
----

gen_load rate=1000 rw_ratio=0 min_block=0 max_block=0 min_key=0 max_key=10000 raft_cpu_per_write=100
----

eval duration=30m samples=1 seed=42
----
OK

plot stat=cpu
----
----

 88016 ┤╭──────╮
 82148 ┤│      │
 76280 ┤│      │
 70413 ┤│      ╭──╮
 64545 ┤│      ╭───────────────────────────────────────────────────────────────────────
 58677 ┤│╭─────╯──╭╮╭──────────────────────────────────────────────────────────────────
 52809 ┤╭╯────────╯╰╯
 46942 ┤│
 41074 ┤│
 35206 ┤│
 29339 ┤│
 23471 ┤│
 17603 ┤│
 11735 ┤│
  5868 ┤│
     0 ┼╯
                                              cpu

last store values: [s1=56026 s2=59924 s3=64066 s4=56056 s5=64001] (stddev=3574.71)
----
----

plot stat=write_bytes_per_second
----
----

 0.00 ┼───────────────────────────────────────────────────────────────────────────────
                                    write_bytes_per_second

last store values: [s1=0 s2=0 s3=0 s4=0 s5=0] (stddev=0.00)
----
----

plot stat=replicas
----
----

 22.00 ┼───────╮
 21.40 ┤       │
 20.80 ┤       │
 20.20 ┤       │
 19.60 ┤       │
 19.00 ┤       │
 18.40 ┤       │
 17.80 ┤       │
 17.20 ┤       │
 16.60 ┤       ╭──╮
 16.00 ┤       ╭───────────────────────────────────────────────────────────────────────
 15.40 ┤       │
 14.80 ┤       │───────────────────────────────────────────────────────────────────────
 14.20 ┤       │
 13.60 ┼───────╯──╭────────────────────────────────────────────────────────────────────
 13.00 ┼──────────╯
                                            replicas

last store values: [s1=14 s2=15 s3=16 s4=14 s5=16] (stddev=0.89)
----
----

plot stat=leases
----
----

 7.00 ┼───────────────────────────────────────────────────────────────────────────────
 6.53 ┤          │
 6.07 ┼──────────╯
 5.60 ┤          │
 5.13 ┤          │
 4.67 ┤          │
 4.20 ┤          │
 3.73 ┤          │
 3.27 ┤          │
 2.80 ┤          │────────────────────────────────────────────────────────────────────
 2.33 ┤          │
 1.87 ┤          │
 1.40 ┤          │
 0.93 ┤          ╰────────────────────────────────────────────────────────────────────
 0.47 ┤          │
 0.00 ┼──────────╯
                                            leases

last store values: [s1=3 s2=7 s3=1 s4=7 s5=7] (stddev=2.53)
----
----

# TODO(kvoli): Case (2)
