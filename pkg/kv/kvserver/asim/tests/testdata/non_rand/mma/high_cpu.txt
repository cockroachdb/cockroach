# This test verifies that the allocator can rebalance replicas and leases when
# there is high cpu load imbalance across the cluster. The test sets up a 10-node
# cluster with two distinct workloads: one evenly distributed across all nodes,
# and another high-cpu workload initially concentrated on only the first few nodes
# due to skewed placement. The second workload has significantly higher cpu cost
# per op, creating cpu imbalance.
#
# Expected outcome: The allocator should rebalance both replicas and leases to
# distribute the high-cpu workload more evenly across all 10 nodes.
gen_cluster nodes=10 node_cpu_rate_capacity=8000000000
----

# TODO(wenyihu6): why didn't we balance more replicas/leases - is it because of a very high cpu per range 

# Disable the split queue to keep the number of ranges constant.
setting split_queue_enabled=false
----

# This workload will be initially evenly distributed over the cluster.
gen_ranges ranges=100 min_key=0 max_key=10000
----

# Evenly distributed workload.
gen_load rate=5000 rw_ratio=0.95 min_block=100 max_block=100 request_cpu_per_access=1000000 raft_cpu_per_write=200000 min_key=0 max_key=10000
----
5.00 access-vcpus, 0.05 raft-vcpus, 24 KiB/s goodput

# Another workload is added over the second half of the keyspace, which is initially
# mostly on s1-s3.
gen_ranges ranges=50 min_key=10001 max_key=20000 placement_type=skewed
----

gen_load rate=1000 rw_ratio=0.99 min_block=128 max_block=128 request_cpu_per_access=10000000 raft_cpu_per_write=20000000 min_key=10001 max_key=20000
----
10.00 access-vcpus, 0.20 raft-vcpus, 1.3 KiB/s goodput

# Assert that:
# - CPU is balanced across stores and doesn't fluctuate.
# - replicas and leases are balanced and don't fluctuate.
# We don't assert on replica count being balanced, even though
# we do expect it to be the case in mma-count, because it won't
# hold in mma-only. Ideally we could vary the assertions based
# on the configuration or split up the configurations into
# separate runs without needing to duplicate much of the test
# setup.

assertion type=balance stat=cpu upper_bound=1.1 ticks=100
----
asserting: max_{stores}(cpu)/mean_{stores}(cpu) ≤ 1.10 at each of last 100 ticks

assertion type=steady stat=cpu upper_bound=0.1 ticks=100
----
asserting: |cpu(t)/mean_{T}(cpu) - 1| ≤ 0.10 ∀ t∈T and each store (T=last 100 ticks)

assertion type=steady stat=replicas upper_bound=0.1 ticks=100
----
asserting: |replicas(t)/mean_{T}(replicas) - 1| ≤ 0.10 ∀ t∈T and each store (T=last 100 ticks)

assertion type=steady stat=leases upper_bound=0.1 ticks=100
----
asserting: |leases(t)/mean_{T}(leases) - 1| ≤ 0.10 ∀ t∈T and each store (T=last 100 ticks)

eval duration=20m samples=1 seed=42 cfgs=(mma-count,mma-only) metrics=(cpu,cpu_util,replicas,leases)
----
cpu#1: last:  [s1=1686981580, s2=1656985804, s3=1583570266, s4=1726441417, s5=1370525285, s6=1503341155, s7=1358245755, s8=1601698821, s9=1601685190, s10=1652826073] (stddev=119863546.40, mean=1574230134.60, sum=15742301346)
cpu#1: thrash_pct: [s1=3%, s2=14%, s3=20%, s4=4%, s5=3%, s6=5%, s7=4%, s8=2%, s9=11%, s10=3%]  (sum=69%)
cpu_util#1: last:  [s1=0.21, s2=0.21, s3=0.20, s4=0.22, s5=0.17, s6=0.19, s7=0.17, s8=0.20, s9=0.20, s10=0.21] (stddev=0.01, mean=0.20, sum=2)
cpu_util#1: thrash_pct: [s1=3%, s2=14%, s3=20%, s4=4%, s5=3%, s6=5%, s7=4%, s8=2%, s9=11%, s10=3%]  (sum=69%)
leases#1: first: [s1=37, s2=22, s3=14, s4=13, s5=11, s6=11, s7=10, s8=11, s9=10, s10=11] (stddev=8.07, mean=15.00, sum=150)
leases#1: last:  [s1=10, s2=13, s3=15, s4=18, s5=14, s6=17, s7=14, s8=16, s9=13, s10=20] (stddev=2.72, mean=15.00, sum=150)
leases#1: thrash_pct: [s1=0%, s2=10%, s3=15%, s4=0%, s5=0%, s6=0%, s7=0%, s8=0%, s9=31%, s10=0%]  (sum=56%)
replicas#1: first: [s1=80, s2=70, s3=51, s4=42, s5=37, s6=35, s7=34, s8=33, s9=34, s10=34] (stddev=16.02, mean=45.00, sum=450)
replicas#1: last:  [s1=44, s2=44, s3=45, s4=47, s5=44, s6=43, s7=46, s8=47, s9=43, s10=47] (stddev=1.55, mean=45.00, sum=450)
replicas#1: thrash_pct: [s1=0%, s2=0%, s3=0%, s4=0%, s5=0%, s6=0%, s7=0%, s8=0%, s9=0%, s10=0%]  (sum=0%)
artifacts[mma-count]: 250fdc2f7c8cbe8e
failed assertion sample 1
  balance stat=cpu threshold=(≤1.10) ticks=100
	max/mean=1.13 tick=77
	max/mean=1.13 tick=78
	max/mean=1.12 tick=79
	max/mean=1.12 tick=80
	max/mean=1.12 tick=81
	max/mean=1.12 tick=82
	max/mean=1.32 tick=83
	max/mean=1.32 tick=84
	max/mean=1.32 tick=85
	max/mean=1.32 tick=86
	max/mean=1.32 tick=87
	max/mean=1.32 tick=88
	max/mean=1.58 tick=89
	max/mean=1.58 tick=90
	max/mean=1.57 tick=91
	max/mean=1.58 tick=92
	max/mean=1.57 tick=93
	max/mean=1.57 tick=94
	max/mean=1.83 tick=95
	max/mean=1.83 tick=96
	max/mean=1.83 tick=97
	max/mean=1.84 tick=98
	max/mean=1.84 tick=99  steady state stat=cpu threshold=(≤0.10) ticks=100
	store=1 min/mean=0.08 max/mean=0.58
	store=2 min/mean=0.01 max/mean=0.13
	store=3 min/mean=0.01 max/mean=0.11
	store=4 min/mean=0.25 max/mean=0.03
	store=6 min/mean=0.25 max/mean=0.07
	store=7 min/mean=0.14 max/mean=0.04
	store=9 min/mean=0.01 max/mean=0.12
	store=10 min/mean=0.19 max/mean=0.03  steady state stat=leases threshold=(≤0.10) ticks=100
	store=1 min/mean=0.07 max/mean=0.49
	store=4 min/mean=0.16 max/mean=0.01
	store=6 min/mean=0.10 max/mean=0.02
	store=9 min/mean=0.02 max/mean=0.28
	store=10 min/mean=0.19 max/mean=0.02
==========================
cpu#1: last:  [s1=1706689487, s2=1615590137, s3=1678019631, s4=1624790239, s5=1649039010, s6=1640251361, s7=1136037214, s8=1438297729, s9=1699465002, s10=1552865852] (stddev=164064190.24, mean=1574104566.20, sum=15741045662)
cpu#1: thrash_pct: [s1=11%, s2=31%, s3=53%, s4=20%, s5=3%, s6=20%, s7=4%, s8=3%, s9=5%, s10=4%]  (sum=154%)
cpu_util#1: last:  [s1=0.21, s2=0.20, s3=0.21, s4=0.20, s5=0.21, s6=0.21, s7=0.14, s8=0.18, s9=0.21, s10=0.19] (stddev=0.02, mean=0.20, sum=2)
cpu_util#1: thrash_pct: [s1=11%, s2=31%, s3=53%, s4=20%, s5=3%, s6=20%, s7=4%, s8=3%, s9=5%, s10=4%]  (sum=154%)
leases#1: first: [s1=37, s2=22, s3=14, s4=13, s5=11, s6=11, s7=10, s8=11, s9=10, s10=11] (stddev=8.07, mean=15.00, sum=150)
leases#1: last:  [s1=15, s2=9, s3=17, s4=10, s5=23, s6=17, s7=13, s8=16, s9=15, s10=15] (stddev=3.71, mean=15.00, sum=150)
leases#1: thrash_pct: [s1=0%, s2=0%, s3=37%, s4=30%, s5=0%, s6=39%, s7=0%, s8=0%, s9=0%, s10=0%]  (sum=107%)
replicas#1: first: [s1=80, s2=70, s3=51, s4=42, s5=37, s6=35, s7=34, s8=33, s9=34, s10=34] (stddev=16.02, mean=45.00, sum=450)
replicas#1: last:  [s1=80, s2=58, s3=46, s4=45, s5=38, s6=37, s7=35, s8=36, s9=37, s10=38] (stddev=13.42, mean=45.00, sum=450)
replicas#1: thrash_pct: [s1=0%, s2=0%, s3=5%, s4=0%, s5=0%, s6=5%, s7=0%, s8=0%, s9=0%, s10=0%]  (sum=10%)
artifacts[mma-only]: e2a6a645a68fa963
failed assertion sample 1
  balance stat=cpu threshold=(≤1.10) ticks=100
	max/mean=1.19 tick=59
	max/mean=1.20 tick=60
	max/mean=1.19 tick=61
	max/mean=1.19 tick=62
	max/mean=1.20 tick=63
	max/mean=1.35 tick=64
	max/mean=1.34 tick=65
	max/mean=1.33 tick=66
	max/mean=1.34 tick=67
	max/mean=1.34 tick=68
	max/mean=1.33 tick=69
	max/mean=1.38 tick=70
	max/mean=1.59 tick=71
	max/mean=1.59 tick=72
	max/mean=1.59 tick=73
	max/mean=1.59 tick=74
	max/mean=1.59 tick=75
	max/mean=1.65 tick=76
	max/mean=1.84 tick=77
	max/mean=1.84 tick=78
	max/mean=1.84 tick=79
	max/mean=1.84 tick=80
	max/mean=1.84 tick=81
	max/mean=1.91 tick=82
	max/mean=2.10 tick=83
	max/mean=2.09 tick=84
	max/mean=2.10 tick=85
	max/mean=2.10 tick=86
	max/mean=2.09 tick=87
	max/mean=2.21 tick=88
	max/mean=2.35 tick=89
	max/mean=2.35 tick=90
	max/mean=2.35 tick=91
	max/mean=2.35 tick=92
	max/mean=2.35 tick=93
	max/mean=2.47 tick=94
	max/mean=2.73 tick=95
	max/mean=2.73 tick=96
	max/mean=2.73 tick=97
	max/mean=2.73 tick=98
	max/mean=2.73 tick=99  steady state stat=cpu threshold=(≤0.10) ticks=100
	store=1 min/mean=0.24 max/mean=0.94
	store=2 min/mean=0.10 max/mean=0.48
	store=3 min/mean=0.09 max/mean=0.16
	store=4 min/mean=0.03 max/mean=0.12
	store=5 min/mean=0.44 max/mean=0.09
	store=6 min/mean=0.25 max/mean=0.18
	store=7 min/mean=0.43 max/mean=0.27
	store=8 min/mean=0.47 max/mean=0.05
	store=9 min/mean=0.41 max/mean=0.14
	store=10 min/mean=0.33 max/mean=0.14  steady state stat=replicas threshold=(≤0.10) ticks=100
	store=2 min/mean=0.02 max/mean=0.11  steady state stat=leases threshold=(≤0.10) ticks=100
	store=1 min/mean=0.15 max/mean=0.59
	store=2 min/mean=0.09 max/mean=0.42
	store=3 min/mean=0.03 max/mean=0.14
	store=4 min/mean=0.06 max/mean=0.60
	store=5 min/mean=0.39 max/mean=0.08
	store=6 min/mean=0.14 max/mean=0.21
	store=7 min/mean=0.16 max/mean=0.09
	store=8 min/mean=0.23 max/mean=0.02
	store=9 min/mean=0.21 max/mean=0.07
	store=10 min/mean=0.15 max/mean=0.06
==========================
