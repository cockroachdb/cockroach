# This test is similar to skewed_cpu_skewed_write.txt, but with more ranges 300. 
# To have the same amount of total load, bytes per range is reduced to 26 MiB.
# 
# Expected outcome: The allocator should rebalance both cpu and write load across
# all stores, with mma achieving better results than sma. 
gen_cluster nodes=6 node_cpu_rate_capacity=5000000000
----

# The placement will be skewed, s.t. n1/s1, n2/s2 and n3/s3 will have all the
# replicas initially and n1/s1 will have every lease. Each range is initially
# 26 MiB.
gen_ranges ranges=300 min_key=1 max_key=10000 placement_type=replica_placement bytes_mib=26
{s1,s2,s3}:1
----
{s1:*,s2,s3}:1

gen_load rate=1000 rw_ratio=1.0 request_cpu_per_access=5000000 min_key=1 max_key=10000
----
5.00 access-vcpus

# Write only workload, which generates little CPU and 100_000 (x replication
# factor) write bytes per second over the second half of the keyspace.
gen_ranges ranges=300 min_key=10001 max_key=20000 placement_type=replica_placement bytes_mib=26
{s4,s5,s6}:1
----
{s4:*,s5,s6}:1

gen_load rate=20000 rw_ratio=0 min_block=1000 max_block=1000 raft_cpu_per_write=1 min_key=10001 max_key=20000
----
0.00 raft-vcpus, 19 MiB/s goodput

setting split_queue_enabled=false
----

eval duration=75m samples=1 seed=42 cfgs=(mma-only,mma-count) metrics=(cpu,cpu_util,write_bytes_per_second,replicas,leases)
----
cpu#1: last:  [s1=905856280, s2=907152103, s3=904611640, s4=757229362, s5=762198096, s6=758043043] (stddev=73378053.77, mean=832515087.33, sum=4995090524)
cpu#1: thrash_pct: [s1=9%, s2=55%, s3=53%, s4=25%, s5=28%, s6=26%]  (sum=197%)
cpu_util#1: last:  [s1=0.18, s2=0.18, s3=0.18, s4=0.15, s5=0.15, s6=0.15] (stddev=0.01, mean=0.17, sum=1)
cpu_util#1: thrash_pct: [s1=9%, s2=55%, s3=53%, s4=25%, s5=28%, s6=26%]  (sum=197%)
leases#1: first: [s1=300, s2=0, s3=0, s4=300, s5=0, s6=0] (stddev=141.42, mean=100.00, sum=600)
leases#1: last:  [s1=56, s2=128, s3=115, s4=209, s5=46, s6=46] (stddev=58.68, mean=100.00, sum=600)
leases#1: thrash_pct: [s1=1%, s2=23%, s3=19%, s4=32%, s5=0%, s6=0%]  (sum=76%)
replicas#1: first: [s1=300, s2=300, s3=300, s4=300, s5=300, s6=300] (stddev=0.00, mean=300.00, sum=1800)
replicas#1: last:  [s1=310, s2=427, s3=432, s4=209, s5=210, s6=212] (stddev=98.13, mean=300.00, sum=1800)
replicas#1: thrash_pct: [s1=57%, s2=24%, s3=21%, s4=34%, s5=36%, s6=36%]  (sum=207%)
write_bytes_per_second#1: last:  [s1=6280279, s2=10497642, s3=10498564, s4=10962160, s5=10829076, s6=10952513] (stddev=1675950.95, mean=10003372.33, sum=60020234)
write_bytes_per_second#1: thrash_pct: [s1=1%, s2=9%, s3=9%, s4=3%, s5=71%, s6=94%]  (sum=189%)
artifacts[mma-only]: ce3dfcf7f4ed45cf
==========================
cpu#1: last:  [s1=757404655, s2=743780026, s3=809632252, s4=889191817, s5=909275053, s6=892824113] (stddev=66798737.02, mean=833684652.67, sum=5002107916)
cpu#1: thrash_pct: [s1=17%, s2=58%, s3=68%, s4=31%, s5=31%, s6=32%]  (sum=237%)
cpu_util#1: last:  [s1=0.15, s2=0.15, s3=0.16, s4=0.18, s5=0.18, s6=0.18] (stddev=0.01, mean=0.17, sum=1)
cpu_util#1: thrash_pct: [s1=17%, s2=58%, s3=68%, s4=31%, s5=31%, s6=32%]  (sum=237%)
leases#1: first: [s1=300, s2=0, s3=0, s4=300, s5=0, s6=0] (stddev=141.42, mean=100.00, sum=600)
leases#1: last:  [s1=104, s2=105, s3=101, s4=94, s5=96, s6=100] (stddev=3.96, mean=100.00, sum=600)
leases#1: thrash_pct: [s1=85%, s2=71%, s3=74%, s4=63%, s5=79%, s6=81%]  (sum=454%)
replicas#1: first: [s1=300, s2=300, s3=300, s4=300, s5=300, s6=300] (stddev=0.00, mean=300.00, sum=1800)
replicas#1: last:  [s1=313, s2=310, s3=305, s4=289, s5=292, s6=291] (stddev=9.66, mean=300.00, sum=1800)
replicas#1: thrash_pct: [s1=332%, s2=323%, s3=317%, s4=233%, s5=272%, s6=273%]  (sum=1750%)
write_bytes_per_second#1: last:  [s1=9771037, s2=8714571, s3=8780121, s4=10897716, s5=10959938, s6=10894060] (stddev=976347.28, mean=10002907.17, sum=60017443)
write_bytes_per_second#1: thrash_pct: [s1=94%, s2=87%, s3=80%, s4=179%, s5=196%, s6=203%]  (sum=838%)
artifacts[mma-count]: ccc23e1cf1d368f2
==========================
