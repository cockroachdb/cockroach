# Want to test two cases:
# (1) Where its impossible to shed leases from the CPU overloaded store, so we
#     should initially observe a period of no rebalancing activity away from
#     the store.
# (2) Where its possible to shed leases from the CPU overloaded store, so we
#     should observe a period of lease transfers before any replica based
#     rebalancing away from the store occurs.
gen_cluster nodes=5 node_cpu_rate_capacity=90000
----

# Disable everything but the mma store rebalancer.
setting rebalance_mode=3 replicate_queue_enabled=false lease_queue_enabled=false split_queue_enabled=false
----

# Case (1) where s1 has no leases and is CPU overloaded due to raft CPU. It
# won't be able to shed its own replicas because it is not the leaseholder for
# any of the ranges.

# Originally, this test uses replica_weights=(0.3,0.175,0.175,0.175,0.175)
# lease_weights=(0,0.25,0.25,0.25,0.25). Replication factor is 3 by default. 75
# replicas in total. replicas distribution is approximately s1: 23, s2: 13, s3:
# 13, s4: 13, s5: 13 leaseholder weights: s2: 7 leaseholder, s3: 6 leaseholder,
# s4: 6 leaseholder, s5: 6 leaseholder. To approximate this, we use replica
# placement: As an approximation, (s1,s2*,s3):7, (s1,s4,s5*):6, (s1,s2,s4*):6,
# (s1,s3*,s5):6 s1 does not have the lease. Other stores have the same
gen_ranges ranges=25 min_key=0 max_key=10000 placement_type=replica_placement
{s1,s2:*,s3}:7
{s1,s4,s5:*}:6
{s1,s2,s4:*}:6
{s1,s3:*,s5}:6
----
{s1,s2:*,s3}:7
{s1,s4,s5:*}:6
{s1,s2,s4:*}:6
{s1,s3:*,s5}:6

gen_load rate=1000 rw_ratio=0 min_block=0 max_block=0 min_key=0 max_key=10000 raft_cpu_per_write=100
----

eval duration=30m samples=1 seed=42
----
artifacts[default]: b4455086f1dcf5ff

plot stat=cpu
----
skipped

plot stat=write_bytes_per_second
----
skipped

plot stat=replicas
----
skipped

plot stat=leases
----
skipped

# TODO(kvoli): Case (2)
