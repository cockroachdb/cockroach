# Walk through the basics of the datadriven syntax. Create a state generator
# where there are 7 stores, 7 ranges and initially the replicas are placed
# following a skewed distribution (where s1 has the most replicas, s2 has half
# as many as s1...).
gen_state stores=7 ranges=7 placement_skew=true
----

# Create a load generator, where there are 7k ops/s and the access follows a
# zipfian distribution on the keyspace.
gen_load rate=7000 rw_ratio=0.95 access_skew=false min_block=128 max_block=256
----

# Add two assertions, the first is a balance assertion. The balance assertion
# requires that when simulation is evaluated that during last 6 ticks (60
# seconds) the max/mean QPS of the cluster does not exceed 1.15.
assertion stat=qps type=balance ticks=6 threshold=1.15
----

# The second is a steady state assertion. The steady state assertion requires
# that during the last 6 ticks (60 seconds), the value of QPS per-store doesn't
# increase or decrease by more than 5% of the mean. This type of assertion is
# useful when a stat is balanced but not necessarily stable.
assertion stat=qps type=steady ticks=6 threshold=0.05
----

# The generators are then called and 2 simulation runs, named samples are
# created and evaluated. Each sample has a fixed duration of 5 minutes.
# Following the evaluation, the samples are checked individually against the
# existing assertions, added above. If any assertion fails, the reason is
# printed. If no assertions fail, then OK is printed.
eval duration=3m samples=2 seed=42
----
OK

# It is possible to plot the output of a stat, of a selected sample run. Below
# the last sample run is selected and the QPS is plotted per store. This is
# useful to determine the QPS matches out expectations - it should be balanced
# and stable. This should only be done for tests where the seed is given, so
# the output is identical..
plot stat=qps sample=2
----
----

 5017 ┤ ╭─╮
 4682 ┤ │ │
 4348 ┤ │ │
 4014 ┤ │ ╰──────────────────────╮
 3679 ┤ │                        │
 3345 ┤ │                        │
 3010 ┤ │                        │
 2676 ┤ │                        │
 2341 ┤ │                        ╰╮
 2007 ┤ │                         │ ╭───────────────────────╮
 1672 ┤ │                         │╭╯                       │
 1338 ┤ │                         │││                       │
 1003 ┤ │╭──╭──────────────────────╯╭─────────────────────────────────────────────────
  669 ┤ ││ ││                       │                         │
  334 ┤ ││╭╯│                       │                         │
    0 ┼─────────────────────────────╯─────────────────────────╯
                                             qps
----
----

# The cluster settings and simulation variables can be modified to examine how
# allocation behaves during uncommon scenarios. Update the gossip delay to be
# unreasonably long (default 500ms).
setting gossip_delay=20s
----

# Evaluate with the updated gossip setting but otherwise identical generators
# and seed. Here we see that neither the balance assertion nor steady state
# assertion is reached due to how the system reacts to the long gossip delays.
eval duration=5m samples=2 seed=42
----
failed assertion sample 1
  balance stat=qps threshold=1.15 ticks=6
	max/mean=3.00 tick=0
	max/mean=3.00 tick=1
	max/mean=3.00 tick=2
	max/mean=3.49 tick=3
	max/mean=3.49 tick=4
	max/mean=3.49 tick=5
  steady state stat=qps threshold=0.05 ticks=6
	store=2 min/mean=1.00 max/mean=1.34
failed assertion sample 2
  balance stat=qps threshold=1.15 ticks=6
	max/mean=4.22 tick=0
	max/mean=4.21 tick=1
	max/mean=4.21 tick=2
	max/mean=4.21 tick=3
	max/mean=4.22 tick=4
	max/mean=4.20 tick=5
  steady state stat=qps threshold=0.05 ticks=6
	store=2 min/mean=1.00 max/mean=2.50
	store=7 min/mean=1.00 max/mean=0.41

# To investigate further, plot the QPS output again. The plotted output matches
# expectations given the assertion failed, The system exhibits thrashing as
# rebalancing occurs frequently but without actually achieving convergence.
plot stat=qps sample=3
----
----

 7000 ┤ ╭───╮
 6533 ┤ │   │
 6067 ┤ │   │
 5600 ┤ │   │
 5133 ┤ │   ╰╮
 4667 ┤ │    │
 4200 ┤ │    ╰╮            ╭─╮                                          ╭──╮
 3733 ┤ │     │            │ │                                         ╭╯  │
 3267 ┤ │     │            │ │                                         │   │
 2800 ┤ │     │ ╭──────╮ ╭─╯ ╰───╮  ╭───╮  ╭╭────╮╭─╭────╮──╭───────╮ ╭╯   ╰╮   ╭─────
 2333 ┤ │     │╭╯      │ │       │  │   │  ││   │││ │ │  │  │ │ │   │ │     │   │
 1867 ┤ │     ││───────│╭─────────────╮───╮╭╯   │╰╮╭╯ ╰╮╭│ ╭╯ │ │   ╰╮│     │ ╭─╯
 1400 ┤ │     ││       ││        ╰╮│  ╰╮  ││    │ ││   ││╰╮│  ╰╮│    ││     │╭╯
  933 ┤ │    ╭─╭╭─────────────────╮╯   ╰───│──────│────────│─────────│───────│────────
  467 ┤ │    ││││      │││    │   │      │││    ╰││    │  ╭╯   │     ││      │││    ││
    0 ┼─────────╯─────────────╯───╰────────╯──────╰───────╯╰─────────╰───────╯─╯────╰─
                                             qps
----
----

# Plot the replica movements for the same sample, we should see a steadily
# increasing counter for each store; indicating that rebalancing activity is
# persistent.
plot stat=replica_moves sample=3
----
----

 36.00 ┤                                                                     ╭─────────
 33.60 ┤                                                                    ╭╯
 31.20 ┤                                                        ╭───────────╯
 28.80 ┤                                                       ╭╯
 26.40 ┤                                                  ╭────╯
 24.00 ┤                                         ╭────────╯            ╭───────────────
 21.60 ┤                                   ╭─────╯                   ╭─╯              ╭
 19.20 ┤                           ╭───────╯            ╭────────────╯      ╭──╭──────╯
 16.80 ┤                      ╭────╯                   ╭╯           ╭─╭────────╯
 14.40 ┤                     ╭╯                    ╭───╯  ╭─────────╯╭╯
 12.00 ┤        ╭────────────╯             ╭─────╭────────╯ ╭─╭──────╯─────────────────
  9.60 ┤       ╭╯                         ╭──────╯ ╭──────────╯
  7.20 ┤      ╭╯                  ╭───────╯      ╭─╯   ╭──╯                           ╭
  4.80 ┤      │       ╭───────╭───╯╭─────────────╯─────╯──────────────────────────────╯
  2.40 ┤     ╭╯ ╭─────╯─╭──╭───────╯     ╭─╯                                  ╭────────
  0.00 ┼───────────────────╯─────────────╯────────────────────────────────────╯
                                         replica_moves
----
----

# vim:ft=sh
