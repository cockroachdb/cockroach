// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/lease_status.proto

package kvserverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import livenesspb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/liveness/livenesspb"
import roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import github_com_cockroachdb_cockroach_pkg_util_hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LeaseState int32

const (
	// ERROR indicates that the lease can't be used or acquired.
	LeaseState_ERROR LeaseState = 0
	// VALID indicates that the lease is valid at the present time and can
	// be used to serve a given request.
	LeaseState_VALID LeaseState = 1
	// UNUSABLE indicates that a lease has not expired at the present time
	// (i.e. it is VALID), but cannot be used to serve a given request. A
	// lease may be unusable for one of two reasons.
	//
	// First, if the request operates at a timestamp in the future, it is
	// possible for the request's timestamp to fall outside of the lease's
	// validity window, even if the lease is valid at the present time. In
	// such cases, the lease must be extended past the request's timestamp
	// before the request can be served under the lease.
	//
	// Second, even if the request does not operate at a timestamp in the
	// future and operates fully within the lease's validity window, it may
	// operate at a time too close to the lease's expiration to be served
	// safely due to clock uncertainty. We refer to the period at the end of
	// each lease, immediately before its expiration, as its stasis period.
	//
	// The point of the stasis period is to prevent reads on the old
	// leaseholder (the one whose stasis we're talking about) from missing
	// to see writes performed under the next lease (held by someone else)
	// when these writes should fall in the uncertainty window. Even without
	// the stasis, writes performed by the new leaseholder are guaranteed to
	// have higher timestamps than any reads served by the old leaseholder.
	// However, a read at timestamp T needs to observe all writes at
	// timestamps [T, T+maxOffset] and so, without the stasis, only the new
	// leaseholder might have some of these writes. In other words, without
	// the stasis, a new leaseholder with a fast clock could start
	// performing writes ordered in real time before the old leaseholder
	// considers its lease to have expired.
	//
	// An UNUSABLE lease may become VALID for the same leaseholder after a
	// successful RequestLease (for expiration-based leases) or Heartbeat
	// (for epoch-based leases), each of which serve as forms of "lease
	// extension".
	LeaseState_UNUSABLE LeaseState = 2
	// EXPIRED indicates that the lease is not valid at the present time and
	// can't be used to serve a request. An expired lease may become VALID
	// for the same leaseholder on RequestLease or Heartbeat, or it may be
	// replaced by a new leaseholder with a RequestLease (for
	// expiration-based leases) or IncrementEpoch+RequestLease (for
	// epoch-based leases).
	LeaseState_EXPIRED LeaseState = 3
	// PROSCRIBED indicates that the lease's proposed timestamp is earlier
	// than allowed and can't be used to serve a request. This is used to
	// detect node restarts: a node that has restarted will see its former
	// incarnation's leases as PROSCRIBED so it will renew them before using
	// them. This state also used during a lease transfer, to prevent the
	// outgoing leaseholder from serving any other requests under its old
	// lease. Note that the PROSCRIBED state is only visible to the
	// leaseholder; other nodes will see this as a VALID lease.
	LeaseState_PROSCRIBED LeaseState = 4
)

var LeaseState_name = map[int32]string{
	0: "ERROR",
	1: "VALID",
	2: "UNUSABLE",
	3: "EXPIRED",
	4: "PROSCRIBED",
}
var LeaseState_value = map[string]int32{
	"ERROR":      0,
	"VALID":      1,
	"UNUSABLE":   2,
	"EXPIRED":    3,
	"PROSCRIBED": 4,
}

func (x LeaseState) String() string {
	return proto.EnumName(LeaseState_name, int32(x))
}
func (LeaseState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_lease_status_71df6d32f162ef3f, []int{0}
}

// LeaseStatus holds the lease state, the timestamp at which the state
// is accurate, the lease, and optionally the liveness if the lease is
// epoch-based.
type LeaseStatus struct {
	// Lease which this status describes.
	Lease roachpb.Lease `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease"`
	// Timestamp that the lease was evaluated at.
	Now github_com_cockroachdb_cockroach_pkg_util_hlc.ClockTimestamp `protobuf:"bytes,2,opt,name=now,proto3,casttype=github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp" json:"now"`
	// State of the lease at now.
	State LeaseState `protobuf:"varint,3,opt,name=state,proto3,enum=cockroach.kv.kvserver.storagepb.LeaseState" json:"state,omitempty"`
	// Liveness if this is an epoch-based lease.
	Liveness livenesspb.Liveness `protobuf:"bytes,4,opt,name=liveness,proto3" json:"liveness"`
}

func (m *LeaseStatus) Reset()         { *m = LeaseStatus{} }
func (m *LeaseStatus) String() string { return proto.CompactTextString(m) }
func (*LeaseStatus) ProtoMessage()    {}
func (*LeaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_lease_status_71df6d32f162ef3f, []int{0}
}
func (m *LeaseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *LeaseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseStatus.Merge(dst, src)
}
func (m *LeaseStatus) XXX_Size() int {
	return m.Size()
}
func (m *LeaseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LeaseStatus)(nil), "cockroach.kv.kvserver.storagepb.LeaseStatus")
	proto.RegisterEnum("cockroach.kv.kvserver.storagepb.LeaseState", LeaseState_name, LeaseState_value)
}
func (m *LeaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintLeaseStatus(dAtA, i, uint64(m.Lease.Size()))
	n1, err := m.Lease.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintLeaseStatus(dAtA, i, uint64(m.Now.Size()))
	n2, err := m.Now.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLeaseStatus(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintLeaseStatus(dAtA, i, uint64(m.Liveness.Size()))
	n3, err := m.Liveness.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func encodeVarintLeaseStatus(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LeaseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lease.Size()
	n += 1 + l + sovLeaseStatus(uint64(l))
	l = m.Now.Size()
	n += 1 + l + sovLeaseStatus(uint64(l))
	if m.State != 0 {
		n += 1 + sovLeaseStatus(uint64(m.State))
	}
	l = m.Liveness.Size()
	n += 1 + l + sovLeaseStatus(uint64(l))
	return n
}

func sovLeaseStatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLeaseStatus(x uint64) (n int) {
	return sovLeaseStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LeaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeaseStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeaseStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeaseStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Now.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (LeaseState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeaseStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liveness.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeaseStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLeaseStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeaseStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeaseStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeaseStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLeaseStatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLeaseStatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLeaseStatus(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLeaseStatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeaseStatus   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("kv/kvserver/kvserverpb/lease_status.proto", fileDescriptor_lease_status_71df6d32f162ef3f)
}

var fileDescriptor_lease_status_71df6d32f162ef3f = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbb, 0x6e, 0xdb, 0x30,
	0x18, 0x85, 0x45, 0x5f, 0xda, 0x94, 0x2e, 0x02, 0x81, 0xe8, 0x20, 0x04, 0x28, 0x1d, 0x74, 0x4a,
	0x2f, 0x20, 0x81, 0xa4, 0x63, 0x17, 0x2b, 0xd6, 0x60, 0xc0, 0x6d, 0x02, 0xba, 0x2e, 0x8a, 0x2e,
	0x85, 0xa4, 0x10, 0xb2, 0x20, 0x39, 0x14, 0x44, 0x4a, 0x7d, 0x8d, 0x3e, 0x96, 0xc7, 0x0c, 0x1d,
	0x32, 0x05, 0xad, 0xfc, 0x16, 0x9d, 0x0a, 0x52, 0x37, 0x2f, 0x45, 0xb6, 0x03, 0xf1, 0x3f, 0xe7,
	0xff, 0x78, 0x44, 0xf8, 0x3a, 0x29, 0x69, 0x52, 0x4a, 0x9e, 0x97, 0x3c, 0xef, 0x44, 0x16, 0xd0,
	0x94, 0xfb, 0x92, 0x7f, 0x97, 0xca, 0x57, 0x85, 0x24, 0x59, 0x2e, 0x94, 0x40, 0xd3, 0x50, 0x84,
	0x49, 0x2e, 0xfc, 0x70, 0x43, 0x92, 0x92, 0xb4, 0xb3, 0x44, 0x2a, 0x91, 0xfb, 0x11, 0xcf, 0x82,
	0x13, 0x64, 0x0e, 0xb3, 0x80, 0xde, 0xf8, 0xca, 0xaf, 0x4d, 0x27, 0xe4, 0x30, 0x3f, 0x8d, 0x4b,
	0x7e, 0xcb, 0xa5, 0xec, 0x84, 0x5e, 0xd4, 0xc8, 0x66, 0xde, 0x29, 0x54, 0x9c, 0xd2, 0x4d, 0x1a,
	0x52, 0x15, 0x6f, 0xb9, 0x54, 0xfe, 0x36, 0x6b, 0x4e, 0x5e, 0x44, 0x22, 0x12, 0x46, 0x52, 0xad,
	0xea, 0xaf, 0xaf, 0x7e, 0x0d, 0xe0, 0x64, 0xa9, 0x59, 0x57, 0x06, 0x15, 0xbd, 0x87, 0x63, 0x83,
	0xee, 0x80, 0x53, 0x70, 0x36, 0x39, 0x77, 0x48, 0x0f, 0xdd, 0xd0, 0x11, 0x33, 0xee, 0x8e, 0x76,
	0x0f, 0x53, 0x8b, 0xd5, 0xc3, 0xa8, 0x80, 0xc3, 0x5b, 0xf1, 0xc3, 0x19, 0x18, 0xcf, 0xcb, 0x03,
	0x8f, 0xa6, 0x21, 0x9b, 0x34, 0x24, 0x9f, 0x5b, 0x1a, 0x77, 0xae, 0x8d, 0x7f, 0x1f, 0xa6, 0x1f,
	0xa2, 0x58, 0x6d, 0x8a, 0x80, 0x84, 0x62, 0x4b, 0x3b, 0xc3, 0x4d, 0xd0, 0x6b, 0x9a, 0x25, 0x11,
	0x6d, 0xaf, 0x43, 0x2e, 0x53, 0x11, 0x26, 0x5d, 0x0a, 0xd3, 0xfb, 0xd0, 0x0c, 0x8e, 0x75, 0xc3,
	0xdc, 0x19, 0x9e, 0x82, 0xb3, 0xe3, 0xf3, 0xb7, 0xe4, 0x91, 0x86, 0x49, 0x77, 0x53, 0xce, 0x6a,
	0x27, 0x5a, 0xc3, 0xa3, 0xb6, 0x41, 0x67, 0x64, 0xf0, 0x2f, 0xfe, 0x93, 0xd2, 0x15, 0xdd, 0x97,
	0x4f, 0x96, 0x8d, 0x6c, 0xda, 0xe8, 0xa2, 0xde, 0x7c, 0x84, 0xb0, 0xdf, 0x85, 0x9e, 0xc1, 0xb1,
	0xc7, 0xd8, 0x15, 0xb3, 0x2d, 0x2d, 0xbf, 0xcc, 0x96, 0x8b, 0xb9, 0x0d, 0xd0, 0x73, 0x78, 0xb4,
	0xfe, 0xb4, 0x5e, 0xcd, 0xdc, 0xa5, 0x67, 0x0f, 0xd0, 0x04, 0x3e, 0xf5, 0xbe, 0x5e, 0x2f, 0x98,
	0x37, 0xb7, 0x87, 0xe8, 0x18, 0xc2, 0x6b, 0x76, 0xb5, 0xba, 0x64, 0x0b, 0xd7, 0x9b, 0xdb, 0x23,
	0xf7, 0xdd, 0xee, 0x0f, 0xb6, 0x76, 0x15, 0x06, 0x77, 0x15, 0x06, 0xf7, 0x15, 0x06, 0xbf, 0x2b,
	0x0c, 0x7e, 0xee, 0xb1, 0x75, 0xb7, 0xc7, 0xd6, 0xfd, 0x1e, 0x5b, 0xdf, 0x60, 0xff, 0xf6, 0x82,
	0x27, 0xe6, 0xd7, 0x5e, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x15, 0x33, 0x15, 0x9c, 0x02,
	0x00, 0x00,
}
