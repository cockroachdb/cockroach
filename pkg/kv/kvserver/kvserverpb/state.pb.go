// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/state.proto

package kvserverpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_kv_kvserver_closedts_ctpb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/closedts/ctpb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	enginepb "github.com/cockroachdb/cockroach/pkg/storage/enginepb"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ReplicaState is the part of the Range Raft state machine which is cached in
// memory and which is manipulated exclusively through consensus.
//
// The struct is also used to transfer state to Replicas in the context of
// proposer-evaluated Raft, in which case it does not represent a complete
// state but instead an update to be applied to an existing state, with each
// field specified in the update overwriting its counterpart on the receiving
// ReplicaState.
//
// For the ReplicaState persisted on the Replica, all optional fields are
// populated (i.e. no nil pointers or enums with the default value).
type ReplicaState struct {
	// The highest (and last) index applied to the state machine.
	RaftAppliedIndex uint64 `protobuf:"varint,1,opt,name=raft_applied_index,json=raftAppliedIndex,proto3" json:"raft_applied_index,omitempty"`
	// The highest (and last) lease index applied to the state machine.
	LeaseAppliedIndex uint64 `protobuf:"varint,2,opt,name=lease_applied_index,json=leaseAppliedIndex,proto3" json:"lease_applied_index,omitempty"`
	// The Range descriptor.
	// The pointer may change, but the referenced RangeDescriptor struct itself
	// must be treated as immutable; it is leaked out of the lock.
	//
	// Changes of the descriptor should always go through one of the
	// (*Replica).setDesc* methods.
	Desc *roachpb.RangeDescriptor `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// The latest range lease.
	//
	// Note that this message is both sent over the network and used to model
	// replica state in memory. In memory (Replica.mu.state), the lease is never
	// nil (and never zero-valued), but it may be nil when sent over the network
	// as part of ReplicatedEvalResult.
	Lease *roachpb.Lease `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
	// The truncation state of the Raft log.
	TruncatedState *roachpb.RaftTruncatedState `protobuf:"bytes,5,opt,name=truncated_state,json=truncatedState,proto3" json:"truncated_state,omitempty"`
	// GCThreshold is the GC threshold of the Range, typically updated when keys
	// are garbage collected. Reads and writes at timestamps <= this time will
	// not be served.
	GCThreshold *hlc.Timestamp      `protobuf:"bytes,6,opt,name=gc_threshold,json=gcThreshold,proto3" json:"gc_threshold,omitempty"`
	Stats       *enginepb.MVCCStats `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// using_applied_state_key specifies whether the Range has been upgraded
	// to begin using the RangeAppliedState key. This key holds a combination
	// of the Raft applied index, the lease applied index, and the MVCC stats.
	//
	// When set to true in a ReplicatedEvalResult, the flag indicates that the
	// range should begin using the RangeAppliedState key. Handling of this flag
	// is idempotent by Replica state machines, meaning that it is ok for multiple
	// Raft commands to set it to true.
	UsingAppliedStateKey bool `protobuf:"varint,11,opt,name=using_applied_state_key,json=usingAppliedStateKey,proto3" json:"using_applied_state_key,omitempty"`
	// Version tells us which migrations can be assumed to have run against this
	// particular replica. When we introduce backwards incompatible changes to the
	// replica state (for example using the unreplicated truncated state instead
	// of the replicated variant), this field tells us if we should expect a
	// state representation prior to, or after the change (in our example it
	// tells us whether or not we can assume an unreplicated truncated state). All
	// migrations associated with versions less than or equal to this one, can be
	// assumed to have run.
	//
	// We should note that the progression of cluster versions in the cluster does
	// not happen in lock step with replica versions for all replicas in the
	// system. Well, not for all cluster versions. Replica versions are one the
	// primitives used to coordinate below-raft migrations, and when cluster
	// versions for those are being rolled out cluster-wide, the expectation is
	// that all replica versions are bumped along side it. For everything else,
	// the coupling is neither necessary nor enforced. When a new replica is being
	// initialized, it's annotated with a replica version. This happens in one of
	// two places:
	// - during cluster creation time, in which case we source the binary version
	//   (i.e. the version the cluster is bootstrapped with)
	// - replicas created through snapshots or splits, where we inherit the
	//   version from the incoming snapshot or the LHS of the split respectively.
	//
	// While a below-raft migration is underway, replicas from different ranges
	// may have differing replica versions. This is fine, we rely on higher level
	// orchestration primitives[1][2] to shepherd all replicas in the system to
	// the right version.
	//
	// [1]: migration.Manager
	// [2]: PurgeOutdatedReplicas
	Version *roachpb.Version `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// raft_closed_timestamp is the largest timestamp that is known to have been
	// closed through Raft commands. This means that the current leaseholder (if
	// any) and any future leaseholder will not evaluate writes at or below this
	// timestamp, and also that any in-flight commands that can still apply are
	// writing at higher timestamps. Non-leaseholder replicas are free to serve
	// "follower reads" at or below this timestamp.
	RaftClosedTimestamp hlc.Timestamp `protobuf:"bytes,13,opt,name=raft_closed_timestamp,json=raftClosedTimestamp,proto3" json:"raft_closed_timestamp"`
}

func (m *ReplicaState) Reset()         { *m = ReplicaState{} }
func (m *ReplicaState) String() string { return proto.CompactTextString(m) }
func (*ReplicaState) ProtoMessage()    {}
func (*ReplicaState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc107fbd3ff296cb, []int{0}
}
func (m *ReplicaState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicaState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicaState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicaState.Merge(m, src)
}
func (m *ReplicaState) XXX_Size() int {
	return m.Size()
}
func (m *ReplicaState) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicaState.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicaState proto.InternalMessageInfo

// RangeInfo is used for reporting status information about a range out through
// the status server.
type RangeInfo struct {
	ReplicaState `protobuf:"bytes,1,opt,name=state,proto3,embedded=state" json:"state"`
	// The highest (and last) index in the Raft log.
	LastIndex  uint64 `protobuf:"varint,2,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	NumPending uint64 `protobuf:"varint,3,opt,name=num_pending,json=numPending,proto3" json:"num_pending,omitempty"`
	NumDropped uint64 `protobuf:"varint,5,opt,name=num_dropped,json=numDropped,proto3" json:"num_dropped,omitempty"`
	// raft_log_size may be inaccurate, see storage.Replica.mu.raftLogSizeTrusted.
	RaftLogSize        int64 `protobuf:"varint,6,opt,name=raft_log_size,json=raftLogSize,proto3" json:"raft_log_size,omitempty"`
	RaftLogSizeTrusted bool  `protobuf:"varint,10,opt,name=raft_log_size_trusted,json=raftLogSizeTrusted,proto3" json:"raft_log_size_trusted,omitempty"`
	// Approximately the amount of quota available.
	ApproximateProposalQuota int64 `protobuf:"varint,7,opt,name=approximate_proposal_quota,json=approximateProposalQuota,proto3" json:"approximate_proposal_quota,omitempty"`
	// Index for which quota has already been released.
	ProposalQuotaBaseIndex int64 `protobuf:"varint,14,opt,name=proposal_quota_base_index,json=proposalQuotaBaseIndex,proto3" json:"proposal_quota_base_index,omitempty"`
	// Quota amounts for commands which the leader has applied but for which we're
	// still waiting for followers to ack the corresponding entries. First entry
	// corresponds to base_index+1 above.
	ProposalQuotaReleaseQueue []int64 `protobuf:"varint,15,rep,packed,name=proposal_quota_release_queue,json=proposalQuotaReleaseQueue,proto3" json:"proposal_quota_release_queue,omitempty"`
	// The max size the range can grow to before it will be split.
	RangeMaxBytes int64 `protobuf:"varint,8,opt,name=range_max_bytes,json=rangeMaxBytes,proto3" json:"range_max_bytes,omitempty"`
	// The highest closed timestamp known to have data for this replica, taken
	// across the data received from all nodes. This does not reflect whether
	// the replica can use this closed timestamp (it may, for example, not have
	// caught up sufficiently to do so).
	NewestClosedTimestamp RangeInfo_CTEntry `protobuf:"bytes,11,opt,name=newest_closed_timestamp,json=newestClosedTimestamp,proto3" json:"newest_closed_timestamp"`
	// The closed timestamp active on the replica when the info was generated.
	// This is the actual timestamp at or below which requests can be served from
	// this replica at this moment (assuming it is not the leaseholder). This takes
	// into account the lease start time, the current lease applied index, and the
	// closed timestamp information received from other nodes, among other things.
	// In practice, this should not usually trail newest_closed_timestamp except
	// for a short moment after newest_closed_timestamp gets updated.
	ActiveClosedTimestamp hlc.Timestamp `protobuf:"bytes,12,opt,name=active_closed_timestamp,json=activeClosedTimestamp,proto3" json:"active_closed_timestamp"`
	// The number of Rangefeed registrations attached to the Replica.
	RangefeedRegistrations int64 `protobuf:"varint,13,opt,name=rangefeed_registrations,json=rangefeedRegistrations,proto3" json:"rangefeed_registrations,omitempty"`
	// TenantID is the ID of the tenant for which this range contains data.
	TenantID uint64 `protobuf:"varint,16,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// lock_table contains a textual representation of the contents of the lock
	// table.
	LockTable             string                             `protobuf:"bytes,17,opt,name=lock_table,json=lockTable,proto3" json:"lock_table,omitempty"`
	ClosedTimestampPolicy roachpb.RangeClosedTimestampPolicy `protobuf:"varint,18,opt,name=closed_timestamp_policy,json=closedTimestampPolicy,proto3,enum=cockroach.roachpb.RangeClosedTimestampPolicy" json:"closed_timestamp_policy,omitempty"`
	// Closed timestamp info communicated through the side-transport. See also
	// state.raft_closed_timestamp.
	ClosedTimestampSideTransportInfo RangeSideTransportInfo `protobuf:"bytes,19,opt,name=closed_timestamp_sidetransport_info,json=closedTimestampSidetransportInfo,proto3" json:"closed_timestamp_sidetransport_info"`
}

func (m *RangeInfo) Reset()         { *m = RangeInfo{} }
func (m *RangeInfo) String() string { return proto.CompactTextString(m) }
func (*RangeInfo) ProtoMessage()    {}
func (*RangeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc107fbd3ff296cb, []int{1}
}
func (m *RangeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeInfo.Merge(m, src)
}
func (m *RangeInfo) XXX_Size() int {
	return m.Size()
}
func (m *RangeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RangeInfo proto.InternalMessageInfo

type RangeInfo_CTEntry struct {
	NodeID          github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	ClosedTimestamp hlc.Timestamp                                       `protobuf:"bytes,2,opt,name=closed_timestamp,json=closedTimestamp,proto3" json:"closed_timestamp"`
	MLAI            int64                                               `protobuf:"varint,3,opt,name=mlai,proto3" json:"mlai,omitempty"`
	Epoch           int64                                               `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *RangeInfo_CTEntry) Reset()         { *m = RangeInfo_CTEntry{} }
func (m *RangeInfo_CTEntry) String() string { return proto.CompactTextString(m) }
func (*RangeInfo_CTEntry) ProtoMessage()    {}
func (*RangeInfo_CTEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc107fbd3ff296cb, []int{1, 0}
}
func (m *RangeInfo_CTEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeInfo_CTEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeInfo_CTEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeInfo_CTEntry.Merge(m, src)
}
func (m *RangeInfo_CTEntry) XXX_Size() int {
	return m.Size()
}
func (m *RangeInfo_CTEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeInfo_CTEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RangeInfo_CTEntry proto.InternalMessageInfo

// RangeSideTransportInfo describes a range's closed timestamp info communicated
// through the side-transport.
//
// This proto combines information that lives on a replica with information
// taken from the side-transport's Receiver "centralized" state.
type RangeSideTransportInfo struct {
	ReplicaClosed hlc.Timestamp                                                      `protobuf:"bytes,1,opt,name=replica_closed,json=replicaClosed,proto3" json:"replica_closed"`
	ReplicaLAI    github_com_cockroachdb_cockroach_pkg_kv_kvserver_closedts_ctpb.LAI `protobuf:"varint,2,opt,name=replica_lai,json=replicaLai,proto3,casttype=github.com/cockroachdb/cockroach/pkg/kv/kvserver/closedts/ctpb.LAI" json:"replica_lai,omitempty"`
	CentralClosed hlc.Timestamp                                                      `protobuf:"bytes,3,opt,name=central_closed,json=centralClosed,proto3" json:"central_closed"`
	CentralLAI    github_com_cockroachdb_cockroach_pkg_kv_kvserver_closedts_ctpb.LAI `protobuf:"varint,4,opt,name=central_lai,json=centralLai,proto3,casttype=github.com/cockroachdb/cockroach/pkg/kv/kvserver/closedts/ctpb.LAI" json:"central_lai,omitempty"`
}

func (m *RangeSideTransportInfo) Reset()         { *m = RangeSideTransportInfo{} }
func (m *RangeSideTransportInfo) String() string { return proto.CompactTextString(m) }
func (*RangeSideTransportInfo) ProtoMessage()    {}
func (*RangeSideTransportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc107fbd3ff296cb, []int{2}
}
func (m *RangeSideTransportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangeSideTransportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RangeSideTransportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeSideTransportInfo.Merge(m, src)
}
func (m *RangeSideTransportInfo) XXX_Size() int {
	return m.Size()
}
func (m *RangeSideTransportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeSideTransportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RangeSideTransportInfo proto.InternalMessageInfo

// LatchManagerInfo is used for reporting status information about a spanlatch
// manager out through the status server.
type LatchManagerInfo struct {
	ReadCount  int64 `protobuf:"varint,1,opt,name=read_count,json=readCount,proto3" json:"read_count,omitempty"`
	WriteCount int64 `protobuf:"varint,2,opt,name=write_count,json=writeCount,proto3" json:"write_count,omitempty"`
}

func (m *LatchManagerInfo) Reset()         { *m = LatchManagerInfo{} }
func (m *LatchManagerInfo) String() string { return proto.CompactTextString(m) }
func (*LatchManagerInfo) ProtoMessage()    {}
func (*LatchManagerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc107fbd3ff296cb, []int{3}
}
func (m *LatchManagerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatchManagerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LatchManagerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatchManagerInfo.Merge(m, src)
}
func (m *LatchManagerInfo) XXX_Size() int {
	return m.Size()
}
func (m *LatchManagerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LatchManagerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LatchManagerInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ReplicaState)(nil), "cockroach.kv.kvserver.storagepb.ReplicaState")
	proto.RegisterType((*RangeInfo)(nil), "cockroach.kv.kvserver.storagepb.RangeInfo")
	proto.RegisterType((*RangeInfo_CTEntry)(nil), "cockroach.kv.kvserver.storagepb.RangeInfo.CTEntry")
	proto.RegisterType((*RangeSideTransportInfo)(nil), "cockroach.kv.kvserver.storagepb.RangeSideTransportInfo")
	proto.RegisterType((*LatchManagerInfo)(nil), "cockroach.kv.kvserver.storagepb.LatchManagerInfo")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvserverpb/state.proto", fileDescriptor_cc107fbd3ff296cb)
}

var fileDescriptor_cc107fbd3ff296cb = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x23, 0xc9, 0x96, 0x56, 0xfe, 0x51, 0x36, 0xb1, 0xcd, 0x38, 0x89, 0x24, 0xa8, 0x68,
	0xa1, 0x02, 0x29, 0x85, 0x26, 0x6d, 0x83, 0xfe, 0x00, 0x85, 0x25, 0x17, 0x85, 0x5c, 0x39, 0x48,
	0x36, 0x42, 0x0a, 0xa4, 0x07, 0x62, 0x45, 0x8e, 0x29, 0x42, 0x14, 0x97, 0x59, 0xae, 0x14, 0x3b,
	0x4f, 0x51, 0xf4, 0x09, 0x7a, 0xe8, 0x03, 0xf4, 0x31, 0x72, 0xcc, 0x31, 0x27, 0xa1, 0x95, 0x7b,
	0xe8, 0xad, 0xf7, 0x9c, 0x8a, 0xdd, 0x25, 0x65, 0x49, 0x36, 0x10, 0x17, 0xe8, 0x8d, 0xfc, 0xe6,
	0x9b, 0xd9, 0x9d, 0x6f, 0xbe, 0x5d, 0x12, 0xd5, 0x06, 0xe3, 0xc6, 0x60, 0x1c, 0x03, 0x1f, 0x03,
	0x9f, 0x3d, 0x44, 0xbd, 0x46, 0x2c, 0xa8, 0x00, 0x2b, 0xe2, 0x4c, 0x30, 0x5c, 0x71, 0x98, 0x33,
	0xe0, 0x8c, 0x3a, 0x7d, 0x6b, 0x30, 0xb6, 0x52, 0x92, 0x15, 0x0b, 0xc6, 0xa9, 0x07, 0x51, 0x6f,
	0xef, 0x76, 0xf2, 0xd8, 0x80, 0xd0, 0xf3, 0x43, 0x88, 0x7a, 0x8d, 0xe1, 0xd8, 0x71, 0x74, 0xf6,
	0xde, 0x6d, 0x95, 0x19, 0xf5, 0x1a, 0x7e, 0x28, 0x80, 0x87, 0x34, 0xb0, 0x39, 0x3d, 0x16, 0x49,
	0x70, 0x27, 0x0d, 0x0e, 0x41, 0x50, 0x97, 0x0a, 0x9a, 0xe0, 0x38, 0xc5, 0xe7, 0x30, 0x73, 0x24,
	0xfc, 0xa0, 0xd1, 0x0f, 0x9c, 0x86, 0xf0, 0x87, 0x10, 0x0b, 0x3a, 0x8c, 0x92, 0xc8, 0x4d, 0x8f,
	0x79, 0x4c, 0x3d, 0x36, 0xe4, 0x93, 0x46, 0x6b, 0xbf, 0xe4, 0xd0, 0x3a, 0x81, 0x28, 0xf0, 0x1d,
	0xfa, 0x54, 0x76, 0x83, 0xef, 0x21, 0x2c, 0x97, 0xb6, 0x69, 0x14, 0x05, 0x3e, 0xb8, 0xb6, 0x1f,
	0xba, 0x70, 0x62, 0x1a, 0x55, 0xa3, 0x9e, 0x25, 0x25, 0x19, 0xd9, 0xd7, 0x81, 0xb6, 0xc4, 0xb1,
	0x85, 0x6e, 0x04, 0x40, 0x63, 0x58, 0xa2, 0x5f, 0x53, 0xf4, 0xeb, 0x2a, 0xb4, 0xc0, 0xff, 0x02,
	0x65, 0x5d, 0x88, 0x1d, 0x33, 0x53, 0x35, 0xea, 0xc5, 0xfb, 0x35, 0xeb, 0x5c, 0xb4, 0xa4, 0x17,
	0x8b, 0xd0, 0xd0, 0x83, 0x03, 0x88, 0x1d, 0xee, 0x47, 0x82, 0x71, 0xa2, 0xf8, 0xd8, 0x42, 0x39,
	0x55, 0xcc, 0xcc, 0xaa, 0x44, 0xf3, 0x92, 0xc4, 0x8e, 0x8c, 0x13, 0x4d, 0xc3, 0x8f, 0xd0, 0x96,
	0xe0, 0xa3, 0xd0, 0xa1, 0x02, 0x5c, 0x5b, 0x8d, 0xc9, 0xcc, 0xa9, 0xcc, 0x0f, 0x2f, 0x5d, 0xf2,
	0x58, 0x74, 0x53, 0xb6, 0x52, 0x81, 0x6c, 0x8a, 0x85, 0x77, 0xfc, 0x04, 0xad, 0x7b, 0x8e, 0x2d,
	0xfa, 0x1c, 0xe2, 0x3e, 0x0b, 0x5c, 0x73, 0x55, 0x15, 0xbb, 0x3b, 0x57, 0x4c, 0xea, 0x6e, 0xf5,
	0x03, 0xc7, 0xea, 0xa6, 0xba, 0x37, 0xb7, 0xa6, 0x93, 0x4a, 0xf1, 0xfb, 0x56, 0x37, 0xcd, 0x22,
	0x45, 0xcf, 0x99, 0xbd, 0xe0, 0xaf, 0x51, 0x4e, 0x6e, 0x2c, 0x36, 0xd7, 0x2e, 0x6c, 0x2c, 0x71,
	0x8a, 0x95, 0x3a, 0xc5, 0x3a, 0x7a, 0xd6, 0x6a, 0xc9, 0x8d, 0xc4, 0x44, 0xe7, 0xe0, 0xcf, 0xd1,
	0xee, 0x28, 0xf6, 0x43, 0x6f, 0xa6, 0xbb, 0xea, 0xd1, 0x1e, 0xc0, 0xa9, 0x59, 0xac, 0x1a, 0xf5,
	0x3c, 0xb9, 0xa9, 0xc2, 0x89, 0xf6, 0xaa, 0x87, 0x1f, 0xe0, 0x14, 0x7f, 0x86, 0xd6, 0xc6, 0xc0,
	0x63, 0x9f, 0x85, 0xe6, 0xba, 0x5a, 0x75, 0xef, 0x12, 0x39, 0x9e, 0x69, 0x06, 0x49, 0xa9, 0xf8,
	0x47, 0xb4, 0xad, 0x2c, 0xe1, 0x04, 0x2c, 0x06, 0xd7, 0x9e, 0x19, 0xcb, 0xdc, 0xb8, 0x8a, 0x0a,
	0xd9, 0xd7, 0x93, 0xca, 0x0a, 0xb9, 0x21, 0x2b, 0xb4, 0x54, 0x81, 0x59, 0xe8, 0xab, 0xec, 0xdf,
	0xbf, 0x56, 0x8c, 0xc3, 0x6c, 0x3e, 0x5f, 0x2a, 0x1c, 0x66, 0xf3, 0x85, 0x12, 0x3a, 0xcc, 0xe6,
	0x51, 0xa9, 0x58, 0xfb, 0x0b, 0xa1, 0x82, 0xf2, 0x41, 0x3b, 0x3c, 0x66, 0xf8, 0x48, 0x0b, 0x05,
	0xca, 0x84, 0xc5, 0xfb, 0x9f, 0x58, 0xef, 0x39, 0x69, 0xd6, 0xbc, 0x9f, 0x9b, 0x79, 0xb9, 0xfc,
	0x9b, 0x49, 0xc5, 0xd0, 0xd2, 0x01, 0xbe, 0x8b, 0x50, 0x40, 0x63, 0xb1, 0xe0, 0xd4, 0x82, 0x44,
	0xb4, 0x43, 0x2b, 0xa8, 0x18, 0x8e, 0x86, 0x76, 0x04, 0xa1, 0xeb, 0x87, 0x9e, 0x32, 0x6a, 0x96,
	0xa0, 0x70, 0x34, 0x7c, 0xac, 0x91, 0x94, 0xe0, 0x72, 0x16, 0x45, 0xe0, 0x2a, 0x5b, 0x69, 0xc2,
	0x81, 0x46, 0x70, 0x0d, 0x6d, 0x28, 0xb9, 0x02, 0xe6, 0xd9, 0xb1, 0xff, 0x0a, 0x94, 0x59, 0x32,
	0xa4, 0x28, 0xc1, 0x0e, 0xf3, 0x9e, 0xfa, 0xaf, 0x00, 0x7f, 0x9a, 0x48, 0x9a, 0x72, 0x6c, 0xc1,
	0x47, 0xb1, 0x00, 0xd7, 0x44, 0x6a, 0x7a, 0x78, 0x8e, 0xdb, 0xd5, 0x11, 0xfc, 0x0d, 0xda, 0xa3,
	0x51, 0xc4, 0xd9, 0x89, 0x3f, 0x94, 0xa3, 0x8e, 0x38, 0x8b, 0x58, 0x4c, 0x03, 0xfb, 0xc5, 0x88,
	0x09, 0xaa, 0x4c, 0x94, 0x21, 0xe6, 0x1c, 0xe3, 0x71, 0x42, 0x78, 0x22, 0xe3, 0xf8, 0x4b, 0x74,
	0x6b, 0x31, 0xc3, 0xee, 0xc9, 0x63, 0xab, 0x45, 0xd8, 0x54, 0xc9, 0x3b, 0xd1, 0x7c, 0x46, 0x93,
	0xc6, 0xa0, 0x15, 0xf9, 0x16, 0xdd, 0x59, 0x4a, 0xe5, 0xa0, 0x0f, 0xfd, 0x8b, 0x11, 0x8c, 0xc0,
	0xdc, 0xaa, 0x66, 0xea, 0x19, 0x72, 0x6b, 0x21, 0x9b, 0x68, 0xc6, 0x13, 0x49, 0xc0, 0x1f, 0xa1,
	0x2d, 0x2e, 0xa7, 0x69, 0x0f, 0xe9, 0x89, 0xdd, 0x3b, 0x15, 0x10, 0x9b, 0x79, 0xb5, 0xe2, 0x86,
	0x82, 0x8f, 0xe8, 0x49, 0x53, 0x82, 0x38, 0x42, 0xbb, 0x21, 0xbc, 0x84, 0xf8, 0x12, 0xa7, 0x15,
	0xd5, 0xe8, 0xef, 0xbf, 0x7f, 0xf4, 0xa9, 0x6b, 0xac, 0x56, 0xf7, 0xbb, 0x50, 0xf0, 0xd3, 0xc4,
	0x7e, 0xdb, 0xba, 0xf0, 0x92, 0x01, 0xf1, 0x4f, 0x68, 0x97, 0x3a, 0xc2, 0x1f, 0xc3, 0xc5, 0x15,
	0xd7, 0xaf, 0xee, 0xed, 0x6d, 0x5d, 0x63, 0xb9, 0xf8, 0x43, 0xb4, 0xab, 0xfa, 0x3b, 0x06, 0x70,
	0x6d, 0x0e, 0x9e, 0x1f, 0x0b, 0x4e, 0x85, 0xcf, 0xc2, 0x58, 0x1d, 0x9c, 0x0c, 0xd9, 0x99, 0x85,
	0xc9, 0x7c, 0x14, 0x7f, 0x8c, 0x0a, 0x02, 0x42, 0x1a, 0x0a, 0xdb, 0x77, 0xcd, 0x92, 0xf4, 0x57,
	0x73, 0x7d, 0x3a, 0xa9, 0xe4, 0xbb, 0x0a, 0x6c, 0x1f, 0x90, 0xbc, 0x0e, 0xb7, 0x5d, 0x65, 0x66,
	0xe6, 0x0c, 0x6c, 0x41, 0x7b, 0x01, 0x98, 0xd7, 0xab, 0x46, 0xbd, 0x40, 0x0a, 0x12, 0xe9, 0x4a,
	0x00, 0x03, 0xda, 0x5d, 0x6e, 0xcc, 0x8e, 0x58, 0xe0, 0x3b, 0xa7, 0x26, 0xae, 0x1a, 0xf5, 0xcd,
	0x85, 0xc3, 0xb4, 0x70, 0x03, 0x2f, 0x35, 0xf3, 0x58, 0x25, 0x91, 0x6d, 0xe7, 0x32, 0x18, 0xff,
	0x6e, 0xa0, 0x0f, 0x2e, 0xac, 0x13, 0xfb, 0x2e, 0x08, 0x4e, 0xc3, 0x38, 0x62, 0x5c, 0x9e, 0xb6,
	0x63, 0x66, 0xde, 0x50, 0x9a, 0x3e, 0xbc, 0xda, 0x14, 0x9f, 0xfa, 0x2e, 0x74, 0xd3, 0x7c, 0x39,
	0xd2, 0x66, 0x5d, 0xaa, 0x3d, 0x9d, 0x54, 0xaa, 0x4b, 0x9b, 0xbb, 0xc0, 0x24, 0x55, 0xe7, 0x22,
	0x43, 0xcc, 0x33, 0xf6, 0xfe, 0x31, 0xd0, 0x5a, 0x62, 0x11, 0xfc, 0x1c, 0xad, 0x85, 0xcc, 0x05,
	0xa9, 0xb6, 0xbc, 0x62, 0x72, 0xcd, 0xfd, 0xe9, 0xa4, 0xb2, 0xfa, 0x88, 0xb9, 0xd0, 0x3e, 0x78,
	0x37, 0xa9, 0x3c, 0xf0, 0x7c, 0xd1, 0x1f, 0xf5, 0x2c, 0x87, 0x0d, 0x1b, 0xb3, 0x9d, 0xbb, 0xbd,
	0xf3, 0xe7, 0x46, 0x34, 0xf0, 0x1a, 0xa9, 0x7a, 0x3a, 0x8d, 0xac, 0xca, 0x8a, 0x6d, 0x17, 0x3f,
	0x42, 0xa5, 0x0b, 0xd6, 0xba, 0x76, 0x75, 0x6b, 0x6d, 0x2d, 0x35, 0x82, 0xef, 0xa0, 0xec, 0x30,
	0xa0, 0xbe, 0xba, 0x97, 0x32, 0xcd, 0xfc, 0x74, 0x52, 0xc9, 0x1e, 0x75, 0xf6, 0xdb, 0x44, 0xa1,
	0xf8, 0x26, 0xca, 0x41, 0xc4, 0x9c, 0xbe, 0xfa, 0x4c, 0x66, 0x88, 0x7e, 0xd1, 0xd7, 0xec, 0xec,
	0xb2, 0xcd, 0x96, 0x72, 0xfa, 0xb2, 0xad, 0xfd, 0x96, 0x41, 0x3b, 0x97, 0x4b, 0x8d, 0x0f, 0xd1,
	0x26, 0xd7, 0xb7, 0x68, 0x72, 0x32, 0x92, 0xcb, 0xf7, 0x4a, 0x9b, 0xde, 0x48, 0x52, 0xf5, 0x98,
	0xf0, 0x08, 0x15, 0xd3, 0x5a, 0x72, 0xe7, 0xd7, 0xd4, 0xce, 0xbb, 0xd3, 0x49, 0x05, 0x25, 0x17,
	0x75, 0x67, 0xbf, 0xfd, 0x6e, 0x52, 0x69, 0x5e, 0x49, 0xe6, 0xf9, 0x3f, 0x31, 0xbd, 0x33, 0x11,
	0x37, 0x1c, 0x21, 0xbf, 0xff, 0xfb, 0x6d, 0x82, 0x92, 0x85, 0x3a, 0xd4, 0x97, 0x2d, 0x38, 0x10,
	0x0a, 0x4e, 0x83, 0xb4, 0x85, 0xcc, 0x7f, 0x68, 0x21, 0x49, 0x3d, 0x6f, 0x21, 0xad, 0x25, 0x5b,
	0xc8, 0x9e, 0xb7, 0xd0, 0xd2, 0xf0, 0xff, 0xd8, 0x42, 0xb2, 0x50, 0x87, 0xfa, 0x7a, 0x64, 0x35,
	0x82, 0x4a, 0x1d, 0x2a, 0x9c, 0xfe, 0x11, 0x0d, 0xa9, 0x07, 0x5c, 0xcd, 0xe7, 0x2e, 0x42, 0x1c,
	0xa8, 0x6b, 0x3b, 0x6c, 0x14, 0x0a, 0x35, 0x9b, 0x0c, 0x29, 0x48, 0xa4, 0x25, 0x01, 0xf9, 0x8d,
	0x7a, 0xc9, 0x7d, 0x01, 0x49, 0x5c, 0x49, 0x4e, 0x90, 0x82, 0x14, 0xa1, 0x79, 0xef, 0xf5, 0x9f,
	0xe5, 0x95, 0xd7, 0xd3, 0xb2, 0xf1, 0x66, 0x5a, 0x36, 0xde, 0x4e, 0xcb, 0xc6, 0x1f, 0xd3, 0xb2,
	0xf1, 0xf3, 0x59, 0x79, 0xe5, 0xcd, 0x59, 0x79, 0xe5, 0xed, 0x59, 0x79, 0xe5, 0x39, 0x3a, 0xff,
	0xcf, 0xed, 0xad, 0xaa, 0x7f, 0xc5, 0x07, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x36, 0xbc,
	0xb4, 0x08, 0x0b, 0x00, 0x00,
}

func (this *ReplicaState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicaState)
	if !ok {
		that2, ok := that.(ReplicaState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RaftAppliedIndex != that1.RaftAppliedIndex {
		return false
	}
	if this.LeaseAppliedIndex != that1.LeaseAppliedIndex {
		return false
	}
	if !this.Desc.Equal(that1.Desc) {
		return false
	}
	if !this.Lease.Equal(that1.Lease) {
		return false
	}
	if !this.TruncatedState.Equal(that1.TruncatedState) {
		return false
	}
	if !this.GCThreshold.Equal(that1.GCThreshold) {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	if this.UsingAppliedStateKey != that1.UsingAppliedStateKey {
		return false
	}
	if !this.Version.Equal(that1.Version) {
		return false
	}
	if !this.RaftClosedTimestamp.Equal(&that1.RaftClosedTimestamp) {
		return false
	}
	return true
}
func (this *RangeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeInfo)
	if !ok {
		that2, ok := that.(RangeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReplicaState.Equal(&that1.ReplicaState) {
		return false
	}
	if this.LastIndex != that1.LastIndex {
		return false
	}
	if this.NumPending != that1.NumPending {
		return false
	}
	if this.NumDropped != that1.NumDropped {
		return false
	}
	if this.RaftLogSize != that1.RaftLogSize {
		return false
	}
	if this.RaftLogSizeTrusted != that1.RaftLogSizeTrusted {
		return false
	}
	if this.ApproximateProposalQuota != that1.ApproximateProposalQuota {
		return false
	}
	if this.ProposalQuotaBaseIndex != that1.ProposalQuotaBaseIndex {
		return false
	}
	if len(this.ProposalQuotaReleaseQueue) != len(that1.ProposalQuotaReleaseQueue) {
		return false
	}
	for i := range this.ProposalQuotaReleaseQueue {
		if this.ProposalQuotaReleaseQueue[i] != that1.ProposalQuotaReleaseQueue[i] {
			return false
		}
	}
	if this.RangeMaxBytes != that1.RangeMaxBytes {
		return false
	}
	if !this.NewestClosedTimestamp.Equal(&that1.NewestClosedTimestamp) {
		return false
	}
	if !this.ActiveClosedTimestamp.Equal(&that1.ActiveClosedTimestamp) {
		return false
	}
	if this.RangefeedRegistrations != that1.RangefeedRegistrations {
		return false
	}
	if this.TenantID != that1.TenantID {
		return false
	}
	if this.LockTable != that1.LockTable {
		return false
	}
	if this.ClosedTimestampPolicy != that1.ClosedTimestampPolicy {
		return false
	}
	if !this.ClosedTimestampSideTransportInfo.Equal(&that1.ClosedTimestampSideTransportInfo) {
		return false
	}
	return true
}
func (this *RangeInfo_CTEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeInfo_CTEntry)
	if !ok {
		that2, ok := that.(RangeInfo_CTEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.ClosedTimestamp.Equal(&that1.ClosedTimestamp) {
		return false
	}
	if this.MLAI != that1.MLAI {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	return true
}
func (this *RangeSideTransportInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RangeSideTransportInfo)
	if !ok {
		that2, ok := that.(RangeSideTransportInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReplicaClosed.Equal(&that1.ReplicaClosed) {
		return false
	}
	if this.ReplicaLAI != that1.ReplicaLAI {
		return false
	}
	if !this.CentralClosed.Equal(&that1.CentralClosed) {
		return false
	}
	if this.CentralLAI != that1.CentralLAI {
		return false
	}
	return true
}
func (m *ReplicaState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicaState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicaState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RaftClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.UsingAppliedStateKey {
		i--
		if m.UsingAppliedStateKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.GCThreshold != nil {
		{
			size, err := m.GCThreshold.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TruncatedState != nil {
		{
			size, err := m.TruncatedState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Lease != nil {
		{
			size, err := m.Lease.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Desc != nil {
		{
			size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintState(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LeaseAppliedIndex != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.LeaseAppliedIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.RaftAppliedIndex != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.RaftAppliedIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RangeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClosedTimestampSideTransportInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.ClosedTimestampPolicy != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ClosedTimestampPolicy))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.LockTable) > 0 {
		i -= len(m.LockTable)
		copy(dAtA[i:], m.LockTable)
		i = encodeVarintState(dAtA, i, uint64(len(m.LockTable)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.TenantID != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.TenantID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ProposalQuotaReleaseQueue) > 0 {
		dAtA10 := make([]byte, len(m.ProposalQuotaReleaseQueue)*10)
		var j9 int
		for _, num1 := range m.ProposalQuotaReleaseQueue {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintState(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x7a
	}
	if m.ProposalQuotaBaseIndex != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ProposalQuotaBaseIndex))
		i--
		dAtA[i] = 0x70
	}
	if m.RangefeedRegistrations != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.RangefeedRegistrations))
		i--
		dAtA[i] = 0x68
	}
	{
		size, err := m.ActiveClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size, err := m.NewestClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.RaftLogSizeTrusted {
		i--
		if m.RaftLogSizeTrusted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.RangeMaxBytes != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.RangeMaxBytes))
		i--
		dAtA[i] = 0x40
	}
	if m.ApproximateProposalQuota != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ApproximateProposalQuota))
		i--
		dAtA[i] = 0x38
	}
	if m.RaftLogSize != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.RaftLogSize))
		i--
		dAtA[i] = 0x30
	}
	if m.NumDropped != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.NumDropped))
		i--
		dAtA[i] = 0x28
	}
	if m.NumPending != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.NumPending))
		i--
		dAtA[i] = 0x18
	}
	if m.LastIndex != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.LastIndex))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ReplicaState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RangeInfo_CTEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeInfo_CTEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeInfo_CTEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.MLAI != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.MLAI))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.ClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NodeID != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RangeSideTransportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangeSideTransportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangeSideTransportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CentralLAI != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.CentralLAI))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.CentralClosed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ReplicaLAI != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ReplicaLAI))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ReplicaClosed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LatchManagerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatchManagerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LatchManagerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WriteCount != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.WriteCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ReadCount != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.ReadCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicaState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RaftAppliedIndex != 0 {
		n += 1 + sovState(uint64(m.RaftAppliedIndex))
	}
	if m.LeaseAppliedIndex != 0 {
		n += 1 + sovState(uint64(m.LeaseAppliedIndex))
	}
	if m.Desc != nil {
		l = m.Desc.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.Lease != nil {
		l = m.Lease.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.TruncatedState != nil {
		l = m.TruncatedState.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.GCThreshold != nil {
		l = m.GCThreshold.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovState(uint64(l))
	}
	if m.UsingAppliedStateKey {
		n += 2
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovState(uint64(l))
	}
	l = m.RaftClosedTimestamp.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *RangeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReplicaState.Size()
	n += 1 + l + sovState(uint64(l))
	if m.LastIndex != 0 {
		n += 1 + sovState(uint64(m.LastIndex))
	}
	if m.NumPending != 0 {
		n += 1 + sovState(uint64(m.NumPending))
	}
	if m.NumDropped != 0 {
		n += 1 + sovState(uint64(m.NumDropped))
	}
	if m.RaftLogSize != 0 {
		n += 1 + sovState(uint64(m.RaftLogSize))
	}
	if m.ApproximateProposalQuota != 0 {
		n += 1 + sovState(uint64(m.ApproximateProposalQuota))
	}
	if m.RangeMaxBytes != 0 {
		n += 1 + sovState(uint64(m.RangeMaxBytes))
	}
	if m.RaftLogSizeTrusted {
		n += 2
	}
	l = m.NewestClosedTimestamp.Size()
	n += 1 + l + sovState(uint64(l))
	l = m.ActiveClosedTimestamp.Size()
	n += 1 + l + sovState(uint64(l))
	if m.RangefeedRegistrations != 0 {
		n += 1 + sovState(uint64(m.RangefeedRegistrations))
	}
	if m.ProposalQuotaBaseIndex != 0 {
		n += 1 + sovState(uint64(m.ProposalQuotaBaseIndex))
	}
	if len(m.ProposalQuotaReleaseQueue) > 0 {
		l = 0
		for _, e := range m.ProposalQuotaReleaseQueue {
			l += sovState(uint64(e))
		}
		n += 1 + sovState(uint64(l)) + l
	}
	if m.TenantID != 0 {
		n += 2 + sovState(uint64(m.TenantID))
	}
	l = len(m.LockTable)
	if l > 0 {
		n += 2 + l + sovState(uint64(l))
	}
	if m.ClosedTimestampPolicy != 0 {
		n += 2 + sovState(uint64(m.ClosedTimestampPolicy))
	}
	l = m.ClosedTimestampSideTransportInfo.Size()
	n += 2 + l + sovState(uint64(l))
	return n
}

func (m *RangeInfo_CTEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovState(uint64(m.NodeID))
	}
	l = m.ClosedTimestamp.Size()
	n += 1 + l + sovState(uint64(l))
	if m.MLAI != 0 {
		n += 1 + sovState(uint64(m.MLAI))
	}
	if m.Epoch != 0 {
		n += 1 + sovState(uint64(m.Epoch))
	}
	return n
}

func (m *RangeSideTransportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReplicaClosed.Size()
	n += 1 + l + sovState(uint64(l))
	if m.ReplicaLAI != 0 {
		n += 1 + sovState(uint64(m.ReplicaLAI))
	}
	l = m.CentralClosed.Size()
	n += 1 + l + sovState(uint64(l))
	if m.CentralLAI != 0 {
		n += 1 + sovState(uint64(m.CentralLAI))
	}
	return n
}

func (m *LatchManagerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadCount != 0 {
		n += 1 + sovState(uint64(m.ReadCount))
	}
	if m.WriteCount != 0 {
		n += 1 + sovState(uint64(m.WriteCount))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReplicaState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAppliedIndex", wireType)
			}
			m.RaftAppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftAppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseAppliedIndex", wireType)
			}
			m.LeaseAppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseAppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = &roachpb.RangeDescriptor{}
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lease == nil {
				m.Lease = &roachpb.Lease{}
			}
			if err := m.Lease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TruncatedState == nil {
				m.TruncatedState = &roachpb.RaftTruncatedState{}
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCThreshold == nil {
				m.GCThreshold = &hlc.Timestamp{}
			}
			if err := m.GCThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &enginepb.MVCCStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsingAppliedStateKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UsingAppliedStateKey = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &roachpb.Version{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RaftClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplicaState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPending", wireType)
			}
			m.NumPending = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPending |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDropped", wireType)
			}
			m.NumDropped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumDropped |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLogSize", wireType)
			}
			m.RaftLogSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftLogSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproximateProposalQuota", wireType)
			}
			m.ApproximateProposalQuota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApproximateProposalQuota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeMaxBytes", wireType)
			}
			m.RangeMaxBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeMaxBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLogSizeTrusted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RaftLogSizeTrusted = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewestClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewestClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActiveClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangefeedRegistrations", wireType)
			}
			m.RangefeedRegistrations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangefeedRegistrations |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalQuotaBaseIndex", wireType)
			}
			m.ProposalQuotaBaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalQuotaBaseIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProposalQuotaReleaseQueue = append(m.ProposalQuotaReleaseQueue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowState
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthState
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthState
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProposalQuotaReleaseQueue) == 0 {
					m.ProposalQuotaReleaseQueue = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowState
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProposalQuotaReleaseQueue = append(m.ProposalQuotaReleaseQueue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalQuotaReleaseQueue", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			m.TenantID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TenantID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestampPolicy", wireType)
			}
			m.ClosedTimestampPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosedTimestampPolicy |= roachpb.RangeClosedTimestampPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestampSideTransportInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosedTimestampSideTransportInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeInfo_CTEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CTEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CTEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MLAI", wireType)
			}
			m.MLAI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MLAI |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeSideTransportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeSideTransportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeSideTransportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaClosed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplicaClosed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaLAI", wireType)
			}
			m.ReplicaLAI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaLAI |= github_com_cockroachdb_cockroach_pkg_kv_kvserver_closedts_ctpb.LAI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentralClosed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CentralClosed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CentralLAI", wireType)
			}
			m.CentralLAI = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CentralLAI |= github_com_cockroachdb_cockroach_pkg_kv_kvserver_closedts_ctpb.LAI(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatchManagerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatchManagerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatchManagerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCount", wireType)
			}
			m.ReadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteCount", wireType)
			}
			m.WriteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
