// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/liveness.proto

package kvserverpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CommissionStatus enumerates the possible "commission" states a node could be
// in.
//
//    +--------------------+                                        +--------------------+
//    |                    |     cockroach node decommission        |                    |
//    |                    |--------------------------------------->|                    |
//    |    Commissioned    |                                        |  Decommissioning   |
//    |                    |<---------------------------------------|                    |
//    |                    |     cockroach node recommission        |                    |
//    +--------------------+                                        +--------------------+
//                                                                             ^
//                                                                             |
//                                                                             |
//                                                                             |
//                                                                             |
//                                                                             v
//                                                                  +--------------------+
//                                                                  |                    |
//                                                                  |                    |
//                                                                  |   Decommissioned   |
//                                                                  |                    |
//                                                                  |                    |
//                                                                  +--------------------+
//
// Note that we've intentionally elided a 'recommissioning' state. To
// recommission a node is to simply cancel an inflight decommissioning process,
// which we do by persisting the appropriate commission status in the liveness
// record. It then makes no sense to bother with persisting an explicit
// in-progress state.
//
// XXX: Rename to remove the _.
type CommissionStatus int32

const (
	// Unknown is the placeholder default value we use for wire compatibility in
	// mixed version clusters where earlier version nodes don't make use of this
	// commission status enum.
	//
	// TODO(irfansharif): Remove this `UNKNOWN_` state once v20.2 is cut. We only
	// need it as a stopgap when migrating from v20.1.
	CommissionStatus_UNKNOWN_ CommissionStatus = 0
	// Commissioned represents a node that is neither decommissioning or already
	// fully decommissioned.
	CommissionStatus_COMMISSIONED_ CommissionStatus = 1
	// Decommissioning represents a node that we've only started decommissioning,
	// but has not yet fully decommissioned. It is safe to recommission it during
	// this time, in order to cancel the inflight decommissioning process.
	CommissionStatus_DECOMMISSIONING_ CommissionStatus = 2
	// Decommissioned represents a node that has been fully decommissioned. It
	// will no longer be allowed to join the cluster.
	//
	// TODO(irfansharif): We don't disallow the joining as yet.
	CommissionStatus_DECOMMISSIONED_ CommissionStatus = 3
)

var CommissionStatus_name = map[int32]string{
	0: "UNKNOWN_",
	1: "COMMISSIONED_",
	2: "DECOMMISSIONING_",
	3: "DECOMMISSIONED_",
}
var CommissionStatus_value = map[string]int32{
	"UNKNOWN_":         0,
	"COMMISSIONED_":    1,
	"DECOMMISSIONING_": 2,
	"DECOMMISSIONED_":  3,
}

func (CommissionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_liveness_47994417f3add0ac, []int{0}
}

// XXX: Do we need Dead, Unavailable, Live? Why can't the determination be made
// at the client. We're only computing time from a given time, and last
// heartbeated. They're also not completely non-overlapping, which is why this
// API sucks. A dead node could be decommissioned, a live node could be
// recommissioned.
// NodeLivenessStatus describes the status of a node from the perspective of the
// liveness system.
//
// See comment on LivenessStatus() for a description of the states.
type NodeLivenessStatus int32

const (
	NodeLivenessStatus_UNKNOWN NodeLivenessStatus = 0
	// DEAD indicates the node is considered dead.
	NodeLivenessStatus_DEAD NodeLivenessStatus = 1
	// UNAVAILABLE indicates that the node is unavailable - it has not updated its
	// liveness record recently enough to be considered live, but has not been
	// unavailable long enough to be considered dead.
	NodeLivenessStatus_UNAVAILABLE NodeLivenessStatus = 2
	// LIVE indicates a live node.
	NodeLivenessStatus_LIVE NodeLivenessStatus = 3
	// DECOMMISSIONING indicates a node that is in the decommissioning process.
	NodeLivenessStatus_DECOMMISSIONING NodeLivenessStatus = 4
	// DECOMMISSIONED indicates a node that has finished the decommissioning
	// process.
	NodeLivenessStatus_DECOMMISSIONED NodeLivenessStatus = 5
)

var NodeLivenessStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "DEAD",
	2: "UNAVAILABLE",
	3: "LIVE",
	4: "DECOMMISSIONING",
	5: "DECOMMISSIONED",
}
var NodeLivenessStatus_value = map[string]int32{
	"UNKNOWN":         0,
	"DEAD":            1,
	"UNAVAILABLE":     2,
	"LIVE":            3,
	"DECOMMISSIONING": 4,
	"DECOMMISSIONED":  5,
}

func (x NodeLivenessStatus) String() string {
	return proto.EnumName(NodeLivenessStatus_name, int32(x))
}
func (NodeLivenessStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_liveness_47994417f3add0ac, []int{1}
}

// Liveness holds information about a node's latest heartbeat and epoch.
//
// NOTE: 20.1 encodes this proto and uses it for CPut operations, so its
// encoding can't change until 21.1. 20.2 has moved away from the bad practice.
// In 21.1 we should replace the LegacyTimestamp field with a regular Timestamp.
type Liveness struct {
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	// Epoch is a monotonically-increasing value for node liveness. It
	// may be incremented if the liveness record expires (current time
	// is later than the expiration timestamp).
	Epoch int64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The timestamp at which this liveness record expires. The logical part of
	// this timestamp is zero.
	//
	// Note that the clock max offset is not accounted for in any way when this
	// expiration is set. If a checker wants to be extra-optimistic about another
	// node being alive, it can adjust for the max offset. liveness.IsLive()
	// doesn't do that, however. The expectation is that the expiration duration
	// is large in comparison to the max offset, and that nodes heartbeat their
	// liveness records well in advance of this expiration, so the optimism or
	// pessimism of a checker does not matter very much.
	//
	// TODO(andrei): Change this to a regular Timestamp field in 21.1.
	Expiration                hlc.LegacyTimestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration"`
	Draining                  bool                `protobuf:"varint,4,opt,name=draining,proto3" json:"draining,omitempty"`
	DeprecatedDecommissioning bool                `protobuf:"varint,5,opt,name=deprecated_decommissioning,json=deprecatedDecommissioning,proto3" json:"deprecated_decommissioning,omitempty"`
	CommissionStatus          CommissionStatus    `protobuf:"varint,6,opt,name=commission_status,json=commissionStatus,proto3,enum=cockroach.kv.kvserver.storagepb.CommissionStatus" json:"commission_status,omitempty"`
}

func (m *Liveness) Reset()      { *m = Liveness{} }
func (*Liveness) ProtoMessage() {}
func (*Liveness) Descriptor() ([]byte, []int) {
	return fileDescriptor_liveness_47994417f3add0ac, []int{0}
}
func (m *Liveness) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liveness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Liveness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liveness.Merge(dst, src)
}
func (m *Liveness) XXX_Size() int {
	return m.Size()
}
func (m *Liveness) XXX_DiscardUnknown() {
	xxx_messageInfo_Liveness.DiscardUnknown(m)
}

var xxx_messageInfo_Liveness proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Liveness)(nil), "cockroach.kv.kvserver.storagepb.Liveness")
	proto.RegisterEnum("cockroach.kv.kvserver.storagepb.CommissionStatus", CommissionStatus_name, CommissionStatus_value)
	proto.RegisterEnum("cockroach.kv.kvserver.storagepb.NodeLivenessStatus", NodeLivenessStatus_name, NodeLivenessStatus_value)
}
func (m *Liveness) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liveness) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLiveness(dAtA, i, uint64(m.NodeID))
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLiveness(dAtA, i, uint64(m.Epoch))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintLiveness(dAtA, i, uint64(m.Expiration.Size()))
	n1, err := m.Expiration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Draining {
		dAtA[i] = 0x20
		i++
		if m.Draining {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeprecatedDecommissioning {
		dAtA[i] = 0x28
		i++
		if m.DeprecatedDecommissioning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CommissionStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLiveness(dAtA, i, uint64(m.CommissionStatus))
	}
	return i, nil
}

func encodeVarintLiveness(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedLiveness(r randyLiveness, easy bool) *Liveness {
	this := &Liveness{}
	this.NodeID = github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(r.Int31())
	if r.Intn(2) == 0 {
		this.NodeID *= -1
	}
	this.Epoch = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Epoch *= -1
	}
	v1 := hlc.NewPopulatedLegacyTimestamp(r, easy)
	this.Expiration = *v1
	this.Draining = bool(bool(r.Intn(2) == 0))
	this.DeprecatedDecommissioning = bool(bool(r.Intn(2) == 0))
	this.CommissionStatus = CommissionStatus([]int32{0, 1, 2, 3}[r.Intn(4)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyLiveness interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneLiveness(r randyLiveness) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringLiveness(r randyLiveness) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneLiveness(r)
	}
	return string(tmps)
}
func randUnrecognizedLiveness(r randyLiveness, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldLiveness(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldLiveness(dAtA []byte, r randyLiveness, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateLiveness(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateLiveness(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Liveness) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovLiveness(uint64(m.NodeID))
	}
	if m.Epoch != 0 {
		n += 1 + sovLiveness(uint64(m.Epoch))
	}
	l = m.Expiration.Size()
	n += 1 + l + sovLiveness(uint64(l))
	if m.Draining {
		n += 2
	}
	if m.DeprecatedDecommissioning {
		n += 2
	}
	if m.CommissionStatus != 0 {
		n += 1 + sovLiveness(uint64(m.CommissionStatus))
	}
	return n
}

func sovLiveness(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLiveness(x uint64) (n int) {
	return sovLiveness(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Liveness) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiveness
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liveness: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liveness: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiveness
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draining", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draining = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedDecommissioning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeprecatedDecommissioning = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionStatus", wireType)
			}
			m.CommissionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommissionStatus |= (CommissionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiveness(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLiveness
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiveness(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiveness
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveness
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLiveness
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLiveness
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLiveness(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLiveness = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiveness   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("kv/kvserver/kvserverpb/liveness.proto", fileDescriptor_liveness_47994417f3add0ac)
}

var fileDescriptor_liveness_47994417f3add0ac = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x1c, 0xf5, 0xe5, 0x5f, 0xad, 0x0b, 0xb4, 0xd7, 0x23, 0x43, 0xc8, 0x60, 0x47, 0x20, 0xa4, 0xa8,
	0x42, 0x67, 0xd1, 0x6e, 0x48, 0x0c, 0x49, 0x1d, 0x55, 0x16, 0xa9, 0x23, 0x25, 0xb4, 0x48, 0x1d,
	0xb0, 0xec, 0xf3, 0xc9, 0x39, 0xe5, 0xcf, 0x59, 0xf6, 0x25, 0x82, 0xef, 0xc0, 0xc0, 0xc8, 0xd8,
	0x81, 0x81, 0x8f, 0xc0, 0x47, 0xc8, 0xd8, 0xb1, 0x53, 0x04, 0xc9, 0xb7, 0x60, 0x42, 0x76, 0xfe,
	0xb8, 0xcd, 0xc2, 0xf6, 0xee, 0xf9, 0xbd, 0xdf, 0xf3, 0xd3, 0xef, 0x07, 0x5f, 0x0d, 0x67, 0xc6,
	0x70, 0x16, 0xb3, 0x68, 0xc6, 0xa2, 0x1d, 0x08, 0x3d, 0x63, 0xc4, 0x67, 0x6c, 0xc2, 0xe2, 0x98,
	0x84, 0x91, 0x90, 0x02, 0xeb, 0x54, 0xd0, 0x61, 0x24, 0x5c, 0x3a, 0x20, 0xc3, 0x19, 0xd9, 0xea,
	0x48, 0x2c, 0x45, 0xe4, 0x06, 0x2c, 0xf4, 0x6a, 0xfa, 0x54, 0xf2, 0x91, 0x31, 0x18, 0x51, 0x63,
	0xc4, 0x02, 0x97, 0x7e, 0x71, 0x24, 0x1f, 0xb3, 0x58, 0xba, 0xe3, 0x70, 0x3d, 0xa1, 0x56, 0x09,
	0x44, 0x20, 0x52, 0x68, 0x24, 0x68, 0xcd, 0xbe, 0xf8, 0x9a, 0x87, 0x6a, 0x67, 0x13, 0x85, 0x6f,
	0xe0, 0xc1, 0x44, 0xf8, 0xcc, 0xe1, 0x7e, 0x15, 0xd4, 0x41, 0xa3, 0xd8, 0x6a, 0x2e, 0x17, 0x7a,
	0xc9, 0x16, 0x3e, 0xb3, 0xcc, 0xbf, 0x0b, 0xfd, 0x2c, 0xe0, 0x72, 0x30, 0xf5, 0x08, 0x15, 0x63,
	0x63, 0xf7, 0x3b, 0xbe, 0x97, 0x61, 0x23, 0x1c, 0x06, 0x46, 0x8a, 0x42, 0x8f, 0xac, 0x6d, 0xbd,
	0x52, 0x32, 0xd1, 0xf2, 0x71, 0x05, 0x16, 0x59, 0x28, 0xe8, 0xa0, 0x9a, 0xab, 0x83, 0x46, 0xbe,
	0xb7, 0x7e, 0x60, 0x0b, 0x42, 0xf6, 0x39, 0xe4, 0x91, 0x2b, 0xb9, 0x98, 0x54, 0xf3, 0x75, 0xd0,
	0x28, 0x9f, 0xbe, 0x24, 0x59, 0xd7, 0xa4, 0x14, 0x19, 0x8c, 0x28, 0xe9, 0xa4, 0xa5, 0x3e, 0x6c,
	0x3b, 0xb5, 0x0a, 0xf3, 0x85, 0xae, 0xf4, 0x1e, 0x98, 0x71, 0x0d, 0xaa, 0x7e, 0xe4, 0xf2, 0x09,
	0x9f, 0x04, 0xd5, 0x42, 0x1d, 0x34, 0xd4, 0xde, 0xee, 0x8d, 0xdf, 0xc1, 0x9a, 0xcf, 0xc2, 0x88,
	0x51, 0x57, 0x32, 0xdf, 0xf1, 0x19, 0x15, 0xe3, 0x31, 0x8f, 0x63, 0x2e, 0x52, 0x75, 0x31, 0x55,
	0x3f, 0xcf, 0x14, 0xe6, 0x63, 0x01, 0xfe, 0x04, 0x8f, 0x33, 0xc2, 0x89, 0xa5, 0x2b, 0xa7, 0x71,
	0xb5, 0x54, 0x07, 0x8d, 0xc3, 0xd3, 0x37, 0xe4, 0x3f, 0x8b, 0x21, 0xe7, 0x3b, 0x67, 0x3f, 0x35,
	0xf6, 0x10, 0xdd, 0x63, 0xde, 0xaa, 0xdf, 0x6f, 0x75, 0xe5, 0xd7, 0xad, 0x0e, 0x4e, 0x7c, 0x88,
	0xf6, 0xf5, 0xf8, 0x09, 0x54, 0xaf, 0xec, 0xf7, 0x76, 0xf7, 0xa3, 0xed, 0x20, 0x05, 0x1f, 0xc3,
	0xa7, 0xe7, 0xdd, 0xcb, 0x4b, 0xab, 0xdf, 0xb7, 0xba, 0x76, 0xdb, 0x74, 0x10, 0xc0, 0x15, 0x88,
	0xcc, 0x76, 0x46, 0x5a, 0xf6, 0x85, 0x83, 0x72, 0xf8, 0x19, 0x3c, 0x7a, 0xc8, 0x26, 0xd2, 0x7c,
	0xad, 0xf0, 0xf3, 0x87, 0xa6, 0x9c, 0x08, 0x88, 0x93, 0xed, 0x6c, 0xf7, 0xbe, 0xc9, 0x29, 0xc3,
	0x83, 0x4d, 0x0e, 0x52, 0xb0, 0x0a, 0x0b, 0x66, 0xbb, 0x69, 0x22, 0x80, 0x8f, 0x60, 0xf9, 0xca,
	0x6e, 0x5e, 0x37, 0xad, 0x4e, 0xb3, 0xd5, 0x69, 0xa3, 0x5c, 0xf2, 0xa9, 0x63, 0x5d, 0xb7, 0x51,
	0x7e, 0x3f, 0xc2, 0xb2, 0x2f, 0x50, 0x01, 0x63, 0x78, 0xf8, 0x38, 0x17, 0x15, 0x5b, 0xaf, 0xe7,
	0x7f, 0x34, 0x65, 0xbe, 0xd4, 0xc0, 0xdd, 0x52, 0x03, 0xf7, 0x4b, 0x0d, 0xfc, 0x5e, 0x6a, 0xe0,
	0xdb, 0x4a, 0x53, 0xee, 0x56, 0x9a, 0x72, 0xbf, 0xd2, 0x94, 0x1b, 0x98, 0x9d, 0xbe, 0x57, 0x4a,
	0x4f, 0xf3, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x93, 0xf4, 0x32, 0x1b, 0x03, 0x00,
	0x00,
}
