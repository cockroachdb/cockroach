// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto2";
package cockroach.kv.kvserver.storagepb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/kvserverpb";

import "gogoproto/gogo.proto";

// RaftTruncatedState contains metadata about the truncated portion of the raft log.
// Raft requires access to the term of the last truncated log entry even after the
// rest of the entry has been discarded.
message RaftTruncatedState {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;

  // The highest index that has been removed from the log.
  optional uint64 index = 1 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftIndex"];
  // The term corresponding to 'index'.
  optional uint64 term = 2 [(gogoproto.nullable) = false, (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/kv/kvpb.RaftTerm"];
}

// RangeTombstone contains information about a replica that has been deleted.
message RangeTombstone {
  optional int32 next_replica_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextReplicaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
}

message RaftReplicaID {
  option (gogoproto.equal) = true;
  option (gogoproto.populate) = true;

  // ReplicaID is the ID of the replica with the corresponding HardState.
  optional int32 replica_id = 1 [(gogoproto.nullable) = false,
    (gogoproto.customname) = "ReplicaID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.ReplicaID"];
}
