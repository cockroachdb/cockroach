# Walk through the basics of the data-driven syntax.

init
----

# Set up two nodes, each with one store.
add node=n1 store=s1
----

add node=n2 store=s2
----

# Send a raft message for r1 from n1 to n2 and vice versa, each node holding a
# replica with id=1,2 respectively. We do this to create the non-idle connect
# between the two nodes (it's done on demand).
send range=r1 from=n1/1/s1 to=n2/2/s2 commit=1
----

send range=r1 from=n2/2/s2 to=n1/1/s1 commit=1
----

dispatch from=n2
node=n1 range=r1 pri=normal-pri store=s1 up-to-log-position=6/20
node=n1 range=r1 pri=low-pri    store=s1 up-to-log-position=6/21
----

# Note that they're pending delivery.
pending-dispatch from=n2 to=n1
----
range=r1 pri=low-pri store=s1 up-to-log-position=log-position=6/21
range=r1 pri=normal-pri store=s1 up-to-log-position=log-position=6/20


# Verify that n1's marked n2 as something its connected to, and vice-versa.
connected-nodes-ops from=n1
----
mark-connected(n2)[default]

connected-nodes-ops from=n2
----
mark-connected(n1)[default]


# Mark the from n2->n1 as idle.
mark-idle from=n2 to=n1
----

# n2's wound down its transport streams and has marked n1 as something it's
# disconnected from.
connected-nodes-ops from=n2
----
mark-disconnected(n1)[default]

# n1's not done the same since it still is connected to n2.
connected-nodes-ops from=n1
----

# Note that they're still pending delivery. They'll only get pruned out by the
# periodic pruning process, which is invoked next.
pending-dispatch from=n2 to=n1
----
range=r1 pri=low-pri store=s1 up-to-log-position=log-position=6/21
range=r1 pri=normal-pri store=s1 up-to-log-position=log-position=6/20

drop-disconnected-tokens from=n2
----

# Observe that there's nothing pending dispatch and the metrics indicate as much.
pending-dispatch from=n2 to=n1
----

metrics
----
node=n1: dispatches-dropped=0
node=n2: dispatches-dropped=2

# vim:ft=sh
