# Walk through the basics of the data-driven syntax.

init
----

# Set up two nodes, each with one store.
add node=n1 store=s1
----

add node=n2 store=s2
----

# Send a raft message for r1 from n1 to n2, each node holding a replica with
# id=1,2 respectively. We do this to create the non-idle connect between the
# two nodes (it's done on demand).
send range=r1 from=n1/1/s1 to=n2/2/s2 commit=1
----

dispatch from=n2
node=n1 range=r1 pri=normal-pri store=s1 up-to-log-position=6/20
node=n1 range=r1 pri=low-pri    store=s1 up-to-log-position=6/21
----

# Note that they're still pending delivery.
pending-dispatch from=n2 to=n1
----
range=r1 pri=low-pri store=s1 up-to-log-position=log-position=6/21
range=r1 pri=normal-pri store=s1 up-to-log-position=log-position=6/20

# Mark the connection is idle, and run the fallback mechanism for guaranteed
# delivery.
mark-idle from=n2 to=n1
----
timed out

dispatch-idle from=n2
----

# Observe that there's nothing pending delivery, and the right metrics were
# incremented.
pending-dispatch from=n2 to=n1
----

metrics
----
node=n1: dispatches-delivered=0 dispatches-dropped=0
node=n2: dispatches-delivered=2 dispatches-dropped=0

# vim:ft=sh
