// Copyright 2024 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.kv.kvserver.storeliveness.storelivenesspb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/storeliveness/storelivenesspb";

import "gogoproto/gogo.proto";
import "util/hlc/timestamp.proto";

// StoreIdent includes all necessary info for a store to identify and
// communicate with another store for the purposes of Store Liveness.
message StoreIdent {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.StoreID"];
}

// MessageType lists the possible types of Store Liveness messages. This allows
// for a single Message proto to be used for all types of communication,
// similarly to Raft.
enum MessageType {
  option (gogoproto.goproto_enum_prefix) = false;
  MsgHeartbeat     = 0;
  MsgHeartbeatResp = 1;
}

// Message is the single message proto used for Store Liveness communication.
message Message {
  MessageType type = 1;
  // From is the identity of the store providing support.
  StoreIdent  from = 2 [(gogoproto.nullable) = false];
  // To is the identity of the store requesting support.
  StoreIdent  to   = 3 [(gogoproto.nullable) = false];
  // Epoch is the epoch for which support is requested/provided.
  int64 epoch = 4 [(gogoproto.casttype) = "Epoch"];
  // Expiration is the timestamp of the requested/provided support for the
  // given epoch; it is drawn from the support requester's clock. An empty
  // Expiration implies that support for the epoch is not provided.
  util.hlc.Timestamp expiration = 5 [(gogoproto.nullable) = false];
}

// MessageBatch is a collection of Messages and a timestamp. It is used in the
// streaming Store Liveness RPC service.
message MessageBatch {
  repeated Message messages = 1 [(gogoproto.nullable) = false];
  // Now is used to update the HLC clock of the message recipient. This is
  // necessary to ensure the Support Disjointness Invariant of Store Liveness.
  // Without propagating this timestamp, the following scenario is possible:
  // - At time 5, according to its own clock, store A has support from store B
  //   with epoch 1 and expiration 10.
  // - Store B withdraws support when its clock reaches time 10 and bumps store
  //   A's epoch to 2.
  // - Store A's clock is still at time 6, and it requests to extend support
  //   for epoch 1 until time 12.
  // - Store B responds with the bumped epoch 2 (essentially a nack).
  // - Store A, whose clock is at time 7, receives that message (does not update
  //   its clock to match store B's) and requests support for epoch 2 and
  //   expiration 13.
  // - Store B agrees and store A receives that response at time 8.
  // Now Store A has two overlapping periods of support for epochs 1 and 2:
  // [5, 10) and [8, 12).
  //
  // Keeping the stores' clocks more tightly synchronized also allows them to
  // provide/withdraw support promptly.
  util.hlc.Timestamp now    = 2 [(gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp"];
}

message Empty {}

// StoreLiveness is a unidirectional streaming RPC service.
service StoreLiveness {
  rpc Stream (stream MessageBatch) returns (Empty) {}
}


// RequesterMeta includes all metadata pertaining to a support requester that
// needs to be persisted to disk to ensure the Store Liveness algorithm remains
// correct across restarts.
message RequesterMeta {
  // MaxEpoch is the maximum epoch for which the local store has requested
  // support from any remote store. A local store's epoch is incremented when
  // it restarts, and it can increase when it loses support from a remote store.
  //
  // MaxEpoch needs to be persisted (before requesting support for that epoch)
  // to ensure that, if the local store restarts, it will not try to
  // re-establish support for an old no-longer-supported epoch.
  int64 max_epoch = 1 [(gogoproto.casttype) = "Epoch"];
  // MaxRequested is the maximum timestamp at which support was requested by
  // another store. It is persisted to achieve two goals:
  //
  // 1. Ensures that the store's disk is not stalled before requesting support.
  // Receiving support for a store with a stalled disk is not desirable because
  // currently a leader/leaseholder depends on its own disk for availability.
  //
  // 2. Ensures that supported epochs do not overlap in time, and consequently,
  // the lease protocol implemented on top of Store Liveness maintains the Lease
  // Disjointness Invariant.
  //
  // Example: If a store restarts before its supported epoch expires, it could
  // get support for a higher epoch after restarting. This could be an issue if
  // the leaseholder serves a future-time read under the old epoch and a write
  // under the new epoch that invalidates the read.
  //
  // For 2, upon restart, a store must wait until its clock exceeds MaxRequested.
  util.hlc.Timestamp max_requested = 2 [(gogoproto.nullable) = false];
}

// SupporterMeta includes all metadata pertaining to a support provider that
// needs to be persisted to disk to ensure the Store Liveness algorithm remains
// correct across restarts.
message SupporterMeta {
  // MaxWithdrawn is the maximum timestamp at which support was withdrawn from
  // another store. It needs to be persisted to avoid providing support for that
  // store again after restarting and potentially regressing the HLC. HLCs are
  // usually assumed to be monotonically increasing even across restarts but
  // Store Liveness remains correct without this assumption.
  //
  // Upon restart, a store must forward its clock to MaxWithdrawn.
  util.hlc.Timestamp max_withdrawn = 1 [(gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp"];

  // TODO(mira): add a max_expiration field, which is the maximum of all
  // expirations for all remote stores that the local store is providing support
  // for. This will allow to write the SupportState proto corresponding to
  // "support for" less often: only when the supported epoch changes.

  // When max_expiration is loaded from disk, the local store will set the
  // expiration of all remote stores to this maximum. Supporting a remote store
  // for longer than promised is ok; it's indistinguishable from the local
  // store's clock being slow/behind.
}

// SupportState includes all metadata (epoch, expiration) pertaining to either a
// provider of support or requester of support. Each local store maintains two
// SupportState structs for a given remote store: one as a provider of support
// for the remote store, and one as a requester of support from the remote
// store. Only the former is persisted to disk to ensure that the local store
// continues to support the remote store as promised even across restarts. The
// latter is lost across restarts because a store loses all support from other
// stores upon restart.
message SupportState {
  // Target is the identify of the store that is being supported by the local
  // store ("support for") or the store that is providing support to the local
  // store ("support from"), depending on the context.
  //
  // For efficiency, Target is unset when writing the proto to disk, and then
  // populated back when the proto is read into memory.
  StoreIdent         target     = 1 [(gogoproto.nullable) = false];
  int64              epoch      = 2 [(gogoproto.casttype) = "Epoch"];
  util.hlc.Timestamp expiration = 3 [(gogoproto.nullable) = false];
}

// InspectStoreLivenessRequest is used to power the Store Liveness /inspectz
// functionality. The request doesn't take any parameters.
message InspectStoreLivenessRequest {}

// InspectStoreLivenessRequest is used to power the Store Liveness /inspectz
// functionality. The response is a list of SupportStatesPerStore.
message InspectStoreLivenessResponse {
  repeated SupportStatesPerStore support_states_per_store = 1 [(gogoproto.nullable) = false];
}

// SupportStatesPerStore includes all SupportStates for a given store; they
// correspond to either the support-from or support-for map of a given store.
message SupportStatesPerStore {
  StoreIdent store_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "StoreID"];
  repeated SupportState support_states = 2 [(gogoproto.nullable) = false];
}
