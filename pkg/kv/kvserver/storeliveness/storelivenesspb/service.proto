// Copyright 2024 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.kv.kvserver.storeliveness.storelivenesspb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/storeliveness/storelivenesspb";

import "gogoproto/gogo.proto";
import "roachpb/data.proto";
import "util/hlc/timestamp.proto";

enum MessageType {
  option (gogoproto.goproto_enum_prefix) = false;
  MsgHeartbeat     = 0;
  MsgHeartbeatResp = 1;
}

message StoreIdent {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.StoreID"];
}

message Message {
  MessageType type = 1;
  StoreIdent  from = 2 [(gogoproto.nullable) = false];
  StoreIdent  to   = 3 [(gogoproto.nullable) = false];
  // epoch is included in MsgHeartbeat and MsgHeartbeatResp messages.
  int64 epoch = 4 [(gogoproto.casttype) = "Epoch"];
  // end_time is included in MsgHeartbeat and MsgHeartbeatResp messages.
  util.hlc.Timestamp end_time = 5 [(gogoproto.nullable) = false, (gogoproto.casttype) = "Expiration"];
  // ack is included in MsgHeartbeatResp messages.
  bool ack = 6;
}

message MessageBatch {
  repeated Message messages = 1 [(gogoproto.nullable) = false];
  util.hlc.Timestamp now    = 2 [(gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp"];
}

message Empty {}

service StoreLiveness {
  rpc Stream (stream MessageBatch) returns (Empty) {}
}
