// Copyright 2017 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.kv.kvserver.storeliveness.storelivenesspb;
option go_package = "github.com/cockroachdb/cockroach/pkg/kv/kvserver/storeliveness/storelivenesspb";

import "gogoproto/gogo.proto";
import "kv/kvpb/errors.proto";
import "roachpb/data.proto";
import "util/hlc/timestamp.proto";

message StoreIdent {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID", (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/roachpb.StoreID"];
}

message Heartbeat {
  int64 epoch = 1;
  util.hlc.Timestamp end_time = 2 [(gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/util/hlc.Timestamp"];
}

message Header {
  StoreIdent from = 1 [(gogoproto.nullable) = false];
  StoreIdent to = 2 [(gogoproto.nullable) = false];
}

message HeartbeatRequest {
  Header header = 1 [(gogoproto.nullable) = false];
  Heartbeat heartbeat = 2 [(gogoproto.nullable) = false];
}

message HeartbeatRequestBatch {
  repeated HeartbeatRequest requests = 1 [(gogoproto.nullable) = false];
  repeated StoreIdent store_ids = 2 [(gogoproto.customname) = "StoreIDs"];
  util.hlc.Timestamp now = 3 [(gogoproto.nullable) = false,
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp"];
}

message HeartbeatResponseUnion {
  option (gogoproto.onlyone) = true;

  kv.kvpb.Error error = 1;
}

message HeartbeatResponse {
  Header header = 1 [(gogoproto.nullable) = false];
  Heartbeat heartbeat = 2 [(gogoproto.nullable) = false];
  bool heartbeat_ack = 3;
  HeartbeatResponseUnion union = 4 [(gogoproto.nullable) = false];
}

message HeartbeatUnion {
  HeartbeatRequest request = 1;
  HeartbeatResponse response = 2;
}

service StoreLiveness {
  rpc Heartbeat (stream HeartbeatRequestBatch) returns (stream HeartbeatResponse) {}
}
