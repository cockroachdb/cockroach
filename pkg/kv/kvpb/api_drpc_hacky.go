// Copyright 2024 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

// Instead of proper codegen, this file was copied from
// rpctoy/toypb/echo_gogo_drpc.pb.go in [1] and manually
// modified to match:
//
// service BatchService {
//   rpc Batch (BatchRequest) returns (BatchResponse) {}
// }
//
// TODO(dev-inf): this should be generated by protoc-gen-go-drpc.
//
// [1]: https://github.com/cockroachlabs/perf-efficiency-team/pull/19/files#diff-c7fe6802b2e6fd8df026ec6a05b0001ba75fc3b8e10994bfff80818618c10e2f

package kvpb

import (
	"bytes"
	"context"

	"github.com/cockroachdb/errors"
	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"storj.io/drpc"
	"storj.io/drpc/drpcerr"
)

type drpcEncoding_File_echo_gogo_proto struct{}

func (drpcEncoding_File_echo_gogo_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_echo_gogo_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_echo_gogo_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_echo_gogo_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCDRPCBatchServiceClient interface {
	DRPCConn() drpc.Conn

	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	// BatchStream(ctx context.Context) (DRPCDRPCBatchService_BatchStreamClient, error)
}

type drpcDRPCBatchServiceClient struct {
	cc drpc.Conn
}

func NewDRPCDRPCBatchServiceClient(cc drpc.Conn) DRPCDRPCBatchServiceClient {
	return &drpcDRPCBatchServiceClient{cc}
}

func (c *drpcDRPCBatchServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcDRPCBatchServiceClient) Batch(
	ctx context.Context, in *BatchRequest,
) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/rpctoy.toypb.DRPCBatchService/Batch", drpcEncoding_File_echo_gogo_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcDRPCBatchServiceClient) BatchStream(
	ctx context.Context,
) (DRPCDRPCBatchService_BatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/rpctoy.toypb.DRPCBatchService/BatchStream", drpcEncoding_File_echo_gogo_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcDRPCBatchService_BatchStreamClient{stream}
	return x, nil
}

type DRPCDRPCBatchService_BatchStreamClient interface {
	drpc.Stream
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type drpcDRPCBatchService_BatchStreamClient struct {
	drpc.Stream
}

func (x *drpcDRPCBatchService_BatchStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcDRPCBatchService_BatchStreamClient) Send(m *BatchRequest) error {
	return x.MsgSend(m, drpcEncoding_File_echo_gogo_proto{})
}

func (x *drpcDRPCBatchService_BatchStreamClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_echo_gogo_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDRPCBatchService_BatchStreamClient) RecvMsg(m *BatchResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_echo_gogo_proto{})
}

type DRPCDRPCBatchServiceServer interface {
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	// BatchStream(DRPCDRPCBatchService_BatchStreamStream) error
}

type DRPCDRPCBatchServiceUnimplementedServer struct{}

func (s *DRPCDRPCBatchServiceUnimplementedServer) Batch(
	context.Context, *BatchRequest,
) (*BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCDRPCBatchServiceUnimplementedServer) BatchStream(
	DRPCDRPCBatchService_BatchStreamStream,
) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCDRPCBatchServiceDescription struct{}

func (DRPCDRPCBatchServiceDescription) NumMethods() int { return 1 /* HACK: was two */ }

func (DRPCDRPCBatchServiceDescription) Method(
	n int,
) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/rpctoy.toypb.DRPCBatchService/Batch", drpcEncoding_File_echo_gogo_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCDRPCBatchServiceServer).
					Batch(
						ctx,
						in1.(*BatchRequest),
					)
			}, DRPCDRPCBatchServiceServer.Batch, true
	//case 1:
	//	return "/rpctoy.toypb.DRPCBatchService/BatchStream", drpcEncoding_File_echo_gogo_proto{},
	//		func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
	//			return nil, srv.(DRPCDRPCBatchServiceServer).
	//				BatchStream(
	//					&drpcDRPCBatchService_BatchStreamStream{in1.(drpc.Stream)},
	//				)
	//		}, DRPCDRPCBatchServiceServer.BatchStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterDRPCBatchService(mux drpc.Mux, impl DRPCDRPCBatchServiceServer) error {
	return mux.Register(impl, DRPCDRPCBatchServiceDescription{})
}

type DRPCDRPCBatchService_BatchStream interface {
	drpc.Stream
	SendAndClose(*BatchResponse) error
}

type drpcDRPCBatchService_BatchStream struct {
	drpc.Stream
}

func (x *drpcDRPCBatchService_BatchStream) SendAndClose(m *BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_echo_gogo_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCDRPCBatchService_BatchStreamStream interface {
	drpc.Stream
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
}

type drpcDRPCBatchService_BatchStreamStream struct {
	drpc.Stream
}

func (x *drpcDRPCBatchService_BatchStreamStream) Send(m *BatchResponse) error {
	return x.MsgSend(m, drpcEncoding_File_echo_gogo_proto{})
}

func (x *drpcDRPCBatchService_BatchStreamStream) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_echo_gogo_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcDRPCBatchService_BatchStreamStream) RecvMsg(m *BatchRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_echo_gogo_proto{})
}
