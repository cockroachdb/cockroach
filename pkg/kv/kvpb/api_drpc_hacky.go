// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: api.proto

package kvpb

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_api_proto struct{}

func (drpcEncoding_File_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCInternalClient interface {
	DRPCConn() drpc.Conn

	Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error)
	BatchStream(ctx context.Context) (DRPCInternal_BatchStreamClient, error)
}

type drpcInternalClient struct {
	cc drpc.Conn
}

func NewDRPCInternalClient(cc drpc.Conn) DRPCInternalClient {
	return &drpcInternalClient{cc}
}

func (c *drpcInternalClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcInternalClient) Batch(ctx context.Context, in *BatchRequest) (*BatchResponse, error) {
	out := new(BatchResponse)
	err := c.cc.Invoke(ctx, "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcInternalClient) BatchStream(ctx context.Context) (DRPCInternal_BatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/cockroach.roachpb.Internal/BatchStream", drpcEncoding_File_api_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcInternal_BatchStreamClient{stream}
	return x, nil
}

type DRPCInternal_BatchStreamClient interface {
	drpc.Stream
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
}

type drpcInternal_BatchStreamClient struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStreamClient) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcInternal_BatchStreamClient) Send(m *BatchRequest) error {
	return x.MsgSend(m, drpcEncoding_File_api_proto{})
}

func (x *drpcInternal_BatchStreamClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_BatchStreamClient) RecvMsg(m *BatchResponse) error {
	return x.MsgRecv(m, drpcEncoding_File_api_proto{})
}

type DRPCInternalServer interface {
	Batch(context.Context, *BatchRequest) (*BatchResponse, error)
	BatchStream(DRPCInternal_BatchStreamStream) error
}

type DRPCInternalUnimplementedServer struct{}

func (s *DRPCInternalUnimplementedServer) Batch(context.Context, *BatchRequest) (*BatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCInternalUnimplementedServer) BatchStream(DRPCInternal_BatchStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCInternalDescription struct{}

func (DRPCInternalDescription) NumMethods() int { return 2 }

func (DRPCInternalDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/cockroach.roachpb.Internal/Batch", drpcEncoding_File_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCInternalServer).
					Batch(
						ctx,
						in1.(*BatchRequest),
					)
			}, DRPCInternalServer.Batch, true
	case 1:
		return "/cockroach.roachpb.Internal/BatchStream", drpcEncoding_File_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCInternalServer).
					BatchStream(
						&drpcInternal_BatchStreamStream{in1.(drpc.Stream)},
					)
			}, DRPCInternalServer.BatchStream, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterInternal(mux drpc.Mux, impl DRPCInternalServer) error {
	return mux.Register(impl, DRPCInternalDescription{})
}

type DRPCInternal_BatchStream interface {
	drpc.Stream
	SendAndClose(*BatchResponse) error
}

type drpcInternal_BatchStream struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStream) SendAndClose(m *BatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCInternal_BatchStreamStream interface {
	drpc.Stream
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
}

type drpcInternal_BatchStreamStream struct {
	drpc.Stream
}

func (x *drpcInternal_BatchStreamStream) Send(m *BatchResponse) error {
	return x.MsgSend(m, drpcEncoding_File_api_proto{})
}

func (x *drpcInternal_BatchStreamStream) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.MsgRecv(m, drpcEncoding_File_api_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcInternal_BatchStreamStream) RecvMsg(m *BatchRequest) error {
	return x.MsgRecv(m, drpcEncoding_File_api_proto{})
}
