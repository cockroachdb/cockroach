// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvnemeses/operations.proto

package kvnemeses

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import errorspb "github.com/cockroachdb/errors/errorspb"
import hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ClosureTxnType int32

const (
	ClosureTxnType_Commit   ClosureTxnType = 0
	ClosureTxnType_Rollback ClosureTxnType = 1
)

var ClosureTxnType_name = map[int32]string{
	0: "Commit",
	1: "Rollback",
}
var ClosureTxnType_value = map[string]int32{
	"Commit":   0,
	"Rollback": 1,
}

func (x ClosureTxnType) String() string {
	return proto.EnumName(ClosureTxnType_name, int32(x))
}
func (ClosureTxnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{0}
}

type ResultType int32

const (
	ResultType_Unknown ResultType = 0
	ResultType_NoError ResultType = 1
	ResultType_Error   ResultType = 2
	ResultType_Value   ResultType = 3
)

var ResultType_name = map[int32]string{
	0: "Unknown",
	1: "NoError",
	2: "Error",
	3: "Value",
}
var ResultType_value = map[string]int32{
	"Unknown": 0,
	"NoError": 1,
	"Error":   2,
	"Value":   3,
}

func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (ResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{1}
}

type BatchOperation struct {
	Ops    []Operation `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops"`
	Result Result      `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
}

func (m *BatchOperation) Reset()         { *m = BatchOperation{} }
func (m *BatchOperation) String() string { return proto.CompactTextString(m) }
func (*BatchOperation) ProtoMessage()    {}
func (*BatchOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{0}
}
func (m *BatchOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *BatchOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperation.Merge(dst, src)
}
func (m *BatchOperation) XXX_Size() int {
	return m.Size()
}
func (m *BatchOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperation.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperation proto.InternalMessageInfo

type ClosureTxnOperation struct {
	TxnID  string         `protobuf:"bytes,1,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	Ops    []Operation    `protobuf:"bytes,2,rep,name=ops,proto3" json:"ops"`
	Result Result         `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
	Type   ClosureTxnType `protobuf:"varint,4,opt,name=type,proto3,enum=cockroach.kv.kvnemeses.ClosureTxnType" json:"type,omitempty"`
}

func (m *ClosureTxnOperation) Reset()         { *m = ClosureTxnOperation{} }
func (m *ClosureTxnOperation) String() string { return proto.CompactTextString(m) }
func (*ClosureTxnOperation) ProtoMessage()    {}
func (*ClosureTxnOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{1}
}
func (m *ClosureTxnOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClosureTxnOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClosureTxnOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClosureTxnOperation.Merge(dst, src)
}
func (m *ClosureTxnOperation) XXX_Size() int {
	return m.Size()
}
func (m *ClosureTxnOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_ClosureTxnOperation.DiscardUnknown(m)
}

var xxx_messageInfo_ClosureTxnOperation proto.InternalMessageInfo

type GetOperation struct {
	Key         []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ResultValue []byte `protobuf:"bytes,2,opt,name=result_value,json=resultValue,proto3" json:"result_value,omitempty"`
	Result      Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
}

func (m *GetOperation) Reset()         { *m = GetOperation{} }
func (m *GetOperation) String() string { return proto.CompactTextString(m) }
func (*GetOperation) ProtoMessage()    {}
func (*GetOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{2}
}
func (m *GetOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *GetOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperation.Merge(dst, src)
}
func (m *GetOperation) XXX_Size() int {
	return m.Size()
}
func (m *GetOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperation.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperation proto.InternalMessageInfo

type PutOperation struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Result Result `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
}

func (m *PutOperation) Reset()         { *m = PutOperation{} }
func (m *PutOperation) String() string { return proto.CompactTextString(m) }
func (*PutOperation) ProtoMessage()    {}
func (*PutOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{3}
}
func (m *PutOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *PutOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutOperation.Merge(dst, src)
}
func (m *PutOperation) XXX_Size() int {
	return m.Size()
}
func (m *PutOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_PutOperation.DiscardUnknown(m)
}

var xxx_messageInfo_PutOperation proto.InternalMessageInfo

type SplitOperation struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Result Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
}

func (m *SplitOperation) Reset()         { *m = SplitOperation{} }
func (m *SplitOperation) String() string { return proto.CompactTextString(m) }
func (*SplitOperation) ProtoMessage()    {}
func (*SplitOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{4}
}
func (m *SplitOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SplitOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SplitOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SplitOperation.Merge(dst, src)
}
func (m *SplitOperation) XXX_Size() int {
	return m.Size()
}
func (m *SplitOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_SplitOperation.DiscardUnknown(m)
}

var xxx_messageInfo_SplitOperation proto.InternalMessageInfo

type MergeOperation struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Result Result `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
}

func (m *MergeOperation) Reset()         { *m = MergeOperation{} }
func (m *MergeOperation) String() string { return proto.CompactTextString(m) }
func (*MergeOperation) ProtoMessage()    {}
func (*MergeOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{5}
}
func (m *MergeOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *MergeOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeOperation.Merge(dst, src)
}
func (m *MergeOperation) XXX_Size() int {
	return m.Size()
}
func (m *MergeOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeOperation.DiscardUnknown(m)
}

var xxx_messageInfo_MergeOperation proto.InternalMessageInfo

type Operation struct {
	Batch *BatchOperation `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	// TODO(dan): The original prototype of kvnemeses had separate operations for
	// {Begin,Use,Commit,Rollback}Txn, which helped generate more interesting
	// concurrency traffic. This had some issues with deadlock in the txn wait
	// queue, but it seems like it should be possible to bring it back somehow.
	ClosureTxn *ClosureTxnOperation `protobuf:"bytes,2,opt,name=closure_txn,json=closureTxn,proto3" json:"closure_txn,omitempty"`
	Get        *GetOperation        `protobuf:"bytes,7,opt,name=get,proto3" json:"get,omitempty"`
	Put        *PutOperation        `protobuf:"bytes,8,opt,name=put,proto3" json:"put,omitempty"`
	Split      *SplitOperation      `protobuf:"bytes,9,opt,name=split,proto3" json:"split,omitempty"`
	Merge      *MergeOperation      `protobuf:"bytes,10,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (m *Operation) Reset()      { *m = Operation{} }
func (*Operation) ProtoMessage() {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{6}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(dst, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type Result struct {
	Type  ResultType             `protobuf:"varint,1,opt,name=type,proto3,enum=cockroach.kv.kvnemeses.ResultType" json:"type,omitempty"`
	Err   *errorspb.EncodedError `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Value []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{7}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type Step struct {
	Op     Operation     `protobuf:"bytes,1,opt,name=op,proto3" json:"op"`
	Before hlc.Timestamp `protobuf:"bytes,2,opt,name=before,proto3" json:"before"`
	After  hlc.Timestamp `protobuf:"bytes,3,opt,name=after,proto3" json:"after"`
}

func (m *Step) Reset()      { *m = Step{} }
func (*Step) ProtoMessage() {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_operations_387f0b055d258225, []int{8}
}
func (m *Step) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(dst, src)
}
func (m *Step) XXX_Size() int {
	return m.Size()
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BatchOperation)(nil), "cockroach.kv.kvnemeses.BatchOperation")
	proto.RegisterType((*ClosureTxnOperation)(nil), "cockroach.kv.kvnemeses.ClosureTxnOperation")
	proto.RegisterType((*GetOperation)(nil), "cockroach.kv.kvnemeses.GetOperation")
	proto.RegisterType((*PutOperation)(nil), "cockroach.kv.kvnemeses.PutOperation")
	proto.RegisterType((*SplitOperation)(nil), "cockroach.kv.kvnemeses.SplitOperation")
	proto.RegisterType((*MergeOperation)(nil), "cockroach.kv.kvnemeses.MergeOperation")
	proto.RegisterType((*Operation)(nil), "cockroach.kv.kvnemeses.Operation")
	proto.RegisterType((*Result)(nil), "cockroach.kv.kvnemeses.Result")
	proto.RegisterType((*Step)(nil), "cockroach.kv.kvnemeses.Step")
	proto.RegisterEnum("cockroach.kv.kvnemeses.ClosureTxnType", ClosureTxnType_name, ClosureTxnType_value)
	proto.RegisterEnum("cockroach.kv.kvnemeses.ResultType", ResultType_name, ResultType_value)
}
func (m *BatchOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOperations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n1, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *ClosureTxnOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosureTxnOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TxnID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.TxnID)))
		i += copy(dAtA[i:], m.TxnID)
	}
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOperations(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n2, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *GetOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.ResultValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.ResultValue)))
		i += copy(dAtA[i:], m.ResultValue)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n3, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *PutOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n4, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *SplitOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n5, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *MergeOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Result.Size()))
	n6, err := m.Result.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Batch.Size()))
		n7, err := m.Batch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ClosureTxn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.ClosureTxn.Size()))
		n8, err := m.ClosureTxn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Get != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Get.Size()))
		n9, err := m.Get.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Put != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Put.Size()))
		n10, err := m.Put.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Split != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Split.Size()))
		n11, err := m.Split.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Merge != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Merge.Size()))
		n12, err := m.Merge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Type))
	}
	if m.Err != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperations(dAtA, i, uint64(m.Err.Size()))
		n13, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperations(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Step) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Step) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Op.Size()))
	n14, err := m.Op.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.Before.Size()))
	n15, err := m.Before.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintOperations(dAtA, i, uint64(m.After.Size()))
	n16, err := m.After.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func encodeVarintOperations(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BatchOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *ClosureTxnOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxnID)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovOperations(uint64(l))
		}
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	if m.Type != 0 {
		n += 1 + sovOperations(uint64(m.Type))
	}
	return n
}

func (m *GetOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.ResultValue)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *PutOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *SplitOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *MergeOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	l = m.Result.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.ClosureTxn != nil {
		l = m.ClosureTxn.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Get != nil {
		l = m.Get.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Put != nil {
		l = m.Put.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	if m.Merge != nil {
		l = m.Merge.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOperations(uint64(m.Type))
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovOperations(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovOperations(uint64(l))
	}
	return n
}

func (m *Step) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Op.Size()
	n += 1 + l + sovOperations(uint64(l))
	l = m.Before.Size()
	n += 1 + l + sovOperations(uint64(l))
	l = m.After.Size()
	n += 1 + l + sovOperations(uint64(l))
	return n
}

func sovOperations(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperations(x uint64) (n int) {
	return sovOperations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Operation) GetValue() interface{} {
	if this.Batch != nil {
		return this.Batch
	}
	if this.ClosureTxn != nil {
		return this.ClosureTxn
	}
	if this.Get != nil {
		return this.Get
	}
	if this.Put != nil {
		return this.Put
	}
	if this.Split != nil {
		return this.Split
	}
	if this.Merge != nil {
		return this.Merge
	}
	return nil
}

func (this *Operation) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *BatchOperation:
		this.Batch = vt
	case *ClosureTxnOperation:
		this.ClosureTxn = vt
	case *GetOperation:
		this.Get = vt
	case *PutOperation:
		this.Put = vt
	case *SplitOperation:
		this.Split = vt
	case *MergeOperation:
		this.Merge = vt
	default:
		return false
	}
	return true
}
func (m *BatchOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, Operation{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosureTxnOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosureTxnOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosureTxnOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxnID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, Operation{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ClosureTxnType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultValue = append(m.ResultValue[:0], dAtA[iNdEx:postIndex]...)
			if m.ResultValue == nil {
				m.ResultValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &BatchOperation{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosureTxn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosureTxn == nil {
				m.ClosureTxn = &ClosureTxnOperation{}
			}
			if err := m.ClosureTxn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Get", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Get == nil {
				m.Get = &GetOperation{}
			}
			if err := m.Get.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Put", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Put == nil {
				m.Put = &PutOperation{}
			}
			if err := m.Put.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &SplitOperation{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Merge == nil {
				m.Merge = &MergeOperation{}
			}
			if err := m.Merge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ResultType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &errorspb.EncodedError{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Step) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Op.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperations
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperations
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperations
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperations(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperations = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperations   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("kv/kvnemeses/operations.proto", fileDescriptor_operations_387f0b055d258225)
}

var fileDescriptor_operations_387f0b055d258225 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6b, 0x1a, 0x41,
	0x14, 0xc0, 0x77, 0x5c, 0x35, 0xf1, 0x29, 0x22, 0xd3, 0xb4, 0x2c, 0x81, 0xac, 0x66, 0x29, 0x45,
	0x12, 0x58, 0xc1, 0x42, 0x4a, 0xd2, 0x9c, 0x4c, 0x43, 0x09, 0xf4, 0x1f, 0x1b, 0xdb, 0x43, 0x2f,
	0xc9, 0xba, 0x4e, 0x54, 0x76, 0xdd, 0x59, 0x76, 0x47, 0x6b, 0x8e, 0x3d, 0xb6, 0x50, 0xe8, 0xb1,
	0xc7, 0x7c, 0x91, 0xde, 0x3d, 0xe6, 0x98, 0x53, 0x68, 0xf5, 0xda, 0x0f, 0x51, 0x66, 0x67, 0x75,
	0x15, 0xaa, 0x4d, 0x91, 0xde, 0xde, 0x8e, 0xef, 0xf7, 0xfe, 0xbf, 0x27, 0x6c, 0xd9, 0xfd, 0x8a,
	0xdd, 0x77, 0x49, 0x97, 0x04, 0x24, 0xa8, 0x50, 0x8f, 0xf8, 0x26, 0xeb, 0x50, 0x37, 0xd0, 0x3d,
	0x9f, 0x32, 0x8a, 0x1f, 0x58, 0xd4, 0xb2, 0x7d, 0x6a, 0x5a, 0x6d, 0xdd, 0xee, 0xeb, 0x53, 0xc5,
	0xcd, 0xfb, 0xc4, 0xf7, 0xa9, 0x1f, 0x78, 0x8d, 0x8a, 0x10, 0x84, 0xfa, 0xe6, 0x46, 0x8b, 0xb6,
	0x68, 0x28, 0x56, 0xb8, 0x14, 0xbd, 0x2a, 0x3d, 0xd6, 0x71, 0x2a, 0x6d, 0xc7, 0xaa, 0xb0, 0x4e,
	0x97, 0x04, 0xcc, 0xec, 0x7a, 0xe2, 0x17, 0xed, 0x13, 0x82, 0x7c, 0xcd, 0x64, 0x56, 0xfb, 0xf5,
	0xc4, 0x31, 0xde, 0x07, 0x99, 0x7a, 0x81, 0x82, 0x4a, 0x72, 0x39, 0x5b, 0xdd, 0xd6, 0xff, 0xec,
	0x5f, 0x9f, 0xea, 0xd7, 0x92, 0xc3, 0xdb, 0xa2, 0x64, 0x70, 0x06, 0x1f, 0x42, 0xda, 0x27, 0x41,
	0xcf, 0x61, 0x4a, 0xa2, 0x84, 0xca, 0xd9, 0xaa, 0xba, 0x88, 0x36, 0x42, 0xad, 0x08, 0x8d, 0x18,
	0xed, 0x17, 0x82, 0x7b, 0x47, 0x0e, 0x0d, 0x7a, 0x3e, 0xa9, 0x0f, 0xdc, 0x38, 0xa0, 0x12, 0xa4,
	0xd9, 0xc0, 0x3d, 0xeb, 0x34, 0x15, 0x54, 0x42, 0xe5, 0x4c, 0x2d, 0x33, 0xba, 0x2d, 0xa6, 0xea,
	0x03, 0xf7, 0xe4, 0x99, 0x91, 0x62, 0x03, 0xf7, 0xa4, 0x39, 0x09, 0x39, 0xb1, 0x52, 0xc8, 0xf2,
	0xbf, 0x87, 0x8c, 0x0f, 0x20, 0xc9, 0x2e, 0x3d, 0xa2, 0x24, 0x4b, 0xa8, 0x9c, 0xaf, 0x3e, 0x5a,
	0xc4, 0xc6, 0x59, 0xd5, 0x2f, 0x3d, 0x62, 0x84, 0x8c, 0xf6, 0x11, 0x41, 0xee, 0x39, 0x61, 0x71,
	0x9e, 0x05, 0x90, 0x6d, 0x72, 0x19, 0x26, 0x99, 0x33, 0xb8, 0x88, 0xb7, 0x21, 0x27, 0x1c, 0x9d,
	0xf5, 0x4d, 0xa7, 0x47, 0xc2, 0xaa, 0xe6, 0x8c, 0xac, 0x78, 0x7b, 0xc7, 0x9f, 0x56, 0x8b, 0x5f,
	0x63, 0x90, 0x7b, 0xd3, 0x5b, 0x1a, 0xc2, 0x06, 0xa4, 0x66, 0x7d, 0x8b, 0x8f, 0x15, 0xbd, 0x9e,
	0x43, 0xfe, 0xd4, 0x73, 0x3a, 0x4b, 0xfd, 0xae, 0x36, 0x4a, 0xe7, 0x90, 0x7f, 0x49, 0xfc, 0x16,
	0xf9, 0x7f, 0x1e, 0xbe, 0xc8, 0x90, 0x89, 0xad, 0x1f, 0x42, 0xaa, 0xc1, 0xb7, 0x28, 0xb4, 0x9f,
	0x5d, 0x3c, 0x08, 0xf3, 0xab, 0x66, 0x08, 0x08, 0xbf, 0x80, 0xac, 0x25, 0x26, 0xe4, 0x8c, 0x0d,
	0xdc, 0x28, 0x9c, 0xdd, 0xbf, 0x0f, 0x53, 0x6c, 0x08, 0xac, 0xe9, 0x23, 0xde, 0x03, 0xb9, 0x45,
	0x98, 0xb2, 0x16, 0x5a, 0x79, 0xb8, 0xc8, 0xca, 0xec, 0xe4, 0x19, 0x1c, 0xe0, 0x9c, 0xd7, 0x63,
	0xca, 0xfa, 0x72, 0x6e, 0x76, 0x5c, 0x0c, 0x0e, 0xf0, 0xdc, 0x03, 0xde, 0x4d, 0x25, 0xb3, 0x3c,
	0xf7, 0xf9, 0x96, 0x1b, 0x02, 0xe2, 0x74, 0x97, 0x77, 0x4a, 0x81, 0xe5, 0xf4, 0x7c, 0x3b, 0x0d,
	0x01, 0x1d, 0xac, 0x7f, 0xbb, 0x2a, 0x4a, 0xc3, 0xab, 0x22, 0xd2, 0x3e, 0x23, 0x48, 0x8b, 0x46,
	0xe1, 0xbd, 0x68, 0x29, 0x51, 0xb8, 0x94, 0xda, 0xf2, 0xb6, 0xc6, 0x0b, 0x89, 0xab, 0x20, 0x13,
	0xdf, 0x8f, 0xca, 0x5f, 0x9a, 0xc1, 0x26, 0xa7, 0x56, 0x3f, 0x76, 0x2d, 0xda, 0x24, 0xcd, 0x63,
	0xfe, 0x6d, 0x70, 0xe5, 0x78, 0x3d, 0xe4, 0x99, 0xf5, 0xd0, 0xbe, 0x23, 0x48, 0x9e, 0x32, 0xe2,
	0xe1, 0x27, 0x90, 0xa0, 0x5e, 0x34, 0x14, 0x77, 0xbe, 0x4b, 0x09, 0xea, 0xe1, 0xa7, 0x90, 0x6e,
	0x90, 0x0b, 0xea, 0x93, 0x28, 0x9c, 0xad, 0x19, 0x98, 0x1f, 0x73, 0xbd, 0xed, 0x58, 0x7a, 0x7d,
	0x72, 0xcc, 0x27, 0xb3, 0x29, 0x10, 0xbc, 0x0f, 0x29, 0xf3, 0x82, 0x11, 0x3f, 0x5a, 0xce, 0x3b,
	0xb1, 0x82, 0x38, 0x48, 0xf2, 0x82, 0xee, 0xec, 0x40, 0x7e, 0xfe, 0x64, 0x61, 0x80, 0xf4, 0x11,
	0xed, 0x76, 0x3b, 0xac, 0x20, 0xe1, 0x1c, 0xac, 0x1b, 0xd4, 0x71, 0x1a, 0xa6, 0x65, 0x17, 0xd0,
	0xce, 0x21, 0x40, 0x5c, 0x49, 0x9c, 0x85, 0xb5, 0xb7, 0xae, 0xed, 0xd2, 0x0f, 0x6e, 0x41, 0xe2,
	0x1f, 0xaf, 0x68, 0x58, 0xac, 0x02, 0xc2, 0x19, 0x48, 0x09, 0x31, 0xc1, 0xc5, 0xf0, 0x78, 0x15,
	0xe4, 0xda, 0xee, 0xf0, 0xa7, 0x2a, 0x0d, 0x47, 0x2a, 0xba, 0x1e, 0xa9, 0xe8, 0x66, 0xa4, 0xa2,
	0x1f, 0x23, 0x15, 0x7d, 0x1d, 0xab, 0xd2, 0xf5, 0x58, 0x95, 0x6e, 0xc6, 0xaa, 0xf4, 0x3e, 0x33,
	0x2d, 0x54, 0x23, 0x1d, 0xfe, 0x67, 0x3d, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x59, 0x6f, 0xd2,
	0x3e, 0x33, 0x07, 0x00, 0x00,
}
