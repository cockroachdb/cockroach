// Copyright 2018 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

// metric.proto requires proto2 to import io.prometheus.client.MetricType.
syntax = "proto2";
package cockroach.util.metric;
option go_package = "github.com/cockroachdb/cockroach/pkg/util/metric";

import "gogoproto/gogo.proto";
import "io/prometheus/client/metrics.proto";

// metric.LabelPair is a proxy for io.prometheus.client.LabelPair.
// io.prometheus.client.LabelPair doesn't support gogoproto.marshaler
// and gogoproto.unmarshaler which are required by gRPC. metric.LabelPair
// stores information that is similarly structured, supports the requisite
// gogoproto options, and is convertible to io.prometheus.client.LabelPair
// to satisfy PrometheusExportable's GetLabels method.
message LabelPair {
  optional string name  = 1;
  optional string value = 2;
}

// DisplayUnit describes how the metric's units should be displayed in charts.
enum Unit {
  // UNSET expresses that the metric's DisplayUnit wasn't explicitly set.
  UNSET = 0;
  // BYTES expresses that the metric's measurement is in bytes.
  BYTES = 1;
  // CONST expresses that the metric's measurement is a constant value.
  CONST = 2;
  // COUNT expresses that the metric's measurement is a count.
  COUNT = 3;
  // NANOSECONDS expresses that the metric's measurement is in nanoseconds.
  NANOSECONDS = 4;
  // PERCENT expresses that the metric's measurement is a percentage value.
  PERCENT = 5;
  // SECONDS expresses that the metric's measurement is in seconds.
  SECONDS = 6;
  // TIMESTAMP_NS expresses that the metric's measurement is a time since the
  // Unix epoch in nanoseconds.
  TIMESTAMP_NS = 7;
  // TIMESTAMP_SEC expresses that the metric's measurement is a time since the
  // Unix epoch in seconds.
  TIMESTAMP_SEC = 8;
}

// Metadata holds metadata about a metric. It must be embedded in
// each metric object. It's used to export information about the
// metric to Prometheus and for Admin UI charts.
message Metadata {
  // name is the name of the metric as if it was unlabeled. Set this to ensure
  // it gets recorded in TSDB.
  // Note: this name value is used by the metric registry to uniquely identify
  // the metric. Please ensure that it is unique across the codebase even if a
  // labeled_name is provided.
  required string name = 1 [(gogoproto.nullable) = false];
  required string help = 2 [(gogoproto.nullable) = false];
  required string measurement = 3 [(gogoproto.nullable) = false];
  required Unit unit = 4 [(gogoproto.nullable) = false];
  optional io.prometheus.client.MetricType metricType = 5 [(gogoproto.nullable) = false];
  repeated LabelPair labels = 6;

  // static_labels is a set of labels defined at compile time that are included
  // with the metric when exported at the new `/metrics` endpoint. These labels
  // will only be added if the `labeled_name` below is provided.
  repeated LabelPair static_labels = 7;
  // if a labeled_name is provided, it will be output in the /metrics endpoint
  // with the corresponding static labels.
  required string labeled_name = 8 [(gogoproto.nullable) = false];

  enum Category {
    UNSET = 0;
    CHANGEFEEDS = 1;
    CROSS_CLUSTER_REPLICATION = 2;
    DISTRIBUTED = 3;
    HARDWARE = 4;
    LOGICAL_DATA_REPLICATION = 5;
    NETWORKING = 6;
    OVERLOAD = 7;
    OVERVIEW = 8;
    QUEUES = 9;
    REPLICATION = 10;
    REQUESTS = 11;
    RUNTIME = 12;
    SQL = 13;
    STORAGE = 14;
    TTL = 15;
  }
  
  // if essential is true, the metric is required to be included in
  // a DB Console dashboard, in our public docs, and in all tsdump
  // exports.
  required bool essential = 9 [(gogoproto.nullable) = false];
  // category is the dashboard category of this metric. This is
  // required if `essential` is true.
  required Category category = 11 [(gogoproto.nullable) = false];
  // how_to_use is an extended description of how to use this metric
  // with a running cluster. This is required if `essential` is true.
  required string how_to_use = 12 [(gogoproto.nullable) = false];
}
