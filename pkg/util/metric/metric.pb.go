// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/metric/metric.proto

package metric

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	_go "github.com/prometheus/client_model/go"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DisplayUnit describes how the metric's units should be displayed in charts.
type Unit int32

const (
	// UNSET expresses that the metric's DisplayUnit wasn't explicitly set.
	Unit_UNSET Unit = 0
	// BYTES expresses that the metric's measurement is in bytes.
	Unit_BYTES Unit = 1
	// CONST expresses that the metric's measurement is a constant value.
	Unit_CONST Unit = 2
	// COUNT expresses that the metric's measurement is a count.
	Unit_COUNT Unit = 3
	// NANOSECONDS expresses that the metric's measurement is in nanoseconds.
	Unit_NANOSECONDS Unit = 4
	// PERCENT expresses that the metric's measurement is a percentage value.
	Unit_PERCENT Unit = 5
	// SECONDS expresses that the metric's measurement is in seconds.
	Unit_SECONDS Unit = 6
	// TIMESTAMP_NS expresses that the metric's measurement is a time since the
	// Unix epoch in nanoseconds.
	Unit_TIMESTAMP_NS Unit = 7
	// TIMESTAMP_SEC expresses that the metric's measurement is a time since the
	// Unix epoch in seconds.
	Unit_TIMESTAMP_SEC Unit = 8
)

var Unit_name = map[int32]string{
	0: "UNSET",
	1: "BYTES",
	2: "CONST",
	3: "COUNT",
	4: "NANOSECONDS",
	5: "PERCENT",
	6: "SECONDS",
	7: "TIMESTAMP_NS",
	8: "TIMESTAMP_SEC",
}

var Unit_value = map[string]int32{
	"UNSET":         0,
	"BYTES":         1,
	"CONST":         2,
	"COUNT":         3,
	"NANOSECONDS":   4,
	"PERCENT":       5,
	"SECONDS":       6,
	"TIMESTAMP_NS":  7,
	"TIMESTAMP_SEC": 8,
}

func (x Unit) Enum() *Unit {
	p := new(Unit)
	*p = x
	return p
}

func (x Unit) String() string {
	return proto.EnumName(Unit_name, int32(x))
}

func (x *Unit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Unit_value, data, "Unit")
	if err != nil {
		return err
	}
	*x = Unit(value)
	return nil
}

func (Unit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8d59dd1524693214, []int{0}
}

// metric.LabelPair is a proxy for io.prometheus.client.LabelPair.
// io.prometheus.client.LabelPair doesn't support gogoproto.marshaler
// and gogoproto.unmarshaler which are required by gRPC. metric.LabelPair
// stores information that is similarly structured, supports the requisite
// gogoproto options, and is convertible to io.prometheus.client.LabelPair
// to satisfy PrometheusExportable's GetLabels method.
type LabelPair struct {
	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LabelPair) Reset()         { *m = LabelPair{} }
func (m *LabelPair) String() string { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()    {}
func (*LabelPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d59dd1524693214, []int{0}
}
func (m *LabelPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LabelPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LabelPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelPair.Merge(m, src)
}
func (m *LabelPair) XXX_Size() int {
	return m.Size()
}
func (m *LabelPair) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelPair.DiscardUnknown(m)
}

var xxx_messageInfo_LabelPair proto.InternalMessageInfo

// ValueRange indicates the range of values for a metric.
type ValueRange struct {
	LowerBound *string `protobuf:"bytes,1,opt,name=lowerBound" json:"lowerBound,omitempty"`
	UpperBound *string `protobuf:"bytes,2,opt,name=upperBound" json:"upperBound,omitempty"`
	Unit       *Unit   `protobuf:"varint,3,req,name=unit,enum=cockroach.util.metric.Unit" json:"unit,omitempty"`
}

func (m *ValueRange) Reset()         { *m = ValueRange{} }
func (m *ValueRange) String() string { return proto.CompactTextString(m) }
func (*ValueRange) ProtoMessage()    {}
func (*ValueRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d59dd1524693214, []int{1}
}
func (m *ValueRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValueRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueRange.Merge(m, src)
}
func (m *ValueRange) XXX_Size() int {
	return m.Size()
}
func (m *ValueRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueRange.DiscardUnknown(m)
}

var xxx_messageInfo_ValueRange proto.InternalMessageInfo

// IndicatorInfo holds information on how to derive an indicator
// for a metric. It is embedded within the metadata field for a
// metric.
type IndicatorInfo struct {
	AggregationInfo string `protobuf:"bytes,1,req,name=aggregationInfo" json:"aggregationInfo"`
	// implementationDetails will outline details on how the metric has
	// been implemented.
	ImplementationDetails string `protobuf:"bytes,2,req,name=implementationDetails" json:"implementationDetails"`
	// limits will define the possible value range for the metric.
	Limits ValueRange `protobuf:"bytes,3,opt,name=limits" json:"limits"`
	// expected will define the reasonable value range for the metric.
	Expected ValueRange `protobuf:"bytes,4,opt,name=expected" json:"expected"`
}

func (m *IndicatorInfo) Reset()         { *m = IndicatorInfo{} }
func (m *IndicatorInfo) String() string { return proto.CompactTextString(m) }
func (*IndicatorInfo) ProtoMessage()    {}
func (*IndicatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d59dd1524693214, []int{2}
}
func (m *IndicatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndicatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndicatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndicatorInfo.Merge(m, src)
}
func (m *IndicatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *IndicatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IndicatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IndicatorInfo proto.InternalMessageInfo

// Metadata holds metadata about a metric. It must be embedded in
// each metric object. It's used to export information about the
// metric to Prometheus and for Admin UI charts.
type Metadata struct {
	Name          string         `protobuf:"bytes,1,req,name=name" json:"name"`
	Help          string         `protobuf:"bytes,2,req,name=help" json:"help"`
	Measurement   string         `protobuf:"bytes,3,req,name=measurement" json:"measurement"`
	Unit          Unit           `protobuf:"varint,4,req,name=unit,enum=cockroach.util.metric.Unit" json:"unit"`
	MetricType    _go.MetricType `protobuf:"varint,5,opt,name=metricType,enum=io.prometheus.client.MetricType" json:"metricType"`
	Labels        []*LabelPair   `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
	IndicatorInfo IndicatorInfo  `protobuf:"bytes,7,opt,name=indicatorInfo" json:"indicatorInfo"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d59dd1524693214, []int{3}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.util.metric.Unit", Unit_name, Unit_value)
	proto.RegisterType((*LabelPair)(nil), "cockroach.util.metric.LabelPair")
	proto.RegisterType((*ValueRange)(nil), "cockroach.util.metric.ValueRange")
	proto.RegisterType((*IndicatorInfo)(nil), "cockroach.util.metric.IndicatorInfo")
	proto.RegisterType((*Metadata)(nil), "cockroach.util.metric.Metadata")
}

func init() { proto.RegisterFile("util/metric/metric.proto", fileDescriptor_8d59dd1524693214) }

var fileDescriptor_8d59dd1524693214 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x6b, 0xd4, 0x50,
	0x14, 0x9d, 0x64, 0x32, 0xd3, 0xce, 0x1d, 0xdb, 0xc6, 0x47, 0x0b, 0x8f, 0x0a, 0x31, 0x0e, 0x22,
	0xc1, 0x45, 0x06, 0x06, 0x0a, 0xe2, 0x46, 0x3a, 0xd3, 0x08, 0x05, 0x27, 0x1d, 0x92, 0x54, 0xd0,
	0x8d, 0x3c, 0x33, 0xcf, 0xf4, 0x61, 0x92, 0x17, 0x92, 0x17, 0x3f, 0x16, 0x2e, 0xf4, 0x17, 0xf8,
	0xb3, 0xba, 0xec, 0xb2, 0x2b, 0xd1, 0xe9, 0x2f, 0xf0, 0x1f, 0x48, 0x3e, 0x66, 0x9a, 0x4a, 0x07,
	0x71, 0x95, 0x9b, 0x73, 0xce, 0x3d, 0xdc, 0xfb, 0xee, 0x01, 0x9c, 0x0b, 0x16, 0x0e, 0x23, 0x2a,
	0x52, 0xe6, 0xd7, 0x1f, 0x33, 0x49, 0xb9, 0xe0, 0x68, 0xcf, 0xe7, 0xfe, 0xfb, 0x94, 0x13, 0xff,
	0xcc, 0x2c, 0x34, 0x66, 0x45, 0xee, 0xef, 0x06, 0x3c, 0xe0, 0xa5, 0x62, 0x58, 0x54, 0x95, 0x78,
	0x7f, 0xc0, 0xf8, 0x30, 0x49, 0x79, 0x44, 0xc5, 0x19, 0xcd, 0xb3, 0xa1, 0x1f, 0x32, 0x1a, 0x8b,
	0xda, 0x2f, 0xab, 0x34, 0x83, 0x03, 0xe8, 0xbd, 0x20, 0x6f, 0x69, 0x38, 0x23, 0x2c, 0x45, 0x08,
	0x94, 0x98, 0x44, 0x14, 0x4b, 0xba, 0x64, 0xf4, 0x9c, 0xb2, 0x46, 0xbb, 0xd0, 0xf9, 0x40, 0xc2,
	0x9c, 0x62, 0xb9, 0x04, 0xab, 0x9f, 0xc1, 0x17, 0x80, 0x97, 0x45, 0xe1, 0x90, 0x38, 0xa0, 0x48,
	0x03, 0x08, 0xf9, 0x47, 0x9a, 0x8e, 0x79, 0x1e, 0xcf, 0xeb, 0xee, 0x06, 0x52, 0xf0, 0x79, 0x92,
	0x2c, 0xf9, 0xca, 0xa8, 0x81, 0xa0, 0x21, 0x28, 0x79, 0xcc, 0x04, 0x6e, 0xeb, 0xb2, 0xb1, 0x3d,
	0xba, 0x67, 0xde, 0xba, 0xa4, 0x79, 0x1a, 0x33, 0xe1, 0x94, 0xc2, 0xc1, 0x57, 0x19, 0xb6, 0x8e,
	0xe3, 0x39, 0xf3, 0x89, 0xe0, 0xe9, 0x71, 0xfc, 0x8e, 0x23, 0x13, 0x76, 0x48, 0x10, 0xa4, 0x34,
	0x20, 0x82, 0xf1, 0xb8, 0x80, 0xb0, 0xa4, 0xcb, 0x46, 0x6f, 0xac, 0x9c, 0xff, 0xb8, 0xdf, 0x72,
	0xfe, 0x26, 0xd1, 0x53, 0xd8, 0x63, 0x51, 0x12, 0xd2, 0x88, 0xc6, 0xa2, 0x44, 0x8f, 0xa8, 0x20,
	0x2c, 0xcc, 0xb0, 0xdc, 0xe8, 0xba, 0x5d, 0x82, 0x9e, 0x41, 0x37, 0x64, 0x11, 0x13, 0x19, 0x6e,
	0xeb, 0x92, 0xd1, 0x1f, 0x3d, 0x58, 0x33, 0xf0, 0xf5, 0x0b, 0xd5, 0x7e, 0x75, 0x1b, 0x9a, 0xc0,
	0x26, 0xfd, 0x94, 0x50, 0x5f, 0xd0, 0x39, 0x56, 0xfe, 0xcf, 0x62, 0xd5, 0x38, 0xf8, 0x2d, 0xc3,
	0xe6, 0x94, 0x0a, 0x32, 0x27, 0x82, 0x20, 0xbc, 0xba, 0xdc, 0xf5, 0xf4, 0xd5, 0xfd, 0x30, 0x28,
	0x67, 0x34, 0x4c, 0x6e, 0xec, 0x55, 0x22, 0xe8, 0x11, 0xf4, 0x23, 0x4a, 0xb2, 0x3c, 0x2d, 0x37,
	0x2c, 0x1f, 0x7f, 0x29, 0x68, 0x12, 0xe8, 0xa0, 0xbe, 0x8e, 0xf2, 0xcf, 0xeb, 0x2c, 0xed, 0x0b,
	0x39, 0x7a, 0x0e, 0x50, 0x51, 0xde, 0xe7, 0x84, 0xe2, 0x8e, 0x2e, 0x19, 0xdb, 0x23, 0xdd, 0x64,
	0x65, 0x38, 0xeb, 0x48, 0x9a, 0x55, 0x24, 0xcd, 0xe9, 0x4a, 0x57, 0x3b, 0x34, 0x3a, 0xd1, 0x13,
	0xe8, 0x86, 0x45, 0x42, 0x33, 0xdc, 0xd5, 0xdb, 0x46, 0x7f, 0xa4, 0xaf, 0x19, 0x60, 0x15, 0x63,
	0xa7, 0xd6, 0xa3, 0x19, 0x6c, 0xb1, 0x66, 0x48, 0xf0, 0x46, 0xf9, 0xd6, 0x0f, 0xd7, 0x18, 0xdc,
	0x08, 0x54, 0x3d, 0xc8, 0x4d, 0x83, 0xc7, 0xdf, 0x24, 0x50, 0x8a, 0x45, 0x51, 0x0f, 0x3a, 0xa7,
	0xb6, 0x6b, 0x79, 0x6a, 0xab, 0x28, 0xc7, 0xaf, 0x3c, 0xcb, 0x55, 0xa5, 0xa2, 0x9c, 0x9c, 0xd8,
	0xae, 0xa7, 0xca, 0x55, 0x79, 0x6a, 0x7b, 0x6a, 0x1b, 0xed, 0x40, 0xdf, 0x3e, 0xb4, 0x4f, 0x5c,
	0x6b, 0x72, 0x62, 0x1f, 0xb9, 0xaa, 0x82, 0xfa, 0xb0, 0x31, 0xb3, 0x9c, 0x89, 0x65, 0x7b, 0x6a,
	0xa7, 0xf8, 0x59, 0x32, 0x5d, 0xa4, 0xc2, 0x1d, 0xef, 0x78, 0x6a, 0xb9, 0xde, 0xe1, 0x74, 0xf6,
	0xc6, 0x76, 0xd5, 0x0d, 0x74, 0x17, 0xb6, 0xae, 0x11, 0xd7, 0x9a, 0xa8, 0x9b, 0x63, 0xe3, 0xfc,
	0x97, 0xd6, 0x3a, 0x5f, 0x68, 0xd2, 0xc5, 0x42, 0x93, 0x2e, 0x17, 0x9a, 0xf4, 0x73, 0xa1, 0x49,
	0xdf, 0xaf, 0xb4, 0xd6, 0xc5, 0x95, 0xd6, 0xba, 0xbc, 0xd2, 0x5a, 0xaf, 0xbb, 0xd5, 0x46, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x02, 0x39, 0x0a, 0x80, 0x48, 0x04, 0x00, 0x00,
}

func (m *LabelPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LabelPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValueRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unit == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("unit")
	} else {
		i = encodeVarintMetric(dAtA, i, uint64(*m.Unit))
		i--
		dAtA[i] = 0x18
	}
	if m.UpperBound != nil {
		i -= len(*m.UpperBound)
		copy(dAtA[i:], *m.UpperBound)
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.UpperBound)))
		i--
		dAtA[i] = 0x12
	}
	if m.LowerBound != nil {
		i -= len(*m.LowerBound)
		copy(dAtA[i:], *m.LowerBound)
		i = encodeVarintMetric(dAtA, i, uint64(len(*m.LowerBound)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndicatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndicatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndicatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Expected.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetric(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Limits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetric(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	i -= len(m.ImplementationDetails)
	copy(dAtA[i:], m.ImplementationDetails)
	i = encodeVarintMetric(dAtA, i, uint64(len(m.ImplementationDetails)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AggregationInfo)
	copy(dAtA[i:], m.AggregationInfo)
	i = encodeVarintMetric(dAtA, i, uint64(len(m.AggregationInfo)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IndicatorInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMetric(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMetric(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	i = encodeVarintMetric(dAtA, i, uint64(m.MetricType))
	i--
	dAtA[i] = 0x28
	i = encodeVarintMetric(dAtA, i, uint64(m.Unit))
	i--
	dAtA[i] = 0x20
	i -= len(m.Measurement)
	copy(dAtA[i:], m.Measurement)
	i = encodeVarintMetric(dAtA, i, uint64(len(m.Measurement)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Help)
	copy(dAtA[i:], m.Help)
	i = encodeVarintMetric(dAtA, i, uint64(len(m.Help)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintMetric(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMetric(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetric(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LabelPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovMetric(uint64(l))
	}
	return n
}

func (m *ValueRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerBound != nil {
		l = len(*m.LowerBound)
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.UpperBound != nil {
		l = len(*m.UpperBound)
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.Unit != nil {
		n += 1 + sovMetric(uint64(*m.Unit))
	}
	return n
}

func (m *IndicatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AggregationInfo)
	n += 1 + l + sovMetric(uint64(l))
	l = len(m.ImplementationDetails)
	n += 1 + l + sovMetric(uint64(l))
	l = m.Limits.Size()
	n += 1 + l + sovMetric(uint64(l))
	l = m.Expected.Size()
	n += 1 + l + sovMetric(uint64(l))
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovMetric(uint64(l))
	l = len(m.Help)
	n += 1 + l + sovMetric(uint64(l))
	l = len(m.Measurement)
	n += 1 + l + sovMetric(uint64(l))
	n += 1 + sovMetric(uint64(m.Unit))
	n += 1 + sovMetric(uint64(m.MetricType))
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovMetric(uint64(l))
		}
	}
	l = m.IndicatorInfo.Size()
	n += 1 + l + sovMetric(uint64(l))
	return n
}

func sovMetric(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueRange) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LowerBound = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.UpperBound = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var v Unit
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Unit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unit = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("unit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndicatorInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndicatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndicatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplementationDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImplementationDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Limits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Expected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("aggregationInfo")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("implementationDetails")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Help", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Help = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measurement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Measurement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			m.Unit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unit |= Unit(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricType", wireType)
			}
			m.MetricType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetricType |= _go.MetricType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &LabelPair{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndicatorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IndicatorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("help")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("measurement")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("unit")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetric
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetric
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetric        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetric = fmt.Errorf("proto: unexpected end of group")
)
