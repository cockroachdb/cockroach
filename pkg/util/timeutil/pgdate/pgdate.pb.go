// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/timeutil/pgdate/pgdate.proto

package pgdate

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Order refers to the Order component of a DateStyle.
type Order int32

const (
	Order_MDY Order = 0
	Order_DMY Order = 1
	Order_YMD Order = 2
)

var Order_name = map[int32]string{
	0: "MDY",
	1: "DMY",
	2: "YMD",
}

var Order_value = map[string]int32{
	"MDY": 0,
	"DMY": 1,
	"YMD": 2,
}

func (x Order) String() string {
	return proto.EnumName(Order_name, int32(x))
}

func (Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1038cae594af4e85, []int{0}
}

// Style refers to the Style component of a DateStyle.
type Style int32

const (
	Style_ISO      Style = 0
	Style_SQL      Style = 1
	Style_POSTGRES Style = 2
	Style_GERMAN   Style = 3
)

var Style_name = map[int32]string{
	0: "ISO",
	1: "SQL",
	2: "POSTGRES",
	3: "GERMAN",
}

var Style_value = map[string]int32{
	"ISO":      0,
	"SQL":      1,
	"POSTGRES": 2,
	"GERMAN":   3,
}

func (x Style) String() string {
	return proto.EnumName(Style_name, int32(x))
}

func (Style) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1038cae594af4e85, []int{1}
}

// DateStyle refers to the PostgreSQL DateStyle allowed variables.
type DateStyle struct {
	// Style refers to the style to print output dates.
	Style Style `protobuf:"varint,1,opt,name=style,proto3,enum=cockroach.util.timeutil.pgdate.Style" json:"style,omitempty"`
	// Order refers to the order of day, month and year components.
	Order Order `protobuf:"varint,2,opt,name=order,proto3,enum=cockroach.util.timeutil.pgdate.Order" json:"order,omitempty"`
}

func (m *DateStyle) Reset()         { *m = DateStyle{} }
func (m *DateStyle) String() string { return proto.CompactTextString(m) }
func (*DateStyle) ProtoMessage()    {}
func (*DateStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_1038cae594af4e85, []int{0}
}
func (m *DateStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DateStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DateStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateStyle.Merge(m, src)
}
func (m *DateStyle) XXX_Size() int {
	return m.Size()
}
func (m *DateStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_DateStyle.DiscardUnknown(m)
}

var xxx_messageInfo_DateStyle proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.util.timeutil.pgdate.Order", Order_name, Order_value)
	proto.RegisterEnum("cockroach.util.timeutil.pgdate.Style", Style_name, Style_value)
	proto.RegisterType((*DateStyle)(nil), "cockroach.util.timeutil.pgdate.DateStyle")
}

func init() { proto.RegisterFile("util/timeutil/pgdate/pgdate.proto", fileDescriptor_1038cae594af4e85) }

var fileDescriptor_1038cae594af4e85 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x2d, 0xc9, 0xcc,
	0xd1, 0x2f, 0xc9, 0xcc, 0x4d, 0x05, 0x33, 0x0a, 0xd2, 0x53, 0x12, 0x4b, 0x52, 0xa1, 0x94, 0x5e,
	0x41, 0x51, 0x7e, 0x49, 0xbe, 0x90, 0x5c, 0x72, 0x7e, 0x72, 0x76, 0x51, 0x7e, 0x62, 0x72, 0x86,
	0x1e, 0x48, 0x8d, 0x1e, 0x4c, 0xb1, 0x1e, 0x44, 0x95, 0x52, 0x2b, 0x23, 0x17, 0xa7, 0x4b, 0x62,
	0x49, 0x6a, 0x70, 0x49, 0x65, 0x4e, 0xaa, 0x90, 0x35, 0x17, 0x6b, 0x31, 0x88, 0x21, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x67, 0xa4, 0xaa, 0x87, 0x5f, 0xb7, 0x1e, 0x58, 0x57, 0x10, 0x44, 0x0f, 0x48,
	0x73, 0x7e, 0x51, 0x4a, 0x6a, 0x91, 0x04, 0x13, 0x71, 0x9a, 0xfd, 0x41, 0x8a, 0x83, 0x20, 0x7a,
	0xb4, 0x94, 0xb8, 0x58, 0xc1, 0x7c, 0x21, 0x76, 0x2e, 0x66, 0x5f, 0x97, 0x48, 0x01, 0x06, 0x10,
	0xc3, 0xc5, 0x37, 0x52, 0x80, 0x11, 0xc4, 0x88, 0xf4, 0x75, 0x11, 0x60, 0xd2, 0x32, 0xe6, 0x62,
	0x85, 0x38, 0x93, 0x9d, 0x8b, 0xd9, 0x33, 0xd8, 0x1f, 0xa2, 0x26, 0x38, 0xd0, 0x47, 0x80, 0x51,
	0x88, 0x87, 0x8b, 0x23, 0xc0, 0x3f, 0x38, 0xc4, 0x3d, 0xc8, 0x35, 0x58, 0x80, 0x49, 0x88, 0x8b,
	0x8b, 0xcd, 0xdd, 0x35, 0xc8, 0xd7, 0xd1, 0x4f, 0x80, 0xd9, 0x49, 0xe3, 0xc4, 0x43, 0x39, 0x86,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0xbc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x0d,
	0xe2, 0x9e, 0x24, 0x36, 0x70, 0x88, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x4f, 0x44,
	0x0b, 0x56, 0x01, 0x00, 0x00,
}

func (m *DateStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DateStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != 0 {
		i = encodeVarintPgdate(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x10
	}
	if m.Style != 0 {
		i = encodeVarintPgdate(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPgdate(dAtA []byte, offset int, v uint64) int {
	offset -= sovPgdate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DateStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Style != 0 {
		n += 1 + sovPgdate(uint64(m.Style))
	}
	if m.Order != 0 {
		n += 1 + sovPgdate(uint64(m.Order))
	}
	return n
}

func sovPgdate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPgdate(x uint64) (n int) {
	return sovPgdate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DateStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPgdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPgdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= Style(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPgdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPgdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPgdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPgdate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPgdate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPgdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPgdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPgdate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPgdate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPgdate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPgdate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPgdate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPgdate = fmt.Errorf("proto: unexpected end of group")
)
