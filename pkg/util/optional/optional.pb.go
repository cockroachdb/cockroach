// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/optional/optional.proto

package optional

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// IntValue stores an optional unsigned integer value. Optional means that it
// may not be set, and one can differentiate between being unset and having a
// value of zero.
type Uint struct {
	// The underlying value is the logical value plus 1, so that zero remains the
	// special case of having no value.
	ValuePlusOne uint64 `protobuf:"varint,1,opt,name=value_plus_one,json=valuePlusOne" json:"value_plus_one"`
}

func (m *Uint) Reset()      { *m = Uint{} }
func (*Uint) ProtoMessage() {}
func (*Uint) Descriptor() ([]byte, []int) {
	return fileDescriptor_optional_3292981bb980ec5b, []int{0}
}
func (m *Uint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Uint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint.Merge(dst, src)
}
func (m *Uint) XXX_Size() int {
	return m.Size()
}
func (m *Uint) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint.DiscardUnknown(m)
}

var xxx_messageInfo_Uint proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Uint)(nil), "cockroach.util.optional.Uint")
}
func (m *Uint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintOptional(dAtA, i, uint64(m.ValuePlusOne))
	return i, nil
}

func encodeVarintOptional(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Uint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovOptional(uint64(m.ValuePlusOne))
	return n
}

func sovOptional(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOptional(x uint64) (n int) {
	return sovOptional(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Uint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOptional
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuePlusOne", wireType)
			}
			m.ValuePlusOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValuePlusOne |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOptional(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOptional
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOptional(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOptional
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOptional
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOptional
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOptional
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOptional(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOptional = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOptional   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("util/optional/optional.proto", fileDescriptor_optional_3292981bb980ec5b)
}

var fileDescriptor_optional_3292981bb980ec5b = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x2d, 0xc9, 0xcc,
	0xd1, 0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x4b, 0x44, 0x30, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0xc4, 0x93, 0xf3, 0x93, 0xb3, 0x8b, 0xf2, 0x13, 0x93, 0x33, 0xf4, 0x40, 0xea, 0xf4, 0x60,
	0xd2, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x35, 0xfa, 0x20, 0x16, 0x44, 0xb9, 0x92, 0x05,
	0x17, 0x4b, 0x68, 0x66, 0x5e, 0x89, 0x90, 0x16, 0x17, 0x5f, 0x59, 0x62, 0x4e, 0x69, 0x6a, 0x7c,
	0x41, 0x4e, 0x69, 0x71, 0x7c, 0x7e, 0x5e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x8b, 0x13, 0xcb,
	0x89, 0x7b, 0xf2, 0x0c, 0x41, 0x3c, 0x60, 0xb9, 0x80, 0x9c, 0xd2, 0x62, 0xff, 0xbc, 0x54, 0x2b,
	0x96, 0x19, 0x0b, 0xe4, 0x19, 0x9c, 0xb4, 0x4e, 0x3c, 0x94, 0x63, 0x38, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x1b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x38, 0x60, 0x76, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0xcd, 0x23, 0xa6, 0xb3, 0x00, 0x00, 0x00,
}
