// This template go file populated and run by reports.sh.
package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"

	"{tmpl-full-pkg}"
)

func main() {
	err := writeDot(os.Args[1])
	if err == nil {
		err = writeReport(os.Args[2])
	}
	if err != nil {
		fmt.Fprint(os.Stderr, err.Error())
		os.Exit(1)
	}
}

func writeDot(fName string) error {
	f, err := os.OpenFile(fName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}

	writeHeader(f)
	fmt.Fprintf(f, "// To generate a .png file, run:\n" +
    "// brew install cairo pango\n" +
    "// brew install graphviz --with-pango\n" +
    "// dot -Tpng %s -o %s.png\".\n\n" +
    "// The Pango/Cairo renderer is needed for rendering our HTML labels.\n",
		fName, strings.TrimSuffix(fName, filepath.Ext(fName)))
	{tmpl-base-pkg}.{tmpl-type}.WriteDotGraphString(f, "{tmpl-start-state}")
	return f.Close()
}

func writeReport(fName string) error {
	f, err := os.OpenFile(fName, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}

	writeHeader(f)
	fmt.Fprintln(f)
	{tmpl-base-pkg}.{tmpl-type}.WriteReport(f)
	return f.Close()
}

func writeHeader(w io.Writer) {
	fmt.Fprintf(w, "// Code generated by %q; DO NOT EDIT.\n", os.Args[3])
}
