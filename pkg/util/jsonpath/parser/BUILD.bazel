load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

sh_binary(
    name = "jsonpath-gen",
    srcs = ["//pkg/sql/lexbase:sql-gen.sh"],
)

# Define the target to auto-generate jsonpath.go from the grammar file.
genrule(
    name = "jsonpath-goyacc",
    srcs = [
        "jsonpath.y",
    ],
    outs = ["jsonpath.go"],
    cmd = """
    export GOPATH=/nonexist-gopath
      $(location :jsonpath-gen) $(location jsonpath.y) jsonpath ""\
          $(location jsonpath.go) $(location @org_golang_x_tools//cmd/goyacc)
    """,
    tools = [
        ":jsonpath-gen",
        "@org_golang_x_tools//cmd/goyacc",
    ],
    visibility = ["//visibility:public"],
)

go_library(
    name = "parser",
    srcs = [
        "jsonpath.go",
        "lexer.go",
        "parse.go",
    ],
    importpath = "github.com/cockroachdb/cockroach/pkg/util/jsonpath/parser",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/sql/parser",
        "//pkg/sql/parser/statements",
        "//pkg/sql/pgwire/pgcode",
        "//pkg/sql/pgwire/pgerror",
        "//pkg/sql/scanner",
        "//pkg/sql/sem/tree",
        "//pkg/util/errorutil/unimplemented",
        "//pkg/util/json",  # keep
        "//pkg/util/jsonpath",
        "@com_github_cockroachdb_errors//:errors",
    ],
)

exports_files(
    [
        "jsonpath.y",
    ],
    visibility = ["//visibility:public"],
)

go_test(
    name = "parser_test",
    srcs = ["parser_test.go"],
    data = glob(["testdata/**"]),
    deps = [
        ":parser",
        "//pkg/testutils/datapathutils",
        "//pkg/testutils/sqlutils",
        "@com_github_cockroachdb_datadriven//:datadriven",
    ],
)
