# Walk through the basics of the datadriven syntax. We initialize an elastic
# CPU granter with an initial limit of 25% and default parameters.
init limit=25%
----

params
----
ewma-c            = 0.30
target-p99        = 1ms
min-util          = 5.00%
max-util          = 25.00%
delta             = 0.10%
factor            = 2.00
min-util-fraction = 90.00%

# We create a latency profile over time manually (first graph plotted below).
# We also start of a slowly increasing (+2% of limit every tick, where limit is
# from 1 tick ago). We later increase the rate of elastic work growth (+8% per
# tick) until it reaches 100% of the limit. Later it's reduced to 90% of the
# limit for a while, after which elastic work decreases at a rate of 10% per
# tick.
tick
p99=1.2ms ticks=5 util-fraction=+0.02 util-lag=1
p99=1.1ms ticks=5
p99=1ms   ticks=5
p99=1.2ms ticks=5
p99=950us ticks=5
p99=850us ticks=5 util-fraction=+0.08
p99=750us ticks=5
p99=650us ticks=5
p99=950us ticks=5
p99=850us ticks=5
p99=750us ticks=5
p99=950us ticks=5
p99=850us ticks=5
p99=750us ticks=5 util-fraction=0.9
p99=650us ticks=5
p99=950us ticks=5
p99=1.1ms ticks=5
p99=1050us ticks=5
p99=1150us ticks=5
p99=1.1ms ticks=5
p99=1050us ticks=5
p99=1150us ticks=5 util-fraction=-0.1
p99=850us ticks=5
p99=750us ticks=5
p99=850us ticks=5
p99=750us ticks=5
p99=850us ticks=5
p99=750us ticks=5
p99=850us ticks=5
p99=750us ticks=5
----

# We should observe a few things. We don't start decreasing the elastic CPU
# limit until the utilization crosses the min-util value (5%). We also only
# decrease the limit if the scheduling latency is higher than the target
# latency. If the latency is lower, and elastic work approaches the limit, we
# slowly start increasing the limit. We do so until we hit the maximum allowed
# (25%) at which point we stay there. If scheduling latency increases again,
# the limit is reduced which in turn reduces the utilization. If there's no
# longer any elastic work in the system, the limit stays where it last was.
plot width=70 height=20
----
----
 1200 ┼─╮    ╭─╮
 1172 ┤ │    │ │
 1145 ┤ ╰╮   │ │                                ╭─╮    ╭─╮
 1118 ┤  │   │ │                                │ │    │ │
 1090 ┤  ╰─╮ │ ╰╮                           ╭─╮ │ ╰─╮  │ │
 1062 ┤    │ │  │                          ╭╯ │ │   ╰╮ │ │
 1035 ┤    │ │  │                          │  ╰─╯    ╰─╯ │
 1008 ┤    │ │  │                          │             │
  980 ┼─────────────────────────────────────────────────────────────────────
  952 ┤         ╰─╮      ╭─╮    ╭─╮      ╭─╯             │
  925 ┤           │      │ │    │ │      │               │
  898 ┤           │      │ │    │ │      │               │
  870 ┤           │      │ │    │ │      │               │
  842 ┤           ╰─╮    │ ╰─╮  │ ╰─╮    │               ╰─╮  ╭─╮  ╭─╮ ╭─╮
  815 ┤             │    │   │  │   │    │                 │  │ │  │ │ │ │
  788 ┤             │    │   │  │   │    │                 ╰╮ │ │ ╭╯ │ │ │
  760 ┤             │    │   ╰╮ │   ╰╮   │                  │ │ │ │  │ │ ╰╮
  732 ┤             ╰─╮  │    ╰─╯    ╰─╮ │                  ╰─╯ ╰─╯  ╰─╯  ╰─
  705 ┤               │  │             │ │
  678 ┤               ╰╮ │             │ │
  650 ┤                ╰─╯             ╰─╯
                           p99 scheduler latencies (μs)


 25.0 ┼──────╮              ╭╭──────╮────────╮
 23.8 ┤      ╰──╮     ╭╭─────╯      │        ╰──╮
 22.5 ┤         ╰────╭─╯            ╰─────────╮ ╰──╮
 21.2 ┤             ╭╯                        ╰──╮ ╰──╮
 20.0 ┤             │                            ╰───╮╰──╮
 18.8 ┤             │                                ╰─╮ ╰──────────────────
 17.5 ┤            ╭╯                                  │
 16.2 ┤            │                                   │
 15.0 ┤            │                                   ╰╮
 13.8 ┤           ╭╯                                    │
 12.5 ┤           │                                     │
 11.2 ┤           │                                     │
 10.0 ┤         ╭─╯                                     ╰╮
  8.8 ┤        ╭╯                                        │
  7.5 ┤      ╭─╯                                         │
  6.2 ┤     ╭╯                                           │
  5.0 ┤    ╭╯                                            ╰╮
  3.8 ┤   ╭╯                                              │
  2.5 ┤  ╭╯                                               │
  1.2 ┤ ╭╯                                                ╰╮
  0.0 ┼─╯                                                  ╰────────────────
                       elastic cpu utilization and limit (%)
----
----

# Manually specifying latencies can be cumbersome. These tests also support an
# 'auto' mode, where you can specify a "set-point" elastic CPU % (i.e. if
# utilization is higher than that % scheduling latency is higher than the
# target threshold, and vice versa) and a number of ticks to simulate.
#
# Let's first start off the workload, initially at 0% but increasing at a rate
# of 1% of limit per tick, looking at the limit from 10 ticks ago.
tick
p99=950ms ticks=1 util-fraction=0.0
p99=1ms ticks=1 util-fraction=+0.01 util-lag=10
----

# The steady state is going to hover around 13.8% of elastic CPU work. Let's
# simulate for 350 ticks.
auto set-point=13.8% ticks=350 m=10 c=10
----

# We see that we end up roughly where we want -- a limit of 13.8%. The
# jaggedness in latencies/limit is a result of the controller trying to
# continually adjust around the right limit.
plot width=70 height=20
----
----
 1200 ┼╮
 1172 ┤│
 1145 ┤│             ╭╮
 1118 ┤│           ╭╮││
 1090 ┤╰─╮         ││││
 1062 ┤  │       ╭╮││││
 1035 ┤  │       │╰╯╰╯│     ╭────╮
 1008 ┤  │       │    │    ╭╯    ╰╮     ╭──╮  ╭╮   ╭╮╭╮           ╭╮╭╮╭╮
  980 ┼─────────────────────────────────────────────────────────────────────
  952 ┤  ╰╮ ╭╮╭╮ │    │    │
  925 ┤   │ ││││ │    │    │
  898 ┤   │ ││││ │    │    │
  870 ┤   │ ││││ │    │    │
  842 ┤   ╰╮││││ │    │╭─╮ │
  815 ┤    │││││ │    ││ │ │
  788 ┤    │││││ │    ││ │ │
  760 ┤    │││││ │    ││ │ │
  732 ┤    ││╰╯╰╮│    ╰╯ ╰─╯
  705 ┤    ││   ││
  678 ┤    ││   ││
  650 ┤    ╰╯   ╰╯
                           p99 scheduler latencies (μs)


 25.0 ┼─╮    ╭─╮──╮
 23.8 ┤ ╰╮ ╭─╯ │  ╰╮
 22.5 ┤  ╰─│   ╰──╮╰╮
 21.2 ┤    │      ╰╮╰╮
 20.0 ┤   ╭╯       ╰╮│
 18.8 ┤   │         ╰╮─────────╮
 17.5 ┤   │          │         ╰╮
 16.2 ┤   │          │          ╰╮
 15.0 ┤   │          │           ╰╮                                        ╭
 13.8 ┤   │          │            ╰───╮╭─╭─────────────────────────────────╯
 12.5 ┤   │          │                ╰╯╭╯       ╰╯         ╰╯
 11.2 ┤   │          │                ╭─╯
 10.0 ┤  ╭╯          │               ╭╯
  8.8 ┤  │           │            ╭──╯
  7.5 ┤  │           ╰╮         ╭─╯
  6.2 ┤ ╭╯            │        ╭╯
  5.0 ┤ │             │       ╭╯
  3.8 ┤╭╯             │      ╭╯
  2.5 ┤│              │      │
  1.2 ┤│              │     ╭╯
  0.0 ┼╯              ╰─────╯
                       elastic cpu utilization and limit (%)
----
----

# vim:ft=sh
