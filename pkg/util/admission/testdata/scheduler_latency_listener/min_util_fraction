# Explore how min-util-fraction can make for a controller with a slow rise or
# altogether unreactive when the limit is adjusted down far too low. The
# observed utilization value used in the controller is not smoothed,
# - Unreactive: Consider if the limit used was something like 1% in an 8vCPU
#   machine. The burst capacity of the token bucket = 1% * 8s = 80ms. If we're
#   relying on observing 90% (default min-util-fraction) of that value being in
#   use, i.e. 72ms to have been acquired by elastic work before granting more
#   CPU, this is simply not possible when the smallest unit of acquisition is
#   larger, say 100ms.
# - Slow-rise: Even if the limit is slightly higher, since the controller uses a
#   non-smoothed value, unless we sample right when some work is being done,
#   we're not going to react.
init limit=25%
----

params min-util=1%
----
ewma-c            = 0.30
target-p99        = 1ms
min-util          = 1.00%
max-util          = 25.00%
delta             = 0.10%
factor            = 2.00
min-util-fraction = 90.00%

# Set up a workload that increases to 80% of the limit and stays there.
tick
p99=1ms ticks=8 util-fraction=+0.1 util-lag=5
p99=1ms ticks=1 util-fraction=0.8 util-lag=5
----

# Drive the elastic limit to the floor.
auto set-point=1.0% ticks=200
----

# Try to drive it back up; set util-fraction > min-util-fraction.
tick
p99=1ms ticks=1 util-fraction=0.95
----

auto set-point=25.0% ticks=350 m=20 c=80
----

# The slow-rise at the start is because at the start the deltas added to the
# elastic CPU limit are a large fraction of total limit at that point; later on
# the deltas are a smaller fraction. Also note that the utilization tracks
# util-fraction of the limit from util-lag ticks ago. Put together, at the
# start when there's a bump in the limit, it takes a while for the utilization
# to ramp up the min-util-fraction needed for the next bump. As the deltas
# become a smaller fraction of the limit thus far, it's more likely that the
# utilization increase that drove the last bump also satisfies the
# min-utilization-fraction for the next bump, so the limit increases faster.
plot width=70 height=20
----
----
 1616 ┤ ╭╮
 1559 ┤ ││
 1501 ┤ │╰╮╭╮
 1444 ┤ │ │││
 1386 ┤ │ ╰╯│╭╮ ╭╮
 1329 ┤ │   │││ ││
 1271 ┤ │   ╰╯│╭╯│╭╮
 1214 ┤ │     ││ │││
 1156 ┤ │     ╰╯ ╰╯│
 1099 ┤ │          │╭─╮   ╭╮ ╭╮
 1041 ┤ │          ╰╯ ╰─╮ ││ ││                                          ╭╮
  984 ┼─────────────────────────────────────────────────────────────────────
  926 ┤                 ╰╮││╭╯│││                                  ╭──╯╰╯ ╰─
  869 ┤                  ╰╯╰╯ ╰╯│                           ╭╮ ╭─╮ │
  811 ┤                         │                           ││ │ ╰─╯
  754 ┤                         ╰╮                       ╭──╯╰─╯
  696 ┤                          │            ╭╮     ╭─╮ │
  639 ┤                          │     ╭╮     │╰─────╯ ╰─╯
  582 ┤                          │ ╭╮ ╭╯│╭───╮│
  524 ┤                          │╭╯╰─╯ ╰╯   ╰╯
  467 ┤                          ╰╯
                           p99 scheduler latencies (μs)


 25.0 ┼─╮                                                                 ╭─
 23.8 ┤ ╰╮                                                              ╭─╭─
 22.5 ┤  ╰╮                                                           ╭─╭─╯
 21.2 ┤   │                                                          ╭╯╭╯
 20.0 ┤╭─╮╰╮                                                       ╭─╭─╯
 18.8 ┤│ ╰╮╰╮                                                     ╭╯╭╯
 17.5 ┤│  ╰╮╰╮                                                  ╭─╭─╯
 16.2 ┤│   ╰╮│                                                 ╭╭─╯
 15.0 ┤│    ╰╮╮                                              ╭─╭╯
 13.8 ┤│     ╰╮╮                                           ╭─╭─╯
 12.5 ┤│      ╰╮╮                                         ╭╭─╯
 11.2 ┤│       ╰╮                                       ╭─╭╯
 10.0 ┤│        ╰╮                                     ╭╭─╯
  8.8 ┤│         ╰╮                                  ╭╭─╯
  7.5 ┤│          │╮                               ╭╭─╯
  6.2 ┤│          ╰╮╮                            ╭╭─╯
  5.0 ┤│           ╰╮                         ╭╭──╯
  3.8 ┤│            ╰╮                    ╭╭───╯
  2.5 ┤│             ╰─╮             ╭╭────╯
  1.2 ┤│              ╰╰──────────────╯
  0.0 ┼╯
                       elastic cpu utilization and limit (%)
----
----

# vim:ft=sh
