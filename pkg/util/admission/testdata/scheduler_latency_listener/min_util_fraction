# Explore how min-util-fraction can make for a controller with a slow rise or
# altogether unreactive when the limit is adjusted down far too low. The
# observed utilization value used in the controller is not smoothed,
# - Unreactive: Consider if the limit used was something like 1% in an 8vCPU
#   machine. The burst capacity of the token bucket = 1% * 8s = 80ms. If we're
#   relying on observing 90% (default min-util-fraction) of that value being in
#   use, i.e. 72ms to have been acquired by elastic work before granting more
#   CPU, this is simply not possible when the smallest unit of acquisition is
#   larger, say 100ms.
# - Slow-rise: Even if the limit is slightly higher, since the controller uses a
#   non-smoothed value, unless we sample right when some work is being done,
#   we're not going to react.
init limit=25%
----

params min-util=1%
----
target-p99       = 1ms
min-util         = 1.00%
max-util         = 75.00%
inactive-util    = 19.50%
adjustment-delta = 0.10%
factor           = 2.00
inactive-factor  = 0.25

# Set up a workload that increases to 80% of the limit and stays there.
tick
p99=1ms ticks=8 util-fraction=+0.1 util-lag=5
p99=1ms ticks=1 util-fraction=0.8 util-lag=5
----

# Drive the elastic limit to the floor.
auto set-point=1.0% ticks=200
----

# Try to drive it back up; set util-fraction > min-util-fraction.
tick
p99=1ms ticks=1 util-fraction=0.95
----

auto set-point=25.0% ticks=350 m=20 c=80
----

# The slow-rise at the start is because at the start the deltas added to the
# elastic CPU limit are a large fraction of total limit at that point; later on
# the deltas are a smaller fraction. Also note that the utilization tracks
# util-fraction of the limit from util-lag ticks ago. Put together, at the
# start when there's a bump in the limit, it takes a while for the utilization
# to ramp up the min-util-fraction needed for the next bump. As the deltas
# become a smaller fraction of the limit thus far, it's more likely that the
# utilization increase that drove the last bump also satisfies the
# min-utilization-fraction for the next bump, so the limit increases faster.
plot width=70 height=20
----
----
 1621 ┤ ╭╮
 1564 ┤ ││
 1508 ┤ ││ ╭╮
 1451 ┤ │╰╮││
 1394 ┤ │ │││╭╮
 1338 ┤ │ ╰╯│││ ╭╮
 1281 ┤ │   │││╭╯│
 1224 ┤ │   ╰╯││ │╭╮
 1168 ┤ │     ╰╯ │││
 1111 ┤ │        ╰╯│╭╮     ╭╮
 1055 ┤ │          ╰╯╰─╮  ╭╯╰╮
  998 ┼─────────────────────────────────────────────────────────────────────
  941 ┤                 │ │  │ ╭╮                        ╭─╮││ │╰╮ │ ╰╯╰╯ ╰╮
  885 ┤                 ╰╮│  ╰╮││                    ╭─╮ │ ╰╯╰─╯ ╰─╯       ╰
  828 ┤                  ╰╯   ╰╯│             ╭╮╭╮ ╭─╯ ╰─╯
  771 ┤                         │             │╰╯╰─╯
  715 ┤                         ╰╮     ╭╮   ╭╮│
  658 ┤                          │    ╭╯│╭──╯╰╯
  601 ┤                          │ ╭╮ │ ╰╯
  545 ┤                          │╭╯╰─╯
  488 ┤                          ╰╯
                           p99 scheduler latencies (μs)


 25.2 ┼─╮
 23.9 ┤ ╰╮                                                      ╭───────────
 22.6 ┤  ╰╮                                              ╭──────╭───────────
 21.4 ┤   │                                             ╭╯╭─────╯
 20.1 ┤╭─╮╰╮                                          ╭─╭─╯
 18.9 ┤│ ╰╮╰╮                                        ╭╯╭╯
 17.6 ┤│  ╰╮╰╮                                     ╭─╭─╯
 16.4 ┤│   ╰╮│                                    ╭╭─╯
 15.1 ┤│    ╰╮╮                                 ╭─╭╯
 13.8 ┤│     ╰╮╮                               ╭╭─╯
 12.6 ┤│      ╰╮╮                            ╭─╭╯
 11.3 ┤│       ╰╮╮                          ╭╭─╯
 10.1 ┤│        ╰╮                        ╭╭─╯
  8.8 ┤│         ╰╮                     ╭─╭╯
  7.5 ┤│          ╰╮                   ╭╭─╯
  6.3 ┤│           ╰╮                ╭╭─╯
  5.0 ┤│            ╰╮              ╭╭╯
  3.8 ┤│             ╰╮           ╭╭─╯
  2.5 ┤│              ╰─╮╮       ╭╭╯
  1.3 ┤│                ╰─────────╯
  0.0 ┼╯
                       elastic cpu utilization and limit (%)
----
----

# vim:ft=sh
