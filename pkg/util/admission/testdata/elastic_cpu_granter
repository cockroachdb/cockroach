# Walk through the basics of this test. We initialize a granter with a default
# limit of 25% CPU limit on an 8-core machine.
init
----
rate-limiter:    refill=2s/s burst=2s available=2s across 8 procs
metrics/granter: limit=25.00% utilization=0.00%


# We can muck with the utilization limits directly.
set-utilization-limit limit=50% print
----
rate-limiter:    refill=4s/s burst=4s available=4s across 8 procs
metrics/granter: limit=50.00% utilization=0.00%

# We can try and obtain CPU time, like requests would, and observe how the
# underlying rate limiter is affected. Since there's enough quota, we're
# granted admission. Ensure that the underlying metrics and available quota
# make sense.
try-get duration=4s print
----
granted:         true
rate-limiter:    refill=4s/s burst=4s available=0s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%

# If we try and grant some more we'll be unable to.
try-get duration=1s print
----
granted:         false
rate-limiter:    refill=4s/s burst=4s available=0s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%

# We can move time forward, refilling some quota back into the pool.
advance duration=250ms print
----
rate-limiter:    refill=4s/s burst=4s available=1s across 8 procs
metrics/granter: limit=50.00% utilization=37.50%

# We should now be able to get admission.
try-get duration=1s print
----
granted:         true
rate-limiter:    refill=4s/s burst=4s available=0s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%

# We should be able to go into debt, without it messing with granter
# statistics. This happens when requests end up using more than they originally
# requested.
took-without-permission duration=1s print
----
rate-limiter:    refill=4s/s burst=4s available=-1s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%

# Going into debt penalizes future requests.
try-get duration=1s
----
granted:         false

advance duration=500ms print
----
rate-limiter:    refill=4s/s burst=4s available=1s across 8 procs
metrics/granter: limit=50.00% utilization=37.50%

try-get duration=1s print
----
granted:         true
rate-limiter:    refill=4s/s burst=4s available=0s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%

# Requests that use less quota than originally requested are able to return the
# unused portion back to the granter. If there are no requests waiting, no
# grant forwarding occurs.
return-grant duration=1s print
----
rate-limiter:    refill=4s/s burst=4s available=1s across 8 procs
metrics/granter: limit=50.00% utilization=37.50%
requester:       has-waiting-requests=false

# The granter periodically checks for waiters, trying to grant to them. There
# still isn't any.
try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=1s across 8 procs
metrics/granter: limit=50.00% utilization=37.50%
requester:       has-waiting-requests=false

# Set up a requester that wants 250ms out of 1s available.
requester has-waiting-requests=true duration=250ms
----

# Granting now should forward it to the requester just fine.
try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=750ms across 8 procs
metrics/granter: limit=50.00% utilization=40.62%
requester:       has-waiting-requests=true granted=250ms

# Set up another requester wanting slightly more than what's available.
requester has-waiting-requests=true duration=800ms
----

# It's also granted admission, though putting the quota pool into debt (and
# full utilization).
try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=-50ms across 8 procs
metrics/granter: limit=50.00% utilization=50.00%
requester:       has-waiting-requests=true granted=800ms

# Similar to before, subsequent requests are penalized.
requester has-waiting-requests=true duration=150ms
----

try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=-50ms across 8 procs
metrics/granter: limit=50.00% utilization=50.00%
requester:       has-waiting-requests=true

advance duration=50ms print
----
rate-limiter:    refill=4s/s burst=4s available=150ms across 8 procs
metrics/granter: limit=50.00% utilization=48.12%
requester:       has-waiting-requests=true

try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=0s across 8 procs
metrics/granter: limit=50.00% utilization=50.00%
requester:       has-waiting-requests=true granted=150ms

# Set up a requester that doesn't actually accept the grant. First, refill the
# quota pool to its halfway point.
advance duration=0.5s print
----
rate-limiter:    refill=4s/s burst=4s available=2s across 8 procs
metrics/granter: limit=50.00% utilization=25.00%
requester:       has-waiting-requests=true granted=150ms

requester has-waiting-requests=true duration=0s
----

# Since it didn't take any quota, we shouldn't see any decrease in what's
# available.
try-grant print
----
rate-limiter:    refill=4s/s burst=4s available=2s across 8 procs
metrics/granter: limit=50.00% utilization=25.00%
requester:       has-waiting-requests=true granted=0s

# vim:ft=sh
