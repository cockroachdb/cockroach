init-grant-coordinator min-cpu=1 max-cpu=3 sql-kv-tokens=2 sql-sql-tokens=4
----
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 0, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

try-get work=kv
----
kv: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# No more slots.
try-get work=kv
----
kv: tryGet(1) returned false
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

set-has-waiting-requests work=kv v=true
----
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# Since no more KV slots, couldn't get.
try-get work=sql-kv-response
----
sql-kv-response: tryGet(1) returned false
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

set-has-waiting-requests work=sql-kv-response v=true
----
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

return-grant work=kv
----
kv: returnGrant(1)
kv: granted in chain 1, and returning 1
GrantCoordinator:
(chain: id: 1 active: true index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

set-has-waiting-requests work=kv v=false
----
GrantCoordinator:
(chain: id: 1 active: true index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

set-return-value-from-granted work=kv v=0
----
GrantCoordinator:
(chain: id: 1 active: true index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# The grant chain dies out since kv slots are fully used.
continue-grant-chain work=kv
----
kv: continueGrantChain
GrantCoordinator:
(chain: id: 2 active: false index: 1) kv: used: 1, total: 1 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# Grant to sql-kv-response consumes a token.
return-grant work=kv
----
kv: returnGrant(1)
sql-kv-response: granted in chain 2, and returning 1
GrantCoordinator:
(chain: id: 2 active: true index: 1) kv: used: 0, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 4

# Grant to sql-kv-response consumes another token. None left.
continue-grant-chain work=sql-kv-response
----
sql-kv-response: continueGrantChain
sql-kv-response: granted in chain 2, and returning 1
GrantCoordinator:
(chain: id: 2 active: true index: 1) kv: used: 0, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Even though there are still waiting requests for sql-kv-response, no more
# tokens, so the grant chain terminates.
continue-grant-chain work=sql-kv-response
----
sql-kv-response: continueGrantChain
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 0, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# The kv slots are fully used after this tryGet, which succeeds.
try-get work=kv
----
kv: tryGet(1) returned true
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# This tryGet for kv fails.
try-get work=kv
----
kv: tryGet(1) returned false
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

set-has-waiting-requests work=kv v=true
----
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Pretend that sql-sql-response has waiting requests.
set-has-waiting-requests work=sql-sql-response v=true
----
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# The grant chain cannot continue since it was terminated, and a new one
# is not able to restart since there are no free kv slots.
continue-grant-chain work=sql-sql-response
----
sql-sql-response: continueGrantChain
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Pretend that the sql-sql-response work that was waiting is gone.
set-has-waiting-requests work=sql-sql-response v=false
----
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Pretend that the kv work that was waiting is gone.
set-has-waiting-requests work=kv v=false
----
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Some other kv work takes without permission.
took-without-permission work=kv
----
kv: tookWithoutPermission(1)
GrantCoordinator:
(chain: id: 3 active: false index: 3) kv: used: 2, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 4

# Refill the tokens and increase the kv slots to 2.
cpu-load runnable=0 procs=1
----
GrantCoordinator:
(chain: id: 3 active: false index: 1) kv: used: 2, total: 2 sql-kv-response: avail: 2
sql-sql-response: avail: 4
SlotAdjuster metrics: slots: 2, duration (short, long) millis: (1, 0), inc: 1, dec: 0

# Tokens don't get overfull. And kv slots increased to 3. This causes a grant
# to sql-kv-response and the grant chain is again active.
cpu-load runnable=0 procs=1
----
sql-kv-response: granted in chain 3, and returning 1
GrantCoordinator:
(chain: id: 3 active: true index: 1) kv: used: 2, total: 3 sql-kv-response: avail: 1
sql-sql-response: avail: 4
SlotAdjuster metrics: slots: 3, duration (short, long) millis: (2, 0), inc: 2, dec: 0

# Overload and kv slots decreased. Forces termination of grant chain 3.
cpu-load runnable=2 procs=1
----
GrantCoordinator:
(chain: id: 4 active: false index: 1) kv: used: 2, total: 2 sql-kv-response: avail: 2
sql-sql-response: avail: 4
SlotAdjuster metrics: slots: 2, duration (short, long) millis: (3, 0), inc: 2, dec: 1

# Grant chain 3 terminates.
continue-grant-chain work=sql-kv-response
----
sql-kv-response: continueGrantChain
GrantCoordinator:
(chain: id: 4 active: false index: 1) kv: used: 2, total: 2 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# Pretend that sql-sql-response has waiting requests.
set-has-waiting-requests work=sql-sql-response v=true
----
GrantCoordinator:
(chain: id: 4 active: false index: 1) kv: used: 2, total: 2 sql-kv-response: avail: 2
sql-sql-response: avail: 4

# Underload and kv slots increased. The number of procs=4, so can grant 4 at
# the same time. The first 3 get a chain-id=0, i.e., they are not really
# relevant to continuing the grant chain.
cpu-load runnable=2 procs=4
----
sql-kv-response: granted in chain 0, and returning 1
sql-kv-response: granted in chain 0, and returning 1
sql-sql-response: granted in chain 0, and returning 1
sql-sql-response: granted in chain 4, and returning 1
GrantCoordinator:
(chain: id: 4 active: true index: 2) kv: used: 2, total: 3 sql-kv-response: avail: 0
sql-sql-response: avail: 2
SlotAdjuster metrics: slots: 3, duration (short, long) millis: (4, 0), inc: 3, dec: 1

# Continuing with chain-id=0 has no effect.
continue-grant-chain work=sql-kv-response
----
sql-kv-response: continueGrantChain
GrantCoordinator:
(chain: id: 4 active: true index: 2) kv: used: 2, total: 3 sql-kv-response: avail: 0
sql-sql-response: avail: 2

# Continuing with chain-id=4 causes two more grants to sql-sql-response, and
# then there are no more tokens available, so the grant chain terminates.
continue-grant-chain work=sql-sql-response
----
sql-sql-response: continueGrantChain
sql-sql-response: granted in chain 0, and returning 1
sql-sql-response: granted in chain 0, and returning 1
GrantCoordinator:
(chain: id: 5 active: false index: 3) kv: used: 2, total: 3 sql-kv-response: avail: 0
sql-sql-response: avail: 0

#####################################################################
# Test skipping of enforcements when CPULoad has high sampling period.
init-grant-coordinator min-cpu=1 max-cpu=3 sql-kv-tokens=1 sql-sql-tokens=1
----
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 0, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 1

# No more slots after this slot is granted.
try-get work=kv
----
kv: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 1

# Since no more KV slots, cannot grant token to sql-kv-response.
try-get work=sql-kv-response
----
sql-kv-response: tryGet(1) returned false
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 1

# Since no more KV slots, cannot grant token to sql-sql-response.
try-get work=sql-sql-response
----
sql-sql-response: tryGet(1) returned false
GrantCoordinator:
(chain: id: 1 active: false index: 0) kv: used: 1, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 1

# CPULoad shows overload, so cannot increase KV slots, but since it is
# infrequent, slot and token enforcement is disabled.
cpu-load runnable=20 procs=1 infrequent=true
----
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 1
sql-sql-response: avail: 1
SlotAdjuster metrics: slots: 1, duration (short, long) millis: (0, 250), inc: 0, dec: 0

# sql-kv-response can get a token.
try-get work=sql-kv-response
----
sql-kv-response: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: 0
sql-sql-response: avail: 1

# sql-kv-response can get another token, even though tokens are exhausted.
try-get work=sql-kv-response
----
sql-kv-response: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: -1
sql-sql-response: avail: 1

# sql-sql-response can get a token.
try-get work=sql-sql-response
----
sql-sql-response: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: -1
sql-sql-response: avail: 0

# sql-sql-response can get another token, even though tokens are exhausted.
try-get work=sql-sql-response
----
sql-sql-response: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 1, total: 1 sql-kv-response: avail: -1
sql-sql-response: avail: -1

# KV can get another slot even though slots are exhausted.
try-get work=kv
----
kv: tryGet(1) returned true
GrantCoordinator:
(chain: id: 1 active: false index: 3) kv: used: 2, total: 1 sql-kv-response: avail: -1
sql-sql-response: avail: -1
