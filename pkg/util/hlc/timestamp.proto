// Copyright 2014 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.util.hlc;
option go_package = "hlc";

import "gogoproto/gogo.proto";

// Timestamp represents a state of the hybrid logical clock.
message Timestamp {
  option (gogoproto.equal) = true;

  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.populate) = true;

  // Holds a wall time, typically a unix epoch time expressed in
  // nanoseconds.
  int64 wall_time = 1;
  // The logical component captures causality for events whose wall times
  // are equal. It is effectively bounded by (maximum clock skew)/(minimal
  // ns between events) and nearly impossible to overflow.
  int32 logical = 2;
  // A collection of bit flags that provide details about the timestamp
  // and its meaning. The data type is a uint32, but the number of flags
  // is limited to 8 so that the flags can be encoded into a single byte.
  //
  // Flags do not affect the sort order of Timestamps. However, they are
  // considered when performing structural equality checks (e.g. using the
  // == operator). Consider use of the EqOrdering method when testing for
  // equality.
  uint32 flags = 3;
}

// TimestampFlag is used to provide extra classification for Timestamps.
enum TimestampFlag {
  UNKNOWN = 0x00;
  // A synthetic timestamp is defined as a timestamp that makes no claim
  // about the value of clocks in the system. While standard timestamps
  // are pulled from HLC clocks and indicate that some node in the system
  // has a clock with a reading equal to or above its value, a synthetic
  // timestamp makes no such indication.
  //
  // Synthetic timestamps are central to non-blocking transactions, which
  // write at "future timestamps". They are also used to disconnect some
  // committed versions from observed timestamps, where they indicate that
  // versions were moved from the timestamp at which they were originally
  // written. Only synthetic timestamps require observing the full
  // uncertainty interval, whereas readings off the leaseholders's clock
  // can tighten it for non-synthetic versions.
  SYNTHETIC = 0x01;
  // ... = 0x02;
  // ... = 0x04;
  // max = 0x80;
}
