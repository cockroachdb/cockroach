// Copyright 2017 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.util.tracing;
option go_package = "tracing";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// RecordedSpan is a span that is part of a recording. It can be transferred
// over the wire for snowball tracing.
message RecordedSpan {
  option (gogoproto.goproto_stringer) = false;

  // ID of the trace; spans that are part of the same hierarchy share
  // the same trace ID.
  uint64 trace_id = 1 [(gogoproto.customname) = "TraceID"];
  // ID of the span.
  uint64 span_id = 2 [(gogoproto.customname) = "SpanID"];
  // Span ID of the parent span.
  uint64 parent_span_id = 3 [(gogoproto.customname) = "ParentSpanID"];
  // Operation name.
  string operation = 4;
  // Baggage items get passed from parent to child spans (even through gRPC).
  // Notably, snowball tracing uses a special `sb` baggage item.
  map<string, string> baggage = 5;
  // Tags associated with the span.
  map<string, string> tags = 6;
  // Time when the span was started.
  google.protobuf.Timestamp start_time = 7 [(gogoproto.nullable) = false,
                                            (gogoproto.stdtime) = true];
  // Duration in nanoseconds; 0 if the span is not finished.
  google.protobuf.Duration duration = 8 [(gogoproto.nullable) = false,
                                         (gogoproto.stdduration) = true];

  message LogRecord {
    // Time of the log record.
    google.protobuf.Timestamp time = 1 [(gogoproto.nullable) = false,
                                        (gogoproto.stdtime) = true];
    message Field {
      string key = 1;
      string value = 2;
    }
    // Fields with values converted to strings.
    repeated Field fields = 2 [(gogoproto.nullable) = false];
  }
  // Events logged in the span.
  repeated LogRecord logs = 9 [(gogoproto.nullable) = false];

  // Stats collected in this span.
  google.protobuf.Any stats = 10;
}

// ComponentActivity includes information about execution of a
// particular system component.
message ComponentActivity {
  // The number of operations the component executed during the
  // inspection period.
  int64 span_count = 1;
  // Sum of events.count.
  int64 event_count = 2;
  // The count of operations currently stuck in this component.
  int64 stuck_count = 3;
  // The count of errors during the inspection period. This includes spans
  // finished with errors and error events (so it includes sum of events.count
  // for error events).
  int64 errors = 4;
  // The timestamp on the server at which the span, event and error
  // counts were collected from counters.
  google.protobuf.Timestamp timestamp = 5 [(gogoproto.nullable) = false,
                                           (gogoproto.stdtime) = true];
}

message ComponentSamples {
  message Sample {
    string error = 1;
    // Pending is true if the sample is not complete when the
    // recording period ended.
    bool pending = 2;
    // Stuck is true if the component entered a retry loop or exceeded
    // a preset duration threshold.
    bool stuck = 3;
    // Component-level span (first span in slice) and all sub-spans.
    repeated RecordedSpan spans = 4 [(gogoproto.nullable) = false];
  }

  // The sampled spans starting at this component during the
  // inspection period. This slice acts as a reservoir sample,
  // although values can't be replaced since nothing can be thrown
  // away in order to ensure we can stitch together distributed traces.
  repeated Sample samples = 1 [(gogoproto.nullable) = false];
}

// ComponentTraces includes sampled traces and events taken at a component.
message ComponentTraces {
  ComponentSamples samples = 1 [(gogoproto.nullable) = false,
                                (gogoproto.embed) = true];

  // Event is a counter. For error counters, the event also keeps track of the
  // very first error.
  //
  // NOTE: The same event is not supposed to be used for both errors and
  // non-errors. For example, the parser component has a "parse statement"
  // event, and separately a "parse error" event.
  message Event {
    int64 count = 1;
    // If this Event represents an error counter, this keeps track of the very
    // first error recorded.
    string error = 2;
  }

  // Counts of events recorded by the component.
  map<string, Event> events = 2;

  // The timestamp on the server at which the samples were collected.
  google.protobuf.Timestamp timestamp = 3 [(gogoproto.nullable) = false,
                                           (gogoproto.stdtime) = true];
}
