// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/logpb/log.proto

package logpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Severity is the severity level of individual log events.
//
// Note: do not forget to run gen.sh (go generate) when
// changing this list or the explanatory comments.
type Severity int32

const (
	// UNKNOWN is populated into decoded log entries when the
	// severity could not be determined.
	Severity_UNKNOWN Severity = 0
	// INFO is used for informational messages, when no action
	// is required as a result.
	Severity_INFO Severity = 1
	// WARNING is used for situations which may require special handling,
	// while normal operation is expected to resume automatically.
	Severity_WARNING Severity = 2
	// ERROR is used for situations that require special handling,
	// when normal operation could not proceed as expected.
	// Other operations can continue mostly unaffected.
	Severity_ERROR Severity = 3
	// FATAL is used for situations that require an immedate, hard
	// server shutdown. A report is also sent to telemetry if telemetry
	// is enabled.
	Severity_FATAL Severity = 4
	// NONE can be used in filters to specify that no messages
	// should be emitted.
	Severity_NONE Severity = 5
	// DEFAULT is the end sentinel. It is used during command-line
	// handling to indicate that another value should be replaced instead
	// (depending on which command is being run); see cli/flags.go for
	// details.
	Severity_DEFAULT Severity = 6
)

var Severity_name = map[int32]string{
	0: "UNKNOWN",
	1: "INFO",
	2: "WARNING",
	3: "ERROR",
	4: "FATAL",
	5: "NONE",
	6: "DEFAULT",
}
var Severity_value = map[string]int32{
	"UNKNOWN": 0,
	"INFO":    1,
	"WARNING": 2,
	"ERROR":   3,
	"FATAL":   4,
	"NONE":    5,
	"DEFAULT": 6,
}

func (x Severity) String() string {
	return proto.EnumName(Severity_name, int32(x))
}
func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_log_cdb914dacde7ffc4, []int{0}
}

// Channel is the logical logging channel on which a message is sent.
// Different channels can be redirected to different sinks. All
// messages from the same channel are sent to the same sink(s).
//
//
// Note: do not forget to run gen.sh (go generate) when
// changing this list or the explanatory comments.
type Channel int32

const (
	// DEV is the channel used during development, to collect log
	// details useful for troubleshooting when it is unclear which other
	// channel to use. It is also the default logging channel in
	// CockroachDB, when the caller does not indicate a channel.
	//
	// This channel is special in that there are no constraints as to
	// what may or may not be logged on it. Conversely, users in
	// production deployments are invited to not collect DEV logs in
	// centralized logging facilities, because they likely contain
	// sensitive operational data.
	Channel_DEV Channel = 0
	// OPS is the channel used to report "point" operational events,
	// initiated by user operators or automation:
	//
	// - operator or system actions on server processes: process starts,
	//   stops, shutdowns, crashes (if they can be logged),
	//   including each time: command-line parameters, current version being run.
	// - actions that impact the topology of a cluster: node additions,
	//   removals, decommissions, etc.
	// - job-related initiation or termination.
	// - cluster setting changes.
	// - zone configuration changes.
	Channel_OPS Channel = 1
	// HEALTH is the channel used to report "background" operational
	// events, initiated by CockroachDB or reporting on automatic processes:
	//
	// - current resource usage, including critical resource usage.
	// - node-node connection events, including connection errors and
	//   gossip details.
	// - range and table leasing events.
	// - up-, down-replication; range unavailability.
	Channel_HEALTH Channel = 2
	// STORAGE is the channel used to report low-level storage
	// layer events (RocksDB/Pebble).
	Channel_STORAGE Channel = 3
	// SESSIONS is the channel used to report client network activity:
	//
	// - connections opened/closed.
	// - authentication events: logins, failed attempts.
	// - session and query cancellation.
	//
	// This is typically configured in "audit" mode, with event
	// numbering and synchronous writes.
	Channel_SESSIONS Channel = 4
	// SQL_SCHEMA is the channel used to report changes to the
	// SQL logical schema, excluding privilege and ownership changes
	// (which are reported on the separate channel PRIVILEGES) and
	// zone config changes (which go to OPS).
	//
	// This includes:
	//
	// - database/schema/table/sequence/view/type creation
	// - adding/removing/changing table columns
	// - changing sequence parameters
	//
	// etc., more generally changes to the schema that affect the
	// functional behavior of client apps using stored objects.
	Channel_SQL_SCHEMA Channel = 5
	// USER_ADMIN is the channel used to report changes
	// in users and roles, including:
	//
	// - users added/dropped.
	// - changes to authentication credentials, incl passwords, validity etc.
	// - role grants/revocations.
	// - role option grants/revocations.
	//
	// This is typically configured in "audit" mode, with event
	// numbering and synchronous writes.
	Channel_USER_ADMIN Channel = 6
	// PRIVILEGES is the channel used to report data
	// authorization changes, including:
	//
	// - privilege grants/revocations on database, objects etc.
	// - object ownership changes.
	//
	// This is typically configured in "audit" mode, with event
	// numbering and synchronous writes.
	Channel_PRIVILEGES Channel = 7
	// SENSITIVE_ACCESS is the channel used to report SQL
	// data access to sensitive data (when enabled):
	//
	// - data access audit events (when table audit is enabled).
	// - SQL statements executed by users with the ADMIN bit.
	// - operations that write to `system` tables.
	//
	// This is typically configured in "audit" mode, with event
	// numbering and synchronous writes.
	Channel_SENSITIVE_ACCESS Channel = 8
	// SQL_EXEC is the channel used to report SQL execution on
	// behalf of client connections:
	//
	// - logical SQL statement executions (if enabled)
	// - pgwire events (if enabled)
	Channel_SQL_EXEC Channel = 9
	// SQL_PERF is the channel used to report SQL executions
	// that are marked to be highlighted as "out of the ordinary"
	// to facilitate performance investigations.
	// This includes the "SQL slow query log".
	//
	// Arguably, this channel overlaps with SQL_EXEC defined above.
	// However, we keep them separate for backward-compatibility
	// with previous versions, where the corresponding events
	// were redirected to separate files.
	Channel_SQL_PERF Channel = 10
	// SQL_INTERNAL_PERF is like the SQL perf channel above but aimed at
	// helping developers of CockroachDB itself. It exists as a separate
	// channel so as to not pollute the SQL perf logging output with
	// internal troubleshooting details.
	Channel_SQL_INTERNAL_PERF Channel = 11
)

var Channel_name = map[int32]string{
	0:  "DEV",
	1:  "OPS",
	2:  "HEALTH",
	3:  "STORAGE",
	4:  "SESSIONS",
	5:  "SQL_SCHEMA",
	6:  "USER_ADMIN",
	7:  "PRIVILEGES",
	8:  "SENSITIVE_ACCESS",
	9:  "SQL_EXEC",
	10: "SQL_PERF",
	11: "SQL_INTERNAL_PERF",
}
var Channel_value = map[string]int32{
	"DEV":               0,
	"OPS":               1,
	"HEALTH":            2,
	"STORAGE":           3,
	"SESSIONS":          4,
	"SQL_SCHEMA":        5,
	"USER_ADMIN":        6,
	"PRIVILEGES":        7,
	"SENSITIVE_ACCESS":  8,
	"SQL_EXEC":          9,
	"SQL_PERF":          10,
	"SQL_INTERNAL_PERF": 11,
}

func (x Channel) String() string {
	return proto.EnumName(Channel_name, int32(x))
}
func (Channel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_log_cdb914dacde7ffc4, []int{1}
}

// Entry represents a cockroach log entry in the following two cases:
// - when reading a log file using the crdb-v1 format, entries
//   are parsed into this struct.
// - when injecting an interceptor into the logging package, the
//   interceptor is fed entries using this structure.
type Entry struct {
	// Severity is the importance of the log entry. See the
	// documentation for the Severity enum for more details.
	Severity Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=cockroach.util.log.Severity" json:"severity,omitempty"`
	// Nanoseconds since the epoch.
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Goroutine ID. This helps match logging events with goroutine
	// stack dumps.
	Goroutine int64 `protobuf:"varint,6,opt,name=goroutine,proto3" json:"goroutine,omitempty"`
	// File name where the logging event was produced. Logging client
	// code can adjust this with the "depth" parameter.
	File string `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	// Line number in the file where the logging event was produced.
	Line int64 `protobuf:"varint,4,opt,name=line,proto3" json:"line,omitempty"`
	// Message contains the main text of the logging message.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Tags contains the context tags available in the context where the
	// entry was created.
	Tags string `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// Counter is an entry counter, meant for use in audit logs as an
	// instrument against log repudiation.
	// See: https://en.wikipedia.org/wiki/Non-repudiation
	//
	// It is incremented for every use of the logger where the entry was
	// produced.
	Counter uint64 `protobuf:"varint,8,opt,name=counter,proto3" json:"counter,omitempty"`
	// Redactable is true iff the message and tags fields include markers
	// to delineate sensitive information. In that case, confidentiality
	// can be obtained by only stripping away the data within this
	// marker. If redactable is false or unknown, the message should be
	// considered to only contain sensitive information, and should be
	// stripped away completely for confidentiality.
	Redactable bool `protobuf:"varint,9,opt,name=redactable,proto3" json:"redactable,omitempty"`
	// Channel is the channel on which the message was sent.
	Channel Channel `protobuf:"varint,10,opt,name=channel,proto3,enum=cockroach.util.log.Channel" json:"channel,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_cdb914dacde7ffc4, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(dst, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

// A FileDetails holds all of the particulars that can be parsed by the name of
// a log file.
type FileDetails struct {
	Program  string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Time     int64  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	PID      int64  `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (m *FileDetails) Reset()         { *m = FileDetails{} }
func (m *FileDetails) String() string { return proto.CompactTextString(m) }
func (*FileDetails) ProtoMessage()    {}
func (*FileDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_cdb914dacde7ffc4, []int{1}
}
func (m *FileDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *FileDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDetails.Merge(dst, src)
}
func (m *FileDetails) XXX_Size() int {
	return m.Size()
}
func (m *FileDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDetails.DiscardUnknown(m)
}

var xxx_messageInfo_FileDetails proto.InternalMessageInfo

type FileInfo struct {
	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SizeBytes    int64       `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	ModTimeNanos int64       `protobuf:"varint,3,opt,name=mod_time_nanos,json=modTimeNanos,proto3" json:"mod_time_nanos,omitempty"`
	Details      FileDetails `protobuf:"bytes,4,opt,name=details,proto3" json:"details"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_log_cdb914dacde7ffc4, []int{2}
}
func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(dst, src)
}
func (m *FileInfo) XXX_Size() int {
	return m.Size()
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Entry)(nil), "cockroach.util.log.Entry")
	proto.RegisterType((*FileDetails)(nil), "cockroach.util.log.FileDetails")
	proto.RegisterType((*FileInfo)(nil), "cockroach.util.log.FileInfo")
	proto.RegisterEnum("cockroach.util.log.Severity", Severity_name, Severity_value)
	proto.RegisterEnum("cockroach.util.log.Channel", Channel_name, Channel_value)
}
func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Severity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Severity))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Time))
	}
	if len(m.File) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.Line != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Line))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Goroutine != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Goroutine))
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if m.Counter != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Counter))
	}
	if m.Redactable {
		dAtA[i] = 0x48
		i++
		if m.Redactable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Channel != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Channel))
	}
	return i, nil
}

func (m *FileDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Program) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Program)))
		i += copy(dAtA[i:], m.Program)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.Time))
	}
	if m.PID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.PID))
	}
	return i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLog(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SizeBytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.SizeBytes))
	}
	if m.ModTimeNanos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLog(dAtA, i, uint64(m.ModTimeNanos))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintLog(dAtA, i, uint64(m.Details.Size()))
	n1, err := m.Details.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func encodeVarintLog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Severity != 0 {
		n += 1 + sovLog(uint64(m.Severity))
	}
	if m.Time != 0 {
		n += 1 + sovLog(uint64(m.Time))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Line != 0 {
		n += 1 + sovLog(uint64(m.Line))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Goroutine != 0 {
		n += 1 + sovLog(uint64(m.Goroutine))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovLog(uint64(m.Counter))
	}
	if m.Redactable {
		n += 2
	}
	if m.Channel != 0 {
		n += 1 + sovLog(uint64(m.Channel))
	}
	return n
}

func (m *FileDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovLog(uint64(m.Time))
	}
	if m.PID != 0 {
		n += 1 + sovLog(uint64(m.PID))
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLog(uint64(l))
	}
	if m.SizeBytes != 0 {
		n += 1 + sovLog(uint64(m.SizeBytes))
	}
	if m.ModTimeNanos != 0 {
		n += 1 + sovLog(uint64(m.ModTimeNanos))
	}
	l = m.Details.Size()
	n += 1 + l + sovLog(uint64(l))
	return n
}

func sovLog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= (Severity(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			m.Line = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Line |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goroutine", wireType)
			}
			m.Goroutine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Goroutine |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redactable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Redactable = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (Channel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PID", wireType)
			}
			m.PID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeBytes", wireType)
			}
			m.SizeBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTimeNanos", wireType)
			}
			m.ModTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModTimeNanos |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLog   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("util/log/logpb/log.proto", fileDescriptor_log_cdb914dacde7ffc4) }

var fileDescriptor_log_cdb914dacde7ffc4 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xd1, 0x6e, 0xf3, 0x34,
	0x18, 0x6d, 0x9a, 0xa4, 0x49, 0xbe, 0xfe, 0x9a, 0x8c, 0x35, 0xa4, 0xc0, 0x46, 0x56, 0x4d, 0x48,
	0x54, 0xbb, 0xe8, 0xa4, 0x21, 0x24, 0xee, 0x50, 0xda, 0xba, 0x5b, 0xa0, 0x4b, 0x3b, 0xa7, 0xdb,
	0x10, 0x5c, 0x44, 0x69, 0xeb, 0x65, 0x11, 0x69, 0x5c, 0x25, 0x29, 0xd2, 0x78, 0x07, 0x24, 0x1e,
	0x82, 0xa7, 0x80, 0x17, 0xd8, 0xe5, 0x2e, 0x77, 0x35, 0x41, 0xf7, 0x22, 0xc8, 0x4e, 0x03, 0x93,
	0xd8, 0x45, 0xa2, 0x73, 0x4e, 0xce, 0xf7, 0xf9, 0xf3, 0x71, 0x0c, 0xf6, 0xa6, 0x4c, 0xd2, 0xd3,
	0x94, 0xc7, 0xe2, 0x59, 0xcf, 0xc5, 0xbb, 0xb7, 0xce, 0x79, 0xc9, 0x31, 0x5e, 0xf0, 0xc5, 0x4f,
	0x39, 0x8f, 0x16, 0xf7, 0x3d, 0xe1, 0xe9, 0xa5, 0x3c, 0xfe, 0x74, 0x3f, 0xe6, 0x31, 0x97, 0x9f,
	0x4f, 0x05, 0xaa, 0x9c, 0xc7, 0x7f, 0x34, 0x41, 0x27, 0x59, 0x99, 0x3f, 0xe0, 0xaf, 0xc1, 0x2c,
	0xd8, 0xcf, 0x2c, 0x4f, 0xca, 0x07, 0x5b, 0xe9, 0x28, 0xdd, 0xbd, 0xb3, 0xc3, 0xde, 0xff, 0xdb,
	0xf4, 0x82, 0x9d, 0x87, 0xfe, 0xeb, 0xc6, 0x18, 0xb4, 0x32, 0x59, 0x31, 0xbb, 0xd9, 0x51, 0xba,
	0x2a, 0x95, 0x58, 0x68, 0x77, 0x49, 0xca, 0x6c, 0xb5, 0xa3, 0x74, 0x2d, 0x2a, 0xb1, 0xd0, 0xd2,
	0x24, 0x63, 0xb6, 0x56, 0xf9, 0x04, 0xc6, 0x36, 0x18, 0x2b, 0x56, 0x14, 0x51, 0xcc, 0x6c, 0x5d,
	0x5a, 0x6b, 0x8a, 0x0f, 0xc1, 0x8a, 0x79, 0xce, 0x37, 0xa5, 0x28, 0x69, 0xc9, 0x92, 0xff, 0x04,
	0xb9, 0x66, 0x14, 0x17, 0xb6, 0x51, 0xf5, 0x17, 0x58, 0xf4, 0x5a, 0xf0, 0x4d, 0x56, 0xb2, 0xdc,
	0x36, 0x3b, 0x4a, 0x57, 0xa3, 0x35, 0xc5, 0x0e, 0x40, 0xce, 0x96, 0xd1, 0xa2, 0x8c, 0xe6, 0x29,
	0xb3, 0xad, 0x8e, 0xd2, 0x35, 0xe9, 0x1b, 0x05, 0x7f, 0x05, 0xc6, 0xe2, 0x3e, 0xca, 0x32, 0x96,
	0xda, 0x20, 0xb7, 0x7e, 0xf0, 0xde, 0xd6, 0x07, 0x95, 0x85, 0xd6, 0xde, 0xe3, 0x5f, 0x15, 0x68,
	0x8f, 0x92, 0x94, 0x0d, 0x59, 0x19, 0x25, 0xa9, 0x1c, 0x60, 0x9d, 0xf3, 0x38, 0x8f, 0x56, 0x32,
	0x41, 0x8b, 0xd6, 0x54, 0x8c, 0x7b, 0xcf, 0x8b, 0x52, 0x46, 0x64, 0x51, 0x89, 0xf1, 0x01, 0x58,
	0x9b, 0x82, 0xe5, 0x61, 0x16, 0xad, 0xea, 0x9c, 0x4c, 0x21, 0xf8, 0x51, 0x95, 0x9f, 0xcc, 0x54,
	0x7f, 0x93, 0xe9, 0x27, 0xa0, 0xae, 0x93, 0x65, 0x95, 0x45, 0xdf, 0xd8, 0xbe, 0x1c, 0xa9, 0x53,
	0x6f, 0x48, 0x85, 0xf6, 0xad, 0x66, 0x6a, 0x48, 0x3f, 0xfe, 0x5d, 0x01, 0x53, 0xcc, 0xe3, 0x65,
	0x77, 0x5c, 0x74, 0x90, 0x9d, 0xab, 0x49, 0x24, 0xc6, 0x9f, 0x01, 0x14, 0xc9, 0x2f, 0x2c, 0x9c,
	0x3f, 0x94, 0xac, 0xd8, 0x9d, 0x97, 0x25, 0x94, 0xbe, 0x10, 0xf0, 0xe7, 0xb0, 0xb7, 0xe2, 0xcb,
	0x50, 0x2c, 0x16, 0x66, 0x51, 0xc6, 0x0b, 0x39, 0x96, 0x4a, 0x3f, 0xac, 0xf8, 0x72, 0x96, 0xac,
	0x98, 0x2f, 0x34, 0xfc, 0x0d, 0x18, 0xcb, 0x6a, 0xc3, 0xf2, 0x24, 0xdb, 0x67, 0x47, 0xef, 0x85,
	0xf5, 0x26, 0x97, 0xbe, 0xf6, 0xf8, 0x72, 0xd4, 0xa0, 0x75, 0xd5, 0xc9, 0x8f, 0x60, 0xd6, 0x7f,
	0x11, 0x6e, 0x83, 0x71, 0xed, 0x7f, 0xe7, 0x4f, 0x6e, 0x7d, 0xd4, 0xc0, 0x26, 0x68, 0x9e, 0x3f,
	0x9a, 0x20, 0x45, 0xc8, 0xb7, 0x2e, 0xf5, 0x3d, 0xff, 0x1c, 0x35, 0xb1, 0x05, 0x3a, 0xa1, 0x74,
	0x42, 0x91, 0x2a, 0xe0, 0xc8, 0x9d, 0xb9, 0x63, 0xa4, 0x09, 0xb3, 0x3f, 0xf1, 0x09, 0xd2, 0x85,
	0x79, 0x48, 0x46, 0xee, 0xf5, 0x78, 0x86, 0x5a, 0x27, 0x7f, 0x2a, 0x60, 0xec, 0x0e, 0x0a, 0x1b,
	0xa0, 0x0e, 0xc9, 0x0d, 0x6a, 0x08, 0x30, 0x99, 0x06, 0x48, 0xc1, 0x00, 0xad, 0x0b, 0xe2, 0x8e,
	0x67, 0x17, 0xa8, 0x29, 0xca, 0x82, 0xd9, 0x84, 0xba, 0xe7, 0x04, 0xa9, 0xf8, 0x03, 0x98, 0x01,
	0x09, 0x02, 0x6f, 0xe2, 0x07, 0x48, 0xc3, 0x7b, 0x00, 0xc1, 0xd5, 0x38, 0x0c, 0x06, 0x17, 0xe4,
	0xd2, 0x45, 0xba, 0xe0, 0xd7, 0x01, 0xa1, 0xa1, 0x3b, 0xbc, 0xf4, 0x7c, 0xd4, 0x12, 0x7c, 0x4a,
	0xbd, 0x1b, 0x6f, 0x4c, 0xce, 0x49, 0x80, 0x0c, 0xbc, 0x0f, 0x28, 0x20, 0x7e, 0xe0, 0xcd, 0xbc,
	0x1b, 0x12, 0xba, 0x83, 0x01, 0x09, 0x02, 0x64, 0xca, 0x9e, 0x57, 0xe3, 0x90, 0x7c, 0x4f, 0x06,
	0xc8, 0xaa, 0xd9, 0x94, 0xd0, 0x11, 0x02, 0xfc, 0x31, 0x7c, 0x24, 0x98, 0xe7, 0xcf, 0x08, 0xf5,
	0xdd, 0x9d, 0xdc, 0xee, 0x7f, 0xf1, 0xf8, 0xb7, 0xd3, 0x78, 0xdc, 0x3a, 0xca, 0xd3, 0xd6, 0x51,
	0x9e, 0xb7, 0x8e, 0xf2, 0xd7, 0xd6, 0x51, 0x7e, 0x7b, 0x75, 0x1a, 0x4f, 0xaf, 0x4e, 0xe3, 0xf9,
	0xd5, 0x69, 0xfc, 0xa0, 0xcb, 0xbb, 0x3e, 0x6f, 0xc9, 0xeb, 0xfb, 0xe5, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0x84, 0x90, 0xf2, 0x04, 0x04, 0x00, 0x00,
}
