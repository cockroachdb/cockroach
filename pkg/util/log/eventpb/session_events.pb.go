// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/session_events.proto

package eventpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CommonConnectionDetails are payload fields common to all
// connection/session events.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type CommonConnectionDetails struct {
	// The instance ID (not tenant ID) of the SQL server where the event was originated.
	InstanceID int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:",omitempty"`
	// The network protocol for this connection: tcp4, tcp6, unix, etc.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:",omitempty"`
	// The remote address of the SQL client. Note that when using a
	// proxy or other intermediate server, this field will contain the
	// address of the intermediate server.
	RemoteAddress string `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3" json:",omitempty"`
}

func (m *CommonConnectionDetails) Reset()         { *m = CommonConnectionDetails{} }
func (m *CommonConnectionDetails) String() string { return proto.CompactTextString(m) }
func (*CommonConnectionDetails) ProtoMessage()    {}
func (*CommonConnectionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{0}
}
func (m *CommonConnectionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonConnectionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CommonConnectionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonConnectionDetails.Merge(dst, src)
}
func (m *CommonConnectionDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonConnectionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonConnectionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonConnectionDetails proto.InternalMessageInfo

// CommonConnectionDetails are payload fields common to all
// session events.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type CommonSessionDetails struct {
	// The connection type after transport negotiation.
	Transport string `protobuf:"bytes,1,opt,name=transport,proto3" json:",omitempty"`
	// The username the session is for.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:",omitempty"`
}

func (m *CommonSessionDetails) Reset()         { *m = CommonSessionDetails{} }
func (m *CommonSessionDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSessionDetails) ProtoMessage()    {}
func (*CommonSessionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{1}
}
func (m *CommonSessionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSessionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CommonSessionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSessionDetails.Merge(dst, src)
}
func (m *CommonSessionDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSessionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSessionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSessionDetails proto.InternalMessageInfo

// ClientConnectionStart is reported when a client connection
// is established. This is reported even when authentication
// fails, and even for simple cancellation messages.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type ClientConnectionStart struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
}

func (m *ClientConnectionStart) Reset()         { *m = ClientConnectionStart{} }
func (m *ClientConnectionStart) String() string { return proto.CompactTextString(m) }
func (*ClientConnectionStart) ProtoMessage()    {}
func (*ClientConnectionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{2}
}
func (m *ClientConnectionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConnectionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientConnectionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionStart.Merge(dst, src)
}
func (m *ClientConnectionStart) XXX_Size() int {
	return m.Size()
}
func (m *ClientConnectionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionStart.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionStart proto.InternalMessageInfo

// ClientConnectionEnd is reported when a client connection
// is closed. This is reported even when authentication
// fails, and even for simple cancellation messages.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type ClientConnectionEnd struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	// The duration of the connection in nanoseconds.
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:",omitempty"`
}

func (m *ClientConnectionEnd) Reset()         { *m = ClientConnectionEnd{} }
func (m *ClientConnectionEnd) String() string { return proto.CompactTextString(m) }
func (*ClientConnectionEnd) ProtoMessage()    {}
func (*ClientConnectionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{3}
}
func (m *ClientConnectionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConnectionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientConnectionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionEnd.Merge(dst, src)
}
func (m *ClientConnectionEnd) XXX_Size() int {
	return m.Size()
}
func (m *ClientConnectionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionEnd proto.InternalMessageInfo

// ClientSessionEnd is reported when a client session
// is completed.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientSessionEnd struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The duration of the connection in nanoseconds.
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:",omitempty"`
}

func (m *ClientSessionEnd) Reset()         { *m = ClientSessionEnd{} }
func (m *ClientSessionEnd) String() string { return proto.CompactTextString(m) }
func (*ClientSessionEnd) ProtoMessage()    {}
func (*ClientSessionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{4}
}
func (m *ClientSessionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientSessionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionEnd.Merge(dst, src)
}
func (m *ClientSessionEnd) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionEnd proto.InternalMessageInfo

// ClientAuthenticationFailed is reported when a client session
// did not authenticate successfully.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationFailed struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The reason for the authentication failure.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:",omitempty"`
	// The detailed error for the authentication failure.
	Detail string `protobuf:"bytes,5,opt,name=detail,proto3" json:",omitempty"`
	// The authentication method used.
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:",omitempty"`
}

func (m *ClientAuthenticationFailed) Reset()         { *m = ClientAuthenticationFailed{} }
func (m *ClientAuthenticationFailed) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationFailed) ProtoMessage()    {}
func (*ClientAuthenticationFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{5}
}
func (m *ClientAuthenticationFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientAuthenticationFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationFailed.Merge(dst, src)
}
func (m *ClientAuthenticationFailed) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationFailed.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationFailed proto.InternalMessageInfo

// ClientAuthenticationOk is reported when a client session
// was authenticated successfully.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationOk struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The authentication method used.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:",omitempty"`
}

func (m *ClientAuthenticationOk) Reset()         { *m = ClientAuthenticationOk{} }
func (m *ClientAuthenticationOk) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationOk) ProtoMessage()    {}
func (*ClientAuthenticationOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{6}
}
func (m *ClientAuthenticationOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientAuthenticationOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationOk.Merge(dst, src)
}
func (m *ClientAuthenticationOk) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationOk) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationOk.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationOk proto.InternalMessageInfo

// ClientAuthenticationInfo is reported for intermediate
// steps during the authentication process.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationInfo struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The authentication method used, once known.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:",omitempty"`
	// The authentication progress message.
	Info string `protobuf:"bytes,5,opt,name=info,proto3" json:",omitempty"`
}

func (m *ClientAuthenticationInfo) Reset()         { *m = ClientAuthenticationInfo{} }
func (m *ClientAuthenticationInfo) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationInfo) ProtoMessage()    {}
func (*ClientAuthenticationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_events_081bfe980c54ac3e, []int{7}
}
func (m *ClientAuthenticationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *ClientAuthenticationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationInfo.Merge(dst, src)
}
func (m *ClientAuthenticationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonConnectionDetails)(nil), "cockroach.util.log.eventpb.CommonConnectionDetails")
	proto.RegisterType((*CommonSessionDetails)(nil), "cockroach.util.log.eventpb.CommonSessionDetails")
	proto.RegisterType((*ClientConnectionStart)(nil), "cockroach.util.log.eventpb.ClientConnectionStart")
	proto.RegisterType((*ClientConnectionEnd)(nil), "cockroach.util.log.eventpb.ClientConnectionEnd")
	proto.RegisterType((*ClientSessionEnd)(nil), "cockroach.util.log.eventpb.ClientSessionEnd")
	proto.RegisterType((*ClientAuthenticationFailed)(nil), "cockroach.util.log.eventpb.ClientAuthenticationFailed")
	proto.RegisterType((*ClientAuthenticationOk)(nil), "cockroach.util.log.eventpb.ClientAuthenticationOk")
	proto.RegisterType((*ClientAuthenticationInfo)(nil), "cockroach.util.log.eventpb.ClientAuthenticationInfo")
}
func (m *CommonConnectionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonConnectionDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InstanceID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.InstanceID))
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if len(m.RemoteAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.RemoteAddress)))
		i += copy(dAtA[i:], m.RemoteAddress)
	}
	return i, nil
}

func (m *CommonSessionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSessionDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transport) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Transport)))
		i += copy(dAtA[i:], m.Transport)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	return i, nil
}

func (m *ClientConnectionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n1, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n2, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *ClientConnectionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n3, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n4, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *ClientSessionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n5, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n6, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonSessionDetails.Size()))
	n7, err := m.CommonSessionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Duration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *ClientAuthenticationFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationFailed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n8, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n9, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonSessionDetails.Size()))
	n10, err := m.CommonSessionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.Detail) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Detail)))
		i += copy(dAtA[i:], m.Detail)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *ClientAuthenticationOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationOk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n11, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n12, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonSessionDetails.Size()))
	n13, err := m.CommonSessionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	return i, nil
}

func (m *ClientAuthenticationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n14, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	dAtA[i] = 0x12
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonConnectionDetails.Size()))
	n15, err := m.CommonConnectionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x1a
	i++
	i = encodeVarintSessionEvents(dAtA, i, uint64(m.CommonSessionDetails.Size()))
	n16, err := m.CommonSessionDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if len(m.Method) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func encodeVarintSessionEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommonConnectionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstanceID != 0 {
		n += 1 + sovSessionEvents(uint64(m.InstanceID))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *CommonSessionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transport)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientConnectionStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	return n
}

func (m *ClientConnectionEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovSessionEvents(uint64(m.Duration))
	}
	return n
}

func (m *ClientSessionEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovSessionEvents(uint64(m.Duration))
	}
	return n
}

func (m *ClientAuthenticationFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientAuthenticationOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientAuthenticationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func sovSessionEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSessionEvents(x uint64) (n int) {
	return sovSessionEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonConnectionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonConnectionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonConnectionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSessionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSessionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSessionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSessionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSessionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSessionEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSessionEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSessionEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSessionEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionEvents   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("util/log/eventpb/session_events.proto", fileDescriptor_session_events_081bfe980c54ac3e)
}

var fileDescriptor_session_events_081bfe980c54ac3e = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0x93, 0x34, 0xa1, 0x13, 0xa8, 0x90, 0x29, 0x60, 0x45, 0xe0, 0x54, 0x96, 0x40, 0x01,
	0x55, 0x0e, 0x4a, 0xc5, 0x91, 0x43, 0x93, 0x16, 0x29, 0x27, 0xa4, 0x16, 0x24, 0xc4, 0x25, 0x72,
	0xed, 0x6d, 0xb2, 0x8a, 0xbd, 0x13, 0xed, 0x6e, 0x40, 0xfc, 0x0b, 0xee, 0xfc, 0x12, 0xee, 0x20,
	0x72, 0xcc, 0xb1, 0xa7, 0x08, 0x92, 0x5b, 0x25, 0xf8, 0x0d, 0xc8, 0xeb, 0x4d, 0x4b, 0xf3, 0x41,
	0xc4, 0xb1, 0x52, 0x6e, 0x5e, 0xbf, 0x37, 0xcf, 0x6f, 0xde, 0xac, 0xd7, 0x86, 0x47, 0x7d, 0x49,
	0xa3, 0x6a, 0x84, 0xed, 0x2a, 0x79, 0x4f, 0x98, 0xec, 0x9d, 0x54, 0x05, 0x11, 0x82, 0x22, 0x6b,
	0xa9, 0xb5, 0xf0, 0x7a, 0x1c, 0x25, 0x5a, 0xa5, 0x00, 0x83, 0x2e, 0x47, 0x3f, 0xe8, 0x78, 0x49,
	0x81, 0x17, 0x61, 0xdb, 0xd3, 0x05, 0xa5, 0xed, 0x36, 0xb6, 0x51, 0xd1, 0xaa, 0xc9, 0x55, 0x5a,
	0x51, 0x7a, 0x38, 0x27, 0xfc, 0xb7, 0xa0, 0xfb, 0xc5, 0x84, 0xfb, 0x0d, 0x8c, 0x63, 0x64, 0x0d,
	0x64, 0x8c, 0x04, 0x92, 0x22, 0x3b, 0x20, 0xd2, 0xa7, 0x91, 0xb0, 0x5e, 0x40, 0x91, 0x32, 0x21,
	0x7d, 0x16, 0x90, 0x16, 0x0d, 0x6d, 0x73, 0xc7, 0xac, 0x6c, 0xd4, 0x1f, 0x8c, 0x47, 0x65, 0x68,
	0xea, 0xdb, 0xcd, 0x83, 0xf3, 0x51, 0x19, 0x76, 0x31, 0xa6, 0x92, 0xc4, 0x3d, 0xf9, 0xf1, 0x08,
	0xa6, 0x05, 0xcd, 0xd0, 0xaa, 0x40, 0x81, 0x11, 0xf9, 0x01, 0x79, 0xd7, 0xce, 0xec, 0x98, 0x95,
	0xcd, 0xfa, 0xd6, 0x0c, 0x79, 0x0a, 0x5b, 0xcf, 0x61, 0x8b, 0x93, 0x18, 0x25, 0x69, 0xf9, 0x61,
	0xc8, 0x89, 0x10, 0x76, 0x76, 0x61, 0xc1, 0xad, 0x94, 0xb5, 0x9f, 0x92, 0xdc, 0x0e, 0x6c, 0xa7,
	0xd6, 0x8f, 0xd3, 0xa8, 0xa6, 0xbe, 0x77, 0x61, 0x53, 0x72, 0x9f, 0x89, 0x1e, 0x72, 0xa9, 0x5c,
	0xcf, 0x2b, 0x5d, 0x12, 0x2c, 0x17, 0x72, 0x7d, 0x41, 0xf8, 0x12, 0x8f, 0x0a, 0x73, 0xbf, 0x9a,
	0x70, 0xb7, 0x11, 0x51, 0xc2, 0xe4, 0x65, 0x4a, 0xc7, 0xd2, 0xe7, 0xd2, 0x7a, 0x0d, 0xf9, 0x40,
	0x79, 0x50, 0x0f, 0x2a, 0xd6, 0x3c, 0x6f, 0xf9, 0x84, 0xbc, 0xd4, 0xed, 0x61, 0xb2, 0xd2, 0x5e,
	0xeb, 0x37, 0x07, 0xa3, 0xb2, 0x31, 0x1c, 0x95, 0xcd, 0xf3, 0x51, 0xd9, 0x38, 0xd2, 0x5a, 0xd6,
	0x1b, 0xc8, 0x05, 0xc8, 0x98, 0xf2, 0x54, 0xac, 0xed, 0xad, 0xd6, 0x9c, 0x1b, 0xde, 0x8c, 0xb0,
	0x92, 0x73, 0x7f, 0x9b, 0x70, 0x67, 0xb6, 0x8d, 0x43, 0x16, 0x5e, 0xab, 0x26, 0xac, 0xa7, 0x70,
	0x23, 0xec, 0x73, 0x3f, 0xa1, 0xa9, 0x6d, 0x92, 0x9d, 0x9b, 0xd9, 0x05, 0xee, 0x7e, 0xcb, 0xc0,
	0xed, 0xb4, 0x61, 0xbd, 0x45, 0xae, 0x5d, 0xb7, 0x6f, 0xa1, 0xa0, 0x0f, 0x02, 0xd5, 0x6c, 0xb1,
	0xf6, 0x6c, 0xb5, 0xf2, 0xd5, 0xd7, 0x61, 0x46, 0x76, 0x2a, 0x77, 0x25, 0xc7, 0xdc, 0x8a, 0x1c,
	0x3f, 0x67, 0xa1, 0x94, 0xe6, 0xb8, 0xdf, 0x97, 0x1d, 0xc2, 0x24, 0x0d, 0x14, 0xf0, 0xd2, 0xa7,
	0x11, 0x59, 0x27, 0xaa, 0x13, 0x7d, 0x0c, 0x79, 0x4e, 0x7c, 0xa1, 0xf3, 0x9c, 0x3f, 0x4b, 0x34,
	0x9a, 0xf0, 0x42, 0xa5, 0x64, 0x6f, 0x2c, 0xe6, 0xa5, 0x68, 0xc2, 0x8b, 0x89, 0xec, 0x60, 0x68,
	0xe7, 0x17, 0xf3, 0x52, 0xd4, 0xfd, 0x9e, 0x81, 0x7b, 0x8b, 0xa6, 0xf3, 0xaa, 0xbb, 0x9e, 0xcc,
	0xc5, 0x64, 0x74, 0x92, 0xb9, 0x7f, 0x26, 0xf9, 0x2b, 0x03, 0xf6, 0xa2, 0x24, 0x9b, 0xec, 0x14,
	0xd7, 0x59, 0xfe, 0x57, 0x96, 0xc9, 0x77, 0x95, 0xb2, 0x53, 0x5c, 0xb2, 0xc7, 0x15, 0x56, 0x7f,
	0x32, 0xf8, 0xe9, 0x18, 0x83, 0xb1, 0x63, 0x0e, 0xc7, 0x8e, 0x79, 0x36, 0x76, 0xcc, 0x1f, 0x63,
	0xc7, 0xfc, 0x34, 0x71, 0x8c, 0xe1, 0xc4, 0x31, 0xce, 0x26, 0x8e, 0xf1, 0xae, 0xa0, 0x2d, 0x9e,
	0xe4, 0xd5, 0xff, 0xca, 0xde, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x09, 0x24, 0x1b, 0x29,
	0x09, 0x00, 0x00,
}
