// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/session_events.proto

package eventpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuthFailReason is the inventory of possible reasons for an
// authentication failure.
type AuthFailReason int32

const (
	// UNKNOWN is reported when the reason is unknown.
	AuthFailReason_UNKNOWN AuthFailReason = 0
	// USER_RETRIEVAL_ERROR occurs when there was an internal error accessing the principals.
	AuthFailReason_USER_RETRIEVAL_ERROR AuthFailReason = 1
	// USER_NOT_FOUND occurs when the principal is unknown.
	AuthFailReason_USER_NOT_FOUND AuthFailReason = 2
	// LOGIN_DISABLED occurs when the user does not have LOGIN privileges.
	AuthFailReason_LOGIN_DISABLED AuthFailReason = 3
	// METHOD_NOT_FOUND occurs when no HBA rule matches or the method does not exist.
	AuthFailReason_METHOD_NOT_FOUND AuthFailReason = 4
	// PRE_HOOK_ERROR occurs when the authentication handshake encountered a protocol error.
	AuthFailReason_PRE_HOOK_ERROR AuthFailReason = 5
	// CREDENTIALS_INVALID occurs when the client-provided credentials were invalid.
	AuthFailReason_CREDENTIALS_INVALID AuthFailReason = 6
	// CREDENTIALS_EXPIRED occur when the credentials provided by the client are expired.
	AuthFailReason_CREDENTIALS_EXPIRED AuthFailReason = 7
)

var AuthFailReason_name = map[int32]string{
	0: "UNKNOWN",
	1: "USER_RETRIEVAL_ERROR",
	2: "USER_NOT_FOUND",
	3: "LOGIN_DISABLED",
	4: "METHOD_NOT_FOUND",
	5: "PRE_HOOK_ERROR",
	6: "CREDENTIALS_INVALID",
	7: "CREDENTIALS_EXPIRED",
}

var AuthFailReason_value = map[string]int32{
	"UNKNOWN":              0,
	"USER_RETRIEVAL_ERROR": 1,
	"USER_NOT_FOUND":       2,
	"LOGIN_DISABLED":       3,
	"METHOD_NOT_FOUND":     4,
	"PRE_HOOK_ERROR":       5,
	"CREDENTIALS_INVALID":  6,
	"CREDENTIALS_EXPIRED":  7,
}

func (x AuthFailReason) String() string {
	return proto.EnumName(AuthFailReason_name, int32(x))
}

func (AuthFailReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{0}
}

// CommonConnectionDetails are payload fields common to all
// connection/session events.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type CommonConnectionDetails struct {
	// The instance ID (not tenant ID) of the SQL server where the event was originated.
	InstanceID int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:",omitempty"`
	// The network protocol for this connection: tcp4, tcp6, unix, etc.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:",omitempty" redact:"nonsensitive"`
	// The remote address of the SQL client. Note that when using a
	// proxy or other intermediate server, this field will contain the
	// address of the intermediate server.
	RemoteAddress string `protobuf:"bytes,3,opt,name=remote_address,json=remoteAddress,proto3" json:",omitempty"`
}

func (m *CommonConnectionDetails) Reset()         { *m = CommonConnectionDetails{} }
func (m *CommonConnectionDetails) String() string { return proto.CompactTextString(m) }
func (*CommonConnectionDetails) ProtoMessage()    {}
func (*CommonConnectionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{0}
}
func (m *CommonConnectionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonConnectionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonConnectionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonConnectionDetails.Merge(m, src)
}
func (m *CommonConnectionDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonConnectionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonConnectionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonConnectionDetails proto.InternalMessageInfo

// CommonConnectionDetails are payload fields common to all
// session events.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type CommonSessionDetails struct {
	// The connection type after transport negotiation.
	Transport string `protobuf:"bytes,1,opt,name=transport,proto3" json:",omitempty" redact:"nonsensitive"`
	// The database username the session is for. This username will have
	// undergone case-folding and Unicode normalization.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:",omitempty"`
	// The original system identity provided by the client, if an identity
	// mapping was used per Host-Based Authentication rules. This may be a
	// GSSAPI or X.509 principal or any other external value, so no
	// specific assumptions should be made about the contents of this
	// field.
	SystemIdentity string `protobuf:"bytes,3,opt,name=system_identity,json=systemIdentity,proto3" json:",omitempty"`
}

func (m *CommonSessionDetails) Reset()         { *m = CommonSessionDetails{} }
func (m *CommonSessionDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSessionDetails) ProtoMessage()    {}
func (*CommonSessionDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{1}
}
func (m *CommonSessionDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSessionDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonSessionDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSessionDetails.Merge(m, src)
}
func (m *CommonSessionDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSessionDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSessionDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSessionDetails proto.InternalMessageInfo

// ClientConnectionStart is reported when a client connection
// is established. This is reported even when authentication
// fails, and even for simple cancellation messages.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type ClientConnectionStart struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
}

func (m *ClientConnectionStart) Reset()         { *m = ClientConnectionStart{} }
func (m *ClientConnectionStart) String() string { return proto.CompactTextString(m) }
func (*ClientConnectionStart) ProtoMessage()    {}
func (*ClientConnectionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{2}
}
func (m *ClientConnectionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConnectionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientConnectionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionStart.Merge(m, src)
}
func (m *ClientConnectionStart) XXX_Size() int {
	return m.Size()
}
func (m *ClientConnectionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionStart.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionStart proto.InternalMessageInfo

// ClientConnectionEnd is reported when a client connection
// is closed. This is reported even when authentication
// fails, and even for simple cancellation messages.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_connections.enabled` is set.
type ClientConnectionEnd struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	// The duration of the connection in nanoseconds.
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:",omitempty"`
}

func (m *ClientConnectionEnd) Reset()         { *m = ClientConnectionEnd{} }
func (m *ClientConnectionEnd) String() string { return proto.CompactTextString(m) }
func (*ClientConnectionEnd) ProtoMessage()    {}
func (*ClientConnectionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{3}
}
func (m *ClientConnectionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConnectionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientConnectionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConnectionEnd.Merge(m, src)
}
func (m *ClientConnectionEnd) XXX_Size() int {
	return m.Size()
}
func (m *ClientConnectionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConnectionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConnectionEnd proto.InternalMessageInfo

// ClientSessionEnd is reported when a client session
// is completed.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientSessionEnd struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The duration of the connection in nanoseconds.
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:",omitempty"`
}

func (m *ClientSessionEnd) Reset()         { *m = ClientSessionEnd{} }
func (m *ClientSessionEnd) String() string { return proto.CompactTextString(m) }
func (*ClientSessionEnd) ProtoMessage()    {}
func (*ClientSessionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{4}
}
func (m *ClientSessionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSessionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientSessionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSessionEnd.Merge(m, src)
}
func (m *ClientSessionEnd) XXX_Size() int {
	return m.Size()
}
func (m *ClientSessionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSessionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSessionEnd proto.InternalMessageInfo

// ClientAuthenticationFailed is reported when a client session
// did not authenticate successfully.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationFailed struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The reason for the authentication failure.
	Reason AuthFailReason `protobuf:"varint,4,opt,name=reason,proto3,enum=cockroach.util.log.eventpb.AuthFailReason" json:",omitempty" redact:"nonsensitive"`
	// The detailed error for the authentication failure.
	Detail string `protobuf:"bytes,5,opt,name=detail,proto3" json:",omitempty"`
	// The authentication method used.
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *ClientAuthenticationFailed) Reset()         { *m = ClientAuthenticationFailed{} }
func (m *ClientAuthenticationFailed) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationFailed) ProtoMessage()    {}
func (*ClientAuthenticationFailed) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{5}
}
func (m *ClientAuthenticationFailed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationFailed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientAuthenticationFailed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationFailed.Merge(m, src)
}
func (m *ClientAuthenticationFailed) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationFailed) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationFailed.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationFailed proto.InternalMessageInfo

// ClientAuthenticationOk is reported when a client session
// was authenticated successfully.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationOk struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The authentication method used.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *ClientAuthenticationOk) Reset()         { *m = ClientAuthenticationOk{} }
func (m *ClientAuthenticationOk) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationOk) ProtoMessage()    {}
func (*ClientAuthenticationOk) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{6}
}
func (m *ClientAuthenticationOk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationOk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientAuthenticationOk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationOk.Merge(m, src)
}
func (m *ClientAuthenticationOk) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationOk) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationOk.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationOk proto.InternalMessageInfo

// ClientAuthenticationInfo is reported for intermediate
// steps during the authentication process.
//
// Events of this type are only emitted when the cluster setting
// `server.auth_log.sql_sessions.enabled` is set.
type ClientAuthenticationInfo struct {
	CommonEventDetails      `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonConnectionDetails `protobuf:"bytes,2,opt,name=conn,proto3,embedded=conn" json:""`
	CommonSessionDetails    `protobuf:"bytes,3,opt,name=session,proto3,embedded=session" json:""`
	// The authentication method used, once known.
	Method string `protobuf:"bytes,4,opt,name=method,proto3" json:",omitempty" redact:"nonsensitive"`
	// The authentication progress message.
	Info string `protobuf:"bytes,5,opt,name=info,proto3" json:",omitempty"`
}

func (m *ClientAuthenticationInfo) Reset()         { *m = ClientAuthenticationInfo{} }
func (m *ClientAuthenticationInfo) String() string { return proto.CompactTextString(m) }
func (*ClientAuthenticationInfo) ProtoMessage()    {}
func (*ClientAuthenticationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_aef88ca0e95f42d6, []int{7}
}
func (m *ClientAuthenticationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientAuthenticationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ClientAuthenticationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientAuthenticationInfo.Merge(m, src)
}
func (m *ClientAuthenticationInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClientAuthenticationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientAuthenticationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientAuthenticationInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.util.log.eventpb.AuthFailReason", AuthFailReason_name, AuthFailReason_value)
	proto.RegisterType((*CommonConnectionDetails)(nil), "cockroach.util.log.eventpb.CommonConnectionDetails")
	proto.RegisterType((*CommonSessionDetails)(nil), "cockroach.util.log.eventpb.CommonSessionDetails")
	proto.RegisterType((*ClientConnectionStart)(nil), "cockroach.util.log.eventpb.ClientConnectionStart")
	proto.RegisterType((*ClientConnectionEnd)(nil), "cockroach.util.log.eventpb.ClientConnectionEnd")
	proto.RegisterType((*ClientSessionEnd)(nil), "cockroach.util.log.eventpb.ClientSessionEnd")
	proto.RegisterType((*ClientAuthenticationFailed)(nil), "cockroach.util.log.eventpb.ClientAuthenticationFailed")
	proto.RegisterType((*ClientAuthenticationOk)(nil), "cockroach.util.log.eventpb.ClientAuthenticationOk")
	proto.RegisterType((*ClientAuthenticationInfo)(nil), "cockroach.util.log.eventpb.ClientAuthenticationInfo")
}

func init() {
	proto.RegisterFile("util/log/eventpb/session_events.proto", fileDescriptor_aef88ca0e95f42d6)
}

var fileDescriptor_aef88ca0e95f42d6 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x41, 0x6f, 0xd3, 0x4a,
	0x18, 0x8c, 0x93, 0x34, 0x79, 0xdd, 0xbc, 0x97, 0x67, 0x6d, 0x53, 0x1a, 0x45, 0xe0, 0x54, 0x96,
	0x80, 0x52, 0xa1, 0x04, 0xa5, 0x42, 0x48, 0x48, 0x08, 0x25, 0xb1, 0x4b, 0xad, 0x06, 0xbb, 0x72,
	0x92, 0x52, 0x71, 0xb1, 0x5c, 0x7b, 0x9b, 0x5a, 0x49, 0x76, 0x23, 0x7b, 0x53, 0xd4, 0x3f, 0xc0,
	0x99, 0xdf, 0x03, 0x57, 0x90, 0x7a, 0xac, 0x38, 0xf5, 0x14, 0x95, 0xf4, 0xd6, 0x03, 0x07, 0x6e,
	0xdc, 0x90, 0xd7, 0x0e, 0x6d, 0xd2, 0x96, 0x52, 0xc4, 0xa5, 0x52, 0x6f, 0xb6, 0xbf, 0x99, 0xf1,
	0x37, 0xf3, 0xed, 0xae, 0x16, 0xdc, 0xed, 0x53, 0xa7, 0x53, 0xec, 0x90, 0x56, 0x11, 0xed, 0x20,
	0x4c, 0x7b, 0x9b, 0x45, 0x0f, 0x79, 0x9e, 0x43, 0xb0, 0xc1, 0xde, 0xbd, 0x42, 0xcf, 0x25, 0x94,
	0xc0, 0x9c, 0x45, 0xac, 0xb6, 0x4b, 0x4c, 0x6b, 0xbb, 0xe0, 0x13, 0x0a, 0x1d, 0xd2, 0x2a, 0x84,
	0x84, 0x5c, 0xa6, 0x45, 0x5a, 0x84, 0xc1, 0x8a, 0xfe, 0x53, 0xc0, 0xc8, 0xdd, 0x39, 0x23, 0x7c,
	0x5a, 0x50, 0xfc, 0xcc, 0x81, 0xb9, 0x2a, 0xe9, 0x76, 0x09, 0xae, 0x12, 0x8c, 0x91, 0x45, 0x1d,
	0x82, 0x25, 0x44, 0x4d, 0xa7, 0xe3, 0xc1, 0x67, 0x20, 0xe5, 0x60, 0x8f, 0x9a, 0xd8, 0x42, 0x86,
	0x63, 0x67, 0xb9, 0x79, 0x6e, 0x61, 0xaa, 0x72, 0x7b, 0x38, 0xc8, 0x03, 0x25, 0xfc, 0xac, 0x48,
	0xc7, 0x83, 0x3c, 0x78, 0x48, 0xba, 0x0e, 0x45, 0xdd, 0x1e, 0xdd, 0xd5, 0xc1, 0x88, 0xa0, 0xd8,
	0xb0, 0x0c, 0x92, 0x18, 0xd1, 0x37, 0xc4, 0x6d, 0x67, 0xa3, 0xf3, 0xdc, 0xc2, 0x74, 0xe5, 0xfe,
	0x38, 0xf8, 0xdb, 0x20, 0x3f, 0xeb, 0x22, 0xdb, 0xb4, 0xe8, 0x53, 0x11, 0x13, 0xec, 0x21, 0xec,
	0x39, 0xd4, 0xd9, 0x41, 0xa2, 0x3e, 0xe2, 0xc1, 0xc7, 0x20, 0xed, 0xa2, 0x2e, 0xa1, 0xc8, 0x30,
	0x6d, 0xdb, 0x45, 0x9e, 0x97, 0x8d, 0x31, 0xa5, 0xf4, 0xc4, 0x6f, 0xff, 0x0b, 0x50, 0xe5, 0x00,
	0x24, 0xbe, 0xe7, 0x40, 0x26, 0x30, 0x55, 0x0f, 0x42, 0x1c, 0x39, 0x92, 0xc1, 0x34, 0x75, 0x4d,
	0xec, 0xf5, 0x88, 0x4b, 0x99, 0x9f, 0x2b, 0x34, 0x75, 0xc2, 0x84, 0x22, 0x88, 0xf7, 0x3d, 0xe4,
	0x86, 0xb6, 0x26, 0x9b, 0x61, 0x35, 0xf8, 0x04, 0xfc, 0xef, 0xed, 0x7a, 0x14, 0x75, 0x0d, 0xc7,
	0x46, 0x98, 0x3a, 0x74, 0xf7, 0x82, 0xde, 0xd3, 0x01, 0x4c, 0x09, 0x51, 0xe2, 0x47, 0x0e, 0xcc,
	0x56, 0x3b, 0x0e, 0xc2, 0xf4, 0x64, 0x22, 0x75, 0x6a, 0xba, 0x14, 0x36, 0x40, 0xc2, 0x62, 0xae,
	0x58, 0xeb, 0xa9, 0x52, 0xa1, 0x70, 0xf1, 0x6a, 0x28, 0x04, 0xfe, 0x65, 0xff, 0x2d, 0x74, 0x5f,
	0xf9, 0x77, 0x6f, 0x90, 0x8f, 0xec, 0x0f, 0xf2, 0xdc, 0xf1, 0x20, 0x1f, 0xd1, 0x43, 0x2d, 0xd8,
	0x04, 0x71, 0x8b, 0x60, 0xcc, 0xcc, 0xa4, 0x4a, 0x4b, 0x97, 0x6b, 0x9e, 0x59, 0x28, 0x13, 0xc2,
	0x4c, 0x4e, 0xfc, 0xca, 0x81, 0x99, 0x49, 0x1b, 0x32, 0xb6, 0xaf, 0x95, 0x09, 0xb8, 0x08, 0xfe,
	0xb1, 0xfb, 0xae, 0xe9, 0xc3, 0xd8, 0xf4, 0x62, 0x67, 0xa6, 0xf7, 0xb3, 0x2e, 0x7e, 0x8a, 0x02,
	0x3e, 0x30, 0x1c, 0x2e, 0xba, 0x6b, 0xe7, 0x76, 0x03, 0x24, 0xc3, 0x43, 0x87, 0x99, 0x4d, 0x95,
	0x1e, 0x5d, 0xae, 0x3c, 0xbe, 0xc1, 0x26, 0x64, 0x47, 0x72, 0x63, 0x39, 0xc6, 0x2f, 0xc9, 0xf1,
	0x7b, 0x0c, 0xe4, 0x82, 0x1c, 0xcb, 0x7d, 0xba, 0xed, 0x6f, 0x0a, 0x8b, 0x15, 0x96, 0x4d, 0xa7,
	0x83, 0x6e, 0x12, 0x0d, 0x13, 0x6d, 0x83, 0x84, 0x8b, 0x4c, 0x2f, 0xcc, 0x33, 0x5d, 0x5a, 0xfc,
	0x95, 0xb0, 0x1f, 0xa4, 0x1f, 0x9f, 0xce, 0x18, 0xbf, 0x7f, 0xe4, 0x85, 0xbf, 0x80, 0xf7, 0x40,
	0xc2, 0x66, 0xed, 0x64, 0xa7, 0xce, 0x3d, 0xc2, 0xc2, 0x2a, 0x7c, 0x0e, 0x12, 0x5d, 0x44, 0xb7,
	0x89, 0x9d, 0x4d, 0x5c, 0xed, 0x6c, 0x0d, 0x69, 0xe2, 0x61, 0x14, 0xdc, 0x3a, 0x6f, 0xf6, 0x5a,
	0xfb, 0x66, 0xee, 0xc1, 0xdc, 0x4f, 0x22, 0x8e, 0xff, 0x59, 0xc4, 0x6f, 0x63, 0x20, 0x7b, 0x5e,
	0xc4, 0x0a, 0xde, 0x22, 0x37, 0x21, 0xff, 0x9d, 0x90, 0xfd, 0x0b, 0x82, 0x83, 0xb7, 0xc8, 0x05,
	0xdb, 0x85, 0xd5, 0x16, 0x3f, 0x70, 0x20, 0x3d, 0xbe, 0x31, 0x61, 0x0a, 0x24, 0x9b, 0xea, 0xaa,
	0xaa, 0xbd, 0x52, 0xf9, 0x08, 0xcc, 0x82, 0x4c, 0xb3, 0x2e, 0xeb, 0x86, 0x2e, 0x37, 0x74, 0x45,
	0x5e, 0x2f, 0xd7, 0x0c, 0x59, 0xd7, 0x35, 0x9d, 0xe7, 0x20, 0x04, 0x69, 0x56, 0x51, 0xb5, 0x86,
	0xb1, 0xac, 0x35, 0x55, 0x89, 0x8f, 0xfa, 0xdf, 0x6a, 0xda, 0x0b, 0x45, 0x35, 0x24, 0xa5, 0x5e,
	0xae, 0xd4, 0x64, 0x89, 0x8f, 0xc1, 0x0c, 0xe0, 0x5f, 0xca, 0x8d, 0x15, 0x4d, 0x3a, 0x85, 0x8c,
	0xfb, 0xc8, 0x35, 0x5d, 0x36, 0x56, 0x34, 0x6d, 0x35, 0x54, 0x9c, 0x82, 0x73, 0x60, 0xa6, 0xaa,
	0xcb, 0x92, 0xac, 0x36, 0x94, 0x72, 0xad, 0x6e, 0x28, 0xea, 0x7a, 0xb9, 0xa6, 0x48, 0x7c, 0x62,
	0xb2, 0x20, 0x6f, 0xac, 0x29, 0xba, 0x2c, 0xf1, 0xc9, 0xca, 0x83, 0xbd, 0x2f, 0x42, 0x64, 0x6f,
	0x28, 0x70, 0xfb, 0x43, 0x81, 0x3b, 0x18, 0x0a, 0xdc, 0xe1, 0x50, 0xe0, 0xde, 0x1d, 0x09, 0x91,
	0xfd, 0x23, 0x21, 0x72, 0x70, 0x24, 0x44, 0x5e, 0x27, 0xc3, 0xe4, 0x37, 0x13, 0xec, 0xa6, 0xb9,
	0xf4, 0x23, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x98, 0xcf, 0xc2, 0xe3, 0x0a, 0x00, 0x00,
}

func (m *CommonConnectionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonConnectionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonConnectionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteAddress) > 0 {
		i -= len(m.RemoteAddress)
		copy(dAtA[i:], m.RemoteAddress)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.RemoteAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0x12
	}
	if m.InstanceID != 0 {
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.InstanceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonSessionDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSessionDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSessionDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SystemIdentity) > 0 {
		i -= len(m.SystemIdentity)
		copy(dAtA[i:], m.SystemIdentity)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.SystemIdentity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientConnectionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConnectionStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientConnectionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConnectionEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConnectionEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientSessionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSessionEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSessionEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.CommonSessionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientAuthenticationFailed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationFailed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientAuthenticationFailed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Reason != 0 {
		i = encodeVarintSessionEvents(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.CommonSessionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientAuthenticationOk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationOk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientAuthenticationOk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CommonSessionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClientAuthenticationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientAuthenticationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientAuthenticationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintSessionEvents(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CommonSessionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonConnectionDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSessionEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonConnectionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstanceID != 0 {
		n += 1 + sovSessionEvents(uint64(m.InstanceID))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.RemoteAddress)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *CommonSessionDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transport)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.SystemIdentity)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientConnectionStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	return n
}

func (m *ClientConnectionEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovSessionEvents(uint64(m.Duration))
	}
	return n
}

func (m *ClientSessionEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	if m.Duration != 0 {
		n += 1 + sovSessionEvents(uint64(m.Duration))
	}
	return n
}

func (m *ClientAuthenticationFailed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	if m.Reason != 0 {
		n += 1 + sovSessionEvents(uint64(m.Reason))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientAuthenticationOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func (m *ClientAuthenticationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonConnectionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = m.CommonSessionDetails.Size()
	n += 1 + l + sovSessionEvents(uint64(l))
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovSessionEvents(uint64(l))
	}
	return n
}

func sovSessionEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionEvents(x uint64) (n int) {
	return sovSessionEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonConnectionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonConnectionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonConnectionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			m.InstanceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSessionDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSessionDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSessionDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConnectionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConnectionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConnectionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientSessionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSessionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSessionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationFailed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationFailed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationFailed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= AuthFailReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationOk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationOk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationOk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientAuthenticationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientAuthenticationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientAuthenticationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonConnectionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonConnectionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSessionDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSessionDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionEvents = fmt.Errorf("proto: unexpected end of group")
)
