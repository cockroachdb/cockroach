// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/health_events.proto

package eventpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RuntimeStats is recorded every 10 seconds as server health metrics.
type RuntimeStats struct {
	CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The process RSS. Expressed as bytes.
	RSS int64 `protobuf:"varint,2,opt,name=rss,proto3" json:",omitempty"`
	// The number of goroutines.
	NumGoroutines int64 `protobuf:"varint,3,opt,name=num_goroutines,json=numGoroutines,proto3" json:",omitempty"`
	// The stack system memory used. Expressed as bytes.
	StackSys int64 `protobuf:"varint,4,opt,name=stack_sys,json=stackSys,proto3" json:",omitempty"`
	// The memory allocated by Go. Expressed as bytes.
	GoAlloc int64 `protobuf:"varint,5,opt,name=go_alloc,json=goAlloc,proto3" json:",omitempty"`
	// The total memory allocated by Go but not released. Expressed as bytes.
	GoTotal int64 `protobuf:"varint,6,opt,name=go_total,json=goTotal,proto3" json:",omitempty"`
	// Whether the Go memory statistics are stale.
	GoStatsStale bool `protobuf:"varint,7,opt,name=go_stats_stale,json=goStatsStale,proto3" json:",omitempty"`
	// The amount of heap fragmentation. Expressed as bytes.
	HeapFragmentation int64 `protobuf:"varint,8,opt,name=heap_fragmentation,json=heapFragmentation,proto3" json:",omitempty"`
	// The amount of heap reserved. Expressed as bytes.
	HeapReserved int64 `protobuf:"varint,9,opt,name=heap_reserved,json=heapReserved,proto3" json:",omitempty"`
	// The amount of heap released. Expressed as bytes.
	HeapReleased int64 `protobuf:"varint,10,opt,name=heap_released,json=heapReleased,proto3" json:",omitempty"`
	// The memory allocated outside of Go. Expressed as bytes.
	CGoAlloc int64 `protobuf:"varint,11,opt,name=cgo_alloc,json=cgoAlloc,proto3" json:",omitempty"`
	// The total memory allocated outside of Go but not released. Expressed as bytes.
	CGoTotal int64 `protobuf:"varint,12,opt,name=cgo_total,json=cgoTotal,proto3" json:",omitempty"`
	// The total number of calls outside of Go over time. Expressed as operations per second.
	CGoRate float32 `protobuf:"fixed32,13,opt,name=cgo_rate,json=cgoRate,proto3" json:",omitempty"`
	// The user CPU percentage.
	CPUUserPercent float32 `protobuf:"fixed32,14,opt,name=cpu_user_percent,json=cpuUserPercent,proto3" json:",omitempty"`
	// The system CPU percentage.
	CPUSysPercent float32 `protobuf:"fixed32,15,opt,name=cpu_sys_percent,json=cpuSysPercent,proto3" json:",omitempty"`
	// The GC pause percentage.
	GCPauseRatio float32 `protobuf:"fixed32,16,opt,name=gc_pause_ratio,json=gcPauseRatio,proto3" json:",omitempty"`
	// The total number of GC runs.
	GCCount int64 `protobuf:"varint,17,opt,name=gc_count,json=gcCount,proto3" json:",omitempty"`
	// The bytes received on all network interfaces since this process started.
	HostNetRecvBytes int64 `protobuf:"varint,18,opt,name=host_net_recv_bytes,json=hostNetRecvBytes,proto3" json:",omitempty"`
	// The bytes sent on all network interfaces since this process started.
	HostNetSendBytes int64 `protobuf:"varint,19,opt,name=host_net_send_bytes,json=hostNetSendBytes,proto3" json:",omitempty"`
}

func (m *RuntimeStats) Reset()         { *m = RuntimeStats{} }
func (m *RuntimeStats) String() string { return proto.CompactTextString(m) }
func (*RuntimeStats) ProtoMessage()    {}
func (*RuntimeStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2537843d9e7598, []int{0}
}
func (m *RuntimeStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuntimeStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RuntimeStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuntimeStats.Merge(m, src)
}
func (m *RuntimeStats) XXX_Size() int {
	return m.Size()
}
func (m *RuntimeStats) XXX_DiscardUnknown() {
	xxx_messageInfo_RuntimeStats.DiscardUnknown(m)
}

var xxx_messageInfo_RuntimeStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RuntimeStats)(nil), "cockroach.util.log.eventpb.RuntimeStats")
}

func init() {
	proto.RegisterFile("util/log/eventpb/health_events.proto", fileDescriptor_eb2537843d9e7598)
}

var fileDescriptor_eb2537843d9e7598 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x41, 0x6f, 0xda, 0x3c,
	0x18, 0xc7, 0x49, 0x79, 0xdf, 0x42, 0x5d, 0xa0, 0xad, 0xbb, 0x49, 0x1e, 0xd2, 0x12, 0x34, 0x4d,
	0x1a, 0xd5, 0x26, 0x90, 0xd6, 0x4d, 0x3b, 0xf5, 0x30, 0xd2, 0x0d, 0x69, 0x87, 0x09, 0x85, 0xf6,
	0xb2, 0x8b, 0xe5, 0x9a, 0x67, 0x01, 0x35, 0x89, 0xa3, 0xd8, 0x41, 0xe2, 0x5b, 0xec, 0x63, 0xf5,
	0xd8, 0x63, 0x2f, 0x8b, 0xb6, 0xf4, 0xd6, 0x4f, 0x31, 0xd9, 0xd0, 0x96, 0x42, 0xda, 0x0b, 0x4a,
	0x9e, 0xe7, 0xf7, 0xfb, 0x47, 0xfc, 0x13, 0x19, 0xbd, 0x4e, 0xd5, 0x24, 0xe8, 0x06, 0xc2, 0xef,
	0xc2, 0x14, 0x22, 0x15, 0x9f, 0x75, 0xc7, 0xc0, 0x02, 0x35, 0xa6, 0xe6, 0x56, 0x76, 0xe2, 0x44,
	0x28, 0x81, 0x9b, 0x5c, 0xf0, 0xf3, 0x44, 0x30, 0x3e, 0xee, 0x68, 0xbe, 0x13, 0x08, 0xbf, 0xb3,
	0xe0, 0x9b, 0xcf, 0x7c, 0xe1, 0x0b, 0x83, 0x75, 0xf5, 0xd5, 0xdc, 0x68, 0xbe, 0x5c, 0xcb, 0x5d,
	0x0e, 0x7c, 0xf5, 0xbb, 0x8a, 0x6a, 0x5e, 0x1a, 0xa9, 0x49, 0x08, 0x43, 0xc5, 0x94, 0xc4, 0x27,
	0x68, 0x93, 0x8b, 0x30, 0x14, 0x11, 0xb1, 0x5a, 0x56, 0x7b, 0xfb, 0x7d, 0xa7, 0xf3, 0xf8, 0x23,
	0x3b, 0xae, 0x21, 0xbf, 0xe8, 0xbb, 0x63, 0x50, 0x6c, 0x12, 0xc8, 0x5e, 0xed, 0x22, 0x73, 0x4a,
	0x97, 0x99, 0x63, 0xdd, 0x64, 0x4e, 0xc9, 0x5b, 0x64, 0xe1, 0x37, 0xa8, 0x9c, 0x48, 0x49, 0x36,
	0x5a, 0x56, 0xbb, 0xdc, 0x7b, 0x9e, 0x67, 0x4e, 0xd9, 0x1b, 0x0e, 0x6f, 0x32, 0x07, 0xbd, 0x13,
	0xe1, 0x44, 0x41, 0x18, 0xab, 0x99, 0xa7, 0x09, 0xfc, 0x11, 0x35, 0xa2, 0x34, 0xa4, 0xbe, 0x48,
	0x44, 0xaa, 0x26, 0x11, 0x48, 0x52, 0x36, 0x4e, 0x63, 0x05, 0xae, 0x47, 0x69, 0xd8, 0xbf, 0x83,
	0xf0, 0x5b, 0xb4, 0x25, 0x15, 0xe3, 0xe7, 0x54, 0xce, 0x24, 0xf9, 0xaf, 0xd0, 0xa8, 0x1a, 0x60,
	0x38, 0x93, 0xf8, 0x00, 0x55, 0x7d, 0x41, 0x59, 0x10, 0x08, 0x4e, 0xfe, 0x2f, 0x64, 0x2b, 0xbe,
	0xf8, 0xac, 0xd7, 0x0b, 0x54, 0x09, 0xc5, 0x02, 0xb2, 0xf9, 0x18, 0x7a, 0xa2, 0xd7, 0xf8, 0x03,
	0x6a, 0xf8, 0x82, 0x4a, 0x5d, 0xa2, 0xfe, 0x0d, 0x80, 0x54, 0x5a, 0x56, 0xbb, 0xba, 0x26, 0xd4,
	0x7c, 0x61, 0x9a, 0x1e, 0x6a, 0x06, 0x1f, 0x21, 0x3c, 0x06, 0x16, 0xd3, 0x9f, 0x09, 0xf3, 0x43,
	0x88, 0x14, 0x53, 0x13, 0x11, 0x91, 0x6a, 0xe1, 0xa3, 0xf6, 0x34, 0xf9, 0x75, 0x19, 0xc4, 0x87,
	0xa8, 0x6e, 0xf4, 0x04, 0x24, 0x24, 0x53, 0x18, 0x91, 0xad, 0x42, 0xb3, 0xa6, 0x21, 0x6f, 0xc1,
	0x2c, 0x49, 0x01, 0x30, 0x09, 0x23, 0x82, 0x9e, 0x92, 0xe6, 0x0c, 0xfe, 0x84, 0xb6, 0xf8, 0x5d,
	0x6b, 0xdb, 0x46, 0x68, 0xe6, 0x99, 0x53, 0x75, 0xfb, 0xf3, 0xaa, 0x56, 0xdb, 0xe6, 0xb7, 0x15,
	0x2e, 0xc4, 0x79, 0x87, 0xb5, 0x07, 0xa2, 0x29, 0xae, 0x40, 0xbc, 0x2d, 0x54, 0x5f, 0xd3, 0x84,
	0x29, 0x20, 0xf5, 0x96, 0xd5, 0xde, 0xe8, 0xbd, 0xc8, 0x33, 0xa7, 0xe2, 0xf6, 0x85, 0xc7, 0x14,
	0xac, 0xbe, 0x06, 0xee, 0x9b, 0x31, 0xfe, 0x86, 0x76, 0x79, 0x9c, 0xd2, 0x54, 0x42, 0x42, 0x63,
	0x48, 0x38, 0x44, 0x8a, 0x34, 0x8c, 0xdd, 0xca, 0x33, 0xa7, 0xe1, 0x0e, 0x4e, 0x4f, 0x25, 0x24,
	0x83, 0xf9, 0x66, 0x25, 0xa4, 0xc1, 0xe3, 0x74, 0x69, 0x8b, 0xfb, 0x68, 0x47, 0x67, 0xc9, 0x99,
	0xbc, 0x8b, 0xda, 0x31, 0x51, 0x4e, 0x9e, 0x39, 0x75, 0x77, 0x70, 0x3a, 0x9c, 0xc9, 0xe2, 0xa4,
	0x3a, 0x8f, 0xd3, 0xfb, 0x25, 0x3e, 0x46, 0x0d, 0x9f, 0xd3, 0x98, 0xa5, 0x12, 0xf4, 0xff, 0x99,
	0x08, 0xb2, 0x6b, 0x72, 0xec, 0x3c, 0x73, 0x6a, 0x7d, 0x77, 0xa0, 0x17, 0x9e, 0x9e, 0xaf, 0x7d,
	0x2b, 0xfc, 0x7e, 0xa7, 0x0b, 0xf1, 0x39, 0xe5, 0x22, 0x8d, 0x14, 0xd9, 0x33, 0x45, 0x9a, 0x42,
	0xfa, 0xae, 0xab, 0x47, 0x6b, 0xdf, 0x25, 0x37, 0x63, 0x7c, 0x84, 0xf6, 0xc7, 0x42, 0x2a, 0x1a,
	0x81, 0xa2, 0x09, 0xf0, 0x29, 0x3d, 0x9b, 0x29, 0x90, 0x04, 0x17, 0xbe, 0xf3, 0x5d, 0x8d, 0x7e,
	0x07, 0xe5, 0x01, 0x9f, 0xf6, 0x34, 0xf7, 0x40, 0x97, 0x10, 0x8d, 0x16, 0xfa, 0xfe, 0x93, 0xfa,
	0x10, 0xa2, 0x91, 0xd1, 0x7b, 0x07, 0x17, 0x7f, 0xed, 0xd2, 0x45, 0x6e, 0x5b, 0x97, 0xb9, 0x6d,
	0x5d, 0xe5, 0xb6, 0xf5, 0x27, 0xb7, 0xad, 0x5f, 0xd7, 0x76, 0xe9, 0xf2, 0xda, 0x2e, 0x5d, 0x5d,
	0xdb, 0xa5, 0x1f, 0x95, 0xc5, 0x61, 0x72, 0xb6, 0x69, 0x4e, 0xa4, 0xc3, 0x7f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x2c, 0x67, 0xa7, 0xd2, 0x0a, 0x05, 0x00, 0x00,
}

func (m *RuntimeStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuntimeStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostNetSendBytes != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.HostNetSendBytes))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.HostNetRecvBytes != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.HostNetRecvBytes))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.GCCount != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.GCCount))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.GCPauseRatio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GCPauseRatio))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.CPUSysPercent != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CPUSysPercent))))
		i--
		dAtA[i] = 0x7d
	}
	if m.CPUUserPercent != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CPUUserPercent))))
		i--
		dAtA[i] = 0x75
	}
	if m.CGoRate != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CGoRate))))
		i--
		dAtA[i] = 0x6d
	}
	if m.CGoTotal != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.CGoTotal))
		i--
		dAtA[i] = 0x60
	}
	if m.CGoAlloc != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.CGoAlloc))
		i--
		dAtA[i] = 0x58
	}
	if m.HeapReleased != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.HeapReleased))
		i--
		dAtA[i] = 0x50
	}
	if m.HeapReserved != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.HeapReserved))
		i--
		dAtA[i] = 0x48
	}
	if m.HeapFragmentation != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.HeapFragmentation))
		i--
		dAtA[i] = 0x40
	}
	if m.GoStatsStale {
		i--
		if m.GoStatsStale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.GoTotal != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.GoTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.GoAlloc != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.GoAlloc))
		i--
		dAtA[i] = 0x28
	}
	if m.StackSys != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.StackSys))
		i--
		dAtA[i] = 0x20
	}
	if m.NumGoroutines != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.NumGoroutines))
		i--
		dAtA[i] = 0x18
	}
	if m.RSS != 0 {
		i = encodeVarintHealthEvents(dAtA, i, uint64(m.RSS))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHealthEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintHealthEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovHealthEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RuntimeStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovHealthEvents(uint64(l))
	if m.RSS != 0 {
		n += 1 + sovHealthEvents(uint64(m.RSS))
	}
	if m.NumGoroutines != 0 {
		n += 1 + sovHealthEvents(uint64(m.NumGoroutines))
	}
	if m.StackSys != 0 {
		n += 1 + sovHealthEvents(uint64(m.StackSys))
	}
	if m.GoAlloc != 0 {
		n += 1 + sovHealthEvents(uint64(m.GoAlloc))
	}
	if m.GoTotal != 0 {
		n += 1 + sovHealthEvents(uint64(m.GoTotal))
	}
	if m.GoStatsStale {
		n += 2
	}
	if m.HeapFragmentation != 0 {
		n += 1 + sovHealthEvents(uint64(m.HeapFragmentation))
	}
	if m.HeapReserved != 0 {
		n += 1 + sovHealthEvents(uint64(m.HeapReserved))
	}
	if m.HeapReleased != 0 {
		n += 1 + sovHealthEvents(uint64(m.HeapReleased))
	}
	if m.CGoAlloc != 0 {
		n += 1 + sovHealthEvents(uint64(m.CGoAlloc))
	}
	if m.CGoTotal != 0 {
		n += 1 + sovHealthEvents(uint64(m.CGoTotal))
	}
	if m.CGoRate != 0 {
		n += 5
	}
	if m.CPUUserPercent != 0 {
		n += 5
	}
	if m.CPUSysPercent != 0 {
		n += 5
	}
	if m.GCPauseRatio != 0 {
		n += 6
	}
	if m.GCCount != 0 {
		n += 2 + sovHealthEvents(uint64(m.GCCount))
	}
	if m.HostNetRecvBytes != 0 {
		n += 2 + sovHealthEvents(uint64(m.HostNetRecvBytes))
	}
	if m.HostNetSendBytes != 0 {
		n += 2 + sovHealthEvents(uint64(m.HostNetSendBytes))
	}
	return n
}

func sovHealthEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHealthEvents(x uint64) (n int) {
	return sovHealthEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RuntimeStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHealthEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHealthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHealthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSS", wireType)
			}
			m.RSS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RSS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGoroutines", wireType)
			}
			m.NumGoroutines = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumGoroutines |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSys", wireType)
			}
			m.StackSys = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackSys |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoAlloc", wireType)
			}
			m.GoAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoAlloc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoTotal", wireType)
			}
			m.GoTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoStatsStale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GoStatsStale = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeapFragmentation", wireType)
			}
			m.HeapFragmentation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeapFragmentation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeapReserved", wireType)
			}
			m.HeapReserved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeapReserved |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeapReleased", wireType)
			}
			m.HeapReleased = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeapReleased |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CGoAlloc", wireType)
			}
			m.CGoAlloc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CGoAlloc |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CGoTotal", wireType)
			}
			m.CGoTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CGoTotal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CGoRate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CGoRate = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUUserPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CPUUserPercent = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUSysPercent", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CPUSysPercent = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCPauseRatio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GCPauseRatio = float32(math.Float32frombits(v))
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCCount", wireType)
			}
			m.GCCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GCCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostNetRecvBytes", wireType)
			}
			m.HostNetRecvBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostNetRecvBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostNetSendBytes", wireType)
			}
			m.HostNetSendBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostNetSendBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHealthEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHealthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHealthEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHealthEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHealthEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHealthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHealthEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHealthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHealthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHealthEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHealthEvents = fmt.Errorf("proto: unexpected end of group")
)
