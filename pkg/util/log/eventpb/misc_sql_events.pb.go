// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/misc_sql_events.proto

package eventpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// SetClusterSetting is recorded when a cluster setting is changed.
type SetClusterSetting struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	// The name of the affected cluster setting.
	SettingName string `protobuf:"bytes,3,opt,name=setting_name,json=settingName,proto3" json:",omitempty"`
	// The new value of the cluster setting.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:",omitempty"`
}

func (m *SetClusterSetting) Reset()         { *m = SetClusterSetting{} }
func (m *SetClusterSetting) String() string { return proto.CompactTextString(m) }
func (*SetClusterSetting) ProtoMessage()    {}
func (*SetClusterSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_misc_sql_events_e0a2254d3a9e79d6, []int{0}
}
func (m *SetClusterSetting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetClusterSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *SetClusterSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetClusterSetting.Merge(dst, src)
}
func (m *SetClusterSetting) XXX_Size() int {
	return m.Size()
}
func (m *SetClusterSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SetClusterSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SetClusterSetting proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SetClusterSetting)(nil), "cockroach.util.log.eventpb.SetClusterSetting")
}
func (m *SetClusterSetting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClusterSetting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMiscSqlEvents(dAtA, i, uint64(m.CommonEventDetails.Size()))
	n1, err := m.CommonEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintMiscSqlEvents(dAtA, i, uint64(m.CommonSQLEventDetails.Size()))
	n2, err := m.CommonSQLEventDetails.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.SettingName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiscSqlEvents(dAtA, i, uint64(len(m.SettingName)))
		i += copy(dAtA[i:], m.SettingName)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMiscSqlEvents(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeVarintMiscSqlEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SetClusterSetting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovMiscSqlEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovMiscSqlEvents(uint64(l))
	l = len(m.SettingName)
	if l > 0 {
		n += 1 + l + sovMiscSqlEvents(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMiscSqlEvents(uint64(l))
	}
	return n
}

func sovMiscSqlEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMiscSqlEvents(x uint64) (n int) {
	return sovMiscSqlEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetClusterSetting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscSqlEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClusterSetting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClusterSetting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscSqlEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscSqlEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscSqlEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettingName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscSqlEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscSqlEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscSqlEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiscSqlEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiscSqlEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscSqlEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMiscSqlEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMiscSqlEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMiscSqlEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMiscSqlEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiscSqlEvents   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("util/log/eventpb/misc_sql_events.proto", fileDescriptor_misc_sql_events_e0a2254d3a9e79d6)
}

var fileDescriptor_misc_sql_events_e0a2254d3a9e79d6 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x67, 0x5a, 0xad, 0x38, 0x2d, 0x82, 0xc1, 0x45, 0x08, 0x38, 0x29, 0x22, 0x52, 0x41,
	0x26, 0x54, 0xdf, 0x20, 0xd5, 0x9d, 0x08, 0x6d, 0x5c, 0xb9, 0x09, 0x69, 0x18, 0x62, 0x70, 0x26,
	0x93, 0x66, 0x26, 0x05, 0xdf, 0xc2, 0x8d, 0xef, 0x94, 0x65, 0x96, 0x5d, 0x05, 0x4d, 0x76, 0x7d,
	0x0a, 0xc9, 0x65, 0x21, 0x78, 0xe9, 0x6e, 0x2e, 0xdf, 0xff, 0x9d, 0x9f, 0x83, 0x2e, 0x52, 0x15,
	0x32, 0x8b, 0x89, 0xc0, 0xa2, 0x6b, 0x1a, 0xa9, 0x78, 0x69, 0xf1, 0x50, 0xfa, 0xae, 0x5c, 0x31,
	0xb7, 0x79, 0x90, 0x24, 0x4e, 0x84, 0x12, 0x9a, 0xe1, 0x0b, 0xff, 0x25, 0x11, 0x9e, 0xff, 0x4c,
	0xea, 0x04, 0x61, 0x22, 0x20, 0x5d, 0xc2, 0x38, 0x09, 0x44, 0x20, 0x1a, 0xcc, 0xaa, 0x4f, 0x6d,
	0xc2, 0x38, 0xfd, 0x61, 0xfe, 0x2e, 0x3c, 0x7b, 0xef, 0xa1, 0x63, 0x87, 0xaa, 0x19, 0x4b, 0xa5,
	0xa2, 0x89, 0x43, 0x95, 0x0a, 0xa3, 0x40, 0x7b, 0x44, 0x03, 0x5f, 0x70, 0x2e, 0x22, 0x1d, 0x8e,
	0xe1, 0x64, 0x78, 0x4d, 0xc8, 0xdf, 0x73, 0xc9, 0xac, 0x21, 0xef, 0xea, 0xdb, 0x2d, 0x55, 0x5e,
	0xc8, 0xa4, 0x3d, 0xca, 0x0a, 0x13, 0xe4, 0x85, 0x09, 0xb7, 0x85, 0x09, 0x16, 0x9d, 0x4b, 0x9b,
	0xa3, 0xbe, 0x5c, 0x31, 0xbd, 0xd7, 0x28, 0xa7, 0xbb, 0x95, 0xce, 0xfc, 0xfe, 0x1f, 0x6b, 0xed,
	0xd2, 0xa6, 0x68, 0x24, 0xdb, 0xce, 0x6e, 0xe4, 0x71, 0xaa, 0xf7, 0xc7, 0x70, 0x72, 0x68, 0x1f,
	0x6d, 0x0b, 0x13, 0x5d, 0x09, 0x1e, 0x2a, 0xca, 0x63, 0xf5, 0xba, 0x18, 0x76, 0xcc, 0x83, 0xc7,
	0xa9, 0x76, 0x8e, 0xf6, 0xd7, 0x1e, 0x4b, 0xa9, 0xbe, 0xf7, 0x2b, 0xdb, 0x7e, 0xda, 0x97, 0xd9,
	0x27, 0x06, 0x59, 0x89, 0x61, 0x5e, 0x62, 0xb8, 0x29, 0x31, 0xfc, 0x28, 0x31, 0x7c, 0xab, 0x30,
	0xc8, 0x2b, 0x0c, 0x36, 0x15, 0x06, 0x4f, 0x07, 0x5d, 0xd9, 0xe5, 0xa0, 0xd9, 0xe4, 0xcd, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x22, 0xcd, 0x01, 0xc4, 0x01, 0x00, 0x00,
}
