// Code generated by gen.go. DO NOT EDIT.

package eventpb

import (
	"strconv"

	"github.com/cockroachdb/cockroach/pkg/util/jsonbytes"
	"github.com/cockroachdb/redact"
)

// AppendJSONFields implements the EventPayload interface.
func (m *AlterDatabaseOwner) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterIndex) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.IndexName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"IndexName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.IndexName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.MutationID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"MutationID\":"...)
		b = strconv.AppendUint(b, uint64(m.MutationID), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterRole) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.RoleName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"RoleName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.RoleName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.Options) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Options\":["...)
		for i, v := range m.Options {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), v))
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterSchemaOwner) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterSequence) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SequenceName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SequenceName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SequenceName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.MutationID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"MutationID\":"...)
		b = strconv.AppendUint(b, uint64(m.MutationID), 10)
	}

	if len(m.CascadeDroppedViews) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"CascadeDroppedViews\":["...)
		for i, v := range m.CascadeDroppedViews {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterTableOwner) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterType) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *AlterTypeOwner) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ChangeDatabasePrivilege) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLPrivilegeEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ChangeSchemaPrivilege) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLPrivilegeEventDetails.AppendJSONFields(printComma, b)

	if m.SchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ChangeTablePrivilege) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLPrivilegeEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ChangeTypePrivilege) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLPrivilegeEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommentOnColumn) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.ColumnName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ColumnName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ColumnName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Comment != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Comment\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Comment)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NullComment {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NullComment\":true"...)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommentOnDatabase) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Comment != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Comment\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Comment)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NullComment {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NullComment\":true"...)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommentOnIndex) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.IndexName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"IndexName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.IndexName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Comment != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Comment\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Comment)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NullComment {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NullComment\":true"...)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommentOnTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Comment != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Comment\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Comment)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NullComment {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NullComment\":true"...)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonEventDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.Timestamp != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Timestamp\":"...)
		b = strconv.AppendInt(b, int64(m.Timestamp), 10)
	}

	if m.EventType != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"EventType\":\""...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), m.EventType))
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonNodeDecommissionDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.RequestingNodeID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"RequestingNodeID\":"...)
		b = strconv.AppendInt(b, int64(m.RequestingNodeID), 10)
	}

	if m.TargetNodeID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TargetNodeID\":"...)
		b = strconv.AppendInt(b, int64(m.TargetNodeID), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonNodeEventDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.NodeID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NodeID\":"...)
		b = strconv.AppendInt(b, int64(m.NodeID), 10)
	}

	if m.StartedAt != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"StartedAt\":"...)
		b = strconv.AppendInt(b, int64(m.StartedAt), 10)
	}

	if m.LastUp != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"LastUp\":"...)
		b = strconv.AppendInt(b, int64(m.LastUp), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonSQLEventDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.Statement != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Statement\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Statement)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.User != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"User\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.User)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.DescriptorID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DescriptorID\":"...)
		b = strconv.AppendUint(b, uint64(m.DescriptorID), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonSQLPrivilegeEventDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.Grantee != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Grantee\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Grantee)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.GrantedPrivileges) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"GrantedPrivileges\":["...)
		for i, v := range m.GrantedPrivileges {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), v))
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	if len(m.RevokedPrivileges) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"RevokedPrivileges\":["...)
		for i, v := range m.RevokedPrivileges {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), v))
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonSchemaChangeEventDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.InstanceID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"InstanceID\":"...)
		b = strconv.AppendInt(b, int64(m.InstanceID), 10)
	}

	if m.DescriptorID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DescriptorID\":"...)
		b = strconv.AppendUint(b, uint64(m.DescriptorID), 10)
	}

	if m.MutationID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"MutationID\":"...)
		b = strconv.AppendUint(b, uint64(m.MutationID), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CommonZoneConfigDetails) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	if m.Target != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Target\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Target)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Config != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Config\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Config)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.Options) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Options\":["...)
		for i, v := range m.Options {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ConvertToSchema) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewDatabaseParent != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewDatabaseParent\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewDatabaseParent)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateDatabase) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateIndex) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.IndexName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"IndexName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.IndexName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.MutationID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"MutationID\":"...)
		b = strconv.AppendUint(b, uint64(m.MutationID), 10)
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateRole) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.RoleName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"RoleName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.RoleName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateSchema) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateSequence) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SequenceName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SequenceName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SequenceName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateStatistics) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateType) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *CreateView) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.ViewName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ViewName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ViewName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Owner != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Owner\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Owner)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.ViewQuery != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ViewQuery\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ViewQuery)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropDatabase) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.DroppedSchemaObjects) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DroppedSchemaObjects\":["...)
		for i, v := range m.DroppedSchemaObjects {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropIndex) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.IndexName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"IndexName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.IndexName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.MutationID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"MutationID\":"...)
		b = strconv.AppendUint(b, uint64(m.MutationID), 10)
	}

	if len(m.CascadeDroppedViews) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"CascadeDroppedViews\":["...)
		for i, v := range m.CascadeDroppedViews {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropRole) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.RoleName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"RoleName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.RoleName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropSchema) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropSequence) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SequenceName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SequenceName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SequenceName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.CascadeDroppedViews) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"CascadeDroppedViews\":["...)
		for i, v := range m.CascadeDroppedViews {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropType) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *DropView) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.ViewName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ViewName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ViewName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if len(m.CascadeDroppedViews) > 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"CascadeDroppedViews\":["...)
		for i, v := range m.CascadeDroppedViews {
			if i > 0 {
				b = append(b, ',')
			}
			b = append(b, '"')
			b = append(b, redact.StartMarker()...)
			b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(v)))))
			b = append(b, redact.EndMarker()...)
			b = append(b, '"')
		}
		b = append(b, ']')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *FinishSchemaChange) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSchemaChangeEventDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *FinishSchemaChangeRollback) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSchemaChangeEventDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *NodeDecommissioned) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonNodeDecommissionDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *NodeDecommissioning) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonNodeDecommissionDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *NodeJoin) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonNodeEventDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *NodeRecommissioned) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonNodeDecommissionDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *NodeRestart) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonNodeEventDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *RemoveZoneConfig) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonZoneConfigDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *RenameDatabase) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.DatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"DatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.DatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewDatabaseName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewDatabaseName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewDatabaseName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *RenameSchema) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.SchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewSchemaName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewSchemaName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewSchemaName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *RenameTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewTableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewTableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewTableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *RenameType) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewTypeName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewTypeName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewTypeName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *ReverseSchemaChange) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSchemaChangeEventDetails.AppendJSONFields(printComma, b)

	if m.Error != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Error\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Error)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.SQLSTATE != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SQLSTATE\":\""...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), m.SQLSTATE))
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *SetClusterSetting) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.SettingName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"SettingName\":\""...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), m.SettingName))
		b = append(b, '"')
	}

	if m.Value != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Value\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Value)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *SetZoneConfig) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonZoneConfigDetails.AppendJSONFields(printComma, b)

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *TruncateTable) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.TableName != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"TableName\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.TableName)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *UnsafeDeleteDescriptor) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.ParentID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentID), 10)
	}

	if m.ParentSchemaID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentSchemaID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentSchemaID), 10)
	}

	if m.Name != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Name\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Name)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Force {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Force\":true"...)
	}

	if m.ForceNotice != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ForceNotice\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ForceNotice)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *UnsafeDeleteNamespaceEntry) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.ParentID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentID), 10)
	}

	if m.ParentSchemaID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentSchemaID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentSchemaID), 10)
	}

	if m.Name != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Name\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Name)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Force {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Force\":true"...)
	}

	if m.ForceNotice != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ForceNotice\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ForceNotice)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *UnsafeUpsertDescriptor) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.PreviousDescriptor != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"PreviousDescriptor\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.PreviousDescriptor)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.NewDescriptor != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"NewDescriptor\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.NewDescriptor)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.Force {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Force\":true"...)
	}

	if m.ForceNotice != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ForceNotice\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ForceNotice)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}

// AppendJSONFields implements the EventPayload interface.
func (m *UnsafeUpsertNamespaceEntry) AppendJSONFields(printComma bool, b redact.RedactableBytes) (bool, redact.RedactableBytes) {

	printComma, b = m.CommonEventDetails.AppendJSONFields(printComma, b)

	printComma, b = m.CommonSQLEventDetails.AppendJSONFields(printComma, b)

	if m.ParentID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentID), 10)
	}

	if m.ParentSchemaID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ParentSchemaID\":"...)
		b = strconv.AppendUint(b, uint64(m.ParentSchemaID), 10)
	}

	if m.Name != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Name\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.Name)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	if m.PreviousID != 0 {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"PreviousID\":"...)
		b = strconv.AppendUint(b, uint64(m.PreviousID), 10)
	}

	if m.Force {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"Force\":true"...)
	}

	if m.FailedValidation {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"FailedValidation\":true"...)
	}

	if m.ValidationErrors != "" {
		if printComma {
			b = append(b, ',')
		}
		printComma = true
		b = append(b, "\"ValidationErrors\":\""...)
		b = append(b, redact.StartMarker()...)
		b = redact.RedactableBytes(jsonbytes.EncodeString([]byte(b), string(redact.EscapeMarkers([]byte(m.ValidationErrors)))))
		b = append(b, redact.EndMarker()...)
		b = append(b, '"')
	}

	return printComma, b
}
