// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/events.proto

package eventpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CommonEventDetails contains the fields common to all events.
type CommonEventDetails struct {
	// The timestamp of the event. Expressed as nanoseconds since
	// the Unix epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:",omitempty"`
	// The type of the event.
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *CommonEventDetails) Reset()         { *m = CommonEventDetails{} }
func (m *CommonEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonEventDetails) ProtoMessage()    {}
func (*CommonEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_656955fd5b536468, []int{0}
}
func (m *CommonEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonEventDetails.Merge(m, src)
}
func (m *CommonEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonEventDetails proto.InternalMessageInfo

// CommonSQLEventDetails contains the fields common to all
// SQL events.
type CommonSQLEventDetails struct {
	// A normalized copy of the SQL statement that triggered the event.
	Statement string `protobuf:"bytes,1,opt,name=statement,proto3" json:",omitempty"`
	// The statement tag. This is separate from the statement string,
	// since the statement string can contain sensitive information. The
	// tag is guaranteed not to.
	Tag string `protobuf:"bytes,6,opt,name=tag,proto3" json:",omitempty" redact:"nonsensitive"`
	// The user account that triggered the event.
	// The special usernames `root` and `node` are not considered sensitive.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:",omitempty" redact:"safeif:root|node"`
	// The primary object descriptor affected by the operation. Set to zero for operations
	// that don't affect descriptors.
	DescriptorID uint32 `protobuf:"varint,3,opt,name=descriptor_id,json=descriptorId,proto3" json:",omitempty"`
	// The application name for the session where the event was emitted.
	// This is included in the event to ease filtering of logging output
	// by application.
	// Application names starting with a dollar sign (`$`) are not considered sensitive.
	ApplicationName string `protobuf:"bytes,4,opt,name=application_name,json=applicationName,proto3" json:",omitempty" redact:"safeif:\$.*"`
	// The mapping of SQL placeholders to their values, for prepared statements.
	PlaceholderValues []string `protobuf:"bytes,5,rep,name=placeholder_values,json=placeholderValues,proto3" json:",omitempty"`
}

func (m *CommonSQLEventDetails) Reset()         { *m = CommonSQLEventDetails{} }
func (m *CommonSQLEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSQLEventDetails) ProtoMessage()    {}
func (*CommonSQLEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_656955fd5b536468, []int{1}
}
func (m *CommonSQLEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSQLEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonSQLEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSQLEventDetails.Merge(m, src)
}
func (m *CommonSQLEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSQLEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSQLEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSQLEventDetails proto.InternalMessageInfo

// CommonSQLExecDetails contains the field common to all SQL query logs.
type CommonSQLExecDetails struct {
	// How the statement was being executed (exec/prepare, etc.)
	ExecMode string `protobuf:"bytes,1,opt,name=exec_mode,json=execMode,proto3" json:",omitempty" redact:"nonsensitive"`
	// Number of rows returned. For mutation statements (INSERT, etc) that
	// do not produce result rows, this field reports the number of rows affected.
	NumRows uint64 `protobuf:"varint,2,opt,name=num_rows,json=numRows,proto3" json:",omitempty"`
	// The SQLSTATE code for the error, if an error was encountered. Empty/omitted if no error.
	SQLSTATE string `protobuf:"bytes,3,opt,name=sqlstate,proto3" json:",omitempty" redact:"nonsensitive"`
	// The text of the error if any.
	ErrorText string `protobuf:"bytes,4,opt,name=error_text,json=errorText,proto3" json:",omitempty"`
	// Age of the query in milliseconds.
	Age float32 `protobuf:"fixed32,5,opt,name=age,proto3" json:",omitempty"`
	// Number of retries, when the txn was reretried automatically by the server.
	NumRetries uint32 `protobuf:"varint,6,opt,name=num_retries,json=numRetries,proto3" json:",omitempty"`
	// Whether the query contains a full table scan.
	FullTableScan bool `protobuf:"varint,7,opt,name=full_table_scan,json=fullTableScan,proto3" json:",omitempty"`
	// Whether the query contains a full secondary index scan.
	FullIndexScan bool `protobuf:"varint,8,opt,name=full_index_scan,json=fullIndexScan,proto3" json:",omitempty"`
	// The sequence number of the SQL transaction inside its session.
	TxnCounter uint32 `protobuf:"varint,9,opt,name=txn_counter,json=txnCounter,proto3" json:",omitempty"`
}

func (m *CommonSQLExecDetails) Reset()         { *m = CommonSQLExecDetails{} }
func (m *CommonSQLExecDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSQLExecDetails) ProtoMessage()    {}
func (*CommonSQLExecDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_656955fd5b536468, []int{2}
}
func (m *CommonSQLExecDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSQLExecDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonSQLExecDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSQLExecDetails.Merge(m, src)
}
func (m *CommonSQLExecDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSQLExecDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSQLExecDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSQLExecDetails proto.InternalMessageInfo

// CommonJobEventDetails contains the fields common to all job events.
type CommonJobEventDetails struct {
	// The ID of the job that triggered the event.
	JobID int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:",omitempty"`
	// The type of the job that triggered the event.
	JobType string `protobuf:"bytes,2,opt,name=job_type,json=jobType,proto3" json:",omitempty" redact:"nonsensitive"`
	// A description of the job that triggered the event. Some jobs populate the
	// description with an approximate representation of the SQL statement run to
	// create the job.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:",omitempty"`
	// The user account that triggered the event.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:",omitempty"`
	// The object descriptors affected by the job. Set to zero for operations
	// that don't affect descriptors.
	DescriptorIDs []uint32 `protobuf:"varint,5,rep,packed,name=descriptor_ids,json=descriptorIds,proto3" json:",omitempty"`
	// The status of the job that triggered the event. This allows the job to
	// indicate which phase execution it is in when the event is triggered.
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *CommonJobEventDetails) Reset()         { *m = CommonJobEventDetails{} }
func (m *CommonJobEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonJobEventDetails) ProtoMessage()    {}
func (*CommonJobEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_656955fd5b536468, []int{3}
}
func (m *CommonJobEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonJobEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommonJobEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonJobEventDetails.Merge(m, src)
}
func (m *CommonJobEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonJobEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonJobEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonJobEventDetails proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonEventDetails)(nil), "cockroach.util.log.eventpb.CommonEventDetails")
	proto.RegisterType((*CommonSQLEventDetails)(nil), "cockroach.util.log.eventpb.CommonSQLEventDetails")
	proto.RegisterType((*CommonSQLExecDetails)(nil), "cockroach.util.log.eventpb.CommonSQLExecDetails")
	proto.RegisterType((*CommonJobEventDetails)(nil), "cockroach.util.log.eventpb.CommonJobEventDetails")
}

func init() { proto.RegisterFile("util/log/eventpb/events.proto", fileDescriptor_656955fd5b536468) }

var fileDescriptor_656955fd5b536468 = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xc7, 0xe3, 0xcd, 0xe6, 0xd7, 0x6c, 0xd3, 0xc2, 0x68, 0x2b, 0xcc, 0x4a, 0xd8, 0x91, 0x85,
	0x20, 0x85, 0x92, 0x20, 0x55, 0x42, 0xa2, 0x12, 0xaa, 0xc8, 0xa6, 0x95, 0x52, 0x15, 0xd0, 0x26,
	0x11, 0x07, 0x84, 0x64, 0x8d, 0xed, 0x17, 0xd7, 0x8b, 0x3d, 0xcf, 0x78, 0xc6, 0xdb, 0xac, 0xc4,
	0x5f, 0xc0, 0x89, 0x23, 0x7f, 0x52, 0x8f, 0x3d, 0xf6, 0x14, 0x81, 0xf7, 0xd6, 0x23, 0x57, 0x2e,
	0xc8, 0x63, 0x27, 0x9b, 0x8d, 0x17, 0xa9, 0xdb, 0x53, 0x12, 0xcd, 0xe7, 0x3b, 0xf9, 0xce, 0x7b,
	0xef, 0xfb, 0xc8, 0x47, 0xa9, 0x0c, 0xc2, 0x61, 0x88, 0xfe, 0x10, 0xce, 0x80, 0xcb, 0xd8, 0x29,
	0x3e, 0xc5, 0x20, 0x4e, 0x50, 0x22, 0x3d, 0x72, 0xd1, 0xfd, 0x25, 0x41, 0xe6, 0x3e, 0x1f, 0xe4,
	0xe0, 0x20, 0x44, 0x7f, 0x50, 0x82, 0x47, 0x87, 0x3e, 0xfa, 0xa8, 0xb0, 0x61, 0xfe, 0xad, 0x50,
	0x1c, 0x99, 0x3e, 0xa2, 0x1f, 0xc2, 0x50, 0xfd, 0x72, 0xd2, 0xc5, 0x50, 0x06, 0x11, 0x08, 0xc9,
	0xa2, 0xb8, 0x00, 0xac, 0xdf, 0x35, 0x42, 0x8f, 0x31, 0x8a, 0x90, 0x3f, 0xce, 0x2f, 0x1a, 0x83,
	0x64, 0x41, 0x28, 0xe8, 0x7d, 0xd2, 0xd9, 0x90, 0xba, 0xd6, 0xd3, 0xfa, 0xf5, 0xd1, 0xed, 0x37,
	0x2b, 0x93, 0xdc, 0xc7, 0x28, 0x90, 0x10, 0xc5, 0xf2, 0x7c, 0x7a, 0x09, 0xd0, 0x27, 0x84, 0x28,
	0x1b, 0xb6, 0x3c, 0x8f, 0x41, 0xdf, 0xeb, 0x69, 0xfd, 0xce, 0xe8, 0xd3, 0xab, 0xf8, 0x3f, 0x2b,
	0xf3, 0x6e, 0x02, 0x1e, 0x73, 0xe5, 0x43, 0x8b, 0x23, 0x17, 0xc0, 0x45, 0x20, 0x83, 0x33, 0xb0,
	0xa6, 0x1d, 0x25, 0x9d, 0x9f, 0xc7, 0x60, 0xfd, 0x59, 0x27, 0x77, 0x0b, 0x33, 0xb3, 0x93, 0x67,
	0xbb, 0x7e, 0x84, 0x64, 0x12, 0x22, 0xe0, 0x52, 0xf9, 0xe9, 0x54, 0xfd, 0x6c, 0x00, 0xfa, 0x35,
	0xa9, 0x4b, 0xe6, 0xeb, 0xcd, 0x9b, 0x19, 0xc9, 0x35, 0xf4, 0x11, 0xd9, 0x4f, 0x05, 0x24, 0xe5,
	0x23, 0x3e, 0xaf, 0x68, 0x3f, 0x5c, 0x6b, 0x05, 0x5b, 0x40, 0xb0, 0x78, 0x98, 0x20, 0xca, 0xdf,
	0x38, 0x7a, 0x60, 0x4d, 0x95, 0x90, 0x1e, 0x93, 0xae, 0x07, 0xc2, 0x4d, 0x82, 0x58, 0x62, 0x62,
	0x07, 0x9e, 0x5e, 0xef, 0x69, 0xfd, 0xee, 0xc8, 0xc8, 0x56, 0xe6, 0xad, 0xf1, 0xe6, 0x60, 0x32,
	0xde, 0x71, 0x7f, 0xeb, 0x52, 0x34, 0xf1, 0xe8, 0x09, 0x79, 0x8f, 0xc5, 0x71, 0x18, 0xb8, 0x4c,
	0x06, 0xc8, 0x6d, 0xce, 0x22, 0xd0, 0xf7, 0x95, 0xa3, 0x4f, 0x2a, 0x8e, 0x0e, 0x77, 0x1c, 0xfd,
	0xfc, 0xf1, 0xe0, 0x33, 0x6b, 0x7a, 0x67, 0x4b, 0xff, 0x3d, 0x8b, 0x80, 0x7e, 0x43, 0x68, 0x1c,
	0x32, 0x17, 0x9e, 0x63, 0xe8, 0x41, 0x62, 0x9f, 0xb1, 0x30, 0x05, 0xa1, 0x37, 0x7a, 0xf5, 0x6b,
	0x4a, 0xf9, 0xfe, 0x16, 0xf9, 0xa3, 0x02, 0xad, 0x7f, 0xeb, 0xe4, 0xf0, 0xb2, 0x35, 0x4b, 0x70,
	0xd7, 0x9d, 0x19, 0x93, 0x0e, 0x2c, 0xc1, 0xb5, 0x23, 0xf4, 0xa0, 0xec, 0xcc, 0x5b, 0x57, 0xbc,
	0x9d, 0x2b, 0xbf, 0x43, 0x0f, 0xe8, 0x3d, 0xd2, 0xe6, 0x69, 0x64, 0x27, 0xf8, 0x42, 0xa8, 0xd2,
	0xef, 0x57, 0x3c, 0xb5, 0x78, 0x1a, 0x4d, 0xf1, 0x85, 0xa0, 0x3f, 0x90, 0xb6, 0xf8, 0x35, 0x54,
	0xcd, 0x56, 0xb5, 0xed, 0x8c, 0x1e, 0x64, 0x2b, 0xb3, 0x3d, 0x3b, 0x79, 0x36, 0x9b, 0x7f, 0x3b,
	0x7f, 0xfc, 0xd6, 0xff, 0xbd, 0xbe, 0x84, 0x7e, 0x41, 0x08, 0x24, 0x09, 0x26, 0xb6, 0x84, 0xa5,
	0x2c, 0xcb, 0x5c, 0x19, 0x2e, 0x45, 0xcc, 0x61, 0x29, 0x69, 0x8f, 0xd4, 0x99, 0x0f, 0x7a, 0xa3,
	0xa7, 0xf5, 0xf7, 0x2a, 0x5c, 0x7e, 0x44, 0x87, 0xe4, 0x40, 0x3d, 0x06, 0x64, 0x12, 0x80, 0x50,
	0x63, 0xd8, 0xad, 0x90, 0x24, 0x7f, 0x4f, 0x41, 0xd0, 0xaf, 0xc8, 0x9d, 0x45, 0x1a, 0x86, 0xb6,
	0x64, 0x4e, 0x08, 0xb6, 0x70, 0x19, 0xd7, 0x5b, 0x3d, 0xad, 0xdf, 0xae, 0x88, 0xba, 0x39, 0x36,
	0xcf, 0xa9, 0x99, 0xcb, 0xf8, 0x46, 0x17, 0x70, 0x0f, 0x96, 0x85, 0xae, 0xfd, 0xff, 0xba, 0x49,
	0x4e, 0x29, 0xdd, 0x90, 0x1c, 0xc8, 0x25, 0xb7, 0x5d, 0x4c, 0xb9, 0x84, 0x44, 0xef, 0x5c, 0x6f,
	0x50, 0x2e, 0xf9, 0x71, 0x41, 0x58, 0x6f, 0xf6, 0xd6, 0xc1, 0x7c, 0x8a, 0xce, 0x95, 0x60, 0x0e,
	0x48, 0xf3, 0x14, 0x9d, 0x7c, 0xce, 0x8b, 0x2d, 0xf1, 0x41, 0xb6, 0x32, 0x1b, 0x4f, 0xd1, 0xa9,
	0x0c, 0x78, 0xe3, 0x14, 0x9d, 0x89, 0x47, 0x47, 0xa4, 0x9d, 0xf3, 0xef, 0xb2, 0x28, 0x5a, 0xa7,
	0xe8, 0xe4, 0x6b, 0x82, 0x7e, 0x49, 0x0e, 0xd6, 0x69, 0x09, 0x90, 0x97, 0x43, 0xb0, 0x6b, 0x7f,
	0x1b, 0xa1, 0x56, 0x99, 0xea, 0xeb, 0x9b, 0x5b, 0x04, 0xf7, 0x09, 0xb9, 0x7d, 0x25, 0xb8, 0x45,
	0x38, 0xba, 0x23, 0x33, 0x5b, 0x99, 0xdd, 0xed, 0xe4, 0x8a, 0xdd, 0xe2, 0x6e, 0x47, 0x57, 0xd0,
	0x47, 0xa4, 0x99, 0xcf, 0x55, 0x2a, 0x6e, 0xba, 0x7f, 0x4a, 0xd9, 0xe8, 0xde, 0xcb, 0xbf, 0x8d,
	0xda, 0xcb, 0xcc, 0xd0, 0x5e, 0x65, 0x86, 0xf6, 0x3a, 0x33, 0xb4, 0xbf, 0x32, 0x43, 0xfb, 0xe3,
	0xc2, 0xa8, 0xbd, 0xba, 0x30, 0x6a, 0xaf, 0x2f, 0x8c, 0xda, 0x4f, 0xad, 0x72, 0xe9, 0x3b, 0x4d,
	0xb5, 0xc4, 0x1f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x52, 0x0d, 0x8c, 0xa1, 0x38, 0x06, 0x00,
	0x00,
}

func (m *CommonEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonSQLEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSQLEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSQLEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PlaceholderValues) > 0 {
		for iNdEx := len(m.PlaceholderValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlaceholderValues[iNdEx])
			copy(dAtA[i:], m.PlaceholderValues[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.PlaceholderValues[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ApplicationName) > 0 {
		i -= len(m.ApplicationName)
		copy(dAtA[i:], m.ApplicationName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ApplicationName)))
		i--
		dAtA[i] = 0x22
	}
	if m.DescriptorID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.DescriptorID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Statement) > 0 {
		i -= len(m.Statement)
		copy(dAtA[i:], m.Statement)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Statement)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonSQLExecDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSQLExecDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonSQLExecDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxnCounter != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.TxnCounter))
		i--
		dAtA[i] = 0x48
	}
	if m.FullIndexScan {
		i--
		if m.FullIndexScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FullTableScan {
		i--
		if m.FullTableScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.NumRetries != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NumRetries))
		i--
		dAtA[i] = 0x30
	}
	if m.Age != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Age))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.ErrorText) > 0 {
		i -= len(m.ErrorText)
		copy(dAtA[i:], m.ErrorText)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ErrorText)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SQLSTATE) > 0 {
		i -= len(m.SQLSTATE)
		copy(dAtA[i:], m.SQLSTATE)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SQLSTATE)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NumRows != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NumRows))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExecMode) > 0 {
		i -= len(m.ExecMode)
		copy(dAtA[i:], m.ExecMode)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ExecMode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonJobEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonJobEventDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonJobEventDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DescriptorIDs) > 0 {
		dAtA2 := make([]byte, len(m.DescriptorIDs)*10)
		var j1 int
		for _, num := range m.DescriptorIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.JobType) > 0 {
		i -= len(m.JobType)
		copy(dAtA[i:], m.JobType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.JobType)))
		i--
		dAtA[i] = 0x12
	}
	if m.JobID != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.JobID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovEvents(uint64(m.Timestamp))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *CommonSQLEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DescriptorID != 0 {
		n += 1 + sovEvents(uint64(m.DescriptorID))
	}
	l = len(m.ApplicationName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PlaceholderValues) > 0 {
		for _, s := range m.PlaceholderValues {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *CommonSQLExecDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExecMode)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.NumRows != 0 {
		n += 1 + sovEvents(uint64(m.NumRows))
	}
	l = len(m.SQLSTATE)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ErrorText)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Age != 0 {
		n += 5
	}
	if m.NumRetries != 0 {
		n += 1 + sovEvents(uint64(m.NumRetries))
	}
	if m.FullTableScan {
		n += 2
	}
	if m.FullIndexScan {
		n += 2
	}
	if m.TxnCounter != 0 {
		n += 1 + sovEvents(uint64(m.TxnCounter))
	}
	return n
}

func (m *CommonJobEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobID != 0 {
		n += 1 + sovEvents(uint64(m.JobID))
	}
	l = len(m.JobType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.DescriptorIDs) > 0 {
		l = 0
		for _, e := range m.DescriptorIDs {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSQLEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSQLEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSQLEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceholderValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceholderValues = append(m.PlaceholderValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSQLExecDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSQLExecDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSQLExecDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRows", wireType)
			}
			m.NumRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRows |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQLSTATE", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQLSTATE = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Age = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRetries", wireType)
			}
			m.NumRetries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRetries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTableScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullTableScan = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullIndexScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullIndexScan = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnCounter", wireType)
			}
			m.TxnCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnCounter |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonJobEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonJobEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonJobEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DescriptorIDs = append(m.DescriptorIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvents
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DescriptorIDs) == 0 {
					m.DescriptorIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DescriptorIDs = append(m.DescriptorIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorIDs", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
