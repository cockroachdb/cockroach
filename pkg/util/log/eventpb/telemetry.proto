// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.util.log.eventpb;
option go_package = "eventpb";

import "gogoproto/gogo.proto";
import "util/log/eventpb/events.proto";
import "util/log/eventpb/sql_audit_events.proto";

// Category: Telemetry events
// Channel: TELEMETRY

// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// The comment at the top has a specific format for the doc generator.
// *Really look at doc.go before modifying this file.*

// SampledQuery is the SQL query event logged to the telemetry channel. It
// contains common SQL event/execution details.
message SampledQuery {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLEventDetails sql = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLExecDetails exec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // skipped_queries indicate how many SQL statements were not
  // considered for sampling prior to this one. If the field is
  // omitted, or its value is zero, this indicates that no statement
  // was omitted since the last event.
  uint64 skipped_queries = 4 [(gogoproto.jsontag) = ",omitempty"];

  // Cost of the query as estimated by the optimizer.
  double cost_estimate = 5 [(gogoproto.jsontag) = ",omitempty"];

  // The distribution of the DistSQL query plan (local, full, or partial).
  string distribution = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// CapturedIndexUsageStats
message CapturedIndexUsageStats {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // Couldn't use roachpb.CollectedIndexUsageStatistics due to circular dependency.

  // TotalReadCount is the number of times this index has been read from.
  uint64 total_read_count = 2;

  // LastRead is the timestamp that this index was last being read from.
  string last_read = 3 [(gogoproto.jsontag) = ",omitempty"];

  // TableID is the ID of the table this index is created on. This is same as
  // descpb.TableID and is unique within the cluster.
  uint32 table_id = 4 [(gogoproto.customname) = "TableID"];

  // IndexID is the ID of the index within the scope of the given table.
  uint32 index_id = 5 [(gogoproto.customname) = "IndexID"];

  string database_name = 6 [(gogoproto.jsontag) = ",omitempty"];
  string table_name = 7 [(gogoproto.jsontag) = ",omitempty"];
  string index_name = 8 [(gogoproto.jsontag) = ",omitempty"];
  string index_type = 9 [(gogoproto.jsontag) = ",omitempty"];
  bool is_unique = 10 [(gogoproto.jsontag) = ",omitempty"];
  bool is_inverted = 11 [(gogoproto.jsontag) = ",omitempty"];
}

// CreateChangefeed is an event for any CREATE CHANGEFEED query that
// successfully starts running.  Failed CREATE statements will show up as
// ChangefeedFailed events.
message CreateChangefeed {
  CommonChangefeedEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
}

// ChangefeedFailed is an event for any Changefeed failure since the plan hook
// was triggered.
message ChangefeedFailed {
  CommonChangefeedEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // The reason / environment with which the changefeed failed (ex:
  // connection_closed, changefeed_behind)
  string failure_type = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// RecoveryEvent is an event that is logged on every invocation of BACKUP,
// RESTORE, and on every BACKUP schedule creation, with the appropriate subset
// of fields populated depending on the type of event. This event is is also
// logged whenever a BACKUP and RESTORE job completes or fails.
message RecoveryEvent {
  // Common fields for all events.
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  string recovery_type = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Fields that are common to BACKUP and RESTORE statements.

  // TargetScope is the largest scope of the targets that the user is backing up
  // or restoring based on the following order:
  // table < schema < database < full cluster.
  string target_scope = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsMultiregionTarget is true if any of the targets contain objects with
  // multi-region primitives.
  bool is_multiregion_target = 4 [(gogoproto.jsontag) = ",omitempty"];

  // TargetCount is the number of targets the in the BACKUP/RESTORE.
  uint32 target_count = 5 [(gogoproto.jsontag) = ",omitempty"];

  // DestinationSubdirType is
  // - latest: if using the latest subdir
  // - standard: if using a date-based subdir
  // - custom: if using a custom subdir that's not date-based
  string destination_subdir_type = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // DestinationStorageTypes are the types of storage that the user is backing
  // up to or restoring from.
  repeated string destination_storage_types = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // AuthTypes are the types of authentication methods that the user is using to
  // access the storage.
  repeated string auth_types = 8 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsLocalityAware indicates if the BACKUP or RESTORE is locality aware.
  bool is_locality_aware = 9 [(gogoproto.jsontag) = ",omitempty"];

  // AsOf is the expression provided in the AS OF SYSTEM TIME clause.
  string as_of = 10 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // WithRevisionHistory is true if the BACKUP includes revision history.
  bool with_revision_history = 11 [(gogoproto.jsontag) = ",omitempty"];

  // IsDetached is true if the BACKUP/RESTORE is running in DETACHED mode.
  bool is_detached = 12 [(gogoproto.jsontag) = ",omitempty"];

  // HasEncryptionPassphrase is true if the user provided an encryption
  // passphrase to encrypt/decrypt their backup.
  bool has_encryption_passphrase = 13 [(gogoproto.jsontag) = ",omitempty"];

  // KMSType is the type of KMS the user is using to encrypt/decrypt their
  // backup.
  string kms_type = 14 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSType", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // KMSCount is the number of KMS the user is using.
  uint32 kms_count = 15 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSCount"];

  // Fields that are common to BACKUP and RESTORE jobs.

  // JobID is the ID of the BACKUP/RESTORE job.
  uint64 job_id = 16 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "JobID"];
  // ScheduleID is the ID of the corresponding schedule of the job.
  uint64 schedule_id = 17 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "ScheduleID"];
  // ResultStatus indicates whether the job succeeded or failed.
  string result_status = 18 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
  // ErrorText is the text of the error that caused the job to fail.
  string error_text = 19 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Fields only for BACKUP schedules.

  // IncrementalScheduleID is the ID of the incremental backup schedule.
  uint64 incremental_schedule_id = 20[(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "IncrementalScheduleID"];

  // FullScheduleID is the ID of the full backup schedule.
  uint64 full_schedule_id = 21[(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "FullScheduleID"];

  // RecurringCron is the crontab for the incremental backup.
  string recurring_cron = 22 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // FullBackupCron is the crontab for the full backup.
  string full_backup_cron = 23 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // CustomFirstRunTime is the timestamp for the user configured first run time.
  string custom_first_run_time = 24 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // OnExecutionFailure describes the desired behavior if the schedule fails to
  // execute.
  string on_execution_failure = 25 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // OnPreviousRunning describes the desired behavior if the previously
  // scheduled BACKUP is still running.
  string on_previous_running = 26 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  bool ignore_existing_backup = 27 [(gogoproto.jsontag) = ",omitempty"];

  // Fields only for RESTORE.

  // IntoDB is the name of the database that a table should be restored into.
  string into_db = 28 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "IntoDB", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // RenameDB is the new name of a restored database.
  string rename_db = 29 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "RenameDB", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  bool skip_missing_fk = 30 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "SkipMissingFK"];
  bool skip_missing_sequences = 31 [(gogoproto.jsontag) = ",omitempty"];
  bool skip_missing_views = 32 [(gogoproto.jsontag) = ",omitempty"];
  bool skip_localities_check = 33 [(gogoproto.jsontag) = ",omitempty"];

  // DebugPauseOn is the type of event that the restore should pause on for
  // debugging purposes.
  string debug_pause_on = 34 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}
