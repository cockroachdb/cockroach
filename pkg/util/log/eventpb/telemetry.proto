// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.util.log.eventpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/util/log/eventpb";

import "gogoproto/gogo.proto";
import "sql/catalog/descpb/structured.proto";
import "util/log/eventpb/events.proto";
import "util/log/eventpb/sql_audit_events.proto";
import "util/log/logpb/event.proto";

// Category: Telemetry events
// Channel: TELEMETRY

// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// The comment at the top has a specific format for the doc generator.
// *Really look at doc.go before modifying this file.*

// CapturedIndexUsageStats
message CapturedIndexUsageStats {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // Couldn't use roachpb.CollectedIndexUsageStatistics due to circular dependency.

  // TotalReadCount is the number of times the index has been read.
  uint64 total_read_count = 2;

  // LastRead is the timestamp at which the index was last read.
  string last_read = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TableID is the ID of the table on which the index was created. This is same as
  // descpb.TableID and is unique within the cluster.
  uint32 table_id = 4 [(gogoproto.customname) = "TableID"];

  // IndexID is the ID of the index within the scope of the given table.
  uint32 index_id = 5 [(gogoproto.customname) = "IndexID"];

  // DatabaseName is the name of the database in which the index was created.
  string database_name = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TableName is the name of the table on which the index was created.
  string table_name = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IndexName is the name of the index within the scope of the given table.
  string index_name = 8 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IndexType is the type of the index. Index types include "primary" and "secondary".
  string index_type = 9 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsUnique indicates if the index has a UNIQUE constraint.
  bool is_unique = 10 [(gogoproto.jsontag) = ",omitempty"];

  // IsInverted indicates if the index is an inverted index.
  bool is_inverted = 11 [(gogoproto.jsontag) = ",omitempty"];

  // CreatedAt is the timestamp at which the index was created.
  string created_at = 12 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // SchemaName is the name of the schema in which the index was created.
  string schema_name = 13 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// RecoveryEvent is an event that is logged on every invocation of BACKUP,
// RESTORE, and on every BACKUP schedule creation, with the appropriate subset
// of fields populated depending on the type of event. This event is is also
// logged whenever a BACKUP and RESTORE job completes or fails.
message RecoveryEvent {
  // Common fields for all events.
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // RecoveryType is the type of recovery described by this event, which is one of
  // - backup
  // - scheduled_backup
  // - create_schedule
  // - restore
  //
  // It can also be a job event corresponding to the recovery, which is one of
  // - backup_job
  // - scheduled_backup_job
  // - restore_job
  string recovery_type = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customtype) = "RecoveryEventType", (gogoproto.nullable) = false, (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Fields that are common to BACKUP and RESTORE statements.

  // TargetScope is the largest scope of the targets that the user is backing up
  // or restoring based on the following order:
  // table < schema < database < full cluster.
  string target_scope = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsMultiregionTarget is true if any of the targets contain objects with
  // multi-region primitives.
  bool is_multiregion_target = 4 [(gogoproto.jsontag) = ",omitempty"];

  // TargetCount is the number of targets the in the BACKUP/RESTORE.
  uint32 target_count = 5 [(gogoproto.jsontag) = ",omitempty"];

  reserved 6; 

  // DestinationStorageTypes are the types of storage that the user is backing
  // up to or restoring from.
  repeated string destination_storage_types = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // DestinationAuthTypes are the types of authentication methods that the user
  // is using to access the destination storage.
  repeated string destination_auth_types = 8 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsLocalityAware indicates if the BACKUP or RESTORE is locality aware.
  bool is_locality_aware = 9 [(gogoproto.jsontag) = ",omitempty"];

  reserved 10;

  // WithRevisionHistory is true if the BACKUP includes revision history.
  bool with_revision_history = 11 [(gogoproto.jsontag) = ",omitempty"];

  // HasEncryptionPassphrase is true if the user provided an encryption
  // passphrase to encrypt/decrypt their backup.
  bool has_encryption_passphrase = 13 [(gogoproto.jsontag) = ",omitempty"];

  // KMSType is the type of KMS the user is using to encrypt/decrypt their
  // backup.
  string kms_type = 14 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSType", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // KMSCount is the number of KMS the user is using.
  uint32 kms_count = 15 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSCount"];

  // Options contain all the names of the options specified by the user in the
  // BACKUP or RESTORE statement. For options that are accompanied by a value,
  // only those with non-empty values will be present.
  //
  // It's important to note that there are no option values anywhere in the
  // event payload. Future changes to telemetry should refrain from adding
  // values to the payload unless they are properly redacted.
  repeated string options = 16 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  reserved 17;

  // Fields that are common to BACKUP and RESTORE jobs.

  // JobID is the ID of the BACKUP/RESTORE job.
  uint64 job_id = 18 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "JobID"];
  // ResultStatus indicates whether the job succeeded or failed.
  string result_status = 20 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
  // ErrorText is the text of the error that caused the job to fail.
  string error_text = 21 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customtype) = "github.com/cockroachdb/redact.RedactableString", (gogoproto.nullable) = false, (gogoproto.moretags) = "redact:\"mixed\""];

  // Fields only for BACKUP schedules.

  // RecurringCron is the crontab for the incremental backup.
  string recurring_cron = 24 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // FullBackupCron is the crontab for the full backup.
  string full_backup_cron = 25 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // CustomFirstRunTime is the timestamp for the user configured first run time.
  // Expressed as nanoseconds since the Unix epoch.
  int64 custom_first_run_time = 26 [(gogoproto.jsontag) = ",omitempty"];

  reserved 27;

  reserved 28;

  // IgnoreExistingBackup is true iff the BACKUP schedule should still be
  // created even if a backup is already present in its destination.
  bool ignore_existing_backup = 29 [(gogoproto.jsontag) = ",omitempty"];

  // The application name for the session where recovery event was created.
  string application_name = 30 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // NumRows is the number of rows successfully imported, backed up or restored.
  int64 num_rows = 31 [(gogoproto.jsontag) = ",omitempty"];
}

// SchemaDescriptor is an event for schema telemetry, whose purpose is
// to take periodic snapshots of the cluster's SQL schema and publish them in
// the telemetry log channel. For all intents and purposes, the data in such a
// snapshot can be thought of the outer join of certain system tables:
// namespace, descriptor, and at some point perhaps zones, etc.
//
// Snapshots are too large to conveniently be published as a single log event,
// so instead they're broken down into SchemaDescriptor events which
// contain the data in one record of this outer join projection. These events
// are prefixed by a header (a SchemaSnapshotMetadata event).
message SchemaDescriptor {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // SnapshotID is the unique identifier of the snapshot that this event
  // is part of.
  string snapshot_id = 2 [(gogoproto.customname) = "SnapshotID", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // ParentDatabaseID matches the same key column in system.namespace.
  uint32 parent_database_id = 3 [(gogoproto.customname) = "ParentDatabaseID", (gogoproto.jsontag) = ",omitempty"];
  // ParentSchemaID matches the same key column in system.namespace.
  uint32 parent_schema_id = 4 [(gogoproto.customname) = "ParentSchemaID", (gogoproto.jsontag) = ",omitempty"];
  // Name matches the same key column in system.namespace.
  string name = 5 [(gogoproto.moretags) = "redact:\"nonsensitive\""];
  // DescID matches the 'id' column in system.namespace and system.descriptor.
  uint32 desc_id = 6 [(gogoproto.customname) = "DescID", (gogoproto.jsontag) = ",omitempty"];
  // Desc matches the 'descriptor' column in system.descriptor.
  // Some contents of the descriptor may be redacted to prevent leaking PII.
  cockroach.sql.sqlbase.Descriptor desc = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TODO(postamar): include system.zones data.
}

// SchemaSnapshotMetadata is an event describing a schema snapshot, which
// is a set of SchemaDescriptor messages sharing the same SnapshotID.
message SchemaSnapshotMetadata {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // SnapshotID is the unique identifier of this snapshot.
  string snapshot_id = 2 [(gogoproto.customname) = "SnapshotID", (gogoproto.moretags) = "redact:\"nonsensitive\""];
  // NumRecords is how many SchemaDescriptor events are in the
  // snapshot.
  uint32 num_records = 3;
  // AsOfTimestamp is when the snapshot was taken.
  // This is equivalent to the timestamp given in the AS OF SYSTEM TIME
  // clause when querying the namespace and descriptor tables in the
  // system database.
  // Expressed as nanoseconds since the Unix epoch.
  int64 as_of_timestamp = 4 [(gogoproto.jsontag) = ",omitempty"];

  // Errors records any errors encountered when post-processing this snapshot,
  // which includes the redaction of any potential PII.
  repeated string errors = 5 [(gogoproto.jsontag) = ",omitempty"];
}
