// Copyright 2021 The Cockroach Authors.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.txt.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0, included in the file
// licenses/APL.txt.

syntax = "proto3";
package cockroach.util.log.eventpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/util/log/eventpb";

import "gogoproto/gogo.proto";
import "sql/catalog/descpb/structured.proto";
import "util/log/eventpb/events.proto";
import "util/log/eventpb/sql_audit_events.proto";
import "util/log/logpb/event.proto";

// Category: Telemetry events
// Channel: TELEMETRY

// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// The comment at the top has a specific format for the doc generator.
// *Really look at doc.go before modifying this file.*


// SampledQuery is the SQL query event logged to the telemetry channel. It
// contains common SQL event/execution details.
message SampledQuery {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLEventDetails sql = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLExecDetails exec = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // skipped_queries indicate how many SQL statements were not
  // considered for sampling prior to this one. If the field is
  // omitted, or its value is zero, this indicates that no statement
  // was omitted since the last event.
  uint64 skipped_queries = 4 [(gogoproto.jsontag) = ",omitempty"];

  // Cost of the query as estimated by the optimizer.
  double cost_estimate = 5 [(gogoproto.jsontag) = ",omitempty"];

  // The distribution of the DistSQL query plan (local, full, or partial).
  string distribution = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // The query's plan gist bytes as a base64 encoded string.
  string plan_gist = 7 [(gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // SessionID is the ID of the session that initiated the query.
  string session_id = 8 [(gogoproto.customname) = "SessionID", (gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Name of the database that initiated the query.
  string database = 9 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Statement ID of the query.
  string statement_id = 10 [(gogoproto.customname) = "StatementID", (gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Transaction ID of the query.
  string transaction_id = 11 [(gogoproto.customname) = "TransactionID", (gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Statement fingerprint ID of the query.
  uint64 statement_fingerprint_id = 13 [(gogoproto.customname) = "StatementFingerprintID", (gogoproto.jsontag) = ',omitempty'];

  // Maximum number of rows scanned by a full scan, as estimated by the
  // optimizer.
  double max_full_scan_rows_estimate = 14 [(gogoproto.jsontag) = ",omitempty"];

  // Total number of rows read by all scans in the query, as estimated by the
  // optimizer.
  double total_scan_rows_estimate = 15 [(gogoproto.jsontag) = ",omitempty"];

  // The number of rows output by the query, as estimated by the optimizer.
  double output_rows_estimate = 16 [(gogoproto.jsontag) = ",omitempty"];

  // Whether table statistics were available to the optimizer when planning the
  // query.
  bool stats_available = 17 [(gogoproto.jsontag) = ",omitempty"];

  // The maximum number of nanoseconds that have passed since stats were
  // collected on any table scanned by this query.
  int64 nanos_since_stats_collected = 18 [(gogoproto.jsontag) = ",omitempty"];

  // The number of bytes read from disk.
  int64 bytes_read = 19 [(gogoproto.jsontag) = ",omitempty"];

  // The number of rows read from disk.
  int64 rows_read = 20 [(gogoproto.jsontag) = ",omitempty"];

  // The number of rows written.
  int64 rows_written = 21 [(gogoproto.jsontag) = ",omitempty"];

  // The number of inner joins in the query plan.
  int64 inner_join_count = 22 [(gogoproto.jsontag) = ",omitempty"];

  // The number of left (or right) outer joins in the query plan.
  int64 left_outer_join_count = 23 [(gogoproto.jsontag) = ",omitempty"];

  // The number of full outer joins in the query plan.
  int64 full_outer_join_count = 24 [(gogoproto.jsontag) = ",omitempty"];

  // The number of semi joins in the query plan.
  int64 semi_join_count = 25 [(gogoproto.jsontag) = ",omitempty"];

  // The number of anti joins in the query plan.
  int64 anti_join_count = 26 [(gogoproto.jsontag) = ",omitempty"];

  // The number of intersect all joins in the query plan.
  int64 intersect_all_join_count = 27 [(gogoproto.jsontag) = ",omitempty"];

  // The number of except all joins in the query plan.
  int64 except_all_join_count = 28 [(gogoproto.jsontag) = ",omitempty"];

  // The number of hash joins in the query plan.
  int64 hash_join_count = 29 [(gogoproto.jsontag) = ",omitempty"];

  // The number of cross joins in the query plan.
  int64 cross_join_count = 30 [(gogoproto.jsontag) = ",omitempty"];

  // The number of index joins in the query plan.
  int64 index_join_count = 31 [(gogoproto.jsontag) = ",omitempty"];

  // The number of lookup joins in the query plan.
  int64 lookup_join_count = 32 [(gogoproto.jsontag) = ",omitempty"];

  // The number of merge joins in the query plan.
  int64 merge_join_count = 33 [(gogoproto.jsontag) = ",omitempty"];

  // The number of inverted joins in the query plan.
  int64 inverted_join_count = 34 [(gogoproto.jsontag) = ",omitempty"];

  // The number of apply joins in the query plan.
  int64 apply_join_count = 35 [(gogoproto.jsontag) = ",omitempty"];

  // The number of zig zag joins in the query plan.
  int64 zig_zag_join_count = 36 [(gogoproto.jsontag) = ",omitempty"];

  // The duration of time in nanoseconds that the query experienced contention.
  int64 contention_nanos = 37 [(gogoproto.jsontag) = ',omitempty'];

  // The regions of the nodes where SQL processors ran.
  repeated string regions = 38 [(gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // The number of network bytes sent by nodes for this query.
  int64 network_bytes_sent = 39 [(gogoproto.jsontag) = ',omitempty'];

  // The maximum amount of memory usage by nodes for this query.
  int64 max_mem_usage = 40 [(gogoproto.jsontag) = ',omitempty'];

  // The maximum amount of disk usage by nodes for this query.
  int64 max_disk_usage = 41 [(gogoproto.jsontag) = ',omitempty'];

  // The number of bytes read at the KV layer for this query.
  int64 kv_bytes_read = 42 [(gogoproto.customname) = "KVBytesRead", (gogoproto.jsontag) = ',omitempty'];

  // The number of key-value pairs read at the KV layer for this query.
  int64 kv_pairs_read = 75 [(gogoproto.customname) = "KVPairsRead", (gogoproto.jsontag) = ',omitempty'];

  // The number of rows read at the KV layer for this query.
  int64 kv_rows_read = 43 [(gogoproto.customname) = "KVRowsRead", (gogoproto.jsontag) = ',omitempty'];

  // The number of network messages sent by nodes for this query.
  int64 network_messages = 44 [(gogoproto.jsontag) = ',omitempty'];

  // Generated index recommendations for this query.
  repeated string index_recommendations = 45 [(gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // The number of scans in the query plan.
  int64 scan_count = 46 [(gogoproto.jsontag) = ",omitempty"];

  // The number of scans using statistics (including forecasted statistics) in
  // the query plan.
  int64 scan_with_stats_count = 47 [(gogoproto.jsontag) = ",omitempty"];

  // The number of scans using forecasted statistics in the query plan.
  int64 scan_with_stats_forecast_count = 48 [(gogoproto.jsontag) = ",omitempty"];

  // Total number of rows read by all scans in the query, as estimated by the
  // optimizer without using forecasts.
  double total_scan_rows_without_forecasts_estimate = 49 [(gogoproto.jsontag) = ",omitempty"];

  // The greatest quantity of nanoseconds that have passed since the forecast
  // time (or until the forecast time, if it is in the future, in which case it
  // will be negative) for any table with forecasted stats scanned by this
  // query.
  int64 nanos_since_stats_forecasted = 50 [(gogoproto.jsontag) = ",omitempty"];

  // The list of indexes used by this query.
  repeated string indexes = 51 [(gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Collects the cumulative CPU time spent executing SQL operations in
  // nanoseconds. Currently, it is only collected for statements without
  // mutations that have a vectorized plan.
  int64 cpu_time_nanos  = 52 [(gogoproto.jsontag) = ",omitempty"];

  // The number of grpc calls done to get data form KV nodes
  int64 kv_grpc_calls = 53 [(gogoproto.jsontag) = ",omitempty"];

  // Cumulated time spent waiting for a KV request. This includes disk IO time
  // and potentially network time (if any of the keys are not local).
  int64 kv_time_nanos = 54 [(gogoproto.jsontag) = ",omitempty"];

  // The time to service the query, from start of parse to end of execute.
  int64 service_latency_nanos =      56 [(gogoproto.jsontag) = ",omitempty"];

  // The difference between service latency and the sum of parse latency + plan latency + run latency .
  int64 overhead_latency_nanos =      57 [(gogoproto.jsontag) = ",omitempty"];

  // The time to run the query and fetch or compute the result rows.
  int64 run_latency_nanos    =      58 [(gogoproto.jsontag) = ",omitempty"];

  // The time to transform the AST into a logical query plan.
  int64 plan_latency_nanos    =      59 [(gogoproto.jsontag) = ",omitempty"];

  // The time between statement executions in a transaction
  int64 idle_latency_nanos    =      60 [(gogoproto.jsontag) = ",omitempty"];

  // The time to transform the SQL string into an abstract syntax tree (AST).
  int64 parse_latency_nanos    =      61 [(gogoproto.jsontag) = ",omitempty"];

  // StepCount collects the number of times the iterator moved forward or backward over the
  // DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 mvcc_step_count = 62 [(gogoproto.jsontag) = ",omitempty"];

  // StepCountInternal collects the number of times the iterator moved forward or backward
  // over LSM internal keys.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 mvcc_step_count_internal = 63 [(gogoproto.jsontag) = ",omitempty"];

  // SeekCount collects the number of times the iterator moved to a specific key/value pair
  // in the DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 mvcc_seek_count = 64 [(gogoproto.jsontag) = ",omitempty"];

  // SeekCountInternal collects the number of times the iterator moved to a specific LSM
  // internal key.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 mvcc_seek_count_internal = 65 [(gogoproto.jsontag) = ",omitempty"];

  // BlockBytes collects the bytes in the loaded SSTable data blocks.
  // For details, see pebble.InternalIteratorStats.
  int64 mvcc_block_bytes = 66 [(gogoproto.jsontag) = ",omitempty"];

  // BlockBytesInCache collects the subset of BlockBytes in the block cache.
  // For details, see pebble.InternalIteratorStats.
  int64 mvcc_block_bytes_in_cache = 67 [(gogoproto.jsontag) = ",omitempty"];

  // KeyBytes collects the bytes in keys that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 mvcc_key_bytes = 68 [(gogoproto.jsontag) = ",omitempty"];

  // ValueBytes collects the bytes in values that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 mvcc_value_bytes = 69 [(gogoproto.jsontag) = ",omitempty"];

  // PointCount collects the count of point keys iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 mvcc_point_count = 70 [(gogoproto.jsontag) = ",omitempty"];

  // PointsCoveredByRangeTombstones collects the count of point keys that were iterated over that
  // were covered by range tombstones.
  // For details, see pebble.InternalIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 mvcc_points_covered_by_range_tombstones = 71 [(gogoproto.jsontag) = ",omitempty"];

  // RangeKeyCount collects the count of range keys encountered during iteration.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 mvcc_range_key_count = 72 [(gogoproto.jsontag) = ",omitempty"];

  // RangeKeyContainedPoints collects the count of point keys encountered within the bounds of
  // a range key.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 mvcc_range_key_contained_points = 73 [(gogoproto.jsontag) = ",omitempty"];

  // RangeKeySkippedPoints collects the count of the subset of ContainedPoints point keys that
  // were skipped during iteration due to range-key masking.
  // For details, see pkg/storage/engine.go, pebble.RangeKeyIteratorStats, and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 mvcc_range_key_skipped_points = 74 [(gogoproto.jsontag) = ",omitempty"];

  // SchemaChangerMode is the mode that was used to execute the schema change,
  // if any.
  string schema_changer_mode = 76 [(gogoproto.jsontag) = ',omitempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // SQLInstanceIDs is a list of all the SQL instance id used in this statements execution.
  repeated int32 sql_instance_ids = 77 [(gogoproto.jsontag) = ',omitempty', (gogoproto.customname) = "SQLInstanceIDs", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  reserved 12;

  // Next available ID: 78.
}

// SampledExecStats contains execution statistics that apply to both statements
// and transactions. These stats as a whole are collected using a sampling approach.
// These exec stats are meant to contain the same fields as ExecStats in
// apps_stats.proto but are for a single execution rather than aggregated executions.
// Fields in this struct should be updated in sync with apps_stats.proto.
message SampledExecStats {

  // NetworkBytes collects the number of bytes sent over the network.
  int64 network_bytes = 1 [(gogoproto.jsontag) = ",includeempty"];

  // MaxMemUsage collects the maximum memory usage that occurred on a node.
  int64 max_mem_usage = 2 [(gogoproto.jsontag) = ",includeempty"];

  // ContentionTime collects the time in seconds statements in the transaction spent contending.
  int64 contention_time = 3 [(gogoproto.jsontag) = ",omitempty"];

  // NetworkMessages collects the number of messages that were sent over the
  // network.
  int64 network_messages = 4 [(gogoproto.jsontag) = ",includeempty"];

  // MaxDiskUsage collects the maximum temporary disk usage that occurred. This
  // is set in cases where a query had to spill to disk, e.g. when performing a
  // large sort where not all of the tuples fit in memory.
  int64 max_disk_usage = 5 [(gogoproto.jsontag) = ",includeempty"];

  // CPUSQLNanos collects the CPU time spent executing SQL operations in
  // nanoseconds. Currently, it is only collected for statements without
  // mutations that have a vectorized plan.
  int64 cpu_sql_nanos = 6 [(gogoproto.customname) = "CPUSQLNanos", (gogoproto.jsontag) = "CPUSQLNanos,includeempty"];

  // Internal storage iteration statistics.
  MVCCIteratorStats mvcc_iterator_stats = 7 [(gogoproto.customname) = "MVCCIteratorStats", (gogoproto.jsontag) = ",omitempty"];
}

// Internal storage iteration statistics for a single execution.
message MVCCIteratorStats {
  // StepCount collects the number of times the iterator moved forward or backward over the
  // DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 step_count = 1 [(gogoproto.jsontag) = ",includeempty"];

  // StepCountInternal collects the number of times the iterator moved forward or backward
  // over LSM internal keys.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 step_count_internal = 2 [(gogoproto.jsontag) = ",includeempty"];

  // SeekCount collects the number of times the iterator moved to a specific key/value pair
  // in the DB's underlying storage keyspace.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 seek_count = 3 [(gogoproto.jsontag) = ",includeempty"];

  // SeekCountInternal collects the number of times the iterator moved to a specific LSM
  // internal key.
  // For details, see pkg/storage/engine.go and pkg/sql/opt/exec/factory.go.
  int64 seek_count_internal = 4 [(gogoproto.jsontag) = ",includeempty"];

  // BlockBytes collects the bytes in the loaded SSTable data blocks.
  // For details, see pebble.InternalIteratorStats.
  int64 block_bytes = 5 [(gogoproto.jsontag) = ",includeempty"];

  // BlockBytesInCache collects the subset of BlockBytes in the block cache.
  // For details, see pebble.InternalIteratorStats.
  int64 block_bytes_in_cache = 6 [(gogoproto.jsontag) = ",includeempty"];

  // KeyBytes collects the bytes in keys that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 key_bytes = 7 [(gogoproto.jsontag) = ",includeempty"];

  // ValueBytes collects the bytes in values that were iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 value_bytes = 8 [(gogoproto.jsontag) = ",includeempty"];

  // PointCount collects the count of point keys iterated over.
  // For details, see pebble.InternalIteratorStats.
  int64 point_count = 9 [(gogoproto.jsontag) = ",includeempty"];

  // PointsCoveredByRangeTombstones collects the count of point keys that were iterated over that
  // were covered by range tombstones.
  // For details, see pebble.InternalIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 points_covered_by_range_tombstones = 10 [(gogoproto.jsontag) = ",includeempty"];

  // RangeKeyCount collects the count of range keys encountered during iteration.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_count = 11 [(gogoproto.jsontag) = ",includeempty"];

  // RangeKeyContainedPoints collects the count of point keys encountered within the bounds of
  // a range key.
  // For details, see pebble.RangeKeyIteratorStats and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_contained_points = 12 [(gogoproto.jsontag) = ",includeempty"];

  // RangeKeySkippedPoints collects the count of the subset of ContainedPoints point keys that
  // were skipped during iteration due to range-key masking.
  // For details, see pkg/storage/engine.go, pebble.RangeKeyIteratorStats, and
  // https://github.com/cockroachdb/cockroach/blob/master/docs/tech-notes/mvcc-range-tombstones.md.
  int64 range_key_skipped_points = 13 [(gogoproto.jsontag) = ",includeempty"];
}

// SampledTransaction is the event logged to telemetry at the end of transaction execution.
message SampledTransaction {
  // Common contains common event details shared by all log events.
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // User is the user account that triggered the transaction.
  // The special usernames `root` and `node` are not considered sensitive.
  string user = 2 [(gogoproto.jsontag) = ",includeempty", (gogoproto.moretags) = "redact:\"safeif:root|node\""];

  // ApplicationName is the application name for the session where the transaction was executed.
  // This is included in the event to ease filtering of logging output by application.
  string application_name = 3 [(gogoproto.jsontag) = ",includeempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TxnCounter is the sequence number of the SQL transaction inside its session.
  uint32 txn_counter = 4 [(gogoproto.jsontag) = ",omitempty"];

  // SessionID is the ID of the session that initiated the transaction.
  string session_id = 5 [(gogoproto.customname) = "SessionID", (gogoproto.jsontag) = ",includeemepty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TransactionID is the id of the transaction.
  string transaction_id = 6 [(gogoproto.customname) = "TransactionID", (gogoproto.jsontag) = ',includeempty', (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TransactionFingerprintID is the fingerprint ID of the transaction.
  // This can be used to find the transaction in the console.
  uint64 transaction_fingerprint_id = 7 [(gogoproto.customname) = "TransactionFingerprintID", (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/appstatspb.TransactionFingerprintID", (gogoproto.nullable) = false, (gogoproto.jsontag) = 'TransactionFingerprintID,'];

  // Committed indicates if the transaction committed successfully. We want to include this value even if it is false.
  bool committed = 8 [(gogoproto.jsontag) = ",includeempty"];

  // ImplicitTxn indicates if the transaction was an implicit one. We want to include this value even if it is false.
  bool implicit_txn = 9 [(gogoproto.jsontag) = ",includeempty"];

  // StartTimeUnixNanos is the time the transaction was started. Expressed as unix time in nanoseconds.
  int64 start_time_unix_nanos = 10 [(gogoproto.jsontag) = ",includeempty"];

  // EndTimeUnixNanos the time the transaction finished (either committed or aborted).
  // Expressed as unix time in nanoseconds.
  int64 end_time_unix_nanos = 11 [(gogoproto.jsontag) = ",includeempty"];

  // ServiceLatNanos is the time to service the whole transaction, from start to end of execution.
  int64 service_lat_nanos = 12 [(gogoproto.jsontag) = ",includeempty"];

  // SQLSTATE is the SQLSTATE code for the error, if an error was encountered. Empty/omitted if no error.
  string sqlstate = 13 [(gogoproto.customname) = "SQLSTATE", (gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // ErrorText is the text of the error if any.
  string error_text = 14 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customtype) = "github.com/cockroachdb/redact.RedactableString", (gogoproto.nullable) = false, (gogoproto.moretags) = "redact:\"mixed\""];

  // NumRetries is the number of time when the txn was retried automatically by the server.
  int64 num_retries = 15 [(gogoproto.jsontag) = ",omitempty"];

  // LastAutoRetryReason is a string containing the reason for the last automatic retry.
  string last_auto_retry_reason = 16 [(gogoproto.customtype) = "github.com/cockroachdb/redact.RedactableString", (gogoproto.nullable) = false, (gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"mixed\""];

  // StatementFingerprintIDs is an array of statement fingerprint IDs belonging to this transaction.
  repeated uint64 statement_fingerprint_ids = 17 [(gogoproto.customname) = "StatementFingerprintIDs", (gogoproto.jsontag) = ',omitempty', (gogoproto.customtype) = "github.com/cockroachdb/cockroach/pkg/sql/appstatspb.StmtFingerprintID"];

  // NumRows is the total number of rows returned across all statements.
  int64 num_rows = 18 [(gogoproto.jsontag) = ",includeempty"];

  // RetryLatNanos is the amount of time spent retrying the transaction.
 int64 retry_lat_nanos  = 19 [(gogoproto.jsontag) = ",omitempty"];

 // CommitLatNanos is the amount of time spent committing the transaction after all statement operations.
 int64 commit_lat_nanos = 20 [(gogoproto.jsontag) = ",includeempty"];

 // IdleLatNanos is the amount of time spent waiting for the client to send statements
  // while the transaction is open.
 int64 idle_lat_nanos = 21 [(gogoproto.jsontag) = ",includeempty"];

 // BytesRead is the number of bytes read from disk.
 int64 bytes_read = 22 [(gogoproto.jsontag) = ",includeempty"];

 // RowsRead is the number of rows read from disk.
 int64 rows_read = 23 [(gogoproto.jsontag) = ",includeempty"];

 // RowsWritten is the number of rows written to disk.
 int64 rows_written = 24 [(gogoproto.jsontag) = ",includeempty"];

 // SampledExecStats is a nested field containing execution statistics.
 // This field will be omitted if the stats were not sampled.
 SampledExecStats sampled_exec_stats = 25 [(gogoproto.jsontag) = ",omitempty"];
}

// CapturedIndexUsageStats
message CapturedIndexUsageStats {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // Couldn't use roachpb.CollectedIndexUsageStatistics due to circular dependency.

  // TotalReadCount is the number of times the index has been read.
  uint64 total_read_count = 2;

  // LastRead is the timestamp at which the index was last read.
  string last_read = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TableID is the ID of the table on which the index was created. This is same as
  // descpb.TableID and is unique within the cluster.
  uint32 table_id = 4 [(gogoproto.customname) = "TableID"];

  // IndexID is the ID of the index within the scope of the given table.
  uint32 index_id = 5 [(gogoproto.customname) = "IndexID"];

  // DatabaseName is the name of the database in which the index was created.
  string database_name = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TableName is the name of the table on which the index was created.
  string table_name = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IndexName is the name of the index within the scope of the given table.
  string index_name = 8 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IndexType is the type of the index. Index types include "primary" and "secondary".
  string index_type = 9 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsUnique indicates if the index has a UNIQUE constraint.
  bool is_unique = 10 [(gogoproto.jsontag) = ",omitempty"];

  // IsInverted indicates if the index is an inverted index.
  bool is_inverted = 11 [(gogoproto.jsontag) = ",omitempty"];

  // CreatedAt is the timestamp at which the index was created.
  string created_at = 12 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // SchemaName is the name of the schema in which the index was created.
  string schema_name = 13 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// CreateChangefeed is an event for any CREATE CHANGEFEED query that
// successfully starts running.  Failed CREATE statements will show up as
// ChangefeedFailed events.
message CreateChangefeed {
  CommonChangefeedEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  bool transformation = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// ChangefeedFailed is an event for any Changefeed failure since the plan hook
// was triggered.
message ChangefeedFailed {
  CommonChangefeedEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // The reason / environment with which the changefeed failed (ex:
  // connection_closed, changefeed_behind)
  string failure_type = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// ChangefeedEmittedBytes is an event representing the bytes emitted by a changefeed over an interval.
message ChangefeedEmittedBytes {
  CommonChangefeedEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // The job id for enterprise changefeeds.
  int64 job_id = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) =  "redact:\"nonsensitive\""];

  // The number of bytes emitted.
  int64 emitted_bytes = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // The number of messages emitted.
  int64 emitted_messages = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // The time period in nanoseconds between emitting telemetry events of this type (per-aggregator).
  int64 logging_interval = 4 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Flag to indicate that the changefeed is closing.
  bool closing = 5 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
}

// RecoveryEvent is an event that is logged on every invocation of BACKUP,
// RESTORE, and on every BACKUP schedule creation, with the appropriate subset
// of fields populated depending on the type of event. This event is is also
// logged whenever a BACKUP and RESTORE job completes or fails.
message RecoveryEvent {
  // Common fields for all events.
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // RecoveryType is the type of recovery described by this event, which is one of
  // - backup
  // - scheduled_backup
  // - create_schedule
  // - restore
  //
  // It can also be a job event corresponding to the recovery, which is one of
  // - backup_job
  // - scheduled_backup_job
  // - restore_job
  string recovery_type = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customtype) = "RecoveryEventType", (gogoproto.nullable) = false, (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Fields that are common to BACKUP and RESTORE statements.

  // TargetScope is the largest scope of the targets that the user is backing up
  // or restoring based on the following order:
  // table < schema < database < full cluster.
  string target_scope = 3 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsMultiregionTarget is true if any of the targets contain objects with
  // multi-region primitives.
  bool is_multiregion_target = 4 [(gogoproto.jsontag) = ",omitempty"];

  // TargetCount is the number of targets the in the BACKUP/RESTORE.
  uint32 target_count = 5 [(gogoproto.jsontag) = ",omitempty"];

  // DestinationSubdirType is
  // - latest: if using the latest subdir
  // - standard: if using a date-based subdir
  // - custom: if using a custom subdir that's not date-based
  string destination_subdir_type = 6 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // DestinationStorageTypes are the types of storage that the user is backing
  // up to or restoring from.
  repeated string destination_storage_types = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // DestinationAuthTypes are the types of authentication methods that the user
  // is using to access the destination storage.
  repeated string destination_auth_types = 8 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IsLocalityAware indicates if the BACKUP or RESTORE is locality aware.
  bool is_locality_aware = 9 [(gogoproto.jsontag) = ",omitempty"];

  // AsOfInterval is the time interval in nanoseconds between the statement
  // timestamp and the timestamp resolved by the AS OF SYSTEM TIME expression.
  // The interval is expressed in nanoseconds.
  int64 as_of_interval = 10 [(gogoproto.jsontag) = ",omitempty"];

  // WithRevisionHistory is true if the BACKUP includes revision history.
  bool with_revision_history = 11 [(gogoproto.jsontag) = ",omitempty"];

  // HasEncryptionPassphrase is true if the user provided an encryption
  // passphrase to encrypt/decrypt their backup.
  bool has_encryption_passphrase = 13 [(gogoproto.jsontag) = ",omitempty"];

  // KMSType is the type of KMS the user is using to encrypt/decrypt their
  // backup.
  string kms_type = 14 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSType", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // KMSCount is the number of KMS the user is using.
  uint32 kms_count = 15 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "KMSCount"];

  // Options contain all the names of the options specified by the user in the
  // BACKUP or RESTORE statement. For options that are accompanied by a value,
  // only those with non-empty values will be present.
  //
  // It's important to note that there are no option values anywhere in the
  // event payload. Future changes to telemetry should refrain from adding
  // values to the payload unless they are properly redacted.
  repeated string options = 16 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // DebugPauseOn is the type of event that the restore should pause on for
  // debugging purposes. Currently only "error" is supported.
  string debug_pause_on = 17 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // Fields that are common to BACKUP and RESTORE jobs.

  // JobID is the ID of the BACKUP/RESTORE job.
  uint64 job_id = 18 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "JobID"];
  // ResultStatus indicates whether the job succeeded or failed.
  string result_status = 20 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];
  // ErrorText is the text of the error that caused the job to fail.
  string error_text = 21 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customtype) = "github.com/cockroachdb/redact.RedactableString", (gogoproto.nullable) = false, (gogoproto.moretags) = "redact:\"mixed\""];

  // Fields only for BACKUP schedules.

  // RecurringCron is the crontab for the incremental backup.
  string recurring_cron = 24 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // FullBackupCron is the crontab for the full backup.
  string full_backup_cron = 25 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // CustomFirstRunTime is the timestamp for the user configured first run time.
  // Expressed as nanoseconds since the Unix epoch.
  int64 custom_first_run_time = 26 [(gogoproto.jsontag) = ",omitempty"];

  // OnExecutionFailure describes the desired behavior if the schedule fails to
  // execute.
  string on_execution_failure = 27 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // OnPreviousRunning describes the desired behavior if the previously
  // scheduled BACKUP is still running.
  string on_previous_running = 28 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // IgnoreExistingBackup is true iff the BACKUP schedule should still be
  // created even if a backup is already present in its destination.
  bool ignore_existing_backup = 29 [(gogoproto.jsontag) = ",omitempty"];

  // The application name for the session where recovery event was created.
  string application_name = 30 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // NumRows is the number of rows successfully imported, backed up or restored.
  int64 num_rows = 31 [(gogoproto.jsontag) = ",omitempty"];
}

// SchemaDescriptor is an event for schema telemetry, whose purpose is
// to take periodic snapshots of the cluster's SQL schema and publish them in
// the telemetry log channel. For all intents and purposes, the data in such a
// snapshot can be thought of the outer join of certain system tables:
// namespace, descriptor, and at some point perhaps zones, etc.
//
// Snapshots are too large to conveniently be published as a single log event,
// so instead they're broken down into SchemaDescriptor events which
// contain the data in one record of this outer join projection. These events
// are prefixed by a header (a SchemaSnapshotMetadata event).
message SchemaDescriptor {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // SnapshotID is the unique identifier of the snapshot that this event
  // is part of.
  string snapshot_id = 2 [(gogoproto.customname) = "SnapshotID", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // ParentDatabaseID matches the same key column in system.namespace.
  uint32 parent_database_id = 3 [(gogoproto.customname) = "ParentDatabaseID", (gogoproto.jsontag) = ",omitempty"];
  // ParentSchemaID matches the same key column in system.namespace.
  uint32 parent_schema_id = 4 [(gogoproto.customname) = "ParentSchemaID", (gogoproto.jsontag) = ",omitempty"];
  // Name matches the same key column in system.namespace.
  string name = 5 [(gogoproto.moretags) = "redact:\"nonsensitive\""];
  // DescID matches the 'id' column in system.namespace and system.descriptor.
  uint32 desc_id = 6 [(gogoproto.customname) = "DescID", (gogoproto.jsontag) = ",omitempty"];
  // Desc matches the 'descriptor' column in system.descriptor.
  // Some contents of the descriptor may be redacted to prevent leaking PII.
  cockroach.sql.sqlbase.Descriptor desc = 7 [(gogoproto.jsontag) = ",omitempty", (gogoproto.moretags) = "redact:\"nonsensitive\""];

  // TODO(postamar): include system.zones data.
}

// SchemaSnapshotMetadata is an event describing a schema snapshot, which
// is a set of SchemaDescriptor messages sharing the same SnapshotID.
message SchemaSnapshotMetadata {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  // SnapshotID is the unique identifier of this snapshot.
  string snapshot_id = 2 [(gogoproto.customname) = "SnapshotID", (gogoproto.moretags) = "redact:\"nonsensitive\""];
  // NumRecords is how many SchemaDescriptor events are in the
  // snapshot.
  uint32 num_records = 3;
  // AsOfTimestamp is when the snapshot was taken.
  // This is equivalent to the timestamp given in the AS OF SYSTEM TIME
  // clause when querying the namespace and descriptor tables in the
  // system database.
  // Expressed as nanoseconds since the Unix epoch.
  int64 as_of_timestamp = 4 [(gogoproto.jsontag) = ",omitempty"];

  // Errors records any errors encountered when post-processing this snapshot,
  // which includes the redaction of any potential PII.
  repeated string errors = 5 [(gogoproto.jsontag) = ",omitempty"];
}

// HotRangesStats
message HotRangesStats {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];

  int64 range_id = 2 [(gogoproto.jsontag) = ",omitempty", (gogoproto.customname) = "RangeID"];

  double qps = 3 [(gogoproto.jsontag) = ",includeempty"];

  // DatabaseName is the name of the database in which the index was created.
  string database_name = 4 [(gogoproto.jsontag) = ",omitempty"];

  // TableName is the name of the table on which the index was created.
  string table_name = 5 [(gogoproto.jsontag) = ",omitempty"];

  // IndexName is the name of the index within the scope of the given table.
  string index_name = 6 [(gogoproto.jsontag) = ",omitempty"];

  // SchemaName is the name of the schema in which the index was created.
  string schema_name = 7 [(gogoproto.jsontag) = ",omitempty"];

  // LeaseholderNodeID indicates the Node ID that is the current leaseholder for the given range.
  int32 leaseholder_node_id = 8 [(gogoproto.customname) = "LeaseholderNodeID", (gogoproto.jsontag) = ",omitempty"];

  // Writes per second is the recent number of keys written per second on
  // this range.
  double writes_per_second = 9 [(gogoproto.jsontag) = ",omitempty"];

  // Reads per second is the recent number of keys read per second on
  // this range.
  double reads_per_second = 10 [(gogoproto.jsontag) = ",omitempty"];

  // Write bytes per second is the recent number of bytes written per second on
  // this range.
  double write_bytes_per_second = 11 [(gogoproto.jsontag) = ",omitempty"];

  // Read bytes per second is the recent number of bytes read per second on
  // this range.
  double read_bytes_per_second = 12 [(gogoproto.jsontag) = ",omitempty"];

  // CPU time per second is the recent cpu usage in nanoseconds of this range.
  double cpu_time_per_second = 13 [(gogoproto.customname) = "CPUTimePerSecond", (gogoproto.jsontag) = ",omitempty"];
}
