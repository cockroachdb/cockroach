// Copyright 2020 The Cockroach Authors.
//
// Use of this software is governed by the CockroachDB Software License
// included in the /LICENSE file.

syntax = "proto3";
package cockroach.util.log.eventpb;
option go_package = "github.com/cockroachdb/cockroach/pkg/util/log/eventpb";

import "gogoproto/gogo.proto";
import "util/log/eventpb/events.proto";
import "util/log/logpb/event.proto";

// Category: Zone config events
// Channel: OPS
//
// Events in this category pertain to zone configuration changes on
// the SQL schema or system ranges.
//
// When zone configs apply to individual tables or other objects in a
// SQL logical schema, they are relative to a particular SQL tenant.
// In a multi-tenant setup, copies of these zone config events are preserved
// in each tenant's own `system.eventlog` table.
//
// When they apply to cluster-level ranges (e.g., the system zone config),
// they are stored in the system tenant's own `system.eventlog` table.

// TODO(knz): explore whether we should have separate notable event
// types for table-level and cluster-level zone config changes.
// See: https://github.com/cockroachdb/cockroach/issues/57897

// Notes to CockroachDB maintainers: refer to doc.go at the package
// level for more details. Beware that JSON compatibility rules apply
// here, not protobuf.
// The comment at the top has a specific format for the doc generator.
// *Really look at doc.go before modifying this file.*

// CommonZoneConfigDetails is common to zone config change events.
message CommonZoneConfigDetails {
  // The target object of the zone config change.
  string target = 1 [(gogoproto.jsontag) = ",omitempty"];
  // The applied zone config in YAML format.
  string config = 2 [(gogoproto.jsontag) = ",omitempty"];
  // The SQL representation of the applied zone config options.
  repeated string options = 3 [(gogoproto.jsontag) = ",omitempty"];
}

// SetZoneConfig is recorded when a zone config is changed.
message SetZoneConfig {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLEventDetails sql = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonZoneConfigDetails config = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  // The string representation of the resolved old zone config. This is not
  // necessarily the same as the zone config that was previously set -- as it
  // includes the resolved values of the zone config options. In other words,
  // a zone config that hasn't been properly "set" yet (and inherits from its
  // parent) will have a resolved_old_config that has details of the values
  // it inherits from its parent. This is particularly useful to get a proper
  // diff between the old and new zone config.
  string resolved_old_config = 4 [(gogoproto.jsontag) = ",omitempty"];
}

// RemoveZoneConfig is recorded when a zone config is removed.
message RemoveZoneConfig {
  CommonEventDetails common = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonSQLEventDetails sql = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
  CommonZoneConfigDetails config = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "", (gogoproto.embed) = true];
}


