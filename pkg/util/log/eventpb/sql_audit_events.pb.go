// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/sql_audit_events.proto

package eventpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SensitiveTableAccess is recorded when an access is performed to
// a table marked as audited.
type SensitiveTableAccess struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
	// The name of the table being audited.
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:",omitempty"`
	// How the table was accessed (r=read / rw=read/write).
	AccessMode string `protobuf:"bytes,5,opt,name=access_mode,json=accessMode,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *SensitiveTableAccess) Reset()         { *m = SensitiveTableAccess{} }
func (m *SensitiveTableAccess) String() string { return proto.CompactTextString(m) }
func (*SensitiveTableAccess) ProtoMessage()    {}
func (*SensitiveTableAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a82d5e93041841, []int{0}
}
func (m *SensitiveTableAccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensitiveTableAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SensitiveTableAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveTableAccess.Merge(m, src)
}
func (m *SensitiveTableAccess) XXX_Size() int {
	return m.Size()
}
func (m *SensitiveTableAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveTableAccess.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveTableAccess proto.InternalMessageInfo

// AdminQuery is recorded when a user with admin privileges (the user
// is directly or indirectly a member of the admin role) executes a query.
type AdminQuery struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
}

func (m *AdminQuery) Reset()         { *m = AdminQuery{} }
func (m *AdminQuery) String() string { return proto.CompactTextString(m) }
func (*AdminQuery) ProtoMessage()    {}
func (*AdminQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a82d5e93041841, []int{1}
}
func (m *AdminQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AdminQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminQuery.Merge(m, src)
}
func (m *AdminQuery) XXX_Size() int {
	return m.Size()
}
func (m *AdminQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminQuery.DiscardUnknown(m)
}

var xxx_messageInfo_AdminQuery proto.InternalMessageInfo

// SlowQuery is recorded when a query triggers the "slow query" condition.
//
// As of this writing, the condition requires:
// - the cluster setting `sql.log.slow_query.latency_threshold`
//   set to a non-zero value, AND
// - EITHER of the following conditions:
//   - the actual age of the query exceeds the configured threshold; AND/OR
//   - the query performs a full table/index scan AND the cluster setting
//     `sql.log.slow_query.experimental_full_table_scans.enabled` is set.
type SlowQuery struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
}

func (m *SlowQuery) Reset()         { *m = SlowQuery{} }
func (m *SlowQuery) String() string { return proto.CompactTextString(m) }
func (*SlowQuery) ProtoMessage()    {}
func (*SlowQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a82d5e93041841, []int{2}
}
func (m *SlowQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlowQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SlowQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlowQuery.Merge(m, src)
}
func (m *SlowQuery) XXX_Size() int {
	return m.Size()
}
func (m *SlowQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SlowQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SlowQuery proto.InternalMessageInfo

// SlowQueryInternal is recorded when a query triggers the "slow query" condition,
// and the cluster setting `sql.log.slow_query.internal_queries.enabled` is
// set.
// See the documentation for the event type `slow_query` for details about
// the "slow query" condition.
type SlowQueryInternal struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
}

func (m *SlowQueryInternal) Reset()         { *m = SlowQueryInternal{} }
func (m *SlowQueryInternal) String() string { return proto.CompactTextString(m) }
func (*SlowQueryInternal) ProtoMessage()    {}
func (*SlowQueryInternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a82d5e93041841, []int{3}
}
func (m *SlowQueryInternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlowQueryInternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SlowQueryInternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlowQueryInternal.Merge(m, src)
}
func (m *SlowQueryInternal) XXX_Size() int {
	return m.Size()
}
func (m *SlowQueryInternal) XXX_DiscardUnknown() {
	xxx_messageInfo_SlowQueryInternal.DiscardUnknown(m)
}

var xxx_messageInfo_SlowQueryInternal proto.InternalMessageInfo

// QueryExecute is recorded when a query is executed,
// and the cluster setting `sql.trace.log_statement_execute` is set.
type QueryExecute struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
}

func (m *QueryExecute) Reset()         { *m = QueryExecute{} }
func (m *QueryExecute) String() string { return proto.CompactTextString(m) }
func (*QueryExecute) ProtoMessage()    {}
func (*QueryExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7a82d5e93041841, []int{4}
}
func (m *QueryExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QueryExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecute.Merge(m, src)
}
func (m *QueryExecute) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecute.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecute proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SensitiveTableAccess)(nil), "cockroach.util.log.eventpb.SensitiveTableAccess")
	proto.RegisterType((*AdminQuery)(nil), "cockroach.util.log.eventpb.AdminQuery")
	proto.RegisterType((*SlowQuery)(nil), "cockroach.util.log.eventpb.SlowQuery")
	proto.RegisterType((*SlowQueryInternal)(nil), "cockroach.util.log.eventpb.SlowQueryInternal")
	proto.RegisterType((*QueryExecute)(nil), "cockroach.util.log.eventpb.QueryExecute")
}

func init() {
	proto.RegisterFile("util/log/eventpb/sql_audit_events.proto", fileDescriptor_b7a82d5e93041841)
}

var fileDescriptor_b7a82d5e93041841 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0x4d, 0x8b, 0xd3, 0x40,
	0x1c, 0x87, 0x33, 0xe9, 0xba, 0xd2, 0xd9, 0x45, 0x30, 0xac, 0x10, 0x0a, 0x4e, 0x96, 0x5c, 0x76,
	0x05, 0x4d, 0x7c, 0xb9, 0x79, 0xdb, 0xaa, 0xa0, 0xa0, 0x42, 0xd3, 0x3d, 0x79, 0x09, 0xd3, 0xc9,
	0x9f, 0x18, 0x9c, 0x97, 0x6e, 0x66, 0xb2, 0x6e, 0xbf, 0x81, 0xa2, 0x87, 0x7e, 0xac, 0x1e, 0x7b,
	0xec, 0x29, 0x68, 0x7a, 0xeb, 0xd1, 0x4f, 0x20, 0x99, 0x56, 0x51, 0x7c, 0xbd, 0x77, 0x6f, 0x49,
	0x78, 0x7e, 0x4f, 0xe0, 0x19, 0x18, 0x7c, 0x54, 0x99, 0x82, 0xc7, 0x5c, 0xe5, 0x31, 0x9c, 0x83,
	0x34, 0xe3, 0x51, 0xac, 0xcf, 0x78, 0x4a, 0xab, 0xac, 0x30, 0xa9, 0xfd, 0xa2, 0xa3, 0x71, 0xa9,
	0x8c, 0xf2, 0x7a, 0x4c, 0xb1, 0x37, 0xa5, 0xa2, 0xec, 0x75, 0xd4, 0x4e, 0x22, 0xae, 0xf2, 0x68,
	0x33, 0xe9, 0x1d, 0xe4, 0x2a, 0x57, 0x16, 0x8b, 0xdb, 0xa7, 0xf5, 0xa2, 0x77, 0xf3, 0x17, 0xf5,
	0x8f, 0xc2, 0xf0, 0x63, 0x07, 0x1f, 0x0c, 0x41, 0xea, 0xc2, 0x14, 0xe7, 0x70, 0x4a, 0x47, 0x1c,
	0x4e, 0x18, 0x03, 0xad, 0xbd, 0x53, 0xbc, 0xcb, 0x94, 0x10, 0x4a, 0xfa, 0xe8, 0x10, 0x1d, 0xef,
	0xdd, 0x8f, 0xa2, 0x3f, 0xff, 0x3a, 0x7a, 0x64, 0xc9, 0x27, 0xed, 0xdb, 0x63, 0x30, 0xb4, 0xe0,
	0xba, 0xbf, 0x3f, 0xab, 0x03, 0x67, 0x5e, 0x07, 0x68, 0x55, 0x07, 0x4e, 0xb2, 0x71, 0x79, 0x03,
	0xdc, 0xd1, 0x67, 0xdc, 0x77, 0xad, 0xf2, 0xde, 0xbf, 0x95, 0xc3, 0xc1, 0xf3, 0xbf, 0x58, 0x5b,
	0x97, 0x97, 0xe0, 0x1d, 0xb8, 0x00, 0xe6, 0x77, 0xac, 0xf3, 0xee, 0xff, 0x39, 0x2f, 0x80, 0xfd,
	0x5e, 0x69, 0x5d, 0xde, 0x1d, 0x8c, 0x4d, 0xdb, 0x22, 0x95, 0x54, 0x80, 0xbf, 0x73, 0x88, 0x8e,
	0xbb, 0xfd, 0x6b, 0xab, 0x3a, 0xc0, 0xb7, 0x95, 0x28, 0x0c, 0x88, 0xb1, 0x99, 0x24, 0x5d, 0x4b,
	0xbc, 0xa4, 0x02, 0xbc, 0xa7, 0x78, 0x8f, 0xda, 0x6a, 0xa9, 0x50, 0x19, 0xf8, 0x57, 0x2c, 0x7f,
	0xf4, 0x33, 0xff, 0xa5, 0x0e, 0x6e, 0x94, 0x90, 0x51, 0x66, 0x1e, 0x86, 0x52, 0x49, 0xfd, 0xad,
	0x79, 0x98, 0xe0, 0xf5, 0xf6, 0x85, 0xca, 0x20, 0x7c, 0xef, 0x62, 0x7c, 0x92, 0x89, 0x42, 0x0e,
	0x2a, 0x28, 0x27, 0x5b, 0x7d, 0x08, 0xe1, 0x3b, 0x17, 0x77, 0x87, 0x5c, 0xbd, 0xbd, 0x4c, 0x11,
	0x4e, 0x5d, 0x7c, 0xfd, 0x7b, 0x8a, 0x67, 0xd2, 0x40, 0x29, 0x29, 0xdf, 0xee, 0x24, 0x1f, 0x5c,
	0xbc, 0x6f, 0x73, 0xb4, 0x60, 0x65, 0x60, 0xab, 0x6b, 0xf4, 0x6f, 0xcd, 0x3e, 0x13, 0x67, 0xd6,
	0x10, 0x34, 0x6f, 0x08, 0x5a, 0x34, 0x04, 0x7d, 0x6a, 0x08, 0x9a, 0x2e, 0x89, 0x33, 0x5f, 0x12,
	0x67, 0xb1, 0x24, 0xce, 0xab, 0xab, 0x1b, 0xe7, 0x68, 0xd7, 0x5e, 0xfc, 0x0f, 0xbe, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x28, 0xba, 0x8b, 0x21, 0x74, 0x06, 0x00, 0x00,
}

func (m *SensitiveTableAccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensitiveTableAccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensitiveTableAccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessMode) > 0 {
		i -= len(m.AccessMode)
		copy(dAtA[i:], m.AccessMode)
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(len(m.AccessMode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AdminQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlowQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlowQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SlowQueryInternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlowQueryInternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowQueryInternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSqlAuditEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSqlAuditEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovSqlAuditEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SensitiveTableAccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovSqlAuditEvents(uint64(l))
	}
	l = len(m.AccessMode)
	if l > 0 {
		n += 1 + l + sovSqlAuditEvents(uint64(l))
	}
	return n
}

func (m *AdminQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	return n
}

func (m *SlowQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	return n
}

func (m *SlowQueryInternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	return n
}

func (m *QueryExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovSqlAuditEvents(uint64(l))
	return n
}

func sovSqlAuditEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSqlAuditEvents(x uint64) (n int) {
	return sovSqlAuditEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SensitiveTableAccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensitiveTableAccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensitiveTableAccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqlAuditEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqlAuditEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlowQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlowQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlowQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqlAuditEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlowQueryInternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlowQueryInternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlowQueryInternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqlAuditEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqlAuditEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSqlAuditEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSqlAuditEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSqlAuditEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqlAuditEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSqlAuditEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSqlAuditEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSqlAuditEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSqlAuditEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSqlAuditEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSqlAuditEvents = fmt.Errorf("proto: unexpected end of group")
)
