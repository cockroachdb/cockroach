// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/telemetry.proto

package eventpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SampledQuery is the SQL query event logged to the telemetry channel. It
// contains common SQL event/execution details.
type SampledQuery struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	CommonSQLExecDetails  `protobuf:"bytes,3,opt,name=exec,proto3,embedded=exec" json:""`
	// skipped_queries indicate how many SQL statements were not
	// considered for sampling prior to this one. If the field is
	// omitted, or its value is zero, this indicates that no statement
	// was omitted since the last event.
	SkippedQueries uint64 `protobuf:"varint,4,opt,name=skipped_queries,json=skippedQueries,proto3" json:",omitempty"`
}

func (m *SampledQuery) Reset()         { *m = SampledQuery{} }
func (m *SampledQuery) String() string { return proto.CompactTextString(m) }
func (*SampledQuery) ProtoMessage()    {}
func (*SampledQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d317b4ad74be4f7, []int{0}
}
func (m *SampledQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SampledQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SampledQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampledQuery.Merge(m, src)
}
func (m *SampledQuery) XXX_Size() int {
	return m.Size()
}
func (m *SampledQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SampledQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SampledQuery proto.InternalMessageInfo

// CreateChangefeedQuery is the CREATE CHANGEFEED query event logged to the
// telemetry channel. It contains usage details about the parameters the user
// passed in to define the changefeed
type CreateChangefeedQuery struct {
	CommonEventDetails           `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonChangefeedEventDetails `protobuf:"bytes,2,opt,name=changefeed,proto3,embedded=changefeed" json:""`
	// The number of tables listed in the query that the changefeed is to run on
	NumTables int32 `protobuf:"varint,3,opt,name=num_tables,json=numTables,proto3" json:",omitempty"`
	// (Kafka/CloudStorage Query Param) Whether a custom prefix is being added to all topic names
	TopicPrefix bool `protobuf:"varint,4,opt,name=topic_prefix,json=topicPrefix,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether TLS is enabled on the connection to Kafka
	TlsEnabled bool `protobuf:"varint,5,opt,name=tls_enabled,json=tlsEnabled,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether a base64-encoded ca_cert file was specified
	CaCert bool `protobuf:"varint,6,opt,name=ca_cert,json=caCert,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether a Privacy Enhanced Email (PEM) certificate was specified
	ClientCert bool `protobuf:"varint,7,opt,name=client_cert,json=clientCert,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether a private key for the PEM certificate was specified
	ClientKey bool `protobuf:"varint,8,opt,name=client_key,json=clientKey,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether SASL is enabled
	SaslEnabled bool `protobuf:"varint,9,opt,name=sasl_enabled,json=saslEnabled,proto3" json:",omitempty"`
	// (Kafka Query Param) The SASL mechanism (ex: SASL-SCRAM-SHA-256, SASL-PLAIN)
	SaslMechanism string `protobuf:"bytes,10,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Kafka Query Param) Whether a SASL username has been specified
	SaslUser bool `protobuf:"varint,11,opt,name=sasl_user,json=saslUser,proto3" json:",omitempty"`
	// (Kafka Query Param) Whether a SASL password has been specified
	SaslPassword bool `protobuf:"varint,12,opt,name=sasl_password,json=saslPassword,proto3" json:",omitempty"`
	// (CloudStorage Query Param) A custom maximum file size for files before they are flushed
	FileSize string `protobuf:"bytes,13,opt,name=file_size,json=fileSize,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Kafka Query Param) Whether client-side validation of responses has been disabled
	InsecureTlsSkipVerify bool `protobuf:"varint,14,opt,name=insecure_tls_skip_verify,json=insecureTlsSkipVerify,proto3" json:",omitempty"`
	// (Changefeed Option) Whether updated timestamps are emitted with each row
	Updated bool `protobuf:"varint,15,opt,name=updated,proto3" json:",omitempty"`
	// (Changefeed Option) The interval at which resolved timestamps are emitted
	Resolved string `protobuf:"bytes,16,opt,name=resolved,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) Either key_only to emit only keys or wrapped for both key and value
	Envelope string `protobuf:"bytes,17,opt,name=envelope,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) Whether a cursor timestamp has been specified to begin emitting events from
	Cursor bool `protobuf:"varint,18,opt,name=cursor,proto3" json:",omitempty"`
	// (Changefeed Option) The data format, either JSON or Avro, that the changefeed emits
	Format string `protobuf:"bytes,19,opt,name=format,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) Whether a schema registry address has been specified
	ConfluentSchemaRegistry bool `protobuf:"varint,20,opt,name=confluent_schema_registry,json=confluentSchemaRegistry,proto3" json:",omitempty"`
	// (Changefeed Option) Whether to emit primary keys as the value for deleted rows
	KeyInValue bool `protobuf:"varint,21,opt,name=key_in_value,json=keyInValue,proto3" json:",omitempty"`
	// (Changefeed Option) Whether a `before` field is to be emitted with each message
	Diff bool `protobuf:"varint,22,opt,name=diff,proto3" json:",omitempty"`
	// (Changefeed Option) The compression format being used (ex: gzip)
	Compression string `protobuf:"bytes,23,opt,name=compression,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) Whether data to resume a changefeed is protected from GC when paused
	ProtectDataFromGcOnPause bool `protobuf:"varint,24,opt,name=protect_data_from_gc_on_pause,json=protectDataFromGcOnPause,proto3" json:",omitempty"`
	// (Changefeed Option) The type of schema events that trigger the change policy
	SchemaChangeEvents string `protobuf:"bytes,25,opt,name=schema_change_events,json=schemaChangeEvents,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) The behavior to trigger from a schema change event (ex: backfill)
	SchemaChangePolicy string `protobuf:"bytes,26,opt,name=schema_change_policy,json=schemaChangePolicy,proto3" json:",omitempty" redact:"nonsensitive"`
	// Whether the initial_scan or no_initial_scan options have been specified
	Scan string `protobuf:"bytes,27,opt,name=scan,proto3" json:",omitempty" redact:"nonsensitive"`
	// (Changefeed Option) Whether fully-qualified table names are used for topic names
	FullTableName bool `protobuf:"varint,28,opt,name=full_table_name,json=fullTableName,proto3" json:",omitempty"`
	// (Changefeed Option) Whether a custom namespace for table schemas is specified
	AvroSchemaPrefix bool `protobuf:"varint,29,opt,name=avro_schema_prefix,json=avroSchemaPrefix,proto3" json:",omitempty"`
}

func (m *CreateChangefeedQuery) Reset()         { *m = CreateChangefeedQuery{} }
func (m *CreateChangefeedQuery) String() string { return proto.CompactTextString(m) }
func (*CreateChangefeedQuery) ProtoMessage()    {}
func (*CreateChangefeedQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d317b4ad74be4f7, []int{1}
}
func (m *CreateChangefeedQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChangefeedQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateChangefeedQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChangefeedQuery.Merge(m, src)
}
func (m *CreateChangefeedQuery) XXX_Size() int {
	return m.Size()
}
func (m *CreateChangefeedQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChangefeedQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChangefeedQuery proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SampledQuery)(nil), "cockroach.util.log.eventpb.SampledQuery")
	proto.RegisterType((*CreateChangefeedQuery)(nil), "cockroach.util.log.eventpb.CreateChangefeedQuery")
}

func init() { proto.RegisterFile("util/log/eventpb/telemetry.proto", fileDescriptor_3d317b4ad74be4f7) }

var fileDescriptor_3d317b4ad74be4f7 = []byte{
	// 920 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4f, 0x4f, 0x1c, 0x37,
	0x18, 0x87, 0x77, 0x13, 0xb2, 0xb0, 0x86, 0x40, 0xea, 0x42, 0xe3, 0xd0, 0xb2, 0x20, 0x0e, 0x85,
	0xaa, 0xcd, 0x92, 0x34, 0x52, 0x5b, 0xb5, 0x95, 0x2a, 0x01, 0x69, 0x94, 0xfe, 0x49, 0x60, 0x97,
	0x46, 0x6a, 0x2f, 0x96, 0xf1, 0xbc, 0xb3, 0x58, 0xeb, 0xb1, 0x07, 0xdb, 0xb3, 0x65, 0xf2, 0x29,
	0xfa, 0x35, 0xfa, 0x3d, 0x7a, 0xe0, 0xc8, 0x31, 0xa7, 0x55, 0x0b, 0xb7, 0x1c, 0xfb, 0x09, 0x2a,
	0x7b, 0x66, 0x29, 0xd5, 0x4e, 0x92, 0xae, 0xaa, 0x9e, 0x60, 0xe4, 0xe7, 0xf7, 0xf8, 0xf5, 0x8b,
	0xe7, 0x1d, 0xd0, 0x5a, 0xe6, 0x84, 0xdc, 0x92, 0xba, 0xb7, 0x05, 0x03, 0x50, 0x2e, 0x3d, 0xdc,
	0x72, 0x20, 0x21, 0x01, 0x67, 0xf2, 0x76, 0x6a, 0xb4, 0xd3, 0x78, 0x99, 0x6b, 0xde, 0x37, 0x9a,
	0xf1, 0xa3, 0xb6, 0x67, 0xdb, 0x52, 0xf7, 0xda, 0x25, 0xbb, 0xbc, 0xd8, 0xd3, 0x3d, 0x1d, 0xb0,
	0x2d, 0xff, 0x5b, 0x91, 0x58, 0x5e, 0x19, 0x73, 0x86, 0x9f, 0xb6, 0x5c, 0xde, 0x18, 0x5b, 0xb6,
	0xc7, 0x92, 0xb2, 0x2c, 0x12, 0x8e, 0x5e, 0x05, 0xd7, 0x7f, 0xbb, 0x86, 0xe6, 0xba, 0x2c, 0x49,
	0x25, 0x44, 0xfb, 0x19, 0x98, 0x1c, 0x1f, 0xa0, 0x06, 0xd7, 0x49, 0xa2, 0x15, 0xa9, 0xaf, 0xd5,
	0x37, 0x67, 0x3f, 0x6e, 0xb7, 0x5f, 0x5d, 0x5b, 0x7b, 0x27, 0x90, 0x0f, 0xfd, 0xd3, 0x2e, 0x38,
	0x26, 0xa4, 0xdd, 0x9e, 0x3b, 0x1d, 0xae, 0xd6, 0xce, 0x86, 0xab, 0xf5, 0x97, 0xc3, 0xd5, 0x5a,
	0xa7, 0x74, 0xe1, 0x7d, 0x74, 0xdd, 0x1e, 0x4b, 0x72, 0x2d, 0x28, 0xef, 0xbf, 0x59, 0xd9, 0xdd,
	0xff, 0xee, 0x35, 0x56, 0xef, 0xc2, 0x1d, 0x34, 0x05, 0x27, 0xc0, 0xc9, 0xf5, 0xe0, 0xbc, 0xf7,
	0xef, 0x9c, 0x27, 0xc0, 0xab, 0x95, 0xc1, 0x85, 0x3f, 0x45, 0x0b, 0xb6, 0x2f, 0xd2, 0x14, 0x22,
	0x7a, 0x9c, 0x81, 0x11, 0x60, 0xc9, 0xd4, 0x5a, 0x7d, 0x73, 0x6a, 0x7b, 0xfe, 0xe5, 0x70, 0x15,
	0x7d, 0xa4, 0x13, 0xe1, 0x20, 0x49, 0x5d, 0xde, 0x99, 0x2f, 0xb1, 0xfd, 0x82, 0x5a, 0xff, 0x75,
	0x1e, 0x2d, 0xed, 0x18, 0x60, 0x0e, 0x76, 0x8e, 0x98, 0xea, 0x41, 0x0c, 0xff, 0x6f, 0x3f, 0x63,
	0x84, 0xf8, 0xe5, 0x46, 0x65, 0x5b, 0x3f, 0x7b, 0xb3, 0xf9, 0xef, 0xe2, 0x5e, 0xb3, 0xc7, 0x15,
	0x33, 0xbe, 0x8b, 0x90, 0xca, 0x12, 0xea, 0xd8, 0xa1, 0x04, 0x1b, 0x5a, 0x7d, 0x63, 0xac, 0x17,
	0x4d, 0x95, 0x25, 0x07, 0x01, 0xc0, 0xf7, 0xd1, 0x9c, 0xd3, 0xa9, 0xe0, 0x34, 0x35, 0x10, 0x8b,
	0x93, 0xd0, 0xbc, 0x99, 0xb1, 0xc0, 0x6c, 0x60, 0xf6, 0x02, 0x82, 0xb7, 0xd0, 0xac, 0x93, 0x96,
	0x82, 0xf2, 0x86, 0x88, 0xdc, 0xa8, 0x4c, 0x20, 0x27, 0xed, 0xc3, 0x82, 0xc0, 0x1b, 0x68, 0x9a,
	0x33, 0xca, 0xc1, 0x38, 0xd2, 0xa8, 0x84, 0x1b, 0x9c, 0xed, 0x80, 0x71, 0xde, 0xcc, 0xa5, 0x00,
	0xe5, 0x0a, 0x78, 0xba, 0xda, 0x5c, 0x20, 0x21, 0x70, 0x17, 0x95, 0x4f, 0xb4, 0x0f, 0x39, 0x99,
	0xa9, 0xe4, 0x9b, 0x05, 0xf1, 0x2d, 0xe4, 0xfe, 0xb0, 0x96, 0x59, 0x79, 0x59, 0x7a, 0xb3, 0xfa,
	0xb0, 0x9e, 0x19, 0xd5, 0xfe, 0x04, 0xcd, 0x87, 0x48, 0x02, 0xbe, 0xc7, 0xc2, 0x26, 0x04, 0xad,
	0xd5, 0x37, 0x9b, 0xdb, 0x1b, 0xff, 0x0c, 0xfd, 0x39, 0x5c, 0x5d, 0x32, 0x10, 0x31, 0xee, 0x3e,
	0x5f, 0x57, 0x5a, 0x59, 0x50, 0x56, 0x38, 0x31, 0x80, 0xf5, 0xce, 0x4d, 0x1f, 0xff, 0x7e, 0x94,
	0xc6, 0x1f, 0xa2, 0x66, 0xf0, 0x65, 0x16, 0x0c, 0x99, 0xad, 0xdc, 0x7f, 0xc6, 0x03, 0x3f, 0x58,
	0x30, 0xf8, 0x01, 0x0a, 0x69, 0x9a, 0x32, 0x6b, 0x7f, 0xd6, 0x26, 0x22, 0x73, 0x95, 0x81, 0x70,
	0xa8, 0xbd, 0x92, 0xc1, 0xbb, 0xa8, 0x19, 0x0b, 0x09, 0xd4, 0x8a, 0xe7, 0x40, 0x6e, 0x4e, 0x56,
	0xec, 0x8c, 0x4f, 0x76, 0xc5, 0x73, 0xc0, 0x8f, 0x10, 0x11, 0xca, 0x02, 0xcf, 0x0c, 0x50, 0xff,
	0xd7, 0xf6, 0x6f, 0x0f, 0x1d, 0x80, 0x11, 0x71, 0x4e, 0xe6, 0x2b, 0xab, 0x58, 0x1a, 0xf1, 0x07,
	0xd2, 0x76, 0xfb, 0x22, 0x7d, 0x16, 0x60, 0xbc, 0x89, 0xa6, 0xb3, 0x34, 0x62, 0x0e, 0x22, 0xb2,
	0x50, 0x99, 0x1b, 0x2d, 0xe3, 0x1d, 0x34, 0x63, 0xc0, 0x6a, 0x39, 0x80, 0x88, 0xdc, 0x9a, 0xb0,
	0xee, 0x51, 0xd0, 0x4b, 0x40, 0x0d, 0x40, 0xea, 0x14, 0xc8, 0x5b, 0x13, 0x4a, 0x46, 0x41, 0xfc,
	0x3e, 0x6a, 0xf0, 0xcc, 0x58, 0x6d, 0x08, 0x7e, 0xc5, 0x7d, 0x0d, 0xab, 0xf8, 0x2b, 0xd4, 0x88,
	0xb5, 0x49, 0x98, 0x23, 0x6f, 0x4f, 0xb6, 0x55, 0x19, 0xc3, 0xdf, 0xa0, 0x3b, 0x5c, 0xab, 0x58,
	0x66, 0xfe, 0x0a, 0x5b, 0x7e, 0x04, 0x09, 0xa3, 0x06, 0x7a, 0xc2, 0x3a, 0x93, 0x93, 0xc5, 0xca,
	0xbd, 0x6f, 0x5f, 0x06, 0xba, 0x81, 0xef, 0x94, 0x38, 0xbe, 0x87, 0xe6, 0xfa, 0x90, 0x53, 0xa1,
	0xe8, 0x80, 0xc9, 0x0c, 0xc8, 0x52, 0xf5, 0xdb, 0xd3, 0x87, 0xfc, 0xb1, 0x7a, 0xe6, 0x09, 0xbc,
	0x8e, 0xa6, 0x22, 0x11, 0xc7, 0xe4, 0x9d, 0x4a, 0x32, 0xac, 0xe1, 0xc7, 0x68, 0x96, 0xeb, 0x24,
	0x35, 0x60, 0xad, 0xd0, 0x8a, 0xdc, 0x9e, 0xec, 0x9c, 0x57, 0xb3, 0xf8, 0x29, 0x5a, 0xf1, 0x5f,
	0x30, 0xe0, 0x8e, 0x46, 0xcc, 0x31, 0x1a, 0x1b, 0x9d, 0xd0, 0x1e, 0xa7, 0x5a, 0xd1, 0x94, 0x65,
	0x16, 0x08, 0xa9, 0xac, 0x83, 0x94, 0xa1, 0x5d, 0xe6, 0xd8, 0xd7, 0x46, 0x27, 0x8f, 0xf8, 0x53,
	0xb5, 0xe7, 0x79, 0xfc, 0x23, 0x5a, 0x2c, 0x7b, 0x56, 0xcc, 0xbf, 0xf2, 0x3b, 0x49, 0xee, 0x4c,
	0x56, 0x24, 0x2e, 0x24, 0xc5, 0xa4, 0x0d, 0x53, 0xd6, 0x8e, 0xab, 0x53, 0x2d, 0x05, 0xcf, 0xc9,
	0xf2, 0x7f, 0x50, 0xef, 0x05, 0x05, 0xfe, 0x02, 0x4d, 0x59, 0xce, 0x14, 0x79, 0x77, 0x32, 0x55,
	0x08, 0xe1, 0x4f, 0xd0, 0x42, 0x9c, 0x49, 0x59, 0x8c, 0x77, 0xaa, 0x58, 0x02, 0xe4, 0xbd, 0xca,
	0xae, 0xdd, 0xf4, 0x58, 0x98, 0xf1, 0x4f, 0x58, 0x02, 0xf8, 0x4b, 0x84, 0xd9, 0xc0, 0xe8, 0xd1,
	0x1d, 0x2b, 0x87, 0xfd, 0x4a, 0x65, 0xf4, 0x96, 0x27, 0x8b, 0xcb, 0x55, 0x4c, 0xfc, 0xed, 0x0f,
	0x4e, 0xff, 0x68, 0xd5, 0x4e, 0xcf, 0x5b, 0xf5, 0xb3, 0xf3, 0x56, 0xfd, 0xc5, 0x79, 0xab, 0xfe,
	0xfb, 0x79, 0xab, 0xfe, 0xcb, 0x45, 0xab, 0x76, 0x76, 0xd1, 0xaa, 0xbd, 0xb8, 0x68, 0xd5, 0x7e,
	0x9a, 0x2e, 0xbf, 0x5a, 0x87, 0x8d, 0xf0, 0x4f, 0xca, 0x83, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x7b, 0x7f, 0x4f, 0x42, 0x09, 0x00, 0x00,
}

func (m *SampledQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SampledQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SampledQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkippedQueries != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.SkippedQueries))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.CommonSQLExecDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CreateChangefeedQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChangefeedQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateChangefeedQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvroSchemaPrefix {
		i--
		if m.AvroSchemaPrefix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.FullTableName {
		i--
		if m.FullTableName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if len(m.Scan) > 0 {
		i -= len(m.Scan)
		copy(dAtA[i:], m.Scan)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Scan)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.SchemaChangePolicy) > 0 {
		i -= len(m.SchemaChangePolicy)
		copy(dAtA[i:], m.SchemaChangePolicy)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.SchemaChangePolicy)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.SchemaChangeEvents) > 0 {
		i -= len(m.SchemaChangeEvents)
		copy(dAtA[i:], m.SchemaChangeEvents)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.SchemaChangeEvents)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.ProtectDataFromGcOnPause {
		i--
		if m.ProtectDataFromGcOnPause {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Compression) > 0 {
		i -= len(m.Compression)
		copy(dAtA[i:], m.Compression)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Compression)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.Diff {
		i--
		if m.Diff {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.KeyInValue {
		i--
		if m.KeyInValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ConfluentSchemaRegistry {
		i--
		if m.ConfluentSchemaRegistry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Cursor {
		i--
		if m.Cursor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Envelope) > 0 {
		i -= len(m.Envelope)
		copy(dAtA[i:], m.Envelope)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Envelope)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Resolved) > 0 {
		i -= len(m.Resolved)
		copy(dAtA[i:], m.Resolved)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.Resolved)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Updated {
		i--
		if m.Updated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.InsecureTlsSkipVerify {
		i--
		if m.InsecureTlsSkipVerify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.FileSize) > 0 {
		i -= len(m.FileSize)
		copy(dAtA[i:], m.FileSize)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.FileSize)))
		i--
		dAtA[i] = 0x6a
	}
	if m.SaslPassword {
		i--
		if m.SaslPassword {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.SaslUser {
		i--
		if m.SaslUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.SaslMechanism) > 0 {
		i -= len(m.SaslMechanism)
		copy(dAtA[i:], m.SaslMechanism)
		i = encodeVarintTelemetry(dAtA, i, uint64(len(m.SaslMechanism)))
		i--
		dAtA[i] = 0x52
	}
	if m.SaslEnabled {
		i--
		if m.SaslEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.ClientKey {
		i--
		if m.ClientKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.ClientCert {
		i--
		if m.ClientCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CaCert {
		i--
		if m.CaCert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TlsEnabled {
		i--
		if m.TlsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.TopicPrefix {
		i--
		if m.TopicPrefix {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.NumTables != 0 {
		i = encodeVarintTelemetry(dAtA, i, uint64(m.NumTables))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.CommonChangefeedEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTelemetry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTelemetry(dAtA []byte, offset int, v uint64) int {
	offset -= sovTelemetry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SampledQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.CommonSQLExecDetails.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if m.SkippedQueries != 0 {
		n += 1 + sovTelemetry(uint64(m.SkippedQueries))
	}
	return n
}

func (m *CreateChangefeedQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	l = m.CommonChangefeedEventDetails.Size()
	n += 1 + l + sovTelemetry(uint64(l))
	if m.NumTables != 0 {
		n += 1 + sovTelemetry(uint64(m.NumTables))
	}
	if m.TopicPrefix {
		n += 2
	}
	if m.TlsEnabled {
		n += 2
	}
	if m.CaCert {
		n += 2
	}
	if m.ClientCert {
		n += 2
	}
	if m.ClientKey {
		n += 2
	}
	if m.SaslEnabled {
		n += 2
	}
	l = len(m.SaslMechanism)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.SaslUser {
		n += 2
	}
	if m.SaslPassword {
		n += 2
	}
	l = len(m.FileSize)
	if l > 0 {
		n += 1 + l + sovTelemetry(uint64(l))
	}
	if m.InsecureTlsSkipVerify {
		n += 2
	}
	if m.Updated {
		n += 2
	}
	l = len(m.Resolved)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Envelope)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	if m.Cursor {
		n += 3
	}
	l = len(m.Format)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	if m.ConfluentSchemaRegistry {
		n += 3
	}
	if m.KeyInValue {
		n += 3
	}
	if m.Diff {
		n += 3
	}
	l = len(m.Compression)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	if m.ProtectDataFromGcOnPause {
		n += 3
	}
	l = len(m.SchemaChangeEvents)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	l = len(m.SchemaChangePolicy)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	l = len(m.Scan)
	if l > 0 {
		n += 2 + l + sovTelemetry(uint64(l))
	}
	if m.FullTableName {
		n += 3
	}
	if m.AvroSchemaPrefix {
		n += 3
	}
	return n
}

func sovTelemetry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTelemetry(x uint64) (n int) {
	return sovTelemetry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SampledQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SampledQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SampledQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLExecDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLExecDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkippedQueries", wireType)
			}
			m.SkippedQueries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkippedQueries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChangefeedQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChangefeedQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChangefeedQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonChangefeedEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonChangefeedEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTables", wireType)
			}
			m.NumTables = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumTables |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicPrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TopicPrefix = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlsEnabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CaCert = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientCert = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientKey = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaslEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaslEnabled = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaslMechanism", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaslMechanism = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaslUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaslUser = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaslPassword", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaslPassword = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsecureTlsSkipVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InsecureTlsSkipVerify = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Updated = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resolved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envelope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cursor = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfluentSchemaRegistry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConfluentSchemaRegistry = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyInValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeyInValue = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diff", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Diff = bool(v != 0)
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Compression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectDataFromGcOnPause", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProtectDataFromGcOnPause = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaChangeEvents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaChangeEvents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaChangePolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaChangePolicy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTelemetry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTelemetry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTableName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullTableName = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvroSchemaPrefix", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AvroSchemaPrefix = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTelemetry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTelemetry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTelemetry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTelemetry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTelemetry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTelemetry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTelemetry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTelemetry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTelemetry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTelemetry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTelemetry = fmt.Errorf("proto: unexpected end of group")
)
