// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cockroachdb/cockroach/pkg/util/log (interfaces: TestingLogSink)

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	exit "github.com/cockroachdb/cockroach/pkg/cli/exit"
	gomock "github.com/golang/mock/gomock"
)

// MockLogSink is a mock of TestingLogSink interface.
type MockLogSink struct {
	ctrl     *gomock.Controller
	recorder *MockLogSinkMockRecorder
}

// MockLogSinkMockRecorder is the mock recorder for MockLogSink.
type MockLogSinkMockRecorder struct {
	mock *MockLogSink
}

// NewMockLogSink creates a new mock instance.
func NewMockLogSink(ctrl *gomock.Controller) *MockLogSink {
	mock := &MockLogSink{ctrl: ctrl}
	mock.recorder = &MockLogSinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogSink) EXPECT() *MockLogSinkMockRecorder {
	return m.recorder
}

// active mocks base method.
func (m *MockLogSink) active() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "active")
	ret0, _ := ret[0].(bool)
	return ret0
}

// active indicates an expected call of active.
func (mr *MockLogSinkMockRecorder) active() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "active", reflect.TypeOf((*MockLogSink)(nil).active))
}

// attachHints mocks base method.
func (m *MockLogSink) attachHints(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "attachHints", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// attachHints indicates an expected call of attachHints.
func (mr *MockLogSinkMockRecorder) attachHints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "attachHints", reflect.TypeOf((*MockLogSink)(nil).attachHints), arg0)
}

// exitCode mocks base method.
func (m *MockLogSink) exitCode() exit.Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exitCode")
	ret0, _ := ret[0].(exit.Code)
	return ret0
}

// exitCode indicates an expected call of exitCode.
func (mr *MockLogSinkMockRecorder) exitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exitCode", reflect.TypeOf((*MockLogSink)(nil).exitCode))
}

// output mocks base method.
func (m *MockLogSink) output(arg0 []byte, arg1 sinkOutputOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "output", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// output indicates an expected call of output.
func (mr *MockLogSinkMockRecorder) output(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "output", reflect.TypeOf((*MockLogSink)(nil).output), arg0, arg1)
}
