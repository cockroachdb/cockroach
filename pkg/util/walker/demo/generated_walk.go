// Code generated by hand. DO NOT EDIT.
// source: demo.go
package demo

// This file contains miscellaneous support.

import (
	"context"
	"reflect"

	"github.com/cockroachdb/cockroach/pkg/util/walker"
)

// Generate some type tokens to prevent inappropriate assignments.
var (
	statementType     = reflect.TypeOf([]Statement(nil)).Elem()
	statementImplType = reflect.TypeOf([]statementImpl(nil)).Elem()
	barPtrType        = reflect.TypeOf([]*Bar(nil)).Elem()
	fooPtrType        = reflect.TypeOf([]*Foo(nil)).Elem()
	quuxType          = reflect.TypeOf([]Quux(nil)).Elem()
)

func WalkStatement(
	ctx context.Context, tgt Statement, v StatementVisitor,
) (Statement, bool, error) {
	return walkStatement(ctx, tgt, v, statementType)
}

func walkStatement(
	ctx context.Context, tgt Statement, v StatementVisitor, assignableTo reflect.Type,
) (statementImpl, bool, error) {
	var err error
	defer func() {
		if r := recover(); r != nil {
			if we, ok := r.(*walker.WalkError); ok {
				err = we
			} else {
				panic(r)
			}
		}
	}()

	s := ensureStatementImpl(tgt, assignableTo)
	s, changed := (&baseStatementContext{Context: ctx}).accept(v, s, assignableTo)
	return s, changed, err
}

func WalkStatements(
	ctx context.Context, tgt []Statement, v StatementVisitor,
) ([]Statement, bool, error) {
	panic("unimplemented")
	/*
		var err error
		defer func() {
			if r := recover(); r != nil {
				if we, ok := r.(*walker.WalkError); ok {
					err = we
				} else {
					panic(r)
				}
			}
		}()

		ret, changed := (&baseStatementContext{Context: ctx}).acceptMany(v, ensureStatementImpls(tgt, statementImplType), statementImplType)
		return ret, changed, err
	*/
}
