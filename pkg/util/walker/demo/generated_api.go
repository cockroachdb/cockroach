// Code generated by hand. DO NOT EDIT.
// source: demo.go
package demo

// This file contains the interfaces that users will interact with.

import (
	"context"
	"reflect"
)

// StatementContext allows for in-place structural modification by a
// visitor.
type StatementContext interface {
	context.Context

	// Accepts an arbitrary value to be processed in the current context.
	// In general, a visitor will pass itself for the v value, but
	// we allow it to be overridden to allow a meta-visitor to choose
	// between other visitor implementations to apply.
	Accept(v StatementVisitor, n Statement) (res Statement, changed bool)

	// AcceptMany is a slice-oriented version of the above.  It guarantees
	// that the returned type will be identical to the input type.
	AcceptMany(v StatementVisitor, n []Statement) (res []Statement, changed bool)

	CanReplace() bool
	Replace(n Statement)

	CanInsertBefore() bool
	InsertBefore(n Statement)

	CanInsertAfter() bool
	InsertAfter(n Statement)

	CanRemove() bool
	Remove()

	// Internal version of Accept to check types.
	accept(v StatementVisitor, n statementImpl, assignableTo reflect.Type) (res statementImpl, changed bool)
	// Internal version of AcceptMany to check types.
	acceptMany(v StatementVisitor, n []statementImpl, assignableTo reflect.Type) (res []statementImpl, changed bool)
}

// This generated interface will contain pre/post pairs for
// every type that implements the visitable interface.
// Whether or not you get a pointer or a struct type in
// these methods depends on whether or not the struct or
// the pointer type implements the visitable interface.
type StatementVisitor interface {
	PreBar(ctx StatementContext, x *Bar) (bool, error)
	PreFoo(ctx StatementContext, x *Foo) (bool, error)
	PreQuux(ctx StatementContext, x Quux) (bool, error)

	PostBar(ctx StatementContext, x *Bar) error
	PostFoo(ctx StatementContext, x *Foo) error
	PostQuux(ctx StatementContext, x Quux) error
}

// A default implementation of the visitor implementation.
// This has provisions for allowing users to provide default
// pre/post methods since we can't call methods defined in a struct
// that has embedded this base type.
type StatementVisitorBase struct {
	DefaultPre  func(ctx StatementContext, x Statement) (bool, error)
	DefaultPost func(ctx StatementContext, x Statement) error
}

var _ StatementVisitor = &StatementVisitorBase{}

func (b StatementVisitorBase) PreBar(ctx StatementContext, x *Bar) (bool, error) {
	if b.DefaultPre == nil {
		return true, nil
	}
	return b.DefaultPre(ctx, x)
}

func (b StatementVisitorBase) PreFoo(ctx StatementContext, x *Foo) (bool, error) {
	if b.DefaultPre == nil {
		return true, nil
	}
	return b.DefaultPre(ctx, x)
}

func (b StatementVisitorBase) PreQuux(ctx StatementContext, x Quux) (bool, error) {
	if b.DefaultPre == nil {
		return true, nil
	}
	return b.DefaultPre(ctx, x)
}

func (b StatementVisitorBase) PostBar(ctx StatementContext, x *Bar) error {
	if b.DefaultPost == nil {
		return nil
	}
	return b.DefaultPost(ctx, x)
}

func (b StatementVisitorBase) PostFoo(ctx StatementContext, x *Foo) error {
	if b.DefaultPost == nil {
		return nil
	}
	return b.DefaultPost(ctx, x)
}

func (b StatementVisitorBase) PostQuux(ctx StatementContext, x Quux) error {
	if b.DefaultPre == nil {
		return nil
	}
	return b.DefaultPost(ctx, x)
}
