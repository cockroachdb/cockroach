# This test ensures the Watcher continues to serve some capability state
# even in the face of errors. It also ensures that the Watcher is able to
# transparently restart and update the global tenant capability state when
# that happens.

start
----
ok

updates
----

upsert ten=10 can_admin_unsplit=true
----
ok

upsert ten=11 can_admin_unsplit=false
----
ok

upsert ten=12 can_admin_unsplit=false
----
ok

updates
----
Incremental Update
update: ten=10 cap={can_admin_unsplit:true}
update: ten=11 cap={default}
update: ten=12 cap={default}

inject-error
----
big-yikes

# Update some more state. However, because of the injected error, we shouldn't
# observe any updates.

upsert ten=12 can_admin_unsplit=true
----
ok

delete ten=10
----
ok

upsert ten=50 can_admin_unsplit=false
----
ok

updates
----

# However, we should still be able to query the tenant capabilities that the
# Watcher was serving before the error happened.

flush-state
----
ten=10 cap={can_admin_unsplit:true}
ten=11 cap={default}
ten=12 cap={default}

get-capabilities ten=50
----
not-found

get-capabilities ten=12
----
{default}

get-capabilities ten=10
----
{can_admin_unsplit:true}

# Let the Watcher attempt to restart.
restart-after-injected-error
----
ok

# We expect the Watcher to kickoff a full table scan (complete update) once the
# it is able to restart.
updates
----
Complete Update
update: ten=11 cap={default}
update: ten=12 cap={can_admin_unsplit:true}
update: ten=50 cap={default}

flush-state
----
ten=11 cap={default}
ten=12 cap={can_admin_unsplit:true}
ten=50 cap={default}

get-capabilities ten=50
----
{default}

get-capabilities ten=12
----
{can_admin_unsplit:true}

get-capabilities ten=10
----
not-found
