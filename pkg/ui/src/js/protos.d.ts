// GENERATED FILE DO NOT EDIT
import * as $protobuf from "protobufjs";

/**
 * Namespace cockroach.
 * @exports cockroach
 * @namespace
 */
export namespace cockroach {

    /**
     * Namespace server.
     * @exports cockroach.server
     * @namespace
     */
    namespace server {

        /**
         * Namespace serverpb.
         * @exports cockroach.server.serverpb
         * @namespace
         */
        namespace serverpb {

            /**
             * ZoneConfigurationLevel enum.
             * @name ZoneConfigurationLevel
             * @memberof cockroach.server.serverpb
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} CLUSTER=1 CLUSTER value
             * @property {number} DATABASE=2 DATABASE value
             * @property {number} TABLE=3 TABLE value
             */
            enum ZoneConfigurationLevel {
                UNKNOWN = 0,
                CLUSTER = 1,
                DATABASE = 2,
                TABLE = 3
            }

            type DatabasesRequest$Properties = {};

            /**
             * Constructs a new DatabasesRequest.
             * @exports cockroach.server.serverpb.DatabasesRequest
             * @constructor
             * @param {cockroach.server.serverpb.DatabasesRequest$Properties=} [properties] Properties to set
             */
            class DatabasesRequest {

                /**
                 * Constructs a new DatabasesRequest.
                 * @exports cockroach.server.serverpb.DatabasesRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.DatabasesRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DatabasesRequest$Properties);

                /**
                 * Creates a new DatabasesRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.DatabasesRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DatabasesRequest} DatabasesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.DatabasesRequest$Properties): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Encodes the specified DatabasesRequest message. Does not implicitly {@link cockroach.server.serverpb.DatabasesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabasesRequest$Properties} message DatabasesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DatabasesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabasesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabasesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabasesRequest$Properties} message DatabasesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DatabasesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabasesRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DatabasesRequest} DatabasesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Decodes a DatabasesRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DatabasesRequest} DatabasesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Verifies a DatabasesRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DatabasesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabasesRequest} DatabasesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Creates a DatabasesRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DatabasesRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabasesRequest} DatabasesRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesRequest;

                /**
                 * Creates a plain object from a DatabasesRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DatabasesRequest} message DatabasesRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabasesRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DatabasesRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabasesRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DatabasesResponse$Properties = {
                databases?: string[];
            };

            /**
             * Constructs a new DatabasesResponse.
             * @exports cockroach.server.serverpb.DatabasesResponse
             * @constructor
             * @param {cockroach.server.serverpb.DatabasesResponse$Properties=} [properties] Properties to set
             */
            class DatabasesResponse {

                /**
                 * Constructs a new DatabasesResponse.
                 * @exports cockroach.server.serverpb.DatabasesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.DatabasesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DatabasesResponse$Properties);

                /**
                 * DatabasesResponse databases.
                 * @type {Array.<string>}
                 */
                public databases: string[];

                /**
                 * Creates a new DatabasesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.DatabasesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DatabasesResponse} DatabasesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.DatabasesResponse$Properties): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Encodes the specified DatabasesResponse message. Does not implicitly {@link cockroach.server.serverpb.DatabasesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabasesResponse$Properties} message DatabasesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DatabasesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabasesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabasesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabasesResponse$Properties} message DatabasesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DatabasesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabasesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DatabasesResponse} DatabasesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Decodes a DatabasesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DatabasesResponse} DatabasesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Verifies a DatabasesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DatabasesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabasesResponse} DatabasesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Creates a DatabasesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DatabasesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabasesResponse} DatabasesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DatabasesResponse;

                /**
                 * Creates a plain object from a DatabasesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DatabasesResponse} message DatabasesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabasesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DatabasesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabasesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DatabaseDetailsRequest$Properties = {
                database?: string;
            };

            /**
             * Constructs a new DatabaseDetailsRequest.
             * @exports cockroach.server.serverpb.DatabaseDetailsRequest
             * @constructor
             * @param {cockroach.server.serverpb.DatabaseDetailsRequest$Properties=} [properties] Properties to set
             */
            class DatabaseDetailsRequest {

                /**
                 * Constructs a new DatabaseDetailsRequest.
                 * @exports cockroach.server.serverpb.DatabaseDetailsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DatabaseDetailsRequest$Properties);

                /**
                 * DatabaseDetailsRequest database.
                 * @type {string}
                 */
                public database: string;

                /**
                 * Creates a new DatabaseDetailsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DatabaseDetailsRequest} DatabaseDetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.DatabaseDetailsRequest$Properties): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Encodes the specified DatabaseDetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest$Properties} message DatabaseDetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DatabaseDetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabaseDetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest$Properties} message DatabaseDetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DatabaseDetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabaseDetailsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DatabaseDetailsRequest} DatabaseDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Decodes a DatabaseDetailsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DatabaseDetailsRequest} DatabaseDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Verifies a DatabaseDetailsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DatabaseDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabaseDetailsRequest} DatabaseDetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Creates a DatabaseDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DatabaseDetailsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabaseDetailsRequest} DatabaseDetailsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsRequest;

                /**
                 * Creates a plain object from a DatabaseDetailsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest} message DatabaseDetailsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabaseDetailsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DatabaseDetailsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabaseDetailsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DatabaseDetailsResponse$Properties = {
                grants?: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties[];
                table_names?: string[];
                descriptor_id?: Long;
                zone_config?: cockroach.config.ZoneConfig$Properties;
                zone_config_level?: cockroach.server.serverpb.ZoneConfigurationLevel;
            };

            /**
             * Constructs a new DatabaseDetailsResponse.
             * @exports cockroach.server.serverpb.DatabaseDetailsResponse
             * @constructor
             * @param {cockroach.server.serverpb.DatabaseDetailsResponse$Properties=} [properties] Properties to set
             */
            class DatabaseDetailsResponse {

                /**
                 * Constructs a new DatabaseDetailsResponse.
                 * @exports cockroach.server.serverpb.DatabaseDetailsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DatabaseDetailsResponse$Properties);

                /**
                 * DatabaseDetailsResponse grants.
                 * @type {Array.<cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties>}
                 */
                public grants: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties[];

                /**
                 * DatabaseDetailsResponse table_names.
                 * @type {Array.<string>}
                 */
                public table_names: string[];

                /**
                 * DatabaseDetailsResponse descriptor_id.
                 * @type {Long}
                 */
                public descriptor_id: Long;

                /**
                 * DatabaseDetailsResponse zone_config.
                 * @type {(cockroach.config.ZoneConfig$Properties|null)}
                 */
                public zone_config: (cockroach.config.ZoneConfig$Properties|null);

                /**
                 * DatabaseDetailsResponse zone_config_level.
                 * @type {cockroach.server.serverpb.ZoneConfigurationLevel}
                 */
                public zone_config_level: cockroach.server.serverpb.ZoneConfigurationLevel;

                /**
                 * Creates a new DatabaseDetailsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DatabaseDetailsResponse} DatabaseDetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.DatabaseDetailsResponse$Properties): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Encodes the specified DatabaseDetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse$Properties} message DatabaseDetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DatabaseDetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DatabaseDetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse$Properties} message DatabaseDetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DatabaseDetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DatabaseDetailsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DatabaseDetailsResponse} DatabaseDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Decodes a DatabaseDetailsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DatabaseDetailsResponse} DatabaseDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Verifies a DatabaseDetailsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DatabaseDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabaseDetailsResponse} DatabaseDetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Creates a DatabaseDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DatabaseDetailsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DatabaseDetailsResponse} DatabaseDetailsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse;

                /**
                 * Creates a plain object from a DatabaseDetailsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse} message DatabaseDetailsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DatabaseDetailsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DatabaseDetailsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DatabaseDetailsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace DatabaseDetailsResponse {

                type Grant$Properties = {
                    user?: string;
                    privileges?: string[];
                };

                /**
                 * Constructs a new Grant.
                 * @exports cockroach.server.serverpb.DatabaseDetailsResponse.Grant
                 * @constructor
                 * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties=} [properties] Properties to set
                 */
                class Grant {

                    /**
                     * Constructs a new Grant.
                     * @exports cockroach.server.serverpb.DatabaseDetailsResponse.Grant
                     * @constructor
                     * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties);

                    /**
                     * Grant user.
                     * @type {string}
                     */
                    public user: string;

                    /**
                     * Grant privileges.
                     * @type {Array.<string>}
                     */
                    public privileges: string[];

                    /**
                     * Creates a new Grant instance using the specified properties.
                     * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} Grant instance
                     */
                    public static create(properties?: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Encodes the specified Grant message. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.Grant.verify|verify} messages.
                     * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties} message Grant message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Grant message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DatabaseDetailsResponse.Grant.verify|verify} messages.
                     * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties} message Grant message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.DatabaseDetailsResponse.Grant$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Grant message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Decodes a Grant message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Verifies a Grant message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} Grant
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.DatabaseDetailsResponse.Grant.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} Grant
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.DatabaseDetailsResponse.Grant;

                    /**
                     * Creates a plain object from a Grant message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.DatabaseDetailsResponse.Grant} message Grant
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.DatabaseDetailsResponse.Grant, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Grant message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Grant to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type TableDetailsRequest$Properties = {
                database?: string;
                table?: string;
            };

            /**
             * Constructs a new TableDetailsRequest.
             * @exports cockroach.server.serverpb.TableDetailsRequest
             * @constructor
             * @param {cockroach.server.serverpb.TableDetailsRequest$Properties=} [properties] Properties to set
             */
            class TableDetailsRequest {

                /**
                 * Constructs a new TableDetailsRequest.
                 * @exports cockroach.server.serverpb.TableDetailsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.TableDetailsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.TableDetailsRequest$Properties);

                /**
                 * TableDetailsRequest database.
                 * @type {string}
                 */
                public database: string;

                /**
                 * TableDetailsRequest table.
                 * @type {string}
                 */
                public table: string;

                /**
                 * Creates a new TableDetailsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.TableDetailsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.TableDetailsRequest} TableDetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.TableDetailsRequest$Properties): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Encodes the specified TableDetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableDetailsRequest$Properties} message TableDetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.TableDetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableDetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableDetailsRequest$Properties} message TableDetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableDetailsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.TableDetailsRequest} TableDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Decodes a TableDetailsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.TableDetailsRequest} TableDetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Verifies a TableDetailsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TableDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableDetailsRequest} TableDetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Creates a TableDetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.TableDetailsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableDetailsRequest} TableDetailsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsRequest;

                /**
                 * Creates a plain object from a TableDetailsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.TableDetailsRequest} message TableDetailsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableDetailsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TableDetailsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableDetailsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type TableDetailsResponse$Properties = {
                grants?: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties[];
                columns?: cockroach.server.serverpb.TableDetailsResponse.Column$Properties[];
                indexes?: cockroach.server.serverpb.TableDetailsResponse.Index$Properties[];
                range_count?: Long;
                create_table_statement?: string;
                zone_config?: cockroach.config.ZoneConfig$Properties;
                zone_config_level?: cockroach.server.serverpb.ZoneConfigurationLevel;
                descriptor_id?: Long;
            };

            /**
             * Constructs a new TableDetailsResponse.
             * @exports cockroach.server.serverpb.TableDetailsResponse
             * @constructor
             * @param {cockroach.server.serverpb.TableDetailsResponse$Properties=} [properties] Properties to set
             */
            class TableDetailsResponse {

                /**
                 * Constructs a new TableDetailsResponse.
                 * @exports cockroach.server.serverpb.TableDetailsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.TableDetailsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.TableDetailsResponse$Properties);

                /**
                 * TableDetailsResponse grants.
                 * @type {Array.<cockroach.server.serverpb.TableDetailsResponse.Grant$Properties>}
                 */
                public grants: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties[];

                /**
                 * TableDetailsResponse columns.
                 * @type {Array.<cockroach.server.serverpb.TableDetailsResponse.Column$Properties>}
                 */
                public columns: cockroach.server.serverpb.TableDetailsResponse.Column$Properties[];

                /**
                 * TableDetailsResponse indexes.
                 * @type {Array.<cockroach.server.serverpb.TableDetailsResponse.Index$Properties>}
                 */
                public indexes: cockroach.server.serverpb.TableDetailsResponse.Index$Properties[];

                /**
                 * TableDetailsResponse range_count.
                 * @type {Long}
                 */
                public range_count: Long;

                /**
                 * TableDetailsResponse create_table_statement.
                 * @type {string}
                 */
                public create_table_statement: string;

                /**
                 * TableDetailsResponse zone_config.
                 * @type {(cockroach.config.ZoneConfig$Properties|null)}
                 */
                public zone_config: (cockroach.config.ZoneConfig$Properties|null);

                /**
                 * TableDetailsResponse zone_config_level.
                 * @type {cockroach.server.serverpb.ZoneConfigurationLevel}
                 */
                public zone_config_level: cockroach.server.serverpb.ZoneConfigurationLevel;

                /**
                 * TableDetailsResponse descriptor_id.
                 * @type {Long}
                 */
                public descriptor_id: Long;

                /**
                 * Creates a new TableDetailsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.TableDetailsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.TableDetailsResponse} TableDetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.TableDetailsResponse$Properties): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Encodes the specified TableDetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableDetailsResponse$Properties} message TableDetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.TableDetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableDetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableDetailsResponse$Properties} message TableDetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableDetailsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.TableDetailsResponse} TableDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Decodes a TableDetailsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.TableDetailsResponse} TableDetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Verifies a TableDetailsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TableDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableDetailsResponse} TableDetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Creates a TableDetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.TableDetailsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableDetailsResponse} TableDetailsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse;

                /**
                 * Creates a plain object from a TableDetailsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.TableDetailsResponse} message TableDetailsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableDetailsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TableDetailsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableDetailsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TableDetailsResponse {

                type Grant$Properties = {
                    user?: string;
                    privileges?: string[];
                };

                /**
                 * Constructs a new Grant.
                 * @exports cockroach.server.serverpb.TableDetailsResponse.Grant
                 * @constructor
                 * @param {cockroach.server.serverpb.TableDetailsResponse.Grant$Properties=} [properties] Properties to set
                 */
                class Grant {

                    /**
                     * Constructs a new Grant.
                     * @exports cockroach.server.serverpb.TableDetailsResponse.Grant
                     * @constructor
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Grant$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties);

                    /**
                     * Grant user.
                     * @type {string}
                     */
                    public user: string;

                    /**
                     * Grant privileges.
                     * @type {Array.<string>}
                     */
                    public privileges: string[];

                    /**
                     * Creates a new Grant instance using the specified properties.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Grant$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Grant} Grant instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Encodes the specified Grant message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Grant.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Grant$Properties} message Grant message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Grant message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Grant.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Grant$Properties} message Grant message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.Grant$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Grant message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Grant} Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Decodes a Grant message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Grant} Grant
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Verifies a Grant message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Grant} Grant
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Creates a Grant message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.TableDetailsResponse.Grant.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Grant} Grant
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Grant;

                    /**
                     * Creates a plain object from a Grant message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Grant} message Grant
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Grant, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Grant message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Grant to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                type Column$Properties = {
                    name?: string;
                    type?: string;
                    nullable?: boolean;
                    default_value?: string;
                };

                /**
                 * Constructs a new Column.
                 * @exports cockroach.server.serverpb.TableDetailsResponse.Column
                 * @constructor
                 * @param {cockroach.server.serverpb.TableDetailsResponse.Column$Properties=} [properties] Properties to set
                 */
                class Column {

                    /**
                     * Constructs a new Column.
                     * @exports cockroach.server.serverpb.TableDetailsResponse.Column
                     * @constructor
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Column$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.Column$Properties);

                    /**
                     * Column name.
                     * @type {string}
                     */
                    public name: string;

                    /**
                     * Column type.
                     * @type {string}
                     */
                    public type: string;

                    /**
                     * Column nullable.
                     * @type {boolean}
                     */
                    public nullable: boolean;

                    /**
                     * Column default_value.
                     * @type {string}
                     */
                    public default_value: string;

                    /**
                     * Creates a new Column instance using the specified properties.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Column$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Column} Column instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.Column$Properties): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Encodes the specified Column message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Column.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Column$Properties} message Column message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.Column$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Column message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Column.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Column$Properties} message Column message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.Column$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Column message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Column} Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Decodes a Column message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Column} Column
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Verifies a Column message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Column message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Column} Column
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Creates a Column message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.TableDetailsResponse.Column.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Column} Column
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Column;

                    /**
                     * Creates a plain object from a Column message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Column} message Column
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Column, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Column message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Column to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                type Index$Properties = {
                    name?: string;
                    unique?: boolean;
                    seq?: Long;
                    column?: string;
                    direction?: string;
                    storing?: boolean;
                    implicit?: boolean;
                };

                /**
                 * Constructs a new Index.
                 * @exports cockroach.server.serverpb.TableDetailsResponse.Index
                 * @constructor
                 * @param {cockroach.server.serverpb.TableDetailsResponse.Index$Properties=} [properties] Properties to set
                 */
                class Index {

                    /**
                     * Constructs a new Index.
                     * @exports cockroach.server.serverpb.TableDetailsResponse.Index
                     * @constructor
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Index$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableDetailsResponse.Index$Properties);

                    /**
                     * Index name.
                     * @type {string}
                     */
                    public name: string;

                    /**
                     * Index unique.
                     * @type {boolean}
                     */
                    public unique: boolean;

                    /**
                     * Index seq.
                     * @type {Long}
                     */
                    public seq: Long;

                    /**
                     * Index column.
                     * @type {string}
                     */
                    public column: string;

                    /**
                     * Index direction.
                     * @type {string}
                     */
                    public direction: string;

                    /**
                     * Index storing.
                     * @type {boolean}
                     */
                    public storing: boolean;

                    /**
                     * Index implicit.
                     * @type {boolean}
                     */
                    public implicit: boolean;

                    /**
                     * Creates a new Index instance using the specified properties.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Index$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Index} Index instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableDetailsResponse.Index$Properties): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Encodes the specified Index message. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Index.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Index$Properties} message Index message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableDetailsResponse.Index$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Index message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableDetailsResponse.Index.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Index$Properties} message Index message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableDetailsResponse.Index$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Index message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Index} Index
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Decodes an Index message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Index} Index
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Verifies an Index message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates an Index message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Index} Index
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Creates an Index message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.TableDetailsResponse.Index.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableDetailsResponse.Index} Index
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableDetailsResponse.Index;

                    /**
                     * Creates a plain object from an Index message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.TableDetailsResponse.Index} message Index
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableDetailsResponse.Index, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Index message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Index to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type TableStatsRequest$Properties = {
                database?: string;
                table?: string;
            };

            /**
             * Constructs a new TableStatsRequest.
             * @exports cockroach.server.serverpb.TableStatsRequest
             * @constructor
             * @param {cockroach.server.serverpb.TableStatsRequest$Properties=} [properties] Properties to set
             */
            class TableStatsRequest {

                /**
                 * Constructs a new TableStatsRequest.
                 * @exports cockroach.server.serverpb.TableStatsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.TableStatsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.TableStatsRequest$Properties);

                /**
                 * TableStatsRequest database.
                 * @type {string}
                 */
                public database: string;

                /**
                 * TableStatsRequest table.
                 * @type {string}
                 */
                public table: string;

                /**
                 * Creates a new TableStatsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.TableStatsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.TableStatsRequest} TableStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.TableStatsRequest$Properties): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Encodes the specified TableStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.TableStatsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableStatsRequest$Properties} message TableStatsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.TableStatsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableStatsRequest$Properties} message TableStatsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.TableStatsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableStatsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.TableStatsRequest} TableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Decodes a TableStatsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.TableStatsRequest} TableStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Verifies a TableStatsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TableStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableStatsRequest} TableStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Creates a TableStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.TableStatsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableStatsRequest} TableStatsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsRequest;

                /**
                 * Creates a plain object from a TableStatsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.TableStatsRequest} message TableStatsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableStatsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TableStatsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableStatsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type TableStatsResponse$Properties = {
                range_count?: Long;
                replica_count?: Long;
                node_count?: Long;
                stats?: cockroach.storage.engine.enginepb.MVCCStats$Properties;
                missing_nodes?: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties[];
            };

            /**
             * Constructs a new TableStatsResponse.
             * @exports cockroach.server.serverpb.TableStatsResponse
             * @constructor
             * @param {cockroach.server.serverpb.TableStatsResponse$Properties=} [properties] Properties to set
             */
            class TableStatsResponse {

                /**
                 * Constructs a new TableStatsResponse.
                 * @exports cockroach.server.serverpb.TableStatsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.TableStatsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.TableStatsResponse$Properties);

                /**
                 * TableStatsResponse range_count.
                 * @type {Long}
                 */
                public range_count: Long;

                /**
                 * TableStatsResponse replica_count.
                 * @type {Long}
                 */
                public replica_count: Long;

                /**
                 * TableStatsResponse node_count.
                 * @type {Long}
                 */
                public node_count: Long;

                /**
                 * TableStatsResponse stats.
                 * @type {(cockroach.storage.engine.enginepb.MVCCStats$Properties|null)}
                 */
                public stats: (cockroach.storage.engine.enginepb.MVCCStats$Properties|null);

                /**
                 * TableStatsResponse missing_nodes.
                 * @type {Array.<cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties>}
                 */
                public missing_nodes: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties[];

                /**
                 * Creates a new TableStatsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.TableStatsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.TableStatsResponse} TableStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.TableStatsResponse$Properties): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Encodes the specified TableStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableStatsResponse$Properties} message TableStatsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.TableStatsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TableStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.TableStatsResponse$Properties} message TableStatsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.TableStatsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TableStatsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.TableStatsResponse} TableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Decodes a TableStatsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.TableStatsResponse} TableStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Verifies a TableStatsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TableStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableStatsResponse} TableStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Creates a TableStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.TableStatsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.TableStatsResponse} TableStatsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse;

                /**
                 * Creates a plain object from a TableStatsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.TableStatsResponse} message TableStatsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.TableStatsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TableStatsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TableStatsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TableStatsResponse {

                type MissingNode$Properties = {
                    node_id?: string;
                    error_message?: string;
                };

                /**
                 * Constructs a new MissingNode.
                 * @exports cockroach.server.serverpb.TableStatsResponse.MissingNode
                 * @constructor
                 * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties=} [properties] Properties to set
                 */
                class MissingNode {

                    /**
                     * Constructs a new MissingNode.
                     * @exports cockroach.server.serverpb.TableStatsResponse.MissingNode
                     * @constructor
                     * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties);

                    /**
                     * MissingNode node_id.
                     * @type {string}
                     */
                    public node_id: string;

                    /**
                     * MissingNode error_message.
                     * @type {string}
                     */
                    public error_message: string;

                    /**
                     * Creates a new MissingNode instance using the specified properties.
                     * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.TableStatsResponse.MissingNode} MissingNode instance
                     */
                    public static create(properties?: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Encodes the specified MissingNode message. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.MissingNode.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties} message MissingNode message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MissingNode message, length delimited. Does not implicitly {@link cockroach.server.serverpb.TableStatsResponse.MissingNode.verify|verify} messages.
                     * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties} message MissingNode message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.TableStatsResponse.MissingNode$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MissingNode message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.TableStatsResponse.MissingNode} MissingNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Decodes a MissingNode message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.TableStatsResponse.MissingNode} MissingNode
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Verifies a MissingNode message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a MissingNode message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableStatsResponse.MissingNode} MissingNode
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Creates a MissingNode message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.TableStatsResponse.MissingNode.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.TableStatsResponse.MissingNode} MissingNode
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.TableStatsResponse.MissingNode;

                    /**
                     * Creates a plain object from a MissingNode message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.TableStatsResponse.MissingNode} message MissingNode
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.TableStatsResponse.MissingNode, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this MissingNode message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MissingNode to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type UsersRequest$Properties = {};

            /**
             * Constructs a new UsersRequest.
             * @exports cockroach.server.serverpb.UsersRequest
             * @constructor
             * @param {cockroach.server.serverpb.UsersRequest$Properties=} [properties] Properties to set
             */
            class UsersRequest {

                /**
                 * Constructs a new UsersRequest.
                 * @exports cockroach.server.serverpb.UsersRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.UsersRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.UsersRequest$Properties);

                /**
                 * Creates a new UsersRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.UsersRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.UsersRequest} UsersRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.UsersRequest$Properties): cockroach.server.serverpb.UsersRequest;

                /**
                 * Encodes the specified UsersRequest message. Does not implicitly {@link cockroach.server.serverpb.UsersRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.UsersRequest$Properties} message UsersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.UsersRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UsersRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.UsersRequest$Properties} message UsersRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.UsersRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UsersRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.UsersRequest} UsersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersRequest;

                /**
                 * Decodes a UsersRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.UsersRequest} UsersRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersRequest;

                /**
                 * Verifies a UsersRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a UsersRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.UsersRequest} UsersRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersRequest;

                /**
                 * Creates a UsersRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.UsersRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.UsersRequest} UsersRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.UsersRequest;

                /**
                 * Creates a plain object from a UsersRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.UsersRequest} message UsersRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UsersRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this UsersRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this UsersRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type UsersResponse$Properties = {
                users?: cockroach.server.serverpb.UsersResponse.User$Properties[];
            };

            /**
             * Constructs a new UsersResponse.
             * @exports cockroach.server.serverpb.UsersResponse
             * @constructor
             * @param {cockroach.server.serverpb.UsersResponse$Properties=} [properties] Properties to set
             */
            class UsersResponse {

                /**
                 * Constructs a new UsersResponse.
                 * @exports cockroach.server.serverpb.UsersResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.UsersResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.UsersResponse$Properties);

                /**
                 * UsersResponse users.
                 * @type {Array.<cockroach.server.serverpb.UsersResponse.User$Properties>}
                 */
                public users: cockroach.server.serverpb.UsersResponse.User$Properties[];

                /**
                 * Creates a new UsersResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.UsersResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.UsersResponse} UsersResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.UsersResponse$Properties): cockroach.server.serverpb.UsersResponse;

                /**
                 * Encodes the specified UsersResponse message. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.UsersResponse$Properties} message UsersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.UsersResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified UsersResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.UsersResponse$Properties} message UsersResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.UsersResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a UsersResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.UsersResponse} UsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersResponse;

                /**
                 * Decodes a UsersResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.UsersResponse} UsersResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersResponse;

                /**
                 * Verifies a UsersResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a UsersResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.UsersResponse} UsersResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse;

                /**
                 * Creates a UsersResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.UsersResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.UsersResponse} UsersResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse;

                /**
                 * Creates a plain object from a UsersResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.UsersResponse} message UsersResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.UsersResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this UsersResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this UsersResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace UsersResponse {

                type User$Properties = {
                    username?: string;
                };

                /**
                 * Constructs a new User.
                 * @exports cockroach.server.serverpb.UsersResponse.User
                 * @constructor
                 * @param {cockroach.server.serverpb.UsersResponse.User$Properties=} [properties] Properties to set
                 */
                class User {

                    /**
                     * Constructs a new User.
                     * @exports cockroach.server.serverpb.UsersResponse.User
                     * @constructor
                     * @param {cockroach.server.serverpb.UsersResponse.User$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.UsersResponse.User$Properties);

                    /**
                     * User username.
                     * @type {string}
                     */
                    public username: string;

                    /**
                     * Creates a new User instance using the specified properties.
                     * @param {cockroach.server.serverpb.UsersResponse.User$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.UsersResponse.User} User instance
                     */
                    public static create(properties?: cockroach.server.serverpb.UsersResponse.User$Properties): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Encodes the specified User message. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.User.verify|verify} messages.
                     * @param {cockroach.server.serverpb.UsersResponse.User$Properties} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.UsersResponse.User$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified User message, length delimited. Does not implicitly {@link cockroach.server.serverpb.UsersResponse.User.verify|verify} messages.
                     * @param {cockroach.server.serverpb.UsersResponse.User$Properties} message User message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.UsersResponse.User$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a User message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.UsersResponse.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Decodes a User message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.UsersResponse.User} User
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Verifies a User message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.UsersResponse.User} User
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Creates a User message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.UsersResponse.User.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.UsersResponse.User} User
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.UsersResponse.User;

                    /**
                     * Creates a plain object from a User message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.UsersResponse.User} message User
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.UsersResponse.User, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this User message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this User to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type EventsRequest$Properties = {
                type?: string;
                target_id?: Long;
                limit?: number;
            };

            /**
             * Constructs a new EventsRequest.
             * @exports cockroach.server.serverpb.EventsRequest
             * @constructor
             * @param {cockroach.server.serverpb.EventsRequest$Properties=} [properties] Properties to set
             */
            class EventsRequest {

                /**
                 * Constructs a new EventsRequest.
                 * @exports cockroach.server.serverpb.EventsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.EventsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.EventsRequest$Properties);

                /**
                 * EventsRequest type.
                 * @type {string}
                 */
                public type: string;

                /**
                 * EventsRequest target_id.
                 * @type {Long}
                 */
                public target_id: Long;

                /**
                 * EventsRequest limit.
                 * @type {number}
                 */
                public limit: number;

                /**
                 * Creates a new EventsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.EventsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.EventsRequest} EventsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.EventsRequest$Properties): cockroach.server.serverpb.EventsRequest;

                /**
                 * Encodes the specified EventsRequest message. Does not implicitly {@link cockroach.server.serverpb.EventsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.EventsRequest$Properties} message EventsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.EventsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EventsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.EventsRequest$Properties} message EventsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.EventsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EventsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.EventsRequest} EventsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsRequest;

                /**
                 * Decodes an EventsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.EventsRequest} EventsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsRequest;

                /**
                 * Verifies an EventsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an EventsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.EventsRequest} EventsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsRequest;

                /**
                 * Creates an EventsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.EventsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.EventsRequest} EventsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.EventsRequest;

                /**
                 * Creates a plain object from an EventsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.EventsRequest} message EventsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EventsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this EventsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this EventsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type EventsResponse$Properties = {
                events?: cockroach.server.serverpb.EventsResponse.Event$Properties[];
            };

            /**
             * Constructs a new EventsResponse.
             * @exports cockroach.server.serverpb.EventsResponse
             * @constructor
             * @param {cockroach.server.serverpb.EventsResponse$Properties=} [properties] Properties to set
             */
            class EventsResponse {

                /**
                 * Constructs a new EventsResponse.
                 * @exports cockroach.server.serverpb.EventsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.EventsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.EventsResponse$Properties);

                /**
                 * EventsResponse events.
                 * @type {Array.<cockroach.server.serverpb.EventsResponse.Event$Properties>}
                 */
                public events: cockroach.server.serverpb.EventsResponse.Event$Properties[];

                /**
                 * Creates a new EventsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.EventsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.EventsResponse} EventsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.EventsResponse$Properties): cockroach.server.serverpb.EventsResponse;

                /**
                 * Encodes the specified EventsResponse message. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.EventsResponse$Properties} message EventsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.EventsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified EventsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.EventsResponse$Properties} message EventsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.EventsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an EventsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.EventsResponse} EventsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsResponse;

                /**
                 * Decodes an EventsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.EventsResponse} EventsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsResponse;

                /**
                 * Verifies an EventsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an EventsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.EventsResponse} EventsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse;

                /**
                 * Creates an EventsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.EventsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.EventsResponse} EventsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse;

                /**
                 * Creates a plain object from an EventsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.EventsResponse} message EventsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.EventsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this EventsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this EventsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace EventsResponse {

                type Event$Properties = {
                    timestamp?: google.protobuf.Timestamp$Properties;
                    event_type?: string;
                    target_id?: Long;
                    reporting_id?: Long;
                    info?: string;
                    unique_id?: Uint8Array;
                };

                /**
                 * Constructs a new Event.
                 * @exports cockroach.server.serverpb.EventsResponse.Event
                 * @constructor
                 * @param {cockroach.server.serverpb.EventsResponse.Event$Properties=} [properties] Properties to set
                 */
                class Event {

                    /**
                     * Constructs a new Event.
                     * @exports cockroach.server.serverpb.EventsResponse.Event
                     * @constructor
                     * @param {cockroach.server.serverpb.EventsResponse.Event$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.EventsResponse.Event$Properties);

                    /**
                     * Event timestamp.
                     * @type {(google.protobuf.Timestamp$Properties|null)}
                     */
                    public timestamp: (google.protobuf.Timestamp$Properties|null);

                    /**
                     * Event event_type.
                     * @type {string}
                     */
                    public event_type: string;

                    /**
                     * Event target_id.
                     * @type {Long}
                     */
                    public target_id: Long;

                    /**
                     * Event reporting_id.
                     * @type {Long}
                     */
                    public reporting_id: Long;

                    /**
                     * Event info.
                     * @type {string}
                     */
                    public info: string;

                    /**
                     * Event unique_id.
                     * @type {Uint8Array}
                     */
                    public unique_id: Uint8Array;

                    /**
                     * Creates a new Event instance using the specified properties.
                     * @param {cockroach.server.serverpb.EventsResponse.Event$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.EventsResponse.Event} Event instance
                     */
                    public static create(properties?: cockroach.server.serverpb.EventsResponse.Event$Properties): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Encodes the specified Event message. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.Event.verify|verify} messages.
                     * @param {cockroach.server.serverpb.EventsResponse.Event$Properties} message Event message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.EventsResponse.Event$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Event message, length delimited. Does not implicitly {@link cockroach.server.serverpb.EventsResponse.Event.verify|verify} messages.
                     * @param {cockroach.server.serverpb.EventsResponse.Event$Properties} message Event message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.EventsResponse.Event$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes an Event message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.EventsResponse.Event} Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Decodes an Event message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.EventsResponse.Event} Event
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Verifies an Event message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates an Event message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.EventsResponse.Event} Event
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Creates an Event message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.EventsResponse.Event.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.EventsResponse.Event} Event
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.EventsResponse.Event;

                    /**
                     * Creates a plain object from an Event message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.EventsResponse.Event} message Event
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.EventsResponse.Event, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Event message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Event to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type SetUIDataRequest$Properties = {
                key_values?: { [k: string]: Uint8Array };
            };

            /**
             * Constructs a new SetUIDataRequest.
             * @exports cockroach.server.serverpb.SetUIDataRequest
             * @constructor
             * @param {cockroach.server.serverpb.SetUIDataRequest$Properties=} [properties] Properties to set
             */
            class SetUIDataRequest {

                /**
                 * Constructs a new SetUIDataRequest.
                 * @exports cockroach.server.serverpb.SetUIDataRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.SetUIDataRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SetUIDataRequest$Properties);

                /**
                 * SetUIDataRequest key_values.
                 * @type {Object.<string,Uint8Array>}
                 */
                public key_values: { [k: string]: Uint8Array };

                /**
                 * Creates a new SetUIDataRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.SetUIDataRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SetUIDataRequest} SetUIDataRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.SetUIDataRequest$Properties): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Encodes the specified SetUIDataRequest message. Does not implicitly {@link cockroach.server.serverpb.SetUIDataRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SetUIDataRequest$Properties} message SetUIDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SetUIDataRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SetUIDataRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SetUIDataRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SetUIDataRequest$Properties} message SetUIDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SetUIDataRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SetUIDataRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SetUIDataRequest} SetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Decodes a SetUIDataRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SetUIDataRequest} SetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Verifies a SetUIDataRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SetUIDataRequest} SetUIDataRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Creates a SetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SetUIDataRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SetUIDataRequest} SetUIDataRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataRequest;

                /**
                 * Creates a plain object from a SetUIDataRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SetUIDataRequest} message SetUIDataRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SetUIDataRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SetUIDataRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SetUIDataRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type SetUIDataResponse$Properties = {};

            /**
             * Constructs a new SetUIDataResponse.
             * @exports cockroach.server.serverpb.SetUIDataResponse
             * @constructor
             * @param {cockroach.server.serverpb.SetUIDataResponse$Properties=} [properties] Properties to set
             */
            class SetUIDataResponse {

                /**
                 * Constructs a new SetUIDataResponse.
                 * @exports cockroach.server.serverpb.SetUIDataResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.SetUIDataResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SetUIDataResponse$Properties);

                /**
                 * Creates a new SetUIDataResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.SetUIDataResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SetUIDataResponse} SetUIDataResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.SetUIDataResponse$Properties): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Encodes the specified SetUIDataResponse message. Does not implicitly {@link cockroach.server.serverpb.SetUIDataResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SetUIDataResponse$Properties} message SetUIDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SetUIDataResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SetUIDataResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SetUIDataResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SetUIDataResponse$Properties} message SetUIDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SetUIDataResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SetUIDataResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SetUIDataResponse} SetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Decodes a SetUIDataResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SetUIDataResponse} SetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Verifies a SetUIDataResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SetUIDataResponse} SetUIDataResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Creates a SetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SetUIDataResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SetUIDataResponse} SetUIDataResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SetUIDataResponse;

                /**
                 * Creates a plain object from a SetUIDataResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SetUIDataResponse} message SetUIDataResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SetUIDataResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SetUIDataResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SetUIDataResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type GetUIDataRequest$Properties = {
                keys?: string[];
            };

            /**
             * Constructs a new GetUIDataRequest.
             * @exports cockroach.server.serverpb.GetUIDataRequest
             * @constructor
             * @param {cockroach.server.serverpb.GetUIDataRequest$Properties=} [properties] Properties to set
             */
            class GetUIDataRequest {

                /**
                 * Constructs a new GetUIDataRequest.
                 * @exports cockroach.server.serverpb.GetUIDataRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.GetUIDataRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.GetUIDataRequest$Properties);

                /**
                 * GetUIDataRequest keys.
                 * @type {Array.<string>}
                 */
                public keys: string[];

                /**
                 * Creates a new GetUIDataRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.GetUIDataRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.GetUIDataRequest} GetUIDataRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.GetUIDataRequest$Properties): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Encodes the specified GetUIDataRequest message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GetUIDataRequest$Properties} message GetUIDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.GetUIDataRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetUIDataRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GetUIDataRequest$Properties} message GetUIDataRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.GetUIDataRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetUIDataRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.GetUIDataRequest} GetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Decodes a GetUIDataRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.GetUIDataRequest} GetUIDataRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Verifies a GetUIDataRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a GetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GetUIDataRequest} GetUIDataRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Creates a GetUIDataRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.GetUIDataRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GetUIDataRequest} GetUIDataRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataRequest;

                /**
                 * Creates a plain object from a GetUIDataRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.GetUIDataRequest} message GetUIDataRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetUIDataRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this GetUIDataRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetUIDataRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type GetUIDataResponse$Properties = {
                key_values?: { [k: string]: cockroach.server.serverpb.GetUIDataResponse.Value$Properties };
            };

            /**
             * Constructs a new GetUIDataResponse.
             * @exports cockroach.server.serverpb.GetUIDataResponse
             * @constructor
             * @param {cockroach.server.serverpb.GetUIDataResponse$Properties=} [properties] Properties to set
             */
            class GetUIDataResponse {

                /**
                 * Constructs a new GetUIDataResponse.
                 * @exports cockroach.server.serverpb.GetUIDataResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.GetUIDataResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.GetUIDataResponse$Properties);

                /**
                 * GetUIDataResponse key_values.
                 * @type {Object.<string,cockroach.server.serverpb.GetUIDataResponse.Value$Properties>}
                 */
                public key_values: { [k: string]: cockroach.server.serverpb.GetUIDataResponse.Value$Properties };

                /**
                 * Creates a new GetUIDataResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.GetUIDataResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.GetUIDataResponse} GetUIDataResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.GetUIDataResponse$Properties): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Encodes the specified GetUIDataResponse message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GetUIDataResponse$Properties} message GetUIDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.GetUIDataResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GetUIDataResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GetUIDataResponse$Properties} message GetUIDataResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.GetUIDataResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GetUIDataResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.GetUIDataResponse} GetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Decodes a GetUIDataResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.GetUIDataResponse} GetUIDataResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Verifies a GetUIDataResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a GetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GetUIDataResponse} GetUIDataResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Creates a GetUIDataResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.GetUIDataResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GetUIDataResponse} GetUIDataResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse;

                /**
                 * Creates a plain object from a GetUIDataResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.GetUIDataResponse} message GetUIDataResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GetUIDataResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this GetUIDataResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this GetUIDataResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace GetUIDataResponse {

                type Value$Properties = {
                    value?: Uint8Array;
                    last_updated?: google.protobuf.Timestamp$Properties;
                };

                /**
                 * Constructs a new Value.
                 * @exports cockroach.server.serverpb.GetUIDataResponse.Value
                 * @constructor
                 * @param {cockroach.server.serverpb.GetUIDataResponse.Value$Properties=} [properties] Properties to set
                 */
                class Value {

                    /**
                     * Constructs a new Value.
                     * @exports cockroach.server.serverpb.GetUIDataResponse.Value
                     * @constructor
                     * @param {cockroach.server.serverpb.GetUIDataResponse.Value$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.GetUIDataResponse.Value$Properties);

                    /**
                     * Value value.
                     * @type {Uint8Array}
                     */
                    public value: Uint8Array;

                    /**
                     * Value last_updated.
                     * @type {(google.protobuf.Timestamp$Properties|null)}
                     */
                    public last_updated: (google.protobuf.Timestamp$Properties|null);

                    /**
                     * Creates a new Value instance using the specified properties.
                     * @param {cockroach.server.serverpb.GetUIDataResponse.Value$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.GetUIDataResponse.Value} Value instance
                     */
                    public static create(properties?: cockroach.server.serverpb.GetUIDataResponse.Value$Properties): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Encodes the specified Value message. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.Value.verify|verify} messages.
                     * @param {cockroach.server.serverpb.GetUIDataResponse.Value$Properties} message Value message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.GetUIDataResponse.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GetUIDataResponse.Value.verify|verify} messages.
                     * @param {cockroach.server.serverpb.GetUIDataResponse.Value$Properties} message Value message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.GetUIDataResponse.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Value message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.GetUIDataResponse.Value} Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Decodes a Value message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.GetUIDataResponse.Value} Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Verifies a Value message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.GetUIDataResponse.Value} Value
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.GetUIDataResponse.Value.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.GetUIDataResponse.Value} Value
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.GetUIDataResponse.Value;

                    /**
                     * Creates a plain object from a Value message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.GetUIDataResponse.Value} message Value
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.GetUIDataResponse.Value, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Value message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Value to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type ClusterRequest$Properties = {};

            /**
             * Constructs a new ClusterRequest.
             * @exports cockroach.server.serverpb.ClusterRequest
             * @constructor
             * @param {cockroach.server.serverpb.ClusterRequest$Properties=} [properties] Properties to set
             */
            class ClusterRequest {

                /**
                 * Constructs a new ClusterRequest.
                 * @exports cockroach.server.serverpb.ClusterRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.ClusterRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ClusterRequest$Properties);

                /**
                 * Creates a new ClusterRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.ClusterRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ClusterRequest} ClusterRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ClusterRequest$Properties): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Encodes the specified ClusterRequest message. Does not implicitly {@link cockroach.server.serverpb.ClusterRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ClusterRequest$Properties} message ClusterRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ClusterRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClusterRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ClusterRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ClusterRequest$Properties} message ClusterRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ClusterRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClusterRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ClusterRequest} ClusterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Decodes a ClusterRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ClusterRequest} ClusterRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Verifies a ClusterRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ClusterRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ClusterRequest} ClusterRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Creates a ClusterRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ClusterRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ClusterRequest} ClusterRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ClusterRequest;

                /**
                 * Creates a plain object from a ClusterRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ClusterRequest} message ClusterRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ClusterRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ClusterRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClusterRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ClusterResponse$Properties = {
                cluster_id?: string;
            };

            /**
             * Constructs a new ClusterResponse.
             * @exports cockroach.server.serverpb.ClusterResponse
             * @constructor
             * @param {cockroach.server.serverpb.ClusterResponse$Properties=} [properties] Properties to set
             */
            class ClusterResponse {

                /**
                 * Constructs a new ClusterResponse.
                 * @exports cockroach.server.serverpb.ClusterResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.ClusterResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ClusterResponse$Properties);

                /**
                 * ClusterResponse cluster_id.
                 * @type {string}
                 */
                public cluster_id: string;

                /**
                 * Creates a new ClusterResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.ClusterResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ClusterResponse} ClusterResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ClusterResponse$Properties): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Encodes the specified ClusterResponse message. Does not implicitly {@link cockroach.server.serverpb.ClusterResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ClusterResponse$Properties} message ClusterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ClusterResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ClusterResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ClusterResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ClusterResponse$Properties} message ClusterResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ClusterResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ClusterResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ClusterResponse} ClusterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Decodes a ClusterResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ClusterResponse} ClusterResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Verifies a ClusterResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ClusterResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ClusterResponse} ClusterResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Creates a ClusterResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ClusterResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ClusterResponse} ClusterResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ClusterResponse;

                /**
                 * Creates a plain object from a ClusterResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ClusterResponse} message ClusterResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ClusterResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ClusterResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ClusterResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /**
             * DrainMode enum.
             * @name DrainMode
             * @memberof cockroach.server.serverpb
             * @enum {number}
             * @property {number} CLIENT=0 CLIENT value
             * @property {number} LEASES=1 LEASES value
             */
            enum DrainMode {
                CLIENT = 0,
                LEASES = 1
            }

            type DrainRequest$Properties = {
                on?: number[];
                off?: number[];
                shutdown?: boolean;
            };

            /**
             * Constructs a new DrainRequest.
             * @exports cockroach.server.serverpb.DrainRequest
             * @constructor
             * @param {cockroach.server.serverpb.DrainRequest$Properties=} [properties] Properties to set
             */
            class DrainRequest {

                /**
                 * Constructs a new DrainRequest.
                 * @exports cockroach.server.serverpb.DrainRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.DrainRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DrainRequest$Properties);

                /**
                 * DrainRequest on.
                 * @type {Array.<number>}
                 */
                public on: number[];

                /**
                 * DrainRequest off.
                 * @type {Array.<number>}
                 */
                public off: number[];

                /**
                 * DrainRequest shutdown.
                 * @type {boolean}
                 */
                public shutdown: boolean;

                /**
                 * Creates a new DrainRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.DrainRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DrainRequest} DrainRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.DrainRequest$Properties): cockroach.server.serverpb.DrainRequest;

                /**
                 * Encodes the specified DrainRequest message. Does not implicitly {@link cockroach.server.serverpb.DrainRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DrainRequest$Properties} message DrainRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DrainRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrainRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DrainRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DrainRequest$Properties} message DrainRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DrainRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrainRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DrainRequest} DrainRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DrainRequest;

                /**
                 * Decodes a DrainRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DrainRequest} DrainRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DrainRequest;

                /**
                 * Verifies a DrainRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DrainRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DrainRequest} DrainRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DrainRequest;

                /**
                 * Creates a DrainRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DrainRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DrainRequest} DrainRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DrainRequest;

                /**
                 * Creates a plain object from a DrainRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DrainRequest} message DrainRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DrainRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DrainRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrainRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DrainResponse$Properties = {
                on?: number[];
            };

            /**
             * Constructs a new DrainResponse.
             * @exports cockroach.server.serverpb.DrainResponse
             * @constructor
             * @param {cockroach.server.serverpb.DrainResponse$Properties=} [properties] Properties to set
             */
            class DrainResponse {

                /**
                 * Constructs a new DrainResponse.
                 * @exports cockroach.server.serverpb.DrainResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.DrainResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DrainResponse$Properties);

                /**
                 * DrainResponse on.
                 * @type {Array.<number>}
                 */
                public on: number[];

                /**
                 * Creates a new DrainResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.DrainResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DrainResponse} DrainResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.DrainResponse$Properties): cockroach.server.serverpb.DrainResponse;

                /**
                 * Encodes the specified DrainResponse message. Does not implicitly {@link cockroach.server.serverpb.DrainResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DrainResponse$Properties} message DrainResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DrainResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DrainResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DrainResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DrainResponse$Properties} message DrainResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DrainResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DrainResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DrainResponse} DrainResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DrainResponse;

                /**
                 * Decodes a DrainResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DrainResponse} DrainResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DrainResponse;

                /**
                 * Verifies a DrainResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DrainResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DrainResponse} DrainResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DrainResponse;

                /**
                 * Creates a DrainResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DrainResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DrainResponse} DrainResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DrainResponse;

                /**
                 * Creates a plain object from a DrainResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DrainResponse} message DrainResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DrainResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DrainResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DrainResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type SettingsRequest$Properties = {
                keys?: string[];
            };

            /**
             * Constructs a new SettingsRequest.
             * @exports cockroach.server.serverpb.SettingsRequest
             * @constructor
             * @param {cockroach.server.serverpb.SettingsRequest$Properties=} [properties] Properties to set
             */
            class SettingsRequest {

                /**
                 * Constructs a new SettingsRequest.
                 * @exports cockroach.server.serverpb.SettingsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.SettingsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SettingsRequest$Properties);

                /**
                 * SettingsRequest keys.
                 * @type {Array.<string>}
                 */
                public keys: string[];

                /**
                 * Creates a new SettingsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.SettingsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SettingsRequest} SettingsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.SettingsRequest$Properties): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Encodes the specified SettingsRequest message. Does not implicitly {@link cockroach.server.serverpb.SettingsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SettingsRequest$Properties} message SettingsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SettingsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SettingsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SettingsRequest$Properties} message SettingsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SettingsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SettingsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SettingsRequest} SettingsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Decodes a SettingsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SettingsRequest} SettingsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Verifies a SettingsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SettingsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SettingsRequest} SettingsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Creates a SettingsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SettingsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SettingsRequest} SettingsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SettingsRequest;

                /**
                 * Creates a plain object from a SettingsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SettingsRequest} message SettingsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SettingsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SettingsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SettingsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type SettingsResponse$Properties = {
                key_values?: { [k: string]: cockroach.server.serverpb.SettingsResponse.Value$Properties };
            };

            /**
             * Constructs a new SettingsResponse.
             * @exports cockroach.server.serverpb.SettingsResponse
             * @constructor
             * @param {cockroach.server.serverpb.SettingsResponse$Properties=} [properties] Properties to set
             */
            class SettingsResponse {

                /**
                 * Constructs a new SettingsResponse.
                 * @exports cockroach.server.serverpb.SettingsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.SettingsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SettingsResponse$Properties);

                /**
                 * SettingsResponse key_values.
                 * @type {Object.<string,cockroach.server.serverpb.SettingsResponse.Value$Properties>}
                 */
                public key_values: { [k: string]: cockroach.server.serverpb.SettingsResponse.Value$Properties };

                /**
                 * Creates a new SettingsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.SettingsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SettingsResponse} SettingsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.SettingsResponse$Properties): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Encodes the specified SettingsResponse message. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SettingsResponse$Properties} message SettingsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SettingsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SettingsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SettingsResponse$Properties} message SettingsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SettingsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SettingsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SettingsResponse} SettingsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Decodes a SettingsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SettingsResponse} SettingsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Verifies a SettingsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SettingsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SettingsResponse} SettingsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Creates a SettingsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SettingsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SettingsResponse} SettingsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse;

                /**
                 * Creates a plain object from a SettingsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SettingsResponse} message SettingsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SettingsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SettingsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SettingsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace SettingsResponse {

                type Value$Properties = {
                    value?: string;
                    type?: string;
                    description?: string;
                };

                /**
                 * Constructs a new Value.
                 * @exports cockroach.server.serverpb.SettingsResponse.Value
                 * @constructor
                 * @param {cockroach.server.serverpb.SettingsResponse.Value$Properties=} [properties] Properties to set
                 */
                class Value {

                    /**
                     * Constructs a new Value.
                     * @exports cockroach.server.serverpb.SettingsResponse.Value
                     * @constructor
                     * @param {cockroach.server.serverpb.SettingsResponse.Value$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.SettingsResponse.Value$Properties);

                    /**
                     * Value value.
                     * @type {string}
                     */
                    public value: string;

                    /**
                     * Value type.
                     * @type {string}
                     */
                    public type: string;

                    /**
                     * Value description.
                     * @type {string}
                     */
                    public description: string;

                    /**
                     * Creates a new Value instance using the specified properties.
                     * @param {cockroach.server.serverpb.SettingsResponse.Value$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.SettingsResponse.Value} Value instance
                     */
                    public static create(properties?: cockroach.server.serverpb.SettingsResponse.Value$Properties): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Encodes the specified Value message. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.Value.verify|verify} messages.
                     * @param {cockroach.server.serverpb.SettingsResponse.Value$Properties} message Value message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.SettingsResponse.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SettingsResponse.Value.verify|verify} messages.
                     * @param {cockroach.server.serverpb.SettingsResponse.Value$Properties} message Value message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.SettingsResponse.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Value message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.SettingsResponse.Value} Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Decodes a Value message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.SettingsResponse.Value} Value
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Verifies a Value message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.SettingsResponse.Value} Value
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Creates a Value message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.SettingsResponse.Value.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.SettingsResponse.Value} Value
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.SettingsResponse.Value;

                    /**
                     * Creates a plain object from a Value message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.SettingsResponse.Value} message Value
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.SettingsResponse.Value, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Value message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Value to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type HealthRequest$Properties = {};

            /**
             * Constructs a new HealthRequest.
             * @exports cockroach.server.serverpb.HealthRequest
             * @constructor
             * @param {cockroach.server.serverpb.HealthRequest$Properties=} [properties] Properties to set
             */
            class HealthRequest {

                /**
                 * Constructs a new HealthRequest.
                 * @exports cockroach.server.serverpb.HealthRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.HealthRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.HealthRequest$Properties);

                /**
                 * Creates a new HealthRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.HealthRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.HealthRequest} HealthRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.HealthRequest$Properties): cockroach.server.serverpb.HealthRequest;

                /**
                 * Encodes the specified HealthRequest message. Does not implicitly {@link cockroach.server.serverpb.HealthRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.HealthRequest$Properties} message HealthRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.HealthRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HealthRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HealthRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.HealthRequest$Properties} message HealthRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.HealthRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HealthRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.HealthRequest} HealthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HealthRequest;

                /**
                 * Decodes a HealthRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.HealthRequest} HealthRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HealthRequest;

                /**
                 * Verifies a HealthRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a HealthRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.HealthRequest} HealthRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HealthRequest;

                /**
                 * Creates a HealthRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.HealthRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.HealthRequest} HealthRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.HealthRequest;

                /**
                 * Creates a plain object from a HealthRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.HealthRequest} message HealthRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HealthRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this HealthRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type HealthResponse$Properties = {};

            /**
             * Constructs a new HealthResponse.
             * @exports cockroach.server.serverpb.HealthResponse
             * @constructor
             * @param {cockroach.server.serverpb.HealthResponse$Properties=} [properties] Properties to set
             */
            class HealthResponse {

                /**
                 * Constructs a new HealthResponse.
                 * @exports cockroach.server.serverpb.HealthResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.HealthResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.HealthResponse$Properties);

                /**
                 * Creates a new HealthResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.HealthResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.HealthResponse} HealthResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.HealthResponse$Properties): cockroach.server.serverpb.HealthResponse;

                /**
                 * Encodes the specified HealthResponse message. Does not implicitly {@link cockroach.server.serverpb.HealthResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.HealthResponse$Properties} message HealthResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.HealthResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified HealthResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.HealthResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.HealthResponse$Properties} message HealthResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.HealthResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a HealthResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.HealthResponse} HealthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.HealthResponse;

                /**
                 * Decodes a HealthResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.HealthResponse} HealthResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.HealthResponse;

                /**
                 * Verifies a HealthResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a HealthResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.HealthResponse} HealthResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.HealthResponse;

                /**
                 * Creates a HealthResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.HealthResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.HealthResponse} HealthResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.HealthResponse;

                /**
                 * Creates a plain object from a HealthResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.HealthResponse} message HealthResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.HealthResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this HealthResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this HealthResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LivenessRequest$Properties = {};

            /**
             * Constructs a new LivenessRequest.
             * @exports cockroach.server.serverpb.LivenessRequest
             * @constructor
             * @param {cockroach.server.serverpb.LivenessRequest$Properties=} [properties] Properties to set
             */
            class LivenessRequest {

                /**
                 * Constructs a new LivenessRequest.
                 * @exports cockroach.server.serverpb.LivenessRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.LivenessRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LivenessRequest$Properties);

                /**
                 * Creates a new LivenessRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.LivenessRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LivenessRequest} LivenessRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.LivenessRequest$Properties): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Encodes the specified LivenessRequest message. Does not implicitly {@link cockroach.server.serverpb.LivenessRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LivenessRequest$Properties} message LivenessRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LivenessRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LivenessRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LivenessRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LivenessRequest$Properties} message LivenessRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LivenessRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LivenessRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LivenessRequest} LivenessRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Decodes a LivenessRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LivenessRequest} LivenessRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Verifies a LivenessRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LivenessRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LivenessRequest} LivenessRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Creates a LivenessRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LivenessRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LivenessRequest} LivenessRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LivenessRequest;

                /**
                 * Creates a plain object from a LivenessRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LivenessRequest} message LivenessRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LivenessRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LivenessRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LivenessRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LivenessResponse$Properties = {
                livenesses?: cockroach.storage.Liveness$Properties[];
            };

            /**
             * Constructs a new LivenessResponse.
             * @exports cockroach.server.serverpb.LivenessResponse
             * @constructor
             * @param {cockroach.server.serverpb.LivenessResponse$Properties=} [properties] Properties to set
             */
            class LivenessResponse {

                /**
                 * Constructs a new LivenessResponse.
                 * @exports cockroach.server.serverpb.LivenessResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.LivenessResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LivenessResponse$Properties);

                /**
                 * LivenessResponse livenesses.
                 * @type {Array.<cockroach.storage.Liveness$Properties>}
                 */
                public livenesses: cockroach.storage.Liveness$Properties[];

                /**
                 * Creates a new LivenessResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.LivenessResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LivenessResponse} LivenessResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.LivenessResponse$Properties): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Encodes the specified LivenessResponse message. Does not implicitly {@link cockroach.server.serverpb.LivenessResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LivenessResponse$Properties} message LivenessResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LivenessResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LivenessResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LivenessResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LivenessResponse$Properties} message LivenessResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LivenessResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LivenessResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LivenessResponse} LivenessResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Decodes a LivenessResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LivenessResponse} LivenessResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Verifies a LivenessResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LivenessResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LivenessResponse} LivenessResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Creates a LivenessResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LivenessResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LivenessResponse} LivenessResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LivenessResponse;

                /**
                 * Creates a plain object from a LivenessResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LivenessResponse} message LivenessResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LivenessResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LivenessResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LivenessResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangeLogRequest$Properties = {
                range_id?: Long;
                limit?: number;
            };

            /**
             * Constructs a new RangeLogRequest.
             * @exports cockroach.server.serverpb.RangeLogRequest
             * @constructor
             * @param {cockroach.server.serverpb.RangeLogRequest$Properties=} [properties] Properties to set
             */
            class RangeLogRequest {

                /**
                 * Constructs a new RangeLogRequest.
                 * @exports cockroach.server.serverpb.RangeLogRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.RangeLogRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangeLogRequest$Properties);

                /**
                 * RangeLogRequest range_id.
                 * @type {Long}
                 */
                public range_id: Long;

                /**
                 * RangeLogRequest limit.
                 * @type {number}
                 */
                public limit: number;

                /**
                 * Creates a new RangeLogRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangeLogRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangeLogRequest} RangeLogRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangeLogRequest$Properties): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Encodes the specified RangeLogRequest message. Does not implicitly {@link cockroach.server.serverpb.RangeLogRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeLogRequest$Properties} message RangeLogRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangeLogRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeLogRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeLogRequest$Properties} message RangeLogRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangeLogRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeLogRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangeLogRequest} RangeLogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Decodes a RangeLogRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangeLogRequest} RangeLogRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Verifies a RangeLogRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangeLogRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeLogRequest} RangeLogRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Creates a RangeLogRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangeLogRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeLogRequest} RangeLogRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogRequest;

                /**
                 * Creates a plain object from a RangeLogRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangeLogRequest} message RangeLogRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeLogRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangeLogRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeLogRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangeLogResponse$Properties = {
                events?: cockroach.storage.RangeLogEvent$Properties[];
            };

            /**
             * Constructs a new RangeLogResponse.
             * @exports cockroach.server.serverpb.RangeLogResponse
             * @constructor
             * @param {cockroach.server.serverpb.RangeLogResponse$Properties=} [properties] Properties to set
             */
            class RangeLogResponse {

                /**
                 * Constructs a new RangeLogResponse.
                 * @exports cockroach.server.serverpb.RangeLogResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.RangeLogResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangeLogResponse$Properties);

                /**
                 * RangeLogResponse events.
                 * @type {Array.<cockroach.storage.RangeLogEvent$Properties>}
                 */
                public events: cockroach.storage.RangeLogEvent$Properties[];

                /**
                 * Creates a new RangeLogResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangeLogResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangeLogResponse} RangeLogResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangeLogResponse$Properties): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Encodes the specified RangeLogResponse message. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeLogResponse$Properties} message RangeLogResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangeLogResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeLogResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeLogResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeLogResponse$Properties} message RangeLogResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangeLogResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeLogResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangeLogResponse} RangeLogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Decodes a RangeLogResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangeLogResponse} RangeLogResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Verifies a RangeLogResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangeLogResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeLogResponse} RangeLogResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Creates a RangeLogResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangeLogResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeLogResponse} RangeLogResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangeLogResponse;

                /**
                 * Creates a plain object from a RangeLogResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangeLogResponse} message RangeLogResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeLogResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangeLogResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeLogResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type QueryPlanRequest$Properties = {
                query?: string;
            };

            /**
             * Constructs a new QueryPlanRequest.
             * @exports cockroach.server.serverpb.QueryPlanRequest
             * @constructor
             * @param {cockroach.server.serverpb.QueryPlanRequest$Properties=} [properties] Properties to set
             */
            class QueryPlanRequest {

                /**
                 * Constructs a new QueryPlanRequest.
                 * @exports cockroach.server.serverpb.QueryPlanRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.QueryPlanRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.QueryPlanRequest$Properties);

                /**
                 * QueryPlanRequest query.
                 * @type {string}
                 */
                public query: string;

                /**
                 * Creates a new QueryPlanRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.QueryPlanRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.QueryPlanRequest} QueryPlanRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.QueryPlanRequest$Properties): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Encodes the specified QueryPlanRequest message. Does not implicitly {@link cockroach.server.serverpb.QueryPlanRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.QueryPlanRequest$Properties} message QueryPlanRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.QueryPlanRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified QueryPlanRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.QueryPlanRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.QueryPlanRequest$Properties} message QueryPlanRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.QueryPlanRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a QueryPlanRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.QueryPlanRequest} QueryPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Decodes a QueryPlanRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.QueryPlanRequest} QueryPlanRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Verifies a QueryPlanRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a QueryPlanRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.QueryPlanRequest} QueryPlanRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Creates a QueryPlanRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.QueryPlanRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.QueryPlanRequest} QueryPlanRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanRequest;

                /**
                 * Creates a plain object from a QueryPlanRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.QueryPlanRequest} message QueryPlanRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.QueryPlanRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this QueryPlanRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this QueryPlanRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type QueryPlanResponse$Properties = {
                distsql_physical_query_plan?: string;
            };

            /**
             * Constructs a new QueryPlanResponse.
             * @exports cockroach.server.serverpb.QueryPlanResponse
             * @constructor
             * @param {cockroach.server.serverpb.QueryPlanResponse$Properties=} [properties] Properties to set
             */
            class QueryPlanResponse {

                /**
                 * Constructs a new QueryPlanResponse.
                 * @exports cockroach.server.serverpb.QueryPlanResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.QueryPlanResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.QueryPlanResponse$Properties);

                /**
                 * QueryPlanResponse distsql_physical_query_plan.
                 * @type {string}
                 */
                public distsql_physical_query_plan: string;

                /**
                 * Creates a new QueryPlanResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.QueryPlanResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.QueryPlanResponse} QueryPlanResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.QueryPlanResponse$Properties): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Encodes the specified QueryPlanResponse message. Does not implicitly {@link cockroach.server.serverpb.QueryPlanResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.QueryPlanResponse$Properties} message QueryPlanResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.QueryPlanResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified QueryPlanResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.QueryPlanResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.QueryPlanResponse$Properties} message QueryPlanResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.QueryPlanResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a QueryPlanResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.QueryPlanResponse} QueryPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Decodes a QueryPlanResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.QueryPlanResponse} QueryPlanResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Verifies a QueryPlanResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a QueryPlanResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.QueryPlanResponse} QueryPlanResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Creates a QueryPlanResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.QueryPlanResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.QueryPlanResponse} QueryPlanResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.QueryPlanResponse;

                /**
                 * Creates a plain object from a QueryPlanResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.QueryPlanResponse} message QueryPlanResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.QueryPlanResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this QueryPlanResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this QueryPlanResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /**
             * Constructs a new Admin service.
             * @exports cockroach.server.serverpb.Admin
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            class Admin extends $protobuf.rpc.Service {

                /**
                 * Constructs a new Admin service.
                 * @exports cockroach.server.serverpb.Admin
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new Admin service using the specified rpc implementation.
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Admin} RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Admin;

                /**
                 * Calls Users.
                 * @param {cockroach.server.serverpb.UsersRequest|Object.<string,*>} request UsersRequest message or plain object
                 * @param {Admin_users_Callback} callback Node-style callback called with the error, if any, and UsersResponse
                 * @returns {undefined}
                 */
                public users(request: (cockroach.server.serverpb.UsersRequest|{ [k: string]: any }), callback: Admin_users_Callback): void;

                /**
                 * Calls Databases.
                 * @param {cockroach.server.serverpb.DatabasesRequest|Object.<string,*>} request DatabasesRequest message or plain object
                 * @param {Admin_databases_Callback} callback Node-style callback called with the error, if any, and DatabasesResponse
                 * @returns {undefined}
                 */
                public databases(request: (cockroach.server.serverpb.DatabasesRequest|{ [k: string]: any }), callback: Admin_databases_Callback): void;

                /**
                 * Calls DatabaseDetails.
                 * @param {cockroach.server.serverpb.DatabaseDetailsRequest|Object.<string,*>} request DatabaseDetailsRequest message or plain object
                 * @param {Admin_databaseDetails_Callback} callback Node-style callback called with the error, if any, and DatabaseDetailsResponse
                 * @returns {undefined}
                 */
                public databaseDetails(request: (cockroach.server.serverpb.DatabaseDetailsRequest|{ [k: string]: any }), callback: Admin_databaseDetails_Callback): void;

                /**
                 * Calls TableDetails.
                 * @param {cockroach.server.serverpb.TableDetailsRequest|Object.<string,*>} request TableDetailsRequest message or plain object
                 * @param {Admin_tableDetails_Callback} callback Node-style callback called with the error, if any, and TableDetailsResponse
                 * @returns {undefined}
                 */
                public tableDetails(request: (cockroach.server.serverpb.TableDetailsRequest|{ [k: string]: any }), callback: Admin_tableDetails_Callback): void;

                /**
                 * Calls TableStats.
                 * @param {cockroach.server.serverpb.TableStatsRequest|Object.<string,*>} request TableStatsRequest message or plain object
                 * @param {Admin_tableStats_Callback} callback Node-style callback called with the error, if any, and TableStatsResponse
                 * @returns {undefined}
                 */
                public tableStats(request: (cockroach.server.serverpb.TableStatsRequest|{ [k: string]: any }), callback: Admin_tableStats_Callback): void;

                /**
                 * Calls Events.
                 * @param {cockroach.server.serverpb.EventsRequest|Object.<string,*>} request EventsRequest message or plain object
                 * @param {Admin_events_Callback} callback Node-style callback called with the error, if any, and EventsResponse
                 * @returns {undefined}
                 */
                public events(request: (cockroach.server.serverpb.EventsRequest|{ [k: string]: any }), callback: Admin_events_Callback): void;

                /**
                 * Calls SetUIData.
                 * @param {cockroach.server.serverpb.SetUIDataRequest|Object.<string,*>} request SetUIDataRequest message or plain object
                 * @param {Admin_setUIData_Callback} callback Node-style callback called with the error, if any, and SetUIDataResponse
                 * @returns {undefined}
                 */
                public setUIData(request: (cockroach.server.serverpb.SetUIDataRequest|{ [k: string]: any }), callback: Admin_setUIData_Callback): void;

                /**
                 * Calls GetUIData.
                 * @param {cockroach.server.serverpb.GetUIDataRequest|Object.<string,*>} request GetUIDataRequest message or plain object
                 * @param {Admin_getUIData_Callback} callback Node-style callback called with the error, if any, and GetUIDataResponse
                 * @returns {undefined}
                 */
                public getUIData(request: (cockroach.server.serverpb.GetUIDataRequest|{ [k: string]: any }), callback: Admin_getUIData_Callback): void;

                /**
                 * Calls Cluster.
                 * @param {cockroach.server.serverpb.ClusterRequest|Object.<string,*>} request ClusterRequest message or plain object
                 * @param {Admin_cluster_Callback} callback Node-style callback called with the error, if any, and ClusterResponse
                 * @returns {undefined}
                 */
                public cluster(request: (cockroach.server.serverpb.ClusterRequest|{ [k: string]: any }), callback: Admin_cluster_Callback): void;

                /**
                 * Calls Settings.
                 * @param {cockroach.server.serverpb.SettingsRequest|Object.<string,*>} request SettingsRequest message or plain object
                 * @param {Admin_settings_Callback} callback Node-style callback called with the error, if any, and SettingsResponse
                 * @returns {undefined}
                 */
                public settings(request: (cockroach.server.serverpb.SettingsRequest|{ [k: string]: any }), callback: Admin_settings_Callback): void;

                /**
                 * Calls Health.
                 * @param {cockroach.server.serverpb.HealthRequest|Object.<string,*>} request HealthRequest message or plain object
                 * @param {Admin_health_Callback} callback Node-style callback called with the error, if any, and HealthResponse
                 * @returns {undefined}
                 */
                public health(request: (cockroach.server.serverpb.HealthRequest|{ [k: string]: any }), callback: Admin_health_Callback): void;

                /**
                 * Calls Liveness.
                 * @param {cockroach.server.serverpb.LivenessRequest|Object.<string,*>} request LivenessRequest message or plain object
                 * @param {Admin_liveness_Callback} callback Node-style callback called with the error, if any, and LivenessResponse
                 * @returns {undefined}
                 */
                public liveness(request: (cockroach.server.serverpb.LivenessRequest|{ [k: string]: any }), callback: Admin_liveness_Callback): void;

                /**
                 * Calls QueryPlan.
                 * @param {cockroach.server.serverpb.QueryPlanRequest|Object.<string,*>} request QueryPlanRequest message or plain object
                 * @param {Admin_queryPlan_Callback} callback Node-style callback called with the error, if any, and QueryPlanResponse
                 * @returns {undefined}
                 */
                public queryPlan(request: (cockroach.server.serverpb.QueryPlanRequest|{ [k: string]: any }), callback: Admin_queryPlan_Callback): void;

                /**
                 * Calls Drain.
                 * @param {cockroach.server.serverpb.DrainRequest|Object.<string,*>} request DrainRequest message or plain object
                 * @param {Admin_drain_Callback} callback Node-style callback called with the error, if any, and DrainResponse
                 * @returns {undefined}
                 */
                public drain(request: (cockroach.server.serverpb.DrainRequest|{ [k: string]: any }), callback: Admin_drain_Callback): void;

                /**
                 * Calls RangeLog.
                 * @param {cockroach.server.serverpb.RangeLogRequest|Object.<string,*>} request RangeLogRequest message or plain object
                 * @param {Admin_rangeLog_Callback} callback Node-style callback called with the error, if any, and RangeLogResponse
                 * @returns {undefined}
                 */
                public rangeLog(request: (cockroach.server.serverpb.RangeLogRequest|{ [k: string]: any }), callback: Admin_rangeLog_Callback): void;
            }

            type CertificatesRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new CertificatesRequest.
             * @exports cockroach.server.serverpb.CertificatesRequest
             * @constructor
             * @param {cockroach.server.serverpb.CertificatesRequest$Properties=} [properties] Properties to set
             */
            class CertificatesRequest {

                /**
                 * Constructs a new CertificatesRequest.
                 * @exports cockroach.server.serverpb.CertificatesRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.CertificatesRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.CertificatesRequest$Properties);

                /**
                 * CertificatesRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new CertificatesRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.CertificatesRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.CertificatesRequest} CertificatesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.CertificatesRequest$Properties): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Encodes the specified CertificatesRequest message. Does not implicitly {@link cockroach.server.serverpb.CertificatesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificatesRequest$Properties} message CertificatesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.CertificatesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificatesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificatesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificatesRequest$Properties} message CertificatesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.CertificatesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificatesRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.CertificatesRequest} CertificatesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Decodes a CertificatesRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.CertificatesRequest} CertificatesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Verifies a CertificatesRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a CertificatesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificatesRequest} CertificatesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Creates a CertificatesRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.CertificatesRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificatesRequest} CertificatesRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesRequest;

                /**
                 * Creates a plain object from a CertificatesRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.CertificatesRequest} message CertificatesRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificatesRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this CertificatesRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificatesRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type CertificateDetails$Properties = {
                type?: cockroach.server.serverpb.CertificateDetails.CertificateType;
                error_message?: string;
                data?: Uint8Array;
            };

            /**
             * Constructs a new CertificateDetails.
             * @exports cockroach.server.serverpb.CertificateDetails
             * @constructor
             * @param {cockroach.server.serverpb.CertificateDetails$Properties=} [properties] Properties to set
             */
            class CertificateDetails {

                /**
                 * Constructs a new CertificateDetails.
                 * @exports cockroach.server.serverpb.CertificateDetails
                 * @constructor
                 * @param {cockroach.server.serverpb.CertificateDetails$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.CertificateDetails$Properties);

                /**
                 * CertificateDetails type.
                 * @type {cockroach.server.serverpb.CertificateDetails.CertificateType}
                 */
                public type: cockroach.server.serverpb.CertificateDetails.CertificateType;

                /**
                 * CertificateDetails error_message.
                 * @type {string}
                 */
                public error_message: string;

                /**
                 * CertificateDetails data.
                 * @type {Uint8Array}
                 */
                public data: Uint8Array;

                /**
                 * Creates a new CertificateDetails instance using the specified properties.
                 * @param {cockroach.server.serverpb.CertificateDetails$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.CertificateDetails} CertificateDetails instance
                 */
                public static create(properties?: cockroach.server.serverpb.CertificateDetails$Properties): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Encodes the specified CertificateDetails message. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificateDetails$Properties} message CertificateDetails message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.CertificateDetails$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificateDetails message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificateDetails.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificateDetails$Properties} message CertificateDetails message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.CertificateDetails$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificateDetails message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.CertificateDetails} CertificateDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Decodes a CertificateDetails message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.CertificateDetails} CertificateDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Verifies a CertificateDetails message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a CertificateDetails message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificateDetails} CertificateDetails
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Creates a CertificateDetails message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.CertificateDetails.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificateDetails} CertificateDetails
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.CertificateDetails;

                /**
                 * Creates a plain object from a CertificateDetails message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.CertificateDetails} message CertificateDetails
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificateDetails, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this CertificateDetails message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificateDetails to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace CertificateDetails {

                /**
                 * CertificateType enum.
                 * @name CertificateType
                 * @memberof cockroach.server.serverpb.CertificateDetails
                 * @enum {number}
                 * @property {number} CA=0 CA value
                 * @property {number} NODE=1 NODE value
                 */
                enum CertificateType {
                    CA = 0,
                    NODE = 1
                }
            }

            type CertificatesResponse$Properties = {
                certificates?: cockroach.server.serverpb.CertificateDetails$Properties[];
            };

            /**
             * Constructs a new CertificatesResponse.
             * @exports cockroach.server.serverpb.CertificatesResponse
             * @constructor
             * @param {cockroach.server.serverpb.CertificatesResponse$Properties=} [properties] Properties to set
             */
            class CertificatesResponse {

                /**
                 * Constructs a new CertificatesResponse.
                 * @exports cockroach.server.serverpb.CertificatesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.CertificatesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.CertificatesResponse$Properties);

                /**
                 * CertificatesResponse certificates.
                 * @type {Array.<cockroach.server.serverpb.CertificateDetails$Properties>}
                 */
                public certificates: cockroach.server.serverpb.CertificateDetails$Properties[];

                /**
                 * Creates a new CertificatesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.CertificatesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.CertificatesResponse} CertificatesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.CertificatesResponse$Properties): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Encodes the specified CertificatesResponse message. Does not implicitly {@link cockroach.server.serverpb.CertificatesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificatesResponse$Properties} message CertificatesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.CertificatesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified CertificatesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.CertificatesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.CertificatesResponse$Properties} message CertificatesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.CertificatesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a CertificatesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.CertificatesResponse} CertificatesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Decodes a CertificatesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.CertificatesResponse} CertificatesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Verifies a CertificatesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a CertificatesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificatesResponse} CertificatesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Creates a CertificatesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.CertificatesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.CertificatesResponse} CertificatesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.CertificatesResponse;

                /**
                 * Creates a plain object from a CertificatesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.CertificatesResponse} message CertificatesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.CertificatesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this CertificatesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this CertificatesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DetailsRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new DetailsRequest.
             * @exports cockroach.server.serverpb.DetailsRequest
             * @constructor
             * @param {cockroach.server.serverpb.DetailsRequest$Properties=} [properties] Properties to set
             */
            class DetailsRequest {

                /**
                 * Constructs a new DetailsRequest.
                 * @exports cockroach.server.serverpb.DetailsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.DetailsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DetailsRequest$Properties);

                /**
                 * DetailsRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new DetailsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.DetailsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DetailsRequest} DetailsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.DetailsRequest$Properties): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Encodes the specified DetailsRequest message. Does not implicitly {@link cockroach.server.serverpb.DetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DetailsRequest$Properties} message DetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DetailsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DetailsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DetailsRequest$Properties} message DetailsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DetailsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DetailsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DetailsRequest} DetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Decodes a DetailsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DetailsRequest} DetailsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Verifies a DetailsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DetailsRequest} DetailsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Creates a DetailsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DetailsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DetailsRequest} DetailsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DetailsRequest;

                /**
                 * Creates a plain object from a DetailsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DetailsRequest} message DetailsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DetailsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DetailsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DetailsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type DetailsResponse$Properties = {
                node_id?: number;
                address?: cockroach.util.UnresolvedAddr$Properties;
                build_info?: cockroach.build.Info$Properties;
            };

            /**
             * Constructs a new DetailsResponse.
             * @exports cockroach.server.serverpb.DetailsResponse
             * @constructor
             * @param {cockroach.server.serverpb.DetailsResponse$Properties=} [properties] Properties to set
             */
            class DetailsResponse {

                /**
                 * Constructs a new DetailsResponse.
                 * @exports cockroach.server.serverpb.DetailsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.DetailsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.DetailsResponse$Properties);

                /**
                 * DetailsResponse node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * DetailsResponse address.
                 * @type {(cockroach.util.UnresolvedAddr$Properties|null)}
                 */
                public address: (cockroach.util.UnresolvedAddr$Properties|null);

                /**
                 * DetailsResponse build_info.
                 * @type {(cockroach.build.Info$Properties|null)}
                 */
                public build_info: (cockroach.build.Info$Properties|null);

                /**
                 * Creates a new DetailsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.DetailsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.DetailsResponse} DetailsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.DetailsResponse$Properties): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Encodes the specified DetailsResponse message. Does not implicitly {@link cockroach.server.serverpb.DetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DetailsResponse$Properties} message DetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.DetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified DetailsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.DetailsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.DetailsResponse$Properties} message DetailsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.DetailsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a DetailsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.DetailsResponse} DetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Decodes a DetailsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.DetailsResponse} DetailsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Verifies a DetailsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a DetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DetailsResponse} DetailsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Creates a DetailsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.DetailsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.DetailsResponse} DetailsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.DetailsResponse;

                /**
                 * Creates a plain object from a DetailsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.DetailsResponse} message DetailsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.DetailsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this DetailsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this DetailsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type NodesRequest$Properties = {};

            /**
             * Constructs a new NodesRequest.
             * @exports cockroach.server.serverpb.NodesRequest
             * @constructor
             * @param {cockroach.server.serverpb.NodesRequest$Properties=} [properties] Properties to set
             */
            class NodesRequest {

                /**
                 * Constructs a new NodesRequest.
                 * @exports cockroach.server.serverpb.NodesRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.NodesRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.NodesRequest$Properties);

                /**
                 * Creates a new NodesRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.NodesRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.NodesRequest} NodesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.NodesRequest$Properties): cockroach.server.serverpb.NodesRequest;

                /**
                 * Encodes the specified NodesRequest message. Does not implicitly {@link cockroach.server.serverpb.NodesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodesRequest$Properties} message NodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.NodesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodesRequest$Properties} message NodesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.NodesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodesRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.NodesRequest} NodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodesRequest;

                /**
                 * Decodes a NodesRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.NodesRequest} NodesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodesRequest;

                /**
                 * Verifies a NodesRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a NodesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodesRequest} NodesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodesRequest;

                /**
                 * Creates a NodesRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.NodesRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodesRequest} NodesRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.NodesRequest;

                /**
                 * Creates a plain object from a NodesRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.NodesRequest} message NodesRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodesRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this NodesRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodesRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type NodesResponse$Properties = {
                nodes?: cockroach.server.status.NodeStatus$Properties[];
            };

            /**
             * Constructs a new NodesResponse.
             * @exports cockroach.server.serverpb.NodesResponse
             * @constructor
             * @param {cockroach.server.serverpb.NodesResponse$Properties=} [properties] Properties to set
             */
            class NodesResponse {

                /**
                 * Constructs a new NodesResponse.
                 * @exports cockroach.server.serverpb.NodesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.NodesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.NodesResponse$Properties);

                /**
                 * NodesResponse nodes.
                 * @type {Array.<cockroach.server.status.NodeStatus$Properties>}
                 */
                public nodes: cockroach.server.status.NodeStatus$Properties[];

                /**
                 * Creates a new NodesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.NodesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.NodesResponse} NodesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.NodesResponse$Properties): cockroach.server.serverpb.NodesResponse;

                /**
                 * Encodes the specified NodesResponse message. Does not implicitly {@link cockroach.server.serverpb.NodesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodesResponse$Properties} message NodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.NodesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodesResponse$Properties} message NodesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.NodesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.NodesResponse} NodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodesResponse;

                /**
                 * Decodes a NodesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.NodesResponse} NodesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodesResponse;

                /**
                 * Verifies a NodesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a NodesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodesResponse} NodesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodesResponse;

                /**
                 * Creates a NodesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.NodesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodesResponse} NodesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.NodesResponse;

                /**
                 * Creates a plain object from a NodesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.NodesResponse} message NodesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this NodesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type NodeRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new NodeRequest.
             * @exports cockroach.server.serverpb.NodeRequest
             * @constructor
             * @param {cockroach.server.serverpb.NodeRequest$Properties=} [properties] Properties to set
             */
            class NodeRequest {

                /**
                 * Constructs a new NodeRequest.
                 * @exports cockroach.server.serverpb.NodeRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.NodeRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.NodeRequest$Properties);

                /**
                 * NodeRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new NodeRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.NodeRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.NodeRequest} NodeRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.NodeRequest$Properties): cockroach.server.serverpb.NodeRequest;

                /**
                 * Encodes the specified NodeRequest message. Does not implicitly {@link cockroach.server.serverpb.NodeRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodeRequest$Properties} message NodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.NodeRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodeRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.NodeRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.NodeRequest$Properties} message NodeRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.NodeRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodeRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.NodeRequest} NodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.NodeRequest;

                /**
                 * Decodes a NodeRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.NodeRequest} NodeRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.NodeRequest;

                /**
                 * Verifies a NodeRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a NodeRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodeRequest} NodeRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.NodeRequest;

                /**
                 * Creates a NodeRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.NodeRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.NodeRequest} NodeRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.NodeRequest;

                /**
                 * Creates a plain object from a NodeRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.NodeRequest} message NodeRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.NodeRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this NodeRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodeRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftState$Properties = {
                replica_id?: Long;
                hard_state?: raftpb.HardState$Properties;
                lead?: Long;
                state?: string;
                applied?: Long;
                progress?: { [k: string]: cockroach.server.serverpb.RaftState.Progress$Properties };
            };

            /**
             * Constructs a new RaftState.
             * @exports cockroach.server.serverpb.RaftState
             * @constructor
             * @param {cockroach.server.serverpb.RaftState$Properties=} [properties] Properties to set
             */
            class RaftState {

                /**
                 * Constructs a new RaftState.
                 * @exports cockroach.server.serverpb.RaftState
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftState$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftState$Properties);

                /**
                 * RaftState replica_id.
                 * @type {Long}
                 */
                public replica_id: Long;

                /**
                 * RaftState hard_state.
                 * @type {(raftpb.HardState$Properties|null)}
                 */
                public hard_state: (raftpb.HardState$Properties|null);

                /**
                 * RaftState lead.
                 * @type {Long}
                 */
                public lead: Long;

                /**
                 * RaftState state.
                 * @type {string}
                 */
                public state: string;

                /**
                 * RaftState applied.
                 * @type {Long}
                 */
                public applied: Long;

                /**
                 * RaftState progress.
                 * @type {Object.<string,cockroach.server.serverpb.RaftState.Progress$Properties>}
                 */
                public progress: { [k: string]: cockroach.server.serverpb.RaftState.Progress$Properties };

                /**
                 * Creates a new RaftState instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftState$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftState} RaftState instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftState$Properties): cockroach.server.serverpb.RaftState;

                /**
                 * Encodes the specified RaftState message. Does not implicitly {@link cockroach.server.serverpb.RaftState.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftState$Properties} message RaftState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftState message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftState.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftState$Properties} message RaftState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftState message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftState} RaftState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftState;

                /**
                 * Decodes a RaftState message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftState} RaftState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftState;

                /**
                 * Verifies a RaftState message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftState message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftState} RaftState
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftState;

                /**
                 * Creates a RaftState message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftState.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftState} RaftState
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftState;

                /**
                 * Creates a plain object from a RaftState message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftState} message RaftState
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftState, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftState message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftState to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace RaftState {

                type Progress$Properties = {
                    match?: Long;
                    next?: Long;
                    state?: string;
                    paused?: boolean;
                    pending_snapshot?: Long;
                };

                /**
                 * Constructs a new Progress.
                 * @exports cockroach.server.serverpb.RaftState.Progress
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftState.Progress$Properties=} [properties] Properties to set
                 */
                class Progress {

                    /**
                     * Constructs a new Progress.
                     * @exports cockroach.server.serverpb.RaftState.Progress
                     * @constructor
                     * @param {cockroach.server.serverpb.RaftState.Progress$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.server.serverpb.RaftState.Progress$Properties);

                    /**
                     * Progress match.
                     * @type {Long}
                     */
                    public match: Long;

                    /**
                     * Progress next.
                     * @type {Long}
                     */
                    public next: Long;

                    /**
                     * Progress state.
                     * @type {string}
                     */
                    public state: string;

                    /**
                     * Progress paused.
                     * @type {boolean}
                     */
                    public paused: boolean;

                    /**
                     * Progress pending_snapshot.
                     * @type {Long}
                     */
                    public pending_snapshot: Long;

                    /**
                     * Creates a new Progress instance using the specified properties.
                     * @param {cockroach.server.serverpb.RaftState.Progress$Properties=} [properties] Properties to set
                     * @returns {cockroach.server.serverpb.RaftState.Progress} Progress instance
                     */
                    public static create(properties?: cockroach.server.serverpb.RaftState.Progress$Properties): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Encodes the specified Progress message. Does not implicitly {@link cockroach.server.serverpb.RaftState.Progress.verify|verify} messages.
                     * @param {cockroach.server.serverpb.RaftState.Progress$Properties} message Progress message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.server.serverpb.RaftState.Progress$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Progress message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftState.Progress.verify|verify} messages.
                     * @param {cockroach.server.serverpb.RaftState.Progress$Properties} message Progress message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.server.serverpb.RaftState.Progress$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Progress message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.server.serverpb.RaftState.Progress} Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Decodes a Progress message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.server.serverpb.RaftState.Progress} Progress
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Verifies a Progress message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Progress message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.RaftState.Progress} Progress
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Creates a Progress message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.server.serverpb.RaftState.Progress.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.server.serverpb.RaftState.Progress} Progress
                     */
                    public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftState.Progress;

                    /**
                     * Creates a plain object from a Progress message. Also converts values to other types if specified.
                     * @param {cockroach.server.serverpb.RaftState.Progress} message Progress
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.server.serverpb.RaftState.Progress, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Progress message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Progress to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            type RangeProblems$Properties = {
                unavailable?: boolean;
                leader_not_lease_holder?: boolean;
                no_raft_leader?: boolean;
                underreplicated?: boolean;
                no_lease?: boolean;
            };

            /**
             * Constructs a new RangeProblems.
             * @exports cockroach.server.serverpb.RangeProblems
             * @constructor
             * @param {cockroach.server.serverpb.RangeProblems$Properties=} [properties] Properties to set
             */
            class RangeProblems {

                /**
                 * Constructs a new RangeProblems.
                 * @exports cockroach.server.serverpb.RangeProblems
                 * @constructor
                 * @param {cockroach.server.serverpb.RangeProblems$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangeProblems$Properties);

                /**
                 * RangeProblems unavailable.
                 * @type {boolean}
                 */
                public unavailable: boolean;

                /**
                 * RangeProblems leader_not_lease_holder.
                 * @type {boolean}
                 */
                public leader_not_lease_holder: boolean;

                /**
                 * RangeProblems no_raft_leader.
                 * @type {boolean}
                 */
                public no_raft_leader: boolean;

                /**
                 * RangeProblems underreplicated.
                 * @type {boolean}
                 */
                public underreplicated: boolean;

                /**
                 * RangeProblems no_lease.
                 * @type {boolean}
                 */
                public no_lease: boolean;

                /**
                 * Creates a new RangeProblems instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangeProblems$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangeProblems} RangeProblems instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangeProblems$Properties): cockroach.server.serverpb.RangeProblems;

                /**
                 * Encodes the specified RangeProblems message. Does not implicitly {@link cockroach.server.serverpb.RangeProblems.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeProblems$Properties} message RangeProblems message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangeProblems$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeProblems message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeProblems.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeProblems$Properties} message RangeProblems message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangeProblems$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeProblems message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangeProblems} RangeProblems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeProblems;

                /**
                 * Decodes a RangeProblems message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangeProblems} RangeProblems
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeProblems;

                /**
                 * Verifies a RangeProblems message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangeProblems message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeProblems} RangeProblems
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeProblems;

                /**
                 * Creates a RangeProblems message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangeProblems.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeProblems} RangeProblems
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangeProblems;

                /**
                 * Creates a plain object from a RangeProblems message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangeProblems} message RangeProblems
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeProblems, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangeProblems message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeProblems to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type PrettySpan$Properties = {
                start_key?: string;
                end_key?: string;
            };

            /**
             * Constructs a new PrettySpan.
             * @exports cockroach.server.serverpb.PrettySpan
             * @constructor
             * @param {cockroach.server.serverpb.PrettySpan$Properties=} [properties] Properties to set
             */
            class PrettySpan {

                /**
                 * Constructs a new PrettySpan.
                 * @exports cockroach.server.serverpb.PrettySpan
                 * @constructor
                 * @param {cockroach.server.serverpb.PrettySpan$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.PrettySpan$Properties);

                /**
                 * PrettySpan start_key.
                 * @type {string}
                 */
                public start_key: string;

                /**
                 * PrettySpan end_key.
                 * @type {string}
                 */
                public end_key: string;

                /**
                 * Creates a new PrettySpan instance using the specified properties.
                 * @param {cockroach.server.serverpb.PrettySpan$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.PrettySpan} PrettySpan instance
                 */
                public static create(properties?: cockroach.server.serverpb.PrettySpan$Properties): cockroach.server.serverpb.PrettySpan;

                /**
                 * Encodes the specified PrettySpan message. Does not implicitly {@link cockroach.server.serverpb.PrettySpan.verify|verify} messages.
                 * @param {cockroach.server.serverpb.PrettySpan$Properties} message PrettySpan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.PrettySpan$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified PrettySpan message, length delimited. Does not implicitly {@link cockroach.server.serverpb.PrettySpan.verify|verify} messages.
                 * @param {cockroach.server.serverpb.PrettySpan$Properties} message PrettySpan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.PrettySpan$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a PrettySpan message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.PrettySpan} PrettySpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.PrettySpan;

                /**
                 * Decodes a PrettySpan message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.PrettySpan} PrettySpan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.PrettySpan;

                /**
                 * Verifies a PrettySpan message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a PrettySpan message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.PrettySpan} PrettySpan
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.PrettySpan;

                /**
                 * Creates a PrettySpan message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.PrettySpan.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.PrettySpan} PrettySpan
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.PrettySpan;

                /**
                 * Creates a plain object from a PrettySpan message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.PrettySpan} message PrettySpan
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.PrettySpan, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this PrettySpan message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this PrettySpan to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangeInfo$Properties = {
                span?: cockroach.server.serverpb.PrettySpan$Properties;
                raft_state?: cockroach.server.serverpb.RaftState$Properties;
                state?: cockroach.storage.storagebase.RangeInfo$Properties;
                source_node_id?: number;
                source_store_id?: number;
                error_message?: string;
                lease_history?: cockroach.roachpb.Lease$Properties[];
                problems?: cockroach.server.serverpb.RangeProblems$Properties;
            };

            /**
             * Constructs a new RangeInfo.
             * @exports cockroach.server.serverpb.RangeInfo
             * @constructor
             * @param {cockroach.server.serverpb.RangeInfo$Properties=} [properties] Properties to set
             */
            class RangeInfo {

                /**
                 * Constructs a new RangeInfo.
                 * @exports cockroach.server.serverpb.RangeInfo
                 * @constructor
                 * @param {cockroach.server.serverpb.RangeInfo$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangeInfo$Properties);

                /**
                 * RangeInfo span.
                 * @type {(cockroach.server.serverpb.PrettySpan$Properties|null)}
                 */
                public span: (cockroach.server.serverpb.PrettySpan$Properties|null);

                /**
                 * RangeInfo raft_state.
                 * @type {(cockroach.server.serverpb.RaftState$Properties|null)}
                 */
                public raft_state: (cockroach.server.serverpb.RaftState$Properties|null);

                /**
                 * RangeInfo state.
                 * @type {(cockroach.storage.storagebase.RangeInfo$Properties|null)}
                 */
                public state: (cockroach.storage.storagebase.RangeInfo$Properties|null);

                /**
                 * RangeInfo source_node_id.
                 * @type {number}
                 */
                public source_node_id: number;

                /**
                 * RangeInfo source_store_id.
                 * @type {number}
                 */
                public source_store_id: number;

                /**
                 * RangeInfo error_message.
                 * @type {string}
                 */
                public error_message: string;

                /**
                 * RangeInfo lease_history.
                 * @type {Array.<cockroach.roachpb.Lease$Properties>}
                 */
                public lease_history: cockroach.roachpb.Lease$Properties[];

                /**
                 * RangeInfo problems.
                 * @type {(cockroach.server.serverpb.RangeProblems$Properties|null)}
                 */
                public problems: (cockroach.server.serverpb.RangeProblems$Properties|null);

                /**
                 * Creates a new RangeInfo instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangeInfo$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangeInfo} RangeInfo instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangeInfo$Properties): cockroach.server.serverpb.RangeInfo;

                /**
                 * Encodes the specified RangeInfo message. Does not implicitly {@link cockroach.server.serverpb.RangeInfo.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeInfo$Properties} message RangeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeInfo message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangeInfo.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangeInfo$Properties} message RangeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangeInfo} RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangeInfo;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangeInfo} RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangeInfo;

                /**
                 * Verifies a RangeInfo message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeInfo} RangeInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangeInfo;

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangeInfo.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangeInfo} RangeInfo
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangeInfo;

                /**
                 * Creates a plain object from a RangeInfo message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangeInfo} message RangeInfo
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangeInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangeInfo message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeInfo to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangesRequest$Properties = {
                node_id?: string;
                range_ids?: Long[];
            };

            /**
             * Constructs a new RangesRequest.
             * @exports cockroach.server.serverpb.RangesRequest
             * @constructor
             * @param {cockroach.server.serverpb.RangesRequest$Properties=} [properties] Properties to set
             */
            class RangesRequest {

                /**
                 * Constructs a new RangesRequest.
                 * @exports cockroach.server.serverpb.RangesRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.RangesRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangesRequest$Properties);

                /**
                 * RangesRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * RangesRequest range_ids.
                 * @type {Array.<Long>}
                 */
                public range_ids: Long[];

                /**
                 * Creates a new RangesRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangesRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangesRequest} RangesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangesRequest$Properties): cockroach.server.serverpb.RangesRequest;

                /**
                 * Encodes the specified RangesRequest message. Does not implicitly {@link cockroach.server.serverpb.RangesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangesRequest$Properties} message RangesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangesRequest$Properties} message RangesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangesRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangesRequest} RangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangesRequest;

                /**
                 * Decodes a RangesRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangesRequest} RangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangesRequest;

                /**
                 * Verifies a RangesRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangesRequest} RangesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangesRequest;

                /**
                 * Creates a RangesRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangesRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangesRequest} RangesRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangesRequest;

                /**
                 * Creates a plain object from a RangesRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangesRequest} message RangesRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangesRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangesRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangesRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangesResponse$Properties = {
                ranges?: cockroach.server.serverpb.RangeInfo$Properties[];
            };

            /**
             * Constructs a new RangesResponse.
             * @exports cockroach.server.serverpb.RangesResponse
             * @constructor
             * @param {cockroach.server.serverpb.RangesResponse$Properties=} [properties] Properties to set
             */
            class RangesResponse {

                /**
                 * Constructs a new RangesResponse.
                 * @exports cockroach.server.serverpb.RangesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.RangesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RangesResponse$Properties);

                /**
                 * RangesResponse ranges.
                 * @type {Array.<cockroach.server.serverpb.RangeInfo$Properties>}
                 */
                public ranges: cockroach.server.serverpb.RangeInfo$Properties[];

                /**
                 * Creates a new RangesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.RangesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RangesResponse} RangesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.RangesResponse$Properties): cockroach.server.serverpb.RangesResponse;

                /**
                 * Encodes the specified RangesResponse message. Does not implicitly {@link cockroach.server.serverpb.RangesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangesResponse$Properties} message RangesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RangesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RangesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RangesResponse$Properties} message RangesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RangesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RangesResponse} RangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RangesResponse;

                /**
                 * Decodes a RangesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RangesResponse} RangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RangesResponse;

                /**
                 * Verifies a RangesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangesResponse} RangesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RangesResponse;

                /**
                 * Creates a RangesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RangesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RangesResponse} RangesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RangesResponse;

                /**
                 * Creates a plain object from a RangesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RangesResponse} message RangesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RangesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type GossipRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new GossipRequest.
             * @exports cockroach.server.serverpb.GossipRequest
             * @constructor
             * @param {cockroach.server.serverpb.GossipRequest$Properties=} [properties] Properties to set
             */
            class GossipRequest {

                /**
                 * Constructs a new GossipRequest.
                 * @exports cockroach.server.serverpb.GossipRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.GossipRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.GossipRequest$Properties);

                /**
                 * GossipRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new GossipRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.GossipRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.GossipRequest} GossipRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.GossipRequest$Properties): cockroach.server.serverpb.GossipRequest;

                /**
                 * Encodes the specified GossipRequest message. Does not implicitly {@link cockroach.server.serverpb.GossipRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GossipRequest$Properties} message GossipRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.GossipRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified GossipRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.GossipRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.GossipRequest$Properties} message GossipRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.GossipRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a GossipRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.GossipRequest} GossipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.GossipRequest;

                /**
                 * Decodes a GossipRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.GossipRequest} GossipRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.GossipRequest;

                /**
                 * Verifies a GossipRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a GossipRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GossipRequest} GossipRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.GossipRequest;

                /**
                 * Creates a GossipRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.GossipRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.GossipRequest} GossipRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.GossipRequest;

                /**
                 * Creates a plain object from a GossipRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.GossipRequest} message GossipRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.GossipRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this GossipRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this GossipRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type JSONResponse$Properties = {
                data?: Uint8Array;
            };

            /**
             * Constructs a new JSONResponse.
             * @exports cockroach.server.serverpb.JSONResponse
             * @constructor
             * @param {cockroach.server.serverpb.JSONResponse$Properties=} [properties] Properties to set
             */
            class JSONResponse {

                /**
                 * Constructs a new JSONResponse.
                 * @exports cockroach.server.serverpb.JSONResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.JSONResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.JSONResponse$Properties);

                /**
                 * JSONResponse data.
                 * @type {Uint8Array}
                 */
                public data: Uint8Array;

                /**
                 * Creates a new JSONResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.JSONResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.JSONResponse} JSONResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.JSONResponse$Properties): cockroach.server.serverpb.JSONResponse;

                /**
                 * Encodes the specified JSONResponse message. Does not implicitly {@link cockroach.server.serverpb.JSONResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.JSONResponse$Properties} message JSONResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.JSONResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified JSONResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.JSONResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.JSONResponse$Properties} message JSONResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.JSONResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a JSONResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.JSONResponse} JSONResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.JSONResponse;

                /**
                 * Decodes a JSONResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.JSONResponse} JSONResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.JSONResponse;

                /**
                 * Verifies a JSONResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a JSONResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.JSONResponse} JSONResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.JSONResponse;

                /**
                 * Creates a JSONResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.JSONResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.JSONResponse} JSONResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.JSONResponse;

                /**
                 * Creates a plain object from a JSONResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.JSONResponse} message JSONResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.JSONResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this JSONResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this JSONResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LogsRequest$Properties = {
                node_id?: string;
                level?: string;
                start_time?: string;
                end_time?: string;
                max?: string;
                pattern?: string;
            };

            /**
             * Constructs a new LogsRequest.
             * @exports cockroach.server.serverpb.LogsRequest
             * @constructor
             * @param {cockroach.server.serverpb.LogsRequest$Properties=} [properties] Properties to set
             */
            class LogsRequest {

                /**
                 * Constructs a new LogsRequest.
                 * @exports cockroach.server.serverpb.LogsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.LogsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LogsRequest$Properties);

                /**
                 * LogsRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * LogsRequest level.
                 * @type {string}
                 */
                public level: string;

                /**
                 * LogsRequest start_time.
                 * @type {string}
                 */
                public start_time: string;

                /**
                 * LogsRequest end_time.
                 * @type {string}
                 */
                public end_time: string;

                /**
                 * LogsRequest max.
                 * @type {string}
                 */
                public max: string;

                /**
                 * LogsRequest pattern.
                 * @type {string}
                 */
                public pattern: string;

                /**
                 * Creates a new LogsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.LogsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LogsRequest} LogsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.LogsRequest$Properties): cockroach.server.serverpb.LogsRequest;

                /**
                 * Encodes the specified LogsRequest message. Does not implicitly {@link cockroach.server.serverpb.LogsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogsRequest$Properties} message LogsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LogsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogsRequest$Properties} message LogsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LogsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LogsRequest} LogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogsRequest;

                /**
                 * Decodes a LogsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LogsRequest} LogsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogsRequest;

                /**
                 * Verifies a LogsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LogsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogsRequest} LogsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogsRequest;

                /**
                 * Creates a LogsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LogsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogsRequest} LogsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LogsRequest;

                /**
                 * Creates a plain object from a LogsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LogsRequest} message LogsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LogsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LogEntriesResponse$Properties = {
                entries?: cockroach.util.log.Entry$Properties[];
            };

            /**
             * Constructs a new LogEntriesResponse.
             * @exports cockroach.server.serverpb.LogEntriesResponse
             * @constructor
             * @param {cockroach.server.serverpb.LogEntriesResponse$Properties=} [properties] Properties to set
             */
            class LogEntriesResponse {

                /**
                 * Constructs a new LogEntriesResponse.
                 * @exports cockroach.server.serverpb.LogEntriesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.LogEntriesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LogEntriesResponse$Properties);

                /**
                 * LogEntriesResponse entries.
                 * @type {Array.<cockroach.util.log.Entry$Properties>}
                 */
                public entries: cockroach.util.log.Entry$Properties[];

                /**
                 * Creates a new LogEntriesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.LogEntriesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LogEntriesResponse} LogEntriesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.LogEntriesResponse$Properties): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Encodes the specified LogEntriesResponse message. Does not implicitly {@link cockroach.server.serverpb.LogEntriesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogEntriesResponse$Properties} message LogEntriesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LogEntriesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogEntriesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogEntriesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogEntriesResponse$Properties} message LogEntriesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LogEntriesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogEntriesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LogEntriesResponse} LogEntriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Decodes a LogEntriesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LogEntriesResponse} LogEntriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Verifies a LogEntriesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LogEntriesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogEntriesResponse} LogEntriesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Creates a LogEntriesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LogEntriesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogEntriesResponse} LogEntriesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LogEntriesResponse;

                /**
                 * Creates a plain object from a LogEntriesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LogEntriesResponse} message LogEntriesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogEntriesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LogEntriesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogEntriesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LogFilesListRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new LogFilesListRequest.
             * @exports cockroach.server.serverpb.LogFilesListRequest
             * @constructor
             * @param {cockroach.server.serverpb.LogFilesListRequest$Properties=} [properties] Properties to set
             */
            class LogFilesListRequest {

                /**
                 * Constructs a new LogFilesListRequest.
                 * @exports cockroach.server.serverpb.LogFilesListRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.LogFilesListRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LogFilesListRequest$Properties);

                /**
                 * LogFilesListRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new LogFilesListRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.LogFilesListRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LogFilesListRequest} LogFilesListRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.LogFilesListRequest$Properties): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Encodes the specified LogFilesListRequest message. Does not implicitly {@link cockroach.server.serverpb.LogFilesListRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFilesListRequest$Properties} message LogFilesListRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LogFilesListRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFilesListRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFilesListRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFilesListRequest$Properties} message LogFilesListRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LogFilesListRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFilesListRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LogFilesListRequest} LogFilesListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Decodes a LogFilesListRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LogFilesListRequest} LogFilesListRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Verifies a LogFilesListRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LogFilesListRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFilesListRequest} LogFilesListRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Creates a LogFilesListRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LogFilesListRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFilesListRequest} LogFilesListRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListRequest;

                /**
                 * Creates a plain object from a LogFilesListRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LogFilesListRequest} message LogFilesListRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFilesListRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LogFilesListRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFilesListRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LogFilesListResponse$Properties = {
                files?: cockroach.util.log.FileInfo$Properties[];
            };

            /**
             * Constructs a new LogFilesListResponse.
             * @exports cockroach.server.serverpb.LogFilesListResponse
             * @constructor
             * @param {cockroach.server.serverpb.LogFilesListResponse$Properties=} [properties] Properties to set
             */
            class LogFilesListResponse {

                /**
                 * Constructs a new LogFilesListResponse.
                 * @exports cockroach.server.serverpb.LogFilesListResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.LogFilesListResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LogFilesListResponse$Properties);

                /**
                 * LogFilesListResponse files.
                 * @type {Array.<cockroach.util.log.FileInfo$Properties>}
                 */
                public files: cockroach.util.log.FileInfo$Properties[];

                /**
                 * Creates a new LogFilesListResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.LogFilesListResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LogFilesListResponse} LogFilesListResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.LogFilesListResponse$Properties): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Encodes the specified LogFilesListResponse message. Does not implicitly {@link cockroach.server.serverpb.LogFilesListResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFilesListResponse$Properties} message LogFilesListResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LogFilesListResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFilesListResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFilesListResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFilesListResponse$Properties} message LogFilesListResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LogFilesListResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFilesListResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LogFilesListResponse} LogFilesListResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Decodes a LogFilesListResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LogFilesListResponse} LogFilesListResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Verifies a LogFilesListResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LogFilesListResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFilesListResponse} LogFilesListResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Creates a LogFilesListResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LogFilesListResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFilesListResponse} LogFilesListResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LogFilesListResponse;

                /**
                 * Creates a plain object from a LogFilesListResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LogFilesListResponse} message LogFilesListResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFilesListResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LogFilesListResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFilesListResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type LogFileRequest$Properties = {
                node_id?: string;
                file?: string;
            };

            /**
             * Constructs a new LogFileRequest.
             * @exports cockroach.server.serverpb.LogFileRequest
             * @constructor
             * @param {cockroach.server.serverpb.LogFileRequest$Properties=} [properties] Properties to set
             */
            class LogFileRequest {

                /**
                 * Constructs a new LogFileRequest.
                 * @exports cockroach.server.serverpb.LogFileRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.LogFileRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.LogFileRequest$Properties);

                /**
                 * LogFileRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * LogFileRequest file.
                 * @type {string}
                 */
                public file: string;

                /**
                 * Creates a new LogFileRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.LogFileRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.LogFileRequest} LogFileRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.LogFileRequest$Properties): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Encodes the specified LogFileRequest message. Does not implicitly {@link cockroach.server.serverpb.LogFileRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFileRequest$Properties} message LogFileRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.LogFileRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified LogFileRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.LogFileRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.LogFileRequest$Properties} message LogFileRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.LogFileRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a LogFileRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.LogFileRequest} LogFileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Decodes a LogFileRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.LogFileRequest} LogFileRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Verifies a LogFileRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a LogFileRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFileRequest} LogFileRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Creates a LogFileRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.LogFileRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.LogFileRequest} LogFileRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.LogFileRequest;

                /**
                 * Creates a plain object from a LogFileRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.LogFileRequest} message LogFileRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.LogFileRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this LogFileRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this LogFileRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type StacksRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new StacksRequest.
             * @exports cockroach.server.serverpb.StacksRequest
             * @constructor
             * @param {cockroach.server.serverpb.StacksRequest$Properties=} [properties] Properties to set
             */
            class StacksRequest {

                /**
                 * Constructs a new StacksRequest.
                 * @exports cockroach.server.serverpb.StacksRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.StacksRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.StacksRequest$Properties);

                /**
                 * StacksRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new StacksRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.StacksRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.StacksRequest} StacksRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.StacksRequest$Properties): cockroach.server.serverpb.StacksRequest;

                /**
                 * Encodes the specified StacksRequest message. Does not implicitly {@link cockroach.server.serverpb.StacksRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.StacksRequest$Properties} message StacksRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.StacksRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StacksRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.StacksRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.StacksRequest$Properties} message StacksRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.StacksRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StacksRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.StacksRequest} StacksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.StacksRequest;

                /**
                 * Decodes a StacksRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.StacksRequest} StacksRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.StacksRequest;

                /**
                 * Verifies a StacksRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a StacksRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.StacksRequest} StacksRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.StacksRequest;

                /**
                 * Creates a StacksRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.StacksRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.StacksRequest} StacksRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.StacksRequest;

                /**
                 * Creates a plain object from a StacksRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.StacksRequest} message StacksRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.StacksRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this StacksRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this StacksRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type MetricsRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new MetricsRequest.
             * @exports cockroach.server.serverpb.MetricsRequest
             * @constructor
             * @param {cockroach.server.serverpb.MetricsRequest$Properties=} [properties] Properties to set
             */
            class MetricsRequest {

                /**
                 * Constructs a new MetricsRequest.
                 * @exports cockroach.server.serverpb.MetricsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.MetricsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.MetricsRequest$Properties);

                /**
                 * MetricsRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new MetricsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.MetricsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.MetricsRequest} MetricsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.MetricsRequest$Properties): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Encodes the specified MetricsRequest message. Does not implicitly {@link cockroach.server.serverpb.MetricsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.MetricsRequest$Properties} message MetricsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.MetricsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified MetricsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.MetricsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.MetricsRequest$Properties} message MetricsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.MetricsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a MetricsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.MetricsRequest} MetricsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Decodes a MetricsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.MetricsRequest} MetricsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Verifies a MetricsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a MetricsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.MetricsRequest} MetricsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Creates a MetricsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.MetricsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.MetricsRequest} MetricsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.MetricsRequest;

                /**
                 * Creates a plain object from a MetricsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.MetricsRequest} message MetricsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.MetricsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this MetricsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this MetricsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftRangeNode$Properties = {
                node_id?: number;
                range?: cockroach.server.serverpb.RangeInfo$Properties;
            };

            /**
             * Constructs a new RaftRangeNode.
             * @exports cockroach.server.serverpb.RaftRangeNode
             * @constructor
             * @param {cockroach.server.serverpb.RaftRangeNode$Properties=} [properties] Properties to set
             */
            class RaftRangeNode {

                /**
                 * Constructs a new RaftRangeNode.
                 * @exports cockroach.server.serverpb.RaftRangeNode
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftRangeNode$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftRangeNode$Properties);

                /**
                 * RaftRangeNode node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * RaftRangeNode range.
                 * @type {(cockroach.server.serverpb.RangeInfo$Properties|null)}
                 */
                public range: (cockroach.server.serverpb.RangeInfo$Properties|null);

                /**
                 * Creates a new RaftRangeNode instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftRangeNode$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftRangeNode} RaftRangeNode instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftRangeNode$Properties): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Encodes the specified RaftRangeNode message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeNode.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeNode$Properties} message RaftRangeNode message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftRangeNode$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeNode message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeNode.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeNode$Properties} message RaftRangeNode message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftRangeNode$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeNode message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftRangeNode} RaftRangeNode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Decodes a RaftRangeNode message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftRangeNode} RaftRangeNode
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Verifies a RaftRangeNode message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftRangeNode message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeNode} RaftRangeNode
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Creates a RaftRangeNode message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftRangeNode.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeNode} RaftRangeNode
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeNode;

                /**
                 * Creates a plain object from a RaftRangeNode message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftRangeNode} message RaftRangeNode
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeNode, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftRangeNode message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeNode to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftRangeError$Properties = {
                message?: string;
            };

            /**
             * Constructs a new RaftRangeError.
             * @exports cockroach.server.serverpb.RaftRangeError
             * @constructor
             * @param {cockroach.server.serverpb.RaftRangeError$Properties=} [properties] Properties to set
             */
            class RaftRangeError {

                /**
                 * Constructs a new RaftRangeError.
                 * @exports cockroach.server.serverpb.RaftRangeError
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftRangeError$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftRangeError$Properties);

                /**
                 * RaftRangeError message.
                 * @type {string}
                 */
                public message: string;

                /**
                 * Creates a new RaftRangeError instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftRangeError$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftRangeError} RaftRangeError instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftRangeError$Properties): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Encodes the specified RaftRangeError message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeError.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeError$Properties} message RaftRangeError message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftRangeError$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeError message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeError.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeError$Properties} message RaftRangeError message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftRangeError$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeError message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftRangeError} RaftRangeError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Decodes a RaftRangeError message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftRangeError} RaftRangeError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Verifies a RaftRangeError message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftRangeError message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeError} RaftRangeError
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Creates a RaftRangeError message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftRangeError.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeError} RaftRangeError
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeError;

                /**
                 * Creates a plain object from a RaftRangeError message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftRangeError} message RaftRangeError
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeError, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftRangeError message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeError to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftRangeStatus$Properties = {
                range_id?: Long;
                errors?: cockroach.server.serverpb.RaftRangeError$Properties[];
                nodes?: cockroach.server.serverpb.RaftRangeNode$Properties[];
            };

            /**
             * Constructs a new RaftRangeStatus.
             * @exports cockroach.server.serverpb.RaftRangeStatus
             * @constructor
             * @param {cockroach.server.serverpb.RaftRangeStatus$Properties=} [properties] Properties to set
             */
            class RaftRangeStatus {

                /**
                 * Constructs a new RaftRangeStatus.
                 * @exports cockroach.server.serverpb.RaftRangeStatus
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftRangeStatus$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftRangeStatus$Properties);

                /**
                 * RaftRangeStatus range_id.
                 * @type {Long}
                 */
                public range_id: Long;

                /**
                 * RaftRangeStatus errors.
                 * @type {Array.<cockroach.server.serverpb.RaftRangeError$Properties>}
                 */
                public errors: cockroach.server.serverpb.RaftRangeError$Properties[];

                /**
                 * RaftRangeStatus nodes.
                 * @type {Array.<cockroach.server.serverpb.RaftRangeNode$Properties>}
                 */
                public nodes: cockroach.server.serverpb.RaftRangeNode$Properties[];

                /**
                 * Creates a new RaftRangeStatus instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftRangeStatus$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftRangeStatus} RaftRangeStatus instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftRangeStatus$Properties): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Encodes the specified RaftRangeStatus message. Does not implicitly {@link cockroach.server.serverpb.RaftRangeStatus.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeStatus$Properties} message RaftRangeStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftRangeStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftRangeStatus message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftRangeStatus.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftRangeStatus$Properties} message RaftRangeStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftRangeStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftRangeStatus message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftRangeStatus} RaftRangeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Decodes a RaftRangeStatus message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftRangeStatus} RaftRangeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Verifies a RaftRangeStatus message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftRangeStatus message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeStatus} RaftRangeStatus
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Creates a RaftRangeStatus message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftRangeStatus.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftRangeStatus} RaftRangeStatus
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftRangeStatus;

                /**
                 * Creates a plain object from a RaftRangeStatus message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftRangeStatus} message RaftRangeStatus
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftRangeStatus, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftRangeStatus message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftRangeStatus to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftDebugRequest$Properties = {
                range_ids?: Long[];
            };

            /**
             * Constructs a new RaftDebugRequest.
             * @exports cockroach.server.serverpb.RaftDebugRequest
             * @constructor
             * @param {cockroach.server.serverpb.RaftDebugRequest$Properties=} [properties] Properties to set
             */
            class RaftDebugRequest {

                /**
                 * Constructs a new RaftDebugRequest.
                 * @exports cockroach.server.serverpb.RaftDebugRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftDebugRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftDebugRequest$Properties);

                /**
                 * RaftDebugRequest range_ids.
                 * @type {Array.<Long>}
                 */
                public range_ids: Long[];

                /**
                 * Creates a new RaftDebugRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftDebugRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftDebugRequest} RaftDebugRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftDebugRequest$Properties): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Encodes the specified RaftDebugRequest message. Does not implicitly {@link cockroach.server.serverpb.RaftDebugRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftDebugRequest$Properties} message RaftDebugRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftDebugRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftDebugRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftDebugRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftDebugRequest$Properties} message RaftDebugRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftDebugRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftDebugRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftDebugRequest} RaftDebugRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Decodes a RaftDebugRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftDebugRequest} RaftDebugRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Verifies a RaftDebugRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftDebugRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftDebugRequest} RaftDebugRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Creates a RaftDebugRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftDebugRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftDebugRequest} RaftDebugRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugRequest;

                /**
                 * Creates a plain object from a RaftDebugRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftDebugRequest} message RaftDebugRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftDebugRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftDebugRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftDebugRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RaftDebugResponse$Properties = {
                ranges?: { [k: string]: cockroach.server.serverpb.RaftRangeStatus$Properties };
                errors?: cockroach.server.serverpb.RaftRangeError$Properties[];
            };

            /**
             * Constructs a new RaftDebugResponse.
             * @exports cockroach.server.serverpb.RaftDebugResponse
             * @constructor
             * @param {cockroach.server.serverpb.RaftDebugResponse$Properties=} [properties] Properties to set
             */
            class RaftDebugResponse {

                /**
                 * Constructs a new RaftDebugResponse.
                 * @exports cockroach.server.serverpb.RaftDebugResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.RaftDebugResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.RaftDebugResponse$Properties);

                /**
                 * RaftDebugResponse ranges.
                 * @type {Object.<string,cockroach.server.serverpb.RaftRangeStatus$Properties>}
                 */
                public ranges: { [k: string]: cockroach.server.serverpb.RaftRangeStatus$Properties };

                /**
                 * RaftDebugResponse errors.
                 * @type {Array.<cockroach.server.serverpb.RaftRangeError$Properties>}
                 */
                public errors: cockroach.server.serverpb.RaftRangeError$Properties[];

                /**
                 * Creates a new RaftDebugResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.RaftDebugResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.RaftDebugResponse} RaftDebugResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.RaftDebugResponse$Properties): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Encodes the specified RaftDebugResponse message. Does not implicitly {@link cockroach.server.serverpb.RaftDebugResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftDebugResponse$Properties} message RaftDebugResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.RaftDebugResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RaftDebugResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.RaftDebugResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.RaftDebugResponse$Properties} message RaftDebugResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.RaftDebugResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RaftDebugResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.RaftDebugResponse} RaftDebugResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Decodes a RaftDebugResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.RaftDebugResponse} RaftDebugResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Verifies a RaftDebugResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RaftDebugResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftDebugResponse} RaftDebugResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Creates a RaftDebugResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.RaftDebugResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.RaftDebugResponse} RaftDebugResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.RaftDebugResponse;

                /**
                 * Creates a plain object from a RaftDebugResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.RaftDebugResponse} message RaftDebugResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.RaftDebugResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RaftDebugResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RaftDebugResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ActiveQuery$Properties = {
                sql?: string;
                start?: google.protobuf.Timestamp$Properties;
                is_distributed?: boolean;
                phase?: cockroach.server.serverpb.ActiveQuery.Phase;
            };

            /**
             * Constructs a new ActiveQuery.
             * @exports cockroach.server.serverpb.ActiveQuery
             * @constructor
             * @param {cockroach.server.serverpb.ActiveQuery$Properties=} [properties] Properties to set
             */
            class ActiveQuery {

                /**
                 * Constructs a new ActiveQuery.
                 * @exports cockroach.server.serverpb.ActiveQuery
                 * @constructor
                 * @param {cockroach.server.serverpb.ActiveQuery$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ActiveQuery$Properties);

                /**
                 * ActiveQuery sql.
                 * @type {string}
                 */
                public sql: string;

                /**
                 * ActiveQuery start.
                 * @type {(google.protobuf.Timestamp$Properties|null)}
                 */
                public start: (google.protobuf.Timestamp$Properties|null);

                /**
                 * ActiveQuery is_distributed.
                 * @type {boolean}
                 */
                public is_distributed: boolean;

                /**
                 * ActiveQuery phase.
                 * @type {cockroach.server.serverpb.ActiveQuery.Phase}
                 */
                public phase: cockroach.server.serverpb.ActiveQuery.Phase;

                /**
                 * Creates a new ActiveQuery instance using the specified properties.
                 * @param {cockroach.server.serverpb.ActiveQuery$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ActiveQuery} ActiveQuery instance
                 */
                public static create(properties?: cockroach.server.serverpb.ActiveQuery$Properties): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Encodes the specified ActiveQuery message. Does not implicitly {@link cockroach.server.serverpb.ActiveQuery.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ActiveQuery$Properties} message ActiveQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ActiveQuery$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ActiveQuery message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ActiveQuery.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ActiveQuery$Properties} message ActiveQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ActiveQuery$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ActiveQuery message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ActiveQuery} ActiveQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Decodes an ActiveQuery message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ActiveQuery} ActiveQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Verifies an ActiveQuery message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an ActiveQuery message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ActiveQuery} ActiveQuery
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Creates an ActiveQuery message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ActiveQuery.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ActiveQuery} ActiveQuery
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ActiveQuery;

                /**
                 * Creates a plain object from an ActiveQuery message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ActiveQuery} message ActiveQuery
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ActiveQuery, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ActiveQuery message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ActiveQuery to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace ActiveQuery {

                /**
                 * Phase enum.
                 * @name Phase
                 * @memberof cockroach.server.serverpb.ActiveQuery
                 * @enum {number}
                 * @property {number} PREPARING=0 PREPARING value
                 * @property {number} EXECUTING=1 EXECUTING value
                 */
                enum Phase {
                    PREPARING = 0,
                    EXECUTING = 1
                }
            }

            type ListSessionsRequest$Properties = {
                username?: string;
            };

            /**
             * Constructs a new ListSessionsRequest.
             * @exports cockroach.server.serverpb.ListSessionsRequest
             * @constructor
             * @param {cockroach.server.serverpb.ListSessionsRequest$Properties=} [properties] Properties to set
             */
            class ListSessionsRequest {

                /**
                 * Constructs a new ListSessionsRequest.
                 * @exports cockroach.server.serverpb.ListSessionsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.ListSessionsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ListSessionsRequest$Properties);

                /**
                 * ListSessionsRequest username.
                 * @type {string}
                 */
                public username: string;

                /**
                 * Creates a new ListSessionsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.ListSessionsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ListSessionsRequest} ListSessionsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ListSessionsRequest$Properties): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Encodes the specified ListSessionsRequest message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsRequest$Properties} message ListSessionsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ListSessionsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsRequest$Properties} message ListSessionsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ListSessionsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ListSessionsRequest} ListSessionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Decodes a ListSessionsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ListSessionsRequest} ListSessionsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Verifies a ListSessionsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ListSessionsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsRequest} ListSessionsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Creates a ListSessionsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ListSessionsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsRequest} ListSessionsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsRequest;

                /**
                 * Creates a plain object from a ListSessionsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ListSessionsRequest} message ListSessionsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ListSessionsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type Session$Properties = {
                node_id?: number;
                username?: string;
                client_address?: string;
                application_name?: string;
                active_queries?: cockroach.server.serverpb.ActiveQuery$Properties[];
                start?: google.protobuf.Timestamp$Properties;
                kv_txn_id?: Uint8Array;
            };

            /**
             * Constructs a new Session.
             * @exports cockroach.server.serverpb.Session
             * @constructor
             * @param {cockroach.server.serverpb.Session$Properties=} [properties] Properties to set
             */
            class Session {

                /**
                 * Constructs a new Session.
                 * @exports cockroach.server.serverpb.Session
                 * @constructor
                 * @param {cockroach.server.serverpb.Session$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.Session$Properties);

                /**
                 * Session node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * Session username.
                 * @type {string}
                 */
                public username: string;

                /**
                 * Session client_address.
                 * @type {string}
                 */
                public client_address: string;

                /**
                 * Session application_name.
                 * @type {string}
                 */
                public application_name: string;

                /**
                 * Session active_queries.
                 * @type {Array.<cockroach.server.serverpb.ActiveQuery$Properties>}
                 */
                public active_queries: cockroach.server.serverpb.ActiveQuery$Properties[];

                /**
                 * Session start.
                 * @type {(google.protobuf.Timestamp$Properties|null)}
                 */
                public start: (google.protobuf.Timestamp$Properties|null);

                /**
                 * Session kv_txn_id.
                 * @type {Uint8Array}
                 */
                public kv_txn_id: Uint8Array;

                /**
                 * Creates a new Session instance using the specified properties.
                 * @param {cockroach.server.serverpb.Session$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.Session} Session instance
                 */
                public static create(properties?: cockroach.server.serverpb.Session$Properties): cockroach.server.serverpb.Session;

                /**
                 * Encodes the specified Session message. Does not implicitly {@link cockroach.server.serverpb.Session.verify|verify} messages.
                 * @param {cockroach.server.serverpb.Session$Properties} message Session message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.Session$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Session message, length delimited. Does not implicitly {@link cockroach.server.serverpb.Session.verify|verify} messages.
                 * @param {cockroach.server.serverpb.Session$Properties} message Session message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.Session$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Session message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.Session} Session
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.Session;

                /**
                 * Decodes a Session message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.Session} Session
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.Session;

                /**
                 * Verifies a Session message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a Session message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.Session} Session
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.Session;

                /**
                 * Creates a Session message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.Session.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.Session} Session
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.Session;

                /**
                 * Creates a plain object from a Session message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.Session} message Session
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.Session, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Session message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Session to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ListSessionsError$Properties = {
                node_id?: number;
                message?: string;
            };

            /**
             * Constructs a new ListSessionsError.
             * @exports cockroach.server.serverpb.ListSessionsError
             * @constructor
             * @param {cockroach.server.serverpb.ListSessionsError$Properties=} [properties] Properties to set
             */
            class ListSessionsError {

                /**
                 * Constructs a new ListSessionsError.
                 * @exports cockroach.server.serverpb.ListSessionsError
                 * @constructor
                 * @param {cockroach.server.serverpb.ListSessionsError$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ListSessionsError$Properties);

                /**
                 * ListSessionsError node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * ListSessionsError message.
                 * @type {string}
                 */
                public message: string;

                /**
                 * Creates a new ListSessionsError instance using the specified properties.
                 * @param {cockroach.server.serverpb.ListSessionsError$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ListSessionsError} ListSessionsError instance
                 */
                public static create(properties?: cockroach.server.serverpb.ListSessionsError$Properties): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Encodes the specified ListSessionsError message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsError.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsError$Properties} message ListSessionsError message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ListSessionsError$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsError message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsError.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsError$Properties} message ListSessionsError message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ListSessionsError$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsError message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ListSessionsError} ListSessionsError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Decodes a ListSessionsError message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ListSessionsError} ListSessionsError
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Verifies a ListSessionsError message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ListSessionsError message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsError} ListSessionsError
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Creates a ListSessionsError message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ListSessionsError.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsError} ListSessionsError
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsError;

                /**
                 * Creates a plain object from a ListSessionsError message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ListSessionsError} message ListSessionsError
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsError, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ListSessionsError message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsError to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ListSessionsResponse$Properties = {
                sessions?: cockroach.server.serverpb.Session$Properties[];
                errors?: cockroach.server.serverpb.ListSessionsError$Properties[];
            };

            /**
             * Constructs a new ListSessionsResponse.
             * @exports cockroach.server.serverpb.ListSessionsResponse
             * @constructor
             * @param {cockroach.server.serverpb.ListSessionsResponse$Properties=} [properties] Properties to set
             */
            class ListSessionsResponse {

                /**
                 * Constructs a new ListSessionsResponse.
                 * @exports cockroach.server.serverpb.ListSessionsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.ListSessionsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ListSessionsResponse$Properties);

                /**
                 * ListSessionsResponse sessions.
                 * @type {Array.<cockroach.server.serverpb.Session$Properties>}
                 */
                public sessions: cockroach.server.serverpb.Session$Properties[];

                /**
                 * ListSessionsResponse errors.
                 * @type {Array.<cockroach.server.serverpb.ListSessionsError$Properties>}
                 */
                public errors: cockroach.server.serverpb.ListSessionsError$Properties[];

                /**
                 * Creates a new ListSessionsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.ListSessionsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ListSessionsResponse} ListSessionsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ListSessionsResponse$Properties): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Encodes the specified ListSessionsResponse message. Does not implicitly {@link cockroach.server.serverpb.ListSessionsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsResponse$Properties} message ListSessionsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ListSessionsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ListSessionsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ListSessionsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ListSessionsResponse$Properties} message ListSessionsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ListSessionsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ListSessionsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ListSessionsResponse} ListSessionsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Decodes a ListSessionsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ListSessionsResponse} ListSessionsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Verifies a ListSessionsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ListSessionsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsResponse} ListSessionsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Creates a ListSessionsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ListSessionsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ListSessionsResponse} ListSessionsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ListSessionsResponse;

                /**
                 * Creates a plain object from a ListSessionsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ListSessionsResponse} message ListSessionsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ListSessionsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ListSessionsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ListSessionsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type SpanStatsRequest$Properties = {
                node_id?: string;
                start_key?: Uint8Array;
                end_key?: Uint8Array;
            };

            /**
             * Constructs a new SpanStatsRequest.
             * @exports cockroach.server.serverpb.SpanStatsRequest
             * @constructor
             * @param {cockroach.server.serverpb.SpanStatsRequest$Properties=} [properties] Properties to set
             */
            class SpanStatsRequest {

                /**
                 * Constructs a new SpanStatsRequest.
                 * @exports cockroach.server.serverpb.SpanStatsRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.SpanStatsRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SpanStatsRequest$Properties);

                /**
                 * SpanStatsRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * SpanStatsRequest start_key.
                 * @type {Uint8Array}
                 */
                public start_key: Uint8Array;

                /**
                 * SpanStatsRequest end_key.
                 * @type {Uint8Array}
                 */
                public end_key: Uint8Array;

                /**
                 * Creates a new SpanStatsRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.SpanStatsRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SpanStatsRequest} SpanStatsRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.SpanStatsRequest$Properties): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Encodes the specified SpanStatsRequest message. Does not implicitly {@link cockroach.server.serverpb.SpanStatsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SpanStatsRequest$Properties} message SpanStatsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SpanStatsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SpanStatsRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SpanStatsRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SpanStatsRequest$Properties} message SpanStatsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SpanStatsRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SpanStatsRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SpanStatsRequest} SpanStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Decodes a SpanStatsRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SpanStatsRequest} SpanStatsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Verifies a SpanStatsRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SpanStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SpanStatsRequest} SpanStatsRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Creates a SpanStatsRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SpanStatsRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SpanStatsRequest} SpanStatsRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsRequest;

                /**
                 * Creates a plain object from a SpanStatsRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SpanStatsRequest} message SpanStatsRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SpanStatsRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SpanStatsRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SpanStatsRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type SpanStatsResponse$Properties = {
                range_count?: number;
                total_stats?: cockroach.storage.engine.enginepb.MVCCStats$Properties;
            };

            /**
             * Constructs a new SpanStatsResponse.
             * @exports cockroach.server.serverpb.SpanStatsResponse
             * @constructor
             * @param {cockroach.server.serverpb.SpanStatsResponse$Properties=} [properties] Properties to set
             */
            class SpanStatsResponse {

                /**
                 * Constructs a new SpanStatsResponse.
                 * @exports cockroach.server.serverpb.SpanStatsResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.SpanStatsResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.SpanStatsResponse$Properties);

                /**
                 * SpanStatsResponse range_count.
                 * @type {number}
                 */
                public range_count: number;

                /**
                 * SpanStatsResponse total_stats.
                 * @type {(cockroach.storage.engine.enginepb.MVCCStats$Properties|null)}
                 */
                public total_stats: (cockroach.storage.engine.enginepb.MVCCStats$Properties|null);

                /**
                 * Creates a new SpanStatsResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.SpanStatsResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.SpanStatsResponse} SpanStatsResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.SpanStatsResponse$Properties): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Encodes the specified SpanStatsResponse message. Does not implicitly {@link cockroach.server.serverpb.SpanStatsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SpanStatsResponse$Properties} message SpanStatsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.SpanStatsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified SpanStatsResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.SpanStatsResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.SpanStatsResponse$Properties} message SpanStatsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.SpanStatsResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a SpanStatsResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.SpanStatsResponse} SpanStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Decodes a SpanStatsResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.SpanStatsResponse} SpanStatsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Verifies a SpanStatsResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a SpanStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SpanStatsResponse} SpanStatsResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Creates a SpanStatsResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.SpanStatsResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.SpanStatsResponse} SpanStatsResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.SpanStatsResponse;

                /**
                 * Creates a plain object from a SpanStatsResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.SpanStatsResponse} message SpanStatsResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.SpanStatsResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this SpanStatsResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this SpanStatsResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ProblemRangesRequest$Properties = {
                node_id?: string;
            };

            /**
             * Constructs a new ProblemRangesRequest.
             * @exports cockroach.server.serverpb.ProblemRangesRequest
             * @constructor
             * @param {cockroach.server.serverpb.ProblemRangesRequest$Properties=} [properties] Properties to set
             */
            class ProblemRangesRequest {

                /**
                 * Constructs a new ProblemRangesRequest.
                 * @exports cockroach.server.serverpb.ProblemRangesRequest
                 * @constructor
                 * @param {cockroach.server.serverpb.ProblemRangesRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ProblemRangesRequest$Properties);

                /**
                 * ProblemRangesRequest node_id.
                 * @type {string}
                 */
                public node_id: string;

                /**
                 * Creates a new ProblemRangesRequest instance using the specified properties.
                 * @param {cockroach.server.serverpb.ProblemRangesRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ProblemRangesRequest} ProblemRangesRequest instance
                 */
                public static create(properties?: cockroach.server.serverpb.ProblemRangesRequest$Properties): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Encodes the specified ProblemRangesRequest message. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ProblemRangesRequest$Properties} message ProblemRangesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ProblemRangesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ProblemRangesRequest message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesRequest.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ProblemRangesRequest$Properties} message ProblemRangesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ProblemRangesRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ProblemRangesRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ProblemRangesRequest} ProblemRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Decodes a ProblemRangesRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ProblemRangesRequest} ProblemRangesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Verifies a ProblemRangesRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ProblemRangesRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ProblemRangesRequest} ProblemRangesRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Creates a ProblemRangesRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ProblemRangesRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ProblemRangesRequest} ProblemRangesRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesRequest;

                /**
                 * Creates a plain object from a ProblemRangesRequest message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ProblemRangesRequest} message ProblemRangesRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ProblemRangesRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ProblemRangesRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ProblemRangesRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type Failure$Properties = {
                node_id?: number;
                error_message?: string;
            };

            /**
             * Constructs a new Failure.
             * @exports cockroach.server.serverpb.Failure
             * @constructor
             * @param {cockroach.server.serverpb.Failure$Properties=} [properties] Properties to set
             */
            class Failure {

                /**
                 * Constructs a new Failure.
                 * @exports cockroach.server.serverpb.Failure
                 * @constructor
                 * @param {cockroach.server.serverpb.Failure$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.Failure$Properties);

                /**
                 * Failure node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * Failure error_message.
                 * @type {string}
                 */
                public error_message: string;

                /**
                 * Creates a new Failure instance using the specified properties.
                 * @param {cockroach.server.serverpb.Failure$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.Failure} Failure instance
                 */
                public static create(properties?: cockroach.server.serverpb.Failure$Properties): cockroach.server.serverpb.Failure;

                /**
                 * Encodes the specified Failure message. Does not implicitly {@link cockroach.server.serverpb.Failure.verify|verify} messages.
                 * @param {cockroach.server.serverpb.Failure$Properties} message Failure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.Failure$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Failure message, length delimited. Does not implicitly {@link cockroach.server.serverpb.Failure.verify|verify} messages.
                 * @param {cockroach.server.serverpb.Failure$Properties} message Failure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.Failure$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Failure message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.Failure} Failure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.Failure;

                /**
                 * Decodes a Failure message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.Failure} Failure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.Failure;

                /**
                 * Verifies a Failure message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a Failure message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.Failure} Failure
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.Failure;

                /**
                 * Creates a Failure message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.Failure.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.Failure} Failure
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.Failure;

                /**
                 * Creates a plain object from a Failure message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.Failure} message Failure
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.Failure, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Failure message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Failure to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ProblemRangesResponse$Properties = {
                node_id?: number;
                failures?: cockroach.server.serverpb.Failure$Properties[];
                unavailable_range_ids?: Long[];
                raft_leader_not_lease_holder_range_ids?: Long[];
                no_raft_leader_range_ids?: Long[];
                no_lease_range_ids?: Long[];
                underreplicated_range_ids?: Long[];
            };

            /**
             * Constructs a new ProblemRangesResponse.
             * @exports cockroach.server.serverpb.ProblemRangesResponse
             * @constructor
             * @param {cockroach.server.serverpb.ProblemRangesResponse$Properties=} [properties] Properties to set
             */
            class ProblemRangesResponse {

                /**
                 * Constructs a new ProblemRangesResponse.
                 * @exports cockroach.server.serverpb.ProblemRangesResponse
                 * @constructor
                 * @param {cockroach.server.serverpb.ProblemRangesResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.serverpb.ProblemRangesResponse$Properties);

                /**
                 * ProblemRangesResponse node_id.
                 * @type {number}
                 */
                public node_id: number;

                /**
                 * ProblemRangesResponse failures.
                 * @type {Array.<cockroach.server.serverpb.Failure$Properties>}
                 */
                public failures: cockroach.server.serverpb.Failure$Properties[];

                /**
                 * ProblemRangesResponse unavailable_range_ids.
                 * @type {Array.<Long>}
                 */
                public unavailable_range_ids: Long[];

                /**
                 * ProblemRangesResponse raft_leader_not_lease_holder_range_ids.
                 * @type {Array.<Long>}
                 */
                public raft_leader_not_lease_holder_range_ids: Long[];

                /**
                 * ProblemRangesResponse no_raft_leader_range_ids.
                 * @type {Array.<Long>}
                 */
                public no_raft_leader_range_ids: Long[];

                /**
                 * ProblemRangesResponse no_lease_range_ids.
                 * @type {Array.<Long>}
                 */
                public no_lease_range_ids: Long[];

                /**
                 * ProblemRangesResponse underreplicated_range_ids.
                 * @type {Array.<Long>}
                 */
                public underreplicated_range_ids: Long[];

                /**
                 * Creates a new ProblemRangesResponse instance using the specified properties.
                 * @param {cockroach.server.serverpb.ProblemRangesResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.serverpb.ProblemRangesResponse} ProblemRangesResponse instance
                 */
                public static create(properties?: cockroach.server.serverpb.ProblemRangesResponse$Properties): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Encodes the specified ProblemRangesResponse message. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ProblemRangesResponse$Properties} message ProblemRangesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.serverpb.ProblemRangesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ProblemRangesResponse message, length delimited. Does not implicitly {@link cockroach.server.serverpb.ProblemRangesResponse.verify|verify} messages.
                 * @param {cockroach.server.serverpb.ProblemRangesResponse$Properties} message ProblemRangesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.serverpb.ProblemRangesResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ProblemRangesResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.serverpb.ProblemRangesResponse} ProblemRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Decodes a ProblemRangesResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.serverpb.ProblemRangesResponse} ProblemRangesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Verifies a ProblemRangesResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ProblemRangesResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ProblemRangesResponse} ProblemRangesResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Creates a ProblemRangesResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.serverpb.ProblemRangesResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.serverpb.ProblemRangesResponse} ProblemRangesResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.server.serverpb.ProblemRangesResponse;

                /**
                 * Creates a plain object from a ProblemRangesResponse message. Also converts values to other types if specified.
                 * @param {cockroach.server.serverpb.ProblemRangesResponse} message ProblemRangesResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.serverpb.ProblemRangesResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ProblemRangesResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ProblemRangesResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /**
             * Constructs a new Status service.
             * @exports cockroach.server.serverpb.Status
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            class Status extends $protobuf.rpc.Service {

                /**
                 * Constructs a new Status service.
                 * @exports cockroach.server.serverpb.Status
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new Status service using the specified rpc implementation.
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Status} RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Status;

                /**
                 * Calls Certificates.
                 * @param {cockroach.server.serverpb.CertificatesRequest|Object.<string,*>} request CertificatesRequest message or plain object
                 * @param {Status_certificates_Callback} callback Node-style callback called with the error, if any, and CertificatesResponse
                 * @returns {undefined}
                 */
                public certificates(request: (cockroach.server.serverpb.CertificatesRequest|{ [k: string]: any }), callback: Status_certificates_Callback): void;

                /**
                 * Calls Details.
                 * @param {cockroach.server.serverpb.DetailsRequest|Object.<string,*>} request DetailsRequest message or plain object
                 * @param {Status_details_Callback} callback Node-style callback called with the error, if any, and DetailsResponse
                 * @returns {undefined}
                 */
                public details(request: (cockroach.server.serverpb.DetailsRequest|{ [k: string]: any }), callback: Status_details_Callback): void;

                /**
                 * Calls Nodes.
                 * @param {cockroach.server.serverpb.NodesRequest|Object.<string,*>} request NodesRequest message or plain object
                 * @param {Status_nodes_Callback} callback Node-style callback called with the error, if any, and NodesResponse
                 * @returns {undefined}
                 */
                public nodes(request: (cockroach.server.serverpb.NodesRequest|{ [k: string]: any }), callback: Status_nodes_Callback): void;

                /**
                 * Calls Node.
                 * @param {cockroach.server.serverpb.NodeRequest|Object.<string,*>} request NodeRequest message or plain object
                 * @param {Status_node_Callback} callback Node-style callback called with the error, if any, and NodeStatus
                 * @returns {undefined}
                 */
                public node(request: (cockroach.server.serverpb.NodeRequest|{ [k: string]: any }), callback: Status_node_Callback): void;

                /**
                 * Calls RaftDebug.
                 * @param {cockroach.server.serverpb.RaftDebugRequest|Object.<string,*>} request RaftDebugRequest message or plain object
                 * @param {Status_raftDebug_Callback} callback Node-style callback called with the error, if any, and RaftDebugResponse
                 * @returns {undefined}
                 */
                public raftDebug(request: (cockroach.server.serverpb.RaftDebugRequest|{ [k: string]: any }), callback: Status_raftDebug_Callback): void;

                /**
                 * Calls Ranges.
                 * @param {cockroach.server.serverpb.RangesRequest|Object.<string,*>} request RangesRequest message or plain object
                 * @param {Status_ranges_Callback} callback Node-style callback called with the error, if any, and RangesResponse
                 * @returns {undefined}
                 */
                public ranges(request: (cockroach.server.serverpb.RangesRequest|{ [k: string]: any }), callback: Status_ranges_Callback): void;

                /**
                 * Calls Gossip.
                 * @param {cockroach.server.serverpb.GossipRequest|Object.<string,*>} request GossipRequest message or plain object
                 * @param {Status_gossip_Callback} callback Node-style callback called with the error, if any, and InfoStatus
                 * @returns {undefined}
                 */
                public gossip(request: (cockroach.server.serverpb.GossipRequest|{ [k: string]: any }), callback: Status_gossip_Callback): void;

                /**
                 * Calls ListSessions.
                 * @param {cockroach.server.serverpb.ListSessionsRequest|Object.<string,*>} request ListSessionsRequest message or plain object
                 * @param {Status_listSessions_Callback} callback Node-style callback called with the error, if any, and ListSessionsResponse
                 * @returns {undefined}
                 */
                public listSessions(request: (cockroach.server.serverpb.ListSessionsRequest|{ [k: string]: any }), callback: Status_listSessions_Callback): void;

                /**
                 * Calls ListLocalSessions.
                 * @param {cockroach.server.serverpb.ListSessionsRequest|Object.<string,*>} request ListSessionsRequest message or plain object
                 * @param {Status_listLocalSessions_Callback} callback Node-style callback called with the error, if any, and ListSessionsResponse
                 * @returns {undefined}
                 */
                public listLocalSessions(request: (cockroach.server.serverpb.ListSessionsRequest|{ [k: string]: any }), callback: Status_listLocalSessions_Callback): void;

                /**
                 * Calls SpanStats.
                 * @param {cockroach.server.serverpb.SpanStatsRequest|Object.<string,*>} request SpanStatsRequest message or plain object
                 * @param {Status_spanStats_Callback} callback Node-style callback called with the error, if any, and SpanStatsResponse
                 * @returns {undefined}
                 */
                public spanStats(request: (cockroach.server.serverpb.SpanStatsRequest|{ [k: string]: any }), callback: Status_spanStats_Callback): void;

                /**
                 * Calls Stacks.
                 * @param {cockroach.server.serverpb.StacksRequest|Object.<string,*>} request StacksRequest message or plain object
                 * @param {Status_stacks_Callback} callback Node-style callback called with the error, if any, and JSONResponse
                 * @returns {undefined}
                 */
                public stacks(request: (cockroach.server.serverpb.StacksRequest|{ [k: string]: any }), callback: Status_stacks_Callback): void;

                /**
                 * Calls Metrics.
                 * @param {cockroach.server.serverpb.MetricsRequest|Object.<string,*>} request MetricsRequest message or plain object
                 * @param {Status_metrics_Callback} callback Node-style callback called with the error, if any, and JSONResponse
                 * @returns {undefined}
                 */
                public metrics(request: (cockroach.server.serverpb.MetricsRequest|{ [k: string]: any }), callback: Status_metrics_Callback): void;

                /**
                 * Calls LogFilesList.
                 * @param {cockroach.server.serverpb.LogFilesListRequest|Object.<string,*>} request LogFilesListRequest message or plain object
                 * @param {Status_logFilesList_Callback} callback Node-style callback called with the error, if any, and LogFilesListResponse
                 * @returns {undefined}
                 */
                public logFilesList(request: (cockroach.server.serverpb.LogFilesListRequest|{ [k: string]: any }), callback: Status_logFilesList_Callback): void;

                /**
                 * Calls LogFile.
                 * @param {cockroach.server.serverpb.LogFileRequest|Object.<string,*>} request LogFileRequest message or plain object
                 * @param {Status_logFile_Callback} callback Node-style callback called with the error, if any, and LogEntriesResponse
                 * @returns {undefined}
                 */
                public logFile(request: (cockroach.server.serverpb.LogFileRequest|{ [k: string]: any }), callback: Status_logFile_Callback): void;

                /**
                 * Calls Logs.
                 * @param {cockroach.server.serverpb.LogsRequest|Object.<string,*>} request LogsRequest message or plain object
                 * @param {Status_logs_Callback} callback Node-style callback called with the error, if any, and LogEntriesResponse
                 * @returns {undefined}
                 */
                public logs(request: (cockroach.server.serverpb.LogsRequest|{ [k: string]: any }), callback: Status_logs_Callback): void;

                /**
                 * Calls ProblemRanges.
                 * @param {cockroach.server.serverpb.ProblemRangesRequest|Object.<string,*>} request ProblemRangesRequest message or plain object
                 * @param {Status_problemRanges_Callback} callback Node-style callback called with the error, if any, and ProblemRangesResponse
                 * @returns {undefined}
                 */
                public problemRanges(request: (cockroach.server.serverpb.ProblemRangesRequest|{ [k: string]: any }), callback: Status_problemRanges_Callback): void;
            }
        }

        /**
         * Namespace status.
         * @exports cockroach.server.status
         * @namespace
         */
        namespace status {

            type StoreStatus$Properties = {
                desc?: cockroach.roachpb.StoreDescriptor$Properties;
                metrics?: { [k: string]: number };
            };

            /**
             * Constructs a new StoreStatus.
             * @exports cockroach.server.status.StoreStatus
             * @constructor
             * @param {cockroach.server.status.StoreStatus$Properties=} [properties] Properties to set
             */
            class StoreStatus {

                /**
                 * Constructs a new StoreStatus.
                 * @exports cockroach.server.status.StoreStatus
                 * @constructor
                 * @param {cockroach.server.status.StoreStatus$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.status.StoreStatus$Properties);

                /**
                 * StoreStatus desc.
                 * @type {(cockroach.roachpb.StoreDescriptor$Properties|null)}
                 */
                public desc: (cockroach.roachpb.StoreDescriptor$Properties|null);

                /**
                 * StoreStatus metrics.
                 * @type {Object.<string,number>}
                 */
                public metrics: { [k: string]: number };

                /**
                 * Creates a new StoreStatus instance using the specified properties.
                 * @param {cockroach.server.status.StoreStatus$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.status.StoreStatus} StoreStatus instance
                 */
                public static create(properties?: cockroach.server.status.StoreStatus$Properties): cockroach.server.status.StoreStatus;

                /**
                 * Encodes the specified StoreStatus message. Does not implicitly {@link cockroach.server.status.StoreStatus.verify|verify} messages.
                 * @param {cockroach.server.status.StoreStatus$Properties} message StoreStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.status.StoreStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified StoreStatus message, length delimited. Does not implicitly {@link cockroach.server.status.StoreStatus.verify|verify} messages.
                 * @param {cockroach.server.status.StoreStatus$Properties} message StoreStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.status.StoreStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a StoreStatus message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.status.StoreStatus} StoreStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.StoreStatus;

                /**
                 * Decodes a StoreStatus message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.status.StoreStatus} StoreStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.StoreStatus;

                /**
                 * Verifies a StoreStatus message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a StoreStatus message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.status.StoreStatus} StoreStatus
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.status.StoreStatus;

                /**
                 * Creates a StoreStatus message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.status.StoreStatus.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.status.StoreStatus} StoreStatus
                 */
                public static from(object: { [k: string]: any }): cockroach.server.status.StoreStatus;

                /**
                 * Creates a plain object from a StoreStatus message. Also converts values to other types if specified.
                 * @param {cockroach.server.status.StoreStatus} message StoreStatus
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.status.StoreStatus, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this StoreStatus message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this StoreStatus to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type NodeStatus$Properties = {
                desc?: cockroach.roachpb.NodeDescriptor$Properties;
                build_info?: cockroach.build.Info$Properties;
                started_at?: Long;
                updated_at?: Long;
                metrics?: { [k: string]: number };
                store_statuses?: cockroach.server.status.StoreStatus$Properties[];
                args?: string[];
                env?: string[];
                latencies?: { [k: string]: Long };
            };

            /**
             * Constructs a new NodeStatus.
             * @exports cockroach.server.status.NodeStatus
             * @constructor
             * @param {cockroach.server.status.NodeStatus$Properties=} [properties] Properties to set
             */
            class NodeStatus {

                /**
                 * Constructs a new NodeStatus.
                 * @exports cockroach.server.status.NodeStatus
                 * @constructor
                 * @param {cockroach.server.status.NodeStatus$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.server.status.NodeStatus$Properties);

                /**
                 * NodeStatus desc.
                 * @type {(cockroach.roachpb.NodeDescriptor$Properties|null)}
                 */
                public desc: (cockroach.roachpb.NodeDescriptor$Properties|null);

                /**
                 * NodeStatus build_info.
                 * @type {(cockroach.build.Info$Properties|null)}
                 */
                public build_info: (cockroach.build.Info$Properties|null);

                /**
                 * NodeStatus started_at.
                 * @type {Long}
                 */
                public started_at: Long;

                /**
                 * NodeStatus updated_at.
                 * @type {Long}
                 */
                public updated_at: Long;

                /**
                 * NodeStatus metrics.
                 * @type {Object.<string,number>}
                 */
                public metrics: { [k: string]: number };

                /**
                 * NodeStatus store_statuses.
                 * @type {Array.<cockroach.server.status.StoreStatus$Properties>}
                 */
                public store_statuses: cockroach.server.status.StoreStatus$Properties[];

                /**
                 * NodeStatus args.
                 * @type {Array.<string>}
                 */
                public args: string[];

                /**
                 * NodeStatus env.
                 * @type {Array.<string>}
                 */
                public env: string[];

                /**
                 * NodeStatus latencies.
                 * @type {Object.<string,Long>}
                 */
                public latencies: { [k: string]: Long };

                /**
                 * Creates a new NodeStatus instance using the specified properties.
                 * @param {cockroach.server.status.NodeStatus$Properties=} [properties] Properties to set
                 * @returns {cockroach.server.status.NodeStatus} NodeStatus instance
                 */
                public static create(properties?: cockroach.server.status.NodeStatus$Properties): cockroach.server.status.NodeStatus;

                /**
                 * Encodes the specified NodeStatus message. Does not implicitly {@link cockroach.server.status.NodeStatus.verify|verify} messages.
                 * @param {cockroach.server.status.NodeStatus$Properties} message NodeStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.server.status.NodeStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NodeStatus message, length delimited. Does not implicitly {@link cockroach.server.status.NodeStatus.verify|verify} messages.
                 * @param {cockroach.server.status.NodeStatus$Properties} message NodeStatus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.server.status.NodeStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NodeStatus message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.server.status.NodeStatus} NodeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.server.status.NodeStatus;

                /**
                 * Decodes a NodeStatus message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.server.status.NodeStatus} NodeStatus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.server.status.NodeStatus;

                /**
                 * Verifies a NodeStatus message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a NodeStatus message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.status.NodeStatus} NodeStatus
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.server.status.NodeStatus;

                /**
                 * Creates a NodeStatus message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.server.status.NodeStatus.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.server.status.NodeStatus} NodeStatus
                 */
                public static from(object: { [k: string]: any }): cockroach.server.status.NodeStatus;

                /**
                 * Creates a plain object from a NodeStatus message. Also converts values to other types if specified.
                 * @param {cockroach.server.status.NodeStatus} message NodeStatus
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.server.status.NodeStatus, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this NodeStatus message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this NodeStatus to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /**
     * Namespace config.
     * @exports cockroach.config
     * @namespace
     */
    namespace config {

        type GCPolicy$Properties = {
            ttl_seconds?: number;
        };

        /**
         * Constructs a new GCPolicy.
         * @exports cockroach.config.GCPolicy
         * @constructor
         * @param {cockroach.config.GCPolicy$Properties=} [properties] Properties to set
         */
        class GCPolicy {

            /**
             * Constructs a new GCPolicy.
             * @exports cockroach.config.GCPolicy
             * @constructor
             * @param {cockroach.config.GCPolicy$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.config.GCPolicy$Properties);

            /**
             * GCPolicy ttl_seconds.
             * @type {number}
             */
            public ttl_seconds: number;

            /**
             * Creates a new GCPolicy instance using the specified properties.
             * @param {cockroach.config.GCPolicy$Properties=} [properties] Properties to set
             * @returns {cockroach.config.GCPolicy} GCPolicy instance
             */
            public static create(properties?: cockroach.config.GCPolicy$Properties): cockroach.config.GCPolicy;

            /**
             * Encodes the specified GCPolicy message. Does not implicitly {@link cockroach.config.GCPolicy.verify|verify} messages.
             * @param {cockroach.config.GCPolicy$Properties} message GCPolicy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.config.GCPolicy$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GCPolicy message, length delimited. Does not implicitly {@link cockroach.config.GCPolicy.verify|verify} messages.
             * @param {cockroach.config.GCPolicy$Properties} message GCPolicy message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.config.GCPolicy$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GCPolicy message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.config.GCPolicy} GCPolicy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.GCPolicy;

            /**
             * Decodes a GCPolicy message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.config.GCPolicy} GCPolicy
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.GCPolicy;

            /**
             * Verifies a GCPolicy message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a GCPolicy message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.GCPolicy} GCPolicy
             */
            public static fromObject(object: { [k: string]: any }): cockroach.config.GCPolicy;

            /**
             * Creates a GCPolicy message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.config.GCPolicy.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.GCPolicy} GCPolicy
             */
            public static from(object: { [k: string]: any }): cockroach.config.GCPolicy;

            /**
             * Creates a plain object from a GCPolicy message. Also converts values to other types if specified.
             * @param {cockroach.config.GCPolicy} message GCPolicy
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.config.GCPolicy, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this GCPolicy message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this GCPolicy to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Constraint$Properties = {
            type?: cockroach.config.Constraint.Type;
            key?: string;
            value?: string;
        };

        /**
         * Constructs a new Constraint.
         * @exports cockroach.config.Constraint
         * @constructor
         * @param {cockroach.config.Constraint$Properties=} [properties] Properties to set
         */
        class Constraint {

            /**
             * Constructs a new Constraint.
             * @exports cockroach.config.Constraint
             * @constructor
             * @param {cockroach.config.Constraint$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.config.Constraint$Properties);

            /**
             * Constraint type.
             * @type {cockroach.config.Constraint.Type}
             */
            public type: cockroach.config.Constraint.Type;

            /**
             * Constraint key.
             * @type {string}
             */
            public key: string;

            /**
             * Constraint value.
             * @type {string}
             */
            public value: string;

            /**
             * Creates a new Constraint instance using the specified properties.
             * @param {cockroach.config.Constraint$Properties=} [properties] Properties to set
             * @returns {cockroach.config.Constraint} Constraint instance
             */
            public static create(properties?: cockroach.config.Constraint$Properties): cockroach.config.Constraint;

            /**
             * Encodes the specified Constraint message. Does not implicitly {@link cockroach.config.Constraint.verify|verify} messages.
             * @param {cockroach.config.Constraint$Properties} message Constraint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.config.Constraint$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Constraint message, length delimited. Does not implicitly {@link cockroach.config.Constraint.verify|verify} messages.
             * @param {cockroach.config.Constraint$Properties} message Constraint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.config.Constraint$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Constraint message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.config.Constraint} Constraint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.Constraint;

            /**
             * Decodes a Constraint message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.config.Constraint} Constraint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.Constraint;

            /**
             * Verifies a Constraint message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.Constraint} Constraint
             */
            public static fromObject(object: { [k: string]: any }): cockroach.config.Constraint;

            /**
             * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.config.Constraint.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.Constraint} Constraint
             */
            public static from(object: { [k: string]: any }): cockroach.config.Constraint;

            /**
             * Creates a plain object from a Constraint message. Also converts values to other types if specified.
             * @param {cockroach.config.Constraint} message Constraint
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.config.Constraint, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Constraint message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Constraint to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace Constraint {

            /**
             * Type enum.
             * @name Type
             * @memberof cockroach.config.Constraint
             * @enum {number}
             * @property {number} POSITIVE=0 POSITIVE value
             * @property {number} REQUIRED=1 REQUIRED value
             * @property {number} PROHIBITED=2 PROHIBITED value
             */
            enum Type {
                POSITIVE = 0,
                REQUIRED = 1,
                PROHIBITED = 2
            }
        }

        type Constraints$Properties = {
            constraints?: cockroach.config.Constraint$Properties[];
        };

        /**
         * Constructs a new Constraints.
         * @exports cockroach.config.Constraints
         * @constructor
         * @param {cockroach.config.Constraints$Properties=} [properties] Properties to set
         */
        class Constraints {

            /**
             * Constructs a new Constraints.
             * @exports cockroach.config.Constraints
             * @constructor
             * @param {cockroach.config.Constraints$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.config.Constraints$Properties);

            /**
             * Constraints constraints.
             * @type {Array.<cockroach.config.Constraint$Properties>}
             */
            public constraints: cockroach.config.Constraint$Properties[];

            /**
             * Creates a new Constraints instance using the specified properties.
             * @param {cockroach.config.Constraints$Properties=} [properties] Properties to set
             * @returns {cockroach.config.Constraints} Constraints instance
             */
            public static create(properties?: cockroach.config.Constraints$Properties): cockroach.config.Constraints;

            /**
             * Encodes the specified Constraints message. Does not implicitly {@link cockroach.config.Constraints.verify|verify} messages.
             * @param {cockroach.config.Constraints$Properties} message Constraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.config.Constraints$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Constraints message, length delimited. Does not implicitly {@link cockroach.config.Constraints.verify|verify} messages.
             * @param {cockroach.config.Constraints$Properties} message Constraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.config.Constraints$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Constraints message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.config.Constraints} Constraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.Constraints;

            /**
             * Decodes a Constraints message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.config.Constraints} Constraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.Constraints;

            /**
             * Verifies a Constraints message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Constraints message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.Constraints} Constraints
             */
            public static fromObject(object: { [k: string]: any }): cockroach.config.Constraints;

            /**
             * Creates a Constraints message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.config.Constraints.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.Constraints} Constraints
             */
            public static from(object: { [k: string]: any }): cockroach.config.Constraints;

            /**
             * Creates a plain object from a Constraints message. Also converts values to other types if specified.
             * @param {cockroach.config.Constraints} message Constraints
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.config.Constraints, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Constraints message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Constraints to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ZoneConfig$Properties = {
            replica_attrs?: cockroach.roachpb.Attributes$Properties[];
            range_min_bytes?: Long;
            range_max_bytes?: Long;
            gc?: cockroach.config.GCPolicy$Properties;
            num_replicas?: number;
            constraints?: cockroach.config.Constraints$Properties;
        };

        /**
         * Constructs a new ZoneConfig.
         * @exports cockroach.config.ZoneConfig
         * @constructor
         * @param {cockroach.config.ZoneConfig$Properties=} [properties] Properties to set
         */
        class ZoneConfig {

            /**
             * Constructs a new ZoneConfig.
             * @exports cockroach.config.ZoneConfig
             * @constructor
             * @param {cockroach.config.ZoneConfig$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.config.ZoneConfig$Properties);

            /**
             * ZoneConfig replica_attrs.
             * @type {Array.<cockroach.roachpb.Attributes$Properties>}
             */
            public replica_attrs: cockroach.roachpb.Attributes$Properties[];

            /**
             * ZoneConfig range_min_bytes.
             * @type {Long}
             */
            public range_min_bytes: Long;

            /**
             * ZoneConfig range_max_bytes.
             * @type {Long}
             */
            public range_max_bytes: Long;

            /**
             * ZoneConfig gc.
             * @type {(cockroach.config.GCPolicy$Properties|null)}
             */
            public gc: (cockroach.config.GCPolicy$Properties|null);

            /**
             * ZoneConfig num_replicas.
             * @type {number}
             */
            public num_replicas: number;

            /**
             * ZoneConfig constraints.
             * @type {(cockroach.config.Constraints$Properties|null)}
             */
            public constraints: (cockroach.config.Constraints$Properties|null);

            /**
             * Creates a new ZoneConfig instance using the specified properties.
             * @param {cockroach.config.ZoneConfig$Properties=} [properties] Properties to set
             * @returns {cockroach.config.ZoneConfig} ZoneConfig instance
             */
            public static create(properties?: cockroach.config.ZoneConfig$Properties): cockroach.config.ZoneConfig;

            /**
             * Encodes the specified ZoneConfig message. Does not implicitly {@link cockroach.config.ZoneConfig.verify|verify} messages.
             * @param {cockroach.config.ZoneConfig$Properties} message ZoneConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.config.ZoneConfig$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ZoneConfig message, length delimited. Does not implicitly {@link cockroach.config.ZoneConfig.verify|verify} messages.
             * @param {cockroach.config.ZoneConfig$Properties} message ZoneConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.config.ZoneConfig$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ZoneConfig message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.config.ZoneConfig} ZoneConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.ZoneConfig;

            /**
             * Decodes a ZoneConfig message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.config.ZoneConfig} ZoneConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.ZoneConfig;

            /**
             * Verifies a ZoneConfig message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ZoneConfig message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.ZoneConfig} ZoneConfig
             */
            public static fromObject(object: { [k: string]: any }): cockroach.config.ZoneConfig;

            /**
             * Creates a ZoneConfig message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.config.ZoneConfig.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.ZoneConfig} ZoneConfig
             */
            public static from(object: { [k: string]: any }): cockroach.config.ZoneConfig;

            /**
             * Creates a plain object from a ZoneConfig message. Also converts values to other types if specified.
             * @param {cockroach.config.ZoneConfig} message ZoneConfig
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.config.ZoneConfig, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ZoneConfig message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ZoneConfig to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type SystemConfig$Properties = {
            values?: cockroach.roachpb.KeyValue$Properties[];
        };

        /**
         * Constructs a new SystemConfig.
         * @exports cockroach.config.SystemConfig
         * @constructor
         * @param {cockroach.config.SystemConfig$Properties=} [properties] Properties to set
         */
        class SystemConfig {

            /**
             * Constructs a new SystemConfig.
             * @exports cockroach.config.SystemConfig
             * @constructor
             * @param {cockroach.config.SystemConfig$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.config.SystemConfig$Properties);

            /**
             * SystemConfig values.
             * @type {Array.<cockroach.roachpb.KeyValue$Properties>}
             */
            public values: cockroach.roachpb.KeyValue$Properties[];

            /**
             * Creates a new SystemConfig instance using the specified properties.
             * @param {cockroach.config.SystemConfig$Properties=} [properties] Properties to set
             * @returns {cockroach.config.SystemConfig} SystemConfig instance
             */
            public static create(properties?: cockroach.config.SystemConfig$Properties): cockroach.config.SystemConfig;

            /**
             * Encodes the specified SystemConfig message. Does not implicitly {@link cockroach.config.SystemConfig.verify|verify} messages.
             * @param {cockroach.config.SystemConfig$Properties} message SystemConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.config.SystemConfig$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SystemConfig message, length delimited. Does not implicitly {@link cockroach.config.SystemConfig.verify|verify} messages.
             * @param {cockroach.config.SystemConfig$Properties} message SystemConfig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.config.SystemConfig$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SystemConfig message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.config.SystemConfig} SystemConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.config.SystemConfig;

            /**
             * Decodes a SystemConfig message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.config.SystemConfig} SystemConfig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.config.SystemConfig;

            /**
             * Verifies a SystemConfig message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a SystemConfig message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.SystemConfig} SystemConfig
             */
            public static fromObject(object: { [k: string]: any }): cockroach.config.SystemConfig;

            /**
             * Creates a SystemConfig message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.config.SystemConfig.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.config.SystemConfig} SystemConfig
             */
            public static from(object: { [k: string]: any }): cockroach.config.SystemConfig;

            /**
             * Creates a plain object from a SystemConfig message. Also converts values to other types if specified.
             * @param {cockroach.config.SystemConfig} message SystemConfig
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.config.SystemConfig, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this SystemConfig message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this SystemConfig to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /**
     * Namespace roachpb.
     * @exports cockroach.roachpb
     * @namespace
     */
    namespace roachpb {

        type Span$Properties = {
            key?: Uint8Array;
            end_key?: Uint8Array;
        };

        /**
         * Constructs a new Span.
         * @exports cockroach.roachpb.Span
         * @constructor
         * @param {cockroach.roachpb.Span$Properties=} [properties] Properties to set
         */
        class Span {

            /**
             * Constructs a new Span.
             * @exports cockroach.roachpb.Span
             * @constructor
             * @param {cockroach.roachpb.Span$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Span$Properties);

            /**
             * Span key.
             * @type {Uint8Array}
             */
            public key: Uint8Array;

            /**
             * Span end_key.
             * @type {Uint8Array}
             */
            public end_key: Uint8Array;

            /**
             * Creates a new Span instance using the specified properties.
             * @param {cockroach.roachpb.Span$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Span} Span instance
             */
            public static create(properties?: cockroach.roachpb.Span$Properties): cockroach.roachpb.Span;

            /**
             * Encodes the specified Span message. Does not implicitly {@link cockroach.roachpb.Span.verify|verify} messages.
             * @param {cockroach.roachpb.Span$Properties} message Span message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Span$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Span message, length delimited. Does not implicitly {@link cockroach.roachpb.Span.verify|verify} messages.
             * @param {cockroach.roachpb.Span$Properties} message Span message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Span$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Span message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Span} Span
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Span;

            /**
             * Decodes a Span message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Span} Span
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Span;

            /**
             * Verifies a Span message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Span message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Span} Span
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Span;

            /**
             * Creates a Span message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Span.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Span} Span
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Span;

            /**
             * Creates a plain object from a Span message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Span} message Span
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Span, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Span message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Span to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * ValueType enum.
         * @name ValueType
         * @memberof cockroach.roachpb
         * @enum {number}
         * @property {number} UNKNOWN=0 UNKNOWN value
         * @property {number} NULL=7 NULL value
         * @property {number} INT=1 INT value
         * @property {number} FLOAT=2 FLOAT value
         * @property {number} BYTES=3 BYTES value
         * @property {number} DELIMITED_BYTES=8 DELIMITED_BYTES value
         * @property {number} TIME=4 TIME value
         * @property {number} DECIMAL=5 DECIMAL value
         * @property {number} DELIMITED_DECIMAL=9 DELIMITED_DECIMAL value
         * @property {number} DURATION=6 DURATION value
         * @property {number} TUPLE=10 TUPLE value
         * @property {number} TIMESERIES=100 TIMESERIES value
         */
        enum ValueType {
            UNKNOWN = 0,
            NULL = 7,
            INT = 1,
            FLOAT = 2,
            BYTES = 3,
            DELIMITED_BYTES = 8,
            TIME = 4,
            DECIMAL = 5,
            DELIMITED_DECIMAL = 9,
            DURATION = 6,
            TUPLE = 10,
            TIMESERIES = 100
        }

        type Value$Properties = {
            raw_bytes?: Uint8Array;
            timestamp?: cockroach.util.hlc.Timestamp$Properties;
        };

        /**
         * Constructs a new Value.
         * @exports cockroach.roachpb.Value
         * @constructor
         * @param {cockroach.roachpb.Value$Properties=} [properties] Properties to set
         */
        class Value {

            /**
             * Constructs a new Value.
             * @exports cockroach.roachpb.Value
             * @constructor
             * @param {cockroach.roachpb.Value$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Value$Properties);

            /**
             * Value raw_bytes.
             * @type {Uint8Array}
             */
            public raw_bytes: Uint8Array;

            /**
             * Value timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Creates a new Value instance using the specified properties.
             * @param {cockroach.roachpb.Value$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Value} Value instance
             */
            public static create(properties?: cockroach.roachpb.Value$Properties): cockroach.roachpb.Value;

            /**
             * Encodes the specified Value message. Does not implicitly {@link cockroach.roachpb.Value.verify|verify} messages.
             * @param {cockroach.roachpb.Value$Properties} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Value message, length delimited. Does not implicitly {@link cockroach.roachpb.Value.verify|verify} messages.
             * @param {cockroach.roachpb.Value$Properties} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Value$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Value message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Value;

            /**
             * Decodes a Value message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Value;

            /**
             * Verifies a Value message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Value} Value
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Value;

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Value.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Value} Value
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Value;

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Value} message Value
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Value, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Value message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Value to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type KeyValue$Properties = {
            key?: Uint8Array;
            value?: cockroach.roachpb.Value$Properties;
        };

        /**
         * Constructs a new KeyValue.
         * @exports cockroach.roachpb.KeyValue
         * @constructor
         * @param {cockroach.roachpb.KeyValue$Properties=} [properties] Properties to set
         */
        class KeyValue {

            /**
             * Constructs a new KeyValue.
             * @exports cockroach.roachpb.KeyValue
             * @constructor
             * @param {cockroach.roachpb.KeyValue$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.KeyValue$Properties);

            /**
             * KeyValue key.
             * @type {Uint8Array}
             */
            public key: Uint8Array;

            /**
             * KeyValue value.
             * @type {(cockroach.roachpb.Value$Properties|null)}
             */
            public value: (cockroach.roachpb.Value$Properties|null);

            /**
             * Creates a new KeyValue instance using the specified properties.
             * @param {cockroach.roachpb.KeyValue$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.KeyValue} KeyValue instance
             */
            public static create(properties?: cockroach.roachpb.KeyValue$Properties): cockroach.roachpb.KeyValue;

            /**
             * Encodes the specified KeyValue message. Does not implicitly {@link cockroach.roachpb.KeyValue.verify|verify} messages.
             * @param {cockroach.roachpb.KeyValue$Properties} message KeyValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.KeyValue$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link cockroach.roachpb.KeyValue.verify|verify} messages.
             * @param {cockroach.roachpb.KeyValue$Properties} message KeyValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.KeyValue$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a KeyValue message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.KeyValue} KeyValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.KeyValue;

            /**
             * Decodes a KeyValue message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.KeyValue} KeyValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.KeyValue;

            /**
             * Verifies a KeyValue message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.KeyValue} KeyValue
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.KeyValue;

            /**
             * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.KeyValue.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.KeyValue} KeyValue
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.KeyValue;

            /**
             * Creates a plain object from a KeyValue message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.KeyValue} message KeyValue
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.KeyValue, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this KeyValue message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this KeyValue to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type StoreIdent$Properties = {
            cluster_id?: Uint8Array;
            node_id?: number;
            store_id?: number;
        };

        /**
         * Constructs a new StoreIdent.
         * @exports cockroach.roachpb.StoreIdent
         * @constructor
         * @param {cockroach.roachpb.StoreIdent$Properties=} [properties] Properties to set
         */
        class StoreIdent {

            /**
             * Constructs a new StoreIdent.
             * @exports cockroach.roachpb.StoreIdent
             * @constructor
             * @param {cockroach.roachpb.StoreIdent$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.StoreIdent$Properties);

            /**
             * StoreIdent cluster_id.
             * @type {Uint8Array}
             */
            public cluster_id: Uint8Array;

            /**
             * StoreIdent node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * StoreIdent store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * Creates a new StoreIdent instance using the specified properties.
             * @param {cockroach.roachpb.StoreIdent$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.StoreIdent} StoreIdent instance
             */
            public static create(properties?: cockroach.roachpb.StoreIdent$Properties): cockroach.roachpb.StoreIdent;

            /**
             * Encodes the specified StoreIdent message. Does not implicitly {@link cockroach.roachpb.StoreIdent.verify|verify} messages.
             * @param {cockroach.roachpb.StoreIdent$Properties} message StoreIdent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.StoreIdent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreIdent message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreIdent.verify|verify} messages.
             * @param {cockroach.roachpb.StoreIdent$Properties} message StoreIdent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.StoreIdent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreIdent message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.StoreIdent} StoreIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreIdent;

            /**
             * Decodes a StoreIdent message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.StoreIdent} StoreIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreIdent;

            /**
             * Verifies a StoreIdent message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a StoreIdent message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreIdent} StoreIdent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreIdent;

            /**
             * Creates a StoreIdent message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.StoreIdent.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreIdent} StoreIdent
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.StoreIdent;

            /**
             * Creates a plain object from a StoreIdent message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.StoreIdent} message StoreIdent
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreIdent, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this StoreIdent message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreIdent to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type SplitTrigger$Properties = {
            left_desc?: cockroach.roachpb.RangeDescriptor$Properties;
            right_desc?: cockroach.roachpb.RangeDescriptor$Properties;
        };

        /**
         * Constructs a new SplitTrigger.
         * @exports cockroach.roachpb.SplitTrigger
         * @constructor
         * @param {cockroach.roachpb.SplitTrigger$Properties=} [properties] Properties to set
         */
        class SplitTrigger {

            /**
             * Constructs a new SplitTrigger.
             * @exports cockroach.roachpb.SplitTrigger
             * @constructor
             * @param {cockroach.roachpb.SplitTrigger$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.SplitTrigger$Properties);

            /**
             * SplitTrigger left_desc.
             * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
             */
            public left_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

            /**
             * SplitTrigger right_desc.
             * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
             */
            public right_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

            /**
             * Creates a new SplitTrigger instance using the specified properties.
             * @param {cockroach.roachpb.SplitTrigger$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.SplitTrigger} SplitTrigger instance
             */
            public static create(properties?: cockroach.roachpb.SplitTrigger$Properties): cockroach.roachpb.SplitTrigger;

            /**
             * Encodes the specified SplitTrigger message. Does not implicitly {@link cockroach.roachpb.SplitTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.SplitTrigger$Properties} message SplitTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.SplitTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SplitTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.SplitTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.SplitTrigger$Properties} message SplitTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.SplitTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SplitTrigger message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.SplitTrigger} SplitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.SplitTrigger;

            /**
             * Decodes a SplitTrigger message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.SplitTrigger} SplitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.SplitTrigger;

            /**
             * Verifies a SplitTrigger message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a SplitTrigger message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.SplitTrigger} SplitTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.SplitTrigger;

            /**
             * Creates a SplitTrigger message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.SplitTrigger.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.SplitTrigger} SplitTrigger
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.SplitTrigger;

            /**
             * Creates a plain object from a SplitTrigger message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.SplitTrigger} message SplitTrigger
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.SplitTrigger, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this SplitTrigger message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this SplitTrigger to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type MergeTrigger$Properties = {
            left_desc?: cockroach.roachpb.RangeDescriptor$Properties;
            right_desc?: cockroach.roachpb.RangeDescriptor$Properties;
        };

        /**
         * Constructs a new MergeTrigger.
         * @exports cockroach.roachpb.MergeTrigger
         * @constructor
         * @param {cockroach.roachpb.MergeTrigger$Properties=} [properties] Properties to set
         */
        class MergeTrigger {

            /**
             * Constructs a new MergeTrigger.
             * @exports cockroach.roachpb.MergeTrigger
             * @constructor
             * @param {cockroach.roachpb.MergeTrigger$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.MergeTrigger$Properties);

            /**
             * MergeTrigger left_desc.
             * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
             */
            public left_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

            /**
             * MergeTrigger right_desc.
             * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
             */
            public right_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

            /**
             * Creates a new MergeTrigger instance using the specified properties.
             * @param {cockroach.roachpb.MergeTrigger$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.MergeTrigger} MergeTrigger instance
             */
            public static create(properties?: cockroach.roachpb.MergeTrigger$Properties): cockroach.roachpb.MergeTrigger;

            /**
             * Encodes the specified MergeTrigger message. Does not implicitly {@link cockroach.roachpb.MergeTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.MergeTrigger$Properties} message MergeTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.MergeTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MergeTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.MergeTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.MergeTrigger$Properties} message MergeTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.MergeTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MergeTrigger message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.MergeTrigger} MergeTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.MergeTrigger;

            /**
             * Decodes a MergeTrigger message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.MergeTrigger} MergeTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.MergeTrigger;

            /**
             * Verifies a MergeTrigger message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a MergeTrigger message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.MergeTrigger} MergeTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.MergeTrigger;

            /**
             * Creates a MergeTrigger message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.MergeTrigger.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.MergeTrigger} MergeTrigger
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.MergeTrigger;

            /**
             * Creates a plain object from a MergeTrigger message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.MergeTrigger} message MergeTrigger
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.MergeTrigger, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this MergeTrigger message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this MergeTrigger to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * ReplicaChangeType enum.
         * @name ReplicaChangeType
         * @memberof cockroach.roachpb
         * @enum {number}
         * @property {number} ADD_REPLICA=0 ADD_REPLICA value
         * @property {number} REMOVE_REPLICA=1 REMOVE_REPLICA value
         */
        enum ReplicaChangeType {
            ADD_REPLICA = 0,
            REMOVE_REPLICA = 1
        }

        type ChangeReplicasTrigger$Properties = {
            change_type?: cockroach.roachpb.ReplicaChangeType;
            replica?: cockroach.roachpb.ReplicaDescriptor$Properties;
            updated_replicas?: cockroach.roachpb.ReplicaDescriptor$Properties[];
            next_replica_id?: number;
        };

        /**
         * Constructs a new ChangeReplicasTrigger.
         * @exports cockroach.roachpb.ChangeReplicasTrigger
         * @constructor
         * @param {cockroach.roachpb.ChangeReplicasTrigger$Properties=} [properties] Properties to set
         */
        class ChangeReplicasTrigger {

            /**
             * Constructs a new ChangeReplicasTrigger.
             * @exports cockroach.roachpb.ChangeReplicasTrigger
             * @constructor
             * @param {cockroach.roachpb.ChangeReplicasTrigger$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ChangeReplicasTrigger$Properties);

            /**
             * ChangeReplicasTrigger change_type.
             * @type {cockroach.roachpb.ReplicaChangeType}
             */
            public change_type: cockroach.roachpb.ReplicaChangeType;

            /**
             * ChangeReplicasTrigger replica.
             * @type {(cockroach.roachpb.ReplicaDescriptor$Properties|null)}
             */
            public replica: (cockroach.roachpb.ReplicaDescriptor$Properties|null);

            /**
             * ChangeReplicasTrigger updated_replicas.
             * @type {Array.<cockroach.roachpb.ReplicaDescriptor$Properties>}
             */
            public updated_replicas: cockroach.roachpb.ReplicaDescriptor$Properties[];

            /**
             * ChangeReplicasTrigger next_replica_id.
             * @type {number}
             */
            public next_replica_id: number;

            /**
             * Creates a new ChangeReplicasTrigger instance using the specified properties.
             * @param {cockroach.roachpb.ChangeReplicasTrigger$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ChangeReplicasTrigger} ChangeReplicasTrigger instance
             */
            public static create(properties?: cockroach.roachpb.ChangeReplicasTrigger$Properties): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Encodes the specified ChangeReplicasTrigger message. Does not implicitly {@link cockroach.roachpb.ChangeReplicasTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.ChangeReplicasTrigger$Properties} message ChangeReplicasTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ChangeReplicasTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ChangeReplicasTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.ChangeReplicasTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.ChangeReplicasTrigger$Properties} message ChangeReplicasTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ChangeReplicasTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ChangeReplicasTrigger message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ChangeReplicasTrigger} ChangeReplicasTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Decodes a ChangeReplicasTrigger message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ChangeReplicasTrigger} ChangeReplicasTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Verifies a ChangeReplicasTrigger message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ChangeReplicasTrigger message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ChangeReplicasTrigger} ChangeReplicasTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Creates a ChangeReplicasTrigger message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ChangeReplicasTrigger.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ChangeReplicasTrigger} ChangeReplicasTrigger
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ChangeReplicasTrigger;

            /**
             * Creates a plain object from a ChangeReplicasTrigger message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ChangeReplicasTrigger} message ChangeReplicasTrigger
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ChangeReplicasTrigger, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ChangeReplicasTrigger message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ChangeReplicasTrigger to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ModifiedSpanTrigger$Properties = {
            system_config_span?: boolean;
            node_liveness_span?: cockroach.roachpb.Span$Properties;
        };

        /**
         * Constructs a new ModifiedSpanTrigger.
         * @exports cockroach.roachpb.ModifiedSpanTrigger
         * @constructor
         * @param {cockroach.roachpb.ModifiedSpanTrigger$Properties=} [properties] Properties to set
         */
        class ModifiedSpanTrigger {

            /**
             * Constructs a new ModifiedSpanTrigger.
             * @exports cockroach.roachpb.ModifiedSpanTrigger
             * @constructor
             * @param {cockroach.roachpb.ModifiedSpanTrigger$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ModifiedSpanTrigger$Properties);

            /**
             * ModifiedSpanTrigger system_config_span.
             * @type {boolean}
             */
            public system_config_span: boolean;

            /**
             * ModifiedSpanTrigger node_liveness_span.
             * @type {(cockroach.roachpb.Span$Properties|null)}
             */
            public node_liveness_span: (cockroach.roachpb.Span$Properties|null);

            /**
             * Creates a new ModifiedSpanTrigger instance using the specified properties.
             * @param {cockroach.roachpb.ModifiedSpanTrigger$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ModifiedSpanTrigger} ModifiedSpanTrigger instance
             */
            public static create(properties?: cockroach.roachpb.ModifiedSpanTrigger$Properties): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Encodes the specified ModifiedSpanTrigger message. Does not implicitly {@link cockroach.roachpb.ModifiedSpanTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.ModifiedSpanTrigger$Properties} message ModifiedSpanTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ModifiedSpanTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ModifiedSpanTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.ModifiedSpanTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.ModifiedSpanTrigger$Properties} message ModifiedSpanTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ModifiedSpanTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ModifiedSpanTrigger message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ModifiedSpanTrigger} ModifiedSpanTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Decodes a ModifiedSpanTrigger message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ModifiedSpanTrigger} ModifiedSpanTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Verifies a ModifiedSpanTrigger message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ModifiedSpanTrigger message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ModifiedSpanTrigger} ModifiedSpanTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Creates a ModifiedSpanTrigger message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ModifiedSpanTrigger.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ModifiedSpanTrigger} ModifiedSpanTrigger
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ModifiedSpanTrigger;

            /**
             * Creates a plain object from a ModifiedSpanTrigger message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ModifiedSpanTrigger} message ModifiedSpanTrigger
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ModifiedSpanTrigger, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ModifiedSpanTrigger message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ModifiedSpanTrigger to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type InternalCommitTrigger$Properties = {
            split_trigger?: cockroach.roachpb.SplitTrigger$Properties;
            merge_trigger?: cockroach.roachpb.MergeTrigger$Properties;
            change_replicas_trigger?: cockroach.roachpb.ChangeReplicasTrigger$Properties;
            modified_span_trigger?: cockroach.roachpb.ModifiedSpanTrigger$Properties;
        };

        /**
         * Constructs a new InternalCommitTrigger.
         * @exports cockroach.roachpb.InternalCommitTrigger
         * @constructor
         * @param {cockroach.roachpb.InternalCommitTrigger$Properties=} [properties] Properties to set
         */
        class InternalCommitTrigger {

            /**
             * Constructs a new InternalCommitTrigger.
             * @exports cockroach.roachpb.InternalCommitTrigger
             * @constructor
             * @param {cockroach.roachpb.InternalCommitTrigger$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.InternalCommitTrigger$Properties);

            /**
             * InternalCommitTrigger split_trigger.
             * @type {(cockroach.roachpb.SplitTrigger$Properties|null)}
             */
            public split_trigger: (cockroach.roachpb.SplitTrigger$Properties|null);

            /**
             * InternalCommitTrigger merge_trigger.
             * @type {(cockroach.roachpb.MergeTrigger$Properties|null)}
             */
            public merge_trigger: (cockroach.roachpb.MergeTrigger$Properties|null);

            /**
             * InternalCommitTrigger change_replicas_trigger.
             * @type {(cockroach.roachpb.ChangeReplicasTrigger$Properties|null)}
             */
            public change_replicas_trigger: (cockroach.roachpb.ChangeReplicasTrigger$Properties|null);

            /**
             * InternalCommitTrigger modified_span_trigger.
             * @type {(cockroach.roachpb.ModifiedSpanTrigger$Properties|null)}
             */
            public modified_span_trigger: (cockroach.roachpb.ModifiedSpanTrigger$Properties|null);

            /**
             * Creates a new InternalCommitTrigger instance using the specified properties.
             * @param {cockroach.roachpb.InternalCommitTrigger$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.InternalCommitTrigger} InternalCommitTrigger instance
             */
            public static create(properties?: cockroach.roachpb.InternalCommitTrigger$Properties): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Encodes the specified InternalCommitTrigger message. Does not implicitly {@link cockroach.roachpb.InternalCommitTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.InternalCommitTrigger$Properties} message InternalCommitTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.InternalCommitTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified InternalCommitTrigger message, length delimited. Does not implicitly {@link cockroach.roachpb.InternalCommitTrigger.verify|verify} messages.
             * @param {cockroach.roachpb.InternalCommitTrigger$Properties} message InternalCommitTrigger message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.InternalCommitTrigger$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an InternalCommitTrigger message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.InternalCommitTrigger} InternalCommitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Decodes an InternalCommitTrigger message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.InternalCommitTrigger} InternalCommitTrigger
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Verifies an InternalCommitTrigger message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an InternalCommitTrigger message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.InternalCommitTrigger} InternalCommitTrigger
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Creates an InternalCommitTrigger message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.InternalCommitTrigger.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.InternalCommitTrigger} InternalCommitTrigger
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.InternalCommitTrigger;

            /**
             * Creates a plain object from an InternalCommitTrigger message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.InternalCommitTrigger} message InternalCommitTrigger
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.InternalCommitTrigger, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this InternalCommitTrigger message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this InternalCommitTrigger to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * TransactionStatus enum.
         * @name TransactionStatus
         * @memberof cockroach.roachpb
         * @enum {number}
         * @property {number} PENDING=0 PENDING value
         * @property {number} COMMITTED=1 COMMITTED value
         * @property {number} ABORTED=2 ABORTED value
         */
        enum TransactionStatus {
            PENDING = 0,
            COMMITTED = 1,
            ABORTED = 2
        }

        type ObservedTimestamp$Properties = {
            node_id?: number;
            timestamp?: cockroach.util.hlc.Timestamp$Properties;
        };

        /**
         * Constructs a new ObservedTimestamp.
         * @exports cockroach.roachpb.ObservedTimestamp
         * @constructor
         * @param {cockroach.roachpb.ObservedTimestamp$Properties=} [properties] Properties to set
         */
        class ObservedTimestamp {

            /**
             * Constructs a new ObservedTimestamp.
             * @exports cockroach.roachpb.ObservedTimestamp
             * @constructor
             * @param {cockroach.roachpb.ObservedTimestamp$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ObservedTimestamp$Properties);

            /**
             * ObservedTimestamp node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * ObservedTimestamp timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Creates a new ObservedTimestamp instance using the specified properties.
             * @param {cockroach.roachpb.ObservedTimestamp$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ObservedTimestamp} ObservedTimestamp instance
             */
            public static create(properties?: cockroach.roachpb.ObservedTimestamp$Properties): cockroach.roachpb.ObservedTimestamp;

            /**
             * Encodes the specified ObservedTimestamp message. Does not implicitly {@link cockroach.roachpb.ObservedTimestamp.verify|verify} messages.
             * @param {cockroach.roachpb.ObservedTimestamp$Properties} message ObservedTimestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ObservedTimestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ObservedTimestamp message, length delimited. Does not implicitly {@link cockroach.roachpb.ObservedTimestamp.verify|verify} messages.
             * @param {cockroach.roachpb.ObservedTimestamp$Properties} message ObservedTimestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ObservedTimestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an ObservedTimestamp message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ObservedTimestamp} ObservedTimestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ObservedTimestamp;

            /**
             * Decodes an ObservedTimestamp message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ObservedTimestamp} ObservedTimestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ObservedTimestamp;

            /**
             * Verifies an ObservedTimestamp message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an ObservedTimestamp message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ObservedTimestamp} ObservedTimestamp
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ObservedTimestamp;

            /**
             * Creates an ObservedTimestamp message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ObservedTimestamp.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ObservedTimestamp} ObservedTimestamp
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ObservedTimestamp;

            /**
             * Creates a plain object from an ObservedTimestamp message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ObservedTimestamp} message ObservedTimestamp
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ObservedTimestamp, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ObservedTimestamp message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ObservedTimestamp to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Transaction$Properties = {
            meta?: cockroach.storage.engine.enginepb.TxnMeta$Properties;
            name?: string;
            status?: cockroach.roachpb.TransactionStatus;
            last_heartbeat?: cockroach.util.hlc.Timestamp$Properties;
            orig_timestamp?: cockroach.util.hlc.Timestamp$Properties;
            max_timestamp?: cockroach.util.hlc.Timestamp$Properties;
            observed_timestamps?: cockroach.roachpb.ObservedTimestamp$Properties[];
            writing?: boolean;
            write_too_old?: boolean;
            retry_on_push?: boolean;
            intents?: cockroach.roachpb.Span$Properties[];
        };

        /**
         * Constructs a new Transaction.
         * @exports cockroach.roachpb.Transaction
         * @constructor
         * @param {cockroach.roachpb.Transaction$Properties=} [properties] Properties to set
         */
        class Transaction {

            /**
             * Constructs a new Transaction.
             * @exports cockroach.roachpb.Transaction
             * @constructor
             * @param {cockroach.roachpb.Transaction$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Transaction$Properties);

            /**
             * Transaction meta.
             * @type {(cockroach.storage.engine.enginepb.TxnMeta$Properties|null)}
             */
            public meta: (cockroach.storage.engine.enginepb.TxnMeta$Properties|null);

            /**
             * Transaction name.
             * @type {string}
             */
            public name: string;

            /**
             * Transaction status.
             * @type {cockroach.roachpb.TransactionStatus}
             */
            public status: cockroach.roachpb.TransactionStatus;

            /**
             * Transaction last_heartbeat.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public last_heartbeat: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Transaction orig_timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public orig_timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Transaction max_timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public max_timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Transaction observed_timestamps.
             * @type {Array.<cockroach.roachpb.ObservedTimestamp$Properties>}
             */
            public observed_timestamps: cockroach.roachpb.ObservedTimestamp$Properties[];

            /**
             * Transaction writing.
             * @type {boolean}
             */
            public writing: boolean;

            /**
             * Transaction write_too_old.
             * @type {boolean}
             */
            public write_too_old: boolean;

            /**
             * Transaction retry_on_push.
             * @type {boolean}
             */
            public retry_on_push: boolean;

            /**
             * Transaction intents.
             * @type {Array.<cockroach.roachpb.Span$Properties>}
             */
            public intents: cockroach.roachpb.Span$Properties[];

            /**
             * Creates a new Transaction instance using the specified properties.
             * @param {cockroach.roachpb.Transaction$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Transaction} Transaction instance
             */
            public static create(properties?: cockroach.roachpb.Transaction$Properties): cockroach.roachpb.Transaction;

            /**
             * Encodes the specified Transaction message. Does not implicitly {@link cockroach.roachpb.Transaction.verify|verify} messages.
             * @param {cockroach.roachpb.Transaction$Properties} message Transaction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Transaction$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Transaction message, length delimited. Does not implicitly {@link cockroach.roachpb.Transaction.verify|verify} messages.
             * @param {cockroach.roachpb.Transaction$Properties} message Transaction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Transaction$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Transaction message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Transaction} Transaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Transaction;

            /**
             * Decodes a Transaction message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Transaction} Transaction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Transaction;

            /**
             * Verifies a Transaction message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Transaction} Transaction
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Transaction;

            /**
             * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Transaction.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Transaction} Transaction
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Transaction;

            /**
             * Creates a plain object from a Transaction message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Transaction} message Transaction
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Transaction, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Transaction message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Transaction to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Intent$Properties = {
            span?: cockroach.roachpb.Span$Properties;
            txn?: cockroach.storage.engine.enginepb.TxnMeta$Properties;
            status?: cockroach.roachpb.TransactionStatus;
        };

        /**
         * Constructs a new Intent.
         * @exports cockroach.roachpb.Intent
         * @constructor
         * @param {cockroach.roachpb.Intent$Properties=} [properties] Properties to set
         */
        class Intent {

            /**
             * Constructs a new Intent.
             * @exports cockroach.roachpb.Intent
             * @constructor
             * @param {cockroach.roachpb.Intent$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Intent$Properties);

            /**
             * Intent span.
             * @type {(cockroach.roachpb.Span$Properties|null)}
             */
            public span: (cockroach.roachpb.Span$Properties|null);

            /**
             * Intent txn.
             * @type {(cockroach.storage.engine.enginepb.TxnMeta$Properties|null)}
             */
            public txn: (cockroach.storage.engine.enginepb.TxnMeta$Properties|null);

            /**
             * Intent status.
             * @type {cockroach.roachpb.TransactionStatus}
             */
            public status: cockroach.roachpb.TransactionStatus;

            /**
             * Creates a new Intent instance using the specified properties.
             * @param {cockroach.roachpb.Intent$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Intent} Intent instance
             */
            public static create(properties?: cockroach.roachpb.Intent$Properties): cockroach.roachpb.Intent;

            /**
             * Encodes the specified Intent message. Does not implicitly {@link cockroach.roachpb.Intent.verify|verify} messages.
             * @param {cockroach.roachpb.Intent$Properties} message Intent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Intent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Intent message, length delimited. Does not implicitly {@link cockroach.roachpb.Intent.verify|verify} messages.
             * @param {cockroach.roachpb.Intent$Properties} message Intent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Intent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Intent message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Intent} Intent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Intent;

            /**
             * Decodes an Intent message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Intent} Intent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Intent;

            /**
             * Verifies an Intent message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an Intent message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Intent} Intent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Intent;

            /**
             * Creates an Intent message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Intent.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Intent} Intent
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Intent;

            /**
             * Creates a plain object from an Intent message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Intent} message Intent
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Intent, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Intent message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Intent to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Lease$Properties = {
            start?: cockroach.util.hlc.Timestamp$Properties;
            expiration?: cockroach.util.hlc.Timestamp$Properties;
            replica?: cockroach.roachpb.ReplicaDescriptor$Properties;
            deprecated_start_stasis?: cockroach.util.hlc.Timestamp$Properties;
            proposed_ts?: cockroach.util.hlc.Timestamp$Properties;
            epoch?: Long;
        };

        /**
         * Constructs a new Lease.
         * @exports cockroach.roachpb.Lease
         * @constructor
         * @param {cockroach.roachpb.Lease$Properties=} [properties] Properties to set
         */
        class Lease {

            /**
             * Constructs a new Lease.
             * @exports cockroach.roachpb.Lease
             * @constructor
             * @param {cockroach.roachpb.Lease$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Lease$Properties);

            /**
             * Lease start.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public start: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Lease expiration.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public expiration: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Lease replica.
             * @type {(cockroach.roachpb.ReplicaDescriptor$Properties|null)}
             */
            public replica: (cockroach.roachpb.ReplicaDescriptor$Properties|null);

            /**
             * Lease deprecated_start_stasis.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public deprecated_start_stasis: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Lease proposed_ts.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public proposed_ts: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Lease epoch.
             * @type {Long}
             */
            public epoch: Long;

            /**
             * Creates a new Lease instance using the specified properties.
             * @param {cockroach.roachpb.Lease$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Lease} Lease instance
             */
            public static create(properties?: cockroach.roachpb.Lease$Properties): cockroach.roachpb.Lease;

            /**
             * Encodes the specified Lease message. Does not implicitly {@link cockroach.roachpb.Lease.verify|verify} messages.
             * @param {cockroach.roachpb.Lease$Properties} message Lease message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Lease$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Lease message, length delimited. Does not implicitly {@link cockroach.roachpb.Lease.verify|verify} messages.
             * @param {cockroach.roachpb.Lease$Properties} message Lease message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Lease$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Lease message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Lease} Lease
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Lease;

            /**
             * Decodes a Lease message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Lease} Lease
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Lease;

            /**
             * Verifies a Lease message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Lease message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Lease} Lease
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Lease;

            /**
             * Creates a Lease message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Lease.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Lease} Lease
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Lease;

            /**
             * Creates a plain object from a Lease message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Lease} message Lease
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Lease, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Lease message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Lease to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type AbortCacheEntry$Properties = {
            key?: Uint8Array;
            timestamp?: cockroach.util.hlc.Timestamp$Properties;
            priority?: number;
        };

        /**
         * Constructs a new AbortCacheEntry.
         * @exports cockroach.roachpb.AbortCacheEntry
         * @constructor
         * @param {cockroach.roachpb.AbortCacheEntry$Properties=} [properties] Properties to set
         */
        class AbortCacheEntry {

            /**
             * Constructs a new AbortCacheEntry.
             * @exports cockroach.roachpb.AbortCacheEntry
             * @constructor
             * @param {cockroach.roachpb.AbortCacheEntry$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.AbortCacheEntry$Properties);

            /**
             * AbortCacheEntry key.
             * @type {Uint8Array}
             */
            public key: Uint8Array;

            /**
             * AbortCacheEntry timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * AbortCacheEntry priority.
             * @type {number}
             */
            public priority: number;

            /**
             * Creates a new AbortCacheEntry instance using the specified properties.
             * @param {cockroach.roachpb.AbortCacheEntry$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.AbortCacheEntry} AbortCacheEntry instance
             */
            public static create(properties?: cockroach.roachpb.AbortCacheEntry$Properties): cockroach.roachpb.AbortCacheEntry;

            /**
             * Encodes the specified AbortCacheEntry message. Does not implicitly {@link cockroach.roachpb.AbortCacheEntry.verify|verify} messages.
             * @param {cockroach.roachpb.AbortCacheEntry$Properties} message AbortCacheEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.AbortCacheEntry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified AbortCacheEntry message, length delimited. Does not implicitly {@link cockroach.roachpb.AbortCacheEntry.verify|verify} messages.
             * @param {cockroach.roachpb.AbortCacheEntry$Properties} message AbortCacheEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.AbortCacheEntry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an AbortCacheEntry message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.AbortCacheEntry} AbortCacheEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.AbortCacheEntry;

            /**
             * Decodes an AbortCacheEntry message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.AbortCacheEntry} AbortCacheEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.AbortCacheEntry;

            /**
             * Verifies an AbortCacheEntry message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an AbortCacheEntry message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.AbortCacheEntry} AbortCacheEntry
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.AbortCacheEntry;

            /**
             * Creates an AbortCacheEntry message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.AbortCacheEntry.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.AbortCacheEntry} AbortCacheEntry
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.AbortCacheEntry;

            /**
             * Creates a plain object from an AbortCacheEntry message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.AbortCacheEntry} message AbortCacheEntry
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.AbortCacheEntry, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this AbortCacheEntry message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this AbortCacheEntry to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Attributes$Properties = {
            attrs?: string[];
        };

        /**
         * Constructs a new Attributes.
         * @exports cockroach.roachpb.Attributes
         * @constructor
         * @param {cockroach.roachpb.Attributes$Properties=} [properties] Properties to set
         */
        class Attributes {

            /**
             * Constructs a new Attributes.
             * @exports cockroach.roachpb.Attributes
             * @constructor
             * @param {cockroach.roachpb.Attributes$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Attributes$Properties);

            /**
             * Attributes attrs.
             * @type {Array.<string>}
             */
            public attrs: string[];

            /**
             * Creates a new Attributes instance using the specified properties.
             * @param {cockroach.roachpb.Attributes$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Attributes} Attributes instance
             */
            public static create(properties?: cockroach.roachpb.Attributes$Properties): cockroach.roachpb.Attributes;

            /**
             * Encodes the specified Attributes message. Does not implicitly {@link cockroach.roachpb.Attributes.verify|verify} messages.
             * @param {cockroach.roachpb.Attributes$Properties} message Attributes message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Attributes$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Attributes message, length delimited. Does not implicitly {@link cockroach.roachpb.Attributes.verify|verify} messages.
             * @param {cockroach.roachpb.Attributes$Properties} message Attributes message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Attributes$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Attributes message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Attributes} Attributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Attributes;

            /**
             * Decodes an Attributes message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Attributes} Attributes
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Attributes;

            /**
             * Verifies an Attributes message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an Attributes message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Attributes} Attributes
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Attributes;

            /**
             * Creates an Attributes message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Attributes.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Attributes} Attributes
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Attributes;

            /**
             * Creates a plain object from an Attributes message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Attributes} message Attributes
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Attributes, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Attributes message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Attributes to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ReplicationTarget$Properties = {
            node_id?: number;
            store_id?: number;
        };

        /**
         * Constructs a new ReplicationTarget.
         * @exports cockroach.roachpb.ReplicationTarget
         * @constructor
         * @param {cockroach.roachpb.ReplicationTarget$Properties=} [properties] Properties to set
         */
        class ReplicationTarget {

            /**
             * Constructs a new ReplicationTarget.
             * @exports cockroach.roachpb.ReplicationTarget
             * @constructor
             * @param {cockroach.roachpb.ReplicationTarget$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ReplicationTarget$Properties);

            /**
             * ReplicationTarget node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * ReplicationTarget store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * Creates a new ReplicationTarget instance using the specified properties.
             * @param {cockroach.roachpb.ReplicationTarget$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ReplicationTarget} ReplicationTarget instance
             */
            public static create(properties?: cockroach.roachpb.ReplicationTarget$Properties): cockroach.roachpb.ReplicationTarget;

            /**
             * Encodes the specified ReplicationTarget message. Does not implicitly {@link cockroach.roachpb.ReplicationTarget.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicationTarget$Properties} message ReplicationTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ReplicationTarget$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicationTarget message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicationTarget.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicationTarget$Properties} message ReplicationTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ReplicationTarget$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicationTarget message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ReplicationTarget} ReplicationTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicationTarget;

            /**
             * Decodes a ReplicationTarget message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ReplicationTarget} ReplicationTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicationTarget;

            /**
             * Verifies a ReplicationTarget message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ReplicationTarget message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicationTarget} ReplicationTarget
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicationTarget;

            /**
             * Creates a ReplicationTarget message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ReplicationTarget.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicationTarget} ReplicationTarget
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ReplicationTarget;

            /**
             * Creates a plain object from a ReplicationTarget message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ReplicationTarget} message ReplicationTarget
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicationTarget, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ReplicationTarget message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicationTarget to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ReplicaDescriptor$Properties = {
            node_id?: number;
            store_id?: number;
            replica_id?: number;
        };

        /**
         * Constructs a new ReplicaDescriptor.
         * @exports cockroach.roachpb.ReplicaDescriptor
         * @constructor
         * @param {cockroach.roachpb.ReplicaDescriptor$Properties=} [properties] Properties to set
         */
        class ReplicaDescriptor {

            /**
             * Constructs a new ReplicaDescriptor.
             * @exports cockroach.roachpb.ReplicaDescriptor
             * @constructor
             * @param {cockroach.roachpb.ReplicaDescriptor$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ReplicaDescriptor$Properties);

            /**
             * ReplicaDescriptor node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * ReplicaDescriptor store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * ReplicaDescriptor replica_id.
             * @type {number}
             */
            public replica_id: number;

            /**
             * Creates a new ReplicaDescriptor instance using the specified properties.
             * @param {cockroach.roachpb.ReplicaDescriptor$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ReplicaDescriptor} ReplicaDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.ReplicaDescriptor$Properties): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Encodes the specified ReplicaDescriptor message. Does not implicitly {@link cockroach.roachpb.ReplicaDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicaDescriptor$Properties} message ReplicaDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ReplicaDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicaDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicaDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicaDescriptor$Properties} message ReplicaDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ReplicaDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicaDescriptor message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ReplicaDescriptor} ReplicaDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Decodes a ReplicaDescriptor message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ReplicaDescriptor} ReplicaDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Verifies a ReplicaDescriptor message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ReplicaDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicaDescriptor} ReplicaDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Creates a ReplicaDescriptor message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ReplicaDescriptor.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicaDescriptor} ReplicaDescriptor
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ReplicaDescriptor;

            /**
             * Creates a plain object from a ReplicaDescriptor message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ReplicaDescriptor} message ReplicaDescriptor
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicaDescriptor, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ReplicaDescriptor message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicaDescriptor to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ReplicaIdent$Properties = {
            range_id?: Long;
            replica?: cockroach.roachpb.ReplicaDescriptor$Properties;
        };

        /**
         * Constructs a new ReplicaIdent.
         * @exports cockroach.roachpb.ReplicaIdent
         * @constructor
         * @param {cockroach.roachpb.ReplicaIdent$Properties=} [properties] Properties to set
         */
        class ReplicaIdent {

            /**
             * Constructs a new ReplicaIdent.
             * @exports cockroach.roachpb.ReplicaIdent
             * @constructor
             * @param {cockroach.roachpb.ReplicaIdent$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.ReplicaIdent$Properties);

            /**
             * ReplicaIdent range_id.
             * @type {Long}
             */
            public range_id: Long;

            /**
             * ReplicaIdent replica.
             * @type {(cockroach.roachpb.ReplicaDescriptor$Properties|null)}
             */
            public replica: (cockroach.roachpb.ReplicaDescriptor$Properties|null);

            /**
             * Creates a new ReplicaIdent instance using the specified properties.
             * @param {cockroach.roachpb.ReplicaIdent$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.ReplicaIdent} ReplicaIdent instance
             */
            public static create(properties?: cockroach.roachpb.ReplicaIdent$Properties): cockroach.roachpb.ReplicaIdent;

            /**
             * Encodes the specified ReplicaIdent message. Does not implicitly {@link cockroach.roachpb.ReplicaIdent.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicaIdent$Properties} message ReplicaIdent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.ReplicaIdent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ReplicaIdent message, length delimited. Does not implicitly {@link cockroach.roachpb.ReplicaIdent.verify|verify} messages.
             * @param {cockroach.roachpb.ReplicaIdent$Properties} message ReplicaIdent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.ReplicaIdent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ReplicaIdent message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.ReplicaIdent} ReplicaIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.ReplicaIdent;

            /**
             * Decodes a ReplicaIdent message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.ReplicaIdent} ReplicaIdent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.ReplicaIdent;

            /**
             * Verifies a ReplicaIdent message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ReplicaIdent message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicaIdent} ReplicaIdent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.ReplicaIdent;

            /**
             * Creates a ReplicaIdent message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.ReplicaIdent.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.ReplicaIdent} ReplicaIdent
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.ReplicaIdent;

            /**
             * Creates a plain object from a ReplicaIdent message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.ReplicaIdent} message ReplicaIdent
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.ReplicaIdent, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ReplicaIdent message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ReplicaIdent to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type RangeDescriptor$Properties = {
            range_id?: Long;
            start_key?: Uint8Array;
            end_key?: Uint8Array;
            replicas?: cockroach.roachpb.ReplicaDescriptor$Properties[];
            next_replica_id?: number;
        };

        /**
         * Constructs a new RangeDescriptor.
         * @exports cockroach.roachpb.RangeDescriptor
         * @constructor
         * @param {cockroach.roachpb.RangeDescriptor$Properties=} [properties] Properties to set
         */
        class RangeDescriptor {

            /**
             * Constructs a new RangeDescriptor.
             * @exports cockroach.roachpb.RangeDescriptor
             * @constructor
             * @param {cockroach.roachpb.RangeDescriptor$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.RangeDescriptor$Properties);

            /**
             * RangeDescriptor range_id.
             * @type {Long}
             */
            public range_id: Long;

            /**
             * RangeDescriptor start_key.
             * @type {Uint8Array}
             */
            public start_key: Uint8Array;

            /**
             * RangeDescriptor end_key.
             * @type {Uint8Array}
             */
            public end_key: Uint8Array;

            /**
             * RangeDescriptor replicas.
             * @type {Array.<cockroach.roachpb.ReplicaDescriptor$Properties>}
             */
            public replicas: cockroach.roachpb.ReplicaDescriptor$Properties[];

            /**
             * RangeDescriptor next_replica_id.
             * @type {number}
             */
            public next_replica_id: number;

            /**
             * Creates a new RangeDescriptor instance using the specified properties.
             * @param {cockroach.roachpb.RangeDescriptor$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.RangeDescriptor} RangeDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.RangeDescriptor$Properties): cockroach.roachpb.RangeDescriptor;

            /**
             * Encodes the specified RangeDescriptor message. Does not implicitly {@link cockroach.roachpb.RangeDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.RangeDescriptor$Properties} message RangeDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.RangeDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RangeDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.RangeDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.RangeDescriptor$Properties} message RangeDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.RangeDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RangeDescriptor message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.RangeDescriptor} RangeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RangeDescriptor;

            /**
             * Decodes a RangeDescriptor message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.RangeDescriptor} RangeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RangeDescriptor;

            /**
             * Verifies a RangeDescriptor message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a RangeDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RangeDescriptor} RangeDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RangeDescriptor;

            /**
             * Creates a RangeDescriptor message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.RangeDescriptor.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RangeDescriptor} RangeDescriptor
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.RangeDescriptor;

            /**
             * Creates a plain object from a RangeDescriptor message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.RangeDescriptor} message RangeDescriptor
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.RangeDescriptor, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this RangeDescriptor message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this RangeDescriptor to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type StoreCapacity$Properties = {
            capacity?: Long;
            available?: Long;
            range_count?: number;
            lease_count?: number;
            writes_per_second?: number;
        };

        /**
         * Constructs a new StoreCapacity.
         * @exports cockroach.roachpb.StoreCapacity
         * @constructor
         * @param {cockroach.roachpb.StoreCapacity$Properties=} [properties] Properties to set
         */
        class StoreCapacity {

            /**
             * Constructs a new StoreCapacity.
             * @exports cockroach.roachpb.StoreCapacity
             * @constructor
             * @param {cockroach.roachpb.StoreCapacity$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.StoreCapacity$Properties);

            /**
             * StoreCapacity capacity.
             * @type {Long}
             */
            public capacity: Long;

            /**
             * StoreCapacity available.
             * @type {Long}
             */
            public available: Long;

            /**
             * StoreCapacity range_count.
             * @type {number}
             */
            public range_count: number;

            /**
             * StoreCapacity lease_count.
             * @type {number}
             */
            public lease_count: number;

            /**
             * StoreCapacity writes_per_second.
             * @type {number}
             */
            public writes_per_second: number;

            /**
             * Creates a new StoreCapacity instance using the specified properties.
             * @param {cockroach.roachpb.StoreCapacity$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.StoreCapacity} StoreCapacity instance
             */
            public static create(properties?: cockroach.roachpb.StoreCapacity$Properties): cockroach.roachpb.StoreCapacity;

            /**
             * Encodes the specified StoreCapacity message. Does not implicitly {@link cockroach.roachpb.StoreCapacity.verify|verify} messages.
             * @param {cockroach.roachpb.StoreCapacity$Properties} message StoreCapacity message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.StoreCapacity$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreCapacity message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreCapacity.verify|verify} messages.
             * @param {cockroach.roachpb.StoreCapacity$Properties} message StoreCapacity message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.StoreCapacity$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreCapacity message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.StoreCapacity} StoreCapacity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreCapacity;

            /**
             * Decodes a StoreCapacity message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.StoreCapacity} StoreCapacity
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreCapacity;

            /**
             * Verifies a StoreCapacity message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a StoreCapacity message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreCapacity} StoreCapacity
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreCapacity;

            /**
             * Creates a StoreCapacity message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.StoreCapacity.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreCapacity} StoreCapacity
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.StoreCapacity;

            /**
             * Creates a plain object from a StoreCapacity message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.StoreCapacity} message StoreCapacity
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreCapacity, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this StoreCapacity message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreCapacity to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type NodeDescriptor$Properties = {
            node_id?: number;
            address?: cockroach.util.UnresolvedAddr$Properties;
            attrs?: cockroach.roachpb.Attributes$Properties;
            locality?: cockroach.roachpb.Locality$Properties;
            server_version?: cockroach.roachpb.Version$Properties;
        };

        /**
         * Constructs a new NodeDescriptor.
         * @exports cockroach.roachpb.NodeDescriptor
         * @constructor
         * @param {cockroach.roachpb.NodeDescriptor$Properties=} [properties] Properties to set
         */
        class NodeDescriptor {

            /**
             * Constructs a new NodeDescriptor.
             * @exports cockroach.roachpb.NodeDescriptor
             * @constructor
             * @param {cockroach.roachpb.NodeDescriptor$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.NodeDescriptor$Properties);

            /**
             * NodeDescriptor node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * NodeDescriptor address.
             * @type {(cockroach.util.UnresolvedAddr$Properties|null)}
             */
            public address: (cockroach.util.UnresolvedAddr$Properties|null);

            /**
             * NodeDescriptor attrs.
             * @type {(cockroach.roachpb.Attributes$Properties|null)}
             */
            public attrs: (cockroach.roachpb.Attributes$Properties|null);

            /**
             * NodeDescriptor locality.
             * @type {(cockroach.roachpb.Locality$Properties|null)}
             */
            public locality: (cockroach.roachpb.Locality$Properties|null);

            /**
             * NodeDescriptor server_version.
             * @type {(cockroach.roachpb.Version$Properties|null)}
             */
            public server_version: (cockroach.roachpb.Version$Properties|null);

            /**
             * Creates a new NodeDescriptor instance using the specified properties.
             * @param {cockroach.roachpb.NodeDescriptor$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.NodeDescriptor} NodeDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.NodeDescriptor$Properties): cockroach.roachpb.NodeDescriptor;

            /**
             * Encodes the specified NodeDescriptor message. Does not implicitly {@link cockroach.roachpb.NodeDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.NodeDescriptor$Properties} message NodeDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.NodeDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified NodeDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.NodeDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.NodeDescriptor$Properties} message NodeDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.NodeDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a NodeDescriptor message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.NodeDescriptor} NodeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.NodeDescriptor;

            /**
             * Decodes a NodeDescriptor message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.NodeDescriptor} NodeDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.NodeDescriptor;

            /**
             * Verifies a NodeDescriptor message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a NodeDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.NodeDescriptor} NodeDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.NodeDescriptor;

            /**
             * Creates a NodeDescriptor message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.NodeDescriptor.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.NodeDescriptor} NodeDescriptor
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.NodeDescriptor;

            /**
             * Creates a plain object from a NodeDescriptor message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.NodeDescriptor} message NodeDescriptor
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.NodeDescriptor, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this NodeDescriptor message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this NodeDescriptor to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type StoreDescriptor$Properties = {
            store_id?: number;
            attrs?: cockroach.roachpb.Attributes$Properties;
            node?: cockroach.roachpb.NodeDescriptor$Properties;
            capacity?: cockroach.roachpb.StoreCapacity$Properties;
        };

        /**
         * Constructs a new StoreDescriptor.
         * @exports cockroach.roachpb.StoreDescriptor
         * @constructor
         * @param {cockroach.roachpb.StoreDescriptor$Properties=} [properties] Properties to set
         */
        class StoreDescriptor {

            /**
             * Constructs a new StoreDescriptor.
             * @exports cockroach.roachpb.StoreDescriptor
             * @constructor
             * @param {cockroach.roachpb.StoreDescriptor$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.StoreDescriptor$Properties);

            /**
             * StoreDescriptor store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * StoreDescriptor attrs.
             * @type {(cockroach.roachpb.Attributes$Properties|null)}
             */
            public attrs: (cockroach.roachpb.Attributes$Properties|null);

            /**
             * StoreDescriptor node.
             * @type {(cockroach.roachpb.NodeDescriptor$Properties|null)}
             */
            public node: (cockroach.roachpb.NodeDescriptor$Properties|null);

            /**
             * StoreDescriptor capacity.
             * @type {(cockroach.roachpb.StoreCapacity$Properties|null)}
             */
            public capacity: (cockroach.roachpb.StoreCapacity$Properties|null);

            /**
             * Creates a new StoreDescriptor instance using the specified properties.
             * @param {cockroach.roachpb.StoreDescriptor$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.StoreDescriptor} StoreDescriptor instance
             */
            public static create(properties?: cockroach.roachpb.StoreDescriptor$Properties): cockroach.roachpb.StoreDescriptor;

            /**
             * Encodes the specified StoreDescriptor message. Does not implicitly {@link cockroach.roachpb.StoreDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.StoreDescriptor$Properties} message StoreDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.StoreDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreDescriptor message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreDescriptor.verify|verify} messages.
             * @param {cockroach.roachpb.StoreDescriptor$Properties} message StoreDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.StoreDescriptor$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreDescriptor message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.StoreDescriptor} StoreDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreDescriptor;

            /**
             * Decodes a StoreDescriptor message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.StoreDescriptor} StoreDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreDescriptor;

            /**
             * Verifies a StoreDescriptor message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a StoreDescriptor message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreDescriptor} StoreDescriptor
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreDescriptor;

            /**
             * Creates a StoreDescriptor message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.StoreDescriptor.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreDescriptor} StoreDescriptor
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.StoreDescriptor;

            /**
             * Creates a plain object from a StoreDescriptor message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.StoreDescriptor} message StoreDescriptor
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreDescriptor, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this StoreDescriptor message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreDescriptor to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type StoreDeadReplicas$Properties = {
            store_id?: number;
            replicas?: cockroach.roachpb.ReplicaIdent$Properties[];
        };

        /**
         * Constructs a new StoreDeadReplicas.
         * @exports cockroach.roachpb.StoreDeadReplicas
         * @constructor
         * @param {cockroach.roachpb.StoreDeadReplicas$Properties=} [properties] Properties to set
         */
        class StoreDeadReplicas {

            /**
             * Constructs a new StoreDeadReplicas.
             * @exports cockroach.roachpb.StoreDeadReplicas
             * @constructor
             * @param {cockroach.roachpb.StoreDeadReplicas$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.StoreDeadReplicas$Properties);

            /**
             * StoreDeadReplicas store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * StoreDeadReplicas replicas.
             * @type {Array.<cockroach.roachpb.ReplicaIdent$Properties>}
             */
            public replicas: cockroach.roachpb.ReplicaIdent$Properties[];

            /**
             * Creates a new StoreDeadReplicas instance using the specified properties.
             * @param {cockroach.roachpb.StoreDeadReplicas$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.StoreDeadReplicas} StoreDeadReplicas instance
             */
            public static create(properties?: cockroach.roachpb.StoreDeadReplicas$Properties): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Encodes the specified StoreDeadReplicas message. Does not implicitly {@link cockroach.roachpb.StoreDeadReplicas.verify|verify} messages.
             * @param {cockroach.roachpb.StoreDeadReplicas$Properties} message StoreDeadReplicas message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.StoreDeadReplicas$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified StoreDeadReplicas message, length delimited. Does not implicitly {@link cockroach.roachpb.StoreDeadReplicas.verify|verify} messages.
             * @param {cockroach.roachpb.StoreDeadReplicas$Properties} message StoreDeadReplicas message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.StoreDeadReplicas$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a StoreDeadReplicas message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.StoreDeadReplicas} StoreDeadReplicas
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Decodes a StoreDeadReplicas message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.StoreDeadReplicas} StoreDeadReplicas
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Verifies a StoreDeadReplicas message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a StoreDeadReplicas message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreDeadReplicas} StoreDeadReplicas
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Creates a StoreDeadReplicas message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.StoreDeadReplicas.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.StoreDeadReplicas} StoreDeadReplicas
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.StoreDeadReplicas;

            /**
             * Creates a plain object from a StoreDeadReplicas message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.StoreDeadReplicas} message StoreDeadReplicas
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.StoreDeadReplicas, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this StoreDeadReplicas message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this StoreDeadReplicas to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Locality$Properties = {
            tiers?: cockroach.roachpb.Tier$Properties[];
        };

        /**
         * Constructs a new Locality.
         * @exports cockroach.roachpb.Locality
         * @constructor
         * @param {cockroach.roachpb.Locality$Properties=} [properties] Properties to set
         */
        class Locality {

            /**
             * Constructs a new Locality.
             * @exports cockroach.roachpb.Locality
             * @constructor
             * @param {cockroach.roachpb.Locality$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Locality$Properties);

            /**
             * Locality tiers.
             * @type {Array.<cockroach.roachpb.Tier$Properties>}
             */
            public tiers: cockroach.roachpb.Tier$Properties[];

            /**
             * Creates a new Locality instance using the specified properties.
             * @param {cockroach.roachpb.Locality$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Locality} Locality instance
             */
            public static create(properties?: cockroach.roachpb.Locality$Properties): cockroach.roachpb.Locality;

            /**
             * Encodes the specified Locality message. Does not implicitly {@link cockroach.roachpb.Locality.verify|verify} messages.
             * @param {cockroach.roachpb.Locality$Properties} message Locality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Locality$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Locality message, length delimited. Does not implicitly {@link cockroach.roachpb.Locality.verify|verify} messages.
             * @param {cockroach.roachpb.Locality$Properties} message Locality message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Locality$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Locality message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Locality} Locality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Locality;

            /**
             * Decodes a Locality message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Locality} Locality
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Locality;

            /**
             * Verifies a Locality message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Locality message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Locality} Locality
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Locality;

            /**
             * Creates a Locality message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Locality.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Locality} Locality
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Locality;

            /**
             * Creates a plain object from a Locality message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Locality} message Locality
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Locality, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Locality message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Locality to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Tier$Properties = {
            key?: string;
            value?: string;
        };

        /**
         * Constructs a new Tier.
         * @exports cockroach.roachpb.Tier
         * @constructor
         * @param {cockroach.roachpb.Tier$Properties=} [properties] Properties to set
         */
        class Tier {

            /**
             * Constructs a new Tier.
             * @exports cockroach.roachpb.Tier
             * @constructor
             * @param {cockroach.roachpb.Tier$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Tier$Properties);

            /**
             * Tier key.
             * @type {string}
             */
            public key: string;

            /**
             * Tier value.
             * @type {string}
             */
            public value: string;

            /**
             * Creates a new Tier instance using the specified properties.
             * @param {cockroach.roachpb.Tier$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Tier} Tier instance
             */
            public static create(properties?: cockroach.roachpb.Tier$Properties): cockroach.roachpb.Tier;

            /**
             * Encodes the specified Tier message. Does not implicitly {@link cockroach.roachpb.Tier.verify|verify} messages.
             * @param {cockroach.roachpb.Tier$Properties} message Tier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Tier$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Tier message, length delimited. Does not implicitly {@link cockroach.roachpb.Tier.verify|verify} messages.
             * @param {cockroach.roachpb.Tier$Properties} message Tier message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Tier$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Tier message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Tier} Tier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Tier;

            /**
             * Decodes a Tier message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Tier} Tier
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Tier;

            /**
             * Verifies a Tier message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Tier message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Tier} Tier
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Tier;

            /**
             * Creates a Tier message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Tier.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Tier} Tier
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Tier;

            /**
             * Creates a plain object from a Tier message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Tier} message Tier
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Tier, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Tier message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Tier to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Version$Properties = {
            major?: number;
            minor?: number;
            patch?: number;
            unstable?: number;
        };

        /**
         * Constructs a new Version.
         * @exports cockroach.roachpb.Version
         * @constructor
         * @param {cockroach.roachpb.Version$Properties=} [properties] Properties to set
         */
        class Version {

            /**
             * Constructs a new Version.
             * @exports cockroach.roachpb.Version
             * @constructor
             * @param {cockroach.roachpb.Version$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.Version$Properties);

            /**
             * Version major.
             * @type {number}
             */
            public major: number;

            /**
             * Version minor.
             * @type {number}
             */
            public minor: number;

            /**
             * Version patch.
             * @type {number}
             */
            public patch: number;

            /**
             * Version unstable.
             * @type {number}
             */
            public unstable: number;

            /**
             * Creates a new Version instance using the specified properties.
             * @param {cockroach.roachpb.Version$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.Version} Version instance
             */
            public static create(properties?: cockroach.roachpb.Version$Properties): cockroach.roachpb.Version;

            /**
             * Encodes the specified Version message. Does not implicitly {@link cockroach.roachpb.Version.verify|verify} messages.
             * @param {cockroach.roachpb.Version$Properties} message Version message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.Version$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Version message, length delimited. Does not implicitly {@link cockroach.roachpb.Version.verify|verify} messages.
             * @param {cockroach.roachpb.Version$Properties} message Version message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.Version$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Version message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.Version} Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.Version;

            /**
             * Decodes a Version message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.Version} Version
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.Version;

            /**
             * Verifies a Version message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Version} Version
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.Version;

            /**
             * Creates a Version message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.Version.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.Version} Version
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.Version;

            /**
             * Creates a plain object from a Version message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.Version} message Version
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.Version, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Version message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Version to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type RaftTruncatedState$Properties = {
            index?: Long;
            term?: Long;
        };

        /**
         * Constructs a new RaftTruncatedState.
         * @exports cockroach.roachpb.RaftTruncatedState
         * @constructor
         * @param {cockroach.roachpb.RaftTruncatedState$Properties=} [properties] Properties to set
         */
        class RaftTruncatedState {

            /**
             * Constructs a new RaftTruncatedState.
             * @exports cockroach.roachpb.RaftTruncatedState
             * @constructor
             * @param {cockroach.roachpb.RaftTruncatedState$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.RaftTruncatedState$Properties);

            /**
             * RaftTruncatedState index.
             * @type {Long}
             */
            public index: Long;

            /**
             * RaftTruncatedState term.
             * @type {Long}
             */
            public term: Long;

            /**
             * Creates a new RaftTruncatedState instance using the specified properties.
             * @param {cockroach.roachpb.RaftTruncatedState$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.RaftTruncatedState} RaftTruncatedState instance
             */
            public static create(properties?: cockroach.roachpb.RaftTruncatedState$Properties): cockroach.roachpb.RaftTruncatedState;

            /**
             * Encodes the specified RaftTruncatedState message. Does not implicitly {@link cockroach.roachpb.RaftTruncatedState.verify|verify} messages.
             * @param {cockroach.roachpb.RaftTruncatedState$Properties} message RaftTruncatedState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.RaftTruncatedState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftTruncatedState message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftTruncatedState.verify|verify} messages.
             * @param {cockroach.roachpb.RaftTruncatedState$Properties} message RaftTruncatedState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.RaftTruncatedState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftTruncatedState message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.RaftTruncatedState} RaftTruncatedState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftTruncatedState;

            /**
             * Decodes a RaftTruncatedState message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.RaftTruncatedState} RaftTruncatedState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftTruncatedState;

            /**
             * Verifies a RaftTruncatedState message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a RaftTruncatedState message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftTruncatedState} RaftTruncatedState
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftTruncatedState;

            /**
             * Creates a RaftTruncatedState message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.RaftTruncatedState.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftTruncatedState} RaftTruncatedState
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.RaftTruncatedState;

            /**
             * Creates a plain object from a RaftTruncatedState message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.RaftTruncatedState} message RaftTruncatedState
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftTruncatedState, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this RaftTruncatedState message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftTruncatedState to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type RaftTombstone$Properties = {
            next_replica_id?: number;
        };

        /**
         * Constructs a new RaftTombstone.
         * @exports cockroach.roachpb.RaftTombstone
         * @constructor
         * @param {cockroach.roachpb.RaftTombstone$Properties=} [properties] Properties to set
         */
        class RaftTombstone {

            /**
             * Constructs a new RaftTombstone.
             * @exports cockroach.roachpb.RaftTombstone
             * @constructor
             * @param {cockroach.roachpb.RaftTombstone$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.RaftTombstone$Properties);

            /**
             * RaftTombstone next_replica_id.
             * @type {number}
             */
            public next_replica_id: number;

            /**
             * Creates a new RaftTombstone instance using the specified properties.
             * @param {cockroach.roachpb.RaftTombstone$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.RaftTombstone} RaftTombstone instance
             */
            public static create(properties?: cockroach.roachpb.RaftTombstone$Properties): cockroach.roachpb.RaftTombstone;

            /**
             * Encodes the specified RaftTombstone message. Does not implicitly {@link cockroach.roachpb.RaftTombstone.verify|verify} messages.
             * @param {cockroach.roachpb.RaftTombstone$Properties} message RaftTombstone message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.RaftTombstone$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftTombstone message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftTombstone.verify|verify} messages.
             * @param {cockroach.roachpb.RaftTombstone$Properties} message RaftTombstone message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.RaftTombstone$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftTombstone message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.RaftTombstone} RaftTombstone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftTombstone;

            /**
             * Decodes a RaftTombstone message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.RaftTombstone} RaftTombstone
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftTombstone;

            /**
             * Verifies a RaftTombstone message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a RaftTombstone message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftTombstone} RaftTombstone
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftTombstone;

            /**
             * Creates a RaftTombstone message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.RaftTombstone.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftTombstone} RaftTombstone
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.RaftTombstone;

            /**
             * Creates a plain object from a RaftTombstone message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.RaftTombstone} message RaftTombstone
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftTombstone, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this RaftTombstone message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftTombstone to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type RaftSnapshotData$Properties = {
            range_descriptor?: cockroach.roachpb.RangeDescriptor$Properties;
            KV?: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties[];
            log_entries?: Uint8Array[];
        };

        /**
         * Constructs a new RaftSnapshotData.
         * @exports cockroach.roachpb.RaftSnapshotData
         * @constructor
         * @param {cockroach.roachpb.RaftSnapshotData$Properties=} [properties] Properties to set
         */
        class RaftSnapshotData {

            /**
             * Constructs a new RaftSnapshotData.
             * @exports cockroach.roachpb.RaftSnapshotData
             * @constructor
             * @param {cockroach.roachpb.RaftSnapshotData$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.roachpb.RaftSnapshotData$Properties);

            /**
             * RaftSnapshotData range_descriptor.
             * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
             */
            public range_descriptor: (cockroach.roachpb.RangeDescriptor$Properties|null);

            /**
             * RaftSnapshotData KV.
             * @type {Array.<cockroach.roachpb.RaftSnapshotData.KeyValue$Properties>}
             */
            public KV: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties[];

            /**
             * RaftSnapshotData log_entries.
             * @type {Array.<Uint8Array>}
             */
            public log_entries: Uint8Array[];

            /**
             * Creates a new RaftSnapshotData instance using the specified properties.
             * @param {cockroach.roachpb.RaftSnapshotData$Properties=} [properties] Properties to set
             * @returns {cockroach.roachpb.RaftSnapshotData} RaftSnapshotData instance
             */
            public static create(properties?: cockroach.roachpb.RaftSnapshotData$Properties): cockroach.roachpb.RaftSnapshotData;

            /**
             * Encodes the specified RaftSnapshotData message. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.verify|verify} messages.
             * @param {cockroach.roachpb.RaftSnapshotData$Properties} message RaftSnapshotData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.roachpb.RaftSnapshotData$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RaftSnapshotData message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.verify|verify} messages.
             * @param {cockroach.roachpb.RaftSnapshotData$Properties} message RaftSnapshotData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.roachpb.RaftSnapshotData$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RaftSnapshotData message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.roachpb.RaftSnapshotData} RaftSnapshotData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftSnapshotData;

            /**
             * Decodes a RaftSnapshotData message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.roachpb.RaftSnapshotData} RaftSnapshotData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftSnapshotData;

            /**
             * Verifies a RaftSnapshotData message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a RaftSnapshotData message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftSnapshotData} RaftSnapshotData
             */
            public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData;

            /**
             * Creates a RaftSnapshotData message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.roachpb.RaftSnapshotData.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.roachpb.RaftSnapshotData} RaftSnapshotData
             */
            public static from(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData;

            /**
             * Creates a plain object from a RaftSnapshotData message. Also converts values to other types if specified.
             * @param {cockroach.roachpb.RaftSnapshotData} message RaftSnapshotData
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.roachpb.RaftSnapshotData, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this RaftSnapshotData message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this RaftSnapshotData to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace RaftSnapshotData {

            type KeyValue$Properties = {
                key?: Uint8Array;
                value?: Uint8Array;
                timestamp?: cockroach.util.hlc.Timestamp$Properties;
            };

            /**
             * Constructs a new KeyValue.
             * @exports cockroach.roachpb.RaftSnapshotData.KeyValue
             * @constructor
             * @param {cockroach.roachpb.RaftSnapshotData.KeyValue$Properties=} [properties] Properties to set
             */
            class KeyValue {

                /**
                 * Constructs a new KeyValue.
                 * @exports cockroach.roachpb.RaftSnapshotData.KeyValue
                 * @constructor
                 * @param {cockroach.roachpb.RaftSnapshotData.KeyValue$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties);

                /**
                 * KeyValue key.
                 * @type {Uint8Array}
                 */
                public key: Uint8Array;

                /**
                 * KeyValue value.
                 * @type {Uint8Array}
                 */
                public value: Uint8Array;

                /**
                 * KeyValue timestamp.
                 * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                 */
                public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

                /**
                 * Creates a new KeyValue instance using the specified properties.
                 * @param {cockroach.roachpb.RaftSnapshotData.KeyValue$Properties=} [properties] Properties to set
                 * @returns {cockroach.roachpb.RaftSnapshotData.KeyValue} KeyValue instance
                 */
                public static create(properties?: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Encodes the specified KeyValue message. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.KeyValue.verify|verify} messages.
                 * @param {cockroach.roachpb.RaftSnapshotData.KeyValue$Properties} message KeyValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link cockroach.roachpb.RaftSnapshotData.KeyValue.verify|verify} messages.
                 * @param {cockroach.roachpb.RaftSnapshotData.KeyValue$Properties} message KeyValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.roachpb.RaftSnapshotData.KeyValue$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a KeyValue message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.roachpb.RaftSnapshotData.KeyValue} KeyValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Decodes a KeyValue message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.roachpb.RaftSnapshotData.KeyValue} KeyValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Verifies a KeyValue message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.roachpb.RaftSnapshotData.KeyValue} KeyValue
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.roachpb.RaftSnapshotData.KeyValue.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.roachpb.RaftSnapshotData.KeyValue} KeyValue
                 */
                public static from(object: { [k: string]: any }): cockroach.roachpb.RaftSnapshotData.KeyValue;

                /**
                 * Creates a plain object from a KeyValue message. Also converts values to other types if specified.
                 * @param {cockroach.roachpb.RaftSnapshotData.KeyValue} message KeyValue
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.roachpb.RaftSnapshotData.KeyValue, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this KeyValue message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this KeyValue to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /**
     * Namespace util.
     * @exports cockroach.util
     * @namespace
     */
    namespace util {

        type UnresolvedAddr$Properties = {
            network_field?: string;
            address_field?: string;
        };

        /**
         * Constructs a new UnresolvedAddr.
         * @exports cockroach.util.UnresolvedAddr
         * @constructor
         * @param {cockroach.util.UnresolvedAddr$Properties=} [properties] Properties to set
         */
        class UnresolvedAddr {

            /**
             * Constructs a new UnresolvedAddr.
             * @exports cockroach.util.UnresolvedAddr
             * @constructor
             * @param {cockroach.util.UnresolvedAddr$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.util.UnresolvedAddr$Properties);

            /**
             * UnresolvedAddr network_field.
             * @type {string}
             */
            public network_field: string;

            /**
             * UnresolvedAddr address_field.
             * @type {string}
             */
            public address_field: string;

            /**
             * Creates a new UnresolvedAddr instance using the specified properties.
             * @param {cockroach.util.UnresolvedAddr$Properties=} [properties] Properties to set
             * @returns {cockroach.util.UnresolvedAddr} UnresolvedAddr instance
             */
            public static create(properties?: cockroach.util.UnresolvedAddr$Properties): cockroach.util.UnresolvedAddr;

            /**
             * Encodes the specified UnresolvedAddr message. Does not implicitly {@link cockroach.util.UnresolvedAddr.verify|verify} messages.
             * @param {cockroach.util.UnresolvedAddr$Properties} message UnresolvedAddr message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.util.UnresolvedAddr$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UnresolvedAddr message, length delimited. Does not implicitly {@link cockroach.util.UnresolvedAddr.verify|verify} messages.
             * @param {cockroach.util.UnresolvedAddr$Properties} message UnresolvedAddr message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.util.UnresolvedAddr$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an UnresolvedAddr message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.util.UnresolvedAddr} UnresolvedAddr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.UnresolvedAddr;

            /**
             * Decodes an UnresolvedAddr message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.util.UnresolvedAddr} UnresolvedAddr
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.UnresolvedAddr;

            /**
             * Verifies an UnresolvedAddr message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an UnresolvedAddr message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.util.UnresolvedAddr} UnresolvedAddr
             */
            public static fromObject(object: { [k: string]: any }): cockroach.util.UnresolvedAddr;

            /**
             * Creates an UnresolvedAddr message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.util.UnresolvedAddr.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.util.UnresolvedAddr} UnresolvedAddr
             */
            public static from(object: { [k: string]: any }): cockroach.util.UnresolvedAddr;

            /**
             * Creates a plain object from an UnresolvedAddr message. Also converts values to other types if specified.
             * @param {cockroach.util.UnresolvedAddr} message UnresolvedAddr
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.util.UnresolvedAddr, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this UnresolvedAddr message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this UnresolvedAddr to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * Namespace hlc.
         * @exports cockroach.util.hlc
         * @namespace
         */
        namespace hlc {

            type Timestamp$Properties = {
                wall_time?: Long;
                logical?: number;
            };

            /**
             * Constructs a new Timestamp.
             * @exports cockroach.util.hlc.Timestamp
             * @constructor
             * @param {cockroach.util.hlc.Timestamp$Properties=} [properties] Properties to set
             */
            class Timestamp {

                /**
                 * Constructs a new Timestamp.
                 * @exports cockroach.util.hlc.Timestamp
                 * @constructor
                 * @param {cockroach.util.hlc.Timestamp$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.hlc.Timestamp$Properties);

                /**
                 * Timestamp wall_time.
                 * @type {Long}
                 */
                public wall_time: Long;

                /**
                 * Timestamp logical.
                 * @type {number}
                 */
                public logical: number;

                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @param {cockroach.util.hlc.Timestamp$Properties=} [properties] Properties to set
                 * @returns {cockroach.util.hlc.Timestamp} Timestamp instance
                 */
                public static create(properties?: cockroach.util.hlc.Timestamp$Properties): cockroach.util.hlc.Timestamp;

                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link cockroach.util.hlc.Timestamp.verify|verify} messages.
                 * @param {cockroach.util.hlc.Timestamp$Properties} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.util.hlc.Timestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link cockroach.util.hlc.Timestamp.verify|verify} messages.
                 * @param {cockroach.util.hlc.Timestamp$Properties} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.util.hlc.Timestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.util.hlc.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.hlc.Timestamp;

                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.util.hlc.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.hlc.Timestamp;

                /**
                 * Verifies a Timestamp message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.hlc.Timestamp} Timestamp
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.hlc.Timestamp;

                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.util.hlc.Timestamp.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.hlc.Timestamp} Timestamp
                 */
                public static from(object: { [k: string]: any }): cockroach.util.hlc.Timestamp;

                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @param {cockroach.util.hlc.Timestamp} message Timestamp
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.util.hlc.Timestamp, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Timestamp message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Timestamp to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /**
         * Namespace log.
         * @exports cockroach.util.log
         * @namespace
         */
        namespace log {

            /**
             * Severity enum.
             * @name Severity
             * @memberof cockroach.util.log
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} INFO=1 INFO value
             * @property {number} WARNING=2 WARNING value
             * @property {number} ERROR=3 ERROR value
             * @property {number} FATAL=4 FATAL value
             * @property {number} NONE=5 NONE value
             * @property {number} DEFAULT=6 DEFAULT value
             */
            enum Severity {
                UNKNOWN = 0,
                INFO = 1,
                WARNING = 2,
                ERROR = 3,
                FATAL = 4,
                NONE = 5,
                DEFAULT = 6
            }

            type Entry$Properties = {
                severity?: cockroach.util.log.Severity;
                time?: Long;
                goroutine?: Long;
                file?: string;
                line?: Long;
                message?: string;
            };

            /**
             * Constructs a new Entry.
             * @exports cockroach.util.log.Entry
             * @constructor
             * @param {cockroach.util.log.Entry$Properties=} [properties] Properties to set
             */
            class Entry {

                /**
                 * Constructs a new Entry.
                 * @exports cockroach.util.log.Entry
                 * @constructor
                 * @param {cockroach.util.log.Entry$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.Entry$Properties);

                /**
                 * Entry severity.
                 * @type {cockroach.util.log.Severity}
                 */
                public severity: cockroach.util.log.Severity;

                /**
                 * Entry time.
                 * @type {Long}
                 */
                public time: Long;

                /**
                 * Entry goroutine.
                 * @type {Long}
                 */
                public goroutine: Long;

                /**
                 * Entry file.
                 * @type {string}
                 */
                public file: string;

                /**
                 * Entry line.
                 * @type {Long}
                 */
                public line: Long;

                /**
                 * Entry message.
                 * @type {string}
                 */
                public message: string;

                /**
                 * Creates a new Entry instance using the specified properties.
                 * @param {cockroach.util.log.Entry$Properties=} [properties] Properties to set
                 * @returns {cockroach.util.log.Entry} Entry instance
                 */
                public static create(properties?: cockroach.util.log.Entry$Properties): cockroach.util.log.Entry;

                /**
                 * Encodes the specified Entry message. Does not implicitly {@link cockroach.util.log.Entry.verify|verify} messages.
                 * @param {cockroach.util.log.Entry$Properties} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.util.log.Entry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Entry message, length delimited. Does not implicitly {@link cockroach.util.log.Entry.verify|verify} messages.
                 * @param {cockroach.util.log.Entry$Properties} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.Entry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Entry message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.util.log.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.Entry;

                /**
                 * Decodes an Entry message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.util.log.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.Entry;

                /**
                 * Verifies an Entry message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.Entry} Entry
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.Entry;

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.util.log.Entry.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.Entry} Entry
                 */
                public static from(object: { [k: string]: any }): cockroach.util.log.Entry;

                /**
                 * Creates a plain object from an Entry message. Also converts values to other types if specified.
                 * @param {cockroach.util.log.Entry} message Entry
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.util.log.Entry, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Entry message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Entry to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type FileDetails$Properties = {
                program?: string;
                host?: string;
                user_name?: string;
                severity?: cockroach.util.log.Severity;
                time?: Long;
                pid?: Long;
            };

            /**
             * Constructs a new FileDetails.
             * @exports cockroach.util.log.FileDetails
             * @constructor
             * @param {cockroach.util.log.FileDetails$Properties=} [properties] Properties to set
             */
            class FileDetails {

                /**
                 * Constructs a new FileDetails.
                 * @exports cockroach.util.log.FileDetails
                 * @constructor
                 * @param {cockroach.util.log.FileDetails$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.FileDetails$Properties);

                /**
                 * FileDetails program.
                 * @type {string}
                 */
                public program: string;

                /**
                 * FileDetails host.
                 * @type {string}
                 */
                public host: string;

                /**
                 * FileDetails user_name.
                 * @type {string}
                 */
                public user_name: string;

                /**
                 * FileDetails severity.
                 * @type {cockroach.util.log.Severity}
                 */
                public severity: cockroach.util.log.Severity;

                /**
                 * FileDetails time.
                 * @type {Long}
                 */
                public time: Long;

                /**
                 * FileDetails pid.
                 * @type {Long}
                 */
                public pid: Long;

                /**
                 * Creates a new FileDetails instance using the specified properties.
                 * @param {cockroach.util.log.FileDetails$Properties=} [properties] Properties to set
                 * @returns {cockroach.util.log.FileDetails} FileDetails instance
                 */
                public static create(properties?: cockroach.util.log.FileDetails$Properties): cockroach.util.log.FileDetails;

                /**
                 * Encodes the specified FileDetails message. Does not implicitly {@link cockroach.util.log.FileDetails.verify|verify} messages.
                 * @param {cockroach.util.log.FileDetails$Properties} message FileDetails message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.util.log.FileDetails$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FileDetails message, length delimited. Does not implicitly {@link cockroach.util.log.FileDetails.verify|verify} messages.
                 * @param {cockroach.util.log.FileDetails$Properties} message FileDetails message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.FileDetails$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FileDetails message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.util.log.FileDetails} FileDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.FileDetails;

                /**
                 * Decodes a FileDetails message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.util.log.FileDetails} FileDetails
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.FileDetails;

                /**
                 * Verifies a FileDetails message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a FileDetails message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.FileDetails} FileDetails
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.FileDetails;

                /**
                 * Creates a FileDetails message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.util.log.FileDetails.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.FileDetails} FileDetails
                 */
                public static from(object: { [k: string]: any }): cockroach.util.log.FileDetails;

                /**
                 * Creates a plain object from a FileDetails message. Also converts values to other types if specified.
                 * @param {cockroach.util.log.FileDetails} message FileDetails
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.util.log.FileDetails, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this FileDetails message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this FileDetails to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type FileInfo$Properties = {
                name?: string;
                size_bytes?: Long;
                mod_time_nanos?: Long;
                details?: cockroach.util.log.FileDetails$Properties;
            };

            /**
             * Constructs a new FileInfo.
             * @exports cockroach.util.log.FileInfo
             * @constructor
             * @param {cockroach.util.log.FileInfo$Properties=} [properties] Properties to set
             */
            class FileInfo {

                /**
                 * Constructs a new FileInfo.
                 * @exports cockroach.util.log.FileInfo
                 * @constructor
                 * @param {cockroach.util.log.FileInfo$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.util.log.FileInfo$Properties);

                /**
                 * FileInfo name.
                 * @type {string}
                 */
                public name: string;

                /**
                 * FileInfo size_bytes.
                 * @type {Long}
                 */
                public size_bytes: Long;

                /**
                 * FileInfo mod_time_nanos.
                 * @type {Long}
                 */
                public mod_time_nanos: Long;

                /**
                 * FileInfo details.
                 * @type {(cockroach.util.log.FileDetails$Properties|null)}
                 */
                public details: (cockroach.util.log.FileDetails$Properties|null);

                /**
                 * Creates a new FileInfo instance using the specified properties.
                 * @param {cockroach.util.log.FileInfo$Properties=} [properties] Properties to set
                 * @returns {cockroach.util.log.FileInfo} FileInfo instance
                 */
                public static create(properties?: cockroach.util.log.FileInfo$Properties): cockroach.util.log.FileInfo;

                /**
                 * Encodes the specified FileInfo message. Does not implicitly {@link cockroach.util.log.FileInfo.verify|verify} messages.
                 * @param {cockroach.util.log.FileInfo$Properties} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.util.log.FileInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified FileInfo message, length delimited. Does not implicitly {@link cockroach.util.log.FileInfo.verify|verify} messages.
                 * @param {cockroach.util.log.FileInfo$Properties} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.util.log.FileInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a FileInfo message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.util.log.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.util.log.FileInfo;

                /**
                 * Decodes a FileInfo message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.util.log.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.util.log.FileInfo;

                /**
                 * Verifies a FileInfo message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a FileInfo message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.FileInfo} FileInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.util.log.FileInfo;

                /**
                 * Creates a FileInfo message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.util.log.FileInfo.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.util.log.FileInfo} FileInfo
                 */
                public static from(object: { [k: string]: any }): cockroach.util.log.FileInfo;

                /**
                 * Creates a plain object from a FileInfo message. Also converts values to other types if specified.
                 * @param {cockroach.util.log.FileInfo} message FileInfo
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.util.log.FileInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this FileInfo message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this FileInfo to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /**
     * Namespace storage.
     * @exports cockroach.storage
     * @namespace
     */
    namespace storage {

        /**
         * Namespace engine.
         * @exports cockroach.storage.engine
         * @namespace
         */
        namespace engine {

            /**
             * Namespace enginepb.
             * @exports cockroach.storage.engine.enginepb
             * @namespace
             */
            namespace enginepb {

                /**
                 * IsolationType enum.
                 * @name IsolationType
                 * @memberof cockroach.storage.engine.enginepb
                 * @enum {number}
                 * @property {number} SERIALIZABLE=0 SERIALIZABLE value
                 * @property {number} SNAPSHOT=1 SNAPSHOT value
                 */
                enum IsolationType {
                    SERIALIZABLE = 0,
                    SNAPSHOT = 1
                }

                type TxnMeta$Properties = {
                    id?: Uint8Array;
                    isolation?: cockroach.storage.engine.enginepb.IsolationType;
                    key?: Uint8Array;
                    epoch?: number;
                    timestamp?: cockroach.util.hlc.Timestamp$Properties;
                    priority?: number;
                    sequence?: number;
                    batch_index?: number;
                };

                /**
                 * Constructs a new TxnMeta.
                 * @exports cockroach.storage.engine.enginepb.TxnMeta
                 * @constructor
                 * @param {cockroach.storage.engine.enginepb.TxnMeta$Properties=} [properties] Properties to set
                 */
                class TxnMeta {

                    /**
                     * Constructs a new TxnMeta.
                     * @exports cockroach.storage.engine.enginepb.TxnMeta
                     * @constructor
                     * @param {cockroach.storage.engine.enginepb.TxnMeta$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.TxnMeta$Properties);

                    /**
                     * TxnMeta id.
                     * @type {Uint8Array}
                     */
                    public id: Uint8Array;

                    /**
                     * TxnMeta isolation.
                     * @type {cockroach.storage.engine.enginepb.IsolationType}
                     */
                    public isolation: cockroach.storage.engine.enginepb.IsolationType;

                    /**
                     * TxnMeta key.
                     * @type {Uint8Array}
                     */
                    public key: Uint8Array;

                    /**
                     * TxnMeta epoch.
                     * @type {number}
                     */
                    public epoch: number;

                    /**
                     * TxnMeta timestamp.
                     * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                     */
                    public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

                    /**
                     * TxnMeta priority.
                     * @type {number}
                     */
                    public priority: number;

                    /**
                     * TxnMeta sequence.
                     * @type {number}
                     */
                    public sequence: number;

                    /**
                     * TxnMeta batch_index.
                     * @type {number}
                     */
                    public batch_index: number;

                    /**
                     * Creates a new TxnMeta instance using the specified properties.
                     * @param {cockroach.storage.engine.enginepb.TxnMeta$Properties=} [properties] Properties to set
                     * @returns {cockroach.storage.engine.enginepb.TxnMeta} TxnMeta instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.TxnMeta$Properties): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Encodes the specified TxnMeta message. Does not implicitly {@link cockroach.storage.engine.enginepb.TxnMeta.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.TxnMeta$Properties} message TxnMeta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.TxnMeta$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified TxnMeta message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.TxnMeta.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.TxnMeta$Properties} message TxnMeta message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.TxnMeta$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a TxnMeta message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.storage.engine.enginepb.TxnMeta} TxnMeta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Decodes a TxnMeta message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.storage.engine.enginepb.TxnMeta} TxnMeta
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Verifies a TxnMeta message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a TxnMeta message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.TxnMeta} TxnMeta
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Creates a TxnMeta message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.storage.engine.enginepb.TxnMeta.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.TxnMeta} TxnMeta
                     */
                    public static from(object: { [k: string]: any }): cockroach.storage.engine.enginepb.TxnMeta;

                    /**
                     * Creates a plain object from a TxnMeta message. Also converts values to other types if specified.
                     * @param {cockroach.storage.engine.enginepb.TxnMeta} message TxnMeta
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.TxnMeta, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this TxnMeta message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this TxnMeta to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                type MVCCMetadata$Properties = {
                    txn?: cockroach.storage.engine.enginepb.TxnMeta$Properties;
                    timestamp?: cockroach.util.hlc.Timestamp$Properties;
                    deleted?: boolean;
                    key_bytes?: Long;
                    val_bytes?: Long;
                    raw_bytes?: Uint8Array;
                    merge_timestamp?: cockroach.util.hlc.Timestamp$Properties;
                };

                /**
                 * Constructs a new MVCCMetadata.
                 * @exports cockroach.storage.engine.enginepb.MVCCMetadata
                 * @constructor
                 * @param {cockroach.storage.engine.enginepb.MVCCMetadata$Properties=} [properties] Properties to set
                 */
                class MVCCMetadata {

                    /**
                     * Constructs a new MVCCMetadata.
                     * @exports cockroach.storage.engine.enginepb.MVCCMetadata
                     * @constructor
                     * @param {cockroach.storage.engine.enginepb.MVCCMetadata$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.MVCCMetadata$Properties);

                    /**
                     * MVCCMetadata txn.
                     * @type {(cockroach.storage.engine.enginepb.TxnMeta$Properties|null)}
                     */
                    public txn: (cockroach.storage.engine.enginepb.TxnMeta$Properties|null);

                    /**
                     * MVCCMetadata timestamp.
                     * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                     */
                    public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

                    /**
                     * MVCCMetadata deleted.
                     * @type {boolean}
                     */
                    public deleted: boolean;

                    /**
                     * MVCCMetadata key_bytes.
                     * @type {Long}
                     */
                    public key_bytes: Long;

                    /**
                     * MVCCMetadata val_bytes.
                     * @type {Long}
                     */
                    public val_bytes: Long;

                    /**
                     * MVCCMetadata raw_bytes.
                     * @type {Uint8Array}
                     */
                    public raw_bytes: Uint8Array;

                    /**
                     * MVCCMetadata merge_timestamp.
                     * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                     */
                    public merge_timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

                    /**
                     * Creates a new MVCCMetadata instance using the specified properties.
                     * @param {cockroach.storage.engine.enginepb.MVCCMetadata$Properties=} [properties] Properties to set
                     * @returns {cockroach.storage.engine.enginepb.MVCCMetadata} MVCCMetadata instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.MVCCMetadata$Properties): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Encodes the specified MVCCMetadata message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.MVCCMetadata$Properties} message MVCCMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.MVCCMetadata$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCMetadata message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCMetadata.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.MVCCMetadata$Properties} message MVCCMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.MVCCMetadata$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCMetadata message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.storage.engine.enginepb.MVCCMetadata} MVCCMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Decodes a MVCCMetadata message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.storage.engine.enginepb.MVCCMetadata} MVCCMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Verifies a MVCCMetadata message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a MVCCMetadata message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.MVCCMetadata} MVCCMetadata
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Creates a MVCCMetadata message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.storage.engine.enginepb.MVCCMetadata.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.MVCCMetadata} MVCCMetadata
                     */
                    public static from(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCMetadata;

                    /**
                     * Creates a plain object from a MVCCMetadata message. Also converts values to other types if specified.
                     * @param {cockroach.storage.engine.enginepb.MVCCMetadata} message MVCCMetadata
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCMetadata, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this MVCCMetadata message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCMetadata to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }

                type MVCCStats$Properties = {
                    contains_estimates?: boolean;
                    last_update_nanos?: Long;
                    intent_age?: Long;
                    gc_bytes_age?: Long;
                    live_bytes?: Long;
                    live_count?: Long;
                    key_bytes?: Long;
                    key_count?: Long;
                    val_bytes?: Long;
                    val_count?: Long;
                    intent_bytes?: Long;
                    intent_count?: Long;
                    sys_bytes?: Long;
                    sys_count?: Long;
                };

                /**
                 * Constructs a new MVCCStats.
                 * @exports cockroach.storage.engine.enginepb.MVCCStats
                 * @constructor
                 * @param {cockroach.storage.engine.enginepb.MVCCStats$Properties=} [properties] Properties to set
                 */
                class MVCCStats {

                    /**
                     * Constructs a new MVCCStats.
                     * @exports cockroach.storage.engine.enginepb.MVCCStats
                     * @constructor
                     * @param {cockroach.storage.engine.enginepb.MVCCStats$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.storage.engine.enginepb.MVCCStats$Properties);

                    /**
                     * MVCCStats contains_estimates.
                     * @type {boolean}
                     */
                    public contains_estimates: boolean;

                    /**
                     * MVCCStats last_update_nanos.
                     * @type {Long}
                     */
                    public last_update_nanos: Long;

                    /**
                     * MVCCStats intent_age.
                     * @type {Long}
                     */
                    public intent_age: Long;

                    /**
                     * MVCCStats gc_bytes_age.
                     * @type {Long}
                     */
                    public gc_bytes_age: Long;

                    /**
                     * MVCCStats live_bytes.
                     * @type {Long}
                     */
                    public live_bytes: Long;

                    /**
                     * MVCCStats live_count.
                     * @type {Long}
                     */
                    public live_count: Long;

                    /**
                     * MVCCStats key_bytes.
                     * @type {Long}
                     */
                    public key_bytes: Long;

                    /**
                     * MVCCStats key_count.
                     * @type {Long}
                     */
                    public key_count: Long;

                    /**
                     * MVCCStats val_bytes.
                     * @type {Long}
                     */
                    public val_bytes: Long;

                    /**
                     * MVCCStats val_count.
                     * @type {Long}
                     */
                    public val_count: Long;

                    /**
                     * MVCCStats intent_bytes.
                     * @type {Long}
                     */
                    public intent_bytes: Long;

                    /**
                     * MVCCStats intent_count.
                     * @type {Long}
                     */
                    public intent_count: Long;

                    /**
                     * MVCCStats sys_bytes.
                     * @type {Long}
                     */
                    public sys_bytes: Long;

                    /**
                     * MVCCStats sys_count.
                     * @type {Long}
                     */
                    public sys_count: Long;

                    /**
                     * Creates a new MVCCStats instance using the specified properties.
                     * @param {cockroach.storage.engine.enginepb.MVCCStats$Properties=} [properties] Properties to set
                     * @returns {cockroach.storage.engine.enginepb.MVCCStats} MVCCStats instance
                     */
                    public static create(properties?: cockroach.storage.engine.enginepb.MVCCStats$Properties): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Encodes the specified MVCCStats message. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStats.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.MVCCStats$Properties} message MVCCStats message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.storage.engine.enginepb.MVCCStats$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified MVCCStats message, length delimited. Does not implicitly {@link cockroach.storage.engine.enginepb.MVCCStats.verify|verify} messages.
                     * @param {cockroach.storage.engine.enginepb.MVCCStats$Properties} message MVCCStats message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.storage.engine.enginepb.MVCCStats$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a MVCCStats message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.storage.engine.enginepb.MVCCStats} MVCCStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Decodes a MVCCStats message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.storage.engine.enginepb.MVCCStats} MVCCStats
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Verifies a MVCCStats message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a MVCCStats message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.MVCCStats} MVCCStats
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Creates a MVCCStats message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.storage.engine.enginepb.MVCCStats.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.storage.engine.enginepb.MVCCStats} MVCCStats
                     */
                    public static from(object: { [k: string]: any }): cockroach.storage.engine.enginepb.MVCCStats;

                    /**
                     * Creates a plain object from a MVCCStats message. Also converts values to other types if specified.
                     * @param {cockroach.storage.engine.enginepb.MVCCStats} message MVCCStats
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.storage.engine.enginepb.MVCCStats, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this MVCCStats message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this MVCCStats to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }
        }

        type Liveness$Properties = {
            node_id?: number;
            epoch?: Long;
            expiration?: cockroach.util.hlc.Timestamp$Properties;
            draining?: boolean;
            decommissioning?: boolean;
        };

        /**
         * Constructs a new Liveness.
         * @exports cockroach.storage.Liveness
         * @constructor
         * @param {cockroach.storage.Liveness$Properties=} [properties] Properties to set
         */
        class Liveness {

            /**
             * Constructs a new Liveness.
             * @exports cockroach.storage.Liveness
             * @constructor
             * @param {cockroach.storage.Liveness$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.storage.Liveness$Properties);

            /**
             * Liveness node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * Liveness epoch.
             * @type {Long}
             */
            public epoch: Long;

            /**
             * Liveness expiration.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public expiration: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Liveness draining.
             * @type {boolean}
             */
            public draining: boolean;

            /**
             * Liveness decommissioning.
             * @type {boolean}
             */
            public decommissioning: boolean;

            /**
             * Creates a new Liveness instance using the specified properties.
             * @param {cockroach.storage.Liveness$Properties=} [properties] Properties to set
             * @returns {cockroach.storage.Liveness} Liveness instance
             */
            public static create(properties?: cockroach.storage.Liveness$Properties): cockroach.storage.Liveness;

            /**
             * Encodes the specified Liveness message. Does not implicitly {@link cockroach.storage.Liveness.verify|verify} messages.
             * @param {cockroach.storage.Liveness$Properties} message Liveness message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.storage.Liveness$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Liveness message, length delimited. Does not implicitly {@link cockroach.storage.Liveness.verify|verify} messages.
             * @param {cockroach.storage.Liveness$Properties} message Liveness message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.storage.Liveness$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Liveness message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.storage.Liveness} Liveness
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.Liveness;

            /**
             * Decodes a Liveness message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.storage.Liveness} Liveness
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.Liveness;

            /**
             * Verifies a Liveness message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Liveness message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.storage.Liveness} Liveness
             */
            public static fromObject(object: { [k: string]: any }): cockroach.storage.Liveness;

            /**
             * Creates a Liveness message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.storage.Liveness.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.storage.Liveness} Liveness
             */
            public static from(object: { [k: string]: any }): cockroach.storage.Liveness;

            /**
             * Creates a plain object from a Liveness message. Also converts values to other types if specified.
             * @param {cockroach.storage.Liveness} message Liveness
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.storage.Liveness, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Liveness message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Liveness to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * RangeLogEventType enum.
         * @name RangeLogEventType
         * @memberof cockroach.storage
         * @enum {number}
         * @property {number} split=0 split value
         * @property {number} add=1 add value
         * @property {number} remove=2 remove value
         */
        enum RangeLogEventType {
            split = 0,
            add = 1,
            remove = 2
        }

        type RangeLogEvent$Properties = {
            timestamp?: google.protobuf.Timestamp$Properties;
            range_id?: Long;
            store_id?: number;
            event_type?: cockroach.storage.RangeLogEventType;
            other_range_id?: Long;
            info?: cockroach.storage.RangeLogEvent.Info$Properties;
        };

        /**
         * Constructs a new RangeLogEvent.
         * @exports cockroach.storage.RangeLogEvent
         * @constructor
         * @param {cockroach.storage.RangeLogEvent$Properties=} [properties] Properties to set
         */
        class RangeLogEvent {

            /**
             * Constructs a new RangeLogEvent.
             * @exports cockroach.storage.RangeLogEvent
             * @constructor
             * @param {cockroach.storage.RangeLogEvent$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.storage.RangeLogEvent$Properties);

            /**
             * RangeLogEvent timestamp.
             * @type {(google.protobuf.Timestamp$Properties|null)}
             */
            public timestamp: (google.protobuf.Timestamp$Properties|null);

            /**
             * RangeLogEvent range_id.
             * @type {Long}
             */
            public range_id: Long;

            /**
             * RangeLogEvent store_id.
             * @type {number}
             */
            public store_id: number;

            /**
             * RangeLogEvent event_type.
             * @type {cockroach.storage.RangeLogEventType}
             */
            public event_type: cockroach.storage.RangeLogEventType;

            /**
             * RangeLogEvent other_range_id.
             * @type {Long}
             */
            public other_range_id: Long;

            /**
             * RangeLogEvent info.
             * @type {(cockroach.storage.RangeLogEvent.Info$Properties|null)}
             */
            public info: (cockroach.storage.RangeLogEvent.Info$Properties|null);

            /**
             * Creates a new RangeLogEvent instance using the specified properties.
             * @param {cockroach.storage.RangeLogEvent$Properties=} [properties] Properties to set
             * @returns {cockroach.storage.RangeLogEvent} RangeLogEvent instance
             */
            public static create(properties?: cockroach.storage.RangeLogEvent$Properties): cockroach.storage.RangeLogEvent;

            /**
             * Encodes the specified RangeLogEvent message. Does not implicitly {@link cockroach.storage.RangeLogEvent.verify|verify} messages.
             * @param {cockroach.storage.RangeLogEvent$Properties} message RangeLogEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.storage.RangeLogEvent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified RangeLogEvent message, length delimited. Does not implicitly {@link cockroach.storage.RangeLogEvent.verify|verify} messages.
             * @param {cockroach.storage.RangeLogEvent$Properties} message RangeLogEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.storage.RangeLogEvent$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a RangeLogEvent message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.storage.RangeLogEvent} RangeLogEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.RangeLogEvent;

            /**
             * Decodes a RangeLogEvent message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.storage.RangeLogEvent} RangeLogEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.RangeLogEvent;

            /**
             * Verifies a RangeLogEvent message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a RangeLogEvent message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.storage.RangeLogEvent} RangeLogEvent
             */
            public static fromObject(object: { [k: string]: any }): cockroach.storage.RangeLogEvent;

            /**
             * Creates a RangeLogEvent message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.storage.RangeLogEvent.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.storage.RangeLogEvent} RangeLogEvent
             */
            public static from(object: { [k: string]: any }): cockroach.storage.RangeLogEvent;

            /**
             * Creates a plain object from a RangeLogEvent message. Also converts values to other types if specified.
             * @param {cockroach.storage.RangeLogEvent} message RangeLogEvent
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.storage.RangeLogEvent, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this RangeLogEvent message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this RangeLogEvent to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace RangeLogEvent {

            type Info$Properties = {
                updated_desc?: cockroach.roachpb.RangeDescriptor$Properties;
                new_desc?: cockroach.roachpb.RangeDescriptor$Properties;
                added_replica?: cockroach.roachpb.ReplicaDescriptor$Properties;
                removed_replica?: cockroach.roachpb.ReplicaDescriptor$Properties;
            };

            /**
             * Constructs a new Info.
             * @exports cockroach.storage.RangeLogEvent.Info
             * @constructor
             * @param {cockroach.storage.RangeLogEvent.Info$Properties=} [properties] Properties to set
             */
            class Info {

                /**
                 * Constructs a new Info.
                 * @exports cockroach.storage.RangeLogEvent.Info
                 * @constructor
                 * @param {cockroach.storage.RangeLogEvent.Info$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.RangeLogEvent.Info$Properties);

                /**
                 * Info updated_desc.
                 * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
                 */
                public updated_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

                /**
                 * Info new_desc.
                 * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
                 */
                public new_desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

                /**
                 * Info added_replica.
                 * @type {(cockroach.roachpb.ReplicaDescriptor$Properties|null)}
                 */
                public added_replica: (cockroach.roachpb.ReplicaDescriptor$Properties|null);

                /**
                 * Info removed_replica.
                 * @type {(cockroach.roachpb.ReplicaDescriptor$Properties|null)}
                 */
                public removed_replica: (cockroach.roachpb.ReplicaDescriptor$Properties|null);

                /**
                 * Creates a new Info instance using the specified properties.
                 * @param {cockroach.storage.RangeLogEvent.Info$Properties=} [properties] Properties to set
                 * @returns {cockroach.storage.RangeLogEvent.Info} Info instance
                 */
                public static create(properties?: cockroach.storage.RangeLogEvent.Info$Properties): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Encodes the specified Info message. Does not implicitly {@link cockroach.storage.RangeLogEvent.Info.verify|verify} messages.
                 * @param {cockroach.storage.RangeLogEvent.Info$Properties} message Info message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.storage.RangeLogEvent.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.storage.RangeLogEvent.Info.verify|verify} messages.
                 * @param {cockroach.storage.RangeLogEvent.Info$Properties} message Info message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.storage.RangeLogEvent.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Info message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.storage.RangeLogEvent.Info} Info
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Decodes an Info message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.storage.RangeLogEvent.Info} Info
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Verifies an Info message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an Info message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.RangeLogEvent.Info} Info
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Creates an Info message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.storage.RangeLogEvent.Info.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.RangeLogEvent.Info} Info
                 */
                public static from(object: { [k: string]: any }): cockroach.storage.RangeLogEvent.Info;

                /**
                 * Creates a plain object from an Info message. Also converts values to other types if specified.
                 * @param {cockroach.storage.RangeLogEvent.Info} message Info
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.storage.RangeLogEvent.Info, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Info message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Info to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        /**
         * Namespace storagebase.
         * @exports cockroach.storage.storagebase
         * @namespace
         */
        namespace storagebase {

            type ReplicaState$Properties = {
                raft_applied_index?: Long;
                lease_applied_index?: Long;
                desc?: cockroach.roachpb.RangeDescriptor$Properties;
                lease?: cockroach.roachpb.Lease$Properties;
                truncated_state?: cockroach.roachpb.RaftTruncatedState$Properties;
                gc_threshold?: cockroach.util.hlc.Timestamp$Properties;
                stats?: cockroach.storage.engine.enginepb.MVCCStats$Properties;
                txn_span_gc_threshold?: cockroach.util.hlc.Timestamp$Properties;
            };

            /**
             * Constructs a new ReplicaState.
             * @exports cockroach.storage.storagebase.ReplicaState
             * @constructor
             * @param {cockroach.storage.storagebase.ReplicaState$Properties=} [properties] Properties to set
             */
            class ReplicaState {

                /**
                 * Constructs a new ReplicaState.
                 * @exports cockroach.storage.storagebase.ReplicaState
                 * @constructor
                 * @param {cockroach.storage.storagebase.ReplicaState$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.storagebase.ReplicaState$Properties);

                /**
                 * ReplicaState raft_applied_index.
                 * @type {Long}
                 */
                public raft_applied_index: Long;

                /**
                 * ReplicaState lease_applied_index.
                 * @type {Long}
                 */
                public lease_applied_index: Long;

                /**
                 * ReplicaState desc.
                 * @type {(cockroach.roachpb.RangeDescriptor$Properties|null)}
                 */
                public desc: (cockroach.roachpb.RangeDescriptor$Properties|null);

                /**
                 * ReplicaState lease.
                 * @type {(cockroach.roachpb.Lease$Properties|null)}
                 */
                public lease: (cockroach.roachpb.Lease$Properties|null);

                /**
                 * ReplicaState truncated_state.
                 * @type {(cockroach.roachpb.RaftTruncatedState$Properties|null)}
                 */
                public truncated_state: (cockroach.roachpb.RaftTruncatedState$Properties|null);

                /**
                 * ReplicaState gc_threshold.
                 * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                 */
                public gc_threshold: (cockroach.util.hlc.Timestamp$Properties|null);

                /**
                 * ReplicaState stats.
                 * @type {(cockroach.storage.engine.enginepb.MVCCStats$Properties|null)}
                 */
                public stats: (cockroach.storage.engine.enginepb.MVCCStats$Properties|null);

                /**
                 * ReplicaState txn_span_gc_threshold.
                 * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
                 */
                public txn_span_gc_threshold: (cockroach.util.hlc.Timestamp$Properties|null);

                /**
                 * Creates a new ReplicaState instance using the specified properties.
                 * @param {cockroach.storage.storagebase.ReplicaState$Properties=} [properties] Properties to set
                 * @returns {cockroach.storage.storagebase.ReplicaState} ReplicaState instance
                 */
                public static create(properties?: cockroach.storage.storagebase.ReplicaState$Properties): cockroach.storage.storagebase.ReplicaState;

                /**
                 * Encodes the specified ReplicaState message. Does not implicitly {@link cockroach.storage.storagebase.ReplicaState.verify|verify} messages.
                 * @param {cockroach.storage.storagebase.ReplicaState$Properties} message ReplicaState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.storage.storagebase.ReplicaState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReplicaState message, length delimited. Does not implicitly {@link cockroach.storage.storagebase.ReplicaState.verify|verify} messages.
                 * @param {cockroach.storage.storagebase.ReplicaState$Properties} message ReplicaState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.storage.storagebase.ReplicaState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReplicaState message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.storage.storagebase.ReplicaState} ReplicaState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagebase.ReplicaState;

                /**
                 * Decodes a ReplicaState message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.storage.storagebase.ReplicaState} ReplicaState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagebase.ReplicaState;

                /**
                 * Verifies a ReplicaState message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ReplicaState message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.storagebase.ReplicaState} ReplicaState
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.storagebase.ReplicaState;

                /**
                 * Creates a ReplicaState message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.storage.storagebase.ReplicaState.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.storagebase.ReplicaState} ReplicaState
                 */
                public static from(object: { [k: string]: any }): cockroach.storage.storagebase.ReplicaState;

                /**
                 * Creates a plain object from a ReplicaState message. Also converts values to other types if specified.
                 * @param {cockroach.storage.storagebase.ReplicaState} message ReplicaState
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.storage.storagebase.ReplicaState, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ReplicaState message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReplicaState to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type RangeInfo$Properties = {
                state?: cockroach.storage.storagebase.ReplicaState$Properties;
                lastIndex?: Long;
                num_pending?: Long;
                num_dropped?: Long;
                raft_log_size?: Long;
                approximate_proposal_quota?: Long;
            };

            /**
             * Constructs a new RangeInfo.
             * @exports cockroach.storage.storagebase.RangeInfo
             * @constructor
             * @param {cockroach.storage.storagebase.RangeInfo$Properties=} [properties] Properties to set
             */
            class RangeInfo {

                /**
                 * Constructs a new RangeInfo.
                 * @exports cockroach.storage.storagebase.RangeInfo
                 * @constructor
                 * @param {cockroach.storage.storagebase.RangeInfo$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.storage.storagebase.RangeInfo$Properties);

                /**
                 * RangeInfo state.
                 * @type {(cockroach.storage.storagebase.ReplicaState$Properties|null)}
                 */
                public state: (cockroach.storage.storagebase.ReplicaState$Properties|null);

                /**
                 * RangeInfo lastIndex.
                 * @type {Long}
                 */
                public lastIndex: Long;

                /**
                 * RangeInfo num_pending.
                 * @type {Long}
                 */
                public num_pending: Long;

                /**
                 * RangeInfo num_dropped.
                 * @type {Long}
                 */
                public num_dropped: Long;

                /**
                 * RangeInfo raft_log_size.
                 * @type {Long}
                 */
                public raft_log_size: Long;

                /**
                 * RangeInfo approximate_proposal_quota.
                 * @type {Long}
                 */
                public approximate_proposal_quota: Long;

                /**
                 * Creates a new RangeInfo instance using the specified properties.
                 * @param {cockroach.storage.storagebase.RangeInfo$Properties=} [properties] Properties to set
                 * @returns {cockroach.storage.storagebase.RangeInfo} RangeInfo instance
                 */
                public static create(properties?: cockroach.storage.storagebase.RangeInfo$Properties): cockroach.storage.storagebase.RangeInfo;

                /**
                 * Encodes the specified RangeInfo message. Does not implicitly {@link cockroach.storage.storagebase.RangeInfo.verify|verify} messages.
                 * @param {cockroach.storage.storagebase.RangeInfo$Properties} message RangeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.storage.storagebase.RangeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified RangeInfo message, length delimited. Does not implicitly {@link cockroach.storage.storagebase.RangeInfo.verify|verify} messages.
                 * @param {cockroach.storage.storagebase.RangeInfo$Properties} message RangeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.storage.storagebase.RangeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.storage.storagebase.RangeInfo} RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.storage.storagebase.RangeInfo;

                /**
                 * Decodes a RangeInfo message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.storage.storagebase.RangeInfo} RangeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.storage.storagebase.RangeInfo;

                /**
                 * Verifies a RangeInfo message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.storagebase.RangeInfo} RangeInfo
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.storage.storagebase.RangeInfo;

                /**
                 * Creates a RangeInfo message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.storage.storagebase.RangeInfo.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.storage.storagebase.RangeInfo} RangeInfo
                 */
                public static from(object: { [k: string]: any }): cockroach.storage.storagebase.RangeInfo;

                /**
                 * Creates a plain object from a RangeInfo message. Also converts values to other types if specified.
                 * @param {cockroach.storage.storagebase.RangeInfo} message RangeInfo
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.storage.storagebase.RangeInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this RangeInfo message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this RangeInfo to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }
    }

    /**
     * Namespace build.
     * @exports cockroach.build
     * @namespace
     */
    namespace build {

        type Info$Properties = {
            go_version?: string;
            tag?: string;
            time?: string;
            revision?: string;
            cgo_compiler?: string;
            platform?: string;
            distribution?: string;
            type?: string;
            dependencies?: string;
        };

        /**
         * Constructs a new Info.
         * @exports cockroach.build.Info
         * @constructor
         * @param {cockroach.build.Info$Properties=} [properties] Properties to set
         */
        class Info {

            /**
             * Constructs a new Info.
             * @exports cockroach.build.Info
             * @constructor
             * @param {cockroach.build.Info$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.build.Info$Properties);

            /**
             * Info go_version.
             * @type {string}
             */
            public go_version: string;

            /**
             * Info tag.
             * @type {string}
             */
            public tag: string;

            /**
             * Info time.
             * @type {string}
             */
            public time: string;

            /**
             * Info revision.
             * @type {string}
             */
            public revision: string;

            /**
             * Info cgo_compiler.
             * @type {string}
             */
            public cgo_compiler: string;

            /**
             * Info platform.
             * @type {string}
             */
            public platform: string;

            /**
             * Info distribution.
             * @type {string}
             */
            public distribution: string;

            /**
             * Info type.
             * @type {string}
             */
            public type: string;

            /**
             * Info dependencies.
             * @type {string}
             */
            public dependencies: string;

            /**
             * Creates a new Info instance using the specified properties.
             * @param {cockroach.build.Info$Properties=} [properties] Properties to set
             * @returns {cockroach.build.Info} Info instance
             */
            public static create(properties?: cockroach.build.Info$Properties): cockroach.build.Info;

            /**
             * Encodes the specified Info message. Does not implicitly {@link cockroach.build.Info.verify|verify} messages.
             * @param {cockroach.build.Info$Properties} message Info message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.build.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.build.Info.verify|verify} messages.
             * @param {cockroach.build.Info$Properties} message Info message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.build.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Info message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.build.Info} Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.build.Info;

            /**
             * Decodes an Info message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.build.Info} Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.build.Info;

            /**
             * Verifies an Info message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.build.Info} Info
             */
            public static fromObject(object: { [k: string]: any }): cockroach.build.Info;

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.build.Info.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.build.Info} Info
             */
            public static from(object: { [k: string]: any }): cockroach.build.Info;

            /**
             * Creates a plain object from an Info message. Also converts values to other types if specified.
             * @param {cockroach.build.Info} message Info
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.build.Info, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Info message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Info to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /**
     * Namespace gossip.
     * @exports cockroach.gossip
     * @namespace
     */
    namespace gossip {

        type BootstrapInfo$Properties = {
            addresses?: cockroach.util.UnresolvedAddr$Properties[];
            timestamp?: cockroach.util.hlc.Timestamp$Properties;
        };

        /**
         * Constructs a new BootstrapInfo.
         * @exports cockroach.gossip.BootstrapInfo
         * @constructor
         * @param {cockroach.gossip.BootstrapInfo$Properties=} [properties] Properties to set
         */
        class BootstrapInfo {

            /**
             * Constructs a new BootstrapInfo.
             * @exports cockroach.gossip.BootstrapInfo
             * @constructor
             * @param {cockroach.gossip.BootstrapInfo$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.BootstrapInfo$Properties);

            /**
             * BootstrapInfo addresses.
             * @type {Array.<cockroach.util.UnresolvedAddr$Properties>}
             */
            public addresses: cockroach.util.UnresolvedAddr$Properties[];

            /**
             * BootstrapInfo timestamp.
             * @type {(cockroach.util.hlc.Timestamp$Properties|null)}
             */
            public timestamp: (cockroach.util.hlc.Timestamp$Properties|null);

            /**
             * Creates a new BootstrapInfo instance using the specified properties.
             * @param {cockroach.gossip.BootstrapInfo$Properties=} [properties] Properties to set
             * @returns {cockroach.gossip.BootstrapInfo} BootstrapInfo instance
             */
            public static create(properties?: cockroach.gossip.BootstrapInfo$Properties): cockroach.gossip.BootstrapInfo;

            /**
             * Encodes the specified BootstrapInfo message. Does not implicitly {@link cockroach.gossip.BootstrapInfo.verify|verify} messages.
             * @param {cockroach.gossip.BootstrapInfo$Properties} message BootstrapInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.gossip.BootstrapInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified BootstrapInfo message, length delimited. Does not implicitly {@link cockroach.gossip.BootstrapInfo.verify|verify} messages.
             * @param {cockroach.gossip.BootstrapInfo$Properties} message BootstrapInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.gossip.BootstrapInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a BootstrapInfo message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.gossip.BootstrapInfo} BootstrapInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.BootstrapInfo;

            /**
             * Decodes a BootstrapInfo message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.gossip.BootstrapInfo} BootstrapInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.BootstrapInfo;

            /**
             * Verifies a BootstrapInfo message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a BootstrapInfo message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.BootstrapInfo} BootstrapInfo
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.BootstrapInfo;

            /**
             * Creates a BootstrapInfo message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.gossip.BootstrapInfo.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.BootstrapInfo} BootstrapInfo
             */
            public static from(object: { [k: string]: any }): cockroach.gossip.BootstrapInfo;

            /**
             * Creates a plain object from a BootstrapInfo message. Also converts values to other types if specified.
             * @param {cockroach.gossip.BootstrapInfo} message BootstrapInfo
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.gossip.BootstrapInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this BootstrapInfo message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this BootstrapInfo to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Request$Properties = {
            node_id?: number;
            addr?: cockroach.util.UnresolvedAddr$Properties;
            high_water_stamps?: { [k: string]: Long };
            delta?: { [k: string]: cockroach.gossip.Info$Properties };
            cluster_id?: Uint8Array;
        };

        /**
         * Constructs a new Request.
         * @exports cockroach.gossip.Request
         * @constructor
         * @param {cockroach.gossip.Request$Properties=} [properties] Properties to set
         */
        class Request {

            /**
             * Constructs a new Request.
             * @exports cockroach.gossip.Request
             * @constructor
             * @param {cockroach.gossip.Request$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.Request$Properties);

            /**
             * Request node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * Request addr.
             * @type {(cockroach.util.UnresolvedAddr$Properties|null)}
             */
            public addr: (cockroach.util.UnresolvedAddr$Properties|null);

            /**
             * Request high_water_stamps.
             * @type {Object.<string,Long>}
             */
            public high_water_stamps: { [k: string]: Long };

            /**
             * Request delta.
             * @type {Object.<string,cockroach.gossip.Info$Properties>}
             */
            public delta: { [k: string]: cockroach.gossip.Info$Properties };

            /**
             * Request cluster_id.
             * @type {Uint8Array}
             */
            public cluster_id: Uint8Array;

            /**
             * Creates a new Request instance using the specified properties.
             * @param {cockroach.gossip.Request$Properties=} [properties] Properties to set
             * @returns {cockroach.gossip.Request} Request instance
             */
            public static create(properties?: cockroach.gossip.Request$Properties): cockroach.gossip.Request;

            /**
             * Encodes the specified Request message. Does not implicitly {@link cockroach.gossip.Request.verify|verify} messages.
             * @param {cockroach.gossip.Request$Properties} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.gossip.Request$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Request message, length delimited. Does not implicitly {@link cockroach.gossip.Request.verify|verify} messages.
             * @param {cockroach.gossip.Request$Properties} message Request message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.gossip.Request$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Request message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.gossip.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Request;

            /**
             * Decodes a Request message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.gossip.Request} Request
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Request;

            /**
             * Verifies a Request message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Request} Request
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Request;

            /**
             * Creates a Request message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.gossip.Request.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Request} Request
             */
            public static from(object: { [k: string]: any }): cockroach.gossip.Request;

            /**
             * Creates a plain object from a Request message. Also converts values to other types if specified.
             * @param {cockroach.gossip.Request} message Request
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.gossip.Request, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Request message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Request to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Response$Properties = {
            node_id?: number;
            addr?: cockroach.util.UnresolvedAddr$Properties;
            alternate_addr?: cockroach.util.UnresolvedAddr$Properties;
            alternate_node_id?: number;
            delta?: { [k: string]: cockroach.gossip.Info$Properties };
            high_water_stamps?: { [k: string]: Long };
        };

        /**
         * Constructs a new Response.
         * @exports cockroach.gossip.Response
         * @constructor
         * @param {cockroach.gossip.Response$Properties=} [properties] Properties to set
         */
        class Response {

            /**
             * Constructs a new Response.
             * @exports cockroach.gossip.Response
             * @constructor
             * @param {cockroach.gossip.Response$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.Response$Properties);

            /**
             * Response node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * Response addr.
             * @type {(cockroach.util.UnresolvedAddr$Properties|null)}
             */
            public addr: (cockroach.util.UnresolvedAddr$Properties|null);

            /**
             * Response alternate_addr.
             * @type {(cockroach.util.UnresolvedAddr$Properties|null)}
             */
            public alternate_addr: (cockroach.util.UnresolvedAddr$Properties|null);

            /**
             * Response alternate_node_id.
             * @type {number}
             */
            public alternate_node_id: number;

            /**
             * Response delta.
             * @type {Object.<string,cockroach.gossip.Info$Properties>}
             */
            public delta: { [k: string]: cockroach.gossip.Info$Properties };

            /**
             * Response high_water_stamps.
             * @type {Object.<string,Long>}
             */
            public high_water_stamps: { [k: string]: Long };

            /**
             * Creates a new Response instance using the specified properties.
             * @param {cockroach.gossip.Response$Properties=} [properties] Properties to set
             * @returns {cockroach.gossip.Response} Response instance
             */
            public static create(properties?: cockroach.gossip.Response$Properties): cockroach.gossip.Response;

            /**
             * Encodes the specified Response message. Does not implicitly {@link cockroach.gossip.Response.verify|verify} messages.
             * @param {cockroach.gossip.Response$Properties} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.gossip.Response$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Response message, length delimited. Does not implicitly {@link cockroach.gossip.Response.verify|verify} messages.
             * @param {cockroach.gossip.Response$Properties} message Response message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.gossip.Response$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Response message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.gossip.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Response;

            /**
             * Decodes a Response message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.gossip.Response} Response
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Response;

            /**
             * Verifies a Response message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Response message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Response} Response
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Response;

            /**
             * Creates a Response message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.gossip.Response.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Response} Response
             */
            public static from(object: { [k: string]: any }): cockroach.gossip.Response;

            /**
             * Creates a plain object from a Response message. Also converts values to other types if specified.
             * @param {cockroach.gossip.Response} message Response
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.gossip.Response, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Response message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Response to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type InfoStatus$Properties = {
            infos?: { [k: string]: cockroach.gossip.Info$Properties };
        };

        /**
         * Constructs a new InfoStatus.
         * @exports cockroach.gossip.InfoStatus
         * @constructor
         * @param {cockroach.gossip.InfoStatus$Properties=} [properties] Properties to set
         */
        class InfoStatus {

            /**
             * Constructs a new InfoStatus.
             * @exports cockroach.gossip.InfoStatus
             * @constructor
             * @param {cockroach.gossip.InfoStatus$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.InfoStatus$Properties);

            /**
             * InfoStatus infos.
             * @type {Object.<string,cockroach.gossip.Info$Properties>}
             */
            public infos: { [k: string]: cockroach.gossip.Info$Properties };

            /**
             * Creates a new InfoStatus instance using the specified properties.
             * @param {cockroach.gossip.InfoStatus$Properties=} [properties] Properties to set
             * @returns {cockroach.gossip.InfoStatus} InfoStatus instance
             */
            public static create(properties?: cockroach.gossip.InfoStatus$Properties): cockroach.gossip.InfoStatus;

            /**
             * Encodes the specified InfoStatus message. Does not implicitly {@link cockroach.gossip.InfoStatus.verify|verify} messages.
             * @param {cockroach.gossip.InfoStatus$Properties} message InfoStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.gossip.InfoStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified InfoStatus message, length delimited. Does not implicitly {@link cockroach.gossip.InfoStatus.verify|verify} messages.
             * @param {cockroach.gossip.InfoStatus$Properties} message InfoStatus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.gossip.InfoStatus$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an InfoStatus message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.gossip.InfoStatus} InfoStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.InfoStatus;

            /**
             * Decodes an InfoStatus message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.gossip.InfoStatus} InfoStatus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.InfoStatus;

            /**
             * Verifies an InfoStatus message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an InfoStatus message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.InfoStatus} InfoStatus
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.InfoStatus;

            /**
             * Creates an InfoStatus message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.gossip.InfoStatus.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.InfoStatus} InfoStatus
             */
            public static from(object: { [k: string]: any }): cockroach.gossip.InfoStatus;

            /**
             * Creates a plain object from an InfoStatus message. Also converts values to other types if specified.
             * @param {cockroach.gossip.InfoStatus} message InfoStatus
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.gossip.InfoStatus, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this InfoStatus message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this InfoStatus to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type Info$Properties = {
            value?: cockroach.roachpb.Value$Properties;
            orig_stamp?: Long;
            ttl_stamp?: Long;
            hops?: number;
            node_id?: number;
            peer_id?: number;
        };

        /**
         * Constructs a new Info.
         * @exports cockroach.gossip.Info
         * @constructor
         * @param {cockroach.gossip.Info$Properties=} [properties] Properties to set
         */
        class Info {

            /**
             * Constructs a new Info.
             * @exports cockroach.gossip.Info
             * @constructor
             * @param {cockroach.gossip.Info$Properties=} [properties] Properties to set
             */
            constructor(properties?: cockroach.gossip.Info$Properties);

            /**
             * Info value.
             * @type {(cockroach.roachpb.Value$Properties|null)}
             */
            public value: (cockroach.roachpb.Value$Properties|null);

            /**
             * Info orig_stamp.
             * @type {Long}
             */
            public orig_stamp: Long;

            /**
             * Info ttl_stamp.
             * @type {Long}
             */
            public ttl_stamp: Long;

            /**
             * Info hops.
             * @type {number}
             */
            public hops: number;

            /**
             * Info node_id.
             * @type {number}
             */
            public node_id: number;

            /**
             * Info peer_id.
             * @type {number}
             */
            public peer_id: number;

            /**
             * Creates a new Info instance using the specified properties.
             * @param {cockroach.gossip.Info$Properties=} [properties] Properties to set
             * @returns {cockroach.gossip.Info} Info instance
             */
            public static create(properties?: cockroach.gossip.Info$Properties): cockroach.gossip.Info;

            /**
             * Encodes the specified Info message. Does not implicitly {@link cockroach.gossip.Info.verify|verify} messages.
             * @param {cockroach.gossip.Info$Properties} message Info message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: cockroach.gossip.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Info message, length delimited. Does not implicitly {@link cockroach.gossip.Info.verify|verify} messages.
             * @param {cockroach.gossip.Info$Properties} message Info message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: cockroach.gossip.Info$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an Info message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cockroach.gossip.Info} Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.gossip.Info;

            /**
             * Decodes an Info message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cockroach.gossip.Info} Info
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.gossip.Info;

            /**
             * Verifies an Info message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Info} Info
             */
            public static fromObject(object: { [k: string]: any }): cockroach.gossip.Info;

            /**
             * Creates an Info message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link cockroach.gossip.Info.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {cockroach.gossip.Info} Info
             */
            public static from(object: { [k: string]: any }): cockroach.gossip.Info;

            /**
             * Creates a plain object from an Info message. Also converts values to other types if specified.
             * @param {cockroach.gossip.Info} message Info
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: cockroach.gossip.Info, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Info message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Info to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        /**
         * Constructs a new Gossip service.
         * @exports cockroach.gossip.Gossip
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        class Gossip extends $protobuf.rpc.Service {

            /**
             * Constructs a new Gossip service.
             * @exports cockroach.gossip.Gossip
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

            /**
             * Creates new Gossip service using the specified rpc implementation.
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {Gossip} RPC service. Useful where requests and/or responses are streamed.
             */
            public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): Gossip;

            /**
             * Calls Gossip.
             * @param {cockroach.gossip.Request|Object.<string,*>} request Request message or plain object
             * @param {Gossip_gossip_Callback} callback Node-style callback called with the error, if any, and Response
             * @returns {undefined}
             */
            public gossip(request: (cockroach.gossip.Request|{ [k: string]: any }), callback: Gossip_gossip_Callback): void;
        }
    }

    /**
     * Namespace ts.
     * @exports cockroach.ts
     * @namespace
     */
    namespace ts {

        /**
         * Namespace tspb.
         * @exports cockroach.ts.tspb
         * @namespace
         */
        namespace tspb {

            type TimeSeriesDatapoint$Properties = {
                timestamp_nanos?: Long;
                value?: number;
            };

            /**
             * Constructs a new TimeSeriesDatapoint.
             * @exports cockroach.ts.tspb.TimeSeriesDatapoint
             * @constructor
             * @param {cockroach.ts.tspb.TimeSeriesDatapoint$Properties=} [properties] Properties to set
             */
            class TimeSeriesDatapoint {

                /**
                 * Constructs a new TimeSeriesDatapoint.
                 * @exports cockroach.ts.tspb.TimeSeriesDatapoint
                 * @constructor
                 * @param {cockroach.ts.tspb.TimeSeriesDatapoint$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.TimeSeriesDatapoint$Properties);

                /**
                 * TimeSeriesDatapoint timestamp_nanos.
                 * @type {Long}
                 */
                public timestamp_nanos: Long;

                /**
                 * TimeSeriesDatapoint value.
                 * @type {number}
                 */
                public value: number;

                /**
                 * Creates a new TimeSeriesDatapoint instance using the specified properties.
                 * @param {cockroach.ts.tspb.TimeSeriesDatapoint$Properties=} [properties] Properties to set
                 * @returns {cockroach.ts.tspb.TimeSeriesDatapoint} TimeSeriesDatapoint instance
                 */
                public static create(properties?: cockroach.ts.tspb.TimeSeriesDatapoint$Properties): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Encodes the specified TimeSeriesDatapoint message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesDatapoint.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesDatapoint$Properties} message TimeSeriesDatapoint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.ts.tspb.TimeSeriesDatapoint$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesDatapoint message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesDatapoint.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesDatapoint$Properties} message TimeSeriesDatapoint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesDatapoint$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesDatapoint message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.ts.tspb.TimeSeriesDatapoint} TimeSeriesDatapoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Decodes a TimeSeriesDatapoint message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.ts.tspb.TimeSeriesDatapoint} TimeSeriesDatapoint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Verifies a TimeSeriesDatapoint message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TimeSeriesDatapoint message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesDatapoint} TimeSeriesDatapoint
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Creates a TimeSeriesDatapoint message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.ts.tspb.TimeSeriesDatapoint.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesDatapoint} TimeSeriesDatapoint
                 */
                public static from(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesDatapoint;

                /**
                 * Creates a plain object from a TimeSeriesDatapoint message. Also converts values to other types if specified.
                 * @param {cockroach.ts.tspb.TimeSeriesDatapoint} message TimeSeriesDatapoint
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesDatapoint, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TimeSeriesDatapoint message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesDatapoint to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type TimeSeriesData$Properties = {
                name?: string;
                source?: string;
                datapoints?: cockroach.ts.tspb.TimeSeriesDatapoint$Properties[];
            };

            /**
             * Constructs a new TimeSeriesData.
             * @exports cockroach.ts.tspb.TimeSeriesData
             * @constructor
             * @param {cockroach.ts.tspb.TimeSeriesData$Properties=} [properties] Properties to set
             */
            class TimeSeriesData {

                /**
                 * Constructs a new TimeSeriesData.
                 * @exports cockroach.ts.tspb.TimeSeriesData
                 * @constructor
                 * @param {cockroach.ts.tspb.TimeSeriesData$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.TimeSeriesData$Properties);

                /**
                 * TimeSeriesData name.
                 * @type {string}
                 */
                public name: string;

                /**
                 * TimeSeriesData source.
                 * @type {string}
                 */
                public source: string;

                /**
                 * TimeSeriesData datapoints.
                 * @type {Array.<cockroach.ts.tspb.TimeSeriesDatapoint$Properties>}
                 */
                public datapoints: cockroach.ts.tspb.TimeSeriesDatapoint$Properties[];

                /**
                 * Creates a new TimeSeriesData instance using the specified properties.
                 * @param {cockroach.ts.tspb.TimeSeriesData$Properties=} [properties] Properties to set
                 * @returns {cockroach.ts.tspb.TimeSeriesData} TimeSeriesData instance
                 */
                public static create(properties?: cockroach.ts.tspb.TimeSeriesData$Properties): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Encodes the specified TimeSeriesData message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesData.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesData$Properties} message TimeSeriesData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.ts.tspb.TimeSeriesData$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesData message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesData.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesData$Properties} message TimeSeriesData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesData$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesData message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.ts.tspb.TimeSeriesData} TimeSeriesData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Decodes a TimeSeriesData message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.ts.tspb.TimeSeriesData} TimeSeriesData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Verifies a TimeSeriesData message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TimeSeriesData message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesData} TimeSeriesData
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Creates a TimeSeriesData message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.ts.tspb.TimeSeriesData.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesData} TimeSeriesData
                 */
                public static from(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesData;

                /**
                 * Creates a plain object from a TimeSeriesData message. Also converts values to other types if specified.
                 * @param {cockroach.ts.tspb.TimeSeriesData} message TimeSeriesData
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesData, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TimeSeriesData message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesData to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            /**
             * TimeSeriesQueryAggregator enum.
             * @name TimeSeriesQueryAggregator
             * @memberof cockroach.ts.tspb
             * @enum {number}
             * @property {number} AVG=1 AVG value
             * @property {number} SUM=2 SUM value
             * @property {number} MAX=3 MAX value
             * @property {number} MIN=4 MIN value
             */
            enum TimeSeriesQueryAggregator {
                AVG = 1,
                SUM = 2,
                MAX = 3,
                MIN = 4
            }

            /**
             * TimeSeriesQueryDerivative enum.
             * @name TimeSeriesQueryDerivative
             * @memberof cockroach.ts.tspb
             * @enum {number}
             * @property {number} NONE=0 NONE value
             * @property {number} DERIVATIVE=1 DERIVATIVE value
             * @property {number} NON_NEGATIVE_DERIVATIVE=2 NON_NEGATIVE_DERIVATIVE value
             */
            enum TimeSeriesQueryDerivative {
                NONE = 0,
                DERIVATIVE = 1,
                NON_NEGATIVE_DERIVATIVE = 2
            }

            type Query$Properties = {
                name?: string;
                downsampler?: cockroach.ts.tspb.TimeSeriesQueryAggregator;
                source_aggregator?: cockroach.ts.tspb.TimeSeriesQueryAggregator;
                derivative?: cockroach.ts.tspb.TimeSeriesQueryDerivative;
                sources?: string[];
            };

            /**
             * Constructs a new Query.
             * @exports cockroach.ts.tspb.Query
             * @constructor
             * @param {cockroach.ts.tspb.Query$Properties=} [properties] Properties to set
             */
            class Query {

                /**
                 * Constructs a new Query.
                 * @exports cockroach.ts.tspb.Query
                 * @constructor
                 * @param {cockroach.ts.tspb.Query$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.Query$Properties);

                /**
                 * Query name.
                 * @type {string}
                 */
                public name: string;

                /**
                 * Query downsampler.
                 * @type {cockroach.ts.tspb.TimeSeriesQueryAggregator}
                 */
                public downsampler: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /**
                 * Query source_aggregator.
                 * @type {cockroach.ts.tspb.TimeSeriesQueryAggregator}
                 */
                public source_aggregator: cockroach.ts.tspb.TimeSeriesQueryAggregator;

                /**
                 * Query derivative.
                 * @type {cockroach.ts.tspb.TimeSeriesQueryDerivative}
                 */
                public derivative: cockroach.ts.tspb.TimeSeriesQueryDerivative;

                /**
                 * Query sources.
                 * @type {Array.<string>}
                 */
                public sources: string[];

                /**
                 * Creates a new Query instance using the specified properties.
                 * @param {cockroach.ts.tspb.Query$Properties=} [properties] Properties to set
                 * @returns {cockroach.ts.tspb.Query} Query instance
                 */
                public static create(properties?: cockroach.ts.tspb.Query$Properties): cockroach.ts.tspb.Query;

                /**
                 * Encodes the specified Query message. Does not implicitly {@link cockroach.ts.tspb.Query.verify|verify} messages.
                 * @param {cockroach.ts.tspb.Query$Properties} message Query message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.ts.tspb.Query$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Query message, length delimited. Does not implicitly {@link cockroach.ts.tspb.Query.verify|verify} messages.
                 * @param {cockroach.ts.tspb.Query$Properties} message Query message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.Query$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Query message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.ts.tspb.Query} Query
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.Query;

                /**
                 * Decodes a Query message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.ts.tspb.Query} Query
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.Query;

                /**
                 * Verifies a Query message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a Query message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.Query} Query
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.Query;

                /**
                 * Creates a Query message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.ts.tspb.Query.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.Query} Query
                 */
                public static from(object: { [k: string]: any }): cockroach.ts.tspb.Query;

                /**
                 * Creates a plain object from a Query message. Also converts values to other types if specified.
                 * @param {cockroach.ts.tspb.Query} message Query
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.Query, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Query message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Query to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type TimeSeriesQueryRequest$Properties = {
                start_nanos?: Long;
                end_nanos?: Long;
                queries?: cockroach.ts.tspb.Query$Properties[];
                sample_nanos?: Long;
            };

            /**
             * Constructs a new TimeSeriesQueryRequest.
             * @exports cockroach.ts.tspb.TimeSeriesQueryRequest
             * @constructor
             * @param {cockroach.ts.tspb.TimeSeriesQueryRequest$Properties=} [properties] Properties to set
             */
            class TimeSeriesQueryRequest {

                /**
                 * Constructs a new TimeSeriesQueryRequest.
                 * @exports cockroach.ts.tspb.TimeSeriesQueryRequest
                 * @constructor
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.TimeSeriesQueryRequest$Properties);

                /**
                 * TimeSeriesQueryRequest start_nanos.
                 * @type {Long}
                 */
                public start_nanos: Long;

                /**
                 * TimeSeriesQueryRequest end_nanos.
                 * @type {Long}
                 */
                public end_nanos: Long;

                /**
                 * TimeSeriesQueryRequest queries.
                 * @type {Array.<cockroach.ts.tspb.Query$Properties>}
                 */
                public queries: cockroach.ts.tspb.Query$Properties[];

                /**
                 * TimeSeriesQueryRequest sample_nanos.
                 * @type {Long}
                 */
                public sample_nanos: Long;

                /**
                 * Creates a new TimeSeriesQueryRequest instance using the specified properties.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest$Properties=} [properties] Properties to set
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryRequest} TimeSeriesQueryRequest instance
                 */
                public static create(properties?: cockroach.ts.tspb.TimeSeriesQueryRequest$Properties): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Encodes the specified TimeSeriesQueryRequest message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryRequest.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest$Properties} message TimeSeriesQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.ts.tspb.TimeSeriesQueryRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesQueryRequest message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryRequest.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest$Properties} message TimeSeriesQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesQueryRequest$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesQueryRequest message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryRequest} TimeSeriesQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Decodes a TimeSeriesQueryRequest message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryRequest} TimeSeriesQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Verifies a TimeSeriesQueryRequest message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TimeSeriesQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryRequest} TimeSeriesQueryRequest
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Creates a TimeSeriesQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.ts.tspb.TimeSeriesQueryRequest.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryRequest} TimeSeriesQueryRequest
                 */
                public static from(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryRequest;

                /**
                 * Creates a plain object from a TimeSeriesQueryRequest message. Also converts values to other types if specified.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest} message TimeSeriesQueryRequest
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryRequest, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TimeSeriesQueryRequest message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesQueryRequest to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type TimeSeriesQueryResponse$Properties = {
                results?: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties[];
            };

            /**
             * Constructs a new TimeSeriesQueryResponse.
             * @exports cockroach.ts.tspb.TimeSeriesQueryResponse
             * @constructor
             * @param {cockroach.ts.tspb.TimeSeriesQueryResponse$Properties=} [properties] Properties to set
             */
            class TimeSeriesQueryResponse {

                /**
                 * Constructs a new TimeSeriesQueryResponse.
                 * @exports cockroach.ts.tspb.TimeSeriesQueryResponse
                 * @constructor
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse$Properties=} [properties] Properties to set
                 */
                constructor(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse$Properties);

                /**
                 * TimeSeriesQueryResponse results.
                 * @type {Array.<cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties>}
                 */
                public results: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties[];

                /**
                 * Creates a new TimeSeriesQueryResponse instance using the specified properties.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse$Properties=} [properties] Properties to set
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse} TimeSeriesQueryResponse instance
                 */
                public static create(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse$Properties): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Encodes the specified TimeSeriesQueryResponse message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse$Properties} message TimeSeriesQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: cockroach.ts.tspb.TimeSeriesQueryResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified TimeSeriesQueryResponse message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.verify|verify} messages.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse$Properties} message TimeSeriesQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesQueryResponse$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a TimeSeriesQueryResponse message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse} TimeSeriesQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Decodes a TimeSeriesQueryResponse message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse} TimeSeriesQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Verifies a TimeSeriesQueryResponse message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a TimeSeriesQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse} TimeSeriesQueryResponse
                 */
                public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Creates a TimeSeriesQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link cockroach.ts.tspb.TimeSeriesQueryResponse.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse} TimeSeriesQueryResponse
                 */
                public static from(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse;

                /**
                 * Creates a plain object from a TimeSeriesQueryResponse message. Also converts values to other types if specified.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse} message TimeSeriesQueryResponse
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryResponse, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this TimeSeriesQueryResponse message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this TimeSeriesQueryResponse to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            namespace TimeSeriesQueryResponse {

                type Result$Properties = {
                    query?: cockroach.ts.tspb.Query$Properties;
                    datapoints?: cockroach.ts.tspb.TimeSeriesDatapoint$Properties[];
                };

                /**
                 * Constructs a new Result.
                 * @exports cockroach.ts.tspb.TimeSeriesQueryResponse.Result
                 * @constructor
                 * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties=} [properties] Properties to set
                 */
                class Result {

                    /**
                     * Constructs a new Result.
                     * @exports cockroach.ts.tspb.TimeSeriesQueryResponse.Result
                     * @constructor
                     * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties=} [properties] Properties to set
                     */
                    constructor(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties);

                    /**
                     * Result query.
                     * @type {(cockroach.ts.tspb.Query$Properties|null)}
                     */
                    public query: (cockroach.ts.tspb.Query$Properties|null);

                    /**
                     * Result datapoints.
                     * @type {Array.<cockroach.ts.tspb.TimeSeriesDatapoint$Properties>}
                     */
                    public datapoints: cockroach.ts.tspb.TimeSeriesDatapoint$Properties[];

                    /**
                     * Creates a new Result instance using the specified properties.
                     * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties=} [properties] Properties to set
                     * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} Result instance
                     */
                    public static create(properties?: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Encodes the specified Result message. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.Result.verify|verify} messages.
                     * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties} message Result message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encode(message: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Encodes the specified Result message, length delimited. Does not implicitly {@link cockroach.ts.tspb.TimeSeriesQueryResponse.Result.verify|verify} messages.
                     * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties} message Result message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    public static encodeDelimited(message: cockroach.ts.tspb.TimeSeriesQueryResponse.Result$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                    /**
                     * Decodes a Result message from the specified reader or buffer.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Decodes a Result message from the specified reader or buffer, length delimited.
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Verifies a Result message.
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {?string} `null` if valid, otherwise the reason why it is not
                     */
                    public static verify(message: { [k: string]: any }): string;

                    /**
                     * Creates a Result message from a plain object. Also converts values to their respective internal types.
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} Result
                     */
                    public static fromObject(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Creates a Result message from a plain object. Also converts values to their respective internal types.
                     * This is an alias of {@link cockroach.ts.tspb.TimeSeriesQueryResponse.Result.fromObject}.
                     * @function
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} Result
                     */
                    public static from(object: { [k: string]: any }): cockroach.ts.tspb.TimeSeriesQueryResponse.Result;

                    /**
                     * Creates a plain object from a Result message. Also converts values to other types if specified.
                     * @param {cockroach.ts.tspb.TimeSeriesQueryResponse.Result} message Result
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public static toObject(message: cockroach.ts.tspb.TimeSeriesQueryResponse.Result, options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Creates a plain object from this Result message. Also converts values to other types if specified.
                     * @param {$protobuf.ConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                    /**
                     * Converts this Result to JSON.
                     * @returns {Object.<string,*>} JSON object
                     */
                    public toJSON(): { [k: string]: any };
                }
            }

            /**
             * Constructs a new TimeSeries service.
             * @exports cockroach.ts.tspb.TimeSeries
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            class TimeSeries extends $protobuf.rpc.Service {

                /**
                 * Constructs a new TimeSeries service.
                 * @exports cockroach.ts.tspb.TimeSeries
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                constructor(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean);

                /**
                 * Creates new TimeSeries service using the specified rpc implementation.
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {TimeSeries} RPC service. Useful where requests and/or responses are streamed.
                 */
                public static create(rpcImpl: $protobuf.RPCImpl, requestDelimited?: boolean, responseDelimited?: boolean): TimeSeries;

                /**
                 * Calls Query.
                 * @param {cockroach.ts.tspb.TimeSeriesQueryRequest|Object.<string,*>} request TimeSeriesQueryRequest message or plain object
                 * @param {TimeSeries_query_Callback} callback Node-style callback called with the error, if any, and TimeSeriesQueryResponse
                 * @returns {undefined}
                 */
                public query(request: (cockroach.ts.tspb.TimeSeriesQueryRequest|{ [k: string]: any }), callback: TimeSeries_query_Callback): void;
            }
        }
    }
}

type Admin_users_Callback = (error: Error, response?: cockroach.server.serverpb.UsersResponse) => void;

type Admin_databases_Callback = (error: Error, response?: cockroach.server.serverpb.DatabasesResponse) => void;

type Admin_databaseDetails_Callback = (error: Error, response?: cockroach.server.serverpb.DatabaseDetailsResponse) => void;

type Admin_tableDetails_Callback = (error: Error, response?: cockroach.server.serverpb.TableDetailsResponse) => void;

type Admin_tableStats_Callback = (error: Error, response?: cockroach.server.serverpb.TableStatsResponse) => void;

type Admin_events_Callback = (error: Error, response?: cockroach.server.serverpb.EventsResponse) => void;

type Admin_setUIData_Callback = (error: Error, response?: cockroach.server.serverpb.SetUIDataResponse) => void;

type Admin_getUIData_Callback = (error: Error, response?: cockroach.server.serverpb.GetUIDataResponse) => void;

type Admin_cluster_Callback = (error: Error, response?: cockroach.server.serverpb.ClusterResponse) => void;

type Admin_settings_Callback = (error: Error, response?: cockroach.server.serverpb.SettingsResponse) => void;

type Admin_health_Callback = (error: Error, response?: cockroach.server.serverpb.HealthResponse) => void;

type Admin_liveness_Callback = (error: Error, response?: cockroach.server.serverpb.LivenessResponse) => void;

type Admin_queryPlan_Callback = (error: Error, response?: cockroach.server.serverpb.QueryPlanResponse) => void;

type Admin_drain_Callback = (error: Error, response?: cockroach.server.serverpb.DrainResponse) => void;

type Admin_rangeLog_Callback = (error: Error, response?: cockroach.server.serverpb.RangeLogResponse) => void;

type Status_certificates_Callback = (error: Error, response?: cockroach.server.serverpb.CertificatesResponse) => void;

type Status_details_Callback = (error: Error, response?: cockroach.server.serverpb.DetailsResponse) => void;

type Status_nodes_Callback = (error: Error, response?: cockroach.server.serverpb.NodesResponse) => void;

type Status_node_Callback = (error: Error, response?: cockroach.server.status.NodeStatus) => void;

type Status_raftDebug_Callback = (error: Error, response?: cockroach.server.serverpb.RaftDebugResponse) => void;

type Status_ranges_Callback = (error: Error, response?: cockroach.server.serverpb.RangesResponse) => void;

type Status_gossip_Callback = (error: Error, response?: cockroach.gossip.InfoStatus) => void;

type Status_listSessions_Callback = (error: Error, response?: cockroach.server.serverpb.ListSessionsResponse) => void;

type Status_listLocalSessions_Callback = (error: Error, response?: cockroach.server.serverpb.ListSessionsResponse) => void;

type Status_spanStats_Callback = (error: Error, response?: cockroach.server.serverpb.SpanStatsResponse) => void;

type Status_stacks_Callback = (error: Error, response?: cockroach.server.serverpb.JSONResponse) => void;

type Status_metrics_Callback = (error: Error, response?: cockroach.server.serverpb.JSONResponse) => void;

type Status_logFilesList_Callback = (error: Error, response?: cockroach.server.serverpb.LogFilesListResponse) => void;

type Status_logFile_Callback = (error: Error, response?: cockroach.server.serverpb.LogEntriesResponse) => void;

type Status_logs_Callback = (error: Error, response?: cockroach.server.serverpb.LogEntriesResponse) => void;

type Status_problemRanges_Callback = (error: Error, response?: cockroach.server.serverpb.ProblemRangesResponse) => void;

type Gossip_gossip_Callback = (error: Error, response?: cockroach.gossip.Response) => void;

type TimeSeries_query_Callback = (error: Error, response?: cockroach.ts.tspb.TimeSeriesQueryResponse) => void;

/**
 * Namespace gogoproto.
 * @exports gogoproto
 * @namespace
 */
export namespace gogoproto {
}

/**
 * Namespace google.
 * @exports google
 * @namespace
 */
export namespace google {

    /**
     * Namespace protobuf.
     * @exports google.protobuf
     * @namespace
     */
    namespace protobuf {

        type FileDescriptorSet$Properties = {
            file?: google.protobuf.FileDescriptorProto$Properties[];
        };

        /**
         * Constructs a new FileDescriptorSet.
         * @exports google.protobuf.FileDescriptorSet
         * @constructor
         * @param {google.protobuf.FileDescriptorSet$Properties=} [properties] Properties to set
         */
        class FileDescriptorSet {

            /**
             * Constructs a new FileDescriptorSet.
             * @exports google.protobuf.FileDescriptorSet
             * @constructor
             * @param {google.protobuf.FileDescriptorSet$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.FileDescriptorSet$Properties);

            /**
             * FileDescriptorSet file.
             * @type {Array.<google.protobuf.FileDescriptorProto$Properties>}
             */
            public file: google.protobuf.FileDescriptorProto$Properties[];

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @param {google.protobuf.FileDescriptorSet$Properties=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            public static create(properties?: google.protobuf.FileDescriptorSet$Properties): google.protobuf.FileDescriptorSet;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param {google.protobuf.FileDescriptorSet$Properties} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.FileDescriptorSet$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @param {google.protobuf.FileDescriptorSet$Properties} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.FileDescriptorSet$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorSet;

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorSet;

            /**
             * Verifies a FileDescriptorSet message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorSet;

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.FileDescriptorSet.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            public static from(object: { [k: string]: any }): google.protobuf.FileDescriptorSet;

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorSet, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this FileDescriptorSet message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type FileDescriptorProto$Properties = {
            name?: string;
            "package"?: string;
            dependency?: string[];
            public_dependency?: number[];
            weak_dependency?: number[];
            message_type?: google.protobuf.DescriptorProto$Properties[];
            enum_type?: google.protobuf.EnumDescriptorProto$Properties[];
            service?: google.protobuf.ServiceDescriptorProto$Properties[];
            extension?: google.protobuf.FieldDescriptorProto$Properties[];
            options?: google.protobuf.FileOptions$Properties;
            source_code_info?: google.protobuf.SourceCodeInfo$Properties;
            syntax?: string;
        };

        /**
         * Constructs a new FileDescriptorProto.
         * @exports google.protobuf.FileDescriptorProto
         * @constructor
         * @param {google.protobuf.FileDescriptorProto$Properties=} [properties] Properties to set
         */
        class FileDescriptorProto {

            /**
             * Constructs a new FileDescriptorProto.
             * @exports google.protobuf.FileDescriptorProto
             * @constructor
             * @param {google.protobuf.FileDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.FileDescriptorProto$Properties);

            /**
             * FileDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * FileDescriptorProto package.
             * @type {string}
             */
            public ["package"]: string;

            /**
             * FileDescriptorProto dependency.
             * @type {Array.<string>}
             */
            public dependency: string[];

            /**
             * FileDescriptorProto public_dependency.
             * @type {Array.<number>}
             */
            public public_dependency: number[];

            /**
             * FileDescriptorProto weak_dependency.
             * @type {Array.<number>}
             */
            public weak_dependency: number[];

            /**
             * FileDescriptorProto message_type.
             * @type {Array.<google.protobuf.DescriptorProto$Properties>}
             */
            public message_type: google.protobuf.DescriptorProto$Properties[];

            /**
             * FileDescriptorProto enum_type.
             * @type {Array.<google.protobuf.EnumDescriptorProto$Properties>}
             */
            public enum_type: google.protobuf.EnumDescriptorProto$Properties[];

            /**
             * FileDescriptorProto service.
             * @type {Array.<google.protobuf.ServiceDescriptorProto$Properties>}
             */
            public service: google.protobuf.ServiceDescriptorProto$Properties[];

            /**
             * FileDescriptorProto extension.
             * @type {Array.<google.protobuf.FieldDescriptorProto$Properties>}
             */
            public extension: google.protobuf.FieldDescriptorProto$Properties[];

            /**
             * FileDescriptorProto options.
             * @type {(google.protobuf.FileOptions$Properties|null)}
             */
            public options: (google.protobuf.FileOptions$Properties|null);

            /**
             * FileDescriptorProto source_code_info.
             * @type {(google.protobuf.SourceCodeInfo$Properties|null)}
             */
            public source_code_info: (google.protobuf.SourceCodeInfo$Properties|null);

            /**
             * FileDescriptorProto syntax.
             * @type {string}
             */
            public syntax: string;

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @param {google.protobuf.FileDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            public static create(properties?: google.protobuf.FileDescriptorProto$Properties): google.protobuf.FileDescriptorProto;

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.FileDescriptorProto$Properties} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.FileDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.FileDescriptorProto$Properties} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.FileDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileDescriptorProto;

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileDescriptorProto;

            /**
             * Verifies a FileDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileDescriptorProto;

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.FileDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.FileDescriptorProto;

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.FileDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this FileDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type DescriptorProto$Properties = {
            name?: string;
            field?: google.protobuf.FieldDescriptorProto$Properties[];
            extension?: google.protobuf.FieldDescriptorProto$Properties[];
            nested_type?: google.protobuf.DescriptorProto$Properties[];
            enum_type?: google.protobuf.EnumDescriptorProto$Properties[];
            extension_range?: google.protobuf.DescriptorProto.ExtensionRange$Properties[];
            oneof_decl?: google.protobuf.OneofDescriptorProto$Properties[];
            options?: google.protobuf.MessageOptions$Properties;
            reserved_range?: google.protobuf.DescriptorProto.ReservedRange$Properties[];
            reserved_name?: string[];
        };

        /**
         * Constructs a new DescriptorProto.
         * @exports google.protobuf.DescriptorProto
         * @constructor
         * @param {google.protobuf.DescriptorProto$Properties=} [properties] Properties to set
         */
        class DescriptorProto {

            /**
             * Constructs a new DescriptorProto.
             * @exports google.protobuf.DescriptorProto
             * @constructor
             * @param {google.protobuf.DescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.DescriptorProto$Properties);

            /**
             * DescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * DescriptorProto field.
             * @type {Array.<google.protobuf.FieldDescriptorProto$Properties>}
             */
            public field: google.protobuf.FieldDescriptorProto$Properties[];

            /**
             * DescriptorProto extension.
             * @type {Array.<google.protobuf.FieldDescriptorProto$Properties>}
             */
            public extension: google.protobuf.FieldDescriptorProto$Properties[];

            /**
             * DescriptorProto nested_type.
             * @type {Array.<google.protobuf.DescriptorProto$Properties>}
             */
            public nested_type: google.protobuf.DescriptorProto$Properties[];

            /**
             * DescriptorProto enum_type.
             * @type {Array.<google.protobuf.EnumDescriptorProto$Properties>}
             */
            public enum_type: google.protobuf.EnumDescriptorProto$Properties[];

            /**
             * DescriptorProto extension_range.
             * @type {Array.<google.protobuf.DescriptorProto.ExtensionRange$Properties>}
             */
            public extension_range: google.protobuf.DescriptorProto.ExtensionRange$Properties[];

            /**
             * DescriptorProto oneof_decl.
             * @type {Array.<google.protobuf.OneofDescriptorProto$Properties>}
             */
            public oneof_decl: google.protobuf.OneofDescriptorProto$Properties[];

            /**
             * DescriptorProto options.
             * @type {(google.protobuf.MessageOptions$Properties|null)}
             */
            public options: (google.protobuf.MessageOptions$Properties|null);

            /**
             * DescriptorProto reserved_range.
             * @type {Array.<google.protobuf.DescriptorProto.ReservedRange$Properties>}
             */
            public reserved_range: google.protobuf.DescriptorProto.ReservedRange$Properties[];

            /**
             * DescriptorProto reserved_name.
             * @type {Array.<string>}
             */
            public reserved_name: string[];

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @param {google.protobuf.DescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            public static create(properties?: google.protobuf.DescriptorProto$Properties): google.protobuf.DescriptorProto;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param {google.protobuf.DescriptorProto$Properties} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.DescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @param {google.protobuf.DescriptorProto$Properties} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.DescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto;

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto;

            /**
             * Verifies a DescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto;

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.DescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.DescriptorProto;

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.DescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this DescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this DescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace DescriptorProto {

            type ExtensionRange$Properties = {
                start?: number;
                end?: number;
            };

            /**
             * Constructs a new ExtensionRange.
             * @exports google.protobuf.DescriptorProto.ExtensionRange
             * @constructor
             * @param {google.protobuf.DescriptorProto.ExtensionRange$Properties=} [properties] Properties to set
             */
            class ExtensionRange {

                /**
                 * Constructs a new ExtensionRange.
                 * @exports google.protobuf.DescriptorProto.ExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.ExtensionRange$Properties=} [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.ExtensionRange$Properties);

                /**
                 * ExtensionRange start.
                 * @type {number}
                 */
                public start: number;

                /**
                 * ExtensionRange end.
                 * @type {number}
                 */
                public end: number;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @param {google.protobuf.DescriptorProto.ExtensionRange$Properties=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.ExtensionRange$Properties): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param {google.protobuf.DescriptorProto.ExtensionRange$Properties} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.ExtensionRange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @param {google.protobuf.DescriptorProto.ExtensionRange$Properties} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.ExtensionRange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Verifies an ExtensionRange message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link google.protobuf.DescriptorProto.ExtensionRange.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                public static from(object: { [k: string]: any }): google.protobuf.DescriptorProto.ExtensionRange;

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ExtensionRange, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ExtensionRange message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }

            type ReservedRange$Properties = {
                start?: number;
                end?: number;
            };

            /**
             * Constructs a new ReservedRange.
             * @exports google.protobuf.DescriptorProto.ReservedRange
             * @constructor
             * @param {google.protobuf.DescriptorProto.ReservedRange$Properties=} [properties] Properties to set
             */
            class ReservedRange {

                /**
                 * Constructs a new ReservedRange.
                 * @exports google.protobuf.DescriptorProto.ReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.ReservedRange$Properties=} [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.DescriptorProto.ReservedRange$Properties);

                /**
                 * ReservedRange start.
                 * @type {number}
                 */
                public start: number;

                /**
                 * ReservedRange end.
                 * @type {number}
                 */
                public end: number;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @param {google.protobuf.DescriptorProto.ReservedRange$Properties=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                public static create(properties?: google.protobuf.DescriptorProto.ReservedRange$Properties): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param {google.protobuf.DescriptorProto.ReservedRange$Properties} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: google.protobuf.DescriptorProto.ReservedRange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @param {google.protobuf.DescriptorProto.ReservedRange$Properties} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: google.protobuf.DescriptorProto.ReservedRange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Verifies a ReservedRange message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link google.protobuf.DescriptorProto.ReservedRange.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                public static from(object: { [k: string]: any }): google.protobuf.DescriptorProto.ReservedRange;

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: google.protobuf.DescriptorProto.ReservedRange, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this ReservedRange message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this ReservedRange to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        type FieldDescriptorProto$Properties = {
            name?: string;
            number?: number;
            label?: google.protobuf.FieldDescriptorProto.Label;
            type?: google.protobuf.FieldDescriptorProto.Type;
            type_name?: string;
            extendee?: string;
            default_value?: string;
            oneof_index?: number;
            json_name?: string;
            options?: google.protobuf.FieldOptions$Properties;
        };

        /**
         * Constructs a new FieldDescriptorProto.
         * @exports google.protobuf.FieldDescriptorProto
         * @constructor
         * @param {google.protobuf.FieldDescriptorProto$Properties=} [properties] Properties to set
         */
        class FieldDescriptorProto {

            /**
             * Constructs a new FieldDescriptorProto.
             * @exports google.protobuf.FieldDescriptorProto
             * @constructor
             * @param {google.protobuf.FieldDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.FieldDescriptorProto$Properties);

            /**
             * FieldDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * FieldDescriptorProto number.
             * @type {number}
             */
            public number: number;

            /**
             * FieldDescriptorProto label.
             * @type {google.protobuf.FieldDescriptorProto.Label}
             */
            public label: google.protobuf.FieldDescriptorProto.Label;

            /**
             * FieldDescriptorProto type.
             * @type {google.protobuf.FieldDescriptorProto.Type}
             */
            public type: google.protobuf.FieldDescriptorProto.Type;

            /**
             * FieldDescriptorProto type_name.
             * @type {string}
             */
            public type_name: string;

            /**
             * FieldDescriptorProto extendee.
             * @type {string}
             */
            public extendee: string;

            /**
             * FieldDescriptorProto default_value.
             * @type {string}
             */
            public default_value: string;

            /**
             * FieldDescriptorProto oneof_index.
             * @type {number}
             */
            public oneof_index: number;

            /**
             * FieldDescriptorProto json_name.
             * @type {string}
             */
            public json_name: string;

            /**
             * FieldDescriptorProto options.
             * @type {(google.protobuf.FieldOptions$Properties|null)}
             */
            public options: (google.protobuf.FieldOptions$Properties|null);

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @param {google.protobuf.FieldDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            public static create(properties?: google.protobuf.FieldDescriptorProto$Properties): google.protobuf.FieldDescriptorProto;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.FieldDescriptorProto$Properties} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.FieldDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.FieldDescriptorProto$Properties} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.FieldDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldDescriptorProto;

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldDescriptorProto;

            /**
             * Verifies a FieldDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldDescriptorProto;

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.FieldDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.FieldDescriptorProto;

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.FieldDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this FieldDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldDescriptorProto {

            /**
             * Type enum.
             * @name Type
             * @memberof google.protobuf.FieldDescriptorProto
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            enum Type {
                TYPE_DOUBLE = 1,
                TYPE_FLOAT = 2,
                TYPE_INT64 = 3,
                TYPE_UINT64 = 4,
                TYPE_INT32 = 5,
                TYPE_FIXED64 = 6,
                TYPE_FIXED32 = 7,
                TYPE_BOOL = 8,
                TYPE_STRING = 9,
                TYPE_GROUP = 10,
                TYPE_MESSAGE = 11,
                TYPE_BYTES = 12,
                TYPE_UINT32 = 13,
                TYPE_ENUM = 14,
                TYPE_SFIXED32 = 15,
                TYPE_SFIXED64 = 16,
                TYPE_SINT32 = 17,
                TYPE_SINT64 = 18
            }

            /**
             * Label enum.
             * @name Label
             * @memberof google.protobuf.FieldDescriptorProto
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            enum Label {
                LABEL_OPTIONAL = 1,
                LABEL_REQUIRED = 2,
                LABEL_REPEATED = 3
            }
        }

        type OneofDescriptorProto$Properties = {
            name?: string;
            options?: google.protobuf.OneofOptions$Properties;
        };

        /**
         * Constructs a new OneofDescriptorProto.
         * @exports google.protobuf.OneofDescriptorProto
         * @constructor
         * @param {google.protobuf.OneofDescriptorProto$Properties=} [properties] Properties to set
         */
        class OneofDescriptorProto {

            /**
             * Constructs a new OneofDescriptorProto.
             * @exports google.protobuf.OneofDescriptorProto
             * @constructor
             * @param {google.protobuf.OneofDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.OneofDescriptorProto$Properties);

            /**
             * OneofDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * OneofDescriptorProto options.
             * @type {(google.protobuf.OneofOptions$Properties|null)}
             */
            public options: (google.protobuf.OneofOptions$Properties|null);

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @param {google.protobuf.OneofDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            public static create(properties?: google.protobuf.OneofDescriptorProto$Properties): google.protobuf.OneofDescriptorProto;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.OneofDescriptorProto$Properties} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.OneofDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.OneofDescriptorProto$Properties} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.OneofDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofDescriptorProto;

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofDescriptorProto;

            /**
             * Verifies an OneofDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofDescriptorProto;

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.OneofDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.OneofDescriptorProto;

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.OneofDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this OneofDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type EnumDescriptorProto$Properties = {
            name?: string;
            value?: google.protobuf.EnumValueDescriptorProto$Properties[];
            options?: google.protobuf.EnumOptions$Properties;
        };

        /**
         * Constructs a new EnumDescriptorProto.
         * @exports google.protobuf.EnumDescriptorProto
         * @constructor
         * @param {google.protobuf.EnumDescriptorProto$Properties=} [properties] Properties to set
         */
        class EnumDescriptorProto {

            /**
             * Constructs a new EnumDescriptorProto.
             * @exports google.protobuf.EnumDescriptorProto
             * @constructor
             * @param {google.protobuf.EnumDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.EnumDescriptorProto$Properties);

            /**
             * EnumDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * EnumDescriptorProto value.
             * @type {Array.<google.protobuf.EnumValueDescriptorProto$Properties>}
             */
            public value: google.protobuf.EnumValueDescriptorProto$Properties[];

            /**
             * EnumDescriptorProto options.
             * @type {(google.protobuf.EnumOptions$Properties|null)}
             */
            public options: (google.protobuf.EnumOptions$Properties|null);

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @param {google.protobuf.EnumDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            public static create(properties?: google.protobuf.EnumDescriptorProto$Properties): google.protobuf.EnumDescriptorProto;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.EnumDescriptorProto$Properties} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.EnumDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.EnumDescriptorProto$Properties} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.EnumDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumDescriptorProto;

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumDescriptorProto;

            /**
             * Verifies an EnumDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto;

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.EnumDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.EnumDescriptorProto;

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.EnumDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this EnumDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type EnumValueDescriptorProto$Properties = {
            name?: string;
            number?: number;
            options?: google.protobuf.EnumValueOptions$Properties;
        };

        /**
         * Constructs a new EnumValueDescriptorProto.
         * @exports google.protobuf.EnumValueDescriptorProto
         * @constructor
         * @param {google.protobuf.EnumValueDescriptorProto$Properties=} [properties] Properties to set
         */
        class EnumValueDescriptorProto {

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @exports google.protobuf.EnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.EnumValueDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.EnumValueDescriptorProto$Properties);

            /**
             * EnumValueDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * EnumValueDescriptorProto number.
             * @type {number}
             */
            public number: number;

            /**
             * EnumValueDescriptorProto options.
             * @type {(google.protobuf.EnumValueOptions$Properties|null)}
             */
            public options: (google.protobuf.EnumValueOptions$Properties|null);

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @param {google.protobuf.EnumValueDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            public static create(properties?: google.protobuf.EnumValueDescriptorProto$Properties): google.protobuf.EnumValueDescriptorProto;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.EnumValueDescriptorProto$Properties} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.EnumValueDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.EnumValueDescriptorProto$Properties} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.EnumValueDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueDescriptorProto;

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueDescriptorProto;

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueDescriptorProto;

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.EnumValueDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.EnumValueDescriptorProto;

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.EnumValueDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ServiceDescriptorProto$Properties = {
            name?: string;
            method?: google.protobuf.MethodDescriptorProto$Properties[];
            options?: google.protobuf.ServiceOptions$Properties;
        };

        /**
         * Constructs a new ServiceDescriptorProto.
         * @exports google.protobuf.ServiceDescriptorProto
         * @constructor
         * @param {google.protobuf.ServiceDescriptorProto$Properties=} [properties] Properties to set
         */
        class ServiceDescriptorProto {

            /**
             * Constructs a new ServiceDescriptorProto.
             * @exports google.protobuf.ServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.ServiceDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ServiceDescriptorProto$Properties);

            /**
             * ServiceDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * ServiceDescriptorProto method.
             * @type {Array.<google.protobuf.MethodDescriptorProto$Properties>}
             */
            public method: google.protobuf.MethodDescriptorProto$Properties[];

            /**
             * ServiceDescriptorProto options.
             * @type {(google.protobuf.ServiceOptions$Properties|null)}
             */
            public options: (google.protobuf.ServiceOptions$Properties|null);

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @param {google.protobuf.ServiceDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            public static create(properties?: google.protobuf.ServiceDescriptorProto$Properties): google.protobuf.ServiceDescriptorProto;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.ServiceDescriptorProto$Properties} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.ServiceDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.ServiceDescriptorProto$Properties} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.ServiceDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceDescriptorProto;

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceDescriptorProto;

            /**
             * Verifies a ServiceDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceDescriptorProto;

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.ServiceDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.ServiceDescriptorProto;

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.ServiceDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ServiceDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type MethodDescriptorProto$Properties = {
            name?: string;
            input_type?: string;
            output_type?: string;
            options?: google.protobuf.MethodOptions$Properties;
            client_streaming?: boolean;
            server_streaming?: boolean;
        };

        /**
         * Constructs a new MethodDescriptorProto.
         * @exports google.protobuf.MethodDescriptorProto
         * @constructor
         * @param {google.protobuf.MethodDescriptorProto$Properties=} [properties] Properties to set
         */
        class MethodDescriptorProto {

            /**
             * Constructs a new MethodDescriptorProto.
             * @exports google.protobuf.MethodDescriptorProto
             * @constructor
             * @param {google.protobuf.MethodDescriptorProto$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.MethodDescriptorProto$Properties);

            /**
             * MethodDescriptorProto name.
             * @type {string}
             */
            public name: string;

            /**
             * MethodDescriptorProto input_type.
             * @type {string}
             */
            public input_type: string;

            /**
             * MethodDescriptorProto output_type.
             * @type {string}
             */
            public output_type: string;

            /**
             * MethodDescriptorProto options.
             * @type {(google.protobuf.MethodOptions$Properties|null)}
             */
            public options: (google.protobuf.MethodOptions$Properties|null);

            /**
             * MethodDescriptorProto client_streaming.
             * @type {boolean}
             */
            public client_streaming: boolean;

            /**
             * MethodDescriptorProto server_streaming.
             * @type {boolean}
             */
            public server_streaming: boolean;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @param {google.protobuf.MethodDescriptorProto$Properties=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            public static create(properties?: google.protobuf.MethodDescriptorProto$Properties): google.protobuf.MethodDescriptorProto;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.MethodDescriptorProto$Properties} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.MethodDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @param {google.protobuf.MethodDescriptorProto$Properties} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.MethodDescriptorProto$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodDescriptorProto;

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodDescriptorProto;

            /**
             * Verifies a MethodDescriptorProto message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodDescriptorProto;

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.MethodDescriptorProto.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            public static from(object: { [k: string]: any }): google.protobuf.MethodDescriptorProto;

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.MethodDescriptorProto, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this MethodDescriptorProto message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type FileOptions$Properties = {
            java_package?: string;
            java_outer_classname?: string;
            java_multiple_files?: boolean;
            java_generate_equals_and_hash?: boolean;
            java_string_check_utf8?: boolean;
            optimize_for?: google.protobuf.FileOptions.OptimizeMode;
            go_package?: string;
            cc_generic_services?: boolean;
            java_generic_services?: boolean;
            py_generic_services?: boolean;
            deprecated?: boolean;
            cc_enable_arenas?: boolean;
            objc_class_prefix?: string;
            csharp_namespace?: string;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".gogoproto.goproto_getters_all"?: boolean;
            ".gogoproto.goproto_enum_prefix_all"?: boolean;
            ".gogoproto.goproto_stringer_all"?: boolean;
            ".gogoproto.verbose_equal_all"?: boolean;
            ".gogoproto.face_all"?: boolean;
            ".gogoproto.gostring_all"?: boolean;
            ".gogoproto.populate_all"?: boolean;
            ".gogoproto.stringer_all"?: boolean;
            ".gogoproto.onlyone_all"?: boolean;
            ".gogoproto.equal_all"?: boolean;
            ".gogoproto.description_all"?: boolean;
            ".gogoproto.testgen_all"?: boolean;
            ".gogoproto.benchgen_all"?: boolean;
            ".gogoproto.marshaler_all"?: boolean;
            ".gogoproto.unmarshaler_all"?: boolean;
            ".gogoproto.stable_marshaler_all"?: boolean;
            ".gogoproto.sizer_all"?: boolean;
            ".gogoproto.goproto_enum_stringer_all"?: boolean;
            ".gogoproto.enum_stringer_all"?: boolean;
            ".gogoproto.unsafe_marshaler_all"?: boolean;
            ".gogoproto.unsafe_unmarshaler_all"?: boolean;
            ".gogoproto.goproto_extensions_map_all"?: boolean;
            ".gogoproto.goproto_unrecognized_all"?: boolean;
            ".gogoproto.gogoproto_import"?: boolean;
            ".gogoproto.protosizer_all"?: boolean;
            ".gogoproto.compare_all"?: boolean;
            ".gogoproto.typedecl_all"?: boolean;
            ".gogoproto.enumdecl_all"?: boolean;
            ".gogoproto.goproto_registration"?: boolean;
        };

        /**
         * Constructs a new FileOptions.
         * @exports google.protobuf.FileOptions
         * @constructor
         * @param {google.protobuf.FileOptions$Properties=} [properties] Properties to set
         */
        class FileOptions {

            /**
             * Constructs a new FileOptions.
             * @exports google.protobuf.FileOptions
             * @constructor
             * @param {google.protobuf.FileOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.FileOptions$Properties);

            /**
             * FileOptions java_package.
             * @type {string}
             */
            public java_package: string;

            /**
             * FileOptions java_outer_classname.
             * @type {string}
             */
            public java_outer_classname: string;

            /**
             * FileOptions java_multiple_files.
             * @type {boolean}
             */
            public java_multiple_files: boolean;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @type {boolean}
             */
            public java_generate_equals_and_hash: boolean;

            /**
             * FileOptions java_string_check_utf8.
             * @type {boolean}
             */
            public java_string_check_utf8: boolean;

            /**
             * FileOptions optimize_for.
             * @type {google.protobuf.FileOptions.OptimizeMode}
             */
            public optimize_for: google.protobuf.FileOptions.OptimizeMode;

            /**
             * FileOptions go_package.
             * @type {string}
             */
            public go_package: string;

            /**
             * FileOptions cc_generic_services.
             * @type {boolean}
             */
            public cc_generic_services: boolean;

            /**
             * FileOptions java_generic_services.
             * @type {boolean}
             */
            public java_generic_services: boolean;

            /**
             * FileOptions py_generic_services.
             * @type {boolean}
             */
            public py_generic_services: boolean;

            /**
             * FileOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * FileOptions cc_enable_arenas.
             * @type {boolean}
             */
            public cc_enable_arenas: boolean;

            /**
             * FileOptions objc_class_prefix.
             * @type {string}
             */
            public objc_class_prefix: string;

            /**
             * FileOptions csharp_namespace.
             * @type {string}
             */
            public csharp_namespace: string;

            /**
             * FileOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_getters_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_enum_prefix_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_stringer_all"]: boolean;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @type {boolean}
             */
            public [".gogoproto.verbose_equal_all"]: boolean;

            /**
             * FileOptions .gogoproto.face_all.
             * @type {boolean}
             */
            public [".gogoproto.face_all"]: boolean;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @type {boolean}
             */
            public [".gogoproto.gostring_all"]: boolean;

            /**
             * FileOptions .gogoproto.populate_all.
             * @type {boolean}
             */
            public [".gogoproto.populate_all"]: boolean;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @type {boolean}
             */
            public [".gogoproto.stringer_all"]: boolean;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @type {boolean}
             */
            public [".gogoproto.onlyone_all"]: boolean;

            /**
             * FileOptions .gogoproto.equal_all.
             * @type {boolean}
             */
            public [".gogoproto.equal_all"]: boolean;

            /**
             * FileOptions .gogoproto.description_all.
             * @type {boolean}
             */
            public [".gogoproto.description_all"]: boolean;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @type {boolean}
             */
            public [".gogoproto.testgen_all"]: boolean;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @type {boolean}
             */
            public [".gogoproto.benchgen_all"]: boolean;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @type {boolean}
             */
            public [".gogoproto.marshaler_all"]: boolean;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @type {boolean}
             */
            public [".gogoproto.unmarshaler_all"]: boolean;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @type {boolean}
             */
            public [".gogoproto.stable_marshaler_all"]: boolean;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @type {boolean}
             */
            public [".gogoproto.sizer_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_enum_stringer_all"]: boolean;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @type {boolean}
             */
            public [".gogoproto.enum_stringer_all"]: boolean;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @type {boolean}
             */
            public [".gogoproto.unsafe_marshaler_all"]: boolean;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @type {boolean}
             */
            public [".gogoproto.unsafe_unmarshaler_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_extensions_map_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @type {boolean}
             */
            public [".gogoproto.goproto_unrecognized_all"]: boolean;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @type {boolean}
             */
            public [".gogoproto.gogoproto_import"]: boolean;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @type {boolean}
             */
            public [".gogoproto.protosizer_all"]: boolean;

            /**
             * FileOptions .gogoproto.compare_all.
             * @type {boolean}
             */
            public [".gogoproto.compare_all"]: boolean;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @type {boolean}
             */
            public [".gogoproto.typedecl_all"]: boolean;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @type {boolean}
             */
            public [".gogoproto.enumdecl_all"]: boolean;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @type {boolean}
             */
            public [".gogoproto.goproto_registration"]: boolean;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @param {google.protobuf.FileOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            public static create(properties?: google.protobuf.FileOptions$Properties): google.protobuf.FileOptions;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param {google.protobuf.FileOptions$Properties} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.FileOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @param {google.protobuf.FileOptions$Properties} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.FileOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FileOptions;

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FileOptions;

            /**
             * Verifies a FileOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FileOptions;

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.FileOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.FileOptions;

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.FileOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this FileOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this FileOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FileOptions {

            /**
             * OptimizeMode enum.
             * @name OptimizeMode
             * @memberof google.protobuf.FileOptions
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            enum OptimizeMode {
                SPEED = 1,
                CODE_SIZE = 2,
                LITE_RUNTIME = 3
            }
        }

        type MessageOptions$Properties = {
            message_set_wire_format?: boolean;
            no_standard_descriptor_accessor?: boolean;
            deprecated?: boolean;
            map_entry?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".gogoproto.goproto_getters"?: boolean;
            ".gogoproto.goproto_stringer"?: boolean;
            ".gogoproto.verbose_equal"?: boolean;
            ".gogoproto.face"?: boolean;
            ".gogoproto.gostring"?: boolean;
            ".gogoproto.populate"?: boolean;
            ".gogoproto.stringer"?: boolean;
            ".gogoproto.onlyone"?: boolean;
            ".gogoproto.equal"?: boolean;
            ".gogoproto.description"?: boolean;
            ".gogoproto.testgen"?: boolean;
            ".gogoproto.benchgen"?: boolean;
            ".gogoproto.marshaler"?: boolean;
            ".gogoproto.unmarshaler"?: boolean;
            ".gogoproto.stable_marshaler"?: boolean;
            ".gogoproto.sizer"?: boolean;
            ".gogoproto.unsafe_marshaler"?: boolean;
            ".gogoproto.unsafe_unmarshaler"?: boolean;
            ".gogoproto.goproto_extensions_map"?: boolean;
            ".gogoproto.goproto_unrecognized"?: boolean;
            ".gogoproto.protosizer"?: boolean;
            ".gogoproto.compare"?: boolean;
            ".gogoproto.typedecl"?: boolean;
        };

        /**
         * Constructs a new MessageOptions.
         * @exports google.protobuf.MessageOptions
         * @constructor
         * @param {google.protobuf.MessageOptions$Properties=} [properties] Properties to set
         */
        class MessageOptions {

            /**
             * Constructs a new MessageOptions.
             * @exports google.protobuf.MessageOptions
             * @constructor
             * @param {google.protobuf.MessageOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.MessageOptions$Properties);

            /**
             * MessageOptions message_set_wire_format.
             * @type {boolean}
             */
            public message_set_wire_format: boolean;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @type {boolean}
             */
            public no_standard_descriptor_accessor: boolean;

            /**
             * MessageOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * MessageOptions map_entry.
             * @type {boolean}
             */
            public map_entry: boolean;

            /**
             * MessageOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @type {boolean}
             */
            public [".gogoproto.goproto_getters"]: boolean;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @type {boolean}
             */
            public [".gogoproto.goproto_stringer"]: boolean;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @type {boolean}
             */
            public [".gogoproto.verbose_equal"]: boolean;

            /**
             * MessageOptions .gogoproto.face.
             * @type {boolean}
             */
            public [".gogoproto.face"]: boolean;

            /**
             * MessageOptions .gogoproto.gostring.
             * @type {boolean}
             */
            public [".gogoproto.gostring"]: boolean;

            /**
             * MessageOptions .gogoproto.populate.
             * @type {boolean}
             */
            public [".gogoproto.populate"]: boolean;

            /**
             * MessageOptions .gogoproto.stringer.
             * @type {boolean}
             */
            public [".gogoproto.stringer"]: boolean;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @type {boolean}
             */
            public [".gogoproto.onlyone"]: boolean;

            /**
             * MessageOptions .gogoproto.equal.
             * @type {boolean}
             */
            public [".gogoproto.equal"]: boolean;

            /**
             * MessageOptions .gogoproto.description.
             * @type {boolean}
             */
            public [".gogoproto.description"]: boolean;

            /**
             * MessageOptions .gogoproto.testgen.
             * @type {boolean}
             */
            public [".gogoproto.testgen"]: boolean;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @type {boolean}
             */
            public [".gogoproto.benchgen"]: boolean;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @type {boolean}
             */
            public [".gogoproto.marshaler"]: boolean;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @type {boolean}
             */
            public [".gogoproto.unmarshaler"]: boolean;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @type {boolean}
             */
            public [".gogoproto.stable_marshaler"]: boolean;

            /**
             * MessageOptions .gogoproto.sizer.
             * @type {boolean}
             */
            public [".gogoproto.sizer"]: boolean;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @type {boolean}
             */
            public [".gogoproto.unsafe_marshaler"]: boolean;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @type {boolean}
             */
            public [".gogoproto.unsafe_unmarshaler"]: boolean;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @type {boolean}
             */
            public [".gogoproto.goproto_extensions_map"]: boolean;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @type {boolean}
             */
            public [".gogoproto.goproto_unrecognized"]: boolean;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @type {boolean}
             */
            public [".gogoproto.protosizer"]: boolean;

            /**
             * MessageOptions .gogoproto.compare.
             * @type {boolean}
             */
            public [".gogoproto.compare"]: boolean;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @type {boolean}
             */
            public [".gogoproto.typedecl"]: boolean;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @param {google.protobuf.MessageOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            public static create(properties?: google.protobuf.MessageOptions$Properties): google.protobuf.MessageOptions;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param {google.protobuf.MessageOptions$Properties} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.MessageOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @param {google.protobuf.MessageOptions$Properties} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.MessageOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MessageOptions;

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MessageOptions;

            /**
             * Verifies a MessageOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MessageOptions;

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.MessageOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.MessageOptions;

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.MessageOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this MessageOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this MessageOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type FieldOptions$Properties = {
            ctype?: google.protobuf.FieldOptions.CType;
            packed?: boolean;
            jstype?: google.protobuf.FieldOptions.JSType;
            lazy?: boolean;
            deprecated?: boolean;
            weak?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".gogoproto.nullable"?: boolean;
            ".gogoproto.embed"?: boolean;
            ".gogoproto.customtype"?: string;
            ".gogoproto.customname"?: string;
            ".gogoproto.jsontag"?: string;
            ".gogoproto.moretags"?: string;
            ".gogoproto.casttype"?: string;
            ".gogoproto.castkey"?: string;
            ".gogoproto.castvalue"?: string;
            ".gogoproto.stdtime"?: boolean;
            ".gogoproto.stdduration"?: boolean;
        };

        /**
         * Constructs a new FieldOptions.
         * @exports google.protobuf.FieldOptions
         * @constructor
         * @param {google.protobuf.FieldOptions$Properties=} [properties] Properties to set
         */
        class FieldOptions {

            /**
             * Constructs a new FieldOptions.
             * @exports google.protobuf.FieldOptions
             * @constructor
             * @param {google.protobuf.FieldOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.FieldOptions$Properties);

            /**
             * FieldOptions ctype.
             * @type {google.protobuf.FieldOptions.CType}
             */
            public ctype: google.protobuf.FieldOptions.CType;

            /**
             * FieldOptions packed.
             * @type {boolean}
             */
            public packed: boolean;

            /**
             * FieldOptions jstype.
             * @type {google.protobuf.FieldOptions.JSType}
             */
            public jstype: google.protobuf.FieldOptions.JSType;

            /**
             * FieldOptions lazy.
             * @type {boolean}
             */
            public lazy: boolean;

            /**
             * FieldOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * FieldOptions weak.
             * @type {boolean}
             */
            public weak: boolean;

            /**
             * FieldOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * FieldOptions .gogoproto.nullable.
             * @type {boolean}
             */
            public [".gogoproto.nullable"]: boolean;

            /**
             * FieldOptions .gogoproto.embed.
             * @type {boolean}
             */
            public [".gogoproto.embed"]: boolean;

            /**
             * FieldOptions .gogoproto.customtype.
             * @type {string}
             */
            public [".gogoproto.customtype"]: string;

            /**
             * FieldOptions .gogoproto.customname.
             * @type {string}
             */
            public [".gogoproto.customname"]: string;

            /**
             * FieldOptions .gogoproto.jsontag.
             * @type {string}
             */
            public [".gogoproto.jsontag"]: string;

            /**
             * FieldOptions .gogoproto.moretags.
             * @type {string}
             */
            public [".gogoproto.moretags"]: string;

            /**
             * FieldOptions .gogoproto.casttype.
             * @type {string}
             */
            public [".gogoproto.casttype"]: string;

            /**
             * FieldOptions .gogoproto.castkey.
             * @type {string}
             */
            public [".gogoproto.castkey"]: string;

            /**
             * FieldOptions .gogoproto.castvalue.
             * @type {string}
             */
            public [".gogoproto.castvalue"]: string;

            /**
             * FieldOptions .gogoproto.stdtime.
             * @type {boolean}
             */
            public [".gogoproto.stdtime"]: boolean;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @type {boolean}
             */
            public [".gogoproto.stdduration"]: boolean;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @param {google.protobuf.FieldOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            public static create(properties?: google.protobuf.FieldOptions$Properties): google.protobuf.FieldOptions;

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param {google.protobuf.FieldOptions$Properties} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.FieldOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @param {google.protobuf.FieldOptions$Properties} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.FieldOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.FieldOptions;

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.FieldOptions;

            /**
             * Verifies a FieldOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.FieldOptions;

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.FieldOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.FieldOptions;

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.FieldOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this FieldOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this FieldOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace FieldOptions {

            /**
             * CType enum.
             * @name CType
             * @memberof google.protobuf.FieldOptions
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            enum CType {
                STRING = 0,
                CORD = 1,
                STRING_PIECE = 2
            }

            /**
             * JSType enum.
             * @name JSType
             * @memberof google.protobuf.FieldOptions
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            enum JSType {
                JS_NORMAL = 0,
                JS_STRING = 1,
                JS_NUMBER = 2
            }
        }

        type OneofOptions$Properties = {
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
        };

        /**
         * Constructs a new OneofOptions.
         * @exports google.protobuf.OneofOptions
         * @constructor
         * @param {google.protobuf.OneofOptions$Properties=} [properties] Properties to set
         */
        class OneofOptions {

            /**
             * Constructs a new OneofOptions.
             * @exports google.protobuf.OneofOptions
             * @constructor
             * @param {google.protobuf.OneofOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.OneofOptions$Properties);

            /**
             * OneofOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @param {google.protobuf.OneofOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            public static create(properties?: google.protobuf.OneofOptions$Properties): google.protobuf.OneofOptions;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param {google.protobuf.OneofOptions$Properties} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.OneofOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @param {google.protobuf.OneofOptions$Properties} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.OneofOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.OneofOptions;

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.OneofOptions;

            /**
             * Verifies an OneofOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.OneofOptions;

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.OneofOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.OneofOptions;

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.OneofOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this OneofOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this OneofOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type EnumOptions$Properties = {
            allow_alias?: boolean;
            deprecated?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".gogoproto.goproto_enum_prefix"?: boolean;
            ".gogoproto.goproto_enum_stringer"?: boolean;
            ".gogoproto.enum_stringer"?: boolean;
            ".gogoproto.enum_customname"?: string;
            ".gogoproto.enumdecl"?: boolean;
        };

        /**
         * Constructs a new EnumOptions.
         * @exports google.protobuf.EnumOptions
         * @constructor
         * @param {google.protobuf.EnumOptions$Properties=} [properties] Properties to set
         */
        class EnumOptions {

            /**
             * Constructs a new EnumOptions.
             * @exports google.protobuf.EnumOptions
             * @constructor
             * @param {google.protobuf.EnumOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.EnumOptions$Properties);

            /**
             * EnumOptions allow_alias.
             * @type {boolean}
             */
            public allow_alias: boolean;

            /**
             * EnumOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * EnumOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @type {boolean}
             */
            public [".gogoproto.goproto_enum_prefix"]: boolean;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @type {boolean}
             */
            public [".gogoproto.goproto_enum_stringer"]: boolean;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @type {boolean}
             */
            public [".gogoproto.enum_stringer"]: boolean;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @type {string}
             */
            public [".gogoproto.enum_customname"]: string;

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @type {boolean}
             */
            public [".gogoproto.enumdecl"]: boolean;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @param {google.protobuf.EnumOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            public static create(properties?: google.protobuf.EnumOptions$Properties): google.protobuf.EnumOptions;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param {google.protobuf.EnumOptions$Properties} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.EnumOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @param {google.protobuf.EnumOptions$Properties} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.EnumOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumOptions;

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumOptions;

            /**
             * Verifies an EnumOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumOptions;

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.EnumOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.EnumOptions;

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.EnumOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this EnumOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type EnumValueOptions$Properties = {
            deprecated?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".gogoproto.enumvalue_customname"?: string;
        };

        /**
         * Constructs a new EnumValueOptions.
         * @exports google.protobuf.EnumValueOptions
         * @constructor
         * @param {google.protobuf.EnumValueOptions$Properties=} [properties] Properties to set
         */
        class EnumValueOptions {

            /**
             * Constructs a new EnumValueOptions.
             * @exports google.protobuf.EnumValueOptions
             * @constructor
             * @param {google.protobuf.EnumValueOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.EnumValueOptions$Properties);

            /**
             * EnumValueOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * EnumValueOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @type {string}
             */
            public [".gogoproto.enumvalue_customname"]: string;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @param {google.protobuf.EnumValueOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            public static create(properties?: google.protobuf.EnumValueOptions$Properties): google.protobuf.EnumValueOptions;

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param {google.protobuf.EnumValueOptions$Properties} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.EnumValueOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @param {google.protobuf.EnumValueOptions$Properties} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.EnumValueOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.EnumValueOptions;

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.EnumValueOptions;

            /**
             * Verifies an EnumValueOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.EnumValueOptions;

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.EnumValueOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.EnumValueOptions;

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.EnumValueOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this EnumValueOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this EnumValueOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type ServiceOptions$Properties = {
            deprecated?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
        };

        /**
         * Constructs a new ServiceOptions.
         * @exports google.protobuf.ServiceOptions
         * @constructor
         * @param {google.protobuf.ServiceOptions$Properties=} [properties] Properties to set
         */
        class ServiceOptions {

            /**
             * Constructs a new ServiceOptions.
             * @exports google.protobuf.ServiceOptions
             * @constructor
             * @param {google.protobuf.ServiceOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.ServiceOptions$Properties);

            /**
             * ServiceOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * ServiceOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @param {google.protobuf.ServiceOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            public static create(properties?: google.protobuf.ServiceOptions$Properties): google.protobuf.ServiceOptions;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param {google.protobuf.ServiceOptions$Properties} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.ServiceOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @param {google.protobuf.ServiceOptions$Properties} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.ServiceOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.ServiceOptions;

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.ServiceOptions;

            /**
             * Verifies a ServiceOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.ServiceOptions;

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.ServiceOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.ServiceOptions;

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.ServiceOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this ServiceOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this ServiceOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type MethodOptions$Properties = {
            deprecated?: boolean;
            uninterpreted_option?: google.protobuf.UninterpretedOption$Properties[];
            ".google.api.http"?: google.api.HttpRule$Properties;
        };

        /**
         * Constructs a new MethodOptions.
         * @exports google.protobuf.MethodOptions
         * @constructor
         * @param {google.protobuf.MethodOptions$Properties=} [properties] Properties to set
         */
        class MethodOptions {

            /**
             * Constructs a new MethodOptions.
             * @exports google.protobuf.MethodOptions
             * @constructor
             * @param {google.protobuf.MethodOptions$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.MethodOptions$Properties);

            /**
             * MethodOptions deprecated.
             * @type {boolean}
             */
            public deprecated: boolean;

            /**
             * MethodOptions uninterpreted_option.
             * @type {Array.<google.protobuf.UninterpretedOption$Properties>}
             */
            public uninterpreted_option: google.protobuf.UninterpretedOption$Properties[];

            /**
             * MethodOptions .google.api.http.
             * @type {(google.api.HttpRule$Properties|null)}
             */
            public [".google.api.http"]: (google.api.HttpRule$Properties|null);

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @param {google.protobuf.MethodOptions$Properties=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            public static create(properties?: google.protobuf.MethodOptions$Properties): google.protobuf.MethodOptions;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param {google.protobuf.MethodOptions$Properties} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.MethodOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @param {google.protobuf.MethodOptions$Properties} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.MethodOptions$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.MethodOptions;

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.MethodOptions;

            /**
             * Verifies a MethodOptions message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.MethodOptions;

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.MethodOptions.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            public static from(object: { [k: string]: any }): google.protobuf.MethodOptions;

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.MethodOptions, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this MethodOptions message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this MethodOptions to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type UninterpretedOption$Properties = {
            name?: google.protobuf.UninterpretedOption.NamePart$Properties[];
            identifier_value?: string;
            positive_int_value?: Long;
            negative_int_value?: Long;
            double_value?: number;
            string_value?: Uint8Array;
            aggregate_value?: string;
        };

        /**
         * Constructs a new UninterpretedOption.
         * @exports google.protobuf.UninterpretedOption
         * @constructor
         * @param {google.protobuf.UninterpretedOption$Properties=} [properties] Properties to set
         */
        class UninterpretedOption {

            /**
             * Constructs a new UninterpretedOption.
             * @exports google.protobuf.UninterpretedOption
             * @constructor
             * @param {google.protobuf.UninterpretedOption$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.UninterpretedOption$Properties);

            /**
             * UninterpretedOption name.
             * @type {Array.<google.protobuf.UninterpretedOption.NamePart$Properties>}
             */
            public name: google.protobuf.UninterpretedOption.NamePart$Properties[];

            /**
             * UninterpretedOption identifier_value.
             * @type {string}
             */
            public identifier_value: string;

            /**
             * UninterpretedOption positive_int_value.
             * @type {Long}
             */
            public positive_int_value: Long;

            /**
             * UninterpretedOption negative_int_value.
             * @type {Long}
             */
            public negative_int_value: Long;

            /**
             * UninterpretedOption double_value.
             * @type {number}
             */
            public double_value: number;

            /**
             * UninterpretedOption string_value.
             * @type {Uint8Array}
             */
            public string_value: Uint8Array;

            /**
             * UninterpretedOption aggregate_value.
             * @type {string}
             */
            public aggregate_value: string;

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @param {google.protobuf.UninterpretedOption$Properties=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            public static create(properties?: google.protobuf.UninterpretedOption$Properties): google.protobuf.UninterpretedOption;

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param {google.protobuf.UninterpretedOption$Properties} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.UninterpretedOption$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @param {google.protobuf.UninterpretedOption$Properties} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.UninterpretedOption$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption;

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption;

            /**
             * Verifies an UninterpretedOption message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption;

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.UninterpretedOption.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            public static from(object: { [k: string]: any }): google.protobuf.UninterpretedOption;

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.UninterpretedOption, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this UninterpretedOption message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this UninterpretedOption to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace UninterpretedOption {

            type NamePart$Properties = {
                name_part: string;
                is_extension: boolean;
            };

            /**
             * Constructs a new NamePart.
             * @exports google.protobuf.UninterpretedOption.NamePart
             * @constructor
             * @param {google.protobuf.UninterpretedOption.NamePart$Properties=} [properties] Properties to set
             */
            class NamePart {

                /**
                 * Constructs a new NamePart.
                 * @exports google.protobuf.UninterpretedOption.NamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.NamePart$Properties=} [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.UninterpretedOption.NamePart$Properties);

                /**
                 * NamePart name_part.
                 * @type {string}
                 */
                public name_part: string;

                /**
                 * NamePart is_extension.
                 * @type {boolean}
                 */
                public is_extension: boolean;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @param {google.protobuf.UninterpretedOption.NamePart$Properties=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                public static create(properties?: google.protobuf.UninterpretedOption.NamePart$Properties): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param {google.protobuf.UninterpretedOption.NamePart$Properties} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: google.protobuf.UninterpretedOption.NamePart$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @param {google.protobuf.UninterpretedOption.NamePart$Properties} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: google.protobuf.UninterpretedOption.NamePart$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Verifies a NamePart message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link google.protobuf.UninterpretedOption.NamePart.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                public static from(object: { [k: string]: any }): google.protobuf.UninterpretedOption.NamePart;

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: google.protobuf.UninterpretedOption.NamePart, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this NamePart message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this NamePart to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        type SourceCodeInfo$Properties = {
            location?: google.protobuf.SourceCodeInfo.Location$Properties[];
        };

        /**
         * Constructs a new SourceCodeInfo.
         * @exports google.protobuf.SourceCodeInfo
         * @constructor
         * @param {google.protobuf.SourceCodeInfo$Properties=} [properties] Properties to set
         */
        class SourceCodeInfo {

            /**
             * Constructs a new SourceCodeInfo.
             * @exports google.protobuf.SourceCodeInfo
             * @constructor
             * @param {google.protobuf.SourceCodeInfo$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.SourceCodeInfo$Properties);

            /**
             * SourceCodeInfo location.
             * @type {Array.<google.protobuf.SourceCodeInfo.Location$Properties>}
             */
            public location: google.protobuf.SourceCodeInfo.Location$Properties[];

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @param {google.protobuf.SourceCodeInfo$Properties=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            public static create(properties?: google.protobuf.SourceCodeInfo$Properties): google.protobuf.SourceCodeInfo;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param {google.protobuf.SourceCodeInfo$Properties} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.SourceCodeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @param {google.protobuf.SourceCodeInfo$Properties} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.SourceCodeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo;

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo;

            /**
             * Verifies a SourceCodeInfo message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo;

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.SourceCodeInfo.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            public static from(object: { [k: string]: any }): google.protobuf.SourceCodeInfo;

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.SourceCodeInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this SourceCodeInfo message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace SourceCodeInfo {

            type Location$Properties = {
                path?: number[];
                span?: number[];
                leading_comments?: string;
                trailing_comments?: string;
                leading_detached_comments?: string[];
            };

            /**
             * Constructs a new Location.
             * @exports google.protobuf.SourceCodeInfo.Location
             * @constructor
             * @param {google.protobuf.SourceCodeInfo.Location$Properties=} [properties] Properties to set
             */
            class Location {

                /**
                 * Constructs a new Location.
                 * @exports google.protobuf.SourceCodeInfo.Location
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.Location$Properties=} [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.SourceCodeInfo.Location$Properties);

                /**
                 * Location path.
                 * @type {Array.<number>}
                 */
                public path: number[];

                /**
                 * Location span.
                 * @type {Array.<number>}
                 */
                public span: number[];

                /**
                 * Location leading_comments.
                 * @type {string}
                 */
                public leading_comments: string;

                /**
                 * Location trailing_comments.
                 * @type {string}
                 */
                public trailing_comments: string;

                /**
                 * Location leading_detached_comments.
                 * @type {Array.<string>}
                 */
                public leading_detached_comments: string[];

                /**
                 * Creates a new Location instance using the specified properties.
                 * @param {google.protobuf.SourceCodeInfo.Location$Properties=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                public static create(properties?: google.protobuf.SourceCodeInfo.Location$Properties): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param {google.protobuf.SourceCodeInfo.Location$Properties} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: google.protobuf.SourceCodeInfo.Location$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @param {google.protobuf.SourceCodeInfo.Location$Properties} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: google.protobuf.SourceCodeInfo.Location$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Verifies a Location message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link google.protobuf.SourceCodeInfo.Location.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                public static from(object: { [k: string]: any }): google.protobuf.SourceCodeInfo.Location;

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: google.protobuf.SourceCodeInfo.Location, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Location message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Location to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        type GeneratedCodeInfo$Properties = {
            annotation?: google.protobuf.GeneratedCodeInfo.Annotation$Properties[];
        };

        /**
         * Constructs a new GeneratedCodeInfo.
         * @exports google.protobuf.GeneratedCodeInfo
         * @constructor
         * @param {google.protobuf.GeneratedCodeInfo$Properties=} [properties] Properties to set
         */
        class GeneratedCodeInfo {

            /**
             * Constructs a new GeneratedCodeInfo.
             * @exports google.protobuf.GeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.GeneratedCodeInfo$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.GeneratedCodeInfo$Properties);

            /**
             * GeneratedCodeInfo annotation.
             * @type {Array.<google.protobuf.GeneratedCodeInfo.Annotation$Properties>}
             */
            public annotation: google.protobuf.GeneratedCodeInfo.Annotation$Properties[];

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @param {google.protobuf.GeneratedCodeInfo$Properties=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            public static create(properties?: google.protobuf.GeneratedCodeInfo$Properties): google.protobuf.GeneratedCodeInfo;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param {google.protobuf.GeneratedCodeInfo$Properties} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.GeneratedCodeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @param {google.protobuf.GeneratedCodeInfo$Properties} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.GeneratedCodeInfo$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo;

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo;

            /**
             * Verifies a GeneratedCodeInfo message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo;

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.GeneratedCodeInfo.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            public static from(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo;

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.GeneratedCodeInfo, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this GeneratedCodeInfo message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        namespace GeneratedCodeInfo {

            type Annotation$Properties = {
                path?: number[];
                source_file?: string;
                begin?: number;
                end?: number;
            };

            /**
             * Constructs a new Annotation.
             * @exports google.protobuf.GeneratedCodeInfo.Annotation
             * @constructor
             * @param {google.protobuf.GeneratedCodeInfo.Annotation$Properties=} [properties] Properties to set
             */
            class Annotation {

                /**
                 * Constructs a new Annotation.
                 * @exports google.protobuf.GeneratedCodeInfo.Annotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation$Properties=} [properties] Properties to set
                 */
                constructor(properties?: google.protobuf.GeneratedCodeInfo.Annotation$Properties);

                /**
                 * Annotation path.
                 * @type {Array.<number>}
                 */
                public path: number[];

                /**
                 * Annotation source_file.
                 * @type {string}
                 */
                public source_file: string;

                /**
                 * Annotation begin.
                 * @type {number}
                 */
                public begin: number;

                /**
                 * Annotation end.
                 * @type {number}
                 */
                public end: number;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation$Properties=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                public static create(properties?: google.protobuf.GeneratedCodeInfo.Annotation$Properties): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation$Properties} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encode(message: google.protobuf.GeneratedCodeInfo.Annotation$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation$Properties} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                public static encodeDelimited(message: google.protobuf.GeneratedCodeInfo.Annotation$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Verifies an Annotation message.
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {?string} `null` if valid, otherwise the reason why it is not
                 */
                public static verify(message: { [k: string]: any }): string;

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                public static fromObject(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * This is an alias of {@link google.protobuf.GeneratedCodeInfo.Annotation.fromObject}.
                 * @function
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                public static from(object: { [k: string]: any }): google.protobuf.GeneratedCodeInfo.Annotation;

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public static toObject(message: google.protobuf.GeneratedCodeInfo.Annotation, options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Creates a plain object from this Annotation message. Also converts values to other types if specified.
                 * @param {$protobuf.ConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

                /**
                 * Converts this Annotation to JSON.
                 * @returns {Object.<string,*>} JSON object
                 */
                public toJSON(): { [k: string]: any };
            }
        }

        type Timestamp$Properties = {
            seconds?: Long;
            nanos?: number;
        };

        /**
         * Constructs a new Timestamp.
         * @exports google.protobuf.Timestamp
         * @constructor
         * @param {google.protobuf.Timestamp$Properties=} [properties] Properties to set
         */
        class Timestamp {

            /**
             * Constructs a new Timestamp.
             * @exports google.protobuf.Timestamp
             * @constructor
             * @param {google.protobuf.Timestamp$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.protobuf.Timestamp$Properties);

            /**
             * Timestamp seconds.
             * @type {Long}
             */
            public seconds: Long;

            /**
             * Timestamp nanos.
             * @type {number}
             */
            public nanos: number;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @param {google.protobuf.Timestamp$Properties=} [properties] Properties to set
             * @returns {google.protobuf.Timestamp} Timestamp instance
             */
            public static create(properties?: google.protobuf.Timestamp$Properties): google.protobuf.Timestamp;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param {google.protobuf.Timestamp$Properties} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.protobuf.Timestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @param {google.protobuf.Timestamp$Properties} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.protobuf.Timestamp$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.protobuf.Timestamp;

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.protobuf.Timestamp;

            /**
             * Verifies a Timestamp message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            public static fromObject(object: { [k: string]: any }): google.protobuf.Timestamp;

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.protobuf.Timestamp.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            public static from(object: { [k: string]: any }): google.protobuf.Timestamp;

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.protobuf.Timestamp, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this Timestamp message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this Timestamp to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }

    /**
     * Namespace api.
     * @exports google.api
     * @namespace
     */
    namespace api {

        type HttpRule$Properties = {
            get?: string;
            put?: string;
            post?: string;
            "delete"?: string;
            patch?: string;
            custom?: google.api.CustomHttpPattern$Properties;
            body?: string;
            additional_bindings?: google.api.HttpRule$Properties[];
        };

        /**
         * Constructs a new HttpRule.
         * @exports google.api.HttpRule
         * @constructor
         * @param {google.api.HttpRule$Properties=} [properties] Properties to set
         */
        class HttpRule {

            /**
             * Constructs a new HttpRule.
             * @exports google.api.HttpRule
             * @constructor
             * @param {google.api.HttpRule$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.api.HttpRule$Properties);

            /**
             * HttpRule get.
             * @type {string}
             */
            public get: string;

            /**
             * HttpRule put.
             * @type {string}
             */
            public put: string;

            /**
             * HttpRule post.
             * @type {string}
             */
            public post: string;

            /**
             * HttpRule delete.
             * @type {string}
             */
            public ["delete"]: string;

            /**
             * HttpRule patch.
             * @type {string}
             */
            public patch: string;

            /**
             * HttpRule custom.
             * @type {(google.api.CustomHttpPattern$Properties|null)}
             */
            public custom: (google.api.CustomHttpPattern$Properties|null);

            /**
             * HttpRule body.
             * @type {string}
             */
            public body: string;

            /**
             * HttpRule additional_bindings.
             * @type {Array.<google.api.HttpRule$Properties>}
             */
            public additional_bindings: google.api.HttpRule$Properties[];

            /**
             * HttpRule pattern.
             * @name google.api.HttpRule#pattern
             * @type {string|undefined}
             */
            public pattern?: string;

            /**
             * Creates a new HttpRule instance using the specified properties.
             * @param {google.api.HttpRule$Properties=} [properties] Properties to set
             * @returns {google.api.HttpRule} HttpRule instance
             */
            public static create(properties?: google.api.HttpRule$Properties): google.api.HttpRule;

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @param {google.api.HttpRule$Properties} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.api.HttpRule$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @param {google.api.HttpRule$Properties} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.api.HttpRule$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.api.HttpRule;

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.api.HttpRule;

            /**
             * Verifies a HttpRule message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            public static fromObject(object: { [k: string]: any }): google.api.HttpRule;

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.api.HttpRule.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            public static from(object: { [k: string]: any }): google.api.HttpRule;

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.api.HttpRule, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this HttpRule message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this HttpRule to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }

        type CustomHttpPattern$Properties = {
            kind?: string;
            path?: string;
        };

        /**
         * Constructs a new CustomHttpPattern.
         * @exports google.api.CustomHttpPattern
         * @constructor
         * @param {google.api.CustomHttpPattern$Properties=} [properties] Properties to set
         */
        class CustomHttpPattern {

            /**
             * Constructs a new CustomHttpPattern.
             * @exports google.api.CustomHttpPattern
             * @constructor
             * @param {google.api.CustomHttpPattern$Properties=} [properties] Properties to set
             */
            constructor(properties?: google.api.CustomHttpPattern$Properties);

            /**
             * CustomHttpPattern kind.
             * @type {string}
             */
            public kind: string;

            /**
             * CustomHttpPattern path.
             * @type {string}
             */
            public path: string;

            /**
             * Creates a new CustomHttpPattern instance using the specified properties.
             * @param {google.api.CustomHttpPattern$Properties=} [properties] Properties to set
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
             */
            public static create(properties?: google.api.CustomHttpPattern$Properties): google.api.CustomHttpPattern;

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @param {google.api.CustomHttpPattern$Properties} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encode(message: google.api.CustomHttpPattern$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @param {google.api.CustomHttpPattern$Properties} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            public static encodeDelimited(message: google.api.CustomHttpPattern$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): google.api.CustomHttpPattern;

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): google.api.CustomHttpPattern;

            /**
             * Verifies a CustomHttpPattern message.
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {?string} `null` if valid, otherwise the reason why it is not
             */
            public static verify(message: { [k: string]: any }): string;

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            public static fromObject(object: { [k: string]: any }): google.api.CustomHttpPattern;

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * This is an alias of {@link google.api.CustomHttpPattern.fromObject}.
             * @function
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            public static from(object: { [k: string]: any }): google.api.CustomHttpPattern;

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public static toObject(message: google.api.CustomHttpPattern, options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Creates a plain object from this CustomHttpPattern message. Also converts values to other types if specified.
             * @param {$protobuf.ConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @returns {Object.<string,*>} JSON object
             */
            public toJSON(): { [k: string]: any };
        }
    }
}

/**
 * Namespace raftpb.
 * @exports raftpb
 * @namespace
 */
export namespace raftpb {

    /**
     * EntryType enum.
     * @name EntryType
     * @memberof raftpb
     * @enum {number}
     * @property {number} EntryNormal=0 EntryNormal value
     * @property {number} EntryConfChange=1 EntryConfChange value
     */
    enum EntryType {
        EntryNormal = 0,
        EntryConfChange = 1
    }

    type Entry$Properties = {
        Term?: Long;
        Index?: Long;
        Type?: raftpb.EntryType;
        Data?: Uint8Array;
    };

    /**
     * Constructs a new Entry.
     * @exports raftpb.Entry
     * @constructor
     * @param {raftpb.Entry$Properties=} [properties] Properties to set
     */
    class Entry {

        /**
         * Constructs a new Entry.
         * @exports raftpb.Entry
         * @constructor
         * @param {raftpb.Entry$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.Entry$Properties);

        /**
         * Entry Term.
         * @type {Long}
         */
        public Term: Long;

        /**
         * Entry Index.
         * @type {Long}
         */
        public Index: Long;

        /**
         * Entry Type.
         * @type {raftpb.EntryType}
         */
        public Type: raftpb.EntryType;

        /**
         * Entry Data.
         * @type {Uint8Array}
         */
        public Data: Uint8Array;

        /**
         * Creates a new Entry instance using the specified properties.
         * @param {raftpb.Entry$Properties=} [properties] Properties to set
         * @returns {raftpb.Entry} Entry instance
         */
        public static create(properties?: raftpb.Entry$Properties): raftpb.Entry;

        /**
         * Encodes the specified Entry message. Does not implicitly {@link raftpb.Entry.verify|verify} messages.
         * @param {raftpb.Entry$Properties} message Entry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.Entry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Entry message, length delimited. Does not implicitly {@link raftpb.Entry.verify|verify} messages.
         * @param {raftpb.Entry$Properties} message Entry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.Entry$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes an Entry message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.Entry} Entry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Entry;

        /**
         * Decodes an Entry message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.Entry} Entry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Entry;

        /**
         * Verifies an Entry message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Entry} Entry
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Entry;

        /**
         * Creates an Entry message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.Entry.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Entry} Entry
         */
        public static from(object: { [k: string]: any }): raftpb.Entry;

        /**
         * Creates a plain object from an Entry message. Also converts values to other types if specified.
         * @param {raftpb.Entry} message Entry
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.Entry, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this Entry message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this Entry to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    type SnapshotMetadata$Properties = {
        conf_state?: raftpb.ConfState$Properties;
        index?: Long;
        term?: Long;
    };

    /**
     * Constructs a new SnapshotMetadata.
     * @exports raftpb.SnapshotMetadata
     * @constructor
     * @param {raftpb.SnapshotMetadata$Properties=} [properties] Properties to set
     */
    class SnapshotMetadata {

        /**
         * Constructs a new SnapshotMetadata.
         * @exports raftpb.SnapshotMetadata
         * @constructor
         * @param {raftpb.SnapshotMetadata$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.SnapshotMetadata$Properties);

        /**
         * SnapshotMetadata conf_state.
         * @type {(raftpb.ConfState$Properties|null)}
         */
        public conf_state: (raftpb.ConfState$Properties|null);

        /**
         * SnapshotMetadata index.
         * @type {Long}
         */
        public index: Long;

        /**
         * SnapshotMetadata term.
         * @type {Long}
         */
        public term: Long;

        /**
         * Creates a new SnapshotMetadata instance using the specified properties.
         * @param {raftpb.SnapshotMetadata$Properties=} [properties] Properties to set
         * @returns {raftpb.SnapshotMetadata} SnapshotMetadata instance
         */
        public static create(properties?: raftpb.SnapshotMetadata$Properties): raftpb.SnapshotMetadata;

        /**
         * Encodes the specified SnapshotMetadata message. Does not implicitly {@link raftpb.SnapshotMetadata.verify|verify} messages.
         * @param {raftpb.SnapshotMetadata$Properties} message SnapshotMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.SnapshotMetadata$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified SnapshotMetadata message, length delimited. Does not implicitly {@link raftpb.SnapshotMetadata.verify|verify} messages.
         * @param {raftpb.SnapshotMetadata$Properties} message SnapshotMetadata message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.SnapshotMetadata$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a SnapshotMetadata message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.SnapshotMetadata} SnapshotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.SnapshotMetadata;

        /**
         * Decodes a SnapshotMetadata message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.SnapshotMetadata} SnapshotMetadata
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.SnapshotMetadata;

        /**
         * Verifies a SnapshotMetadata message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a SnapshotMetadata message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.SnapshotMetadata} SnapshotMetadata
         */
        public static fromObject(object: { [k: string]: any }): raftpb.SnapshotMetadata;

        /**
         * Creates a SnapshotMetadata message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.SnapshotMetadata.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.SnapshotMetadata} SnapshotMetadata
         */
        public static from(object: { [k: string]: any }): raftpb.SnapshotMetadata;

        /**
         * Creates a plain object from a SnapshotMetadata message. Also converts values to other types if specified.
         * @param {raftpb.SnapshotMetadata} message SnapshotMetadata
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.SnapshotMetadata, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this SnapshotMetadata message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this SnapshotMetadata to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    type Snapshot$Properties = {
        data?: Uint8Array;
        metadata?: raftpb.SnapshotMetadata$Properties;
    };

    /**
     * Constructs a new Snapshot.
     * @exports raftpb.Snapshot
     * @constructor
     * @param {raftpb.Snapshot$Properties=} [properties] Properties to set
     */
    class Snapshot {

        /**
         * Constructs a new Snapshot.
         * @exports raftpb.Snapshot
         * @constructor
         * @param {raftpb.Snapshot$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.Snapshot$Properties);

        /**
         * Snapshot data.
         * @type {Uint8Array}
         */
        public data: Uint8Array;

        /**
         * Snapshot metadata.
         * @type {(raftpb.SnapshotMetadata$Properties|null)}
         */
        public metadata: (raftpb.SnapshotMetadata$Properties|null);

        /**
         * Creates a new Snapshot instance using the specified properties.
         * @param {raftpb.Snapshot$Properties=} [properties] Properties to set
         * @returns {raftpb.Snapshot} Snapshot instance
         */
        public static create(properties?: raftpb.Snapshot$Properties): raftpb.Snapshot;

        /**
         * Encodes the specified Snapshot message. Does not implicitly {@link raftpb.Snapshot.verify|verify} messages.
         * @param {raftpb.Snapshot$Properties} message Snapshot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.Snapshot$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link raftpb.Snapshot.verify|verify} messages.
         * @param {raftpb.Snapshot$Properties} message Snapshot message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.Snapshot$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Snapshot message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.Snapshot} Snapshot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Snapshot;

        /**
         * Decodes a Snapshot message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.Snapshot} Snapshot
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Snapshot;

        /**
         * Verifies a Snapshot message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Snapshot} Snapshot
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Snapshot;

        /**
         * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.Snapshot.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Snapshot} Snapshot
         */
        public static from(object: { [k: string]: any }): raftpb.Snapshot;

        /**
         * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
         * @param {raftpb.Snapshot} message Snapshot
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.Snapshot, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this Snapshot message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this Snapshot to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /**
     * MessageType enum.
     * @name MessageType
     * @memberof raftpb
     * @enum {number}
     * @property {number} MsgHup=0 MsgHup value
     * @property {number} MsgBeat=1 MsgBeat value
     * @property {number} MsgProp=2 MsgProp value
     * @property {number} MsgApp=3 MsgApp value
     * @property {number} MsgAppResp=4 MsgAppResp value
     * @property {number} MsgVote=5 MsgVote value
     * @property {number} MsgVoteResp=6 MsgVoteResp value
     * @property {number} MsgSnap=7 MsgSnap value
     * @property {number} MsgHeartbeat=8 MsgHeartbeat value
     * @property {number} MsgHeartbeatResp=9 MsgHeartbeatResp value
     * @property {number} MsgUnreachable=10 MsgUnreachable value
     * @property {number} MsgSnapStatus=11 MsgSnapStatus value
     * @property {number} MsgCheckQuorum=12 MsgCheckQuorum value
     * @property {number} MsgTransferLeader=13 MsgTransferLeader value
     * @property {number} MsgTimeoutNow=14 MsgTimeoutNow value
     * @property {number} MsgReadIndex=15 MsgReadIndex value
     * @property {number} MsgReadIndexResp=16 MsgReadIndexResp value
     * @property {number} MsgPreVote=17 MsgPreVote value
     * @property {number} MsgPreVoteResp=18 MsgPreVoteResp value
     */
    enum MessageType {
        MsgHup = 0,
        MsgBeat = 1,
        MsgProp = 2,
        MsgApp = 3,
        MsgAppResp = 4,
        MsgVote = 5,
        MsgVoteResp = 6,
        MsgSnap = 7,
        MsgHeartbeat = 8,
        MsgHeartbeatResp = 9,
        MsgUnreachable = 10,
        MsgSnapStatus = 11,
        MsgCheckQuorum = 12,
        MsgTransferLeader = 13,
        MsgTimeoutNow = 14,
        MsgReadIndex = 15,
        MsgReadIndexResp = 16,
        MsgPreVote = 17,
        MsgPreVoteResp = 18
    }

    type Message$Properties = {
        type?: raftpb.MessageType;
        to?: Long;
        from?: Long;
        term?: Long;
        logTerm?: Long;
        index?: Long;
        entries?: raftpb.Entry$Properties[];
        commit?: Long;
        snapshot?: raftpb.Snapshot$Properties;
        reject?: boolean;
        rejectHint?: Long;
        context?: Uint8Array;
    };

    /**
     * Constructs a new Message.
     * @exports raftpb.Message
     * @constructor
     * @param {raftpb.Message$Properties=} [properties] Properties to set
     */
    class Message {

        /**
         * Constructs a new Message.
         * @exports raftpb.Message
         * @constructor
         * @param {raftpb.Message$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.Message$Properties);

        /**
         * Message type.
         * @type {raftpb.MessageType}
         */
        public type: raftpb.MessageType;

        /**
         * Message to.
         * @type {Long}
         */
        public to: Long;

        /**
         * Message from.
         * @type {Long}
         */
        public from: Long;

        /**
         * Message term.
         * @type {Long}
         */
        public term: Long;

        /**
         * Message logTerm.
         * @type {Long}
         */
        public logTerm: Long;

        /**
         * Message index.
         * @type {Long}
         */
        public index: Long;

        /**
         * Message entries.
         * @type {Array.<raftpb.Entry$Properties>}
         */
        public entries: raftpb.Entry$Properties[];

        /**
         * Message commit.
         * @type {Long}
         */
        public commit: Long;

        /**
         * Message snapshot.
         * @type {(raftpb.Snapshot$Properties|null)}
         */
        public snapshot: (raftpb.Snapshot$Properties|null);

        /**
         * Message reject.
         * @type {boolean}
         */
        public reject: boolean;

        /**
         * Message rejectHint.
         * @type {Long}
         */
        public rejectHint: Long;

        /**
         * Message context.
         * @type {Uint8Array}
         */
        public context: Uint8Array;

        /**
         * Creates a new Message instance using the specified properties.
         * @param {raftpb.Message$Properties=} [properties] Properties to set
         * @returns {raftpb.Message} Message instance
         */
        public static create(properties?: raftpb.Message$Properties): raftpb.Message;

        /**
         * Encodes the specified Message message. Does not implicitly {@link raftpb.Message.verify|verify} messages.
         * @param {raftpb.Message$Properties} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.Message$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified Message message, length delimited. Does not implicitly {@link raftpb.Message.verify|verify} messages.
         * @param {raftpb.Message$Properties} message Message message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.Message$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a Message message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.Message;

        /**
         * Decodes a Message message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.Message} Message
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.Message;

        /**
         * Verifies a Message message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Message} Message
         */
        public static fromObject(object: { [k: string]: any }): raftpb.Message;

        /**
         * Creates a Message message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.Message.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.Message} Message
         */
        public static from(object: { [k: string]: any }): raftpb.Message;

        /**
         * Creates a plain object from a Message message. Also converts values to other types if specified.
         * @param {raftpb.Message} message Message
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.Message, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this Message message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this Message to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    type HardState$Properties = {
        term?: Long;
        vote?: Long;
        commit?: Long;
    };

    /**
     * Constructs a new HardState.
     * @exports raftpb.HardState
     * @constructor
     * @param {raftpb.HardState$Properties=} [properties] Properties to set
     */
    class HardState {

        /**
         * Constructs a new HardState.
         * @exports raftpb.HardState
         * @constructor
         * @param {raftpb.HardState$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.HardState$Properties);

        /**
         * HardState term.
         * @type {Long}
         */
        public term: Long;

        /**
         * HardState vote.
         * @type {Long}
         */
        public vote: Long;

        /**
         * HardState commit.
         * @type {Long}
         */
        public commit: Long;

        /**
         * Creates a new HardState instance using the specified properties.
         * @param {raftpb.HardState$Properties=} [properties] Properties to set
         * @returns {raftpb.HardState} HardState instance
         */
        public static create(properties?: raftpb.HardState$Properties): raftpb.HardState;

        /**
         * Encodes the specified HardState message. Does not implicitly {@link raftpb.HardState.verify|verify} messages.
         * @param {raftpb.HardState$Properties} message HardState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.HardState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified HardState message, length delimited. Does not implicitly {@link raftpb.HardState.verify|verify} messages.
         * @param {raftpb.HardState$Properties} message HardState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.HardState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a HardState message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.HardState} HardState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.HardState;

        /**
         * Decodes a HardState message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.HardState} HardState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.HardState;

        /**
         * Verifies a HardState message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a HardState message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.HardState} HardState
         */
        public static fromObject(object: { [k: string]: any }): raftpb.HardState;

        /**
         * Creates a HardState message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.HardState.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.HardState} HardState
         */
        public static from(object: { [k: string]: any }): raftpb.HardState;

        /**
         * Creates a plain object from a HardState message. Also converts values to other types if specified.
         * @param {raftpb.HardState} message HardState
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.HardState, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this HardState message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this HardState to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    type ConfState$Properties = {
        nodes?: Long[];
    };

    /**
     * Constructs a new ConfState.
     * @exports raftpb.ConfState
     * @constructor
     * @param {raftpb.ConfState$Properties=} [properties] Properties to set
     */
    class ConfState {

        /**
         * Constructs a new ConfState.
         * @exports raftpb.ConfState
         * @constructor
         * @param {raftpb.ConfState$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.ConfState$Properties);

        /**
         * ConfState nodes.
         * @type {Array.<Long>}
         */
        public nodes: Long[];

        /**
         * Creates a new ConfState instance using the specified properties.
         * @param {raftpb.ConfState$Properties=} [properties] Properties to set
         * @returns {raftpb.ConfState} ConfState instance
         */
        public static create(properties?: raftpb.ConfState$Properties): raftpb.ConfState;

        /**
         * Encodes the specified ConfState message. Does not implicitly {@link raftpb.ConfState.verify|verify} messages.
         * @param {raftpb.ConfState$Properties} message ConfState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.ConfState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfState message, length delimited. Does not implicitly {@link raftpb.ConfState.verify|verify} messages.
         * @param {raftpb.ConfState$Properties} message ConfState message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.ConfState$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfState message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.ConfState} ConfState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfState;

        /**
         * Decodes a ConfState message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.ConfState} ConfState
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfState;

        /**
         * Verifies a ConfState message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a ConfState message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.ConfState} ConfState
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfState;

        /**
         * Creates a ConfState message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.ConfState.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.ConfState} ConfState
         */
        public static from(object: { [k: string]: any }): raftpb.ConfState;

        /**
         * Creates a plain object from a ConfState message. Also converts values to other types if specified.
         * @param {raftpb.ConfState} message ConfState
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.ConfState, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this ConfState message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfState to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }

    /**
     * ConfChangeType enum.
     * @name ConfChangeType
     * @memberof raftpb
     * @enum {number}
     * @property {number} ConfChangeAddNode=0 ConfChangeAddNode value
     * @property {number} ConfChangeRemoveNode=1 ConfChangeRemoveNode value
     * @property {number} ConfChangeUpdateNode=2 ConfChangeUpdateNode value
     */
    enum ConfChangeType {
        ConfChangeAddNode = 0,
        ConfChangeRemoveNode = 1,
        ConfChangeUpdateNode = 2
    }

    type ConfChange$Properties = {
        ID?: Long;
        Type?: raftpb.ConfChangeType;
        NodeID?: Long;
        Context?: Uint8Array;
    };

    /**
     * Constructs a new ConfChange.
     * @exports raftpb.ConfChange
     * @constructor
     * @param {raftpb.ConfChange$Properties=} [properties] Properties to set
     */
    class ConfChange {

        /**
         * Constructs a new ConfChange.
         * @exports raftpb.ConfChange
         * @constructor
         * @param {raftpb.ConfChange$Properties=} [properties] Properties to set
         */
        constructor(properties?: raftpb.ConfChange$Properties);

        /**
         * ConfChange ID.
         * @type {Long}
         */
        public ID: Long;

        /**
         * ConfChange Type.
         * @type {raftpb.ConfChangeType}
         */
        public Type: raftpb.ConfChangeType;

        /**
         * ConfChange NodeID.
         * @type {Long}
         */
        public NodeID: Long;

        /**
         * ConfChange Context.
         * @type {Uint8Array}
         */
        public Context: Uint8Array;

        /**
         * Creates a new ConfChange instance using the specified properties.
         * @param {raftpb.ConfChange$Properties=} [properties] Properties to set
         * @returns {raftpb.ConfChange} ConfChange instance
         */
        public static create(properties?: raftpb.ConfChange$Properties): raftpb.ConfChange;

        /**
         * Encodes the specified ConfChange message. Does not implicitly {@link raftpb.ConfChange.verify|verify} messages.
         * @param {raftpb.ConfChange$Properties} message ConfChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encode(message: raftpb.ConfChange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Encodes the specified ConfChange message, length delimited. Does not implicitly {@link raftpb.ConfChange.verify|verify} messages.
         * @param {raftpb.ConfChange$Properties} message ConfChange message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        public static encodeDelimited(message: raftpb.ConfChange$Properties, writer?: $protobuf.Writer): $protobuf.Writer;

        /**
         * Decodes a ConfChange message from the specified reader or buffer.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {raftpb.ConfChange} ConfChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): raftpb.ConfChange;

        /**
         * Decodes a ConfChange message from the specified reader or buffer, length delimited.
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {raftpb.ConfChange} ConfChange
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): raftpb.ConfChange;

        /**
         * Verifies a ConfChange message.
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {?string} `null` if valid, otherwise the reason why it is not
         */
        public static verify(message: { [k: string]: any }): string;

        /**
         * Creates a ConfChange message from a plain object. Also converts values to their respective internal types.
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.ConfChange} ConfChange
         */
        public static fromObject(object: { [k: string]: any }): raftpb.ConfChange;

        /**
         * Creates a ConfChange message from a plain object. Also converts values to their respective internal types.
         * This is an alias of {@link raftpb.ConfChange.fromObject}.
         * @function
         * @param {Object.<string,*>} object Plain object
         * @returns {raftpb.ConfChange} ConfChange
         */
        public static from(object: { [k: string]: any }): raftpb.ConfChange;

        /**
         * Creates a plain object from a ConfChange message. Also converts values to other types if specified.
         * @param {raftpb.ConfChange} message ConfChange
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public static toObject(message: raftpb.ConfChange, options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Creates a plain object from this ConfChange message. Also converts values to other types if specified.
         * @param {$protobuf.ConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        public toObject(options?: $protobuf.ConversionOptions): { [k: string]: any };

        /**
         * Converts this ConfChange to JSON.
         * @returns {Object.<string,*>} JSON object
         */
        public toJSON(): { [k: string]: any };
    }
}
