load("@aspect_rules_jest//jest:defs.bzl", "jest_test")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//pkg/ui/workspaces/db-console:eslint/package_json.bzl", eslint_bin = "bin")
load("@npm//pkg/ui/workspaces/db-console:stylint/package_json.bzl", stylint_bin = "bin")
load("@npm//pkg/ui/workspaces/db-console:typescript/package_json.bzl", typescript_bin = "bin")
load("@npm//pkg/ui/workspaces/db-console:webpack-cli/package_json.bzl", webpack_bin = "bin")

npm_link_all_packages(name = "node_modules")

WEBPACK_DATA_COMMON = glob(
    include = [
        "assets/**",
        "fonts/**",
        "src/**",
        "styl/**",
    ],
    exclude = [
        "src/js/**",
        "src/**/*.stories.tsx",
        "src/**/*.spec.tsx",
        "src/**/*.spec.ts",
    ],
)

WEBPACK_SRCS = [
    "babel.config.js",
    ".eslintrc.json",
    ".stylintrc",
    "favicon.ico",
    "tsconfig.json",
    "webpack.config.js",
]

WEBPACK_DATA_OSS = WEBPACK_DATA_COMMON

WEBPACK_DATA_CCL = WEBPACK_DATA_COMMON + glob(["ccl/**"])

# We want to perform only type-checking (with absolutely no files emitted).
# The ts_project rule from rules_ts doesn't support that, and instead recommends
# calling the generated tsc_test rule directly:
# https://github.com/aspect-build/rules_ts/blob/34dc4288ff557c002108ca96ee161e2d7d04ce04/examples/typecheck_only/BUILD.bazel
typescript_bin.tsc_test(
    name = "typecheck",
    args = [
        "--project",
        "$(location tsconfig.linting.json)",
    ],
    data = WEBPACK_SRCS + WEBPACK_DATA_CCL + [
        "tsconfig.linting.json",
        ":node_modules",
    ],
)

webpack_bin.webpack_cli(
    name = "db-console-ccl",
    srcs = WEBPACK_SRCS + WEBPACK_DATA_CCL + [
        ":node_modules",
    ],
    outs = [
        "db-console-ccl/assets/bundle.js",
    ],
    args = [
        "--config webpack.config.js",
        "--env.dist=ccl",
        "--mode production",
        "--env.output=./db-console-ccl",
    ],
    chdir = package_name(),
    env = {
        "NODE_OPTIONS": "--max-old-space-size=5000",
    },
    visibility = ["//visibility:public"],
)

webpack_bin.webpack_cli(
    name = "db-console-oss",
    srcs = WEBPACK_SRCS + WEBPACK_DATA_OSS + [
        ":node_modules",
    ],
    outs = [
        "db-console-oss/assets/bundle.js",
    ],
    args = [
        "--config webpack.config.js",
        "--env.dist=oss",
        "--mode production",
        "--env.output=./db-console-oss",
    ],
    chdir = package_name(),
    env = {
        "NODE_OPTIONS": "--max-old-space-size=5000",
    },
    visibility = ["//visibility:public"],
)

stylint_bin.stylint_test(
    name = "stylint",
    args = [
        "-c .stylintrc",
        "styl",
    ],
    chdir = package_name(),
    copy_data_to_bin = False,
    data = [
        ".stylintrc",
        "fonts",
        ":node_modules",
    ] + glob([
        "fonts/**",
        "src/**",
        "styl/**",
    ]),
)

eslint_bin.eslint_test(
    name = "eslint",
    args = [
        "--ext .ts",
        "--ext .js",
        "--ext .tsx",
        "-c",
        ".eslintrc.json",
        "src",
        "ccl",
    ],
    chdir = package_name(),
    copy_data_to_bin = False,
    data = [
        ".eslintrc.json",
        ".prettierignore",
        "node_modules",
        "prettier.config.js",
    ] + glob([
        "ccl/**",
        "src/**",
    ]),
)

test_suite(
    name = "lint",
    tests = [
        ":eslint",
        ":stylint",
        ":typecheck",
    ],
)

SRC_NOT_PROTO_CLIENT = glob(
    ["src/**"],
    exclude = ["protos.*"],
)

CCL_NOT_PROTO_CLIENT = glob(
    ["ccl/**"],
    exclude = ["protos.*"],
)

jest_test(
    name = "jest",
    size = "enormous",
    args = [
        # Increase the JS heap size: https://nodejs.org/docs/latest-v16.x/api/cli.html#--max-old-space-sizesize-in-megabytes
        "--node_options=--max-old-space-size=8192",
        # Prevent a v8-internal leak of compiled bytecode: https://github.com/facebook/jest/issues/11956#issuecomment-1401094780
        "--node_options=--no-compilation-cache",
        # Populate the global.gc() function during JS execution:
        # https://github.com/v8/v8/blob/5fe0aa3bc79c0a9d3ad546b79211f07105f09585/src/flags/flag-definitions.h#L1484-L1487
        "--node_options=--expose-gc",
        # Force jest workers to collect garbage after each suite: https://jestjs.io/docs/27.x/cli#--logheapusage
        "--logHeapUsage",
        "--ci",
        "--bail",
    ],
    chdir = package_name(),
    config = ":jest.config.js",
    copy_data_to_bin = False,
    data = [
        ".eslintrc.json",
        "babel.config.js",
        "jest.config.js",
        "package.json",
        "tsconfig.json",
        "tsconfig.linting.json",
        ":node_modules",
    ] + glob([
        "src/**",
        "ccl/**",
    ]),
    env = {
        "BAZEL_TARGET": "1",
    },
    node_modules = ":node_modules",
    shard_count = 4,
)
