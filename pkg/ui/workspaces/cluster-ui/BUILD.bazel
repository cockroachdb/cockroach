load("@aspect_rules_jest//jest:defs.bzl", "jest_test")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@npm_cluster_ui//:defs.bzl", "npm_link_all_packages")
load("@npm_cluster_ui//pkg/ui/workspaces/cluster-ui:eslint/package_json.bzl", eslint_bin = "bin")
load("@npm_cluster_ui//pkg/ui/workspaces/cluster-ui:typescript/package_json.bzl", typescript_bin = "bin")
load("@npm_cluster_ui//pkg/ui/workspaces/cluster-ui:webpack-cli/package_json.bzl", webpack_bin = "bin")

exports_files(
    [
        "yarn.lock",
    ],
    visibility = ["//visibility:public"],
)

npm_link_all_packages(name = "node_modules")

# TODO (koorosh): keeping the list of deps up to date is a candidate to be
# autogenerated in scope of `dev generate bazel`.
#
# Do not include following packages:
# typescript
# jest
DEPENDENCIES = [
    "@babel/cli",
    "@babel/core",
    "@babel/plugin-proposal-class-properties",
    "@babel/plugin-proposal-object-rest-spread",
    "@babel/plugin-transform-modules-commonjs",
    "@babel/plugin-transform-runtime",
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript",
    "@babel/runtime",
    "@cockroachlabs/crdb-protobuf-client",
    "@cockroachlabs/design-tokens",
    "@cockroachlabs/eslint-config",
    "@cockroachlabs/eslint-plugin-crdb",
    "@cockroachlabs/icons",
    "@cockroachlabs/ui-components",
    "@popperjs/core",
    "@redux-saga/core",
    "@redux-saga/is",
    "@redux-saga/symbols",
    "@redux-saga/types",
    "@reduxjs/toolkit",
    "@storybook/addon-actions",
    "@storybook/addon-links",
    "@storybook/addons",
    "@storybook/react",
    "@testing-library/dom",
    "@testing-library/react",
    "@testing-library/user-event",
    "@types/chai",
    "@types/d3",
    "@types/d3-array",
    "@types/d3-format",
    "@types/d3-scale",
    "@types/enzyme",
    "@types/history",
    "@types/jest",
    "@types/lodash",
    "@types/long",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@types/react-helmet",
    "@types/react-redux",
    "@types/react-router",
    "@types/react-router-dom",
    "@types/react-select",
    "@types/redux-saga",
    "@types/reselect",
    "@types/sinon",
    "@typescript-eslint/eslint-plugin",
    "@typescript-eslint/parser",
    "@typescript-eslint/utils",
    "antd",
    "astroturf",
    "babel-jest",
    "babel-loader",
    "babel-plugin-import",
    "babel-polyfill",
    "babel-preset-react-app",
    "chai",
    "classnames",
    "connected-react-router",
    "copy-to-clipboard",
    "css-loader",
    "d3-array",
    "d3-format",
    "d3-scale",
    "enzyme",
    "enzyme-adapter-react-16",
    "esbuild-loader",
    "eslint",
    "eslint-config-prettier",
    "eslint-plugin-prettier",
    "eslint-plugin-react",
    "eslint-plugin-react-hooks",
    "fetch-mock",
    "file-loader",
    "highlight.js",
    "history",
    "http-proxy-middleware",
    "identity-obj-proxy",
    "immer",
    "jest-canvas-mock",
    "jest-environment-enzyme",
    "jest-enzyme",
    "jest-fetch-mock",
    "jest-junit",
    "less",
    "less-loader",
    "lodash",
    "long",
    "moment",
    "moment-timezone",
    "moment-locales-webpack-plugin",
    "moment-timezone-data-webpack-plugin",
    "npm-run-all",
    "path-browserify",
    "prettier",
    "protobufjs",
    "rc-progress",
    "react",
    "react-dom",
    "react-helmet",
    "react-popper",
    "react-redux",
    "react-router-dom",
    "react-select",
    "react-test-renderer",
    "redux",
    "redux-saga",
    "redux-saga-test-plan",
    "reselect",
    "sass",
    "sass-loader",
    "sinon",
    "source-map-loader",
    "style-loader",
    "ts-jest",
    "uplot",
    "url-loader",
    "webpack",
    "webpack-cli",
    "webpackbar",
]

WEBPACK_SRCS = glob(
    ["src/**"],
    exclude = [
        "src/**/*.stories.tsx",
        "src/**/*.spec.tsx",
        "src/**/*.spec.ts",
    ],
)

ts_project(
    name = "ts_project",
    srcs = WEBPACK_SRCS,
    declaration = True,
    emit_declaration_only = True,
    out_dir = "dist/types",
    root_dir = "src",
    supports_workers = False,
    tsconfig = "tsconfig.json",
    deps = [":node_modules/" + d for d in DEPENDENCIES],
)

webpack_bin.webpack_cli(
    name = "webpack",
    srcs = [
        ".babelrc",
        "tsconfig.json",
        "webpack.config.js",
    ] + WEBPACK_SRCS + [":node_modules/" + d for d in DEPENDENCIES],
    outs = [
        "dist/js/main.js",
        "dist/js/main.js.map",
    ],
    args = [
        "./src/index.ts",
        "--config",
        "webpack.config.js",
        "--env.is_bazel_build",
        "--mode",
        "production",
        "-o ./dist/js/main.js",
        "--env.output=./dist/js/main.js",
    ],
    chdir = package_name(),
)

js_library(
    name = "cluster-ui-lib",
    srcs = [
        "package.json",
        ":dist/js/main.js",
        ":dist/js/main.js.map",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":ts_project",
    ],
)

eslint_bin.eslint_test(
    name = "eslint",
    args = [
        "--ext .ts",
        "--ext .js",
        "--ext .tsx",
        "--ignore-path",
        ".eslintignore",
        "-c",
        ".eslintrc.json",
        "--format=codeframe",
        "src",
    ],
    chdir = package_name(),
    data = [
        ".eslintignore",
        ".eslintrc.json",
        ".prettierignore",
        "prettier.config.js",
    ] + [
        ":node_modules/" + d
        for d in DEPENDENCIES
    ] + glob([
        "src/**/*.js",
        "src/**/*.ts",
        "src/**/*.tsx",
    ]),
)

build_test(
    # NB: Type-checking is done as part of building ts_project.
    name = "typecheck",
    targets = [
        ":ts_project",
    ],
)

test_suite(
    name = "lint",
    tests = [
        ":eslint",
        ":typecheck",
    ],
)

jest_test(
    name = "jest",
    size = "enormous",
    args = [
        "--ci",
    ],
    config = ":jest.config.js",
    data = [
        ":node_modules/" + d
        for d in DEPENDENCIES
    ] + glob([
        ".jest/**",
    ]) + glob(
        ["src/**"],
        exclude = [
            "src/**/*.woff",
            "src/**/*.woff2",
        ],
    ) + [
        ".eslintignore",
        ".eslintrc.json",
        "babel.config.js",
        "enzyme.setup.js",
        "jest.config.js",
        "package.json",
        "tsconfig.json",
    ],
    node_modules = ":node_modules",
)

npm_package(
    name = "cluster-ui",
    srcs = [
        "package.json",
        ":cluster-ui-lib",
    ],
    package = "@cockroachlabs/cluster-ui",
    visibility = ["//visibility:public"],
)
