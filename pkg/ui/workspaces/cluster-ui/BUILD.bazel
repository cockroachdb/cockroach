load("@npm_cluster_ui//webpack-cli:index.bzl", webpack = "webpack_cli")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("@npm_cluster_ui//@bazel/typescript:index.bzl", "ts_project")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_test")
load("@npm_cluster_ui//typescript:index.bzl", "tsc_test")
load("@npm_cluster_ui//jest:index.bzl", "jest_test")
load("@npm_cluster_ui//eslint:index.bzl", "eslint_test")

# TODO (koorosh): keeping the list of deps up to date is a candidate to be
# autogenerated in scope of `dev generate bazel`.
#
# Do not include following packages:
# "@npm_cluster_ui//@cockroachlabs/crdb-protobuf-client",
# "@npm_cluster_ui//typescript" (provided by the tsc_test rule above)
# "@npm_cluster_ui//jest" (provided by the jest_test rule above)
DEPENDENCIES = [
    "@npm_cluster_ui//@bazel/typescript",
    "@npm_cluster_ui//@babel/cli",
    "@npm_cluster_ui//@babel/core",
    "@npm_cluster_ui//@babel/plugin-proposal-class-properties",
    "@npm_cluster_ui//@babel/plugin-proposal-object-rest-spread",
    "@npm_cluster_ui//@babel/plugin-transform-modules-commonjs",
    "@npm_cluster_ui//@babel/plugin-transform-runtime",
    "@npm_cluster_ui//@babel/preset-env",
    "@npm_cluster_ui//@babel/preset-react",
    "@npm_cluster_ui//@babel/preset-typescript",
    "@npm_cluster_ui//@babel/runtime",
    "@npm_cluster_ui//@cockroachlabs/eslint-config",
    "@npm_cluster_ui//@cockroachlabs/icons",
    "@npm_cluster_ui//@cockroachlabs/ui-components",
    "@npm_cluster_ui//@cockroachlabs/design-tokens",
    "@npm_cluster_ui//@popperjs/core",
    "@npm_cluster_ui//@reduxjs/toolkit",
    "@npm_cluster_ui//@storybook/addon-actions",
    "@npm_cluster_ui//@storybook/addon-links",
    "@npm_cluster_ui//@storybook/addons",
    "@npm_cluster_ui//@storybook/react",
    "@npm_cluster_ui//@types/chai",
    "@npm_cluster_ui//@types/classnames",
    "@npm_cluster_ui//@types/d3",
    "@npm_cluster_ui//@types/d3-array",
    "@npm_cluster_ui//@types/d3-format",
    "@npm_cluster_ui//@types/d3-scale",
    "@npm_cluster_ui//@types/enzyme",
    "@npm_cluster_ui//@types/jest",
    "@npm_cluster_ui//@types/lodash",
    "@npm_cluster_ui//@types/long",
    "@npm_cluster_ui//@types/node",
    "@npm_cluster_ui//@types/react",
    "@npm_cluster_ui//@types/react-dom",
    "@npm_cluster_ui//@types/react-helmet",
    "@npm_cluster_ui//@types/react-redux",
    "@npm_cluster_ui//@types/react-router",
    "@npm_cluster_ui//@types/react-router-dom",
    "@npm_cluster_ui//@types/react-select",
    "@npm_cluster_ui//@types/redux-saga",
    "@npm_cluster_ui//@types/reselect",
    "@npm_cluster_ui//@types/sinon",
    "@npm_cluster_ui//@typescript-eslint/eslint-plugin",
    "@npm_cluster_ui//@typescript-eslint/parser",
    "@npm_cluster_ui//antd",
    "@npm_cluster_ui//astroturf",
    "@npm_cluster_ui//babel-jest",
    "@npm_cluster_ui//babel-loader",
    "@npm_cluster_ui//babel-plugin-import",
    "@npm_cluster_ui//babel-polyfill",
    "@npm_cluster_ui//babel-preset-react-app",
    "@npm_cluster_ui//chai",
    "@npm_cluster_ui//classnames",
    "@npm_cluster_ui//connected-react-router",
    "@npm_cluster_ui//d3-array",
    "@npm_cluster_ui//d3-format",
    "@npm_cluster_ui//d3-scale",
    "@npm_cluster_ui//enzyme",
    "@npm_cluster_ui//enzyme-adapter-react-16",
    "@npm_cluster_ui//esbuild-loader",
    "@npm_cluster_ui//eslint",
    "@npm_cluster_ui//eslint-config-prettier",
    "@npm_cluster_ui//eslint-plugin-prettier",
    "@npm_cluster_ui//eslint-plugin-react",
    "@npm_cluster_ui//eslint-plugin-react-hooks",
    "@npm_cluster_ui//fetch-mock",
    "@npm_cluster_ui//file-loader",
    "@npm_cluster_ui//highlight.js",
    "@npm_cluster_ui//http-proxy-middleware",
    "@npm_cluster_ui//identity-obj-proxy",
    "@npm_cluster_ui//jest-canvas-mock",
    "@npm_cluster_ui//jest-environment-enzyme",
    "@npm_cluster_ui//jest-enzyme",
    "@npm_cluster_ui//jest-fetch-mock",
    "@npm_cluster_ui//less",
    "@npm_cluster_ui//less-loader",
    "@npm_cluster_ui//long",
    "@npm_cluster_ui//moment-locales-webpack-plugin",
    "@npm_cluster_ui//npm-run-all",
    "@npm_cluster_ui//prettier",
    "@npm_cluster_ui//protobufjs",
    "@npm_cluster_ui//react",
    "@npm_cluster_ui//react-dom",
    "@npm_cluster_ui//react-helmet",
    "@npm_cluster_ui//react-popper",
    "@npm_cluster_ui//react-redux",
    "@npm_cluster_ui//react-router-dom",
    "@npm_cluster_ui//react-select",
    "@npm_cluster_ui//react-test-renderer",
    "@npm_cluster_ui//redux",
    "@npm_cluster_ui//redux-saga",
    "@npm_cluster_ui//redux-saga-test-plan",
    "@npm_cluster_ui//reselect",
    "@npm_cluster_ui//sass",
    "@npm_cluster_ui//sass-loader",
    "@npm_cluster_ui//sinon",
    "@npm_cluster_ui//source-map-loader",
    "@npm_cluster_ui//style-loader",
    "@npm_cluster_ui//ts-jest",
    "@npm_cluster_ui//uplot",
    "@npm_cluster_ui//url-loader",
    "@npm_cluster_ui//webpack",
    "@npm_cluster_ui//webpack-cli",
    "@npm_cluster_ui//webpackbar",
]

ts_project(
    name = "ts_project",
    srcs = glob(
        ["src/**"],
        exclude = [
            "src/**/*.stories.tsx",
            "src/**/*.spec.tsx",
            "src/**/*.spec.ts",
        ],
    ),
    declaration = True,
    emit_declaration_only = True,
    out_dir = "dist/types",
    root_dir = "src",
    tsconfig = "tsconfig.json",
    # Don't check for a "correct" .compilerOptions.rootDirs in tsconfig.json.
    # That check looks for relative paths to each platform-specific bazel-out/
    # directory, which would allow the TypeScript compiler to find types from
    # the output directory. Since our packages are linked together during
    # yarn_install() and dependencies are installed in workspace-local
    # node_modules directories (outside the Bazel sandbox!), validation isn't
    # necessary.
    validate = False,
    deps = [
        "//pkg/ui/workspaces/db-console/src/js:crdb-protobuf-client",
        "@npm_cluster_ui//@babel/parser",
        "@npm_cluster_ui//@babel/types",
        "@npm_cluster_ui//@cockroachlabs/icons",
        "@npm_cluster_ui//@cockroachlabs/ui-components",
        "@npm_cluster_ui//@reduxjs/toolkit",
        "@npm_cluster_ui//@types",
        "@npm_cluster_ui//antd",
        "@npm_cluster_ui//classnames",
        "@npm_cluster_ui//connected-react-router",
        "@npm_cluster_ui//moment",
        "@npm_cluster_ui//protobufjs",
        "@npm_cluster_ui//redux",
        "@npm_cluster_ui//redux-saga",
        "@npm_cluster_ui//redux-saga-test-plan",
        "@npm_cluster_ui//reselect",
        "@npm_cluster_ui//uplot",
    ],
)

webpack(
    name = "webpack",
    outs = [
        "dist/js/main.js",
        # TODO (koorosh): webpack outputs `main.js.map` file as well but it's ignored for now
        # due to limited understanding how to preserve project structure and include more than
        # single file as output.
    ],
    args = [
        "$(execpath src/index.ts)",
        "--config",
        "$(execpath webpack.config.js)",
        "--env.is_bazel_build",
        "--mode",
        "production",
        "-o $@",
        "--env.output=$@",
    ],
    data = glob([
        "src/**",
    ]) + [
        ".babelrc",
        "tsconfig.json",
        "webpack.config.js",
        "//pkg/ui/workspaces/db-console/src/js:crdb-protobuf-client",
        # A copy of protobufjs from the protobuf client's dependencies is
        # required to avoid "invalid assignment" errors from Terser here, but
        # it's unclear why that's the case.
        "@npm_protos//protobufjs",
    ] + DEPENDENCIES,
)

js_library(
    name = "cluster-ui",
    package_name = "@cockroachlabs/cluster-ui",
    srcs = [
        "package.json",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":ts_project",
        ":webpack",
    ],
)

eslint_test(
    name = "eslint",
    data = [
        ".eslintignore",
        ".eslintrc.json",
        ".prettierignore",
        "prettier.config.js",
        "src",
        "//pkg/ui/workspaces/eslint-plugin-crdb",
        "@npm_cluster_ui//@cockroachlabs/eslint-config",
        "@npm_cluster_ui//@testing-library/react",
        "@npm_cluster_ui//@testing-library/user-event",
        "@npm_cluster_ui//@typescript-eslint/eslint-plugin",
        "@npm_cluster_ui//@typescript-eslint/parser",
        "@npm_cluster_ui//eslint-plugin-prettier",
        "@npm_cluster_ui//eslint-plugin-react",
        "@npm_cluster_ui//eslint-plugin-react-hooks",
        "@npm_cluster_ui//prettier",
        "@npm_cluster_ui//react",
    ],
    templated_args = [
        "--ext .ts",
        "--ext .js",
        "--ext .tsx",
        "--ignore-path",
        "$$(rlocation $(rootpath .eslintignore))",
        "-c",
        "$$(rlocation $(rootpath .eslintrc.json))",
        "--format=codeframe",
        "$$(rlocation $(rootpath src))",
    ],
)

tsc_test(
    name = "typecheck",
    data = glob(
        [
            "src/**/*.ts",
            "src/**/*.tsx",
        ],
        exclude = [
            "src/**/*.stories.tsx",
            "src/**/*.spec.tsx",
            "src/**/*.spec.ts",
        ],
    ) + [
        "tsconfig.json",
        "tsconfig.linting.json",
        "//pkg/ui/workspaces/db-console/src/js:crdb-protobuf-client",
        "//pkg/ui/workspaces/db-console/ccl/src/js:crdb-protobuf-client-ccl",
        "@npm_cluster_ui//@babel/parser",
        "@npm_cluster_ui//@babel/types",
        "@npm_cluster_ui//@cockroachlabs/icons",
        "@npm_cluster_ui//@cockroachlabs/ui-components",
        "@npm_cluster_ui//@reduxjs/toolkit",
        "@npm_cluster_ui//@testing-library/react",
        "@npm_cluster_ui//@testing-library/user-event",
        "@npm_cluster_ui//@types",
        "@npm_cluster_ui//antd",
        "@npm_cluster_ui//classnames",
        "@npm_cluster_ui//connected-react-router",
        "@npm_cluster_ui//moment",
        "@npm_cluster_ui//protobufjs",
        "@npm_cluster_ui//redux",
        "@npm_cluster_ui//redux-saga",
        "@npm_cluster_ui//redux-saga-test-plan",
        "@npm_cluster_ui//reselect",
        "@npm_cluster_ui//uplot",
    ],
    templated_args = [
        "-p",
        "$(rootpath tsconfig.linting.json)",
        "--noEmit",
    ],
)

test_suite(
    name = "lint",
    tests = [
        ":eslint",
        ":typecheck",
    ],
)

JEST_DEPS = DEPENDENCIES + [
    ".jest",
    ".eslintrc.json",
    ".eslintignore",
    "babel.config.js",
    "package.json",
    "enzyme.setup.js",
    "jest.config.js",
    "tsconfig.json",
    "src",
    "@npm_cluster_ui//@testing-library/react",
    "@npm_cluster_ui//@testing-library/user-event",
    "//pkg/ui/workspaces/db-console/src/js:crdb-protobuf-client",
    "//pkg/ui/workspaces/db-console/ccl/src/js:crdb-protobuf-client-ccl",
    # A copy of protobufjs from the protobuf client's dependencies is required
    # to avoid "cannot find module protobufjs/minimal" errors when Babel
    # attempts to transpile the protobuf client during testing.
    "@npm_protos//protobufjs",
]

jest_test(
    name = "jest",
    size = "enormous",
    data = JEST_DEPS,
    templated_args = [
        "--runInBand",
        "--ci",
        "--config",
        "$(rootpath jest.config.js)",
    ],
)
