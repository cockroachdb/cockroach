// Code generated by go-bindata.
// sources:
// ../../resource/test_certs/ca.crt
// ../../resource/test_certs/ca.key
// ../../resource/test_certs/node.crt
// ../../resource/test_certs/node.key
// ../../resource/test_certs/root.crt
// ../../resource/test_certs/root.key
// ../../resource/test_certs/testuser.crt
// ../../resource/test_certs/testuser.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\x49\xf3\xb2\x38\x18\xc4\xef\x7c\x8a\xb9\x5b\x53\xb2\xb8\xe0\x61\x0e\xd9\xd0\xa8\x41\xc2\x2a\xde\x50\xd9\x04\x01\x15\x09\xf0\xe9\x87\xf7\x7f\x98\xaa\x99\x79\x73\x4b\x57\xd2\xd5\x4f\xfd\x9e\xea\x3f\x7f\x1d\x48\xb6\xd4\xfc\x03\x11\xdb\xa5\x06\x45\xc0\x25\x3f\xaa\xc4\x28\xc5\x70\x44\x08\xc4\xb3\x14\x08\x0a\x41\x4a\x6d\x40\x45\xfe\x3d\xe6\x66\x17\xce\x9b\x1c\x3a\x56\xb5\x75\x45\xe9\xc8\x02\xf3\x70\x7f\xa8\x2f\x34\xeb\x6e\x26\xe0\xe4\x08\x39\x10\xd2\x61\x24\x0e\x83\x60\x0b\x14\x8f\xa0\x8c\xed\xb9\xba\x79\x44\xda\xbe\x0b\x03\xb3\x66\xb6\x27\x88\x08\xb1\xcf\x39\x26\xa2\xc7\x57\xd5\x7c\xdf\x9e\x9b\x2c\x54\xd3\x94\xcb\x44\xec\xb2\x9b\x29\x31\x37\x14\x6c\xa4\x4b\xf6\x60\x03\xc3\xde\x18\x4c\x22\x73\x6f\xff\xd6\x1e\xe0\xcd\x6c\x2a\x08\xf8\x31\x3b\x10\x51\xfe\x63\x26\x4d\x6e\xbd\xe1\x02\x17\xa6\xa6\x0f\x01\x73\x31\x99\x92\xab\xed\x70\x55\x8d\x47\x84\x20\xe6\xee\x34\x9e\x43\xff\x1b\x1f\x4e\xf1\x71\x9a\x12\x4b\x02\x78\x7a\xc0\x6b\x34\x5d\x20\x30\x8d\x06\xd9\xe5\x55\x79\xb9\xf7\xfc\x35\xeb\xce\x2b\xb5\x59\xc6\x90\x50\x78\x49\xd6\xea\x50\x1a\xf5\xeb\x42\x10\x1f\x39\xf9\x58\x40\x49\x7d\xed\xb8\xbe\x49\x30\xf0\x8a\xd5\xb9\x7a\xd8\xa3\xd6\x1f\xca\xe6\xa1\x7d\xde\x29\xdf\x2c\x44\x7c\x04\xec\xb9\x5d\x22\x9c\x44\x77\xf7\x49\xcf\xd8\xca\x1a\x1e\x7d\x6c\x5f\xbe\x2b\xe5\x45\x77\x2a\xbd\x7c\xbf\x1d\xb2\x92\x1e\x4a\x2c\xe4\xd8\x6a\x1b\xa5\x40\x3c\x56\x6a\xad\x8c\x22\x5b\x7e\xea\x63\xb8\xee\xfb\xfe\x5b\x9d\x66\x95\x6f\x35\xef\xc4\xae\xba\x97\xe2\x6f\xbc\x70\x61\xd6\x81\x72\xde\x2d\xdb\x87\x9b\xd6\x87\x44\xda\xbc\xef\x6d\xd3\xca\xdf\xa1\x1f\x37\x59\xbc\x5b\x74\xa7\xd7\x6d\xca\x99\x74\x7d\x22\x27\xc1\xf9\xbd\x38\x5e\x57\x17\x67\x39\xae\xd3\x7b\x8d\xdd\xea\x0c\x5c\xae\x85\x5c\xef\xb4\xbc\x53\x7d\xec\x08\xe9\xf3\xdd\x24\xee\x07\xae\x2f\xba\xfd\xf4\x92\x3c\x6b\x2f\x27\xcd\x41\x4d\x91\x94\xb4\x90\x89\x2c\x5b\x9f\x7c\xa1\x5f\x08\x68\x0e\x59\xfc\x7d\xcd\xac\x75\x17\x37\x1e\x3a\x58\xe6\x13\x16\xbd\x67\x85\xd2\xbe\xd6\x16\xed\x73\x35\xa8\xb3\xd3\x55\xe8\xcf\xd3\x77\xdb\x85\x97\x2a\x78\x3b\xd6\x80\x2a\x5f\x0d\x67\xa9\x8e\xc0\x04\x10\x44\xec\xc9\x10\x17\x38\x9d\x50\xda\xb2\x05\xf8\x6e\x0e\x01\xc7\x12\x48\x8f\x05\x83\xf4\xd7\x22\xdd\x89\x20\x70\x2e\x38\x65\x20\x84\x20\x99\x3e\x72\xf2\xbb\xed\xc3\x3f\xc4\xd8\xe5\xb1\x36\x70\x29\xc5\xb3\x68\x77\x73\xd6\x0b\xa5\xdf\xcc\x6f\x5d\xee\x74\x77\xff\xcb\x29\x75\x34\x17\xb9\xde\xc3\xab\x53\x98\xac\xce\xbb\x2e\xd7\xaf\xc1\x3c\xa7\xcd\x10\xd9\x35\x88\x03\x64\x6e\x9b\xdd\xb2\x4f\x22\x24\x6d\xcc\xad\x9a\xb5\x2c\xde\x02\x22\xcc\x68\x1b\x1a\xac\x94\x2f\xc8\xc4\x66\x09\xfb\xaf\x39\xb4\x27\xc8\x49\xbf\xd1\xa1\xa3\xd1\x91\xbe\x0e\xd1\x7a\x02\xf8\xe1\xe9\xa0\x9e\x55\x79\x77\x8f\x63\x89\xac\xb5\xf9\xfc\xbc\xfd\x2c\x99\x2e\x6a\x11\x5d\xf7\xa9\xd8\x05\x86\xbf\x7f\xdf\x5a\x88\xaa\xd7\x6c\x1e\xc9\xce\x2b\x9a\x06\x1a\xc2\xf3\xb9\x80\xea\x8a\x9d\x04\x7b\xa2\x15\x19\x57\x86\x86\x10\x95\xfa\xb0\x9d\xe7\x8a\x7c\x34\x44\x06\x36\x42\x6b\x9f\xa8\x32\x0e\xac\x34\xa2\xf6\x04\x96\x55\xe8\x2d\xa3\xe4\xab\x6b\x9f\xe2\x0e\xe3\x93\xb6\xe7\xb6\x3e\x63\xa1\x5f\x43\x13\x1e\x9d\xf1\xe5\x18\xb5\xd4\xde\x8b\x55\xe2\xed\x45\x79\x52\x0b\x3d\xc1\xa9\x70\x45\xe2\x1f\xca\x0f\xc5\x7d\x9e\x25\x89\xa7\x04\x05\xcb\xe0\x8e\x3e\xb0\x8b\xfa\xa0\xc6\xb3\x2f\xd9\x47\x0b\x50\x8c\xf7\x96\x07\xa3\x62\x48\x47\xf4\xce\xd7\x14\x68\x70\xd8\x6d\x71\x21\xff\x25\xfd\xd4\x04\x31\xf1\xff\xab\xe3\xef\x00\x00\x00\xff\xff\x21\x04\x61\xc8\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\xae\xa4\x60\x12\x85\x73\x9e\x62\x72\xb4\xc2\xbb\x60\x82\x1f\xef\x1a\x6f\x1a\x32\xbc\x69\xa0\x81\x8b\x7f\xfa\xbd\x3b\xf1\x56\x5a\x52\xe9\x53\xe9\x1c\x7d\xff\xf9\xdf\xf0\x92\xa2\x59\x7f\x3c\x1f\xfc\x71\x3c\x2d\x02\x81\xf4\xc7\x90\x92\x7f\x1b\xe8\xa5\x69\xd2\x0c\x34\x1e\x00\x43\x00\xae\x04\xd0\xf8\xa3\x2b\xd1\x11\xcf\x16\x6e\xac\x34\x57\xaf\xd9\x34\x90\x92\xdb\xc8\x03\x72\xe4\x46\x18\x77\xf3\xc7\xd5\x45\x0b\xf8\x27\x2b\xc6\xfc\xbb\x80\x8e\xed\x94\x53\x3f\x98\xab\xca\x52\x9d\x5a\x5a\xe2\xd1\xa9\xee\x9d\x17\x89\x9e\x27\x7f\xc0\x9d\xe4\x1f\xcd\xe2\x66\xcc\x4e\xda\xe2\x05\x2b\x03\xbf\x5c\xf2\xdb\x23\xe2\x68\xba\x8c\xfa\x8e\xf7\x0d\xd2\x82\xc5\x89\x18\xd1\x23\x61\x7c\x8a\x5d\x9d\x67\xe2\xbe\x8a\xe6\x59\xf5\xf3\xc7\xea\x0f\x55\x55\xe8\x82\xa1\xcb\x10\x1e\x37\x4e\xa9\xe0\x35\x7a\x63\x5e\xdf\xe0\x6d\x1e\x15\xf5\x88\x5b\xb6\x00\x35\x33\x82\x6f\x38\x3e\x12\x3e\x63\xaa\x0e\x2e\x93\x75\xc7\xd2\xf3\xf5\xcb\x09\x23\x32\xe2\x71\x69\x75\x34\xdb\x31\x0f\xe6\xe4\xec\x3c\xde\x58\x76\x59\xf0\x96\x58\xb6\xe2\x8d\x54\x06\x92\x86\x90\x65\x0a\x37\x83\x71\xf6\xa9\x6e\xd3\xa5\xa4\x1e\x6c\x28\xd8\x87\x29\x35\x63\xf4\xe0\xb0\x0b\xdc\x20\x70\xe1\xdb\xec\x7f\x2f\x0a\x9f\x45\xa6\xe9\x95\x44\x76\x8e\x1e\x5c\xed\xcb\xe2\x89\x12\xc8\x90\xcb\x35\x63\x5f\x77\x78\xbe\x9a\x39\x49\x1d\xe2\x9d\xd0\x64\xc6\xb5\x63\x99\x6d\x1a\xa2\x19\xe5\x3b\xed\x69\xf1\xd4\x44\xe0\x02\x1e\x7c\x7f\x9f\xed\x0a\xc1\xc2\x84\x25\xcd\x79\xbb\x2f\x35\x0e\x94\x54\x51\xbd\x2c\x8b\xe3\xcc\x3f\xb0\x08\xcc\xfe\x4b\x6c\x12\x4e\x48\x58\x5b\x2d\xd8\x89\xe3\xbc\x17\xc9\xa4\x5f\x29\x9a\xfc\x32\x5e\x92\xd6\xb7\xc3\x30\x57\x5d\x12\xa8\x53\xe5\x55\x2a\xac\x9b\x50\x87\xa7\x4a\x33\x80\x4f\x41\xda\xe5\x3d\xc8\xac\x49\x46\x70\x02\x7f\xea\xb7\xf8\xa4\xcd\xad\x7c\xcf\x30\x10\x52\x87\x57\x02\x74\x17\xe7\x9f\xf6\x2d\xfa\x1c\xdc\x4c\xa0\xde\xc0\x5b\xcd\xb6\x7d\x87\x44\xd3\xba\x8f\xbc\x0b\xfc\xec\x3c\x1c\xf5\xeb\xa2\x63\x62\xea\x33\xef\x07\xd8\x74\xa9\x94\x52\xeb\xdc\x20\x00\xa2\xcd\xeb\xd0\xd5\xd0\x8b\x76\xbc\xfc\x41\x7b\xa7\x72\x3f\xc8\xe8\x5d\x13\x4e\x43\xf4\xb5\x95\x54\x71\x1f\xc4\x2c\xa1\xee\x77\x08\x4c\x2b\xce\xb3\x01\x35\x88\x60\x1f\xcb\x71\x43\x65\x2c\x78\xc7\x3e\x97\xd4\xae\x20\xd1\x3f\xb3\x98\xdf\x1c\x03\x16\xb3\xb2\x32\x62\x9f\xd7\xb5\x82\xd2\xf9\x21\x22\x82\xe6\x5c\xbc\x68\xf9\x10\x69\xc3\x33\xb3\x58\x0c\x03\x7a\x4f\xb5\xce\xfd\xdc\xc5\xf5\x84\x8f\x30\x6d\x0f\xe3\xf2\x12\xf9\x45\x6e\x16\xed\x2f\x21\xb0\xec\x48\x86\xcf\x7a\xf6\x20\x78\x95\xf6\x3a\x46\x52\xf0\x55\x78\xe0\x50\x6a\x89\xd9\x62\x76\x0f\x20\xaa\x1b\x6d\x8d\x46\x91\x4a\xdf\xf6\xf9\xc4\x51\x8d\xae\xdc\x90\xb4\xb9\x36\x49\xa0\x36\x63\xd3\x7d\xdb\x01\x75\xd0\x2e\xc4\xbe\x09\x61\x64\x6f\x96\xd6\x1a\x7d\x9a\xbb\x75\x39\x7a\x44\x27\xb8\xab\x96\x5e\x8c\x6c\x2b\xa7\xa5\xc3\xd9\xb2\x71\xcf\xc2\x37\x5c\x9c\x1c\x5a\xab\xdb\x57\x20\x9f\x46\x76\x0b\x28\x2a\x4b\x33\x34\xee\x0e\x1e\x82\xd3\xcd\x75\x23\x02\x35\x1f\x5e\x1b\x91\xae\x55\x3c\xfe\xe6\x6c\x0c\x0a\xd5\x8f\xae\x6e\xf0\x34\x33\x91\xdb\x87\x85\x3d\xe5\xb6\x03\x4e\x8a\xca\x6f\xf4\x8f\xd8\x32\x03\x08\xcb\xb9\xc0\x00\xd2\x43\x9d\x94\xce\x4a\xe6\x52\xdd\x9c\xdc\xbd\x3a\x5a\x94\x51\x8f\x6b\x2e\x5e\xe6\x05\x99\xc4\x5d\x4e\x13\xf2\x83\xa5\x4b\x4d\xe0\x0b\x04\xd6\xe7\x3e\x1f\xc9\xd2\xff\x51\x2a\xc8\x5a\xc2\x31\xa6\x3b\xff\x1b\x14\x57\x4f\xcb\xd6\x5a\x78\x55\xc6\x13\x5a\xba\x37\xf0\x75\xba\xba\x5a\x3c\xa9\xe0\xe6\x5b\x79\xae\xcc\x1b\x3f\x5f\x86\x90\x1d\x32\xea\x6c\x49\xdb\x82\x80\x47\x0d\xe8\x15\x03\xe6\xd2\x52\x8a\x6d\x97\xb8\x38\x1b\x13\x0d\xea\xb2\xde\xf3\x74\x31\xb3\x71\x03\xae\x65\xeb\xba\x21\x14\x42\xf0\x0f\x59\xfb\x19\x93\x17\x45\x53\xaa\x82\x8f\x58\x98\x2c\x5f\xdf\x80\x40\x2c\x5f\x87\xa9\x56\x72\x61\xe6\xec\x2a\xf4\xcc\x8a\x26\xea\x9d\x67\x7c\xfd\x1b\x76\x8b\x1d\xdd\xaf\x34\x6d\x9f\xb5\xb0\x1a\x87\x41\xe8\xb4\xe8\x9e\x7d\x9a\x4b\x02\xe8\x56\x2b\x5f\x06\x5c\x40\xd8\x6f\x73\x08\x9d\xcf\xbf\xe3\xd0\x66\x51\xb9\x65\x1c\xa2\x30\xf3\xe2\xec\x2e\x40\xd9\x65\x25\x7e\x32\x0b\xce\x31\x78\x39\x02\x38\x85\x71\xbc\x2d\x2f\x03\x5c\xae\x54\xe3\x11\x32\xa2\x7d\x8a\x43\x88\x6d\x4c\xcf\x87\xfc\xd1\x3a\xc2\x20\x3b\xed\x83\x94\x0c\x95\x8f\x6a\xfb\x8b\x0c\xc2\x91\x3c\x19\x3d\x82\xb1\x75\x7c\xa5\xb9\x1a\xc8\x5b\xae\xba\xcf\x15\x6e\x7b\xae\xbe\xd7\xab\x16\x89\x5d\x80\x4a\xcb\xfa\xf4\x9e\x4f\x59\x09\xf8\x31\x81\x3d\x50\xbd\x2c\xd1\x43\x3b\xaa\x4e\x35\xc2\xc7\x43\xbd\x8c\x41\x39\xfc\xf9\xdd\x0f\x01\x9d\x11\xac\xb9\xd4\x76\xfd\x29\x62\xde\xda\xd0\xf0\xbc\x8b\x0d\x8a\x68\xe3\xe3\xd8\x9f\x15\xff\x94\x55\xcf\xb6\x9e\xf0\x65\x68\x36\x3f\x47\xec\xeb\x5b\x4e\x85\xe1\xe1\x4b\xb3\x26\x3b\x6b\x95\xe9\xb7\x29\x45\xa0\x4b\x46\x76\xad\xb8\x48\x33\x1d\xe7\x9c\xf7\x5b\x83\x5e\xc6\x7c\xcb\xb9\x24\x34\x09\x20\xaf\x51\x6b\x5e\xdf\xae\x65\xdc\xfd\x94\x36\x93\x2c\x7f\x58\xce\xe5\x44\x86\xd9\x4d\x72\x67\x8d\xee\x8c\xb9\x4c\x3d\x02\x81\x32\x54\x4a\x12\x8a\x79\x9a\x8c\x1c\x4a\xd2\xb7\x4a\xd8\x2a\x25\x50\xe7\x3d\xaf\xfa\x14\x75\xb6\x83\xa5\x45\x10\xe7\x48\x8c\xa8\x55\xf7\x33\xa6\x8e\x0a\xf4\xf9\xc6\x0c\xad\x1b\x52\x1b\xa6\x8b\xbb\x67\x1f\x33\x63\x96\x5b\xf9\xc1\xde\xd0\xc7\xcf\x13\x4f\x16\x5f\xe1\x79\xa1\xce\xde\xcc\xcf\xfb\x21\x43\x92\xe2\xd5\x40\xe4\x7d\x3a\x36\x7b\xed\xa3\xa0\xe2\x50\x1e\xfe\xe4\xce\x08\x50\x59\xe1\xb1\xf3\xe6\xef\x5f\xe8\x9f\x56\x24\x4b\xfc\xff\xba\xf9\x6f\x00\x00\x00\xff\xff\xd9\x4a\x36\x4a\x8f\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x97\xc9\x96\xb2\x3a\x17\x86\xe7\xb9\x8a\x7f\xce\xfa\x97\x82\x4d\xc1\xe0\x0c\x42\x12\x3a\x21\x11\xc5\x06\x67\x20\x8a\x86\x52\x44\x04\x94\xab\x3f\xd6\x67\x9d\xaf\x1a\xe2\xa8\xd6\x5b\x7b\xb3\x7c\x36\xfb\x31\xf0\xff\x8f\x8f\x4e\x4c\x9b\xfe\x0f\x91\x59\x60\x1b\x36\x82\x01\xf9\x93\x02\xcf\xb6\x1d\xd2\x22\xa4\xf7\xaa\x14\x36\xb6\x0e\x53\xdb\xdf\xcf\xd6\xfa\x50\xdb\x10\x39\x26\xbd\xbb\xa5\xfa\x86\xfe\xe8\x9f\x02\x48\xf5\x34\x2b\x0e\xd9\xd1\xd4\x9a\xbe\x0e\xfd\xd2\x80\x18\x5e\x81\x37\xb3\x1b\x02\x43\xbc\xf4\xfd\x09\x69\xde\x71\xac\xd0\xeb\xf6\xa4\x1d\x42\x25\xbd\x1b\x01\x0c\xf4\x94\x2e\x75\xe8\x05\x98\xd0\x3a\x54\x6e\x8f\x58\x31\x78\x84\x74\xec\x07\x70\x67\x34\xfd\x3b\xa0\x1c\xb6\x1e\xcf\x1e\x5e\x6b\x37\x34\xa0\xd1\x47\x48\xdb\x9f\x99\x87\xbc\x3b\xe1\xd0\x7f\x5d\x2c\x0f\xd0\xe2\xeb\x62\x20\x7a\x5e\xda\x83\xa5\x09\xe5\x05\x81\x77\x8f\xc4\x27\x2d\xdb\x04\x08\xc1\xb9\xdd\x60\x3f\x74\x26\xf9\xc6\x3e\xd4\x5b\x0a\x7d\xa2\xeb\x3e\xc4\x69\x4a\xa6\x10\x3f\xff\xef\xe7\xe8\xf9\xb7\x0e\xa0\x9b\x2b\xeb\x51\x26\x73\xc9\x3b\xf8\x7a\xc8\x6f\x93\xfa\xec\xf5\x97\xba\xd2\x5e\x5b\x96\x3b\x85\x49\xa4\x68\x64\xf7\x2b\x72\x23\xd7\x32\xdb\x58\xc1\x71\xe7\x95\x8c\x27\x95\x29\xd5\x39\x8d\x5d\x50\xea\xd5\xb1\xb7\x79\x9b\xac\xcb\xc6\x5d\x69\x87\x31\x6f\xed\x0b\xc9\x26\xc5\xa0\x9e\x6b\xdb\xd5\x92\xe0\x72\x6c\x21\x69\xba\x70\x8f\x8a\xb2\x8f\xf6\xa9\x9f\xba\x23\x9e\xc5\xc5\x68\xd0\x3f\xba\x04\x4a\xa0\x80\x89\xf2\x50\x64\x53\x8d\xc3\x47\x30\x8c\xc6\xb4\xcd\xed\xc5\x32\x33\xb4\x72\x5e\xde\xd4\x6d\xc6\x5b\x79\x58\x70\x35\x29\x1c\xd6\xb8\x8d\x2e\x5b\xf4\xa0\xd5\xe7\x37\xbe\x9d\xbf\xad\xa5\xd3\xd5\x02\xe6\xf9\xea\x27\x7a\x72\x96\x0b\xa8\x59\xc3\xfa\x1d\x25\x4b\xe7\xbe\x91\xce\x63\xb9\xe5\x46\x58\x6c\x7d\x9f\x9f\x76\xda\x5b\x92\x8d\xd6\x7d\x29\xd8\x14\xd7\xe9\xd6\x98\x87\x04\x59\xd5\x6c\xbf\xda\xd7\x08\x44\xf3\x5b\xbf\x28\x37\xce\xd2\x36\xbd\xd9\xee\x1e\xed\xde\xb3\x5a\x0f\x6e\xbb\xcb\xe8\x1a\x7b\x73\x25\x97\xfa\x11\x5e\x43\x47\x3b\x10\xad\xa8\xf7\x28\x09\x27\xce\xb4\xaa\x8c\xc8\x51\x55\x37\xb6\xee\xef\x20\x39\xd1\x2a\x40\x76\x54\xa0\xaa\xb9\x35\xeb\xcb\xe8\xa0\x9e\xf6\x01\x41\xf0\xb9\x1d\x30\x62\x48\xe7\x59\x93\xa6\xa1\xec\xc1\xe1\xc7\x9d\x4a\x70\x43\xf4\x5e\xe3\x93\xe7\xd2\x19\x39\x86\x09\xf8\xb8\xb7\xd6\x7c\x41\x0c\x0e\x17\x7a\x9a\x5e\xf5\x94\x18\xba\xbf\xc5\xd0\x0f\xed\x49\x13\x3e\x6f\xdd\xc2\x7a\x16\x7f\x5c\x04\xfd\xa9\x9d\x11\x92\xa6\xeb\xd1\x73\x83\x0d\x2d\xb4\x1d\x10\x9b\x1a\x0f\x57\xf7\x3c\x1e\xd0\x7e\x9a\xde\x5f\x9b\x86\x61\xf5\xca\x1f\x08\x5b\x4e\x1d\xae\x68\xee\xcd\x47\xe5\x73\x4b\x0f\xb1\x6d\x7b\x9f\x9b\xfa\x70\x4f\xf7\x1a\x84\x8a\x51\x7e\x35\x7a\x9d\x46\x8a\x3a\x8d\xf2\x47\xe3\x7f\x7d\xe0\xd5\x18\x76\x1b\x1f\x9d\xc6\xe1\xf7\xc6\x57\x5f\x56\x81\xbf\x8d\xeb\xcf\xaf\x1a\x7c\xfb\xfa\x7f\x33\x22\xc8\xec\x3f\x19\xf8\x19\x7a\x82\x42\x5f\x90\x2d\xfe\x66\xe0\x2b\x0c\x05\x85\x5b\x41\x96\xfe\xc8\xc0\x2b\xcc\xba\x85\x5c\x80\xc2\xbb\x28\xc0\xe3\xb6\xa0\x50\x80\xc2\x05\x28\x7c\x21\x18\x22\x17\xa0\x70\x01\x0a\x4f\x05\x43\xe4\x02\x94\x56\x80\xd2\x12\xc1\x10\x5b\x01\x4a\x2b\x40\x69\x7d\xc1\x10\xdb\x85\xa0\x50\x80\xd2\x76\x51\x80\xd7\xa6\x82\xc2\x2e\x0a\xc5\x5d\x14\x8a\x49\x77\x88\x14\x77\x51\x28\xee\xa2\x50\xec\x77\x87\x48\x71\x17\x85\xe2\x2e\x0a\xc5\xdb\xee\x10\x29\xee\xa2\x50\x2c\x40\xf9\xe5\x0a\x78\x85\xdd\x0d\xa3\x81\x00\x45\xe0\x0a\xa0\x02\x59\x68\x20\x40\x11\xb8\x42\x9f\xae\x74\x87\x18\x08\x50\x04\xae\xd0\x4f\x57\x7e\x0e\x51\x20\x0b\x15\xb8\x42\xbf\xb9\xf2\x35\x44\x81\x2c\x94\x0b\x50\x7e\xb9\xf2\x1a\xa2\x40\x16\xca\x05\x28\x02\x57\x00\x15\xc8\x42\x5b\x01\x8a\xc0\x15\xfa\x74\xa5\x3b\xc4\x56\x80\x22\x70\x85\x7e\xba\xf2\x73\x88\x02\x59\xa8\xc0\x15\xfa\xcd\x95\xbf\x43\x64\x02\x59\x18\xee\xa2\xb0\x5f\xae\x80\x57\xd8\xdd\x30\x86\xbb\x28\x4c\xe0\x0a\x60\x02\x59\x18\xee\xa2\x30\x81\x2b\x4c\x74\xb0\x30\xc1\xc1\xc2\x04\xae\x30\xd1\xc1\xc2\x04\xb2\x30\x81\x2b\x4c\x74\xb0\x30\x81\x2c\x4c\x70\xb0\x30\xd1\xc1\xc2\xbe\x64\xb1\x74\x4b\x85\x10\x9a\xd6\xf3\xf1\x42\xf0\x21\xbf\x1f\xfd\x5c\xf0\xf9\xec\xa7\xc3\xe7\xef\xd6\xd1\x1c\xc5\x1b\x9d\x23\x67\x7b\xde\x3f\xf8\x4a\x1a\xf6\xb1\xc1\x13\xc7\xc5\xa8\x54\x26\xbd\x11\x2e\x57\xf2\x7d\x46\xd2\x59\xef\x72\xb1\xe4\xba\x72\x51\x93\x1b\x60\xb6\x6b\x4f\xd7\xb3\x99\x1f\x92\x4c\x33\xdc\xe8\x38\x5d\xcc\xd5\xa5\xb3\x5d\x1e\x37\xe5\xa2\xb2\x77\xaa\xdb\x4f\x93\xe8\xde\x10\x9e\xaa\xfa\x6c\x52\x0d\xa2\xa9\x94\xb4\xc6\x8d\x9c\xee\xad\x33\xba\x0c\xc6\x80\x69\xa8\x37\x53\x77\xe8\x38\x5c\xee\x74\x82\xe6\x09\xbb\x78\x4d\x3b\x74\x93\x74\x1e\x2b\x6d\x39\x1c\xee\xe3\x1e\x5e\x4b\x54\x3a\xd9\x67\xbb\x46\x53\xcf\x61\x2c\x3f\xfb\x52\xc9\xe7\x3b\x69\x6b\x44\x60\x43\xd1\xb4\x48\xb5\xf1\xa4\x6d\x06\x9e\x61\x56\x8f\x38\xdb\x87\x74\xf5\x70\x95\xde\xb8\xdf\xa7\xf3\xc7\xe0\x8d\xb9\xb7\xfd\x82\x1f\x0c\x73\x1f\xdc\x0a\xb3\xc5\xa7\x66\xab\x24\xd6\x18\xe5\x1b\x23\x0f\xc0\x2a\x2a\x8f\xb5\x5b\x20\x74\xcc\x9e\x8f\xcc\x6f\xde\x34\xae\xc3\xf7\x2a\x3e\xcf\xce\xb7\xb8\x1e\x9d\x8a\x5e\x2d\xe7\x56\x53\x28\x3b\xf9\x32\xf5\x7d\x36\xa2\xb3\x2c\x93\xd5\xc2\x38\x0d\xab\xb7\xdc\x74\x09\x88\xa7\x6a\x2a\x4f\xa4\xcd\x5d\x53\x23\x4d\x65\xd2\xb6\xf6\x48\x3a\xf0\xa4\x47\xb1\x19\x4d\xc3\xf2\x1f\xf0\xe7\xb5\x82\x50\xdc\x7d\xd5\xf8\x37\x00\x00\xff\xff\x04\x00\xae\xca\x87\x0c\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 3207, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xab\x6a\x16\x46\x7b\x9e\xe2\xf4\x68\x64\xf8\x49\xa6\x24\xe7\x9c\xe9\x00\x03\xc6\xe4\x1c\x9e\x7e\xce\xdc\x69\xef\x6e\x77\xb3\xb4\xf4\x49\xeb\x3f\xff\x3b\x56\x90\x14\xf3\x8f\xeb\x31\x7f\x6c\x57\x09\x19\x5f\xf8\xa3\x09\xc9\x3f\x1f\xc8\x50\x14\x61\x3c\x15\x96\x61\x34\x8e\x71\x04\x66\xff\xa5\x55\xef\x47\x36\x7e\x8b\x8c\xd8\x58\xc8\x0c\x17\x8f\x1b\xc8\xb9\x75\x18\x64\xdd\x8f\x89\x4f\x2c\xed\xcf\xc3\x3d\xc4\xdb\x6f\xb7\xfd\x58\x90\x8a\xdf\x27\x69\x02\x3c\x27\xe1\x1a\x5d\xf7\x53\x22\x75\x7a\x58\xa7\xf2\x61\xb6\x1c\xc8\xb3\x6d\x34\xad\xe7\xcc\x4b\x49\xeb\xe8\x95\x06\x8e\xf5\x8c\x85\x8e\xd3\xce\xae\xe7\x29\x3d\xc1\x2c\x07\x31\x47\x6f\xb9\xfb\x32\x54\x9e\xb2\x3a\x3c\x39\xb2\x58\xae\xe7\x41\x7e\x6d\x3f\xd5\xfe\x2e\x23\x66\xd5\x5f\x37\x72\x62\x70\x69\x37\x76\xdd\x9e\x6d\xc7\xcd\x6c\x5f\x60\x6c\x29\xe6\x60\xe4\xa0\x80\x80\x0c\xe0\x6a\x37\x2f\x7d\xab\xc8\x6c\x2d\xb2\x72\x63\x11\x11\x54\xd1\xc8\x23\x55\x03\x07\x2a\x1a\x0c\xe2\x40\x56\x4b\x6c\x19\x61\x33\x5d\x2c\x67\xa5\x14\xb6\x01\xbf\xab\x7c\xc2\xec\xe7\x15\xa2\xcf\x50\xad\x1d\xa5\x24\x44\x3a\x85\xdf\xea\xa4\x61\xde\x7c\xb5\x5d\x50\x27\x97\x48\x89\x13\x19\x79\x6f\xd1\x42\xc9\xa1\xdf\xd6\x4b\xcf\x7e\x94\x3b\x9a\x05\x33\x00\xc1\x07\x33\xfd\x56\xd1\x1a\x1a\x5b\x98\xc4\xc3\x71\x78\xce\x6d\xad\xa4\x10\x24\x80\x30\x94\xef\x3c\x6a\x14\x87\xb1\xe5\xd0\xcb\x77\x4a\x1b\x8e\xc2\x33\x0e\xc3\x32\xe3\x5f\xd9\x02\x90\x3a\xca\x7d\x4f\x81\xd3\xad\x0b\x26\x40\xd4\x47\x1d\xe8\xde\xb2\x0c\xe5\x71\x4b\xbb\x0f\x30\xfe\x62\x2c\xbc\x7d\x6d\xdd\x91\x96\x7d\xda\xb0\xd8\x12\xde\x08\x48\xb8\x8f\x66\x12\x88\xd5\x8b\xb4\x9e\x9e\x4c\xf9\xd1\xc1\x45\x72\xcd\x68\x42\x9d\xaa\x29\xa3\x45\x66\xc3\x3d\x51\xbb\xbe\xa2\x09\xde\xc0\xdd\x5a\xce\x4b\x65\xd4\x16\x4b\x6c\x45\x8f\x23\x63\xe5\x69\x5d\x5d\xa1\x6f\x84\x1d\xc5\x4c\x37\x89\x54\x66\x32\x15\xc6\x1c\x99\xf2\x20\xb6\xc7\xbb\xbb\x67\x67\x92\x5f\x87\x33\x2e\xe7\x16\x3e\x61\x24\x9e\x86\x26\x6b\xc8\x66\x68\xa3\x87\xfb\xad\xc3\x60\x24\x68\xe4\xe4\x89\x50\x45\x7e\x8a\xc6\x45\x8d\x68\x7c\x90\xf0\x2c\x4b\xef\x90\x9a\x33\x54\xd0\x1e\xab\xcd\xbd\xbe\x24\x4e\x36\x54\xe0\xbd\x38\x6f\x95\x87\x7c\x09\x97\x78\x8c\x37\x34\x34\xd3\x34\x0b\x59\xfe\x75\xda\xb0\x61\x75\x88\x6b\x99\xa2\x95\xfe\x96\xb6\xad\xc6\x6b\x81\x7e\x26\x8e\x2c\xfc\x2a\x17\xcb\xc3\x61\x8f\xb2\x71\x83\x89\xec\xc5\x1b\xa5\x42\xba\xd6\x51\x62\x44\x45\xc4\x3a\xfe\x7a\x8c\x0d\x52\x66\x4c\x2d\x4c\x0b\xb1\x2e\x07\x53\xd8\xdd\xa8\x3b\xdb\x2c\x82\x94\x87\x5d\x7d\x5d\xe0\xea\x44\x60\x00\x76\x09\x3f\x12\xee\x32\xf4\x9c\x67\xce\x72\xae\x2d\xa9\x61\x8c\x7b\x46\xea\xa8\xda\xcd\xcd\x52\xd5\xd0\xda\xf0\xc2\x31\x39\xee\x86\x28\xd7\xe8\xfb\xa7\x40\x1f\xa7\xc9\x7b\xe4\x25\x87\x83\x79\x79\xe1\xae\x72\x2d\x00\x8f\x73\x2f\x59\x0b\xf3\x2d\x2c\x78\x54\xd9\x19\x0a\xac\x52\x3f\x74\xcc\xeb\x7d\x19\xb5\xcc\xdb\xb2\xc6\x5a\x72\xff\x28\x8e\x0f\x2e\x42\xe7\xc7\xd7\xc1\xf1\x76\xd4\x57\xbb\x83\x1c\xf5\x85\x63\x40\xb7\x28\x2b\xb2\x3d\x25\x78\x9b\x75\x94\x86\x4b\x6a\xfa\x89\xce\xf2\x35\x06\x47\xa6\xd7\x17\x17\x2c\x7d\xf0\x7f\x62\x5f\x90\xa1\x07\xbb\x43\x2c\x19\xe6\x79\xc5\x03\xc5\xb5\x02\xa9\xdd\x53\xd8\xcc\xe2\xec\x0b\x0b\x03\xde\xe4\xc8\xdc\x6d\x9a\x7f\xa8\x55\x42\xee\x7c\x43\x99\xc2\x97\xc9\xcf\xde\x37\xe3\xef\xf9\xcd\x92\xdd\x84\xf8\xed\xd4\xec\x40\xe8\x01\xe2\x48\x2a\x4c\x96\x30\x8c\xb7\xfb\xc9\xa2\x25\xb3\x74\x93\x30\xd8\xf0\x0f\xa9\xc1\x8b\xe8\x79\x44\xa2\x80\xf0\x0b\xdd\xef\x9a\x2c\x28\xff\x56\x93\xa9\x8e\xf8\x2a\x80\xa2\x58\x9c\x07\x53\xfc\xc5\x70\x06\x7f\x02\x23\x84\x3d\xb0\x52\x92\x6e\x8b\x59\x23\x81\x9d\x3c\x7e\xc3\xde\x19\x26\xf2\x17\x99\xa1\x5e\xcc\xa7\x05\x69\x80\xd0\xfe\x17\x73\xc2\x36\xa0\x86\xd9\x86\xe4\x68\xd5\xb9\x54\xa5\x37\xd0\x2b\xa4\xa7\xdb\x76\x08\xac\x79\xc7\x08\x2e\x1d\x12\xa0\x02\x25\x5c\xfc\xd1\x1b\xd4\x49\xbf\x00\x45\xe7\x1f\xdd\x53\x2b\x9c\x17\xba\xfa\xcc\xd8\x4d\xdf\xd7\x00\x2a\xc5\xb6\xbb\x93\x40\x0d\x53\x46\x74\xd5\x03\x19\xd2\x93\x0f\x1c\xd5\x44\xfd\x6e\xa1\xa6\x27\xd2\xf1\xd6\xd7\xab\xaf\x98\xca\xd1\x98\x0f\x5e\x8d\x30\x20\x24\xdd\x2f\x33\x9e\x6a\xe1\x96\xc1\x09\x0d\x63\x7c\x6a\xef\x97\x3a\x1f\xc4\xfa\xfd\xea\x08\x78\xd5\xa0\x72\x34\xb6\x96\xfc\x2a\x5c\x3f\x2e\x4f\x49\x37\xd9\x73\xbd\x50\x7c\x38\x7a\xaa\x31\x5c\x43\x86\x27\x7a\xf7\x85\x70\x31\x8c\xf0\x4e\x21\x3e\x66\x64\x6d\x84\xdf\xcc\x4c\x0d\x63\xb6\x1c\x2f\xd1\xb3\x6e\x6d\xcd\x40\x2a\xbb\x9d\xea\x30\x46\xdf\xbe\xa7\x27\xf4\x55\x8d\xd7\x6d\x13\x26\x6c\x6f\x40\xf9\x69\x70\xdc\x8f\x2d\x3e\xd2\xb7\x87\x3a\x72\x0a\x6d\x24\x24\x0f\xae\x27\xf6\xda\x79\x3e\x49\x24\x07\xb1\x27\xf1\xbf\x60\xbe\xcd\x37\x71\xd2\xac\xd9\x11\xaf\x96\xf0\x5d\x51\x68\x24\xe9\x7e\x4a\x69\xd3\xcd\xa0\xe0\x41\x53\xe6\xcb\x06\xb9\x2d\x98\x98\x51\x62\x19\xcd\x22\x4f\xd1\x58\x58\x3d\x93\x95\xb0\xb9\x9c\x1c\xdb\x52\xee\xfd\x41\x5b\xd8\xee\xee\xed\xdb\xd0\x7e\xa2\x46\xd2\xa7\x9a\xd9\xb5\xbd\xd1\xc4\xa0\x3e\x71\xb9\xda\x33\xf4\x04\x73\x90\x81\xb7\x41\x5d\x34\x6b\x3d\xcb\xdf\x25\xb7\xa8\x27\xf3\x15\xaa\x1e\xf2\xe9\xee\x53\x51\x44\x57\xb9\xa7\xca\x95\xeb\xc2\x11\xb7\x3d\xcf\x50\x24\xeb\xb5\xa7\xeb\x1b\x42\xd9\x34\x0e\xe4\x24\x1b\x98\x4a\x49\x89\xea\xd7\x9c\xd3\x60\xf6\x0c\x49\x7b\x32\x8f\x88\xd2\xbb\xb0\x61\x42\x65\x2d\x1f\x53\xbb\x5e\x94\xdf\x8e\x57\x12\x2e\x03\x3e\x46\x0e\xfd\x93\x14\xc1\xe4\xff\x3d\x35\xff\x0d\x00\x00\xff\xff\x95\xa1\x98\x49\x8b\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x94\x3d\xf3\xaa\x38\x1c\x85\x7b\x3e\xc5\xf6\xcc\x8e\x08\x0a\x52\xdc\x22\x81\x00\x01\x82\x37\x20\x08\x74\x82\x18\xe5\x45\x50\x84\x28\x9f\x7e\xfd\xdf\x62\x67\x76\x36\x5d\xce\x6f\xe6\x34\xcf\x33\xe7\xef\x9f\x07\x91\x8d\x83\xbf\x0c\x14\x1e\xb0\x85\x0d\x70\x40\x7f\x52\x81\x60\x6c\x02\xd3\x30\x40\x75\x63\x80\x63\x08\x18\x0e\x01\xc1\x03\x43\x09\x3a\x66\x69\x9d\x78\x5c\xeb\xf6\xf7\x75\xb3\x20\x6e\xd2\xcc\xf5\xfa\x1c\x5f\xe7\x32\x00\x14\xf9\x90\x02\x2e\x78\x0b\x8a\x08\x04\x36\x58\xc7\xc8\xb8\x12\x97\xca\x7a\x7d\x52\xdc\x39\x3b\x06\x3d\x09\x63\x8e\x78\x66\x26\x94\x9a\x88\xbf\xcd\x42\x0e\x9e\x65\xa7\x5f\x33\x99\x31\x2a\x21\xee\x5c\xcb\x40\x20\x87\x8c\x93\x05\x6f\x49\x4d\x3e\xc4\x8c\xa5\xe3\x37\x24\x87\xf2\xbf\x59\x0d\x6a\x12\x62\x8e\xc0\x9f\x32\x0f\xf1\xf6\xdf\x32\xe1\xdb\xf6\x36\x0f\xc0\x87\x2c\x48\x20\x20\x07\xe8\xb8\x73\xa1\x50\xce\x18\xba\x11\x20\xd9\x46\xf4\xb0\x23\x5c\x28\x26\x45\x10\xd0\x18\x80\x0d\x86\x26\x07\x3f\x77\x0f\xf4\x18\x0a\x80\x1a\xf3\xc5\x98\x1e\xc1\x27\x59\xc5\x7e\x56\xad\x95\x0b\x7f\xb5\x7e\xf0\x58\x6d\x57\xe3\x6b\xc6\x76\xa5\xdc\x3f\x62\xd6\x7c\xe4\x1d\x88\x22\x85\xef\x6f\x68\x99\xc6\x7b\x48\x74\xb1\xce\xad\x00\x0b\xd3\x11\x13\x75\x2d\x29\xb7\xa9\xdc\x57\xc7\xe0\xac\xaf\x02\x85\x0e\xe5\x36\x6e\xfa\xd2\xc8\x57\x5b\xad\x8d\x5b\x78\xb7\x27\xe5\x7d\x59\x77\x8b\xe4\x1b\xec\xb8\xce\xed\x59\x79\x42\x59\x71\x2c\x46\x84\xe8\xd3\x24\x14\x79\xb2\x57\x35\x9a\x5c\xa4\xe7\x75\xa7\x9e\x8b\x60\x08\x4f\x23\xf6\x57\x0f\xed\x2c\x66\xee\xe0\x90\x3d\x1f\x38\xc1\x09\x15\x95\x3e\x26\x4b\xe5\xc7\xfa\x94\x27\xb7\xd3\xc7\xf5\x85\x97\x56\x42\xd2\xe9\xa7\xe2\xf5\x94\x3a\x7b\xb7\xdd\xd6\x78\xa9\x44\x25\x25\x7b\xd4\x2a\xba\x35\x1c\x17\x71\x0c\x9e\x9a\xe8\xbb\x6a\x95\x89\x47\xad\x9e\xf4\xa6\xa1\x75\x26\xf7\x63\x77\x05\x2f\x4f\x70\xe5\x68\xa8\xfd\xda\x2f\x0e\xa5\xf4\xbb\xf9\x5d\x19\xde\xeb\x42\x2d\x75\x79\xb1\xa9\x63\xe6\x40\x32\xd9\x28\x95\xb0\xcf\x8d\x92\xa9\x86\xe5\xbc\xd7\x0b\xbc\xee\x6c\x87\x4e\x07\x2a\x45\xc6\x9a\x09\x5e\xee\xc5\x92\x82\xad\x2d\xdc\x96\x4c\xba\x0c\xee\x49\xdd\xec\xeb\xfe\x0e\xd8\xd7\x0e\x60\xd7\xee\x02\x5a\x02\x36\x3f\x9e\x9c\x4d\x8e\xe0\x8a\x53\xf4\x15\xce\xea\x4d\x70\xf8\x21\x27\x38\x51\x8c\x4c\x13\x78\x90\xb1\x27\x64\xc8\x82\xb4\x34\x41\x0d\x02\xc8\x9a\xc7\xb5\xb9\xd9\x3a\x97\xbe\xf8\x46\x0b\x80\xbd\xf1\xb5\xef\x4b\xee\x59\x86\x05\x38\xa8\x6c\xd2\xef\x96\xd9\x08\x46\xb5\x96\x9a\x0b\xdf\x74\xe2\xe4\x5f\xbc\x74\x91\x4d\x49\x63\x8e\xbf\x3b\xb6\x5f\x5c\x8a\x5c\xa5\x33\x82\xf1\x60\xce\xbb\xef\x57\xdd\x5e\x8f\xdb\x54\x9f\xbb\x8b\xd7\xbe\xb1\x5e\x3c\xee\x35\x10\x9c\x9b\xb3\x31\x35\x1a\x8a\xc7\x3a\x75\xc5\x09\xce\xda\x82\x55\xf5\xf0\xd4\x96\x4a\xdb\xf4\x5e\x1a\xad\x3f\xf2\x9c\xce\x9b\x8b\x42\x72\x6b\x45\x2a\x5c\xcf\xae\x5c\x7d\x1e\x69\xb6\x2b\x94\xfd\x00\x05\xba\xc8\xec\x59\x6f\xca\xc9\x11\xad\xc2\x5c\xf6\xe7\xe6\xed\x2b\xb4\xfd\xac\x07\xc7\xbd\x63\x9e\x68\x49\xb3\x97\xb3\xc1\x6d\xaf\xbd\xec\xfb\x00\x87\x98\xa9\x39\xd3\xce\xad\x57\xc1\x66\x37\xee\x04\xb5\x9d\xab\x7b\x18\x4d\x60\x4c\xf1\xfb\x45\xa4\x1e\x94\xdb\x39\x0a\xba\xf0\x54\x37\x71\x9f\x5e\x92\xd8\xb1\x45\x31\xb7\x77\xfd\xb9\xb7\xb4\xa8\xdd\x14\xc1\xa6\xd3\x9e\x37\x73\x7c\x4a\x0d\xd2\x3c\xe1\x3e\x57\xb8\x4b\x06\x3e\xdf\xfb\x79\x95\x6f\x3d\x28\xbd\xd0\x73\xee\x3c\x38\xe6\x5f\xf3\xe3\x57\x02\x57\x8f\x91\xaf\x86\x04\xb4\xaf\x4f\xa0\xa9\x43\x52\x9e\x47\x37\x0f\x98\xad\xa9\x7a\xa0\x2a\x82\x71\xd2\xd2\x3d\xfd\xf5\x4b\xf8\x33\x0f\x28\x30\xff\x3f\x19\xff\x04\x00\x00\xff\xff\x3f\xf5\xc7\xd0\x4f\x04\x00\x00")

func test_certsRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootCrt,
		"test_certs/root.crt",
	)
}

func test_certsRootCrt() (*asset, error) {
	bytes, err := test_certsRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.crt", size: 1103, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xab\xde\xb3\x85\x7b\x9e\xe2\xf4\xe8\x8a\x64\x03\x2e\x7e\x05\x99\x4d\x4e\x26\x75\xe4\x64\x30\xc6\x9b\xf8\xf4\xd7\xe7\xd4\xff\x69\x47\x1a\x7d\x1a\x7d\x5a\xeb\xff\xfe\x0e\x2f\x29\xc0\xfa\xe3\xf9\xdc\x1f\xc7\x03\x21\x17\x48\x7f\x74\x29\xf9\xb7\x41\x4c\x00\xa4\x99\x03\x3c\xc7\xe9\x02\xe7\x4a\xdc\x42\xed\xcb\xa7\x2f\x5e\x35\x21\x90\x2a\x2c\x29\xd6\x48\xfd\x2b\xdb\xd0\x9a\x31\xf2\x93\x9f\xe0\x9d\xdd\x46\xcd\x84\x1b\x27\x0d\x90\x15\xdf\x2d\x62\x32\x8b\x86\x07\x4e\xfd\x26\xbd\xc0\x37\x5e\x9d\x68\xc3\xd2\xba\x2d\x93\x38\xbd\xfa\xb8\xae\xaf\x12\xd7\x63\x3b\xd4\x74\x95\x1b\x6b\xb4\xba\x87\x9a\x9b\x1e\x0b\x64\xe3\x47\xfa\x7d\x08\xfb\x5b\x46\x60\xe4\x2d\x0f\x7a\x2f\xe1\x71\x24\xa2\xf4\x9d\xe5\x27\x2f\xc0\x6e\x9a\xed\xc7\x48\x50\x65\xba\x4e\xd1\x95\x3d\xa3\x45\x10\x30\x7a\xa5\xea\x51\xc8\xbc\x4b\xfc\xea\x85\x28\xc8\x4f\x07\xd2\xb2\x88\x98\x54\x47\x38\xf9\x18\x26\xe3\xb7\xf3\x99\x8a\xe2\x02\x6d\x8b\x46\x26\x7b\x68\xed\x66\x57\xc9\x69\x52\x1b\x24\x2e\xb1\xd5\x4a\xcc\xcb\xc2\x2f\xb6\x88\x19\x8a\x75\x67\x35\x8d\xce\x6b\xbd\x31\x1b\x92\x6a\x12\x20\xad\x8f\xa1\xbd\x5d\xc3\xef\xca\xe1\x93\x9c\xb7\x93\xc4\x29\x4b\xbc\x8b\x54\xd3\x2d\x31\xce\x57\x5f\x26\x31\xe6\x37\x47\x07\x8a\xd5\x4c\x16\x9e\x29\xee\x04\xec\xa6\xf5\xd8\xb2\xd8\x91\xa4\xe6\x5b\xdc\x18\x70\x4b\x6a\x60\x22\x8c\xfe\xcb\xb2\x4e\xbe\x72\xab\x18\x58\x2a\xed\x47\xeb\x2a\xbe\x69\x6d\x07\x22\xe7\x72\x3c\xf7\xfe\x3d\x5b\xa4\x29\x96\x2c\xa8\x59\x6d\xa8\x24\xc1\x56\x24\xd4\x3a\xf6\xed\x47\x0e\xdf\xaf\xf5\xb7\x87\x94\xeb\x14\x9f\xa6\x58\xd1\x23\xd3\x5e\x6d\x70\xce\x63\x3d\x0b\xb2\x1f\x4e\xd2\xc3\x39\xef\x0a\xa1\xf4\x60\xdd\xda\x2b\x25\xe0\xfd\x69\x6d\xd4\x75\x21\x9e\x36\xbd\x6d\x14\xcc\x57\x23\xc2\x27\x93\x37\xd8\xfc\x78\x0b\x81\x2d\x93\x1f\x18\x45\x04\x96\x7e\xba\xec\xd5\x01\xdc\xab\x51\x39\x14\xdc\x42\x3c\x2b\xee\xd5\x4c\x5a\x84\xbf\xf6\xf7\xaa\xde\x73\xe4\x94\x0b\xab\xb8\x51\xc6\xe9\xfb\x68\xf8\xb5\x3c\xd1\x02\x42\x6f\x69\x81\x31\x43\xa0\x93\x14\xd5\xba\x3a\xd4\x32\x63\x2a\x5e\xa8\xcb\x2c\x57\x27\x73\xa4\xc9\x28\x8f\xaa\xf6\xe6\x0b\x4d\xbb\x1c\xe9\x99\x08\x60\xb2\xda\x7e\x27\x65\x95\xc9\x13\x9b\x92\x1c\x2e\x1c\x1a\x32\xce\xc7\xfd\xf4\x9c\xd5\x34\xe6\xf7\xdb\x95\x94\x36\x5d\x9b\x57\x18\x83\x07\x99\x46\x55\xfb\x4b\x81\x33\x9d\x4a\xa7\x88\x88\x8a\xed\xa4\xd5\x9e\x3c\x69\x48\xf3\xeb\xeb\xb3\xe1\x72\x38\x1a\x42\xb6\xb2\x64\x40\x56\xaa\x0f\x32\xd3\x39\xdf\x03\xc1\x0c\xa6\x7a\xf6\x98\x0e\xb7\x57\x19\xa1\xbc\x1c\xdb\xa8\xa2\xcc\x56\x80\x50\x56\xbf\xd7\xbc\x24\x34\x89\xc4\xed\xa3\xf7\x5d\x43\x9d\x9e\x71\x0d\xae\xca\xa1\x29\xe0\x65\x4a\xdf\xd5\x7d\x4e\x8c\xc5\x43\xe8\x72\x85\xee\xae\x7f\xcd\xf5\xf6\xc9\x77\xa3\x10\x66\x56\x8b\x74\x91\xad\xe2\xc6\xa7\xc0\xb1\x96\xfd\xd8\xbe\xf2\xf6\x58\xdb\xd3\xbb\xd8\x68\x95\xe7\x7e\x92\x3a\xcf\x44\x13\x51\x66\xb9\x31\x92\x69\xac\x11\xef\x2a\x49\x7d\x20\x81\x40\x34\x2f\xbe\x9b\x14\xf4\xe7\x01\x61\x05\x09\xb8\x33\xc2\x6c\x70\x6e\x4c\xaf\xc7\x75\x10\xfe\x3e\xd9\xf6\x09\xf5\x59\xf1\x7d\xa1\x87\xdc\xaa\x70\xaa\xb5\xd2\xfc\xe3\x5c\x29\xa7\x6e\xe3\x62\xf8\x47\x7c\x3f\x46\x0c\x61\x7f\x77\x93\x99\x2f\xe6\x02\xbd\x3b\x2f\x70\xa2\xde\xfb\xf6\xa8\x3f\xae\x99\x47\x58\x1e\x2c\x67\x21\xdd\x07\x7d\x48\xcc\xf2\xd0\x40\xe9\x50\xf8\x94\xe1\x62\x7a\x8b\x3f\x72\xda\x0b\xcf\xf6\xcc\x10\x2e\xac\xd0\xce\x5f\x6e\x01\x8b\x13\xaa\x13\xcf\x47\xdd\xbb\x5c\x45\xa1\x4d\x7b\xbf\x65\x31\xee\x8f\x7c\x77\x60\x7c\xc2\xe5\x22\xe3\xf2\x47\x26\xd8\x04\x2f\x64\xf2\xcf\x2f\x58\xea\x0f\x6b\x61\x91\xcc\x8f\x8c\xef\xd0\x8d\x62\x61\xca\xa0\x8e\x6b\x7d\x98\xb8\xbd\xa6\xc4\x42\x85\xbe\x21\x75\x31\xbe\x87\xa4\xa4\xb0\x3f\x64\x4e\xd5\xdd\xda\x35\x99\xe9\x1d\xe1\xbb\x11\xba\xaa\xe4\xde\xe7\x09\xd9\xa0\x63\xca\xed\x9a\xdb\xfb\xe5\x25\x6c\x69\x71\xeb\x3d\x01\xd4\x23\x62\xaf\x95\xac\x0e\x77\xfc\x44\x6a\xfb\x94\xef\x5d\xa5\xd0\x9b\x54\x6d\xf9\x8b\x2a\x79\x59\x38\x61\xca\x1c\xad\xc8\xa7\x35\x52\xbf\x2c\x32\xd8\xca\x22\x52\xa5\x1e\xf6\x42\x82\x86\x55\x2b\x03\x8a\x91\x8d\x0a\x0f\xd8\x96\x2f\x59\x29\x36\xd8\xc5\x4e\xbb\x76\x56\x2e\x42\x95\x4e\xa7\xf4\xa4\x21\x1c\x72\x40\x59\x81\xcc\x22\xe6\x16\x51\x28\xa5\x7d\xa6\x3c\x8c\x1a\xf3\xb8\x29\x97\x1c\xb0\xae\xce\x37\xae\xf8\xb4\x9c\x78\x12\x7f\x66\xde\xab\xba\x34\x3a\x1e\x10\xe6\xee\xcc\x14\xfa\x6c\xe9\xc7\x3a\xb7\x9d\x9b\x64\x95\x81\xe4\x5f\x3e\xac\xbd\xef\xa4\x52\x15\x16\x34\x6c\x4c\x8c\xb7\x86\x9c\x36\x0a\x42\x9c\x63\x88\xce\x79\x7a\x49\x8a\x82\x64\xd6\x7d\x23\x48\x79\x9e\xe0\x75\x6b\x18\xfa\xee\xae\xda\xd5\x2f\xa1\x42\x16\x11\xa6\x01\x6a\xc6\xd2\x7c\xa0\x48\x80\xe0\x1b\xdd\x6a\x1c\xac\x0c\x70\x23\x07\xee\x51\xa1\xe4\x35\x3d\x2a\x71\x14\x12\xfd\x3d\xaa\x51\x6d\xe8\xce\x5f\xec\x2c\x79\xe4\x8a\x0e\x09\xf6\xd1\xc1\x90\xd7\x07\x3f\xf5\xfd\x2f\xb2\x80\x33\xf3\xbc\xec\x12\xee\x6d\x93\xad\x3c\xe8\x7c\x40\xbb\x2a\xa3\x37\x76\x35\x57\x13\x07\xb3\xe4\xf5\x65\x17\x00\x07\x3b\x22\xe7\x1a\x25\x68\xd8\x1e\x5d\x2f\x08\x7f\x4b\x07\x3b\x3f\x2d\xb2\xb7\x6d\xee\xa4\xab\xa0\xfa\x96\x00\xcb\xec\xcb\xfc\xbc\xde\xa1\xc7\x2f\x76\x7c\xd5\xb6\x40\x56\xfd\x7b\xd7\x27\x0e\xbf\x11\xe8\x33\x59\x9b\xb7\x7a\x3c\xac\x4a\x30\x33\x84\x0f\x5a\x59\xe9\xd0\x6d\xef\x35\x9c\x96\x20\x80\x2c\x46\xd7\x6e\x8b\xa5\xb3\x98\x03\xed\x62\x41\x73\xc7\x36\x09\x3b\xcd\xbd\x38\x3e\x9b\xe7\x1e\xed\xd9\x0e\xcd\x7f\xff\x21\xff\x6a\x45\xb2\xc4\xff\x5d\x37\xff\x1f\x00\x00\xff\xff\xdc\xcb\x0c\x4f\x8f\x06\x00\x00")

func test_certsRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootKey,
		"test_certs/root.key",
	)
}

func test_certsRootKey() (*asset, error) {
	bytes, err := test_certsRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\x4d\xd3\xb2\x46\x10\xbc\xf3\x2b\x72\xa7\x52\x80\xa0\xe2\xe1\x3d\xcc\xc2\x02\x2b\x82\x2e\xf2\xa5\x37\x04\x5d\x44\x51\xf9\x90\x15\x7e\x7d\x7c\xde\x1c\x52\xa9\x64\x8f\xbd\x35\x5d\x3d\xd5\x3d\xfd\xe7\xcf\x43\xd8\x26\xfe\x1f\x06\x0e\x42\x62\x11\x03\x42\xfc\x1b\x15\x3c\x42\x4c\x98\x0c\x03\xce\x6f\x06\x9c\x20\x60\x84\x16\xac\x43\xae\xd8\x1e\xf7\x0c\x86\x36\x7e\x48\x53\xc2\xd2\x68\x02\x1f\xb1\x5b\x53\xde\xae\xf6\x8a\xcb\x08\x68\x67\x81\x09\xad\xe0\x05\x84\x63\x38\x98\x31\xa5\x2e\xe6\x77\xf3\x34\xf3\xdb\xbc\x5e\x95\x87\x19\xfb\x58\x21\x84\x88\xf9\x31\x02\x2f\x34\xb1\x3f\x1c\x66\xfd\x78\x9a\x59\x55\x66\x20\x93\x86\x70\xb6\xb8\xfc\x11\xfc\x0a\x26\xaf\xba\x8d\xde\x44\xb8\x1f\x06\xd9\x0f\xe8\x4f\xff\xc6\x3c\x23\xff\xe0\x0a\xe8\xdf\x64\xcf\xd0\x88\xfe\x21\x13\x32\x13\x07\x1e\xe8\x36\x28\x11\x86\x8f\x47\x0a\x3b\x9e\x0a\x27\x9e\x8e\x29\xe1\x8c\xe1\xab\x07\xb2\x6d\xec\x1b\x7b\x4f\x4e\xaa\x49\xf1\x57\x7a\x04\xa0\x11\x64\x72\xf8\xf9\x77\x05\x78\x7e\xf7\xa6\x46\x55\x36\xdb\x2b\x58\xfa\x85\xe4\xf6\x41\x0e\xfb\x6b\x3b\x2a\xbc\x42\xa8\x8d\x61\xb5\x95\xf5\x21\xc5\x5a\x2f\xce\x3f\x67\x55\x3a\x00\x61\xbd\xad\xc8\xa9\x53\x6f\x8d\xee\x28\x74\x34\x1a\x36\x6c\xa9\x2c\x37\x45\x6e\x3b\x09\x7d\x15\x49\x13\x68\x41\xcc\xe8\xe2\xa6\xcb\xe7\x9e\x8f\x37\x63\xfa\xea\x79\xd9\x7b\x39\x9c\xb2\x7e\xa3\xee\x66\x8e\xfe\xb9\x6f\x0a\x6e\x4d\xcd\xdb\x15\x0e\x4e\x3d\x9e\xc8\x4b\x64\xd6\x45\x33\x64\x64\xc1\xc3\x2e\xcf\x0a\x5c\xd3\x2c\xab\xe7\xeb\xf8\x29\x16\x4f\x5e\xcc\x12\x31\xcb\x17\xae\x38\x6c\xaf\xa5\xc3\x89\xe5\x84\xa9\x54\x4b\x43\x51\xd7\x4f\x81\x87\xaa\x34\xb9\x72\xa2\x63\x1c\x6f\x57\xa5\x2f\xed\x68\x88\xc9\x52\xce\xe8\x98\xb3\xa5\x9d\x5a\x8a\x67\x64\xd0\x89\xa3\x2e\x17\x72\x26\x26\xee\xfd\x4d\x8a\xa2\x7d\x98\x27\x1e\xce\xa3\x98\x0b\xe3\xed\x85\x62\xba\x1b\xef\x81\x32\x1b\x86\x7c\xb5\x6d\xe6\xa9\x37\x86\xab\x53\x46\xe4\x32\x7f\xce\x7b\x25\x0b\xe2\xe3\xf2\x70\x53\x01\x4d\x67\xaa\xbd\xed\xb6\x72\x93\x02\x8d\x92\xe7\x8b\x1a\x43\x82\x6e\x78\x51\x73\x0d\xc4\xc5\xeb\xde\xc5\x5e\x95\xb4\xdc\xab\x17\xe9\x41\x8f\xcf\xc3\x0b\x98\x87\x00\xec\x6a\x3d\xc1\xdd\x03\xed\xc7\xa9\xc2\xe4\x18\x49\x9c\xe2\x6f\xe8\xac\xa7\x09\xa1\xf0\xe3\xad\xb3\x8f\xb0\x69\x82\x8b\x18\x6b\x11\xc3\x16\xa2\xb9\x09\xd5\xff\x24\x0f\xb6\x06\x7c\x67\x93\x7d\x78\x7a\xab\xf7\x5d\x75\xe2\x2f\x81\xee\x32\x38\x34\x8b\xcd\xf8\x3c\x56\x8b\xce\x9e\xef\x96\x1e\x96\x1d\x3b\xdd\xd9\x51\x0d\x8e\xee\x2d\x77\xb4\xc9\x56\xd4\x49\x02\x6a\x70\x73\x1d\xc4\xed\x3c\x14\x5f\x6c\xaa\xe6\xa5\x46\x1e\xf3\x9b\x00\xd9\x7d\xf1\x28\x57\xca\x76\x59\x16\xca\xc5\x31\x0a\xb4\x96\x32\xed\x73\x5c\x8b\x9a\xbd\xf8\x38\x62\x33\x81\x8c\xef\x17\xb5\xb3\xbd\xd5\xf8\x71\xb1\x84\xbb\x97\xfa\x1e\x67\xf9\xda\x2d\x71\xfe\x2c\x84\x65\xe7\xc7\x9e\xe7\x6e\x23\xe9\x1a\xd6\xe2\x5c\x33\x94\x74\xb9\xae\xf0\xf3\x82\xcd\xce\x6f\x1f\x97\xc8\x4f\xd2\x82\x38\x9e\x1a\x16\x87\x55\x55\x26\x0f\x45\xaf\x43\x6d\x94\x72\x05\x57\x6a\x14\x8b\x42\x8f\xfa\xe0\x99\x6d\xc4\x4a\x5a\x5f\x92\xbd\x29\x5d\xca\xaa\x37\x99\x85\xd4\x85\x71\x17\x1f\x0a\x5e\xd0\xe9\xaa\x3b\xe9\x36\xdf\x30\xe5\xac\xc3\xd0\x67\x52\xb2\xf6\x1f\x9b\x1b\xb1\xe9\x47\xfb\x5e\x63\x10\xee\x56\xe5\xd8\xc7\x74\xf9\xa2\x17\xd0\x8e\x40\xad\x50\x3d\xbe\x57\xbb\xa0\xd9\x29\x77\x5d\xa4\x03\x31\x82\x9c\x5f\x5d\x8e\x4f\xb3\x7a\x90\xe6\xc9\xe7\x7d\x29\x12\xd1\x6c\xb2\xa9\x1f\x69\x2e\xac\x2d\x7b\x26\x75\xc1\x46\x65\xbf\x7e\x09\xbf\x2b\x02\xfb\xe6\x7f\x6b\xe3\xaf\x00\x00\x00\xff\xff\xaa\x40\xc4\x68\x53\x04\x00\x00")

func test_certsTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserCrt,
		"test_certs/testuser.crt",
	)
}

func test_certsTestuserCrt() (*asset, error) {
	bytes, err := test_certsTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.crt", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xb4\x68\x12\x00\x73\x9e\x62\x73\x74\x9a\xc1\xcd\x40\xb0\x01\xe6\xc3\x7b\x0f\x19\xde\x7b\x37\xf0\xf4\xf7\xef\xea\xc2\xeb\xb4\x93\x52\x49\xdd\xf5\x9f\x7f\x86\x01\x82\xa4\xff\x65\x3b\xf4\x5f\xa6\x2d\xf9\xb4\x0b\xfe\x52\x40\xf4\xef\x06\xd2\x24\x09\xcc\xb4\xc4\xd0\xb4\xc2\xd2\x16\xa0\x27\x3c\x69\xa7\x8a\x29\xc5\x5b\x64\x06\x1d\x7c\xa3\x85\xdc\x33\xe9\xb2\x12\xc4\x32\xdd\xdd\x54\x91\x9f\xa1\x96\x47\x16\xee\x2f\x94\x66\x25\xd5\x86\xf6\x9c\xff\x11\x6d\xb5\x0a\x29\xe0\xd5\x1b\x37\xa8\xe2\xc6\x42\xa6\x46\x3a\x25\xf4\x97\xae\x00\x7e\x04\x8c\xd9\xd4\xc5\x35\xd3\x66\x7a\x23\x51\xff\x63\x77\x3b\x20\xd1\xd5\xa1\x1e\xaa\x7e\x69\x50\xec\x60\x19\x93\x7d\xd6\x66\x60\x88\x6d\xb8\x95\x72\x62\x42\x98\xde\x69\xdb\x92\x7f\x53\xb8\x5b\x52\x8f\x0e\xf3\xe1\xf8\x89\x39\x26\x9a\x98\xf7\xe7\x30\x1a\xcd\xb9\x3e\xd3\x64\x93\x2c\x63\xbf\x21\xe4\x45\x9c\x5f\x2c\x9e\x17\x0d\x50\x2f\xf2\xde\xf9\x93\x61\x78\xf7\x8c\xdc\xf2\x79\x83\x1f\x6b\x50\x42\xa7\x8d\x92\xf1\xeb\x7f\xb9\x4b\x0f\x95\x6a\x6e\xa7\x2e\xe6\xc2\xd9\x37\x73\xda\x88\x61\x02\x11\x17\x4a\x02\xd8\xe7\xff\x10\x2a\x96\xef\x71\xe4\xec\xe5\xf9\xfa\xc5\x4c\x77\x39\xfc\x47\xeb\x5e\x01\xda\xe8\x52\xa8\x18\x69\x1e\x74\x7e\x50\xa0\xb2\x7e\xd1\x19\xd6\x19\x6a\xbd\xe0\x77\x3f\x42\x56\x76\x3e\x5c\x79\x48\x74\x49\xb7\xbc\x32\x75\xe5\xb1\xc4\x29\xef\x4a\xc8\x42\x72\xf2\xd1\xa3\x26\x1f\xae\x1f\x4b\xe2\x68\x8b\x66\xe8\xe9\x8f\x6c\xe1\x49\xb8\xaa\x69\x17\x05\x17\xab\x80\xa9\x21\x73\x87\xbb\xef\xc0\xff\xee\xa3\x42\xbf\x28\x7a\xb5\xd2\x5a\xcf\x9b\xeb\x9f\xa9\xb6\x0a\xbb\x65\x36\xfa\x86\x3d\xbe\xaa\xc6\x3b\x12\x18\x69\xf4\x35\xe2\x0a\xcf\x3f\x62\x1f\xb5\x6e\x67\x5e\x3a\x06\x79\xe9\x87\x62\x8e\x03\x38\x39\x4a\xd3\x5a\x71\xc0\x81\xc3\x1d\x5a\x6f\xff\xc2\x65\x06\xda\xf7\xb2\xf2\x10\x88\x4d\xfa\x2d\x54\x55\x14\x89\x5d\x98\x9f\x68\x24\x8e\xb4\x77\x87\xb0\xae\x09\xdb\x84\x9a\x71\xeb\x9f\x82\xa8\x3c\xb9\xd9\x23\x95\xd7\x0a\xf7\x7e\x8b\xd4\x58\x3f\x7a\xa4\x9e\x34\x78\x53\xe8\x11\x67\x64\xed\x8e\x9f\xad\x27\x94\x93\x7a\x7d\xed\x50\x87\x39\x99\xeb\xe5\x3d\xb0\x65\x18\x6a\xb1\xf5\x28\x84\x54\x24\x0a\x11\xf6\xe8\xf9\x54\x6a\xeb\x13\x88\xbb\xc5\xbc\x95\x0f\x2f\x50\xd4\xb7\xf0\x3c\xa2\x2d\xa9\xf4\xe7\x4c\x57\xcd\x8c\xe1\x71\x4c\x51\x83\xe4\x58\xd7\x66\x70\xcb\x87\x10\x91\x31\x47\x68\x1d\xc2\x99\x38\x91\xf7\x1a\xe0\x7a\x2d\x1d\x6a\xb1\x90\x86\x8d\xb1\x90\x05\xd8\xd6\x2d\x38\x83\x04\xe9\xde\xfe\xac\x60\xdd\x0d\x3c\x3d\x4b\x9c\x4a\xfc\xcb\x11\xdd\xd9\xa8\x0f\xc8\x63\x47\xa9\x96\x00\x5b\x45\x80\xbe\x60\x6e\x9a\xe5\x8c\xda\x25\xd5\x6d\x9b\x8a\x3c\xa9\x59\x0c\x8b\x35\x8d\xab\x06\x97\x78\xde\x9f\x45\x2d\x21\xc7\x57\x7a\x21\x8f\x58\x03\x77\x1f\x93\xaf\x0d\x25\x55\x31\xe6\xfb\x80\xe2\x58\x5e\x92\xa5\x47\xa5\x69\x48\x71\x88\xe3\x0c\x7a\x40\x16\xe5\xc3\xee\x28\x1b\x84\x43\xb0\xbf\xfd\xbc\x47\x53\x3c\x31\xe3\x76\x90\xdd\x1b\x3e\xf5\x29\x26\xaa\x59\x81\x90\x9e\xbf\x46\x61\x72\x94\x7b\xf1\xef\xca\x68\x0c\x2f\x91\x06\x66\xf5\xdb\x27\x3c\x93\x62\xdb\x04\xbf\x28\x40\x51\x75\x09\x21\xcf\x94\x15\x0d\x19\x33\x7c\x8c\xb1\xfb\x97\x18\x49\x8b\x06\xca\x4c\x87\x5c\xb5\x39\x70\x2d\x54\xfb\x34\x35\x1d\xcc\x35\xb6\xaa\xf8\x4f\x9d\x05\x43\x70\x6e\x18\x31\x16\xf9\x2a\x6c\x91\xcd\x40\x27\xc6\x70\x0c\x02\x09\xb5\xe3\xe9\xbd\xb8\x11\xf1\x79\x7e\x34\x94\x2c\xb0\xbf\x94\xf9\x6a\x63\xf9\x0b\x67\xc4\x69\x7e\x53\xf9\x8c\xb8\xa6\x6c\xc5\x3d\x45\x1d\x07\x8e\x05\x3c\x3a\xbf\x3e\x3d\xa6\x51\xac\x6c\x9e\xaf\x2a\xf9\xe1\x23\x7d\x9e\x77\x4d\x56\x12\xf9\x81\x9a\x67\x03\x04\x95\xff\x39\x31\x23\x65\xb1\x66\xe5\x87\x8b\x66\x2e\x4d\xb2\x49\xa7\xb2\x6f\xda\x4b\x6b\xee\xc1\xcd\xff\x49\xf6\x2b\x47\xd9\x6e\xb6\xda\x2b\x17\x63\x81\x5c\xe6\x92\x00\x05\x99\xcb\xf7\xfe\xad\x7e\x66\x99\xa2\x88\x49\xa9\xba\x37\x48\xdb\x87\x70\xef\x07\x8e\x26\x83\x28\x31\x26\xda\xd0\xaf\x2c\xc9\xc6\x18\x53\x3f\x55\xb9\x1f\xef\x6a\xa7\xb0\x4d\x13\x6e\x30\x04\x03\x6a\x63\xdf\xd2\x09\xad\x45\x98\xf3\xd7\x51\x20\xc9\x3e\x77\xdf\xdf\xe2\x33\x52\x46\x97\xaf\x01\x0e\x4e\x42\x50\x26\xa2\x5b\x96\x2e\x36\x10\x0d\xe0\x52\x34\xee\xb4\x59\x5d\x1b\x13\xeb\xa3\x02\xa0\x16\xde\x10\x6b\x0d\x9a\x39\x78\xa5\x82\xdc\x17\x65\x44\x84\xad\xf9\x8f\x65\xfa\xf6\x6a\xf4\x48\x2c\xe1\x7c\x27\x8d\xe0\x57\xfe\x4d\x1a\x88\x21\xe3\xf8\x21\xbe\xf1\xd1\x84\x99\x2d\xbd\x8e\x07\xba\x79\x41\xf7\xd5\xa1\xb6\x90\x12\x8c\xf9\xc2\xaf\x3c\x2f\x73\x6c\x67\x09\xb3\xc1\x8e\xfb\x74\x31\x12\xc6\xdc\xfd\x97\x90\xfe\x3c\x09\x89\xff\x15\x91\xa2\xf8\xed\x6a\x70\xa9\x07\x5e\x62\x79\x6a\x10\xa2\x5b\x4d\x63\x7e\x6c\x5a\x94\xb9\x32\x1b\x65\xf7\xb9\x28\x85\xda\x1a\x8d\x27\x71\xa7\x02\x23\xe6\x2d\x63\xc2\x0a\xa2\xf8\x02\xc1\x89\xbc\x6c\x5f\x4d\x2a\x92\x4e\x23\xfe\xf6\x18\xb8\xbd\x11\xc8\xc8\x96\xa6\xb3\x14\xa6\xb2\xd8\x41\xd3\x3c\x23\x71\x14\xe0\xf3\x7a\x22\x7b\x49\xc2\xa3\xaa\xb6\x48\x56\x3a\x71\xb2\x9a\xe6\x86\x37\x0e\xa4\x63\xf7\xda\xa4\x16\xdc\xdb\x2c\x28\x23\x6b\xf7\x1f\x34\xc4\xb8\x17\x89\x67\x60\x2c\xe2\x87\x7c\xd5\x27\x87\x13\x73\xf9\xdc\x87\x61\x29\xb5\xfb\x4b\x91\x99\xfe\x82\x73\x41\x45\xec\x2d\xbc\x40\x34\x20\x5f\xeb\x75\x46\xcd\x8e\x44\xf2\x02\x6f\xf6\x80\x42\xa6\x7e\x1f\xf9\xe1\xc6\xc3\x42\x34\xd2\x06\xbc\x99\xe3\xbe\xa7\xb1\x79\x4a\x63\xe9\x1c\x43\x32\xbd\x2b\xbc\x05\xda\x94\xd5\x13\x93\x1e\xb4\x7e\xcb\xa3\x17\x1c\xd7\xdf\x7f\x43\xff\x66\x05\xe8\xdc\xff\xcf\xcd\x7f\x03\x00\x00\xff\xff\xc6\x4b\xc2\x49\x8f\x06\x00\x00")

func test_certsTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserKey,
		"test_certs/testuser.key",
	)
}

func test_certsTestuserKey() (*asset, error) {
	bytes, err := test_certsTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":       test_certsCaCrt,
	"test_certs/ca.key":       test_certsCaKey,
	"test_certs/node.crt":     test_certsNodeCrt,
	"test_certs/node.key":     test_certsNodeKey,
	"test_certs/root.crt":     test_certsRootCrt,
	"test_certs/root.key":     test_certsRootKey,
	"test_certs/testuser.crt": test_certsTestuserCrt,
	"test_certs/testuser.key": test_certsTestuserKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":       {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":       {test_certsCaKey, map[string]*bintree{}},
		"node.crt":     {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":     {test_certsNodeKey, map[string]*bintree{}},
		"root.crt":     {test_certsRootCrt, map[string]*bintree{}},
		"root.key":     {test_certsRootKey, map[string]*bintree{}},
		"testuser.crt": {test_certsTestuserCrt, map[string]*bintree{}},
		"testuser.key": {test_certsTestuserKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
