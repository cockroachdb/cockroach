// Code generated by go-bindata.
// sources:
// ../../resource/test_certs/ca.crt
// ../../resource/test_certs/ca.key
// ../../resource/test_certs/node.crt
// ../../resource/test_certs/node.key
// ../../resource/test_certs/root.crt
// ../../resource/test_certs/root.key
// ../../resource/test_certs/testuser.crt
// ../../resource/test_certs/testuser.key
// DO NOT EDIT!

package securitytest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_certsCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xb9\xf2\xab\xb8\x12\x87\x73\x9e\xe2\xe6\xa7\x6e\xb1\xd8\xd8\x10\x4c\x20\x81\x00\x21\x8b\x7d\xb1\xc8\x8c\x17\x76\x83\x37\x84\xfd\xf4\xe3\xf3\x0f\x4e\x30\x33\xca\xf4\x95\xf4\xab\xee\xfa\xba\xfa\xff\xbf\x0f\x44\x36\xf6\xfe\x67\xa0\x28\xc1\x16\x36\x40\x82\x7e\xa8\x40\x31\x36\xe1\xc7\x30\xc0\xf9\x57\x05\x38\x86\xa0\xc2\x11\xf0\xab\x4e\x91\x93\x08\x00\xd0\x41\x5d\x65\x7d\x37\xee\x2d\x75\xcd\xcd\x90\xb9\x64\x2c\x70\x3d\x1f\x3d\x10\xa2\x1d\x0c\x01\x17\xc8\x07\xc5\x14\x02\x1b\xc8\x29\x32\x6a\xea\x86\x8a\xde\x1e\x56\xee\xcc\x72\x6f\xa4\x51\xca\x11\x67\x66\x16\x86\x26\xe2\x8b\x59\x2a\xde\xfd\x38\xe8\x35\x53\xaa\x2a\x94\x10\x77\xea\xa3\x27\xd0\x84\x71\xda\x62\x95\xb6\x88\x53\x33\xfc\xe4\x5f\x48\x93\xe3\x6f\xb6\xfe\xc3\x5a\x70\xa7\x11\xe6\x08\xfc\x84\x11\xc4\xfb\x3f\x61\xc2\x37\x6d\xb1\x12\x90\xc0\xca\xcb\x20\xa0\x89\x89\xbc\x99\x29\xcf\x77\xa9\x58\xed\xc1\x80\x66\x98\x7c\xdb\x8b\xf1\x3f\xcb\x87\xdf\xf2\xcd\xaa\x42\x81\x00\xcc\xef\x83\x70\x34\xbe\x97\xef\xff\x3d\xb4\x57\x5e\x7d\xb5\x36\xdb\xc3\x7b\x2c\xc5\x97\x28\xbf\x4f\xcd\xdb\xfd\xbc\xe7\x53\x24\x1e\xda\xdc\x4c\xa5\x4b\x83\xa6\xd2\xa5\x11\xbb\xee\x5e\xee\xf1\x22\xdc\xa2\x36\xaa\x3d\x52\x78\x33\x27\x71\xae\xb3\x82\xed\x77\x76\x12\xa8\xef\x6b\x0b\x46\x52\x6a\x1d\x6b\xf3\x8c\xce\x2f\xd7\x42\xf5\x12\x25\xa1\xb9\x5a\x3e\xc9\x93\x00\x39\x98\x17\x7a\xbf\x06\xc2\x01\xbe\x26\xd6\xba\xa0\x9d\xb4\xa2\x79\x70\x47\x92\xb7\xea\x85\xd1\xf3\xa7\xa7\x99\xd6\xeb\xab\x9d\x1d\x6f\x83\x57\x89\x24\x57\xab\xd2\xac\x24\xf6\x79\x72\xf4\xce\x58\xee\x59\xcc\x6f\x17\x47\x13\x52\xff\xda\xa8\x24\xf6\x6f\xde\xd6\xa6\x4d\x3c\xb5\x01\x38\x8d\x64\x2a\x16\x2a\x0d\xfb\x3e\x5b\x44\x4c\xb4\xa9\x62\x98\x43\x99\xf0\x24\x76\x6b\x56\xd4\x28\xbd\x25\xb3\x56\x56\x4b\x1c\xca\x02\x6e\xc0\x43\x29\x99\x59\x9e\x87\x22\x59\x46\x74\x25\xbd\xea\x2b\x1b\x34\x14\x55\x34\xc1\xce\xe8\xf9\xe0\xc6\xdd\x76\xcc\x02\x6c\x28\xa1\xa1\x5e\x74\xe4\xf7\x7a\x83\x9d\xa7\xba\x97\x77\x6c\x25\x34\x06\x26\xc1\x2d\xc3\x8f\x57\x9f\xfb\x6f\xa5\xaa\x41\x9b\x15\x81\x0c\x77\xe6\x56\xad\xe7\x67\xe1\x4d\x9d\x01\xbe\x02\xc1\x81\x0e\xd4\x08\xb9\x59\x7d\x55\x46\x52\x00\x42\x47\x84\x20\x34\x05\x50\xed\x3a\x0a\xf1\xef\x41\x3a\x21\x8e\xa0\xc8\x43\x4c\x01\x83\xe0\xa2\x7d\xed\xa0\xff\x9a\x3e\xf3\xc7\x18\xe9\xba\x7d\xbe\xe9\x85\x69\x9b\xc7\x8e\x72\xab\xce\x7e\x8f\xd2\xfd\x2e\x90\x26\xed\xed\xfb\xf1\xca\xde\xc5\xdc\x28\x34\x9d\xe6\xea\xe5\x38\x57\x49\xce\xb3\x00\xb4\x01\x06\xe0\xbe\x91\x7e\xdd\x9e\xf9\xa6\xcc\xa8\x7d\x1a\x84\xa1\x24\xd2\x99\x5d\xc5\x47\x38\x90\x3c\xcf\xee\x8d\x2d\xa1\x9a\xd2\x2c\x5c\xf7\xbe\x61\xef\x0b\xc8\xcb\xed\x16\x4a\x9f\xd5\xb8\x49\x3c\xbe\x36\x9c\x39\xe1\x4d\xfd\x60\x44\x5e\x6d\xb4\xf2\x18\x08\x9b\x38\xd6\x22\x89\xca\xbb\xe7\x73\xec\x74\xe0\x4f\xe6\xc5\xc2\x66\xe3\x9e\x9d\x73\x84\x56\x66\xde\x5a\xee\xa2\xdd\xd6\xe9\xea\x54\xaf\x5d\x65\xec\x1d\xf1\x49\x9e\x9a\xcb\x44\x65\xbb\xe1\x0f\x1a\x08\x79\x79\x30\xc8\x78\xfe\xc4\x28\xf6\x66\xbb\xb8\x6b\x3a\x56\xec\x76\x14\x4f\x6e\x5b\xae\x14\xa3\x8b\xa4\x1c\x6b\xca\x12\xa7\x5b\x55\x8f\xa2\xe6\x4c\x58\x68\x6f\xec\x2a\xd3\x5a\x67\x28\x65\xe7\x97\x70\x3b\x59\xcb\x2c\x23\x19\xe4\x72\x74\xd4\xb1\xec\x1c\x10\xec\x92\x05\x5a\xc9\x2e\x27\x74\xff\x46\x23\x45\xfb\xd4\x56\x94\x5e\xfb\xdc\x8b\xcb\x43\x16\x87\xf6\xf4\xa8\xc4\x6e\x84\x29\x94\xd3\x5a\x70\xba\x8b\x45\xb1\x5b\x32\x55\xb2\xf8\x47\xfb\x4b\xf8\x59\x13\xc8\x33\xff\xbd\x3a\xfe\x0e\x00\x00\xff\xff\x53\x59\xb5\x48\x57\x04\x00\x00")

func test_certsCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaCrt,
		"test_certs/ca.crt",
	)
}

func test_certsCaCrt() (*asset, error) {
	bytes, err := test_certsCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.crt", size: 1111, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\xce\x83\xdc\xb2\x86\x7b\xae\xe2\xef\xd1\x11\xc9\x26\x14\xa7\x58\xa4\xc5\x22\x19\x30\xc9\x74\x98\x9c\x33\x36\xbe\xfa\xfd\xed\xbf\xde\xd3\xbe\xd2\xe8\xd5\x33\x1a\x3d\xff\xf7\xdf\x11\x15\x88\xec\x7f\xbc\x27\xf8\xc7\xf1\x50\x08\x7c\xe5\x1f\x43\x79\xfd\x9b\x60\x16\x42\xca\x54\x21\x11\x00\x43\x02\xae\x02\xbe\x99\xf2\xce\x68\x98\xc5\xeb\xbe\x1a\xf5\x89\x73\x44\xac\xd3\x26\x1a\x1d\x43\xa0\x34\x61\xb1\x5f\xb6\xef\xe1\xe8\xd9\x6f\xdd\x57\x6d\xb2\xe3\x86\xf5\x5f\x7c\x86\x36\x54\xc8\xb9\xa3\x09\x30\xeb\x6f\xaa\xee\xeb\x6c\x4b\x2c\x62\x34\x0a\x4b\xaa\xe6\xf3\xf2\x1a\x3b\x09\x2e\xfc\xd6\x05\x4f\x4d\x55\x6d\xe0\x94\x9a\xfd\x20\x27\x39\xc0\x09\xe5\xc2\x8e\x4c\x98\x20\xdb\x37\x56\x27\x3d\xc6\xef\x60\xfc\x40\xe9\xc7\x67\x2f\x54\x5f\xee\x11\x7c\xe3\x2b\x66\xfe\xb6\x99\x1b\x7e\xdf\x7c\x77\xbc\x44\x2f\xdc\xa6\x84\xed\x4a\xda\x35\xe1\x1e\x9a\xd2\x8c\xf1\xe5\xd7\x65\x0b\xb3\x9b\x11\x3b\x31\xdb\xeb\xd2\x8d\xc1\xe2\x45\xba\x5a\xfa\x51\xf9\x3d\x93\x22\x8c\x35\xbe\x5a\xaf\x41\xac\x5a\xa0\x05\xab\x68\xa3\x41\xad\x07\xc5\x7b\xce\x0f\xe2\x7b\xc8\x2a\xa6\xcb\x41\x83\xa4\x5f\xb2\x57\xf6\xce\x26\xbd\x03\xab\x67\xb6\xc4\x1d\xf7\x9e\x9e\xc9\x20\xc2\x0e\xba\x46\x2c\xbd\x7a\xc3\x3f\xea\x80\xaf\xcc\x04\x98\x3d\x41\xba\x6c\x4c\xa3\xaa\x60\xfa\x32\xc0\xf6\xb6\x40\xa8\x9a\xf0\x39\x68\x2e\x36\x7c\x71\x66\x2a\x29\x92\x1d\x76\x44\xa0\x6c\xce\x39\x40\x9c\xea\xe8\xc1\x45\x32\x70\x81\x08\xa6\x3f\xd8\xf0\xd6\x38\xce\x02\x53\xd2\x5c\xa1\xe4\x5b\x58\x67\x10\x7b\x26\x1d\x8b\x0a\x5f\xd9\x37\xd9\x06\x36\x73\xd8\xdb\x0a\x51\x3f\xed\x94\xfe\xe8\x6e\xf6\x95\xbe\x2d\x95\xdd\x61\xc0\xf1\x03\xc3\x28\xbc\xcd\x09\xd0\x0b\xe7\xa4\x95\x47\x3b\xcf\x10\x16\x99\x92\xf6\xfc\x4d\xfb\x03\x67\x7d\x97\x92\x5e\xc0\xa3\x29\xa7\x5f\x0e\x25\x90\x29\xf5\xd9\x32\xbe\x71\xf6\x4a\x69\xd9\x37\x96\x2a\x08\x8b\x9f\x76\x86\x9f\x80\x1e\xd8\xa1\xe0\x51\xad\x41\xca\x98\xed\x96\xeb\x5d\xd2\xef\x5d\x81\xdb\xe7\x75\x77\xb5\xfe\x62\x3b\x4e\x17\x4f\xb6\xd1\x15\x50\xc7\xe2\x74\x71\xaa\xb0\xff\xc2\xdd\xbb\xa2\xe2\x39\xbf\x2a\x68\x23\x46\x1d\x8d\x50\x9e\x5a\x8a\x92\xb0\xf2\x3d\xd0\x2b\xa2\x82\x39\x42\xee\xec\x85\xe5\x97\x95\x2a\x8a\x6c\x27\x7e\xf0\x89\x9b\xd0\x9b\xb9\xb0\x2d\x96\x04\x86\x1f\xce\x53\x4d\x7a\x7e\x94\x67\xd4\xb5\x1f\xa1\xd8\xb6\x4a\xf3\x71\x61\xc4\xe2\x94\xf5\x43\x7d\xc7\x91\x31\x32\xe2\x02\x6a\x71\x2b\x08\xaa\x1b\xec\xd5\x73\xde\xe1\x39\x8f\x33\xc1\x3b\x1b\x7a\x99\xef\x5b\x5d\xae\xf1\xa9\xf6\xe1\x1a\x0b\xcb\xd0\xf3\xd5\x12\x7c\x40\x09\x31\x91\xd3\xa8\x58\x20\xa5\xea\xa5\x80\x5f\x21\x30\xf4\xae\xf9\x37\x93\x3d\xbc\xb7\xae\xd4\x0c\xcf\x28\x55\xb2\xcc\x60\x32\xb7\xe3\x82\xba\xed\xdd\x3f\x61\xae\x38\x07\x02\xd1\xd6\x4d\x51\x74\x69\x58\x5f\xd0\x95\x11\xa6\x39\xea\x05\xbc\x58\xed\xc0\xb6\xd0\x21\x90\xb9\xcd\x72\x14\x23\x8f\xeb\x5c\xef\xa9\x23\xc5\xc5\x65\x2c\xec\xf6\xdb\x2c\x75\x6c\x1a\x82\xd3\xcc\xc3\x1c\xbf\x2f\xf5\x02\x19\xf6\xbe\x60\x98\x97\xfb\x97\x17\x17\x27\x5a\xba\xf8\x4a\xc0\x83\x39\x39\x96\x4f\xaa\x82\x1b\x41\xb3\xe6\x7a\x8e\xcb\x85\x5d\xe3\x5a\xae\x5a\x10\x9d\x50\xd7\x93\x29\xfb\xb7\xb1\x90\x7b\x1c\x36\xca\x96\x0b\x7b\x97\xbe\x0d\x75\x08\x98\x1c\x11\xa7\xb5\x73\xec\xe8\x3c\xcc\x64\x88\xa6\xc7\xdb\xf9\x75\xea\xe9\xd5\xf2\xaf\x08\xe4\x94\x35\x5e\x89\x44\xc3\x64\x2f\xe6\xe6\x0d\xe9\x3b\x01\x34\xcc\x47\x1f\x77\x5e\xd8\xe4\x91\x3c\xd3\x39\x99\x0b\xfc\x65\x04\xbe\xb0\xaa\x13\x7c\xc0\x8a\xb8\x7f\xe8\xd5\x94\xed\x68\xce\xed\xdb\x0d\x8e\x84\x45\x68\x86\x59\xfb\x7b\x77\x2c\xa6\x25\x76\x12\x24\xb1\x52\x01\x22\x1d\x24\x1f\xc3\xf0\x21\x72\x71\xad\x4f\xf1\x1c\x21\x47\x51\x9d\x04\x10\xbf\x61\x13\xfd\xa9\x99\x72\xfe\xaf\x32\x60\xa9\x5d\xbb\xee\x93\xf9\xb2\x3e\xd6\x43\xb6\x67\x71\xd3\xe7\x01\x2b\x3f\x6d\xac\x73\x47\x8d\x2f\x5f\xca\x66\x5c\xda\x9b\x19\xcb\x7c\x5f\x91\x85\x87\xd5\x9b\xe1\x66\x7a\x72\xe7\xf4\x66\x4e\x40\x59\x73\xbc\x92\x49\xbb\xda\x08\x37\xb7\x95\xc5\x7e\x6e\x55\x5c\x26\xd8\x21\x20\xb7\x8d\x70\xbb\x84\xa4\x5e\x8d\xa1\x96\xcb\xd6\x2c\x6c\x8d\x7b\x4f\x3e\xdf\x9d\xbc\xa1\x72\x5e\xd9\x89\x7f\x7d\x0d\x2f\x7a\x94\xd6\x83\xd7\xc7\x71\x76\x3f\xd9\x80\x9a\x68\x0b\x2c\x47\xc3\x48\xd5\x6b\x25\xd5\x4b\x19\x4e\x76\xff\x3e\x15\x41\xa6\xd3\xe2\x8f\x21\x56\x62\x4b\xd7\x99\xf9\x26\x75\xc7\x64\x18\x73\x72\x29\x4d\xbc\x64\xd9\xaf\x8e\xc7\x90\x72\x87\xd6\x35\xd9\x8d\x01\x25\x89\x55\x74\xb1\x06\xb5\xe0\x87\x4f\x29\x14\x48\x98\xe1\xf9\xf9\x9d\x21\x7b\xa8\xb2\x23\x7b\xee\x7c\xbf\x2d\x2b\x9b\x16\xef\xbf\x6c\x22\xce\x6c\x63\xcb\xde\xd2\xfb\x27\x73\xfa\x61\xea\x13\x0f\x07\x61\x69\x58\x03\x87\x27\xb5\x54\x7c\x3b\x44\x1a\xad\x97\x6e\xbf\xcc\xbf\x6b\xe3\x29\xfb\x87\x6b\xe1\x0b\xff\x11\xc1\xa9\x88\x24\xfc\xa9\xb7\xcd\xa7\x50\xa5\x22\x83\xd9\x2c\x23\x5a\xd2\x0a\x2e\xaf\x30\xe3\x98\x5a\x30\x41\x60\xa7\x9a\x72\x7e\x6f\x47\xbf\x25\x89\xbf\xbb\x74\x1a\x7b\x77\xae\x68\x7f\xb6\xac\x9a\x2b\xaf\x89\x7e\x07\xd0\x8f\xfc\xc1\x60\xcd\x57\x2b\x59\x9e\xe0\x0e\xe2\x96\x28\x0e\xec\xe0\x37\xfa\x93\x4a\xee\x4a\x42\x75\xc4\xdb\x93\x92\xde\x37\xd9\x3d\x90\xe2\xf3\x53\xf9\xa1\x25\xba\x67\xd3\x00\xe2\xba\xaa\x73\x4f\x92\xe3\x99\x07\x65\xdd\x63\xf5\x85\x08\xe9\xf7\x66\x92\x3b\x87\x91\x44\xf2\x6d\xf2\x9f\x95\xd7\x57\xb4\x36\xe5\xba\xc4\xb6\x4c\x45\x4a\xc9\x10\x6d\x3b\x3e\xf0\x43\xeb\x9b\x9e\x3e\xe7\x2d\x1e\xb2\xa0\x49\xc9\x56\x75\xf8\xff\xc7\xfe\x55\x8a\x62\xcb\xff\x5b\x35\xff\x09\x00\x00\xff\xff\xa6\x1e\x11\xe7\x8b\x06\x00\x00")

func test_certsCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsCaKey,
		"test_certs/ca.key",
	)
}

func test_certsCaKey() (*asset, error) {
	bytes, err := test_certsCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/ca.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x97\x4f\xb3\xa2\x3a\x1b\xc4\xf7\x7c\x8a\x77\x6f\xbd\x25\x2a\x20\x2e\xc3\x1f\x21\x6a\xd0\x20\x88\xb8\x13\x84\x20\xa0\x88\xa2\x41\x3e\xfd\xe5\x9c\x7b\x66\xe6\xd6\xf8\xb8\xb2\xda\xa7\x53\xfe\x3a\x4d\x25\xfc\xff\xeb\xa3\x99\x16\x76\xfe\xa7\x9b\xae\x87\xe7\x58\x47\x9e\xf9\xad\x0a\x04\xe3\x05\xca\x75\x5d\x1b\xd4\x0c\x71\xac\x21\x86\x5d\xb4\xd6\xec\xdd\xda\x8f\x0f\xea\xf8\x70\x18\xa4\x8f\xf8\xd9\xd5\x59\x5b\x70\x83\x86\x8b\x65\x75\xc0\xd9\x2b\x76\x10\x35\x57\x1a\x45\x5c\x58\x76\xe6\x96\x68\xc8\x42\x23\xdf\xd4\x33\xb2\xa0\xe3\x59\x7e\x9c\x2c\x5e\x61\xe0\x54\xc4\xf5\xb9\xc9\x43\x63\x47\xa9\x61\xf2\xd6\x88\xc6\xce\x3d\xbe\xcc\xb2\x70\xcc\x18\x15\x4d\x6e\x67\xb1\x23\x10\x2f\xe4\x24\xc7\x32\xc9\x4d\x4e\x0c\x2a\x06\xbd\x48\xbc\xf8\x4b\x93\x7e\x6b\x39\xca\x89\x8b\xb9\x89\xbe\x17\x5b\x9a\xbc\xfc\xbd\x98\xd0\xaf\xd6\x1a\x1e\x5a\x69\xcc\xd9\x69\x88\x78\x9a\x25\xbf\x0e\x96\xcf\x19\x33\xcf\x04\x89\x96\xbe\xad\xad\x2d\x8e\x26\x06\x35\x35\x44\x7d\x84\x24\xac\x19\x1c\x7d\xfd\xbe\x44\x15\xd6\x04\x44\x8d\xf5\x4d\x5e\x05\xab\x5d\xe5\x2c\x36\xe5\xf1\xa6\x54\xc3\xc0\x79\x63\xd6\x88\x7a\x3b\x79\xdb\x8e\x52\xf9\x9b\x7d\x74\x19\xc8\x27\x1a\x6a\xd3\x6a\xb2\xb0\x37\xed\x8c\x78\x59\x95\xe3\x4a\x63\xad\xf0\xa0\x5b\xe4\xfa\xf6\xb6\x76\x96\x15\xd1\x26\x89\x2e\x4f\x93\x54\xb9\x36\xeb\xdb\xcd\xbd\x16\xf1\x44\xf1\x4f\x0a\xca\xf9\xd0\xbb\x8b\xf7\x24\x9a\xa8\x87\xb5\x78\x28\xdc\xdc\xb6\xec\x63\x50\xdd\xd4\x97\x30\xa3\x7e\x1d\x0f\x1e\xe7\x63\x74\xc9\xf4\xa1\x3c\xec\x90\xf1\x5c\xcb\x52\x98\x26\x4a\x77\x0c\xc7\xaa\x3c\x6c\x4e\x94\x05\x69\x76\x3d\x87\x88\x9e\x9b\xa8\x94\x94\x95\x3e\x2d\xeb\x73\xab\xbc\xd3\x8a\x08\xaa\x5d\x1a\xf1\xfa\x39\x2a\xb2\x22\xdf\x5c\xaf\x99\xbd\xd5\x03\x6b\x97\x6a\x45\x36\xdc\x18\xde\xcb\x6f\xf6\x6a\x53\x25\x49\x52\x66\x7b\xd3\xf6\xd4\x46\x1d\xbd\x2e\xcb\x76\x2b\x8d\xd1\x2a\xe5\x46\x53\x0b\xe4\x5d\x8d\xf5\xd5\xd6\x90\xf5\x53\x57\x0e\xf8\x59\xe9\xc8\x74\xc8\xf7\xdd\xc5\x99\xb8\xfa\x60\xe1\x6d\x82\x68\xb0\x38\x06\x8f\xa7\x34\x8b\x2b\x33\x30\x4e\x8f\xc9\xd1\x5e\x14\xa3\x9b\x99\x91\xf5\xec\x32\x14\x5e\x4e\x90\xe4\x12\x5f\xdd\x13\x72\x2d\xa4\x16\x17\x2f\x9c\xed\x12\x77\x8e\x58\xdf\x0e\x64\xe5\x8c\x85\xd7\xbe\x6c\x16\xee\xfa\x7a\xf5\x3b\x65\x53\x55\x43\xa9\xda\x6f\x09\xd1\xb5\x63\x5f\x24\x9b\xf6\x7b\xeb\x8a\xa5\xa6\x85\x7c\x8e\x42\xbc\xe4\xa1\xa6\x51\xdf\x46\xdc\xb4\x74\xfd\x61\xf5\x5b\x37\xd7\x38\xd1\xfb\x45\xe6\x2a\xfa\x9e\x75\xb5\xfe\xbb\xdc\xf5\xed\x4d\xd6\xba\xa0\x07\xed\x2b\x1c\xcf\x1f\x47\x6b\xd6\x9d\x30\x26\x3f\x4d\xe3\xab\xcb\xbf\x3a\x63\xed\x3b\x1a\xcf\xf3\xa3\x61\x3e\x23\x6b\x96\x87\xc1\x5b\x37\xec\x9f\xa6\x9e\xe5\x87\xd0\x37\x2a\x8b\xfe\x18\xbb\x4f\x23\xfd\x30\x3a\x5b\xf9\xf1\xcb\x27\xfc\x18\xc7\x9f\xc6\xf8\xc3\xb8\xd6\xff\x18\x7f\x7c\xb2\xf0\xc7\x38\xfa\xf5\x57\x39\xa0\xb5\x80\xf6\xfe\xd2\x84\xbf\xc4\x0e\x18\x14\x01\x6d\xf4\x4b\x13\xfe\x23\x8e\x81\xc1\x09\xa0\x49\xff\xd5\x84\x1f\x51\xfe\x1c\xc4\x00\x0a\xfe\x40\x11\x7a\xf1\x0d\x0c\x02\x28\x18\x40\xc1\x23\x20\x44\x0c\xa0\x60\x00\x05\x4b\x40\x88\x18\x40\x21\x00\x0a\x69\x81\x10\x09\x80\x42\x00\x14\x22\x02\x21\x92\x11\x30\x08\xa0\x90\x0f\x94\x3e\x44\x22\x01\x83\x00\x0a\x05\x50\x68\x0b\x84\x48\x01\x14\x0a\xa0\x50\x11\x08\x91\x02\x28\x14\x40\xa1\x13\x20\x44\x0a\xa0\x50\x00\xc5\xe7\x40\x88\x3e\xf0\xb0\xf8\x00\x8a\xff\x81\xd2\x87\xe8\x03\x0d\xf3\x01\x14\x1f\x40\xf1\x27\x40\x88\x3e\x80\xe2\x03\x28\x21\x07\x42\x0c\x01\x94\x10\x40\x09\x3b\x20\xc4\x10\x40\x09\x01\x94\x70\x0c\x84\x18\x02\x0f\x4b\x08\xa0\x84\x1f\x28\x7d\x88\x31\xd0\xb0\x18\x40\x89\x01\x94\xb8\x03\x42\x8c\x01\x94\x18\x40\x89\xc7\x40\x88\x31\x80\x12\x03\x28\xb1\x0c\x84\xc8\x00\x14\x06\xa0\xb0\x37\x10\x22\x03\x1e\x16\x06\xa0\xb0\x0f\x94\x3e\x44\x06\x34\x8c\x01\x28\x0c\x40\x01\x0f\x96\x02\x40\x29\x00\x94\x02\x3a\x58\x0a\x00\xa5\x00\x50\x0a\xe8\x60\x29\x00\x94\x02\x40\x29\xa0\x83\xa5\xf8\xbd\x2d\x19\x77\x87\x08\x21\xed\xef\x2b\x9e\xce\xff\xbd\xe2\x21\xaa\x0d\x4d\x9d\x3a\x53\x7e\xb2\x15\xd9\x5f\x0a\xe7\xb8\x79\x5f\xcc\xe1\xfc\x6a\x3d\x96\xa6\x9b\xfa\xc1\x6e\x66\x78\xb8\x31\xc9\x8e\x79\x87\xfb\x4d\x7a\xd2\x47\x8d\x8d\xc2\x1f\x17\x1b\xed\xe5\x0d\x4a\x34\x33\x8e\x75\x69\x94\xeb\xad\x11\x51\x12\xe5\x82\x38\x68\xc6\x07\x93\xed\x95\x0d\x59\xdd\x3b\xb9\x9d\x87\xb4\x43\x6c\x75\x9d\x86\xef\xe7\x4e\x9f\xa0\x5c\x99\xde\xb7\x13\xd3\x1d\x04\x56\xf3\xb4\xac\x51\x77\x8d\xa2\x69\x28\xef\x6e\x49\xd5\x5f\x63\xea\xa9\xe0\x77\x92\x73\xdb\xd4\x51\x5c\x54\xe9\xb2\xf1\x1f\xca\xac\x1d\xec\xd5\xbb\xc8\x92\xa0\x5b\x5e\xf5\x59\xa9\x9b\xcc\x56\x8c\xd1\x5e\xe4\x5b\xfc\x6e\xdd\x4c\x79\xd4\xdb\x40\xba\x54\xd6\x7b\x9e\x05\x4e\x22\xf4\xc5\x22\x0a\x2d\xd2\x32\x2b\x42\xa3\x2c\xd3\xb4\x79\x0f\x47\x1b\xb9\xaa\xe7\xd2\x32\x89\x16\x25\xe5\xfb\x8b\xae\x9e\x17\xee\xa5\x58\xa3\xc5\x90\x94\xf5\xb6\xae\x49\xb6\x5d\xa5\x9b\x65\x79\xdd\xe4\x42\xba\x77\xee\x4d\xd7\xaa\xe9\x44\xf6\x06\xc9\x33\x2f\x97\xa7\x11\x17\x2f\x89\xbe\x96\xd5\xf3\x5c\xce\x9e\x4d\x77\xbb\x7a\xd6\xf4\x76\x72\x65\x69\x16\x1a\x8b\xb9\x5a\xcd\xeb\x86\x06\x94\xdd\xe2\x55\xb6\x17\x66\x01\x13\xc5\xd1\x43\x14\xbe\x5f\x1f\x4c\xc7\xf8\x7c\xa5\xf8\x27\x00\x00\xff\xff\xfe\xfc\x3e\x31\x6f\x0c\x00\x00")

func test_certsNodeCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeCrt,
		"test_certs/node.crt",
	)
}

func test_certsNodeCrt() (*asset, error) {
	bytes, err := test_certsNodeCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.crt", size: 3183, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsNodeKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\xb2\xab\xe8\x16\x84\x73\x9e\xe2\xe4\xd4\x2d\xbc\x51\x70\x83\x1f\xef\xbd\xcf\xf0\x4e\x80\x00\x81\x40\x4f\x3f\x7b\xf6\x49\x67\xa5\x2b\xf9\xaa\xfb\xab\xea\xff\xfd\x7b\x9c\x28\xab\xd6\x1f\xcf\x07\x7f\x1c\x4f\x8d\x40\x20\xfe\xd1\xc5\xf4\xf7\x03\x99\xaa\x2a\xbe\x5c\x95\x03\x40\xe7\x81\x2b\x82\xef\x5a\xfb\x58\x8f\xe5\x82\x1f\x50\xf1\x5a\xaf\x0e\x36\x94\xbd\x6a\x54\x60\xaf\xd8\xee\x5b\xaf\x92\x80\xe1\xd4\x79\x24\xa1\x0c\x6a\xda\xba\x3d\xe8\xcb\x36\x81\x48\xe6\xea\xad\x83\xd4\x2c\x44\xb1\x15\x23\x0e\x5d\x07\x7f\x15\x40\x45\xb4\x47\x4d\xcc\xf0\x8b\x09\xd6\x3c\xcc\x28\xc5\x82\x9f\x4a\xdd\xaa\xac\x83\xd2\x0f\x9d\x98\x1e\x88\x1c\xbc\x21\x39\x13\xd3\xeb\xea\xf0\xe7\xaa\x37\x06\x12\x4a\xfa\xec\x6c\xea\x34\x51\x8b\x7b\xc2\x0d\xfb\x01\xcc\x70\xd4\xb2\x42\x1c\x3b\x3e\x59\xa7\xdd\x30\x49\xa8\x4a\x33\x99\x91\x13\x10\xd5\x2d\xa6\x6a\xc8\xee\x3f\x07\x95\x2f\x7b\xbd\xcf\xb4\xe0\x70\x94\x4b\x08\xdb\x3b\x53\x33\xf5\x4b\x51\xa4\x87\xb6\xcf\xee\x99\x7c\x32\xb5\xf9\x7e\x50\x06\x33\x22\xc4\xc8\x95\x79\x7e\xa5\xd1\xc5\xa1\x88\xd1\x58\x05\x44\xf5\x7b\x78\x58\x2d\x4f\xb0\x80\xc9\x07\x73\xb5\xda\x1e\x6d\x61\x77\x2e\xa9\x66\x57\x8f\xfd\x6b\x23\xac\xc4\x52\x43\x85\xba\x67\x1f\x7e\xb1\x09\xe9\xe3\xe7\x66\x1c\x4e\xa2\x73\x52\x4b\x14\x16\x84\x77\x77\x66\xe5\x9e\x1a\x08\x67\x76\x32\xdf\x68\x5e\x60\x93\xa7\x89\x41\xa3\x6c\xd3\xd7\x8c\x5b\x8d\x92\xd1\x73\x55\x01\xb8\x80\x03\xcb\x4f\xd8\xf2\x98\x14\x47\x50\xfa\xd8\x43\x20\xc6\x6d\x83\x70\xa7\x85\x79\xb9\x1f\x5e\xbc\x88\xed\x31\xe5\x9b\xca\x49\x77\x35\xea\x69\x8e\xaa\x33\x34\x5a\x20\xe3\x56\xaa\xec\x3b\x37\xb0\x28\x79\x3a\xe9\xc7\x41\x27\x86\x59\xb1\x7e\x08\xa8\xfc\xa8\xe2\x0e\xda\xbf\x63\x10\xde\x25\x27\x3d\x9f\x46\xa4\x5e\x6b\x96\x31\x78\x06\x50\xeb\x5b\xc6\xb0\x49\xc2\x09\x60\xae\xfd\x8c\x50\x3e\x65\xaf\x84\x3b\xd1\xbd\x88\xdd\xac\xf8\x2c\x9d\xdc\x44\x6c\x04\x38\x0d\x1a\x26\x38\x6d\x2b\xdc\xdf\x42\xf1\x44\x34\x5f\x7c\x69\x48\x9a\xe2\xf6\xfe\xdd\x8b\x47\x64\x0b\x77\x75\xfa\x73\x74\x23\x5e\x6c\x01\x8c\xbd\x05\x4b\x46\x14\x1c\x67\x1e\x4b\x95\x9b\x06\xac\x87\x18\xa4\x77\xa1\xf0\x36\x2f\xfa\x4b\x55\xd3\x27\xa0\xd4\xf0\x70\xb6\xb4\xd8\x02\x29\x30\x09\x09\x1d\xc7\xb5\xc0\x24\xd9\x46\x94\x52\xa9\x69\xcc\x84\x8b\x94\x16\xce\x1d\xc1\x77\x73\x0d\xfd\xa7\xf4\xa8\xa1\xdb\xf5\xe9\x77\x89\x99\xba\xc2\x9d\x57\x7a\x2c\x8b\x4a\xe4\x89\x32\xfb\xef\xc4\x1d\xe6\x85\x38\xf9\x60\xef\xe3\xab\xfc\x50\x1b\xeb\x46\xfc\xda\x96\x68\x05\x7b\x57\x1f\x15\x48\x79\x9c\x71\xbc\x41\x7b\xd3\x77\xc7\x28\xf2\x6d\x2a\x02\xf4\x61\x33\x15\xca\x2f\x0c\x3e\x86\x9f\x2e\xf1\x5a\x84\x84\x1f\x3e\x12\x4f\x79\x07\xab\x9f\x46\xda\x09\xcf\x4e\xd0\x9a\x01\x46\x58\x6a\x43\xaa\x59\x8e\x21\x41\x79\xfe\x63\x2e\x9e\xb1\x71\x12\xeb\x65\x56\xb0\x37\xe2\xce\x81\x24\x4d\x32\x81\x94\xf3\x10\xfa\xc5\xfa\xa2\x2a\x44\x96\xb7\xd5\x6f\x01\xdf\xb7\xf1\xe0\x31\x85\x09\x72\xf7\x9d\xbc\x9f\x77\x4f\x40\xf2\x65\x75\xfb\x8b\x7e\x0c\x2d\xe5\x77\x25\x41\x5c\x6d\xe8\x44\xf3\x23\x34\x95\x42\x66\x81\x5f\x15\x85\x41\x13\xa4\x19\xa2\x42\xb8\x07\xaf\x36\xd9\xf1\xd7\xcd\x3d\xd9\x5f\x62\xb8\x80\x31\x88\x6e\x48\xff\xcd\xc3\xe8\x2e\x22\x38\x36\xbf\xa3\x93\x07\x8f\xc2\x7d\xe1\xf0\x8e\xb4\x7e\xbf\x24\xdc\xb2\x67\xe2\xdc\x36\xc7\x5e\xed\x41\x6c\x4d\x83\xfd\x22\x3b\x52\x33\xda\x99\x99\x6e\x7f\x2e\x20\x64\xda\xa2\xee\x49\x27\xa4\x41\xdb\xd8\xc7\xca\xe5\x2e\xb2\x58\x39\x18\x79\x7c\xe7\xef\x14\xe5\x5f\x7c\x63\xe3\x87\x1b\xcb\xc6\x29\x08\x4f\x7c\xb5\x9e\x9f\xda\x24\xdf\xf4\x92\xda\x37\xa0\xc7\x1c\x12\x6f\xd6\x8c\x87\xcb\xa2\x32\xe9\x13\xa1\x09\x7e\xb6\xa6\x4e\xb7\x38\x35\xd2\x69\xb2\x6b\xa2\x5f\x97\x27\x67\x3c\xf6\x5f\xe4\x39\x05\xbb\xb3\xa8\x68\x3c\x14\xf5\x11\x07\xd7\x6e\x9d\x4f\xc8\x6d\x2a\x96\xe5\x27\x8d\x97\x84\x55\x69\xe5\x64\x92\x18\x31\x66\x23\x5b\xaa\x2a\xeb\xfa\x2a\xce\x8f\xf6\xb1\xae\x3f\x60\x87\x57\xf3\x1a\x0b\xbd\x5b\xe0\x42\x1c\x19\x63\xf9\xa1\x65\xc9\x1e\x4a\x50\xa2\xc6\x3d\x95\xa1\x4e\x28\xcb\xd1\xd4\xf7\x39\xdc\x55\xd1\x67\x9c\x1a\xc4\xfb\x48\x53\xe9\x6e\x7e\x16\xff\xb4\x9f\x22\xb8\x17\x6e\x9a\xe5\x3e\xd6\x07\xf1\xf6\x5e\x2f\x53\x6b\x84\x02\x28\x4a\x0d\x01\xb1\xa1\xd4\x5b\xc9\xc9\x63\xc0\xab\x1f\xff\xf7\xbc\x3e\xe0\xf5\x6f\xca\x1f\xff\xba\xaf\xfc\x49\xdf\xdc\x42\x5b\xa1\x8c\x4e\x9c\xe5\x6c\x83\x86\xed\x5a\x7f\x0c\x86\xb9\x59\x95\x8a\x43\xf5\x45\xbe\x29\x3c\x25\x07\xed\xdb\x35\x01\x65\x3a\x76\x20\x88\x44\xa4\xd5\x6a\x89\x55\x5e\x24\x0f\x97\x6b\x85\x13\xb7\x9a\x5f\xc1\xeb\xfc\x3a\x19\x57\x13\xa3\x74\x05\x65\xd2\x93\x24\x1c\xdd\x81\x4e\x9c\x21\xb8\x52\x41\x41\x0c\x73\x8b\xed\x30\xf8\x87\x54\xd2\x41\xcc\xfc\x51\xc3\x1e\x44\x50\xed\x61\xb1\x61\xc0\xa9\x59\x6d\x64\x91\x97\x3b\x4a\x46\x86\x7c\xe8\x3a\xe5\xcb\x72\x6e\x72\x44\x85\x82\x5c\x27\x74\xf2\x2f\xf2\x51\xbe\x6b\x83\x6c\x11\xa0\x3d\xa8\xc8\x73\x11\x5e\x9f\x98\x79\x1d\x27\xc4\x3e\x42\x6e\x78\x2a\x46\x89\x76\x6f\x34\x05\x57\x3d\x2e\xf0\x0a\x17\xec\x6b\x8d\x21\x9b\x27\x79\x64\xc9\xa7\x4a\xb2\x72\x8e\x89\x3c\xf0\x8c\xb4\x6e\xd5\xb8\xcc\x77\x68\xcc\x40\x47\x20\x61\xaa\x35\x78\xa9\x8a\x49\x2d\xe5\xb9\x4d\xf2\x0e\x3a\xfd\x1e\x0d\x9e\x4c\x4e\x4f\xb2\x57\xa8\x61\xe6\xd4\x68\x4a\x90\xbe\x38\x14\xa7\x5e\xa1\xc9\x2c\x04\x3e\xd5\xf8\xf7\x90\x13\xd8\x9b\xb0\x48\xf3\x44\x81\x0c\x74\x63\x0d\x66\x29\xb2\x6a\x39\xd3\xe0\x08\x25\xff\x0f\xfd\xce\x8a\x68\x09\xff\x3d\x37\xff\x04\x00\x00\xff\xff\x47\x8a\xc7\x93\x8f\x06\x00\x00")

func test_certsNodeKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsNodeKey,
		"test_certs/node.key",
	)
}

func test_certsNodeKey() (*asset, error) {
	bytes, err := test_certsNodeKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/node.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x94\x3b\xb3\xb2\x3a\x18\x85\x7b\x7e\xc5\xe9\x9d\x33\x88\x20\x42\xf1\x15\x09\x09\x97\x60\xc0\x70\x11\xb4\x63\x83\x5c\xa2\x6c\xc4\x5b\x90\x5f\x7f\xdc\xbb\xf8\x9a\xf3\x96\xcf\x3b\xb3\x9a\xf5\xcc\xfa\xf7\xe7\x20\x76\xbc\xe0\x1f\x0b\x47\x89\x67\x7b\x16\x48\xf0\x2f\x95\xa8\xe7\x21\x80\x2c\x0b\x9c\xba\x06\x08\x0f\x82\xc6\x8b\x00\x31\x5a\x3d\xb1\x58\xe4\x76\x8a\x9e\xd0\x57\x83\xee\x4a\xd3\x0f\x02\xb1\x03\xf1\x87\xa3\xd7\xbe\xca\x00\x30\xbc\x85\x0c\x08\xc9\x9f\x71\x4c\x21\x70\x80\x92\x62\xab\xa5\x84\xad\x4c\x5e\xa8\xe4\x75\xc8\x82\x81\x46\xa9\xc0\xe2\x80\xf6\x8c\x21\x2c\x26\xf4\xb5\x0a\x6e\x65\x6f\xb6\x87\x55\xd3\xb0\x25\x16\x6e\x5b\x06\x12\x4d\x0e\x82\x72\x6f\x4d\x39\x16\x14\xb1\x65\xf6\x81\x34\x29\x7f\x98\xf6\x97\x71\xc0\x69\xe4\x09\x0c\x7e\xc3\x7c\x2c\x2e\x7f\xc3\xa4\x4f\xda\x84\x12\xb0\x85\x4d\xb0\x87\x80\x26\xd0\x25\xaf\x2f\x95\x89\xa6\xc1\x1d\x05\x4b\xc7\x8a\x47\x27\xf6\xbe\x54\xc4\x30\x04\x2c\x05\x40\xf3\x20\x12\xe0\xe7\xef\x83\xc1\x83\x12\x60\xa8\xdc\xcf\x0e\x5d\x3c\xf6\x3c\x30\xd9\x3c\x2f\xd2\xbb\x6c\x11\x5b\x6e\xee\xc4\x34\x9b\x96\x17\xa3\x32\x13\x10\x3b\x88\xa7\xa1\xff\x38\xa6\x4b\x42\x90\xe9\x90\xbb\x76\x5a\x04\xf2\x06\x4a\x46\xab\xb0\x58\x83\xb6\x98\xb8\xbc\x0b\x7a\xdd\xd3\xe6\xe7\x31\xdf\xdc\xfa\x63\x0d\xdb\xa1\x70\xc3\x5d\x15\x1a\x93\xa3\x4d\xec\x9e\x29\x07\xa4\x8c\xec\xbd\x39\xd4\xf4\xeb\x59\x98\x0e\x4a\x79\x27\xa9\xd5\x25\x47\xb7\xe1\x55\x5f\x53\x0f\x03\x64\x74\xb9\x20\x19\x88\x5a\xb7\x33\xd0\x74\x3e\x45\xe4\xc2\xc5\x51\xdf\x1f\x77\xa3\x7e\x4d\x1c\x40\xb7\xe2\x55\xc5\x27\xda\xc8\xcf\xe2\x8c\xdf\x5b\x4d\x5a\x59\x83\xe5\x57\xaa\xaa\x8f\xfc\xf5\xf0\xd8\xd3\xbf\x2b\x8f\x37\x8f\x26\x95\x70\x2d\x3f\x8f\xdb\x63\x3f\xa4\xfd\x31\x7d\x93\xb7\xdc\x22\x5b\xbb\x0c\x6b\xe6\x3b\xe5\x15\x3d\xf7\x99\xbb\x57\x0f\x1b\x29\x6b\x94\x65\x58\x3f\xc2\xb0\x8d\x64\x9f\xa1\x22\xc6\x6e\x5d\xf7\x49\xa9\xb7\x0a\xef\x67\x23\xc5\x29\x7b\xe1\x79\x9e\x74\x50\xe5\xf3\xa8\xc5\xe1\xed\x4b\x25\x8b\x87\x53\xba\x0d\x74\x14\xfd\x22\x1d\x4a\x95\x14\x4a\x50\x68\xc2\x6b\xbc\xa1\x33\x29\x51\xfb\x17\x7d\x73\xd0\x7c\xec\x00\x0e\x27\x33\xb8\x50\xa0\xfd\x78\x52\x21\x81\xa1\x2c\x18\xfe\x08\x67\x0f\x08\x24\x3f\xcd\x49\x6e\x9c\x62\x84\x80\x0f\x9b\xe6\x06\x1b\x6c\x43\x56\x22\xc0\x41\x00\x9b\xf3\xd8\x9e\x3b\xc7\x14\xcb\x4f\x7d\x77\x1b\x80\xd0\xfa\xd8\x07\xe0\x79\x4f\xd3\xea\x19\xa8\xde\x71\xbd\xcd\xa6\x51\x42\xf6\x4c\xd3\xf4\xf5\xdd\xe6\x9d\x0f\x8f\x3b\x9a\xbc\x57\x13\xba\x6f\x0c\x73\xc2\x63\xbb\xaa\xeb\xec\xfb\xc0\x42\xc7\xd5\xc9\x9a\xe7\xab\xef\xd5\x75\xa9\xc4\x53\x4e\xa6\x27\xdc\x89\xeb\x32\xf7\x88\x24\x5f\x8a\x24\x9a\x2f\x6e\x15\xef\x87\x40\x49\xe5\x7a\xb7\x8f\xe5\x33\x3e\x97\x55\x15\xad\xa1\x7e\x9b\x48\x99\x39\xd3\xbd\xd9\x9a\xcb\x5b\x37\x6e\x81\xef\x8e\xfe\xb7\x63\xfb\x41\xb5\x44\xb6\xac\x77\xd2\x63\xf1\x44\xa7\x88\x5d\xc6\x8e\x5d\xdb\x11\x3b\x41\x52\x77\xe1\x88\x6f\x55\xc4\x54\x56\xbb\xfd\x14\x6d\xbe\x07\xbc\xee\x82\x30\xcb\x0c\xdc\xcf\xd3\xf5\x1d\x76\xd1\x1b\x85\xdb\xcc\xb4\xcb\x71\x23\xc5\xd7\xbb\x6f\xd7\xc1\x63\x9f\x18\xba\x6b\x5b\x0e\x0f\xb6\xeb\x92\xc5\x5c\xe9\xf3\x2e\x4c\xd7\x69\xee\x5d\x77\xf1\xda\xa8\xdd\x62\x6a\x37\x5a\x5d\x18\xc5\x72\x41\x62\xaf\xb4\xcf\x01\x80\x2b\x63\x2d\x29\xae\x2e\xca\x70\x3c\xb5\x36\xcb\x6d\xf9\xa2\xcf\xfd\x79\x13\xef\xec\x34\xae\x43\x57\x59\xa0\x54\x77\x8f\xef\xe9\xc5\xc9\xe3\x7c\x15\xcf\x1c\xde\xb6\x49\x17\xda\xfc\xd4\x57\x7a\xc8\xe6\xba\xbc\x4b\xca\x7b\x8a\x48\xf3\xe7\x8f\xf4\x3b\x0f\x38\x40\xff\x9f\x8c\xff\x02\x00\x00\xff\xff\xa9\xe3\x62\x5a\x4f\x04\x00\x00")

func test_certsRootCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootCrt,
		"test_certs/root.crt",
	)
}

func test_certsRootCrt() (*asset, error) {
	bytes, err := test_certsRootCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.crt", size: 1103, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsRootKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd5\xb7\x12\xab\x5a\xb2\x06\xe0\x9c\xa7\x38\x39\x75\x0b\x2f\x20\x38\x01\x2c\x16\x02\xe1\xbd\x20\x93\xf0\x20\xbc\xe7\xe9\xef\x9e\x3d\xe9\x74\xda\xc9\x57\x5d\xfd\xd7\xff\x7f\xff\x19\x11\x3e\x55\xf3\x1f\xd7\x13\xfe\xb1\x5d\x35\x14\x7c\xf8\x8f\x06\xe3\xbf\x1b\xc4\x50\x55\x38\x0a\xaa\x28\x08\x1a\x10\x1c\x28\x50\x72\x7a\x36\xf6\x1c\xc6\x77\x11\x18\x1c\xf6\xd3\xed\xa3\x76\x0b\x5a\x07\x45\x11\xab\x31\x39\xad\xe9\xe5\xc0\xaa\xa4\x09\xa9\x9e\xa3\xd0\x04\x88\xe7\x60\x6e\xfd\xb5\x94\xbd\x29\xd0\xa3\x50\xb3\x00\x6e\x82\x9b\x1a\x31\x76\xdf\xc9\x56\x5b\x06\xdb\x85\xe8\x83\xe9\xde\x47\xfc\x79\x56\x77\x43\xf9\xbb\xe1\x6e\x46\xa0\xcb\x6b\x24\xf0\x9f\xd6\x40\x36\x52\xb9\x9f\x6c\xb7\xbb\x25\xa1\xd2\x2b\x95\x84\xc7\xe3\xa1\x53\x8f\x10\xfc\x31\x61\xea\x8f\x03\x61\x09\x63\x97\xde\x05\x2e\x51\x5a\x2f\x89\xb9\x67\xfe\x8b\xfc\xc7\x36\x05\x67\x29\x01\x4e\x47\xa8\xa0\x6f\x54\x9b\xed\x46\xd1\xa8\x51\xb3\x9c\x84\xba\xcf\x78\x74\x1a\x58\xd6\x83\x7a\x3d\x9b\xdf\x74\xc0\xd3\xec\x8a\x51\x99\xd1\x6a\x32\x99\xe4\x57\x17\x1a\x75\xba\xd3\xce\x99\xbf\x3e\x56\x80\x80\xaa\xd7\x1c\xf6\x17\x56\x44\x46\x5a\xc4\x60\x66\x52\xcf\xfa\xcd\x10\x14\x57\x2b\x90\x6d\x25\x52\x14\xd3\x52\xd6\x90\xc5\xcc\x82\xc9\xa2\x0c\xf5\xd3\xe0\xb8\xbc\x54\x42\xee\xb1\xc1\x66\x22\x11\xfe\x2a\x66\xb7\x17\x69\xc1\x5d\xf3\x31\x52\xcc\x2b\x5a\xfd\x68\x33\x80\x0a\x34\x75\xf7\x41\xc6\xcc\xb7\x31\x1c\xaa\x24\x38\x82\x28\x0c\x7f\x8e\xfd\xcc\x43\x58\x04\xfc\x50\xe0\xf6\x6c\xca\x35\x32\x86\x30\x2b\xc7\x85\xbc\xf1\xfc\x7e\x1b\x1f\xd1\xe3\x5c\x39\x20\x21\xea\xf0\x12\x5d\x1d\xf7\x04\xc4\x11\xac\x7d\xb4\xb5\xe1\xad\x89\x62\x45\xe2\xbd\x21\x92\x04\x73\x84\xd5\x8c\xbd\xee\x42\x47\x34\x0d\x84\x84\xf4\x64\xd7\xf4\x96\xea\x0a\x64\x63\x45\x44\xee\xbb\x13\x54\xc9\xdc\x70\x9f\x9e\x13\x46\xf9\x16\x5e\xfa\xac\x66\x01\x65\xd4\x5e\x0b\xee\x54\xe3\xe5\xe1\x55\xac\x4e\x9c\xe7\x34\x8a\xf8\xac\x7a\xdc\x54\xcc\xa5\xf8\x36\xf2\x99\x44\xf4\x07\xc6\x3f\x63\x9c\x22\x29\x95\x0e\x67\xe6\xbc\xc6\x77\x7a\x24\xf1\x33\xd0\x78\x03\xcd\xdd\x61\x87\x85\x5c\x80\xb3\x2b\x2b\x0d\x0a\xc4\x42\x20\xf3\x1c\xaf\x94\xd9\x16\x7a\x07\x08\xd4\x3b\x2e\x78\xb3\x6f\x57\x97\xa7\x17\xb5\x52\x98\xc0\xbd\x82\x3b\x48\x80\xb6\x6f\xb1\x35\xf4\xfd\x46\x56\xcf\x62\x01\x11\x2a\x72\xc6\xd2\x8c\xbf\x77\x86\x21\xac\x30\xf7\xa4\xe7\x86\xd6\x61\xfe\x1c\x65\x3b\x08\x80\x5b\x6d\x30\x97\x60\xfd\xe2\xe0\xd4\x9e\x55\xf1\xe4\x80\x92\x1b\x75\xb6\x9f\xe7\x68\xcb\x59\xac\x73\x79\xc0\x57\xee\x57\x3a\x3d\xb7\xb1\x91\xfb\xd6\x38\xc2\x82\xa0\x8c\xa1\x40\x87\x57\x97\x39\xee\x2b\x08\x2e\xc3\x4f\x25\x5f\x51\x12\xf3\x7d\xbd\xd8\x7d\xe1\x4f\x70\x6c\x74\xd3\x61\x5f\x9b\xa9\xbc\x5a\x39\xa6\xfc\x7e\x18\x33\x11\x75\x88\xa9\xcb\x4c\xe8\x90\x35\x55\x69\x23\x47\x8e\xd0\x59\x69\x9f\x16\xc0\xed\x84\xec\xe9\x1b\xf7\xd5\x9d\x0b\xd9\xcb\xa8\x89\xe7\xeb\x89\xcd\x01\x2d\x6b\x5f\xf4\x95\x94\xf7\x25\x1e\xa2\xdd\x66\x26\xb2\x1a\x58\x1f\xc7\x33\xfa\xe3\xf3\xe7\x5a\x72\xc6\xd7\xd3\xce\x79\x56\x09\xbd\x59\x4e\xd8\x88\xea\x0a\x92\xa8\x99\x5e\x20\xae\x9e\xe8\x87\x89\x71\xf5\x8d\xc7\x4a\xff\x5f\x31\xda\xee\x2a\xc2\xd8\x41\xdb\xe6\xa5\xc5\x56\xa5\xaf\x3d\x94\xf9\xe4\x1f\x67\x61\xe4\x06\x19\x34\xb7\x88\x3f\x16\xf6\x0a\xac\xbe\x0a\x3f\xed\xb6\x8d\x47\x7c\x0c\xaa\xdd\xc4\xa3\x47\x10\xf9\x16\xeb\xdd\xc1\xde\xc8\x9a\x2e\x03\x1a\xb4\xf2\x55\x36\x3d\xe0\xce\x6a\xde\xf6\x8f\x50\x3d\x80\xa5\x45\xa0\x7f\xe4\xaa\xbe\xcc\xfd\x33\x68\x95\x89\x9c\x7e\x24\xfc\x2c\x7b\xaf\x44\xe2\x89\x4b\x17\x45\x5f\x3e\xdc\x79\xe4\xb3\x83\xc3\x7b\x01\x41\x0f\xbe\x2e\xc5\x14\x85\x45\x2e\xc4\x2a\x29\x28\xcf\xdd\x5f\xed\x5a\x1d\xce\x76\x96\xfb\x67\xfc\x21\x8b\x7f\xf2\x4a\x84\xb2\x40\x0c\x1d\x18\xdb\xa5\xae\x24\x9b\x8a\x5e\x88\x92\x37\x73\xa7\x94\x13\x91\x99\xf3\x24\xc6\x59\x5c\x25\x9c\x2d\x47\x6a\x66\x5e\x18\x1b\xd2\x7d\x8f\xfe\x79\x0b\xfd\x2d\x42\xf2\x5d\x56\x7c\x58\x0f\x69\xaa\x25\x91\x56\x0a\xd6\x68\xbf\x14\xd7\x44\xec\xa5\xcd\x8c\x30\x2c\x7c\xac\x17\xc4\x8a\xcf\x6a\xc8\x41\xb2\xd9\xcd\x46\xd1\x4b\x7f\xf0\x4d\x6a\xd5\x78\x9d\x99\xa6\x31\xfc\xfd\xa2\xdf\xbe\x16\x2a\xc9\xe0\xde\x18\x15\xf9\x98\xae\xa1\xf8\x46\x6e\x12\x67\xab\x9c\xc9\xb8\x15\x33\x7b\x19\xde\x54\xb7\x88\xad\xa3\x89\xa5\x03\x92\xaf\xac\xa7\x49\x52\x54\x40\xe8\x51\x1c\x2c\x8e\xcc\xfb\xdf\xe0\x1c\xca\x66\x80\xec\x4e\xe7\x31\x7f\xfa\x17\x02\xab\x06\x5b\xbf\xdc\xec\xa2\xf2\xd4\x74\xcb\x67\xda\x58\x31\xf5\x4b\x13\x8d\xf0\xf9\xd8\x34\xb5\x35\xb7\x03\x1f\x69\x99\xf8\xa4\x53\x0d\xe5\x21\x66\x94\x7a\x99\x1a\xe5\x01\x4f\xf9\xe3\x08\x32\x22\x2d\xba\xbb\xd8\x8c\x55\xeb\xfe\x1b\x4d\xc6\x73\xe9\xc9\xf9\x35\x2a\x03\x3b\xc6\x96\x3b\xc6\xb8\x71\xe0\xdf\x39\xcb\x9b\x47\x20\xc3\x3c\xca\x9d\x4e\x9d\xc9\x33\x79\x1c\xdf\xf1\xcd\x9c\x52\xc6\x23\x16\xc9\xcd\xdd\x5f\xb2\xf4\x2d\xbe\x3f\xf4\x95\xa2\x9e\xce\x3f\x44\xf4\x28\x2d\xfb\x29\xb7\xf3\x26\xe2\x32\x4d\xfa\x7b\xdf\x9f\xad\x59\xa8\xfd\x59\x53\x4c\x54\x89\x5e\xdd\xbd\x3e\x73\x96\x20\x1e\xe1\x92\xd7\x3a\x24\x42\xb2\xf1\x46\x41\x55\x6c\x67\x60\xdb\xb0\xd0\xbf\x9f\x58\x05\x7c\x1d\x4f\xde\xa9\x43\x78\x8b\x8a\xfc\xb6\x8d\xbd\xc6\x6d\x3c\xd0\x0e\xc1\x63\x36\xaa\xd5\x37\xf5\x94\x91\xdf\x05\x07\x22\x9f\x34\x7b\xc2\x25\x72\x92\xda\x8a\xd6\x7a\x59\x89\x63\x5f\x0d\xc7\xc3\xf6\x00\xca\x93\x36\x46\xb2\x7d\xa2\xcc\xa5\x42\x66\xa1\x99\x1b\x83\x52\xfe\xfb\x2f\xf2\xb7\x56\xa0\x29\xfd\xef\xba\xf9\xff\x00\x00\x00\xff\xff\xe8\xa4\xc1\x5f\x8f\x06\x00\x00")

func test_certsRootKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsRootKey,
		"test_certs/root.key",
	)
}

func test_certsRootKey() (*asset, error) {
	bytes, err := test_certsRootKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/root.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\xc9\xb2\xab\x36\x18\x84\xf7\x3c\x45\xf6\xa7\x52\x0c\xc6\x03\x8b\xbb\x10\x92\x00\x61\x83\x2d\x2c\x26\xef\x8c\x31\xf3\x61\xb2\x19\x9f\x3e\xc7\x37\x55\xc9\x22\xd1\xf2\x53\xa9\x4b\x7f\x75\xff\xfd\xe7\xe7\xa8\x58\x27\xf6\x1f\x10\x3b\x8c\x68\x04\x02\x86\x7f\x53\xce\x22\x04\x81\x15\x42\xf0\x1c\x52\x30\x11\x15\xa4\x84\x5e\x7c\x1f\xbf\xe5\xe2\x4d\x53\xa6\xdc\x1d\x95\x0c\x5e\x89\xab\x15\xd8\x6a\x5a\x76\x59\x99\xeb\xca\x24\xa8\x80\xbe\x34\x80\x40\xcf\x59\x0e\x99\x30\x08\x91\x47\xe9\x11\x4f\x15\x8a\x24\xbb\x7f\x7c\x2b\x59\x28\xa5\xb3\xc6\x00\x53\x53\xdb\x53\x81\xc5\x10\xb6\xc7\x50\x7a\x2f\x91\xa4\x15\x77\xa8\x22\xca\xc0\x53\x9b\x84\x99\xb3\x0b\xb0\x58\x45\xb9\x58\x0c\x4c\x36\x72\xee\x1f\x68\xaf\x1f\x96\xfe\xc3\x2c\xf8\x98\x71\x01\xe8\xdf\x62\x0d\x83\xee\xbf\x62\xdc\x1d\x61\xc7\x02\x07\x1d\x88\x2e\x06\xb3\x45\x62\xdd\x5b\x63\xc3\x5b\x6f\x01\x99\xd2\x14\xe7\x16\x10\x74\x78\xed\xf4\x2b\x89\x36\x88\xe2\x9f\xaf\xbb\x00\xc8\x44\x45\x13\xf8\xdc\x1f\x39\xd0\xfc\xcc\x4d\x11\xbc\xa2\x2f\xeb\x74\x6f\x37\xea\x7b\x0c\x6f\x59\xb5\x2b\x8a\x69\x62\xc2\x26\xa6\x5b\x37\xa9\x21\xb0\xc6\xe2\xf9\xba\x7a\x6f\x63\x48\xef\xac\x80\x64\xe7\x1e\xfd\x0c\x62\xbe\xe4\xc4\x75\x86\x82\x5d\x1f\xfc\x78\x6b\x0b\x73\x3a\x5b\x89\x1d\x5e\x52\x4f\x70\xaa\x1d\x34\xb3\x69\xf0\xd9\xf2\x55\x5f\xcc\x9d\x7d\xf8\xda\xa7\x7a\xa6\xdf\xcc\xc6\x8c\x3b\x8a\xe5\x9d\xd0\xdd\xcf\xc1\x37\xd7\x26\xee\x2b\x73\x1d\x25\x77\xbb\xee\xeb\xf4\xe0\x2b\xba\xc8\xc7\xe2\x90\x6e\x97\x8b\xbc\xdd\x8a\xbd\x51\x31\x64\xf5\x1d\x93\xf7\x9d\x79\x6e\x43\x18\x5f\xdf\xe2\xc1\xbd\x05\x52\x7d\xc1\x62\x14\x1d\xb9\xe1\xa9\xf4\x4b\x66\xca\x01\x1a\x44\x12\xc2\x9b\x8b\x6e\x63\xbb\x15\xc6\x05\x1f\xc2\x7c\x63\x49\xb5\xc2\x57\x36\xf6\xd5\x04\xa3\xe9\xb6\x80\xed\x3b\xbb\xf8\x56\x93\xb1\x8c\x9f\x2f\xc8\x55\x9f\xdc\x58\xa6\x38\xa4\x42\xd9\x5b\x86\xd7\xae\x55\x58\x11\x26\xc1\xa6\xf6\xbb\xda\xb1\xae\xfa\x3d\x1a\x03\x8f\x32\x31\x09\xb7\xcb\xd7\xab\x09\x02\xf9\xd2\xf0\x4d\x8f\x1d\x27\x53\x0f\xa4\x12\x5e\x02\xa7\xbc\xc4\x7d\xd1\x19\x0e\x9c\xd8\x5c\x74\x87\xaa\xbe\xf8\x9a\xf0\x7d\xbe\xb1\xfa\xb4\x82\xd4\x52\x01\xd0\x0b\x73\x05\x95\x05\xe4\x8f\x53\x31\x9a\xb0\xca\x4f\x14\xff\x84\x4e\x6b\x10\x60\xdc\xc7\x5b\xe3\xea\x62\x84\xc0\x51\x4d\xd3\x5e\x4d\xb1\xa6\xd2\x07\x02\xc5\xff\x24\x0f\x9c\x21\xf8\x79\xfb\x48\xc5\xe8\x15\xc9\x25\x82\xae\xc3\x2d\x4a\x20\x0e\x3c\xdc\xf9\xdd\xbd\xe5\xeb\x3e\x5f\xd4\x66\x93\x84\x1a\xe6\xbf\xcf\x7b\x77\x6a\x0d\x39\xf2\xf6\x8b\x9b\xc9\xda\xee\x18\xd7\x64\xbf\xe9\xbc\xb1\x36\x7c\xba\x7a\xb7\x1b\x7f\x51\xfa\x13\x97\x8f\x6b\x55\x9f\x37\x2c\x37\x60\x26\x9d\xce\x8a\x47\xe7\x9c\x35\xd9\x34\x4a\x89\x3c\x59\xcd\x3a\x7e\x2b\x83\x66\x66\xe7\x82\x3c\xf4\x39\x19\xbd\xc3\xd3\xad\x82\x5e\x25\x24\xe9\x78\x84\x34\x8f\x9b\xba\xa6\xbe\x3f\xe1\xb5\x0c\xa6\x23\x3d\xfa\xcf\xe2\xb8\x4f\x10\x3d\xb5\xf0\x42\x3b\xbd\xdd\xe3\xeb\xde\x79\xec\xfd\xc6\xe8\x95\xf1\x3c\xd0\x4a\xd2\x46\x5e\xdf\x9c\xbc\xa4\xe4\xfd\x5d\x5c\x77\x2e\x17\xbf\x5a\x5e\x1a\x13\x2f\xa9\xdb\xbe\x64\x4a\x44\xa5\xfe\x4d\xe1\x22\xb0\xd1\xc8\x33\xd1\x25\x01\xd4\x06\xbf\x0c\xeb\xd6\x34\x92\x73\x9e\x4b\x59\xd0\x8a\xa7\xa2\x55\x82\x8d\xf0\x0e\x4d\x73\xe4\x0e\xf3\x3e\x83\xce\xfd\x3c\x8f\xcf\x5b\x30\x54\x5f\x53\x42\xe1\xa8\x44\xc7\xa3\x49\x6f\x24\x7e\x8f\x71\x1e\x47\x4a\x41\xcc\xbb\x6f\xef\x40\xec\x8c\x30\x12\x44\xf3\x52\x9c\x6a\xbf\x8d\x43\x38\xc4\xdc\xde\x78\xcd\x6a\xd0\xfc\x2c\xc7\xaf\x5f\xdc\xef\x8a\xc0\x36\xfa\x6f\x6d\xfc\x15\x00\x00\xff\xff\xe3\x17\xbb\x2a\x53\x04\x00\x00")

func test_certsTestuserCrtBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserCrt,
		"test_certs/testuser.crt",
	)
}

func test_certsTestuserCrt() (*asset, error) {
	bytes, err := test_certsTestuserCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.crt", size: 1107, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certsTestuserKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x0e\xe3\xe0\x11\x84\x7b\x3e\xc5\xf5\x82\x21\x92\x62\x2c\xae\xf8\x99\x93\x98\x73\xc7\x1c\xc4\x9c\xc5\xa7\xb7\x7c\xb5\xb7\x5d\x2c\x30\xf8\x66\x16\xf3\x9f\xff\x0d\xc3\x8b\xb2\xfe\xc7\x76\xc0\x1f\xd3\x96\x7d\xe0\xf2\x7f\x54\x3e\xfa\xb7\x81\xde\xb2\xcc\x4f\x40\x66\x00\x50\x59\x60\xf1\xe0\xfc\x54\xcf\x96\x45\xe7\xfc\x4c\x53\x54\x8c\xe2\x62\xc4\xa8\x37\x4f\xeb\x2f\xcf\xf0\x25\xfc\xac\x38\x0d\x7b\x2d\x7c\x97\xda\xe4\x28\x7e\xb0\xb3\x81\x8c\x8e\xed\x46\xab\x36\x71\x3d\xa3\xac\x8d\x8b\x9f\xc2\x50\xb8\xf9\x3b\x7a\xbb\xd2\x1d\x70\x98\x90\xf3\x71\x51\x35\x51\xa6\x75\x1f\xea\x98\xee\x6f\xd1\x96\xe6\x8e\x31\xa3\xdd\x3b\x09\x1b\x26\x1f\x88\x31\x8c\x4d\xed\xdb\x0e\x9f\x43\x44\x93\x7d\xbe\x8c\x3a\x75\x3e\x9a\x97\x89\x7b\xef\x9d\x1d\x9f\xb2\x91\xb5\x0f\xa3\xc8\x93\x0b\xf7\xce\x5b\x25\x3e\x0f\x83\x68\xdc\x39\x00\x83\xb7\xe4\xa5\x20\x42\x3e\x3d\xdd\x97\x1e\xa0\xdf\x65\x38\x12\x6a\x74\x0a\xe1\x24\x37\x47\x04\xbd\x0f\xd0\x94\x28\x72\x8d\xaa\x4d\x51\xde\x6e\x7d\x7a\x96\xb8\x6b\x0b\x55\x78\x01\x4a\xcc\x2a\x23\x8d\x5c\xa4\x55\x65\xc8\xc3\x4a\xca\x3d\x11\x10\x2e\xb8\xcc\x88\xbc\xae\xa8\x37\x83\x24\x19\x1e\x28\x0e\x4f\x57\xb3\x82\xcc\x13\xec\xf2\x75\xdf\x93\x08\xe2\xf1\x74\x88\x1a\xd9\xb1\xa8\x02\xf2\xe0\x08\x93\x50\x2f\x1e\xf2\x22\xab\x64\x95\x5c\xd3\xcd\x54\x2f\x30\xa2\x86\xad\x95\xa7\x22\xe2\x50\xe2\x1b\xa9\x73\xa5\xed\x3d\xfc\x4b\x9d\x32\x07\x2c\xc0\x80\xf1\x07\xdb\x62\xc1\x0b\xa8\xb3\xfa\x7d\x32\xc6\x44\x17\x50\x2a\x0d\xcc\x4e\x21\x11\x17\x89\xda\x20\x1a\xa7\x8b\x0b\x6c\x34\x94\xdf\x31\xf3\x7c\xaf\x10\xd8\x93\xd6\x9f\x54\x1b\x4c\x82\x13\xcb\x5d\xd3\x23\x34\x5a\xe7\x38\x40\x88\xc2\x70\xd0\x97\x94\x04\xd0\xa6\x5e\x76\xba\xae\x72\x4a\x27\x8a\x0e\x93\x0f\x72\x94\x91\xb8\xca\x50\xa7\x6c\xcb\x8e\x50\xb8\x50\xe9\x10\x5f\x43\x66\x93\xe0\x33\xa4\xc5\xb9\xda\xe5\x3e\xd6\x9a\x1f\xdd\xf1\xf0\x80\x74\x2e\x90\x31\x8c\x59\xab\x29\xad\xa3\x9f\xb0\xcb\xfe\xdc\x6e\xfd\x42\xcc\x45\x2e\xc1\x6c\x6d\xa4\x77\x2e\xd9\x90\xa5\x93\x3d\x04\x85\xdd\x9a\x9e\x65\xde\x5d\x96\x26\x79\x64\xd1\x24\x49\xf5\xcd\x46\x2a\x54\xe0\x82\xee\x56\xae\xbd\x8c\xd6\x8d\xc0\xfc\x86\x55\xdf\x01\x61\x18\xbf\x51\x8a\x11\x0f\x29\x03\x8e\x00\x7d\x5f\x95\x46\xd7\xf4\x48\xc6\x0a\x9e\x99\x60\x85\x7b\x7c\x53\xa3\xbb\x50\x66\xe3\x80\x62\xa2\xe0\xb2\x38\x69\x13\xda\xfc\x24\xaf\xe5\x68\x68\x42\x84\x29\x8c\x6d\xbc\xf1\x99\x8c\x81\x6a\xae\x96\xc7\x48\x58\x34\x28\x87\xc2\x7d\xa8\x77\xe7\xf1\x28\xa6\x65\x18\x22\x06\x6a\xa6\xe1\x25\x84\xb8\x8a\xa8\xd8\xde\x8f\xb0\xc8\x00\xc3\xf4\x7d\xa1\x17\xe6\xa2\x1f\xd5\x87\x17\x76\xc8\x70\x38\x6c\xfb\xf0\x22\x69\x32\x4b\x83\x65\xbc\xc7\x76\x4a\x4f\xa1\x27\x92\x63\x8a\xde\x58\xd7\x9f\x3d\xb4\x0f\xc7\x21\x06\xf8\xbe\xd7\xa0\x69\xbf\xd3\x71\x65\x62\xb0\x94\xfb\xea\x47\xec\xcd\x7f\x56\xe5\xed\xb3\x33\x61\x46\xf6\x43\xd6\xe4\xc7\x4b\xf3\x8e\x99\xf1\x0f\x7b\x6e\xf6\x2c\x0c\x4a\x36\x6b\xa1\x7c\x62\x30\xf7\x29\x9a\xac\xb4\x3e\xe6\xef\x2f\x34\xf0\xb5\xca\xbc\x9a\x6d\x85\xf3\xe9\xaf\xfc\xa5\x4a\x03\xd9\x5c\x15\x8d\x82\x3e\xf2\x17\x32\xdb\xef\xd4\x84\xb9\x67\xfd\x4f\xb1\x3e\xe9\x10\x2f\x8c\x93\x66\xe3\xe8\x34\x0a\x7c\xf0\xb6\x10\x2e\xe6\x3e\x47\xc6\x47\xbd\xc0\x77\xbb\x8a\x11\x6f\xa2\x88\x95\xa3\x7c\x93\x21\x07\x9f\xcd\xe7\xae\x08\xa7\x0c\xd5\x93\x0e\xc6\xa6\xd2\x4a\x67\x84\x7e\x09\xa9\xc1\x7c\xcf\x84\x8a\xc3\xe3\x12\x0a\xe7\x3e\x3a\x83\x47\x6c\x02\x1c\x1e\x62\x3f\xd6\xec\x24\x95\x14\x71\xab\xe5\xa3\x89\xba\xe7\x88\x5d\x8d\x74\xae\x94\xe5\xbc\x80\xc7\x51\x9e\xfd\x80\x74\xff\x77\xab\x0c\x47\x71\x4e\xcb\xa4\xae\xda\x01\x77\x9b\xac\xef\xfc\xa3\xc5\x4e\xd5\x43\x31\x97\x40\x22\xdd\x47\xdc\x9f\x64\xe0\xee\x47\xcd\xb7\x3d\xce\x32\x41\xe8\x1e\x04\xc7\x7b\xb1\x05\xa9\xdb\xbb\xe0\x4c\x66\xc5\x50\xdd\xba\x09\xca\xe9\x52\x70\xca\x46\xa1\xfd\xec\xe7\x25\x36\x41\xed\xd9\xea\x07\xbb\x61\x25\x8c\xc5\xdf\xdf\xd3\xba\x76\x27\xf6\xd9\x05\x0b\x50\x75\x1d\x22\x54\x83\xa6\xd4\xdc\x9b\x83\x6c\x26\x73\x0b\xb8\x73\x2d\x85\x88\xce\x77\x41\x71\xe4\xa7\x65\x54\x59\xad\xf0\xcf\x18\x77\xf6\xc8\x34\x19\xd9\x0d\xf5\x0d\xcf\x35\x71\xc0\xbe\x1b\xf3\x3a\xaa\xc2\xf0\xbf\x07\xd4\xac\x52\xc0\x9c\x3d\x62\xf5\x68\x45\x1e\xec\x92\x05\xeb\x33\xf9\xf0\x6c\x15\xf1\x60\xd0\xa4\x31\x36\xe8\xbc\x8e\xa7\xda\x6f\x6d\x92\x3d\x77\x1b\x85\x3b\x64\x45\x28\x54\x69\x3b\x33\x72\x19\x06\x42\x48\xb1\x33\xac\xc8\x00\x09\x6b\x4c\x55\xdd\x4b\x60\x36\x1f\xef\x69\x4a\xe8\x6f\x11\x31\xbd\xaf\xbe\x64\xb3\xc0\x75\xe2\x8a\x48\x53\x11\x49\xfc\x02\xe4\x5a\x62\x69\x6a\x53\x41\xeb\xb6\x04\x0d\x05\xd1\xa5\x04\xbb\x1d\x3e\xe9\x2d\x4a\x48\x49\xa6\xa7\xa7\xe3\xc4\x92\x0c\xe4\x3e\x27\xbe\x18\xdc\xd7\x1e\x01\x70\xd7\x43\xb7\x83\x4e\x6d\x31\xfc\x6c\xab\xe7\x6b\x98\x47\x54\xea\x07\xdc\x45\x0b\x25\x49\xf5\xfb\x1c\xef\x27\x19\x2c\x28\x16\x14\xdd\x46\xe1\x70\x84\x36\x5c\x72\x0e\x3e\x3b\x15\x5e\x31\xc0\x61\xce\x51\xbb\xf7\x6d\xbb\xb7\x23\xe7\xd1\x88\x2c\xef\x67\xf8\x22\x7f\xe0\x89\xec\x03\x19\x70\x9d\xe4\x4b\xa0\xcb\xf2\x83\x6a\x7b\x92\x0a\x1a\xe4\xca\xe0\x0c\x46\xc2\x89\x57\xe5\x59\x4d\xea\x29\x0c\x88\x1c\xa4\x57\xad\xb9\xda\xf5\x7e\xa5\x92\x2c\xd6\x75\x82\x2d\xd3\xcc\xbe\xca\x16\xc2\xc8\x0c\x31\x68\x63\x8e\x49\xdf\xac\x32\x19\x55\x52\x8e\xce\x78\x9e\x70\x15\xc3\xc8\xee\xef\x43\x7a\xba\x4e\x1c\xbb\xae\xa1\x6b\x30\xf6\xb1\x18\x7a\xbb\x52\xb4\xfa\xfb\x17\xfa\x57\x2b\xbc\xce\xfd\xff\xba\xf9\x6f\x00\x00\x00\xff\xff\x4e\x8a\x90\x12\x8f\x06\x00\x00")

func test_certsTestuserKeyBytes() ([]byte, error) {
	return bindataRead(
		_test_certsTestuserKey,
		"test_certs/testuser.key",
	)
}

func test_certsTestuserKey() (*asset, error) {
	bytes, err := test_certsTestuserKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_certs/testuser.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":       test_certsCaCrt,
	"test_certs/ca.key":       test_certsCaKey,
	"test_certs/node.crt":     test_certsNodeCrt,
	"test_certs/node.key":     test_certsNodeKey,
	"test_certs/root.crt":     test_certsRootCrt,
	"test_certs/root.key":     test_certsRootKey,
	"test_certs/testuser.crt": test_certsTestuserCrt,
	"test_certs/testuser.key": test_certsTestuserKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test_certs": {nil, map[string]*bintree{
		"ca.crt":       {test_certsCaCrt, map[string]*bintree{}},
		"ca.key":       {test_certsCaKey, map[string]*bintree{}},
		"node.crt":     {test_certsNodeCrt, map[string]*bintree{}},
		"node.key":     {test_certsNodeKey, map[string]*bintree{}},
		"root.crt":     {test_certsRootCrt, map[string]*bintree{}},
		"root.key":     {test_certsRootKey, map[string]*bintree{}},
		"testuser.crt": {test_certsTestuserCrt, map[string]*bintree{}},
		"testuser.key": {test_certsTestuserKey, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
