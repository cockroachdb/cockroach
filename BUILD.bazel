load("@bazel_gazelle//:def.bzl", "gazelle")

# The following directives inform gazelle how to auto-generate BUILD.bazel
# files throughout the repo. By including them here, we can run gazelle through
# `bazel run //:gazelle` instead of invoking gazelle directly. Be sure to
# re-generate BUILD.bazel files if any of the directives below are changed.
#
# gazelle:prefix github.com/cockroachdb/cockroach
# gazelle:build_file_name BUILD.bazel
# gazelle:proto disable_global
# gazelle:exclude c-deps/googletest
# gazelle:exclude c-deps/protobuf
# gazelle:exclude **/zcgo_flags.go
# gazelle:exclude **/zcgo_flags_*.go
# gazelle:exclude **/*.og.go
# gazelle:exclude **/*.eg.go
# gazelle:exclude pkg/sql/parser/sql.go
# gazelle:exclude pkg/sql/opt/rule_name_string.go
# gazelle:resolve go github.com/grpc-ecosystem/grpc-gateway/internal //vendor/github.com/grpc-ecosystem/grpc-gateway/internal

gazelle(
    name = "gazelle",
    prefix = "github.com/cockroachdb/cockroach",
)

# Load the components that lets us use cmake/make in third party deps.
load("@rules_foreign_cc//tools/build_defs:cmake.bzl", "cmake_external")
load("@rules_foreign_cc//tools/build_defs:configure.bzl", "configure_make")

# Build target for libroach.
cmake_external(
    name = "libroach",
    cache_entries = {
        "CMAKE_TARGET_MESSAGES": "OFF",
        "CMAKE_BUILD_TYPE": "Release",
        "CRYPTOPP_LIB": "$EXT_BUILD_DEPS/libcryptopp/lib/libcryptopp.a",
        "JEMALLOC_LIB": "$EXT_BUILD_DEPS/libjemalloc/lib/libjemalloc.a",
        "PROTOBUF_LIB": "$EXT_BUILD_DEPS/libprotobuf/lib/libprotobuf.a",
        "ROCKSDB_LIB": "$EXT_BUILD_DEPS/librocksdb/lib/librocksdb.a",
        "SNAPPY_LIB": "$EXT_BUILD_DEPS/libsnappy/lib/libsnappy.a",
    },
    lib_source = "@libroach//:all",
    make_commands = [
        "make roach",
        "mkdir -p libroach/lib",
        "cp libroach.a libroach/lib/libroach.a",
        "cp -r $EXT_BUILD_ROOT/external/libroach/include libroach",
    ],
    static_libraries = ["libroach.a"],
    tools_deps = [
        "@googletest//:all",
        "@rocksdb//:all",
        "@protobuf//:all",
        "@libroach//:all",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":libcryptopp",
        ":libjemalloc",
        ":libprotobuf",
        ":librocksdb",
        ":libsnappy",
    ],
)

# Build target for libroachccl.
cmake_external(
    name = "libroachccl",
    cache_entries = {
        "CMAKE_TARGET_MESSAGES": "OFF",
        "CMAKE_BUILD_TYPE": "Release",
        "CRYPTOPP_LIB": "$EXT_BUILD_DEPS/libcryptopp/lib/libcryptopp.a",
        "JEMALLOC_LIB": "$EXT_BUILD_DEPS/libjemalloc/lib/libjemalloc.a",
        "PROTOBUF_LIB": "$EXT_BUILD_DEPS/libprotobuf/lib/libprotobuf.a",
        "ROCKSDB_LIB": "$EXT_BUILD_DEPS/librocksdb/lib/librocksdb.a",
        "SNAPPY_LIB": "$EXT_BUILD_DEPS/libsnappy/lib/libsnappy.a",
    },
    lib_source = "@libroach//:all",
    make_commands = [
        "make roachccl",
        "mkdir -p libroachccl/lib",
        "cp libroachccl.a libroachccl/lib/libroachccl.a",
        "cp -r $EXT_BUILD_ROOT/external/libroach/ccl/include libroachccl",
    ],
    static_libraries = ["libroachccl.a"],
    tools_deps = [
        "@googletest//:all",
        "@rocksdb//:all",
        "@protobuf//:all",
        "@libroach//:all",
        "@cryptopp//:all",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":libcryptopp",
        ":libjemalloc",
        ":libprotobuf",
        ":librocksdb",
        ":libsnappy",
    ],
)

# Build targets for libprotobuf and protoc.
cmake_external(
    name = "libprotobuf",
    binaries = ["protoc"],
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "CMAKE_TARGET_MESSAGES": "OFF",
        "protobuf_BUILD_TESTS": "OFF",
    },
    lib_source = "@protobuf//:all",
    static_libraries = ["libprotobuf.a"],
    visibility = ["//visibility:public"],
    working_directory = "cmake",
)

# Build target for librocksdb.
#
# XXX: Due to https://github.com/bazelbuild/rules_foreign_cc/issues/239, we
# elide usage of __DATE__ by hand in RocksDB.
cmake_external(
    name = "librocksdb",
    cache_entries = {
        "CMAKE_TARGET_MESSAGES": "OFF",
        "WITH_GFLAGS": "OFF",
        "SNAPPY_LIBRARIES": "$EXT_BUILD_DEPS/libsnappy/lib/libsnappy.a",
        "SNAPPY_INCLUDE_DIR": "$EXT_BUILD_DEPS/libsnappy/include",
        "WITH_SNAPPY": "ON",
        "JEMALLOC_LIBRARIES": "$EXT_BUILD_DEPS/libjemalloc/lib/libjemalloc.a",
        "JEMALLOC_INCLUDE_DIR": "$EXT_BUILD_DEPS/libjemalloc/include",
        "WITH_JEMALLOC": "ON",
        "CMAKE_BUILD_TYPE": "Release",
        "USE_RTTI": "1",
        "FAIL_ON_WARNINGS": "0",
    },
    env_vars = {
        "CFLAGS": " -msse3",
        "CXXFLAGS": " -msse3",
        "AR": "/usr/bin/ar",
    },
    lib_source = "@rocksdb//:all",
    make_commands = [
        "make rocksdb",
        "mkdir -p librocksdb/lib",
        "cp librocksdb.a librocksdb/lib/librocksdb.a",
        "cp -r $EXT_BUILD_ROOT/external/rocksdb/include librocksdb",
    ],
    static_libraries = ["librocksdb.a"],
    visibility = ["//visibility:public"],
    deps = [
        ":libjemalloc",
        ":libsnappy",
    ],
)

# Build target for libcryptopp.
cmake_external(
    name = "libcryptopp",
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "CMAKE_TARGET_MESSAGES": "OFF",
    },
    lib_source = "@cryptopp//:all",
    static_libraries = ["libcryptopp.a"],
    visibility = ["//visibility:public"],
)

# Build target for libjemalloc.
configure_make(
    name = "libjemalloc",
    autoconf = True,
    configure_env_vars = {
        "AR": "/usr/bin/ar",  # XXX: What happens if this is left empty?
    },
    configure_in_place = True,
    configure_options = [
        "--enable-prof",
    ],
    lib_source = "@jemalloc//:all",
    make_commands = [
        "make build_lib_static",
        "mkdir -p libjemalloc/lib",
        "cp lib/libjemalloc.a libjemalloc/lib",
        "cp -r include libjemalloc",
    ],
    static_libraries = ["libjemalloc.a"],
    visibility = ["//visibility:public"],
)

# Build target for libsnappy.
cmake_external(
    name = "libsnappy",
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "CMAKE_TARGET_MESSAGES": "OFF",
    },
    lib_source = "@snappy//:all",
    static_libraries = ["libsnappy.a"],
    visibility = ["//visibility:public"],
    alwayslink = True,
)

# Build target for libproj.
cmake_external(
    name = "libproj",
    cache_entries = {
        "CMAKE_BUILD_TYPE": "Release",
        "BUILD_LIBPROJ_SHARED": "OFF",
    },
    lib_source = "@proj//:all",
    static_libraries = ["libproj.a"],
    visibility = ["//visibility:public"],
)

# Build target for kerberos.
#
# TODO(irfansharif): Kerboros is not intended for anything other than Linux.
# The following has not been tested as yet.
configure_make(
    name = "libkrb5",
    autoreconf = True,
    configure_command = "src/configure",
    configure_env_vars = {
        "CPFLAGS": "",
        "CXXFLAGS": "",
    },
    configure_options = [
        "--enable-static",
        "--disable-shared",
    ] + select({
        "//conditions:default": ["AR=/usr/bin/ar"],
    }),
    lib_source = "@krb5//:all",
    make_commands = [
        "make",
        "mkdir -p libkrb5/lib",
        "cp libkrb5/libgssapi_krb5.a libkrb5/lib",
    ],
    static_libraries = ["libgssapi_krb5.a"],
    visibility = ["//visibility:public"],
)
