load("@bazel_gazelle//:def.bzl", "gazelle")

# The following directives inform gazelle how to auto-generate BUILD.bazel
# files throughout the repo. By including them here, we can run gazelle using
# `bazel run //:gazelle` instead of invoking gazelle directly.
#
# NB: Be sure to re-generate BUILD.bazel files if any of the directives below
# are changed.

# Define the gazelle prefix and what the autogenerated BUILD files should be
# named as.
#
# gazelle:prefix github.com/cockroachdb/cockroach
# gazelle:build_file_name BUILD.bazel

# We disable protobuf generation for our dependencies.
#
# gazelle:proto package
# gazelle:proto_group go_package
# gazelle:go_proto_compilers //pkg/cmd/protoc-gen-gogoroach:protoc-gen-gogoroach_compiler
# gazelle:go_grpc_compilers //pkg/cmd/protoc-gen-gogoroach:protoc-gen-gogoroach_grpc_compiler

# Gazelle needs the following resolve hints.
#
# gazelle:resolve go github.com/grpc-ecosystem/grpc-gateway/internal //vendor/github.com/grpc-ecosystem/grpc-gateway/internal
# gazelle:resolve go github.com/envoyproxy/protoc-gen-validate/validate //vendor/github.com/envoyproxy/protoc-gen-validate/validate:validate_go_proto
# gazelle:resolve go google.golang.org/genproto/googleapis/api/annotations //vendor/google.golang.org/genproto/googleapis/api/annotations
# gazelle:resolve go google.golang.org/genproto/googleapis/api/httpbody //vendor/google.golang.org/genproto/googleapis/api/httpbody
# gazelle:resolve go google.golang.org/genproto/googleapis/rpc/code //vendor/google.golang.org/genproto/googleapis/rpc/code
# gazelle:resolve go google.golang.org/genproto/googleapis/rpc/status //vendor/google.golang.org/genproto/googleapis/rpc/status
# gazelle:resolve proto errorspb/errors.proto //vendor/github.com/cockroachdb/errors/errorspb:errorspb_proto
# gazelle:resolve proto go errorspb/errors.proto //vendor/github.com/cockroachdb/errors/errorspb
# gazelle:resolve proto gogoproto/gogo.proto //vendor/github.com/gogo/protobuf/gogoproto:gogo_proto
# gazelle:resolve proto go gogoproto/gogo.proto //vendor/github.com/gogo/protobuf/gogoproto
# gazelle:resolve proto etcd/raft/v3/raftpb/raft.proto //vendor/go.etcd.io/etcd/raft/v3/raftpb:raft_proto
# gazelle:resolve proto go etcd/raft/v3/raftpb/raft.proto //vendor/go.etcd.io/etcd/raft/v3/raftpb
# gazelle:resolve go github.com/prometheus/client_model/go //vendor/github.com/prometheus/client_model/go

# See pkg/sql/opt/optgen/cmd/langgen/BUILD.bazel for more details.
#
# gazelle:resolve go github.com/cockroachdb/cockroach/pkg/sql/opt/optgen/lang //pkg/sql/opt/optgen/lang

# We exclude a few things from gazelle consideration:
# - The protobuf C dependency, it's are already bazel-ified, lest we overwrite
#   those build files
# - The artifacts directory
# - All checked-in autogenerated files (they'll get autogenerated on the fly
#   through bazel)
# - A testdata "repo" that looks like a go package, but isn't
#   (testdata/src/example.com)
# - A few auto-generated sql parser files
# - A few vendored dependencies that can't have .pb.go files autogenerated
#   because doing so introduces errors.
#   TODO(ricky): These vendored dependencies complicate things, and trying to
#   have gazelle process them frequently introduces circular dependency errors.
#   Figure out an appropriate long-term solution for these.
#
# gazelle:exclude c-deps/krb5
# gazelle:exclude c-deps/protobuf
# gazelle:exclude artifacts
# gazelle:exclude **/zcgo_flags.go
# gazelle:exclude **/zcgo_flags_*.go
# gazelle:exclude **/*.og.go
# gazelle:exclude **/*.eg.go
# gazelle:exclude pkg/sql/parser/sql.go
# gazelle:exclude pkg/sql/parser/helpmap_test.go
# gazelle:exclude pkg/sql/parser/help_messages.go
# gazelle:exclude pkg/sql/lex/keywords.go
# gazelle:exclude pkg/sql/lex/tokens.go
# gazelle:exclude pkg/sql/lexbase/reserved_keywords.go
# gazelle:exclude pkg/sql/opt/rule_name_string.go
# gazelle:exclude pkg/cmd/prereqs/testdata
# gazelle:exclude vendor/github.com/cockroachdb/errors/**/*.proto
# gazelle:exclude vendor/github.com/gogo/protobuf/**/*.proto
# gazelle:exclude vendor/github.com/grpc-ecosystem/**/*.proto
# gazelle:exclude vendor/go.etcd.io/**/*.proto

# Generally useful references:
#
#   https://docs.bazel.build/versions/master/user-manual.html
#   https://docs.bazel.build/versions/master/guide.html

# TODO(irfansharif): Today we let bazel take over the vendor directory and
# define each vendored dependency as a bazel target. We should be able to have
# bazel ignore all of vendor/ and create those dependencies on the fly.
# Deleting the vendor directory and running `bazel run //:gazelle` shows what
# that would look like (though that doesn't quite work yet).

# TODO(irfansharif): Document a few usage patterns for bazel and how to
# understand all the autogen stuff. Probably as a tech note. Here are a few
# short hands I've used so far:
#
#   bazel test //pkg/kv/kvserver/concurrency/...
#   bazel test //pkg/kv/kvserver:all --test_cache_results=no --test_output=all
#   bazel test --features race //pkg/kv/kvserver/concurrency/... --test_output=all \
#     --test_arg='-test.v' --test_arg='-show-logs' --test_filter='TestBTreeClone.*' \
#     --run_under='stress -maxtime=120s' --cache_test_results=no
#   bazel build //pkg/sql/opt
#   bazel build //pkg/sql/opt:all
#   bazel build //pkg/sql/colexec:gen-exec
#   bazel build //pkg/cmd/cockroach-short
#   bazel build //:libjemalloc
#   bazel query //pkg/sql/colexec:all
#   bazel run //:gazelle
#   bazel run //pkg/cmd/cockroach-short -- demo
#   bazel run //pkg/sql/opt/optgen/cmd/langgen -- -h
#   bazel run //:gazelle -- update-repos -from_file=go.mod -to_macro=DEPS.bzl%go_deps
#
# The //<stuff> names can also be fully qualified using @cockroach, and that
# appears in certain parts of the codebase/elsewhere. Specifically it'll look
# like:
#
#   bazel build @cockroach//pkg/cmd/cockroach-short
#
# TODO(irfansharif): We should define shorthands for all of the above. See
# https://docs.bazel.build/versions/master/skylark/tutorial-custom-verbs.html

# TODO(irfansharif): The way we currently generate code through bazel, that
# code is only available within the bazel sandbox. Bazel ignores all
# the pre-generated code that is already checked into the codebase (through
# `make generate`/etc.) through the exclude directives above. It's generating
# everything on the fly.
#
# As we move towards bazel, we'll want to introduce a mechanism that implants
# the generated code within the sandbox placing them "back into" the
# appropriate packages. This is to ensure we don't break existing IDEs and code
# editors which rely on files existing in the same package itself (as opposed
# to the sandbox). This way we could continue checking in auto-generated code.
# We should provide a bazel alternative for `make generate` that does this very
# same thing. See [1], this is a long standing issue for folks using using Go,
# bazel, and autogenerated code.
#
# [1]: https://github.com/bazelbuild/rules_go/issues/512.

# TODO(irfansharif): We'll need to pin toolchains somewhere to make sure
# everything below works as expected.

gazelle(
    name = "gazelle",
    external = "vendored",
    prefix = "github.com/cockroachdb/cockroach",
)
