// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Bram Gruneir (bram+code@cockroachlabs.com)

syntax = "proto2";
package cockroach.acceptance.testconfig;
option go_package = "testconfig";

import weak "gogoproto/gogo.proto";

// StoreConfig holds the configuration of a collection of similar stores.
message StoreConfig {
  optional int32 count = 1 [(gogoproto.nullable) = false];
// TODO(bram): something for different store sizes here
}

// NodeConfig holds the configuration of a collection of similar nodes.
message NodeConfig {
  optional int32 count = 1 [(gogoproto.nullable) = false];
  repeated StoreConfig stores = 2 [(gogoproto.nullable) = false];
}

message TestConfig {
  repeated NodeConfig nodes = 1 [(gogoproto.nullable) = false];
  optional int64 duration = 2 [(gogoproto.nullable) = false, (gogoproto.casttype) = "time.Duration"];
  optional int64 stall = 3 [(gogoproto.nullable) = false, (gogoproto.casttype) = "time.Duration"];
  optional string name = 4 [(gogoproto.nullable) = false];
// TODO(bram): once defined, add in a collection of chaos agents here.
}
