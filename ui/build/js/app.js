// Generated by tsc.
// source: cockroach/resource/us/ts/...
// DO NOT EDIT!
//
// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Authors: Bram Gruneir (bram+code@cockroachlabs.com)
//          Matt Tracy (matt@cockroachlabs.com)
//
var headerDescription = "This file is designed to add the header to the top of the combined js file.";
// source: util/query.ts
/// <reference path="../external/mithril/mithril.d.ts" />
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    "use strict";
    var Http;
    (function (Http) {
        function Get(url) {
            return m.request({ url: url, method: "GET", extract: nonJsonErrors });
        }
        Http.Get = Get;
        function Post(url, data) {
            return m.request({ url: url, method: "POST", extract: nonJsonErrors, data: data });
        }
        Http.Post = Post;
        function nonJsonErrors(xhr, opts) {
            return xhr.status > 200 ? JSON.stringify(xhr.responseText) : xhr.responseText;
        }
    })(Http = Utils.Http || (Utils.Http = {}));
})(Utils || (Utils = {}));
// source: util/property.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    "use strict";
    function Prop(initial) {
        var obj = initial;
        var epoch = 0;
        var propFn = function (value) {
            if (value === undefined) {
                return obj;
            }
            obj = value;
            epoch++;
            return obj;
        };
        propFn.Epoch = function () { return epoch; };
        propFn.Update = function () { epoch++; };
        return propFn;
    }
    Utils.Prop = Prop;
    function Computed() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        var obj = null;
        var lastProcessedEpoch = -1;
        var fn = args.pop();
        var parentProps = args;
        var epochFn = function () {
            var sum = 0;
            parentProps.forEach(function (p) { return sum += p.Epoch(); });
            return sum;
        };
        var propFn = function (value) {
            var epoch = epochFn();
            if (epoch > lastProcessedEpoch) {
                var values = parentProps.map(function (p) { return p(); });
                obj = fn.apply(this, values);
                lastProcessedEpoch = epoch;
            }
            return obj;
        };
        propFn.Epoch = epochFn;
        return propFn;
    }
    Utils.Computed = Computed;
})(Utils || (Utils = {}));
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../util/property.ts" />
var Utils;
(function (Utils) {
    "use strict";
    var QueryCache = (function () {
        function QueryCache(_query, dontRefresh) {
            this._query = _query;
            this._result = Utils.Prop(null);
            this._error = Utils.Prop(null);
            this._inFlight = false;
            this.result = this._result;
            this.error = this._error;
            if (!dontRefresh) {
                this.refresh();
            }
        }
        QueryCache.prototype.refresh = function () {
            var _this = this;
            if (this._inFlight) {
                return;
            }
            this._inFlight = true;
            this._query().then(function (obj) {
                _this._error(null);
                _this._inFlight = false;
                return _this._result(obj);
            }, function (err) {
                _this._result(null);
                _this._inFlight = false;
                return _this._error(err);
            });
        };
        QueryCache.prototype.hasData = function () {
            return this.result.Epoch() > 0 || this.error.Epoch() > 0;
        };
        return QueryCache;
    })();
    Utils.QueryCache = QueryCache;
})(Utils || (Utils = {}));
// source: models/proto.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
var Models;
(function (Models) {
    "use strict";
    var Proto;
    (function (Proto) {
        function NewMVCCStats() {
            return {
                live_bytes: 0,
                key_bytes: 0,
                val_bytes: 0,
                intent_bytes: 0,
                live_count: 0,
                key_count: 0,
                val_count: 0,
                intent_count: 0,
                intent_age: 0,
                gc_bytes_age: 0,
                sys_bytes: 0,
                sys_count: 0,
                last_update_nanos: 0
            };
        }
        Proto.NewMVCCStats = NewMVCCStats;
        function AccumulateMVCCStats(dest, src) {
            dest.live_bytes += src.live_bytes;
            dest.key_bytes += src.key_bytes;
            dest.val_bytes += src.val_bytes;
            dest.intent_bytes += src.intent_bytes;
            dest.live_count += src.live_count;
            dest.key_count += src.key_count;
            dest.val_count += src.val_count;
            dest.intent_count += src.intent_count;
            dest.intent_age += src.intent_age;
            dest.gc_bytes_age += src.gc_bytes_age;
            dest.sys_bytes += src.sys_bytes;
            dest.sys_count += src.sys_count;
            dest.last_update_nanos = Math.max(dest.last_update_nanos, src.last_update_nanos);
        }
        Proto.AccumulateMVCCStats = AccumulateMVCCStats;
        function AccumulateStatus(dest, src) {
            dest.range_count += src.range_count;
            dest.leader_range_count += src.leader_range_count;
            dest.replicated_range_count += src.replicated_range_count;
            dest.available_range_count += src.available_range_count;
            dest.updated_at = Math.max(dest.updated_at, src.updated_at);
            AccumulateMVCCStats(dest.stats, src.stats);
        }
        Proto.AccumulateStatus = AccumulateStatus;
        (function (QueryAggregator) {
            QueryAggregator[QueryAggregator["AVG"] = 1] = "AVG";
            QueryAggregator[QueryAggregator["AVG_RATE"] = 2] = "AVG_RATE";
        })(Proto.QueryAggregator || (Proto.QueryAggregator = {}));
        var QueryAggregator = Proto.QueryAggregator;
    })(Proto = Models.Proto || (Models.Proto = {}));
})(Models || (Models = {}));
// source: models/status.ts
/// <reference path="../../typescript_definitions/lodash/lodash.d.ts" />
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../util/http.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="proto.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
// Author: Matt Tracy (matt@cockroachlabs.com)
var Models;
(function (Models) {
    "use strict";
    var Status;
    (function (Status) {
        var Stores = (function () {
            function Stores() {
                this._data = new Utils.QueryCache(function () {
                    return Utils.Http.Get("http://localhost:8080/_status/stores/")
                        .then(function (results) {
                        return results.d;
                    });
                });
                this._dataMap = Utils.Computed(this._data.result, function (list) {
                    return _.indexBy(list, function (status) { return status.desc.node.node_id; });
                });
                this._totalStatus = Utils.Computed(this._data.result, function (list) {
                    var status = {
                        range_count: 0,
                        updated_at: 0,
                        started_at: 0,
                        leader_range_count: 0,
                        replicated_range_count: 0,
                        available_range_count: 0,
                        stats: Models.Proto.NewMVCCStats()
                    };
                    list.forEach(function (storeStatus) {
                        Models.Proto.AccumulateStatus(status, storeStatus);
                    });
                    return status;
                });
                this.allStatuses = this._data.result;
                this.totalStatus = this._totalStatus;
            }
            Stores.prototype.GetStatus = function (storeId) {
                return this._dataMap()[storeId];
            };
            Stores.prototype.refresh = function () {
                this._data.refresh();
            };
            return Stores;
        })();
        Status.Stores = Stores;
        var Nodes = (function () {
            function Nodes() {
                this._data = new Utils.QueryCache(function () {
                    return Utils.Http.Get("http://localhost:8080/_status/nodes/")
                        .then(function (results) {
                        return results.d;
                    });
                });
                this._dataMap = Utils.Computed(this._data.result, function (list) {
                    return _.indexBy(list, function (status) { return status.desc.node_id; });
                });
                this._totalStatus = Utils.Computed(this._data.result, function (list) {
                    var status = {
                        range_count: 0,
                        updated_at: 0,
                        started_at: 0,
                        leader_range_count: 0,
                        replicated_range_count: 0,
                        available_range_count: 0,
                        stats: Models.Proto.NewMVCCStats()
                    };
                    list.forEach(function (nodeStatus) {
                        Models.Proto.AccumulateStatus(status, nodeStatus);
                    });
                    return status;
                });
                this.allStatuses = this._data.result;
                this.totalStatus = this._totalStatus;
            }
            Nodes.prototype.GetStatus = function (nodeId) {
                return this._dataMap()[nodeId];
            };
            Nodes.prototype.refresh = function () {
                this._data.refresh();
            };
            return Nodes;
        })();
        Status.Nodes = Nodes;
    })(Status = Models.Status || (Models.Status = {}));
})(Models || (Models = {}));
// source: util/types.ts
/// <reference path="../external/mithril/mithril.d.ts" />
// Author: Max Lang (max@cockroachlabs.com)
//
// source: util/chainprop.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    "use strict";
    function ChainProp(_this, val) {
        var obj = val;
        return function (value) {
            if (value === undefined) {
                return obj;
            }
            obj = value;
            return _this;
        };
    }
    Utils.ChainProp = ChainProp;
})(Utils || (Utils = {}));
// source: util/convert.ts
// Author: Matt Tracy (matt@cockroachlabs.com)
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
var Utils;
(function (Utils) {
    "use strict";
    var Convert;
    (function (Convert) {
        function MilliToNano(millis) {
            return millis * 1.0e6;
        }
        Convert.MilliToNano = MilliToNano;
        function NanoToMilli(nano) {
            return nano / 1.0e6;
        }
        Convert.NanoToMilli = NanoToMilli;
    })(Convert = Utils.Convert || (Utils.Convert = {}));
})(Utils || (Utils = {}));
// source: models/metrics.ts
/// <reference path="proto.ts" />
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../util/chainprop.ts" />
/// <reference path="../util/convert.ts" />
/// <reference path="../util/http.ts" />
/// <reference path="../util/querycache.ts" />
// Author: Matt Tracy (matt@cockroachlabs.com)
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Models;
(function (Models) {
    "use strict";
    var Metrics;
    (function (Metrics) {
        function QueryInfoKey(qi) {
            return Models.Proto.QueryAggregator[qi.aggregator] + ":" + qi.name;
        }
        Metrics.QueryInfoKey = QueryInfoKey;
        var QueryInfoSet = (function () {
            function QueryInfoSet() {
                this._set = {};
            }
            QueryInfoSet.prototype.add = function (qi) {
                var key = QueryInfoKey(qi);
                this._set[key] = qi;
            };
            QueryInfoSet.prototype.get = function (key) {
                return this._set[key];
            };
            QueryInfoSet.prototype.forEach = function (fn) {
                var keys = Object.keys(this._set);
                for (var i = 0; i < keys.length; i++) {
                    fn(this._set[keys[i]]);
                }
            };
            return QueryInfoSet;
        })();
        Metrics.QueryInfoSet = QueryInfoSet;
        var Select;
        (function (Select) {
            var AvgSelector = (function () {
                function AvgSelector(seriesName) {
                    var _this = this;
                    this.seriesName = seriesName;
                    this.title = Utils.ChainProp(this, this.seriesName);
                    this.series = function () { return _this.seriesName; };
                    this.request = function () {
                        return {
                            name: _this.seriesName,
                            aggregator: Models.Proto.QueryAggregator.AVG
                        };
                    };
                }
                return AvgSelector;
            })();
            var AvgRateSelector = (function () {
                function AvgRateSelector(seriesName) {
                    var _this = this;
                    this.seriesName = seriesName;
                    this.title = Utils.ChainProp(this, this.seriesName);
                    this.series = function () { return _this.seriesName; };
                    this.request = function () {
                        return {
                            name: _this.seriesName,
                            aggregator: Models.Proto.QueryAggregator.AVG_RATE
                        };
                    };
                }
                return AvgRateSelector;
            })();
            function Avg(series) {
                return new AvgSelector(series);
            }
            Select.Avg = Avg;
            function AvgRate(series) {
                return new AvgRateSelector(series);
            }
            Select.AvgRate = AvgRate;
        })(Select = Metrics.Select || (Metrics.Select = {}));
        var Time;
        (function (Time) {
            function Recent(duration) {
                return {
                    timespan: function () {
                        var endTime = new Date();
                        var startTime = new Date(endTime.getTime() - duration);
                        return [startTime.getTime(), endTime.getTime()];
                    }
                };
            }
            Time.Recent = Recent;
        })(Time = Metrics.Time || (Metrics.Time = {}));
        var Axis = (function () {
            function Axis() {
                this.label = Utils.ChainProp(this, null);
                this.format = Utils.ChainProp(this, null);
                this.selectors = Utils.ChainProp(this, []);
            }
            Axis.prototype.title = function () {
                var selectors = this.selectors();
                if (selectors.length === 0) {
                    return "No series selected.";
                }
                return selectors.map(function (s) { return s.title(); }).join(" vs. ");
            };
            return Axis;
        })();
        Metrics.Axis = Axis;
        function NewAxis() {
            var selectors = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                selectors[_i - 0] = arguments[_i];
            }
            return new Axis().selectors(selectors);
        }
        Metrics.NewAxis = NewAxis;
        var Query = (function () {
            function Query() {
                var _this = this;
                this.timespan = Utils.ChainProp(this, Time.Recent(10 * 60 * 1000));
                this.title = Utils.ChainProp(this, "Query Title");
                this.selectors = Utils.ChainProp(this, []);
                this.execute = function () {
                    var ts = _this.timespan().timespan();
                    var req = {
                        start_nanos: Utils.Convert.MilliToNano(ts[0]),
                        end_nanos: Utils.Convert.MilliToNano(ts[1]),
                        queries: []
                    };
                    var requestSet = new QueryInfoSet();
                    _this.selectors().forEach(function (s) {
                        requestSet.add(s.request());
                    });
                    requestSet.forEach(function (qr) {
                        req.queries.push(qr);
                    });
                    return Query.dispatch_query(req);
                };
            }
            Query.dispatch_query = function (q) {
                return Utils.Http.Post("/ts/query", q)
                    .then(function (d) {
                    if (!d.results) {
                        d.results = [];
                    }
                    var result = new QueryInfoSet();
                    d.results.forEach(function (r) {
                        if (!r.datapoints) {
                            r.datapoints = [];
                        }
                        result.add(r);
                    });
                    return result;
                });
            };
            return Query;
        })();
        Metrics.Query = Query;
        function NewQuery() {
            var selectors = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                selectors[_i - 0] = arguments[_i];
            }
            return new Query().selectors(selectors);
        }
        Metrics.NewQuery = NewQuery;
        var Executor = (function (_super) {
            __extends(Executor, _super);
            function Executor(q) {
                var _this = this;
                _super.call(this, q.execute);
                this.query = function () {
                    return _this._metricquery;
                };
                this._metricquery = q;
            }
            return Executor;
        })(Utils.QueryCache);
        Metrics.Executor = Executor;
    })(Metrics = Models.Metrics || (Models.Metrics = {}));
})(Models || (Models = {}));
// source: components/metrics.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../../typescript_definitions/d3/d3.d.ts" />
/// <reference path="../util/types.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="../models/metrics.ts" />
var Components;
(function (Components) {
    "use strict";
    var Metrics;
    (function (Metrics) {
        var LineGraph;
        (function (LineGraph) {
            var Controller = (function () {
                function Controller(vm) {
                    var _this = this;
                    this.vm = vm;
                    this.chart = nv.models.lineChart()
                        .x(function (d) { return new Date(d.timestamp_nanos / 1.0e6); })
                        .y(function (d) { return d.value; })
                        .useInteractiveGuideline(true)
                        .showLegend(true)
                        .showYAxis(true)
                        .showXAxis(true)
                        .xScale(d3.time.scale());
                    this.drawGraph = function (element, isInitialized, context) {
                        if (!isInitialized) {
                            nv.addGraph(_this.chart);
                        }
                        var shouldRender = !context.epoch || context.epoch < _this.vm.query.result.Epoch();
                        if (shouldRender) {
                            _this.chart.showLegend(_this.vm.axis.selectors().length > 1);
                            var formattedData = [];
                            var qresult = _this.vm.query.result();
                            if (qresult) {
                                _this.vm.axis.selectors().forEach(function (s) {
                                    var key = Models.Metrics.QueryInfoKey(s.request());
                                    var result = qresult.get(key);
                                    if (result) {
                                        formattedData.push({
                                            values: result.datapoints,
                                            key: s.title(),
                                            color: Controller.colors(s.series()),
                                            area: true,
                                            fillOpacity: .1
                                        });
                                    }
                                });
                            }
                            d3.select(element)
                                .datum(formattedData)
                                .transition().duration(500)
                                .call(_this.chart);
                        }
                        context.epoch = _this.vm.query.result.Epoch();
                    };
                    this.chart.xAxis
                        .tickFormat(d3.time.format("%H:%M:%S"))
                        .showMaxMin(false);
                    this.chart.yAxis
                        .axisLabel(vm.axis.label())
                        .showMaxMin(false);
                    if (vm.axis.format()) {
                        this.chart.yAxis.tickFormat(vm.axis.format());
                    }
                }
                Controller.prototype.hasData = function () {
                    return this.vm.query.result.Epoch() > 0;
                };
                Controller.colors = d3.scale.category10();
                return Controller;
            })();
            function controller(model) {
                return new Controller(model);
            }
            LineGraph.controller = controller;
            function view(ctrl) {
                if (ctrl.hasData()) {
                    return m(".linegraph", { style: "width:500px;height:300px;" }, m("svg.graph", { config: ctrl.drawGraph }));
                }
                else {
                    return m("", "loading...");
                }
            }
            LineGraph.view = view;
            function create(query, axis, key) {
                var vm = { query: query, axis: axis };
                if (key) {
                    vm.key = key;
                }
                return m.component(LineGraph, vm);
            }
            LineGraph.create = create;
        })(LineGraph = Metrics.LineGraph || (Metrics.LineGraph = {}));
    })(Metrics = Components.Metrics || (Components.Metrics = {}));
})(Components || (Components = {}));
// source: pages/nodes.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../../typescript_definitions/lodash/lodash.d.ts" />
/// <reference path="../util/property.ts" />
var Components;
(function (Components) {
    "use strict";
    var NavigationBar;
    (function (NavigationBar) {
        function controller(ts) { }
        NavigationBar.controller = controller;
        function view(ctrl, ts) {
            return m("ul.navigation", _.map(ts.targets(), function (t) {
                return m("li", {
                    className: ts.isActive(t) ? "active" : ""
                }, m("a", {
                    config: m.route,
                    href: ts.baseRoute + t.route
                }, t.title));
            }));
        }
        NavigationBar.view = view;
    })(NavigationBar = Components.NavigationBar || (Components.NavigationBar = {}));
})(Components || (Components = {}));
// source: pages/nodes.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../models/status.ts" />
/// <reference path="../components/metrics.ts" />
/// <reference path="../components/navbar.ts" />
/// <reference path="../util/property.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var SubModules;
    (function (SubModules) {
        var TitleBar;
        (function (TitleBar) {
            var NavigationBar = Components.NavigationBar;
            var Controller = (function () {
                function Controller() {
                }
                Controller.prototype.TargetSet = function () {
                    return {
                        baseRoute: "",
                        targets: Utils.Prop(Controller.defaultTargets),
                        isActive: Controller.isActive
                    };
                };
                ;
                Controller.defaultTargets = [
                    {
                        title: "Nodes",
                        route: "/nodes"
                    },
                    {
                        title: "Stores",
                        route: "/stores"
                    }
                ];
                Controller.isActive = function (t) {
                    var currentRoute = m.route();
                    return _.startsWith(currentRoute, t.route);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            TitleBar.controller = controller;
            function view(ctrl) {
                return m("header", m.component(NavigationBar, ctrl.TargetSet()));
            }
            TitleBar.view = view;
        })(TitleBar = SubModules.TitleBar || (SubModules.TitleBar = {}));
    })(SubModules = AdminViews.SubModules || (AdminViews.SubModules = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/graph.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../../typescript_definitions/d3/d3.d.ts" />
/// <reference path="../util/querycache.ts" />
/// <reference path="../components/metrics.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var Graph;
    (function (Graph) {
        var Page;
        (function (Page) {
            var Metrics = Models.Metrics;
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.timespan = Metrics.Time.Recent(10 * 60 * 1000);
                    this.toggleGraph = function () {
                        _this.showRates = !_this.showRates;
                        if (_this.showRates) {
                            _this.axis.selectors([_this.successRate, _this.errorRate])
                                .label("Count / 10sec");
                        }
                        else {
                            _this.axis.selectors([_this.successCount, _this.errorCount])
                                .label("Count");
                        }
                    };
                    this.successCount = Metrics.Select.Avg("cr.node.calls.success.1")
                        .title("Successful calls");
                    this.errorCount = Metrics.Select.Avg("cr.node.calls.error.1")
                        .title("Error calls");
                    this.successRate = Metrics.Select.AvgRate("cr.node.calls.success.1")
                        .title("Successful call rate");
                    this.errorRate = Metrics.Select.AvgRate("cr.node.calls.error.1")
                        .title("Error call rate");
                    this.query = Metrics.NewQuery(this.successCount, this.errorCount, this.successRate, this.errorRate)
                        .timespan(this.timespan);
                    this.manager = new Metrics.Executor(this.query);
                    this.axis = Metrics.NewAxis(this.successCount, this.errorCount)
                        .label("Count");
                    this.manager.refresh();
                    this.interval = setInterval(function () { return _this.manager.refresh(); }, 10000);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this.interval);
                };
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            Page.controller = controller;
            function view(ctrl) {
                var buttonText;
                if (ctrl.showRates) {
                    buttonText = "Show Totals";
                }
                else {
                    buttonText = "Show Rates";
                }
                return m(".graphPage", [
                    m("H3", "Graph Demo"),
                    Components.Metrics.LineGraph.create(ctrl.manager, ctrl.axis),
                    Components.Metrics.LineGraph.create(ctrl.manager, ctrl.axis),
                    m("", m("input[type=button]", {
                        value: buttonText,
                        onclick: ctrl.toggleGraph
                    })),
                ]);
            }
            Page.view = view;
        })(Page = Graph.Page || (Graph.Page = {}));
    })(Graph = AdminViews.Graph || (AdminViews.Graph = {}));
})(AdminViews || (AdminViews = {}));
// source: components/select.ts
/// <reference path="../external/mithril/mithril.d.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
//
var Components;
(function (Components) {
    "use strict";
    var Select;
    (function (Select) {
        function controller(options) {
            return options;
        }
        Select.controller = controller;
        function view(ctrl) {
            return m("select", { onchange: m.withAttr("value", ctrl.onChange) }, [
                ctrl.items.map(function (item) {
                    return m("option", { value: item.value, selected: (item.value === ctrl.value()) }, item.text);
                })
            ]);
        }
        Select.view = view;
    })(Select = Components.Select || (Components.Select = {}));
})(Components || (Components = {}));
// source: components/table.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../../typescript_definitions/lodash/lodash.d.ts" />
/// <reference path="../util/property.ts" />
// Author: Matt Tracy (matt@cockroachlabs.com)
var Components;
(function (Components) {
    "use strict";
    var Table;
    (function (Table) {
        var Controller = (function () {
            function Controller(data) {
                this._sortColumn = Utils.Prop(null);
                this._sortAscend = Utils.Prop(false);
                this.data = data;
                this.sortedRows = Utils.Computed(data.rows, this._sortColumn, this._sortAscend, function (rows, sortCol, asc) {
                    var result = _(rows);
                    if (sortCol && sortCol.sortable) {
                        if (sortCol.sortValue) {
                            result = result.sortBy(sortCol.sortValue);
                        }
                        else {
                            result = result.sortBy(sortCol.view);
                        }
                        if (asc) {
                            result = result.reverse();
                        }
                    }
                    return result.value();
                });
            }
            ;
            Controller.prototype.SetSortColumn = function (col) {
                if (!col.sortable) {
                    return;
                }
                if (this._sortColumn() !== col) {
                    this._sortColumn(col);
                    this._sortAscend(false);
                }
                else {
                    this._sortAscend(!this._sortAscend());
                }
            };
            Controller.prototype.IsSortColumn = function (col) {
                return this._sortColumn() === col;
            };
            Controller.prototype.RenderHeaders = function () {
                var _this = this;
                var cols = this.data.columns();
                var sortClass = "sorted" + (this._sortAscend() ? " ascending" : "");
                var renderedCols = cols.map(function (col) {
                    return m("th", {
                        onclick: function (e) { return _this.SetSortColumn(col); },
                        className: _this.IsSortColumn(col) ? sortClass : ""
                    }, col.title);
                });
                return m("tr", renderedCols);
            };
            Controller.prototype.RenderRows = function () {
                var _this = this;
                var cols = this.data.columns();
                var rows = this.sortedRows();
                var renderedRows = _.map(rows, function (row) {
                    var renderedCols = cols.map(function (col) {
                        return m("td", {
                            className: _this.IsSortColumn(col) ? "sorted" : ""
                        }, col.view(row));
                    });
                    return m("tr", renderedCols);
                });
                return renderedRows;
            };
            return Controller;
        })();
        function controller(data) {
            return new Controller(data);
        }
        Table.controller = controller;
        function view(ctrl) {
            return m("table", [
                ctrl.RenderHeaders(),
                ctrl.RenderRows(),
            ]);
        }
        Table.view = view;
        function create(data) {
            return m.component(Table, data);
        }
        Table.create = create;
    })(Table = Components.Table || (Components.Table = {}));
})(Components || (Components = {}));
// source: util/format.ts
/// <reference path="../../typescript_definitions/d3/d3.d.ts" />
/// <reference path="../models/proto.ts" />
/// <reference path="../util/convert.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
// Author: Matt Tracy (matt@cockroachlabs.com)
var Utils;
(function (Utils) {
    "use strict";
    var Format;
    (function (Format) {
        var _datetimeFormatter = d3.time.format("%Y-%m-%d %H:%M:%S");
        function Date(datetime) {
            return _datetimeFormatter(datetime);
        }
        Format.Date = Date;
        ;
        var Severities;
        (function (Severities) {
            Severities[Severities["INFO"] = 0] = "INFO";
            Severities[Severities["WARNING"] = 1] = "WARNING";
            Severities[Severities["ERROR"] = 2] = "ERROR";
            Severities[Severities["FATAL"] = 3] = "FATAL";
        })(Severities || (Severities = {}));
        ;
        function Severity(severity) {
            return Severities[severity];
        }
        Format.Severity = Severity;
        ;
        var _messageTags = new RegExp("%s|%d|%v|%+v", "gi");
        function LogEntryMessage(entry) {
            var i = -1;
            if ((entry.format.length === 0) && (entry.args.length === 1)) {
                entry.format = "%s";
            }
            return entry.format.replace(_messageTags, function () {
                i++;
                if (entry.args.length > i) {
                    return entry.args[i].str;
                }
                else {
                    return "";
                }
            });
        }
        Format.LogEntryMessage = LogEntryMessage;
        ;
        var kibi = 1024;
        var units = ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"];
        function Bytes(bytes) {
            if (Math.abs(bytes) < kibi) {
                return bytes + " B";
            }
            var u = -1;
            do {
                bytes /= kibi;
                ++u;
            } while (Math.abs(bytes) >= kibi && u < units.length - 1);
            return bytes.toFixed(1) + " " + units[u];
        }
        Format.Bytes = Bytes;
        function Percentage(numerator, denominator) {
            if (denominator === 0) {
                return "100%";
            }
            return Math.floor(numerator / denominator * 100).toString() + "%";
        }
        Format.Percentage = Percentage;
    })(Format = Utils.Format || (Utils.Format = {}));
})(Utils || (Utils = {}));
// source: models/log.ts
/// <reference path="../models/proto.ts" />
/// <reference path="../../typescript_definitions/d3/d3.d.ts" />
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../util/chainprop.ts" />
/// <reference path="../util/format.ts" />
/// <reference path="../util/querycache.ts" />
// Author: Bram Gruneir (bram+code@cockroachlabs.com)
var Models;
(function (Models) {
    "use strict";
    var Log;
    (function (Log) {
        var Entries = (function () {
            function Entries() {
                var _this = this;
                this.startTime = m.prop(null);
                this.endTime = m.prop(null);
                this.max = m.prop(null);
                this.level = m.prop(null);
                this.pattern = m.prop(null);
                this.node = m.prop(null);
                this.refresh = function () {
                    _this._data.refresh();
                };
                this.result = function () {
                    return _this._data.result();
                };
                this.nodeName = function () {
                    if ((_this.node() != null) && (_this.node() !== "local")) {
                        return _this.node();
                    }
                    return "Local";
                };
                this._data = new Utils.QueryCache(function () {
                    return m.request({ url: _this._url(), method: "GET", extract: nonJsonErrors })
                        .then(function (results) {
                        return results.d;
                    });
                }, true);
                this.level(Utils.Format.Severity(2));
                this.allEntries = this._data.result;
            }
            Entries.prototype.getURL = function () {
                var url = "/logs/";
                if (this.node() != null) {
                    url += encodeURIComponent(this.node());
                }
                else {
                    url += "local";
                }
                return url;
            };
            Entries.prototype.getParams = function () {
                var params = {
                    level: this.level(),
                    startTime: this.startTime(),
                    endTime: this.endTime(),
                    max: this.max(),
                    pattern: this.pattern()
                };
                var keys = Object.keys(params);
                for (var i = 0; i < keys.length; i++) {
                    if (!params[keys[i]]) {
                        delete params[keys[i]];
                    }
                }
                return params;
            };
            Entries.prototype._url = function () {
                return "http://localhost:8080/_status" + this.getURL() + "?" + m.route.buildQueryString(this.getParams());
            };
            return Entries;
        })();
        Log.Entries = Entries;
        function nonJsonErrors(xhr, opts) {
            return xhr.status > 200 ? JSON.stringify(xhr.responseText) : xhr.responseText;
        }
    })(Log = Models.Log || (Models.Log = {}));
})(Models || (Models = {}));
// source: pages/log.ts
/// <reference path="../components/select.ts" />
/// <reference path="../components/table.ts" />
/// <reference path="../models/log.ts" />
/// <reference path="../models/proto.ts" />
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../util/format.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var Log;
    (function (Log) {
        var entries;
        var Page;
        (function (Page) {
            var Controller = (function () {
                function Controller() {
                    var _this = this;
                    this.columns = Utils.Prop(Controller.comparisonColumns);
                    entries = new Models.Log.Entries();
                    entries.node(m.route.param("node_id") || null);
                    entries.level(m.route.param("level") || Utils.Format.Severity(2));
                    entries.max(parseInt(m.route.param("max"), 10) || null);
                    entries.startTime(parseInt(m.route.param("startTime"), 10) || null);
                    entries.endTime(parseInt(m.route.param("endTime"), 10) || null);
                    entries.pattern(m.route.param("pattern") || null);
                    this._Refresh();
                    this._interval = setInterval(function () { return _this._Refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller.prototype._Refresh = function () {
                    entries.refresh();
                };
                Controller.comparisonColumns = [
                    {
                        title: "Time",
                        view: function (entry) {
                            var date = new Date(Utils.Convert.NanoToMilli(entry.time));
                            return Utils.Format.Date(date);
                        },
                        sortable: true
                    },
                    {
                        title: "Severity",
                        view: function (entry) { return Utils.Format.Severity(entry.severity); }
                    },
                    {
                        title: "Message",
                        view: function (entry) { return Utils.Format.LogEntryMessage(entry); }
                    },
                    {
                        title: "Node",
                        view: function (entry) { return entry.node_id ? entry.node_id.toString() : ""; },
                        sortable: true,
                        sortValue: function (entry) { return entry.node_id; }
                    },
                    {
                        title: "Store",
                        view: function (entry) { return entry.store_id ? entry.store_id.toString() : ""; },
                        sortable: true,
                        sortValue: function (entry) { return entry.store_id; }
                    },
                    {
                        title: "Range",
                        view: function (entry) { return entry.range_id ? entry.range_id.toString() : ""; },
                        sortable: true,
                        sortValue: function (entry) { return entry.range_id; }
                    },
                    {
                        title: "Key",
                        view: function (entry) { return entry.key; },
                        sortable: true
                    },
                    {
                        title: "File:Line",
                        view: function (entry) { return entry.file + ":" + entry.line; },
                        sortable: true
                    },
                    {
                        title: "Method",
                        view: function (entry) { return entry.method ? entry.method.toString() : ""; },
                        sortable: true,
                        sortValue: function (entry) { return entry.method; }
                    }
                ];
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            ;
            function controller() {
                return new Controller();
            }
            Page.controller = controller;
            ;
            var _severitySelectOptions = [
                { value: Utils.Format.Severity(0), text: ">= " + Utils.Format.Severity(0) },
                { value: Utils.Format.Severity(1), text: ">= " + Utils.Format.Severity(1) },
                { value: Utils.Format.Severity(2), text: ">= " + Utils.Format.Severity(2) },
                { value: Utils.Format.Severity(3), text: Utils.Format.Severity(3) },
            ];
            function onChangeSeverity(val) {
                entries.level(val);
                m.route(entries.getURL(), entries.getParams());
            }
            ;
            function onChangeMax(val) {
                var result = parseInt(val, 10);
                if (result > 0) {
                    entries.max(result);
                }
                else {
                    entries.max(null);
                }
                m.route(entries.getURL(), entries.getParams());
            }
            function onChangePattern(val) {
                entries.pattern(val);
                m.route(entries.getURL(), entries.getParams());
            }
            function view(ctrl) {
                var comparisonData = {
                    columns: ctrl.columns,
                    rows: entries.allEntries
                };
                var count;
                if (entries.allEntries()) {
                    count = entries.allEntries().length;
                }
                else {
                    count = 0;
                }
                return m("div", [
                    m("h2", "Node " + entries.nodeName() + " Log"),
                    m("form", [
                        m.trust("Severity: "),
                        m.component(Components.Select, {
                            items: _severitySelectOptions,
                            value: entries.level,
                            onChange: onChangeSeverity
                        }),
                        m.trust("&nbsp;&nbsp;Max Results: "),
                        m("input", { onchange: m.withAttr("value", onChangeMax), value: entries.max() }),
                        m.trust("&nbsp;&nbsp;Regex Filter: "),
                        m("input", { onchange: m.withAttr("value", onChangePattern), value: entries.pattern() })
                    ]),
                    m("p", count + " log entries retrieved"),
                    m(".stats-table", Components.Table.create(comparisonData))
                ]);
            }
            Page.view = view;
            ;
        })(Page = Log.Page || (Log.Page = {}));
    })(Log = AdminViews.Log || (AdminViews.Log = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/monitor.ts
/// <reference path="../external/mithril/mithril.d.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var Monitor;
    (function (Monitor) {
        var Page;
        (function (Page) {
            function controller() { }
            Page.controller = controller;
            function view() {
                return m("h3", "Monitor Placeholder");
            }
            Page.view = view;
        })(Page = Monitor.Page || (Monitor.Page = {}));
    })(Monitor = AdminViews.Monitor || (AdminViews.Monitor = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/nodes.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../models/status.ts" />
/// <reference path="../components/metrics.ts" />
/// <reference path="../components/table.ts" />
/// <reference path="../components/navbar.ts" />
/// <reference path="../util/format.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var Nodes;
    (function (Nodes) {
        var Metrics = Models.Metrics;
        var nodeStatuses = new Models.Status.Nodes();
        function _nodeMetric(nodeId, metric) {
            return "cr.node." + metric + "." + nodeId;
        }
        var NodesPage;
        (function (NodesPage) {
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this.columns = Utils.Prop(Controller.comparisonColumns);
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller.prototype.RenderPrimaryStats = function () {
                    var allStats = nodeStatuses.totalStatus();
                    if (allStats) {
                        return m(".primary-stats", [
                            m(".stat", [
                                m("span.title", "Total Ranges"),
                                m("span.value", allStats.range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Total Live Bytes"),
                                m("span.value", Utils.Format.Bytes(allStats.stats.live_bytes))
                            ]),
                            m(".stat", [
                                m("span.title", "Leader Ranges"),
                                m("span.value", allStats.leader_range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Available"),
                                m("span.value", Utils.Format.Percentage(allStats.available_range_count, allStats.leader_range_count))
                            ]),
                            m(".stat", [
                                m("span.title", "Fully Replicated"),
                                m("span.value", Utils.Format.Percentage(allStats.replicated_range_count, allStats.leader_range_count))
                            ])
                        ]);
                    }
                    return m(".primary-stats");
                };
                Controller.prototype._refresh = function () {
                    nodeStatuses.refresh();
                };
                Controller.comparisonColumns = [
                    {
                        title: "Node ID",
                        view: function (status) {
                            return m("a", { href: "/nodes/" + status.desc.node_id, config: m.route }, status.desc.node_id.toString());
                        },
                        sortable: true,
                        sortValue: function (status) { return status.desc.node_id; }
                    },
                    {
                        title: "Address",
                        view: function (status) { return status.desc.address.address; },
                        sortable: true
                    },
                    {
                        title: "Started At",
                        view: function (status) {
                            var date = new Date(Utils.Convert.NanoToMilli(status.started_at));
                            return Utils.Format.Date(date);
                        },
                        sortable: true
                    },
                    {
                        title: "Live Bytes",
                        view: function (status) { return Utils.Format.Bytes(status.stats.live_bytes); },
                        sortable: true,
                        sortValue: function (status) { return status.stats.live_bytes; }
                    },
                    {
                        title: "Logs",
                        view: function (status) {
                            return m("a", { href: "/logs/" + status.desc.node_id, config: m.route }, "Log");
                        }
                    }
                ];
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            NodesPage.controller = controller;
            function view(ctrl) {
                var comparisonData = {
                    columns: ctrl.columns,
                    rows: nodeStatuses.allStatuses
                };
                return m(".page", [
                    m(".section.primary", m("h2", "Nodes Overview")),
                    m(".section.primary", ctrl.RenderPrimaryStats()),
                    m(".section", m(".stats-table", Components.Table.create(comparisonData)))
                ]);
            }
            NodesPage.view = view;
        })(NodesPage = Nodes.NodesPage || (Nodes.NodesPage = {}));
        var NodePage;
        (function (NodePage) {
            var NavigationBar = Components.NavigationBar;
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this.axes = [];
                    this._nodeId = nodeId;
                    this._query = Metrics.NewQuery();
                    this._addChart(Metrics.NewAxis(Metrics.Select.AvgRate(_nodeMetric(nodeId, "calls.success"))
                        .title("Successful Calls"))
                        .label("Count / 10 sec."));
                    this._addChart(Metrics.NewAxis(Metrics.Select.AvgRate(_nodeMetric(nodeId, "calls.error"))
                        .title("Error Calls"))
                        .label("Count / 10 sec."));
                    this.exec = new Metrics.Executor(this._query);
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller.prototype.RenderPrimaryStats = function () {
                    var nodeStats = nodeStatuses.GetStatus(this._nodeId);
                    if (nodeStats) {
                        return m(".primary-stats", [
                            m(".stat", [
                                m("span.title", "Started At"),
                                m("span.value", Utils.Format.Date(new Date(Utils.Convert.NanoToMilli(nodeStats.started_at))))
                            ]),
                            m(".stat", [
                                m("span.title", "Last Updated At"),
                                m("span.value", Utils.Format.Date(new Date(Utils.Convert.NanoToMilli(nodeStats.updated_at))))
                            ]),
                            m(".stat", [
                                m("span.title", "Total Ranges"),
                                m("span.value", nodeStats.range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Total Live Bytes"),
                                m("span.value", Utils.Format.Bytes(nodeStats.stats.live_bytes))
                            ]),
                            m(".stat", [
                                m("span.title", "Leader Ranges"),
                                m("span.value", nodeStats.leader_range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Available"),
                                m("span.value", Utils.Format.Percentage(nodeStats.available_range_count, nodeStats.leader_range_count))
                            ]),
                            m(".stat", [
                                m("span.title", "Fully Replicated"),
                                m("span.value", Utils.Format.Percentage(nodeStats.replicated_range_count, nodeStats.leader_range_count))
                            ])
                        ]);
                    }
                    return m(".primary-stats");
                };
                Controller.prototype.RenderGraphs = function () {
                    var _this = this;
                    return m(".charts", this.axes.map(function (axis) {
                        return m("", { style: "float:left" }, [
                            m("h4", axis.title()),
                            Components.Metrics.LineGraph.create(_this.exec, axis)
                        ]);
                    }));
                };
                Controller.prototype.TargetSet = function () {
                    return {
                        baseRoute: "/nodes/" + this._nodeId + "/",
                        targets: Utils.Prop(Controller.defaultTargets),
                        isActive: Controller.isActive
                    };
                };
                Controller.prototype.GetNodeId = function () {
                    return this._nodeId;
                };
                Controller.prototype._refresh = function () {
                    nodeStatuses.refresh();
                    this.exec.refresh();
                };
                Controller.prototype._addChart = function (axis) {
                    var _this = this;
                    axis.selectors().forEach(function (s) { return _this._query.selectors().push(s); });
                    this.axes.push(axis);
                };
                Controller.defaultTargets = [
                    {
                        title: "Overview",
                        route: ""
                    },
                    {
                        title: "Graphs",
                        route: "graph"
                    }
                ];
                Controller.isActive = function (t) {
                    return ((m.route.param("detail") || "") === t.route);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                var nodeId = m.route.param("node_id");
                return new Controller(nodeId);
            }
            NodePage.controller = controller;
            function view(ctrl) {
                var detail = m.route.param("detail");
                var title = "Nodes: Node " + ctrl.GetNodeId();
                if (detail === "graph") {
                    title += ": Graphs";
                }
                var primaryContent;
                if (detail === "graph") {
                    primaryContent = ctrl.RenderGraphs();
                }
                else {
                    primaryContent = ctrl.RenderPrimaryStats();
                }
                return m(".page", [
                    m(".section.primary", [
                        m.component(NavigationBar, ctrl.TargetSet()),
                        m("h2", title)
                    ]),
                    m(".section", primaryContent)
                ]);
            }
            NodePage.view = view;
        })(NodePage = Nodes.NodePage || (Nodes.NodePage = {}));
    })(Nodes = AdminViews.Nodes || (AdminViews.Nodes = {}));
})(AdminViews || (AdminViews = {}));
// source: pages/stores.ts
/// <reference path="../external/mithril/mithril.d.ts" />
/// <reference path="../models/status.ts" />
/// <reference path="../components/metrics.ts" />
/// <reference path="../components/table.ts" />
/// <reference path="../components/navbar.ts" />
/// <reference path="../util/format.ts" />
var AdminViews;
(function (AdminViews) {
    "use strict";
    var Stores;
    (function (Stores) {
        var Metrics = Models.Metrics;
        var storeStatuses = new Models.Status.Stores();
        function _storeMetric(storeId, metric) {
            return "cr.store." + metric + "." + storeId;
        }
        var StoresPage;
        (function (StoresPage) {
            var Controller = (function () {
                function Controller(nodeId) {
                    var _this = this;
                    this.columns = Utils.Prop(Controller.comparisonColumns);
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller.prototype.RenderPrimaryStats = function () {
                    var allStats = storeStatuses.totalStatus();
                    if (allStats) {
                        return m(".primary-stats", [
                            m(".stat", [
                                m("span.title", "Total Ranges"),
                                m("span.value", allStats.range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Total Live Bytes"),
                                m("span.value", Utils.Format.Bytes(allStats.stats.live_bytes))
                            ]),
                            m(".stat", [
                                m("span.title", "Leader Ranges"),
                                m("span.value", allStats.leader_range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Available"),
                                m("span.value", Utils.Format.Percentage(allStats.available_range_count, allStats.leader_range_count))
                            ]),
                            m(".stat", [
                                m("span.title", "Fully Replicated"),
                                m("span.value", Utils.Format.Percentage(allStats.replicated_range_count, allStats.leader_range_count))
                            ])
                        ]);
                    }
                    return m(".primary-stats");
                };
                Controller.prototype._refresh = function () {
                    storeStatuses.refresh();
                };
                Controller.comparisonColumns = [
                    {
                        title: "Store ID",
                        view: function (status) {
                            return m("a", { href: "/stores/" + status.desc.store_id, config: m.route }, status.desc.store_id.toString());
                        },
                        sortable: true,
                        sortValue: function (status) { return status.desc.store_id; }
                    },
                    {
                        title: "Node ID",
                        view: function (status) {
                            return m("a", { href: "/nodes/" + status.desc.node.node_id, config: m.route }, status.desc.node.node_id.toString());
                        },
                        sortable: true,
                        sortValue: function (status) { return status.desc.node.node_id; }
                    },
                    {
                        title: "Address",
                        view: function (status) { return status.desc.node.address.address; },
                        sortable: true
                    },
                    {
                        title: "Started At",
                        view: function (status) {
                            var date = new Date(Utils.Convert.NanoToMilli(status.started_at));
                            return Utils.Format.Date(date);
                        },
                        sortable: true
                    },
                    {
                        title: "Live Bytes",
                        view: function (status) { return Utils.Format.Bytes(status.stats.live_bytes); },
                        sortable: true,
                        sortValue: function (status) { return status.stats.live_bytes; }
                    }
                ];
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                return new Controller();
            }
            StoresPage.controller = controller;
            function view(ctrl) {
                var comparisonData = {
                    columns: ctrl.columns,
                    rows: storeStatuses.allStatuses
                };
                return m(".page", [
                    m(".section.primary", m("h2", "Stores Overview")),
                    m(".section.primary", ctrl.RenderPrimaryStats()),
                    m(".section", m(".stats-table", Components.Table.create(comparisonData)))
                ]);
            }
            StoresPage.view = view;
        })(StoresPage = Stores.StoresPage || (Stores.StoresPage = {}));
        var StorePage;
        (function (StorePage) {
            var NavigationBar = Components.NavigationBar;
            var Controller = (function () {
                function Controller(storeId) {
                    var _this = this;
                    this.axes = [];
                    this._storeId = storeId;
                    this._query = Metrics.NewQuery();
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "keycount"))
                        .title("Key Count"))
                        .label("Count"));
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "livecount"))
                        .title("Live Value Count"))
                        .label("Count"));
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "valcount"))
                        .title("Total Value Count"))
                        .label("Count"));
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "intentcount"))
                        .title("Intent Count"))
                        .label("Count"));
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "ranges"))
                        .title("Range Count"))
                        .label("Count"));
                    this._addChart(Metrics.NewAxis(Metrics.Select.Avg(_storeMetric(storeId, "livebytes"))
                        .title("Live Bytes"))
                        .label("Bytes")
                        .format(Utils.Format.Bytes));
                    this.exec = new Metrics.Executor(this._query);
                    this._refresh();
                    this._interval = setInterval(function () { return _this._refresh(); }, Controller._queryEveryMS);
                }
                Controller.prototype.onunload = function () {
                    clearInterval(this._interval);
                };
                Controller.prototype.RenderPrimaryStats = function () {
                    var storeStats = storeStatuses.GetStatus(this._storeId);
                    if (storeStats) {
                        return m(".primary-stats", [
                            m(".stat", [
                                m("span.title", "Started At"),
                                m("span.value", Utils.Format.Date(new Date(Utils.Convert.NanoToMilli(storeStats.started_at))))
                            ]),
                            m(".stat", [
                                m("span.title", "Last Updated At"),
                                m("span.value", Utils.Format.Date(new Date(Utils.Convert.NanoToMilli(storeStats.updated_at))))
                            ]),
                            m(".stat", [
                                m("span.title", "Total Ranges"),
                                m("span.value", storeStats.range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Total Live Bytes"),
                                m("span.value", Utils.Format.Bytes(storeStats.stats.live_bytes))
                            ]),
                            m(".stat", [
                                m("span.title", "Leader Ranges"),
                                m("span.value", storeStats.leader_range_count)
                            ]),
                            m(".stat", [
                                m("span.title", "Available"),
                                m("span.value", Utils.Format.Percentage(storeStats.available_range_count, storeStats.leader_range_count))
                            ]),
                            m(".stat", [
                                m("span.title", "Fully Replicated"),
                                m("span.value", Utils.Format.Percentage(storeStats.replicated_range_count, storeStats.leader_range_count))
                            ])
                        ]);
                    }
                    return m(".primary-stats");
                };
                Controller.prototype.RenderGraphs = function () {
                    var _this = this;
                    return m(".charts", this.axes.map(function (axis) {
                        return m("", { style: "float:left" }, [
                            m("h4", axis.title()),
                            Components.Metrics.LineGraph.create(_this.exec, axis)
                        ]);
                    }));
                };
                Controller.prototype.TargetSet = function () {
                    return {
                        baseRoute: "/stores/" + this._storeId + "/",
                        targets: Utils.Prop(Controller.defaultTargets),
                        isActive: Controller.isActive
                    };
                };
                Controller.prototype.GetStoreId = function () {
                    return this._storeId;
                };
                Controller.prototype._refresh = function () {
                    storeStatuses.refresh();
                    this.exec.refresh();
                };
                Controller.prototype._addChart = function (axis) {
                    var _this = this;
                    axis.selectors().forEach(function (s) { return _this._query.selectors().push(s); });
                    this.axes.push(axis);
                };
                Controller.defaultTargets = [
                    {
                        title: "Overview",
                        route: ""
                    },
                    {
                        title: "Graphs",
                        route: "graph"
                    }
                ];
                Controller.isActive = function (t) {
                    return ((m.route.param("detail") || "") === t.route);
                };
                Controller._queryEveryMS = 10000;
                return Controller;
            })();
            function controller() {
                var storeId = m.route.param("store_id");
                return new Controller(storeId);
            }
            StorePage.controller = controller;
            function view(ctrl) {
                var detail = m.route.param("detail");
                var title = "Stores: Store " + ctrl.GetStoreId();
                if (detail === "graph") {
                    title += ": Graphs";
                }
                var primaryContent;
                if (detail === "graph") {
                    primaryContent = ctrl.RenderGraphs();
                }
                else {
                    primaryContent = ctrl.RenderPrimaryStats();
                }
                return m(".page", [
                    m(".section.primary", [
                        m.component(NavigationBar, ctrl.TargetSet()),
                        m("h2", title)
                    ]),
                    m(".section", primaryContent)
                ]);
            }
            StorePage.view = view;
        })(StorePage = Stores.StorePage || (Stores.StorePage = {}));
    })(Stores = AdminViews.Stores || (AdminViews.Stores = {}));
})(AdminViews || (AdminViews = {}));
// source: app.ts
/// <reference path="external/mithril/mithril.d.ts" />
/// <reference path="pages/navigation.ts" />
/// <reference path="pages/graph.ts" />
/// <reference path="pages/log.ts" />
/// <reference path="pages/monitor.ts" />
/// <reference path="pages/nodes.ts" />
/// <reference path="pages/stores.ts" />
m.mount(document.getElementById("header"), AdminViews.SubModules.TitleBar);
m.route.mode = "hash";
m.route(document.getElementById("root"), "/nodes", {
    "/graph": AdminViews.Graph.Page,
    "/logs": AdminViews.Log.Page,
    "/logs/:node_id": AdminViews.Log.Page,
    "/monitor": AdminViews.Monitor.Page,
    "/node": AdminViews.Nodes.NodesPage,
    "/nodes": AdminViews.Nodes.NodesPage,
    "/node/:node_id": AdminViews.Nodes.NodePage,
    "/nodes/:node_id": AdminViews.Nodes.NodePage,
    "/node/:node_id/:detail": AdminViews.Nodes.NodePage,
    "/nodes/:node_id/:detail": AdminViews.Nodes.NodePage,
    "/store": AdminViews.Stores.StorePage,
    "/stores": AdminViews.Stores.StoresPage,
    "/store/:store_id": AdminViews.Stores.StorePage,
    "/stores/:store_id": AdminViews.Stores.StorePage,
    "/store/:store_id/:detail": AdminViews.Stores.StorePage,
    "/stores/:store_id/:detail": AdminViews.Stores.StorePage
});
