load("@aspect_bazel_lib//lib/private:copy_directory_toolchain.bzl", "copy_directory_toolchains_repo")
load("@aspect_bazel_lib//lib/private:copy_to_directory_toolchain.bzl", "copy_to_directory_toolchains_repo")
load("@rules_nodejs//nodejs:repositories.bzl", "node_repositories")
load("@rules_nodejs//nodejs/private:nodejs_repo_host_os_alias.bzl", "nodejs_repo_host_os_alias")
load("@rules_nodejs//nodejs/private:toolchains_repo.bzl", "toolchains_repo")

_NODE_VERSION = "16.14.2"
_NODE_VERSIONS = {
    "darwin_amd64": ("node-v16.14.2-darwin-x64.tar.gz", "node-v16.14.2-darwin-x64", "d3076ca7fcc7269c8ff9b03fe7d1c277d913a7e84a46a14eff4af7791ff9d055"),
    "darwin_arm64": ("node-v16.14.2-darwin-arm64.tar.gz", "node-v16.14.2-darwin-arm64", "a66d9217d2003bd416d3dd06dfd2c7a044c4c9ff2e43a27865790bd0d59c682d"),
    "linux_amd64": ("node-v16.14.2-linux-x64.tar.xz", "node-v16.14.2-linux-x64", "e40c6f81bfd078976d85296b5e657be19e06862497741ad82902d0704b34bb1b"),
    "linux_arm64": ("node-v16.14.2-linux-arm64.tar.xz", "node-v16.14.2-linux-arm64", "f7c5a573c06a520d6c2318f6ae204141b8420386553a692fc359f8ae3d88df96"),
    "linux_s390x": ("node-v16.14.2-linux-s390x.tar.xz", "node-v16.14.2-linux-s390x", "3197925919ca357e17a31132dc6ef4e5afae819fa09905cfe9f7ff7924a00bf5"),
    "windows_amd64": ("node-v16.14.2-win-x64.zip", "node-v16.14.2-win-x64", "4731da4fbb2015d414e871fa9118cabb643bdb6dbdc8a69a3ed563266ac93229"),
}

# Versions of copy_directory and copy_to_directory from bazel-lib (github.com/aspect-build/bazel-lib)
# These are built by `build/scripts/build-bazel-lib-helpers.sh`.
# Update these when updating `aspect_bazel_lib` (see comment in `WORKSPACE`)
_URL_PREFIX = "https://storage.googleapis.com/public-bazel-artifacts/js/aspect-bazel-lib-utils-20250224-115846"
_COPY_DIRECTORY_URL_PREFIX = _URL_PREFIX + "/copy_directory-"

_COPY_DIRECTORY_VERSIONS = {
    "darwin_amd64": "2f4befad49d25f867221f9beb7d03b174c03af5395fc860c24447c85fbdd2d7d",
    "darwin_arm64": "e8ca2ab1655cc71fab3106d433dd4274389bdf9f143f586ab83a6f8ab7aeabad",
    "linux_amd64": "fae863215e3acc6e5e50ac2979e6d9d29c95b57fa1eb719de801926db57e5941",
    "linux_arm64": "7dff652aa2b1e4d5ab163cf2be841038da1cc3530e9875d5fb2cef0ef4e9efb8",
    "linux_s390x": "8238e319e64371f188914992fd0745d153452bd79155185a069b939d52f6407f",
    "windows_amd64": "a12cd040fa48e7989a47e6a1388b8a84ed1b6b825370e03973f48e6cf273b7f8",
}

_COPY_TO_DIRECTORY_URL_PREFIX = _URL_PREFIX + "/copy_to_directory-"

_COPY_TO_DIRECTORY_VERSIONS = {
    "darwin_amd64": "6132ce07141ed17d658acb72a777bf619b17a18b6f3950b3689ac057f81ebdb0",
    "darwin_arm64": "fe8ba630878178adcebe52097dde407b1554c6118c3a17b67c0f47f461c7b3d5",
    "linux_amd64": "6ce36555a198a42fa1642b19fcd685d9584fb71e0da9b9fec15dc14f43527171",
    "linux_arm64": "17015a948a3d106222c157925a4b5edc832d336beb5fc7f8d34a7ee0c827809d",
    "linux_s390x": "5bf65abc6c189febccee635d6865ab009e33825bc9de9be2d13b801bbe3d2da3",
    "windows_amd64": "15f857eeb830a02b4eeb421ac0988a90f8255d95ee109596259aaf129fb4edbd",
}

# NOTE: This code is adapted from upstream at
# https://github.com/aspect-build/bazel-lib/blob/c89ec6a554321cf4ff0430fd388edefb7f606ccc/lib/private/copy_directory_toolchain.bzl#LL155C1-L188C2
# We can't use the upstream version of this code as written so we need to duplicate some stuff.
def _copy_directory_platform_repo_impl(rctx):
    plat = rctx.attr.platform
    is_windows = "windows" in rctx.attr.platform
    url = _COPY_DIRECTORY_URL_PREFIX + plat + (".exe" if is_windows else "")
    rctx.download(
        url = url,
        output = "copy_directory.exe" if is_windows else "copy_directory",
        executable = True,
        sha256 = _COPY_DIRECTORY_VERSIONS[plat]
    )
    build_content = """# @generated by @com_github_cockroachdb_cockroach//build:nodejs.bzl
load("@aspect_bazel_lib//lib/private:copy_directory_toolchain.bzl", "copy_directory_toolchain")
exports_files(["{0}"])
copy_directory_toolchain(name = "copy_directory_toolchain", bin = "{0}", visibility = ["//visibility:public"])
""".format("copy_directory.exe" if is_windows else "copy_directory")
    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

copy_directory_platform_repo = repository_rule(
    implementation = _copy_directory_platform_repo_impl,
    doc = "Fetch external tools needed for copy_directory toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = _COPY_DIRECTORY_VERSIONS.keys()),
    },
)

def _copy_to_directory_platform_repo_impl(rctx):
    plat = rctx.attr.platform
    is_windows = "windows" in rctx.attr.platform
    url = _COPY_TO_DIRECTORY_URL_PREFIX + plat + (".exe" if is_windows else "")
    rctx.download(
        url = url,
        output = "copy_to_directory.exe" if is_windows else "copy_to_directory",
        executable = True,
        sha256 = _COPY_TO_DIRECTORY_VERSIONS[plat]
    )
    build_content = """# @generated by @com_github_cockroachdb_cockroach//build:nodejs.bzl
load("@aspect_bazel_lib//lib/private:copy_to_directory_toolchain.bzl", "copy_to_directory_toolchain")
exports_files(["{0}"])
copy_to_directory_toolchain(name = "copy_to_directory_toolchain", bin = "{0}", visibility = ["//visibility:public"])
""".format("copy_to_directory.exe" if is_windows else "copy_to_directory")

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", build_content)

copy_to_directory_platform_repo = repository_rule(
    implementation = _copy_to_directory_platform_repo_impl,
    doc = "Fetch external tools needed for copy_to_directory toolchain",
    attrs = {
        "platform": attr.string(mandatory = True, values = _COPY_TO_DIRECTORY_VERSIONS.keys()),
    },
)

# Helper function used in WORKSPACE.
# Note this function basically re-implements the functionality of the nodejs_register_toolchains function
# in @rules_js//nodejs:repositories.bzl.
# We do this to have more control over how this stuff is created, to use our
# node mirrors, etc.
def declare_nodejs_repos():
    for name in _NODE_VERSIONS:
        node_repositories(
            name = "nodejs_" + name,
            node_repositories = {
                _NODE_VERSION + "-" + name: _NODE_VERSIONS[name]
            },
            node_urls = [
                "https://storage.googleapis.com/public-bazel-artifacts/js/node/v{version}/{filename}",
            ],
            node_version = _NODE_VERSION,
            platform = name,
        )
    nodejs_repo_host_os_alias(name = "nodejs", user_node_repository_name = "nodejs")
    nodejs_repo_host_os_alias(name = "nodejs_host", user_node_repository_name = "nodejs")
    toolchains_repo(name = "nodejs_toolchains", user_node_repository_name = "nodejs")
    # NB: npm_import has weird behavior where it transparently makes these
    # copy_directory/copy_to_directory repos for you if you do not set up the
    # repositories beforehand. This is weird behavior that will hopefully be
    # fixed in a later version. For now it's important this function be called
    # before we call into npm_import() in WORKSPACE.
    # Ref: https://github.com/aspect-build/rules_js/blob/a043b6cd1138e608272c2feef8905baf85d86b97/npm/private/npm_import.bzl#L1121
    for plat in _COPY_DIRECTORY_VERSIONS:
        copy_directory_platform_repo(
            name = "copy_directory_" + plat,
            platform = plat,
        )
    for plat in _COPY_TO_DIRECTORY_VERSIONS:
        copy_to_directory_platform_repo(
            name = "copy_to_directory_" + plat,
            platform = plat,
        )
    copy_directory_toolchains_repo(
        name = "copy_directory_toolchains",
        user_repository_name = "copy_directory",
    )
    copy_to_directory_toolchains_repo(
        name = "copy_to_directory_toolchains",
        user_repository_name = "copy_to_directory",
    )
